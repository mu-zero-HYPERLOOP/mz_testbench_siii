
track_ecu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013a64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  08013bf8  08013bf8  00023bf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801412c  0801412c  00030088  2**0
                  CONTENTS
  4 .ARM          00000008  0801412c  0801412c  0002412c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014134  08014134  00030088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  08014134  08014134  00024134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08014154  08014154  00024154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0801415c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030088  2**0
                  CONTENTS
 10 .bss          0000a180  20000088  20000088  00030088  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  2000a208  2000a208  00030088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00046ce8  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000bb9b  00000000  00000000  00076da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000032a8  00000000  00000000  00082940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002f28  00000000  00000000  00085be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000322c8  00000000  00000000  00088b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000411c5  00000000  00000000  000badd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff307  00000000  00000000  000fbf9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001fb2a4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000dfc4  00000000  00000000  001fb2f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013bdc 	.word	0x08013bdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08013bdc 	.word	0x08013bdc

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2iz>:
 8000aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d215      	bcs.n	8000ade <__aeabi_d2iz+0x36>
 8000ab2:	d511      	bpl.n	8000ad8 <__aeabi_d2iz+0x30>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d912      	bls.n	8000ae4 <__aeabi_d2iz+0x3c>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ace:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d105      	bne.n	8000af0 <__aeabi_d2iz+0x48>
 8000ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae8:	bf08      	it	eq
 8000aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aee:	4770      	bx	lr
 8000af0:	f04f 0000 	mov.w	r0, #0
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2uiz>:
 8000af8:	004a      	lsls	r2, r1, #1
 8000afa:	d211      	bcs.n	8000b20 <__aeabi_d2uiz+0x28>
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d211      	bcs.n	8000b26 <__aeabi_d2uiz+0x2e>
 8000b02:	d50d      	bpl.n	8000b20 <__aeabi_d2uiz+0x28>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d40e      	bmi.n	8000b2c <__aeabi_d2uiz+0x34>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d102      	bne.n	8000b32 <__aeabi_d2uiz+0x3a>
 8000b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b30:	4770      	bx	lr
 8000b32:	f04f 0000 	mov.w	r0, #0
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_d2f>:
 8000b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b40:	bf24      	itt	cs
 8000b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b4a:	d90d      	bls.n	8000b68 <__aeabi_d2f+0x30>
 8000b4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b60:	bf08      	it	eq
 8000b62:	f020 0001 	biceq.w	r0, r0, #1
 8000b66:	4770      	bx	lr
 8000b68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b6c:	d121      	bne.n	8000bb2 <__aeabi_d2f+0x7a>
 8000b6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b72:	bfbc      	itt	lt
 8000b74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b78:	4770      	bxlt	lr
 8000b7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b82:	f1c2 0218 	rsb	r2, r2, #24
 8000b86:	f1c2 0c20 	rsb	ip, r2, #32
 8000b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b92:	bf18      	it	ne
 8000b94:	f040 0001 	orrne.w	r0, r0, #1
 8000b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ba4:	ea40 000c 	orr.w	r0, r0, ip
 8000ba8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb0:	e7cc      	b.n	8000b4c <__aeabi_d2f+0x14>
 8000bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bb6:	d107      	bne.n	8000bc8 <__aeabi_d2f+0x90>
 8000bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bbc:	bf1e      	ittt	ne
 8000bbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bc6:	4770      	bxne	lr
 8000bc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <_ZN3can11MessageBaseC1Emhb>:
        uint8_t dlc;
        const bool isExtendedId;
        uint64_t intel;
        uint64_t motorola;

        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt) : id{_id}, dlc{_dlc}, isExtendedId{_isExt}, intel{0}, motorola{0} {}
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	60f8      	str	r0, [r7, #12]
 8000ee4:	60b9      	str	r1, [r7, #8]
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	461a      	mov	r2, r3
 8000eea:	460b      	mov	r3, r1
 8000eec:	71fb      	strb	r3, [r7, #7]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	71bb      	strb	r3, [r7, #6]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	68ba      	ldr	r2, [r7, #8]
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	79fa      	ldrb	r2, [r7, #7]
 8000efc:	711a      	strb	r2, [r3, #4]
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	79ba      	ldrb	r2, [r7, #6]
 8000f02:	715a      	strb	r2, [r3, #5]
 8000f04:	68f9      	ldr	r1, [r7, #12]
 8000f06:	f04f 0200 	mov.w	r2, #0
 8000f0a:	f04f 0300 	mov.w	r3, #0
 8000f0e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000f12:	68f9      	ldr	r1, [r7, #12]
 8000f14:	f04f 0200 	mov.w	r2, #0
 8000f18:	f04f 0300 	mov.w	r3, #0
 8000f1c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4618      	mov	r0, r3
 8000f24:	3714      	adds	r7, #20
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr

08000f2e <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>:
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
        }


        // Convert message to STM32 CAN_TxHeaderTypeDef and txBuf
        void toBuf(CAN_TxHeaderTypeDef& txHeader, uint8_t txBuf[8], CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8000f2e:	b490      	push	{r4, r7}
 8000f30:	b084      	sub	sp, #16
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	60f8      	str	r0, [r7, #12]
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
 8000f3a:	603b      	str	r3, [r7, #0]
            if(isExtendedId) {
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	795b      	ldrb	r3, [r3, #5]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d00a      	beq.n	8000f5a <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x2c>
                txHeader.StdId = 0;
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = id;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
 8000f50:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_EXT;
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	2204      	movs	r2, #4
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	e009      	b.n	8000f6e <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x40>
            } else {
                txHeader.StdId = id;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = 0;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	2200      	movs	r2, #0
 8000f66:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_STD;
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
            }
            txHeader.RTR = bus + CAN_RTR_DATA; // Upper 16-bit contain bus. Lower 16-bit contain RTR
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	60da      	str	r2, [r3, #12]
            txHeader.DLC = dlc;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	791b      	ldrb	r3, [r3, #4]
 8000f78:	461a      	mov	r2, r3
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	611a      	str	r2, [r3, #16]
            txHeader.TransmitGlobalTime = DISABLE;
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	2200      	movs	r2, #0
 8000f82:	751a      	strb	r2, [r3, #20]
            txBuf[0] = (intel & 0xFF) | ((motorola >> 56) & 0xFF);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f8a:	b2d4      	uxtb	r4, r2
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000f92:	f04f 0200 	mov.w	r2, #0
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	0e0a      	lsrs	r2, r1, #24
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	b2d3      	uxtb	r3, r2
 8000fa0:	4323      	orrs	r3, r4
 8000fa2:	b2da      	uxtb	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	701a      	strb	r2, [r3, #0]
            txBuf[1] = ((intel >> 8) & 0xFF) | ((motorola >> 48) & 0xFF);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	0a02      	lsrs	r2, r0, #8
 8000fb8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000fbc:	0a0b      	lsrs	r3, r1, #8
 8000fbe:	b2d4      	uxtb	r4, r2
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	0c0a      	lsrs	r2, r1, #16
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4322      	orrs	r2, r4
 8000fda:	b2d2      	uxtb	r2, r2
 8000fdc:	701a      	strb	r2, [r3, #0]
            txBuf[2] = ((intel >> 16) & 0xFF) | ((motorola >> 40) & 0xFF);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	0c02      	lsrs	r2, r0, #16
 8000fee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff2:	0c0b      	lsrs	r3, r1, #16
 8000ff4:	b2d4      	uxtb	r4, r2
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000ffc:	f04f 0200 	mov.w	r2, #0
 8001000:	f04f 0300 	mov.w	r3, #0
 8001004:	0a0a      	lsrs	r2, r1, #8
 8001006:	2300      	movs	r3, #0
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3302      	adds	r3, #2
 800100e:	4322      	orrs	r2, r4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	701a      	strb	r2, [r3, #0]
            txBuf[3] = ((intel >> 24) & 0xFF) | ((motorola >> 32) & 0xFF);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	f04f 0300 	mov.w	r3, #0
 8001022:	0e02      	lsrs	r2, r0, #24
 8001024:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001028:	0e0b      	lsrs	r3, r1, #24
 800102a:	b2d4      	uxtb	r4, r2
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001032:	f04f 0200 	mov.w	r2, #0
 8001036:	f04f 0300 	mov.w	r3, #0
 800103a:	000a      	movs	r2, r1
 800103c:	2300      	movs	r3, #0
 800103e:	b2d2      	uxtb	r2, r2
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3303      	adds	r3, #3
 8001044:	4322      	orrs	r2, r4
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	701a      	strb	r2, [r3, #0]
            txBuf[4] = ((intel >> 32) & 0xFF) | ((motorola >> 24) & 0xFF);
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	f04f 0300 	mov.w	r3, #0
 8001058:	000a      	movs	r2, r1
 800105a:	2300      	movs	r3, #0
 800105c:	b2d4      	uxtb	r4, r2
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001064:	f04f 0200 	mov.w	r2, #0
 8001068:	f04f 0300 	mov.w	r3, #0
 800106c:	0e02      	lsrs	r2, r0, #24
 800106e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001072:	0e0b      	lsrs	r3, r1, #24
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3304      	adds	r3, #4
 800107a:	4322      	orrs	r2, r4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	701a      	strb	r2, [r3, #0]
            txBuf[5] = ((intel >> 40) & 0xFF) | ((motorola >> 16) & 0xFF);
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	0a0a      	lsrs	r2, r1, #8
 8001090:	2300      	movs	r3, #0
 8001092:	b2d4      	uxtb	r4, r2
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	f04f 0300 	mov.w	r3, #0
 80010a2:	0c02      	lsrs	r2, r0, #16
 80010a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010a8:	0c0b      	lsrs	r3, r1, #16
 80010aa:	b2d2      	uxtb	r2, r2
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3305      	adds	r3, #5
 80010b0:	4322      	orrs	r2, r4
 80010b2:	b2d2      	uxtb	r2, r2
 80010b4:	701a      	strb	r2, [r3, #0]
            txBuf[6] = ((intel >> 48) & 0xFF) | ((motorola >> 8) & 0xFF);
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	f04f 0300 	mov.w	r3, #0
 80010c4:	0c0a      	lsrs	r2, r1, #16
 80010c6:	2300      	movs	r3, #0
 80010c8:	b2d4      	uxtb	r4, r2
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010d0:	f04f 0200 	mov.w	r2, #0
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	0a02      	lsrs	r2, r0, #8
 80010da:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80010de:	0a0b      	lsrs	r3, r1, #8
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	3306      	adds	r3, #6
 80010e6:	4322      	orrs	r2, r4
 80010e8:	b2d2      	uxtb	r2, r2
 80010ea:	701a      	strb	r2, [r3, #0]
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010f2:	f04f 0200 	mov.w	r2, #0
 80010f6:	f04f 0300 	mov.w	r3, #0
 80010fa:	0e0a      	lsrs	r2, r1, #24
 80010fc:	2300      	movs	r3, #0
 80010fe:	b2d1      	uxtb	r1, r2
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3307      	adds	r3, #7
 800110c:	430a      	orrs	r2, r1
 800110e:	b2d2      	uxtb	r2, r2
 8001110:	701a      	strb	r2, [r3, #0]
        }
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bc90      	pop	{r4, r7}
 800111a:	4770      	bx	lr

0800111c <_ZN9TxMessageC1Ev>:
struct RxMessage {
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxBuf[8];
};

struct TxMessage {
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	461a      	mov	r2, r3
 8001128:	2300      	movs	r3, #0
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	6053      	str	r3, [r2, #4]
 800112e:	6093      	str	r3, [r2, #8]
 8001130:	60d3      	str	r3, [r2, #12]
 8001132:	6113      	str	r3, [r2, #16]
 8001134:	6153      	str	r3, [r2, #20]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4618      	mov	r0, r3
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <_ZNK3can11MessageBase12getTxMessageEm>:
        void toBuf(TxMessage& txMsg, CAN_BusTypeDef bus = buses::ANY) const noexcept {
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
        }

        // Convert message to CANzero TxMessage and return created struct
        TxMessage getTxMessage(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
            TxMessage txMsg;
 8001150:	68f8      	ldr	r0, [r7, #12]
 8001152:	f7ff ffe3 	bl	800111c <_ZN9TxMessageC1Ev>
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f103 0218 	add.w	r2, r3, #24
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68f9      	ldr	r1, [r7, #12]
 8001160:	68b8      	ldr	r0, [r7, #8]
 8001162:	f7ff fee4 	bl	8000f2e <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>
            return txMsg;
 8001166:	bf00      	nop
        }
 8001168:	68f8      	ldr	r0, [r7, #12]
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <_ZNK3can11MessageBase4sendEm>:

        // Use this function to send a message over the queue to the CAN bus
        void send(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
            TxMessage sendTxMessage = getTxMessage(bus);
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	683a      	ldr	r2, [r7, #0]
 8001180:	6879      	ldr	r1, [r7, #4]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ffde 	bl	8001144 <_ZNK3can11MessageBase12getTxMessageEm>
            if(osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0) != osOK) {
 8001188:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <_ZNK3can11MessageBase4sendEm+0x54>)
 800118a:	6818      	ldr	r0, [r3, #0]
 800118c:	f107 0108 	add.w	r1, r7, #8
 8001190:	2300      	movs	r3, #0
 8001192:	2200      	movs	r2, #0
 8001194:	f00e f8c4 	bl	800f320 <osMessageQueuePut>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	bf14      	ite	ne
 800119e:	2301      	movne	r3, #1
 80011a0:	2300      	moveq	r3, #0
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d008      	beq.n	80011ba <_ZNK3can11MessageBase4sendEm+0x4a>
                printDebug("Failed sending message %lu because queue is full!\n", sendTxMessage.txHeader.StdId);
 80011a8:	f011 fd34 	bl	8012c14 <vPortEnterCritical>
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	4619      	mov	r1, r3
 80011b0:	4805      	ldr	r0, [pc, #20]	; (80011c8 <_ZNK3can11MessageBase4sendEm+0x58>)
 80011b2:	f00d fc5f 	bl	800ea74 <printf_>
 80011b6:	f011 fd5d 	bl	8012c74 <vPortExitCritical>
            }
        }
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	; 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	2000062c 	.word	0x2000062c
 80011c8:	08013bf8 	.word	0x08013bf8

080011cc <_ZN3can7MessageINS_8messages11SENSOR_EMCYEEC1Ev>:
    public:

        ~Message() noexcept = default;

        // Constructor for sending a message
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	2300      	movs	r3, #0
 80011d8:	2204      	movs	r2, #4
 80011da:	2181      	movs	r1, #129	; 0x81
 80011dc:	f7ff fe7e 	bl	8000edc <_ZN3can11MessageBaseC1Emhb>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4618      	mov	r0, r3
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <_ZN7canzero9emergency14consumer_entryEPv>:
#include <cinttypes>
#include "FreeRTOS.h"
#include "task.h"


void canzero::emergency::consumer_entry(void* argv){
 80011ea:	b5b0      	push	{r4, r5, r7, lr}
 80011ec:	b08c      	sub	sp, #48	; 0x30
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
	// Timeout for waiting for an emergency notification
	constexpr uint32_t EMERGENCY_WAIT_TIMEOUT_MS = 500;
 80011f2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011f6:	62bb      	str	r3, [r7, #40]	; 0x28

	can::Message<can::messages::CANZERO_EMCY> emcyMessage;
 80011f8:	f107 0310 	add.w	r3, r7, #16
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ffe5 	bl	80011cc <_ZN3can7MessageINS_8messages11SENSOR_EMCYEEC1Ev>

	uint32_t emergencyBuffer = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
	uint32_t lastEmergencyBuffer = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (true) {
		// Wait for notifications with a timeout without clearing flags
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 800120a:	f107 020c 	add.w	r2, r7, #12
 800120e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001212:	2100      	movs	r1, #0
 8001214:	2000      	movs	r0, #0
 8001216:	f010 fee9 	bl	8011fec <xTaskNotifyWait>

		// When there was a change, call the user handler function
		if (emergencyBuffer != lastEmergencyBuffer) {
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800121e:	429a      	cmp	r2, r3
 8001220:	d001      	beq.n	8001226 <_ZN7canzero9emergency14consumer_entryEPv+0x3c>
			//TODO: pass warning parameter.
			canzero::handle_emergency_warning();
 8001222:	f000 ff59 	bl	80020d8 <_ZN7canzero24handle_emergency_warningEv>
			//canzero::handle_emergency_warning(emergencyBuffer, lastEmergencyBuffer);
		}

		// Send CAN message when there was a change or when there is an error / warning present
		if (emergencyBuffer != 0 || emergencyBuffer != lastEmergencyBuffer) {
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d103      	bne.n	8001234 <_ZN7canzero9emergency14consumer_entryEPv+0x4a>
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001230:	429a      	cmp	r2, r3
 8001232:	d00b      	beq.n	800124c <_ZN7canzero9emergency14consumer_entryEPv+0x62>
			emcyMessage.intel = emergencyBuffer;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2200      	movs	r2, #0
 8001238:	461c      	mov	r4, r3
 800123a:	4615      	mov	r5, r2
 800123c:	e9c7 4506 	strd	r4, r5, [r7, #24]
			emcyMessage.send();
 8001240:	f107 0310 	add.w	r3, r7, #16
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ff92 	bl	8001170 <_ZNK3can11MessageBase4sendEm>
		}

		lastEmergencyBuffer = emergencyBuffer;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 8001250:	e7db      	b.n	800120a <_ZN7canzero9emergency14consumer_entryEPv+0x20>
	...

08001254 <_ZN7canzero9heartbeat14producer_entryEPv>:
static constexpr size_t MSG_BUFFER_NUM_MESSAGES = 5;	// Number of messages to store in the message buffer
static constexpr size_t MSG_BUFFER_SIZE = MSG_BUFFER_NUM_MESSAGES * (sizeof(RxMessage) + 4); 	// 4 bytes overhead to store the size_t

static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);

void canzero::heartbeat::producer_entry(void* argv){
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	; 0x30
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	//TODO setup callback logic for processRx.

	TxMessage hbTxMessage;
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff5b 	bl	800111c <_ZN9TxMessageC1Ev>
	hbTxMessage.txHeader.StdId = can::messages::CANZERO_Heartbeat::id;
 8001266:	f240 7301 	movw	r3, #1793	; 0x701
 800126a:	60fb      	str	r3, [r7, #12]
	hbTxMessage.txHeader.DLC = can::messages::CANZERO_Heartbeat::dlc;
 800126c:	2301      	movs	r3, #1
 800126e:	61fb      	str	r3, [r7, #28]
	unsigned int frame = 0;
 8001270:	2300      	movs	r3, #0
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 8001274:	f000 fe50 	bl	8001f18 <_ZN7canzero9getStatusEv>
 8001278:	4603      	mov	r3, r0
 800127a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		osMessageQueuePut(czSendQueue, &hbTxMessage, 0, 0);
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <_ZN7canzero9heartbeat14producer_entryEPv+0x60>)
 8001280:	6818      	ldr	r0, [r3, #0]
 8001282:	f107 010c 	add.w	r1, r7, #12
 8001286:	2300      	movs	r3, #0
 8001288:	2200      	movs	r2, #0
 800128a:	f00e f849 	bl	800f320 <osMessageQueuePut>
		osDelay(pdMS_TO_TICKS(canzero::heartbeat::getInterval()));
 800128e:	f000 f841 	bl	8001314 <_ZN7canzero9heartbeat11getIntervalEv>
 8001292:	4603      	mov	r3, r0
 8001294:	461a      	mov	r2, r3
 8001296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129a:	fb02 f303 	mul.w	r3, r2, r3
 800129e:	4a06      	ldr	r2, [pc, #24]	; (80012b8 <_ZN7canzero9heartbeat14producer_entryEPv+0x64>)
 80012a0:	fba2 2303 	umull	r2, r3, r2, r3
 80012a4:	099b      	lsrs	r3, r3, #6
 80012a6:	4618      	mov	r0, r3
 80012a8:	f00d fd5e 	bl	800ed68 <osDelay>
		frame ++;
 80012ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ae:	3301      	adds	r3, #1
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 80012b2:	e7df      	b.n	8001274 <_ZN7canzero9heartbeat14producer_entryEPv+0x20>
 80012b4:	2000062c 	.word	0x2000062c
 80012b8:	10624dd3 	.word	0x10624dd3

080012bc <_ZN7canzero9heartbeat14consumer_entryEPv>:
	}
}

void canzero::heartbeat::consumer_entry(void* argv){
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b08d      	sub	sp, #52	; 0x34
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (true) {
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <_ZN7canzero9heartbeat14consumer_entryEPv+0x50>)
 80012c6:	681c      	ldr	r4, [r3, #0]
 80012c8:	f000 f824 	bl	8001314 <_ZN7canzero9heartbeat11getIntervalEv>
 80012cc:	4603      	mov	r3, r0
 80012ce:	3305      	adds	r3, #5
 80012d0:	461a      	mov	r2, r3
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	fb02 f303 	mul.w	r3, r2, r3
 80012da:	4a0d      	ldr	r2, [pc, #52]	; (8001310 <_ZN7canzero9heartbeat14consumer_entryEPv+0x54>)
 80012dc:	fba2 2303 	umull	r2, r3, r2, r3
 80012e0:	099b      	lsrs	r3, r3, #6
 80012e2:	f107 010c 	add.w	r1, r7, #12
 80012e6:	2224      	movs	r2, #36	; 0x24
 80012e8:	4620      	mov	r0, r4
 80012ea:	f00f fc3f 	bl	8010b6c <xStreamBufferReceive>
 80012ee:	4603      	mov	r3, r0
				pdMS_TO_TICKS(canzero::heartbeat::getInterval() + 5)) != 0) {
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	bf14      	ite	ne
 80012f4:	2301      	movne	r3, #1
 80012f6:	2300      	moveq	r3, #0
 80012f8:	b2db      	uxtb	r3, r3
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d0e2      	beq.n	80012c4 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
			canzero::setStatus((cz_status)message.rxBuf[0]);
 80012fe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001302:	4618      	mov	r0, r3
 8001304:	f000 fdec 	bl	8001ee0 <_ZN7canzero9setStatusE9cz_status>
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 8001308:	e7dc      	b.n	80012c4 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
 800130a:	bf00      	nop
 800130c:	200000a4 	.word	0x200000a4
 8001310:	10624dd3 	.word	0x10624dd3

08001314 <_ZN7canzero9heartbeat11getIntervalEv>:

void canzero::heartbeat::setInterval(uint16_t value){
	OD_HeartbeatInterval_set(value);
}

uint16_t canzero::heartbeat::getInterval(){
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	return OD_HeartbeatInterval_get();
 8001318:	f003 fc14 	bl	8004b44 <_Z24OD_HeartbeatInterval_getv>
 800131c:	4603      	mov	r3, r0
}
 800131e:	4618      	mov	r0, r3
 8001320:	bd80      	pop	{r7, pc}
	...

08001324 <_Z41__static_initialization_and_destruction_0ii>:
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d10c      	bne.n	800134e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800133a:	4293      	cmp	r3, r2
 800133c:	d107      	bne.n	800134e <_Z41__static_initialization_and_destruction_0ii+0x2a>
static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 800133e:	2201      	movs	r2, #1
 8001340:	2100      	movs	r1, #0
 8001342:	20c8      	movs	r0, #200	; 0xc8
 8001344:	f00f fa92 	bl	801086c <xStreamBufferGenericCreate>
 8001348:	4603      	mov	r3, r0
 800134a:	4a03      	ldr	r2, [pc, #12]	; (8001358 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800134c:	6013      	str	r3, [r2, #0]
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200000a4 	.word	0x200000a4

0800135c <_GLOBAL__sub_I__ZN7canzero9heartbeat14producer_entryEPv>:
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
 8001360:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001364:	2001      	movs	r0, #1
 8001366:	f7ff ffdd 	bl	8001324 <_Z41__static_initialization_and_destruction_0ii>
 800136a:	bd80      	pop	{r7, pc}

0800136c <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 800136c:	b480      	push	{r7}
 800136e:	b083      	sub	sp, #12
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d005      	beq.n	80013a4 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	6879      	ldr	r1, [r7, #4]
 80013a0:	2203      	movs	r2, #3
 80013a2:	4798      	blx	r3
    }
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4618      	mov	r0, r3
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}

080013ae <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80013ae:	b480      	push	{r7}
 80013b0:	b083      	sub	sp, #12
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	bf0c      	ite	eq
 80013be:	2301      	moveq	r3, #1
 80013c0:	2300      	movne	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <_ZNSt8functionIFvR9RxMessageEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ffd4 	bl	8001388 <_ZNSt14_Function_baseD1Ev>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <_ZN7canzero10receiver_tC1Ev>:

namespace canzero {

static unsigned int receiverIdAcc = 0;

struct receiver_t {
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 f887 	bl	8001508 <_ZNSt8functionIFvR9RxMessageEEC1Ev>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4618      	mov	r0, r3
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <_ZN7canzero10receiver_tD1Ev>:
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff ffde 	bl	80013d0 <_ZNSt8functionIFvR9RxMessageEED1Ev>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <_ZN7canzero24processRxMessageReceiverER9RxMessage>:
	g_receivers[g_size++] = recv;
	taskEXIT_CRITICAL();
	return id;
}

bool processRxMessageReceiver(RxMessage& message){
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
	bool foundReceiver = false;
 8001428:	2300      	movs	r3, #0
 800142a:	75fb      	strb	r3, [r7, #23]
	if(message.rxHeader.IDE == CAN_ID_STD){
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d12f      	bne.n	8001494 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x74>
		for(uint32_t i = 0;i<g_size;i++){
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	4b31      	ldr	r3, [pc, #196]	; (8001500 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	429a      	cmp	r2, r3
 8001440:	d258      	bcs.n	80014f4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == false) && (message.rxHeader.StdId == g_receivers[i].m_id)){
 8001442:	4930      	ldr	r1, [pc, #192]	; (8001504 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4613      	mov	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	1a9b      	subs	r3, r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	440b      	add	r3, r1
 8001450:	3314      	adds	r3, #20
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d119      	bne.n	800148c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6819      	ldr	r1, [r3, #0]
 800145c:	4829      	ldr	r0, [pc, #164]	; (8001504 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	4613      	mov	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	1a9b      	subs	r3, r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4403      	add	r3, r0
 800146a:	3310      	adds	r3, #16
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4299      	cmp	r1, r3
 8001470:	d10c      	bne.n	800148c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
				g_receivers[i].m_callback(message);
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4613      	mov	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	1a9b      	subs	r3, r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4a21      	ldr	r2, [pc, #132]	; (8001504 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 800147e:	4413      	add	r3, r2
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f84d 	bl	8001522 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 8001488:	2301      	movs	r3, #1
 800148a:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	3301      	adds	r3, #1
 8001490:	613b      	str	r3, [r7, #16]
 8001492:	e7d1      	b.n	8001438 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x18>
			}
		}
	}else{
		for(uint32_t i = 0;i<g_size;i++){
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	4b19      	ldr	r3, [pc, #100]	; (8001500 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68fa      	ldr	r2, [r7, #12]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d228      	bcs.n	80014f4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == true) && (message.rxHeader.ExtId == g_receivers[i].m_id)){
 80014a2:	4918      	ldr	r1, [pc, #96]	; (8001504 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	1a9b      	subs	r3, r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	3314      	adds	r3, #20
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d119      	bne.n	80014ec <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6859      	ldr	r1, [r3, #4]
 80014bc:	4811      	ldr	r0, [pc, #68]	; (8001504 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	4613      	mov	r3, r2
 80014c2:	00db      	lsls	r3, r3, #3
 80014c4:	1a9b      	subs	r3, r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4403      	add	r3, r0
 80014ca:	3310      	adds	r3, #16
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4299      	cmp	r1, r3
 80014d0:	d10c      	bne.n	80014ec <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
				g_receivers[i].m_callback(message);
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	4613      	mov	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	1a9b      	subs	r3, r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4a09      	ldr	r2, [pc, #36]	; (8001504 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80014de:	4413      	add	r3, r2
 80014e0:	6879      	ldr	r1, [r7, #4]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f81d 	bl	8001522 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 80014e8:	2301      	movs	r3, #1
 80014ea:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	3301      	adds	r3, #1
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	e7d1      	b.n	8001498 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x78>
			}
		}
	}
	return foundReceiver;
 80014f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000620 	.word	0x20000620
 8001504:	200000a8 	.word	0x200000a8

08001508 <_ZNSt8functionIFvR9RxMessageEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ff2a 	bl	800136c <_ZNSt14_Function_baseC1Ev>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	4618      	mov	r0, r3
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <_ZNKSt8functionIFvR9RxMessageEEclES1_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8001522:	b5b0      	push	{r4, r5, r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff ff3d 	bl	80013ae <_ZNKSt14_Function_base8_M_emptyEv>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <_ZNKSt8functionIFvR9RxMessageEEclES1_+0x1c>
	__throw_bad_function_call();
 800153a:	f011 fe9a 	bl	8013272 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68dc      	ldr	r4, [r3, #12]
 8001542:	687d      	ldr	r5, [r7, #4]
 8001544:	6838      	ldr	r0, [r7, #0]
 8001546:	f000 f808 	bl	800155a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800154a:	4603      	mov	r3, r0
 800154c:	4619      	mov	r1, r3
 800154e:	4628      	mov	r0, r5
 8001550:	47a0      	blx	r4
 8001552:	bf00      	nop
    }
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bdb0      	pop	{r4, r5, r7, pc}

0800155a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4618      	mov	r0, r3
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4618      	mov	r0, r3
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8001586:	b580      	push	{r7, lr}
 8001588:	b084      	sub	sp, #16
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
 800158e:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ffed 	bl	8001570 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001596:	4602      	mov	r2, r0
 8001598:	f107 0308 	add.w	r3, r7, #8
 800159c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015a0:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f7ff ffe3 	bl	8001570 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80015aa:	4602      	mov	r2, r0
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015b2:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff ffd8 	bl	8001570 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80015c0:	4602      	mov	r2, r0
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015c8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b084      	sub	sp, #16
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ffed 	bl	80015d4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80015fa:	4603      	mov	r3, r0
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001600:	6838      	ldr	r0, [r7, #0]
 8001602:	f7ff ffe7 	bl	80015d4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001606:	4603      	mov	r3, r0
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ffde 	bl	80015d4 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001618:	4603      	mov	r3, r0
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	601a      	str	r2, [r3, #0]
    }
 8001620:	bf00      	nop
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
	taskEXIT_CRITICAL();
}

}
 8001628:	b5b0      	push	{r4, r5, r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d10f      	bne.n	8001658 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800163e:	4293      	cmp	r3, r2
 8001640:	d10a      	bne.n	8001658 <_Z41__static_initialization_and_destruction_0ii+0x30>
static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001644:	2431      	movs	r4, #49	; 0x31
 8001646:	461d      	mov	r5, r3
 8001648:	2c00      	cmp	r4, #0
 800164a:	db05      	blt.n	8001658 <_Z41__static_initialization_and_destruction_0ii+0x30>
 800164c:	4628      	mov	r0, r5
 800164e:	f7ff fecc 	bl	80013ea <_ZN7canzero10receiver_tC1Ev>
 8001652:	351c      	adds	r5, #28
 8001654:	3c01      	subs	r4, #1
 8001656:	e7f7      	b.n	8001648 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10d      	bne.n	800167a <_Z41__static_initialization_and_destruction_0ii+0x52>
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001664:	4293      	cmp	r3, r2
 8001666:	d108      	bne.n	800167a <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001668:	4c07      	ldr	r4, [pc, #28]	; (8001688 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800166a:	4b06      	ldr	r3, [pc, #24]	; (8001684 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800166c:	429c      	cmp	r4, r3
 800166e:	d004      	beq.n	800167a <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001670:	3c1c      	subs	r4, #28
 8001672:	4620      	mov	r0, r4
 8001674:	f7ff fec6 	bl	8001404 <_ZN7canzero10receiver_tD1Ev>
 8001678:	e7f7      	b.n	800166a <_Z41__static_initialization_and_destruction_0ii+0x42>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bdb0      	pop	{r4, r5, r7, pc}
 8001682:	bf00      	nop
 8001684:	200000a8 	.word	0x200000a8
 8001688:	20000620 	.word	0x20000620

0800168c <_GLOBAL__sub_I__ZN7canzero6g_sizeE>:
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
 8001690:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001694:	2001      	movs	r0, #1
 8001696:	f7ff ffc7 	bl	8001628 <_Z41__static_initialization_and_destruction_0ii>
 800169a:	bd80      	pop	{r7, pc}

0800169c <_GLOBAL__sub_D__ZN7canzero6g_sizeE>:
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
 80016a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016a4:	2000      	movs	r0, #0
 80016a6:	f7ff ffbf 	bl	8001628 <_Z41__static_initialization_and_destruction_0ii>
 80016aa:	bd80      	pop	{r7, pc}

080016ac <_Z9processRX9RxMessage>:
/**
 * @brief function that process all node specific messages
 *
 * @param message
 */
void processRX(RxMessage message) {
 80016ac:	b084      	sub	sp, #16
 80016ae:	b580      	push	{r7, lr}
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	f107 0c08 	add.w	ip, r7, #8
 80016b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (can::checkRxMessage<can::messages::CANZERO_RX_PDO1>(message)) {
 80016ba:	f107 0008 	add.w	r0, r7, #8
 80016be:	f000 f835 	bl	800172c <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d008      	beq.n	80016da <_Z9processRX9RxMessage+0x2e>
		xMessageBufferSend(handlePDO1MessageBuffer, &message, sizeof(message),
 80016c8:	4b15      	ldr	r3, [pc, #84]	; (8001720 <_Z9processRX9RxMessage+0x74>)
 80016ca:	6818      	ldr	r0, [r3, #0]
 80016cc:	230a      	movs	r3, #10
 80016ce:	2224      	movs	r2, #36	; 0x24
 80016d0:	f107 0108 	add.w	r1, r7, #8
 80016d4:	f00f f958 	bl	8010988 <xStreamBufferSend>
	 else {
	 printDebug("unknown/unhandled CAN Ext-ID: %lu\n", message.rxHeader.ExtId);
	 }
	 }
	 */
}
 80016d8:	e01c      	b.n	8001714 <_Z9processRX9RxMessage+0x68>
	} else if (canzero::processRxMessageReceiver(message)) {
 80016da:	f107 0008 	add.w	r0, r7, #8
 80016de:	f7ff fe9f 	bl	8001420 <_ZN7canzero24processRxMessageReceiverER9RxMessage>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d115      	bne.n	8001714 <_Z9processRX9RxMessage+0x68>
		if (message.rxHeader.IDE == CAN_ID_STD) {
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d109      	bne.n	8001702 <_Z9processRX9RxMessage+0x56>
			printDebug("unknown/unhandled CAN Std-ID: %lu\n",
 80016ee:	f011 fa91 	bl	8012c14 <vPortEnterCritical>
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	4619      	mov	r1, r3
 80016f6:	480b      	ldr	r0, [pc, #44]	; (8001724 <_Z9processRX9RxMessage+0x78>)
 80016f8:	f00d f9bc 	bl	800ea74 <printf_>
 80016fc:	f011 faba 	bl	8012c74 <vPortExitCritical>
}
 8001700:	e008      	b.n	8001714 <_Z9processRX9RxMessage+0x68>
			printDebug("unknown/unhandled CAN Ext-ID: %lu\n",
 8001702:	f011 fa87 	bl	8012c14 <vPortEnterCritical>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4619      	mov	r1, r3
 800170a:	4807      	ldr	r0, [pc, #28]	; (8001728 <_Z9processRX9RxMessage+0x7c>)
 800170c:	f00d f9b2 	bl	800ea74 <printf_>
 8001710:	f011 fab0 	bl	8012c74 <vPortExitCritical>
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800171c:	b004      	add	sp, #16
 800171e:	4770      	bx	lr
 8001720:	20000624 	.word	0x20000624
 8001724:	08013c2c 	.word	0x08013c2c
 8001728:	08013c50 	.word	0x08013c50

0800172c <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d109      	bne.n	8001750 <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f240 12c1 	movw	r2, #449	; 0x1c1
 8001744:	4293      	cmp	r3, r2
 8001746:	bf0c      	ite	eq
 8001748:	2301      	moveq	r3, #1
 800174a:	2300      	movne	r3, #0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	e000      	b.n	8001752 <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001750:	2300      	movs	r3, #0
    }
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <_Z41__static_initialization_and_destruction_0ii>:
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d10c      	bne.n	800178a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001776:	4293      	cmp	r3, r2
 8001778:	d107      	bne.n	800178a <_Z41__static_initialization_and_destruction_0ii+0x2a>
MessageBufferHandle_t handlePDO1MessageBuffer = xMessageBufferCreate(
 800177a:	2201      	movs	r2, #1
 800177c:	2100      	movs	r1, #0
 800177e:	20c8      	movs	r0, #200	; 0xc8
 8001780:	f00f f874 	bl	801086c <xStreamBufferGenericCreate>
 8001784:	4603      	mov	r3, r0
 8001786:	4a03      	ldr	r2, [pc, #12]	; (8001794 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001788:	6013      	str	r3, [r2, #0]
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000624 	.word	0x20000624

08001798 <_GLOBAL__sub_I_handlePDO1MessageBuffer>:
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
 800179c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017a0:	2001      	movs	r0, #1
 80017a2:	f7ff ffdd 	bl	8001760 <_Z41__static_initialization_and_destruction_0ii>
 80017a6:	bd80      	pop	{r7, pc}

080017a8 <_Z41__static_initialization_and_destruction_0ii>:
 */
#include "cz_receive_queue.hpp"
#include "cz_typedefinitions.hpp"

static const osMessageQueueAttr_t czReceiveQueueAttr = {"czReceiveQueue",0,NULL,0,NULL,0};
osMessageQueueId_t czReceiveQueue = osMessageQueueNew(16, sizeof(RxMessage), &czReceiveQueueAttr);
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d10c      	bne.n	80017d2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017be:	4293      	cmp	r3, r2
 80017c0:	d107      	bne.n	80017d2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80017c2:	4a06      	ldr	r2, [pc, #24]	; (80017dc <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80017c4:	2124      	movs	r1, #36	; 0x24
 80017c6:	2010      	movs	r0, #16
 80017c8:	f00d fd36 	bl	800f238 <osMessageQueueNew>
 80017cc:	4603      	mov	r3, r0
 80017ce:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	08013e90 	.word	0x08013e90
 80017e0:	20000628 	.word	0x20000628

080017e4 <_GLOBAL__sub_I_czReceiveQueue>:
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017ec:	2001      	movs	r0, #1
 80017ee:	f7ff ffdb 	bl	80017a8 <_Z41__static_initialization_and_destruction_0ii>
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017f8:	f3bf 8f4f 	dsb	sy
}
 80017fc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <__NVIC_SystemReset+0x24>)
 8001800:	68db      	ldr	r3, [r3, #12]
 8001802:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001806:	4904      	ldr	r1, [pc, #16]	; (8001818 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001808:	4b04      	ldr	r3, [pc, #16]	; (800181c <__NVIC_SystemReset+0x28>)
 800180a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800180c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800180e:	f3bf 8f4f 	dsb	sy
}
 8001812:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <__NVIC_SystemReset+0x20>
 8001818:	e000ed00 	.word	0xe000ed00
 800181c:	05fa0004 	.word	0x05fa0004

08001820 <_Z15cz_receive_taskPv>:

#include "FreeRTOS.h"
#include "message_buffer.h"


void cz_receive_task(void* argv) {
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b092      	sub	sp, #72	; 0x48
 8001824:	af06      	add	r7, sp, #24
 8001826:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (1) {
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8001828:	4b26      	ldr	r3, [pc, #152]	; (80018c4 <_Z15cz_receive_taskPv+0xa4>)
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	f107 010c 	add.w	r1, r7, #12
 8001830:	f04f 33ff 	mov.w	r3, #4294967295
 8001834:	2200      	movs	r2, #0
 8001836:	f00d fdd3 	bl	800f3e0 <osMessageQueueGet>

		if (message.rxHeader.RTR == CAN_RTR_DATA) {
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d136      	bne.n	80018ae <_Z15cz_receive_taskPv+0x8e>
 			if(can::checkRxMessage<can::messages::CANZERO_BTL_RX>(message)) {
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	4618      	mov	r0, r3
 8001846:	f000 f8e3 	bl	8001a10 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <_Z15cz_receive_taskPv+0x3c>
				if(message.rxBuf[0]==0xff) {
 8001850:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001854:	2bff      	cmp	r3, #255	; 0xff
 8001856:	d1e7      	bne.n	8001828 <_Z15cz_receive_taskPv+0x8>
					NVIC_SystemReset();
 8001858:	f7ff ffcc 	bl	80017f4 <__NVIC_SystemReset>
				}
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Up>(message)) {
 800185c:	f107 030c 	add.w	r3, r7, #12
 8001860:	4618      	mov	r0, r3
 8001862:	f000 f8ee 	bl	8001a42 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <_Z15cz_receive_taskPv+0x58>
				handleSDORequestUpload(message);
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	4618      	mov	r0, r3
 8001872:	f002 fcb3 	bl	80041dc <_Z22handleSDORequestUploadRK9RxMessage>
 8001876:	e7d7      	b.n	8001828 <_Z15cz_receive_taskPv+0x8>
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Down>(message)) {
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	4618      	mov	r0, r3
 800187e:	f000 f8f9 	bl	8001a74 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d005      	beq.n	8001894 <_Z15cz_receive_taskPv+0x74>
				handleSDORequestDownload(message);
 8001888:	f107 030c 	add.w	r3, r7, #12
 800188c:	4618      	mov	r0, r3
 800188e:	f002 f8ac 	bl	80039ea <_Z24handleSDORequestDownloadRK9RxMessage>
 8001892:	e7c9      	b.n	8001828 <_Z15cz_receive_taskPv+0x8>
			} else {
				processRX(message);
 8001894:	466d      	mov	r5, sp
 8001896:	f107 041c 	add.w	r4, r7, #28
 800189a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800189c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800189e:	6823      	ldr	r3, [r4, #0]
 80018a0:	602b      	str	r3, [r5, #0]
 80018a2:	f107 030c 	add.w	r3, r7, #12
 80018a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018a8:	f7ff ff00 	bl	80016ac <_Z9processRX9RxMessage>
 80018ac:	e7bc      	b.n	8001828 <_Z15cz_receive_taskPv+0x8>
			}
		}
		else if (message.rxHeader.RTR == CAN_RTR_REMOTE) {
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d1b9      	bne.n	8001828 <_Z15cz_receive_taskPv+0x8>
			printDebug("RTR must not be used!\n");
 80018b4:	f011 f9ae 	bl	8012c14 <vPortEnterCritical>
 80018b8:	4803      	ldr	r0, [pc, #12]	; (80018c8 <_Z15cz_receive_taskPv+0xa8>)
 80018ba:	f00d f8db 	bl	800ea74 <printf_>
 80018be:	f011 f9d9 	bl	8012c74 <vPortExitCritical>
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 80018c2:	e7b1      	b.n	8001828 <_Z15cz_receive_taskPv+0x8>
 80018c4:	20000628 	.word	0x20000628
 80018c8:	08013c84 	.word	0x08013c84

080018cc <HAL_CAN_RxFifo0MsgPendingCallback>:
		}
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80018cc:	b5b0      	push	{r4, r5, r7, lr}
 80018ce:	b096      	sub	sp, #88	; 0x58
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 80018d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018d8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018dc:	2100      	movs	r1, #0
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f007 ffbc 	bl	800985c <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 80018e4:	f107 040c 	add.w	r4, r7, #12
 80018e8:	f107 0530 	add.w	r5, r7, #48	; 0x30
 80018ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 80018f8:	2300      	movs	r3, #0
 80018fa:	657b      	str	r3, [r7, #84]	; 0x54
 80018fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018fe:	2b07      	cmp	r3, #7
 8001900:	dc0e      	bgt.n	8001920 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001902:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001908:	4413      	add	r3, r2
 800190a:	7819      	ldrb	r1, [r3, #0]
 800190c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001912:	4413      	add	r3, r2
 8001914:	460a      	mov	r2, r1
 8001916:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001918:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800191a:	3301      	adds	r3, #1
 800191c:	657b      	str	r3, [r7, #84]	; 0x54
 800191e:	e7ed      	b.n	80018fc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	f107 010c 	add.w	r1, r7, #12
 8001928:	2300      	movs	r3, #0
 800192a:	2200      	movs	r2, #0
 800192c:	f00d fcf8 	bl	800f320 <osMessageQueuePut>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0

	}
}
 8001934:	bf00      	nop
 8001936:	3758      	adds	r7, #88	; 0x58
 8001938:	46bd      	mov	sp, r7
 800193a:	bdb0      	pop	{r4, r5, r7, pc}
 800193c:	20000628 	.word	0x20000628

08001940 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001940:	b5b0      	push	{r4, r5, r7, lr}
 8001942:	b096      	sub	sp, #88	; 0x58
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001948:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800194c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001950:	2101      	movs	r1, #1
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f007 ff82 	bl	800985c <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001958:	f107 040c 	add.w	r4, r7, #12
 800195c:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001964:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001968:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 800196c:	2300      	movs	r3, #0
 800196e:	657b      	str	r3, [r7, #84]	; 0x54
 8001970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001972:	2b07      	cmp	r3, #7
 8001974:	dc0e      	bgt.n	8001994 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001976:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800197a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800197c:	4413      	add	r3, r2
 800197e:	7819      	ldrb	r1, [r3, #0]
 8001980:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001986:	4413      	add	r3, r2
 8001988:	460a      	mov	r2, r1
 800198a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 800198c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800198e:	3301      	adds	r3, #1
 8001990:	657b      	str	r3, [r7, #84]	; 0x54
 8001992:	e7ed      	b.n	8001970 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	f107 010c 	add.w	r1, r7, #12
 800199c:	2300      	movs	r3, #0
 800199e:	2200      	movs	r2, #0
 80019a0:	f00d fcbe 	bl	800f320 <osMessageQueuePut>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0

	}
}
 80019a8:	bf00      	nop
 80019aa:	3758      	adds	r7, #88	; 0x58
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bdb0      	pop	{r4, r5, r7, pc}
 80019b0:	20000628 	.word	0x20000628

080019b4 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	HAL_CAN_ResetError(hcan);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f008 fa96 	bl	8009eee <HAL_CAN_ResetError>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80019c2:	f3ef 8211 	mrs	r2, BASEPRI
 80019c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ca:	f383 8811 	msr	BASEPRI, r3
 80019ce:	f3bf 8f6f 	isb	sy
 80019d2:	f3bf 8f4f 	dsb	sy
 80019d6:	60fa      	str	r2, [r7, #12]
 80019d8:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80019da:	68fb      	ldr	r3, [r7, #12]
	printDebugISR("CAN Errors got reseted!\n");
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	4806      	ldr	r0, [pc, #24]	; (80019f8 <HAL_CAN_ErrorCallback+0x44>)
 80019e0:	f00d f848 	bl	800ea74 <printf_>
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80019ee:	bf00      	nop
}
 80019f0:	bf00      	nop
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	08013c9c 	.word	0x08013c9c

080019fc <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	//LED_RGB_Write(100, 0, 0);
}
 8001a04:	bf00      	nop
 8001a06:	370c      	adds	r7, #12
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d109      	bne.n	8001a34 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f240 7281 	movw	r2, #1921	; 0x781
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	bf0c      	ite	eq
 8001a2c:	2301      	moveq	r3, #1
 8001a2e:	2300      	movne	r3, #0
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	e000      	b.n	8001a36 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001a34:	2300      	movs	r3, #0
    }
 8001a36:	4618      	mov	r0, r3
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d109      	bne.n	8001a66 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	bf0c      	ite	eq
 8001a5e:	2301      	moveq	r3, #1
 8001a60:	2300      	movne	r3, #0
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	e000      	b.n	8001a68 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001a66:	2300      	movs	r3, #0
    }
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d109      	bne.n	8001a98 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f240 6201 	movw	r2, #1537	; 0x601
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	bf0c      	ite	eq
 8001a90:	2301      	moveq	r3, #1
 8001a92:	2300      	movne	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	e000      	b.n	8001a9a <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001a98:	2300      	movs	r3, #0
    }
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <_Z41__static_initialization_and_destruction_0ii>:
#include "cz_typedefinitions.hpp"


static const osMessageQueueAttr_t czSendQueueAttr = {"czSendQueue",0,NULL,0,NULL,0};

osMessageQueueId_t czSendQueue = osMessageQueueNew(16, sizeof(TxMessage), &czSendQueueAttr);
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6039      	str	r1, [r7, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d10c      	bne.n	8001ad2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d107      	bne.n	8001ad2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001ac2:	4a06      	ldr	r2, [pc, #24]	; (8001adc <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001ac4:	2120      	movs	r1, #32
 8001ac6:	2010      	movs	r0, #16
 8001ac8:	f00d fbb6 	bl	800f238 <osMessageQueueNew>
 8001acc:	4603      	mov	r3, r0
 8001ace:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001ad0:	6013      	str	r3, [r2, #0]
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	08013ea8 	.word	0x08013ea8
 8001ae0:	2000062c 	.word	0x2000062c

08001ae4 <_GLOBAL__sub_I_czSendQueue>:
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001aec:	2001      	movs	r0, #1
 8001aee:	f7ff ffdb 	bl	8001aa8 <_Z41__static_initialization_and_destruction_0ii>
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <_Z13cz_send_entryPv>:
#include "FreeRTOS.h"
#include "message_buffer.h"
#include "cmsis_os.h"


void cz_send_entry(void* argv){
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08e      	sub	sp, #56	; 0x38
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
	TxMessage sendMessage;
 8001afc:	f107 030c 	add.w	r3, r7, #12
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fb0b 	bl	800111c <_ZN9TxMessageC1Ev>
	uint32_t TxMailbox;
	CAN_HandleTypeDef* hcanModule;

	unsigned int frame = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	633b      	str	r3, [r7, #48]	; 0x30
	while(true){
		if(osMessageQueueGet(czSendQueue,&sendMessage,NULL,osWaitForever) != osOK){
 8001b0a:	4b5a      	ldr	r3, [pc, #360]	; (8001c74 <_Z13cz_send_entryPv+0x180>)
 8001b0c:	6818      	ldr	r0, [r3, #0]
 8001b0e:	f107 010c 	add.w	r1, r7, #12
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	2200      	movs	r2, #0
 8001b18:	f00d fc62 	bl	800f3e0 <osMessageQueueGet>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bf14      	ite	ne
 8001b22:	2301      	movne	r3, #1
 8001b24:	2300      	moveq	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <_Z13cz_send_entryPv+0x3c>
			Error_Handler();
 8001b2c:	f006 f87e 	bl	8007c2c <Error_Handler>
		}

		//uint32_t* buf = reinterpret_cast<uint32_t*>(&(sendMessage.txBuf[0]));
		//printf("%u\n", *buf);

		if(sendMessage.txHeader.DLC>8){
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d901      	bls.n	8001b3a <_Z13cz_send_entryPv+0x46>
			Error_Handler();
 8001b36:	f006 f879 	bl	8007c2c <Error_Handler>
		}

		// Extract the bus flag from the RTR field and then clear the flag bits
		can::CAN_BusTypeDef canBus = sendMessage.txHeader.RTR & can::buses::mask;
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	0c1b      	lsrs	r3, r3, #16
 8001b3e:	041b      	lsls	r3, r3, #16
 8001b40:	62fb      	str	r3, [r7, #44]	; 0x2c
		sendMessage.txHeader.RTR &= ~(can::buses::mask);
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	61bb      	str	r3, [r7, #24]

		if(canBus == can::buses::BUS1) {
 8001b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4e:	d102      	bne.n	8001b56 <_Z13cz_send_entryPv+0x62>
			hcanModule = &hcan1;
 8001b50:	4b49      	ldr	r3, [pc, #292]	; (8001c78 <_Z13cz_send_entryPv+0x184>)
 8001b52:	637b      	str	r3, [r7, #52]	; 0x34
 8001b54:	e010      	b.n	8001b78 <_Z13cz_send_entryPv+0x84>
		} else if(canBus == can::buses::BUS2) {
 8001b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b5c:	d102      	bne.n	8001b64 <_Z13cz_send_entryPv+0x70>
			hcanModule = &hcan2;
 8001b5e:	4b47      	ldr	r3, [pc, #284]	; (8001c7c <_Z13cz_send_entryPv+0x188>)
 8001b60:	637b      	str	r3, [r7, #52]	; 0x34
 8001b62:	e009      	b.n	8001b78 <_Z13cz_send_entryPv+0x84>
		} else {
			// Decide on the ID
			if (sendMessage.txHeader.StdId % 2 == 0){
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d102      	bne.n	8001b74 <_Z13cz_send_entryPv+0x80>
				hcanModule = &hcan1;
 8001b6e:	4b42      	ldr	r3, [pc, #264]	; (8001c78 <_Z13cz_send_entryPv+0x184>)
 8001b70:	637b      	str	r3, [r7, #52]	; 0x34
 8001b72:	e001      	b.n	8001b78 <_Z13cz_send_entryPv+0x84>
			} else{
				hcanModule = &hcan2;
 8001b74:	4b41      	ldr	r3, [pc, #260]	; (8001c7c <_Z13cz_send_entryPv+0x188>)
 8001b76:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}

		// If there is a mailbox free on the requested CAN, just send the message
		if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001b78:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b7a:	f007 fe3a 	bl	80097f2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	bf14      	ite	ne
 8001b84:	2301      	movne	r3, #1
 8001b86:	2300      	moveq	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d016      	beq.n	8001bbc <_Z13cz_send_entryPv+0xc8>
			if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001b8e:	f107 0008 	add.w	r0, r7, #8
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	f103 0218 	add.w	r2, r3, #24
 8001b9a:	f107 010c 	add.w	r1, r7, #12
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ba2:	f007 fd4b 	bl	800963c <HAL_CAN_AddTxMessage>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	bf14      	ite	ne
 8001bac:	2301      	movne	r3, #1
 8001bae:	2300      	moveq	r3, #0
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d059      	beq.n	8001c6a <_Z13cz_send_entryPv+0x176>
				/* Transmission request Error */
				Error_Handler();
 8001bb6:	f006 f839 	bl	8007c2c <Error_Handler>
 8001bba:	e056      	b.n	8001c6a <_Z13cz_send_entryPv+0x176>
			}
		} else {	// No mailbox free on requested CAN bus
			// Count delayed messages
			if(hcanModule == &hcan1) {
 8001bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bbe:	4a2e      	ldr	r2, [pc, #184]	; (8001c78 <_Z13cz_send_entryPv+0x184>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d10c      	bne.n	8001bde <_Z13cz_send_entryPv+0xea>
				OD_CAN1_DelayedTxMessages++;
 8001bc4:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <_Z13cz_send_entryPv+0x18c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	4a2d      	ldr	r2, [pc, #180]	; (8001c80 <_Z13cz_send_entryPv+0x18c>)
 8001bcc:	6013      	str	r3, [r2, #0]
				printDebug("WARNING :: can1 tx mailbox overflow.\n")
 8001bce:	f011 f821 	bl	8012c14 <vPortEnterCritical>
 8001bd2:	482c      	ldr	r0, [pc, #176]	; (8001c84 <_Z13cz_send_entryPv+0x190>)
 8001bd4:	f00c ff4e 	bl	800ea74 <printf_>
 8001bd8:	f011 f84c 	bl	8012c74 <vPortExitCritical>
 8001bdc:	e00b      	b.n	8001bf6 <_Z13cz_send_entryPv+0x102>
			} else {
				OD_CAN2_DelayedTxMessages++;
 8001bde:	4b2a      	ldr	r3, [pc, #168]	; (8001c88 <_Z13cz_send_entryPv+0x194>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	3301      	adds	r3, #1
 8001be4:	4a28      	ldr	r2, [pc, #160]	; (8001c88 <_Z13cz_send_entryPv+0x194>)
 8001be6:	6013      	str	r3, [r2, #0]
				printDebug("WARNING :: can2 tx mailbox overflow.\n")
 8001be8:	f011 f814 	bl	8012c14 <vPortEnterCritical>
 8001bec:	4827      	ldr	r0, [pc, #156]	; (8001c8c <_Z13cz_send_entryPv+0x198>)
 8001bee:	f00c ff41 	bl	800ea74 <printf_>
 8001bf2:	f011 f83f 	bl	8012c74 <vPortExitCritical>
			}

			osDelay(1);		// Use smallest delay possible
 8001bf6:	2001      	movs	r0, #1
 8001bf8:	f00d f8b6 	bl	800ed68 <osDelay>

			// Try again
			if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001bfc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001bfe:	f007 fdf8 	bl	80097f2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	bf14      	ite	ne
 8001c08:	2301      	movne	r3, #1
 8001c0a:	2300      	moveq	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d016      	beq.n	8001c40 <_Z13cz_send_entryPv+0x14c>
				if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001c12:	f107 0008 	add.w	r0, r7, #8
 8001c16:	f107 030c 	add.w	r3, r7, #12
 8001c1a:	f103 0218 	add.w	r2, r3, #24
 8001c1e:	f107 010c 	add.w	r1, r7, #12
 8001c22:	4603      	mov	r3, r0
 8001c24:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c26:	f007 fd09 	bl	800963c <HAL_CAN_AddTxMessage>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	bf14      	ite	ne
 8001c30:	2301      	movne	r3, #1
 8001c32:	2300      	moveq	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d017      	beq.n	8001c6a <_Z13cz_send_entryPv+0x176>
					/* Transmission request Error */
					canzero::handle_trasmission_request_error();
 8001c3a:	f000 fa5e 	bl	80020fa <_ZN7canzero32handle_trasmission_request_errorEv>
 8001c3e:	e014      	b.n	8001c6a <_Z13cz_send_entryPv+0x176>
				}
			} else {
				// Discard message
				if(hcanModule == &hcan1) {
 8001c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c42:	4a0d      	ldr	r2, [pc, #52]	; (8001c78 <_Z13cz_send_entryPv+0x184>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d108      	bne.n	8001c5a <_Z13cz_send_entryPv+0x166>
					OD_CAN1_DiscardedTxMessages++;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <_Z13cz_send_entryPv+0x19c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	4a10      	ldr	r2, [pc, #64]	; (8001c90 <_Z13cz_send_entryPv+0x19c>)
 8001c50:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan1);
 8001c52:	4809      	ldr	r0, [pc, #36]	; (8001c78 <_Z13cz_send_entryPv+0x184>)
 8001c54:	f000 fa47 	bl	80020e6 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
 8001c58:	e007      	b.n	8001c6a <_Z13cz_send_entryPv+0x176>
				} else {
					OD_CAN2_DiscardedTxMessages++;
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <_Z13cz_send_entryPv+0x1a0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	4a0c      	ldr	r2, [pc, #48]	; (8001c94 <_Z13cz_send_entryPv+0x1a0>)
 8001c62:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan2);
 8001c64:	4805      	ldr	r0, [pc, #20]	; (8001c7c <_Z13cz_send_entryPv+0x188>)
 8001c66:	f000 fa3e 	bl	80020e6 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
				}
			}
		}
		frame ++;
 8001c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
	}
 8001c70:	e74b      	b.n	8001b0a <_Z13cz_send_entryPv+0x16>
 8001c72:	bf00      	nop
 8001c74:	2000062c 	.word	0x2000062c
 8001c78:	20000a00 	.word	0x20000a00
 8001c7c:	20000a28 	.word	0x20000a28
 8001c80:	20000684 	.word	0x20000684
 8001c84:	08013cc4 	.word	0x08013cc4
 8001c88:	2000069c 	.word	0x2000069c
 8001c8c:	08013cec 	.word	0x08013cec
 8001c90:	2000067c 	.word	0x2000067c
 8001c94:	20000694 	.word	0x20000694

08001c98 <_ZN7canzero4initEv>:
static const osMutexAttr_t nodeStateMutexAttr = {"nodeStateMutex",(osMutexPrioInherit|osMutexRobust),NULL,0,};
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);

static cz_status nodeStatus;

void canzero::init(){
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08c      	sub	sp, #48	; 0x30
 8001c9c:	af00      	add	r7, sp, #0
	setStatus(cz_status::reset);
 8001c9e:	2080      	movs	r0, #128	; 0x80
 8001ca0:	f000 f91e 	bl	8001ee0 <_ZN7canzero9setStatusE9cz_status>
	static_assert(can::filters::num_std <= 28, "Number of CAN Std-ID filter generated by dbc2cpp exceeds 28!");
	static_assert(can::filters::num_ext * 2 + can::filters::num_std <= 28, "Too many CAN filters configured by dbc2cpp!");
	static_assert(can::filters::num_ext != 0 || can::filters::num_std != 0, "No CAN filters were generated by dbc2cpp!");

	// Configure filters in 32-bit mode to receive Extended IDs (29-bit)
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	da4f      	bge.n	8001d4e <_ZN7canzero4initEv+0xb6>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	61fb      	str	r3, [r7, #28]

		// A 29-bit ID consists of the 11-bit Base-ID (MSB) and 18-bit Sub-ID (LSB)
		// So STID[10:0] == EXID[28:18]

		// ID high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: id_ext[28:13]
		sFilterConfig.FilterIdHigh = ((can::filters::id_ext[i] & 0x1FFFE000ul) >> 13);
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	0b5b      	lsrs	r3, r3, #13
 8001cba:	b29b      	uxth	r3, r3
 8001cbc:	603b      	str	r3, [r7, #0]

		// ID low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: id[23:11] 1 0 0
		sFilterConfig.FilterIdLow = ((can::filters::id_ext[i] & 0x1FFF) << 3) | 4;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	00db      	lsls	r3, r3, #3
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	f043 0304 	orr.w	r3, r3, #4
 8001cc8:	607b      	str	r3, [r7, #4]

		// Mask high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: mask_ext[28:13]
		sFilterConfig.FilterMaskIdHigh = ((can::filters::mask_ext[i] & 0x1FFFE000ul) >> 13);
 8001cca:	2300      	movs	r3, #0
 8001ccc:	0b5b      	lsrs	r3, r3, #13
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	60bb      	str	r3, [r7, #8]

		// Mask low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: mask[23:11] 1 1 0
		sFilterConfig.FilterMaskIdLow = ((can::filters::mask_ext[i] & 0x1FFF) << 3) | 6;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	f043 0306 	orr.w	r3, r3, #6
 8001cdc:	60fb      	str	r3, [r7, #12]


		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8001cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce0:	0fda      	lsrs	r2, r3, #31
 8001ce2:	4413      	add	r3, r2
 8001ce4:	105b      	asrs	r3, r3, #1
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d102      	bne.n	8001cf4 <_ZN7canzero4initEv+0x5c>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	e001      	b.n	8001cf8 <_ZN7canzero4initEv+0x60>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8001cfc:	230e      	movs	r3, #14
 8001cfe:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		sFilterConfig.FilterBank = i;
 8001d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d02:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001d04:	463b      	mov	r3, r7
 8001d06:	4619      	mov	r1, r3
 8001d08:	4871      	ldr	r0, [pc, #452]	; (8001ed0 <_ZN7canzero4initEv+0x238>)
 8001d0a:	f007 fb73 	bl	80093f4 <HAL_CAN_ConfigFilter>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	bf14      	ite	ne
 8001d14:	2301      	movne	r3, #1
 8001d16:	2300      	moveq	r3, #0
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <_ZN7canzero4initEv+0x8a>
			Error_Handler(); /* Filter configuration Error */
 8001d1e:	f005 ff85 	bl	8007c2c <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + i;
 8001d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d24:	330e      	adds	r3, #14
 8001d26:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001d28:	463b      	mov	r3, r7
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4869      	ldr	r0, [pc, #420]	; (8001ed4 <_ZN7canzero4initEv+0x23c>)
 8001d2e:	f007 fb61 	bl	80093f4 <HAL_CAN_ConfigFilter>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	bf14      	ite	ne
 8001d38:	2301      	movne	r3, #1
 8001d3a:	2300      	moveq	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <_ZN7canzero4initEv+0xae>
			Error_Handler(); /* Filter configuration Error */
 8001d42:	f005 ff73 	bl	8007c2c <Error_Handler>
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d48:	3301      	adds	r3, #1
 8001d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d4c:	e7ac      	b.n	8001ca8 <_ZN7canzero4initEv+0x10>
		}
	}


	// Configure filters in 16-bit mode to receive Standard IDs (11-bit)
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8001d4e:	2300      	movs	r3, #0
 8001d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d54:	2b09      	cmp	r3, #9
 8001d56:	dc69      	bgt.n	8001e2c <_ZN7canzero4initEv+0x194>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterBank = can::filters::num_ext + i / 2;	// Each STM32 filterbank has two filters in 16-bit mode, so divide by 2.
 8001d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5a:	0fda      	lsrs	r2, r3, #31
 8001d5c:	4413      	add	r3, r2
 8001d5e:	105b      	asrs	r3, r3, #1
 8001d60:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61bb      	str	r3, [r7, #24]

		// All values are shifted by 5 bits, because the internal layout is: STDID[10:0], RTR, IDE, EXID[17:15] for a 16-bit filter.
		sFilterConfig.FilterIdHigh = can::filters::id_std[i] << 5;
 8001d66:	4a5c      	ldr	r2, [pc, #368]	; (8001ed8 <_ZN7canzero4initEv+0x240>)
 8001d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6e:	015b      	lsls	r3, r3, #5
 8001d70:	603b      	str	r3, [r7, #0]
		sFilterConfig.FilterMaskIdHigh = (can::filters::mask_std[i] << 5) | 0x18;  // Set bit 3 and 4, so no remote frame and 11-bit ID.
 8001d72:	4a5a      	ldr	r2, [pc, #360]	; (8001edc <_ZN7canzero4initEv+0x244>)
 8001d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d7a:	015b      	lsls	r3, r3, #5
 8001d7c:	f043 0318 	orr.w	r3, r3, #24
 8001d80:	60bb      	str	r3, [r7, #8]

		// If number of filters is odd, configure last filter in 32-bit mode.
		if (i == can::filters::num_std - 1) {
 8001d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d84:	2b09      	cmp	r3, #9
 8001d86:	d106      	bne.n	8001d96 <_ZN7canzero4initEv+0xfe>
			// Odd number of filters and last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = 0x6; // Set bit 1 and 2, so ignore remote frames and only receive standard-ID frames
 8001d90:	2306      	movs	r3, #6
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	e011      	b.n	8001dba <_ZN7canzero4initEv+0x122>
		} else {
			// Even number of filters or odd number and not last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001d96:	2300      	movs	r3, #0
 8001d98:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = can::filters::id_std[i+1] << 5;
 8001d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	4a4e      	ldr	r2, [pc, #312]	; (8001ed8 <_ZN7canzero4initEv+0x240>)
 8001da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da4:	015b      	lsls	r3, r3, #5
 8001da6:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = (can::filters::mask_std[i+1] << 5) | 0x18;  // Set bit 3 and 4, so only receive standard-ID frames and ignore remote frames
 8001da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001daa:	3301      	adds	r3, #1
 8001dac:	4a4b      	ldr	r2, [pc, #300]	; (8001edc <_ZN7canzero4initEv+0x244>)
 8001dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db2:	015b      	lsls	r3, r3, #5
 8001db4:	f043 0318 	orr.w	r3, r3, #24
 8001db8:	60fb      	str	r3, [r7, #12]
		}

		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8001dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dbc:	0fda      	lsrs	r2, r3, #31
 8001dbe:	4413      	add	r3, r2
 8001dc0:	105b      	asrs	r3, r3, #1
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d102      	bne.n	8001dd0 <_ZN7canzero4initEv+0x138>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
 8001dce:	e001      	b.n	8001dd4 <_ZN7canzero4initEv+0x13c>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8001dd8:	230e      	movs	r3, #14
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001ddc:	463b      	mov	r3, r7
 8001dde:	4619      	mov	r1, r3
 8001de0:	483b      	ldr	r0, [pc, #236]	; (8001ed0 <_ZN7canzero4initEv+0x238>)
 8001de2:	f007 fb07 	bl	80093f4 <HAL_CAN_ConfigFilter>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	bf14      	ite	ne
 8001dec:	2301      	movne	r3, #1
 8001dee:	2300      	moveq	r3, #0
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <_ZN7canzero4initEv+0x162>
			Error_Handler(); /* Filter configuration Error */
 8001df6:	f005 ff19 	bl	8007c2c <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + can::filters::num_ext + i / 2;
 8001dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dfc:	0fda      	lsrs	r2, r3, #31
 8001dfe:	4413      	add	r3, r2
 8001e00:	105b      	asrs	r3, r3, #1
 8001e02:	330e      	adds	r3, #14
 8001e04:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001e06:	463b      	mov	r3, r7
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4832      	ldr	r0, [pc, #200]	; (8001ed4 <_ZN7canzero4initEv+0x23c>)
 8001e0c:	f007 faf2 	bl	80093f4 <HAL_CAN_ConfigFilter>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	bf14      	ite	ne
 8001e16:	2301      	movne	r3, #1
 8001e18:	2300      	moveq	r3, #0
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <_ZN7canzero4initEv+0x18c>
			Error_Handler(); /* Filter configuration Error */
 8001e20:	f005 ff04 	bl	8007c2c <Error_Handler>
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8001e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e26:	3302      	adds	r3, #2
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e2a:	e792      	b.n	8001d52 <_ZN7canzero4initEv+0xba>
		}
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK || HAL_CAN_Start(&hcan2) != HAL_OK) {
 8001e2c:	4828      	ldr	r0, [pc, #160]	; (8001ed0 <_ZN7canzero4initEv+0x238>)
 8001e2e:	f007 fbc1 	bl	80095b4 <HAL_CAN_Start>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d105      	bne.n	8001e44 <_ZN7canzero4initEv+0x1ac>
 8001e38:	4826      	ldr	r0, [pc, #152]	; (8001ed4 <_ZN7canzero4initEv+0x23c>)
 8001e3a:	f007 fbbb 	bl	80095b4 <HAL_CAN_Start>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <_ZN7canzero4initEv+0x1b0>
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <_ZN7canzero4initEv+0x1b2>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <_ZN7canzero4initEv+0x1ba>
		Error_Handler(); /* Start Error */
 8001e4e:	f005 feed 	bl	8007c2c <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001e52:	2102      	movs	r1, #2
 8001e54:	481e      	ldr	r0, [pc, #120]	; (8001ed0 <_ZN7canzero4initEv+0x238>)
 8001e56:	f007 fe13 	bl	8009a80 <HAL_CAN_ActivateNotification>
 8001e5a:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d10e      	bne.n	8001e7e <_ZN7canzero4initEv+0x1e6>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 8001e60:	2110      	movs	r1, #16
 8001e62:	481b      	ldr	r0, [pc, #108]	; (8001ed0 <_ZN7canzero4initEv+0x238>)
 8001e64:	f007 fe0c 	bl	8009a80 <HAL_CAN_ActivateNotification>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d107      	bne.n	8001e7e <_ZN7canzero4initEv+0x1e6>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001e6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e72:	4817      	ldr	r0, [pc, #92]	; (8001ed0 <_ZN7canzero4initEv+0x238>)
 8001e74:	f007 fe04 	bl	8009a80 <HAL_CAN_ActivateNotification>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <_ZN7canzero4initEv+0x1ea>
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e000      	b.n	8001e84 <_ZN7canzero4initEv+0x1ec>
 8001e82:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <_ZN7canzero4initEv+0x1f4>
		Error_Handler();
 8001e88:	f005 fed0 	bl	8007c2c <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001e8c:	2102      	movs	r1, #2
 8001e8e:	4811      	ldr	r0, [pc, #68]	; (8001ed4 <_ZN7canzero4initEv+0x23c>)
 8001e90:	f007 fdf6 	bl	8009a80 <HAL_CAN_ActivateNotification>
 8001e94:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d10e      	bne.n	8001eb8 <_ZN7canzero4initEv+0x220>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 8001e9a:	2110      	movs	r1, #16
 8001e9c:	480d      	ldr	r0, [pc, #52]	; (8001ed4 <_ZN7canzero4initEv+0x23c>)
 8001e9e:	f007 fdef 	bl	8009a80 <HAL_CAN_ActivateNotification>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d107      	bne.n	8001eb8 <_ZN7canzero4initEv+0x220>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001ea8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001eac:	4809      	ldr	r0, [pc, #36]	; (8001ed4 <_ZN7canzero4initEv+0x23c>)
 8001eae:	f007 fde7 	bl	8009a80 <HAL_CAN_ActivateNotification>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <_ZN7canzero4initEv+0x224>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e000      	b.n	8001ebe <_ZN7canzero4initEv+0x226>
 8001ebc:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <_ZN7canzero4initEv+0x22e>
		Error_Handler();
 8001ec2:	f005 feb3 	bl	8007c2c <Error_Handler>
	}
}
 8001ec6:	bf00      	nop
 8001ec8:	3730      	adds	r7, #48	; 0x30
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000a00 	.word	0x20000a00
 8001ed4:	20000a28 	.word	0x20000a28
 8001ed8:	08013ee8 	.word	0x08013ee8
 8001edc:	08013ec0 	.word	0x08013ec0

08001ee0 <_ZN7canzero9setStatusE9cz_status>:

void canzero::setStatus(cz_status new_status){
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(nodeStateMutex, osWaitForever);
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <_ZN7canzero9setStatusE9cz_status+0x30>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f00c ffd9 	bl	800eeaa <osMutexAcquire>
	nodeStatus = new_status;
 8001ef8:	4a06      	ldr	r2, [pc, #24]	; (8001f14 <_ZN7canzero9setStatusE9cz_status+0x34>)
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	7013      	strb	r3, [r2, #0]
	osMutexRelease(nodeStateMutex);
 8001efe:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <_ZN7canzero9setStatusE9cz_status+0x30>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f00d f81c 	bl	800ef40 <osMutexRelease>
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000630 	.word	0x20000630
 8001f14:	20000634 	.word	0x20000634

08001f18 <_ZN7canzero9getStatusEv>:


cz_status canzero::getStatus(){
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
	osMutexAcquire(nodeStateMutex, osWaitForever);
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <_ZN7canzero9getStatusEv+0x30>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f04f 31ff 	mov.w	r1, #4294967295
 8001f26:	4618      	mov	r0, r3
 8001f28:	f00c ffbf 	bl	800eeaa <osMutexAcquire>
	cz_status returnValue = (cz_status) nodeStatus;
 8001f2c:	4b07      	ldr	r3, [pc, #28]	; (8001f4c <_ZN7canzero9getStatusEv+0x34>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	71fb      	strb	r3, [r7, #7]
	osMutexRelease(nodeStateMutex);
 8001f32:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <_ZN7canzero9getStatusEv+0x30>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f00d f802 	bl	800ef40 <osMutexRelease>
	return returnValue;
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000630 	.word	0x20000630
 8001f4c:	20000634 	.word	0x20000634

08001f50 <_Z41__static_initialization_and_destruction_0ii>:
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d10a      	bne.n	8001f76 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d105      	bne.n	8001f76 <_Z41__static_initialization_and_destruction_0ii+0x26>
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001f6c:	f00c ff17 	bl	800ed9e <osMutexNew>
 8001f70:	4603      	mov	r3, r0
 8001f72:	4a04      	ldr	r2, [pc, #16]	; (8001f84 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001f74:	6013      	str	r3, [r2, #0]
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	08013f10 	.word	0x08013f10
 8001f84:	20000630 	.word	0x20000630

08001f88 <_GLOBAL__sub_I__ZN7canzero4initEv>:
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f90:	2001      	movs	r0, #1
 8001f92:	f7ff ffdd 	bl	8001f50 <_Z41__static_initialization_and_destruction_0ii>
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <canzero_start>:

#ifdef __cplusplus
extern "C" {
#endif

void canzero_start(void *argv) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08e      	sub	sp, #56	; 0x38
 8001f9c:	af02      	add	r7, sp, #8
 8001f9e:	6078      	str	r0, [r7, #4]
	canzero::init();
 8001fa0:	f7ff fe7a 	bl	8001c98 <_ZN7canzero4initEv>

	TaskHandle_t sendTaskHandle = nullptr;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61bb      	str	r3, [r7, #24]
	BaseType_t sendStatus = xTaskCreate(cz_send_entry, "cz_send", 256, NULL,
 8001fa8:	f107 0318 	add.w	r3, r7, #24
 8001fac:	9301      	str	r3, [sp, #4]
 8001fae:	2318      	movs	r3, #24
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fb8:	4939      	ldr	r1, [pc, #228]	; (80020a0 <canzero_start+0x108>)
 8001fba:	483a      	ldr	r0, [pc, #232]	; (80020a4 <canzero_start+0x10c>)
 8001fbc:	f00f f839 	bl	8011032 <xTaskCreate>
 8001fc0:	62f8      	str	r0, [r7, #44]	; 0x2c
			osPriorityNormal, &sendTaskHandle);
	if (sendStatus != pdPASS) {
 8001fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d006      	beq.n	8001fd6 <canzero_start+0x3e>
		printDebug("Failed to start canzero send task");
 8001fc8:	f010 fe24 	bl	8012c14 <vPortEnterCritical>
 8001fcc:	4836      	ldr	r0, [pc, #216]	; (80020a8 <canzero_start+0x110>)
 8001fce:	f00c fd51 	bl	800ea74 <printf_>
 8001fd2:	f010 fe4f 	bl	8012c74 <vPortExitCritical>
	}

	TaskHandle_t recvTaskHandle = nullptr;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
	BaseType_t recvStatus = xTaskCreate(cz_receive_task, "cz_receive", 256, NULL,
 8001fda:	f107 0314 	add.w	r3, r7, #20
 8001fde:	9301      	str	r3, [sp, #4]
 8001fe0:	2318      	movs	r3, #24
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fea:	4930      	ldr	r1, [pc, #192]	; (80020ac <canzero_start+0x114>)
 8001fec:	4830      	ldr	r0, [pc, #192]	; (80020b0 <canzero_start+0x118>)
 8001fee:	f00f f820 	bl	8011032 <xTaskCreate>
 8001ff2:	62b8      	str	r0, [r7, #40]	; 0x28
			osPriorityNormal, &recvTaskHandle);
	if (recvStatus != pdPASS) {
 8001ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d006      	beq.n	8002008 <canzero_start+0x70>
		printDebug("Failed to start canzero receive task");
 8001ffa:	f010 fe0b 	bl	8012c14 <vPortEnterCritical>
 8001ffe:	482d      	ldr	r0, [pc, #180]	; (80020b4 <canzero_start+0x11c>)
 8002000:	f00c fd38 	bl	800ea74 <printf_>
 8002004:	f010 fe36 	bl	8012c74 <vPortExitCritical>
	}
	TaskHandle_t heartbeatConsumerTaskHandle = nullptr;
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]
	BaseType_t heartbeatConsumerStatus = xTaskCreate(
 800200c:	f107 0310 	add.w	r3, r7, #16
 8002010:	9301      	str	r3, [sp, #4]
 8002012:	2318      	movs	r3, #24
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2300      	movs	r3, #0
 8002018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800201c:	4926      	ldr	r1, [pc, #152]	; (80020b8 <canzero_start+0x120>)
 800201e:	4827      	ldr	r0, [pc, #156]	; (80020bc <canzero_start+0x124>)
 8002020:	f00f f807 	bl	8011032 <xTaskCreate>
 8002024:	6278      	str	r0, [r7, #36]	; 0x24
			canzero::heartbeat::consumer_entry, "cz_ht_con", 256, NULL,
			osPriorityNormal, &heartbeatConsumerTaskHandle);
	if(heartbeatConsumerStatus != pdPASS){
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	2b01      	cmp	r3, #1
 800202a:	d006      	beq.n	800203a <canzero_start+0xa2>
		printDebug("Failed to start canzero heartbeat consumer task");
 800202c:	f010 fdf2 	bl	8012c14 <vPortEnterCritical>
 8002030:	4823      	ldr	r0, [pc, #140]	; (80020c0 <canzero_start+0x128>)
 8002032:	f00c fd1f 	bl	800ea74 <printf_>
 8002036:	f010 fe1d 	bl	8012c74 <vPortExitCritical>
	}

	TaskHandle_t heartbeatProducerTaskHandle = nullptr;
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
	BaseType_t heartbeatProducerStatus = xTaskCreate(
 800203e:	f107 030c 	add.w	r3, r7, #12
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	2318      	movs	r3, #24
 8002046:	9300      	str	r3, [sp, #0]
 8002048:	2300      	movs	r3, #0
 800204a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800204e:	491d      	ldr	r1, [pc, #116]	; (80020c4 <canzero_start+0x12c>)
 8002050:	481d      	ldr	r0, [pc, #116]	; (80020c8 <canzero_start+0x130>)
 8002052:	f00e ffee 	bl	8011032 <xTaskCreate>
 8002056:	6238      	str	r0, [r7, #32]
			canzero::heartbeat::producer_entry, "cz_ht_pro", 256, NULL,
			osPriorityNormal, &heartbeatProducerTaskHandle
			);
	if(heartbeatProducerStatus != pdPASS){
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d006      	beq.n	800206c <canzero_start+0xd4>
		printDebug("Failed to start canzero heartbeat producer task");
 800205e:	f010 fdd9 	bl	8012c14 <vPortEnterCritical>
 8002062:	481a      	ldr	r0, [pc, #104]	; (80020cc <canzero_start+0x134>)
 8002064:	f00c fd06 	bl	800ea74 <printf_>
 8002068:	f010 fe04 	bl	8012c74 <vPortExitCritical>
	}

	TaskHandle_t emcyTaskHandle = nullptr;
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
	BaseType_t emcyStatus = xTaskCreate(canzero::emergency::consumer_entry, "cz_emcy", 256, NULL,
 8002070:	f107 0308 	add.w	r3, r7, #8
 8002074:	9301      	str	r3, [sp, #4]
 8002076:	2328      	movs	r3, #40	; 0x28
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	2300      	movs	r3, #0
 800207c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002080:	4913      	ldr	r1, [pc, #76]	; (80020d0 <canzero_start+0x138>)
 8002082:	4814      	ldr	r0, [pc, #80]	; (80020d4 <canzero_start+0x13c>)
 8002084:	f00e ffd5 	bl	8011032 <xTaskCreate>
 8002088:	61f8      	str	r0, [r7, #28]
			osPriorityHigh, &emcyTaskHandle);
	if(emcyStatus != pdPASS){
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d001      	beq.n	8002094 <canzero_start+0xfc>
		Error_Handler();
 8002090:	f005 fdcc 	bl	8007c2c <Error_Handler>
	}
	*/


	while (true) {
		osDelay(osWaitForever);
 8002094:	f04f 30ff 	mov.w	r0, #4294967295
 8002098:	f00c fe66 	bl	800ed68 <osDelay>
 800209c:	e7fa      	b.n	8002094 <canzero_start+0xfc>
 800209e:	bf00      	nop
 80020a0:	08013d24 	.word	0x08013d24
 80020a4:	08001af5 	.word	0x08001af5
 80020a8:	08013d2c 	.word	0x08013d2c
 80020ac:	08013d50 	.word	0x08013d50
 80020b0:	08001821 	.word	0x08001821
 80020b4:	08013d5c 	.word	0x08013d5c
 80020b8:	08013d84 	.word	0x08013d84
 80020bc:	080012bd 	.word	0x080012bd
 80020c0:	08013d90 	.word	0x08013d90
 80020c4:	08013dc0 	.word	0x08013dc0
 80020c8:	08001255 	.word	0x08001255
 80020cc:	08013dcc 	.word	0x08013dcc
 80020d0:	08013dfc 	.word	0x08013dfc
 80020d4:	080011eb 	.word	0x080011eb

080020d8 <_ZN7canzero24handle_emergency_warningEv>:
#define CANZERO_STATIC_SRC_CZ_WEAK_CPP_

#include "cz_weak.hpp"


void __attribute__((weak)) canzero::handle_emergency_warning(){
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr

080020e6 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>:

void __attribute__((weak)) canzero::handle_heartbeat_miss(){
	//TODO missing default implementation.
}

void __attribute__((weak)) canzero::handle_txmailbox_overflow(CAN_HandleTypeDef* hcan){
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
	//TODO missing default implementation.
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <_ZN7canzero32handle_trasmission_request_errorEv>:

void __attribute__((weak)) canzero::handle_trasmission_request_error(){
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 80020fe:	bf00      	nop
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002112:	ed97 0a01 	vldr	s0, [r7, #4]
 8002116:	f011 f8cb 	bl	80132b0 <roundf>
 800211a:	eef0 7a40 	vmov.f32	s15, s0
 800211e:	eeb0 0a67 	vmov.f32	s0, s15
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}

08002128 <_ZN3can11MessageBaseC1EmhbPKh>:
        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt, const uint8_t rxBuf[8]) noexcept : id{_id}, dlc{_dlc}, isExtendedId{_isExt} {
 8002128:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800212c:	b0a2      	sub	sp, #136	; 0x88
 800212e:	af00      	add	r7, sp, #0
 8002130:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8002134:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8002138:	4619      	mov	r1, r3
 800213a:	4613      	mov	r3, r2
 800213c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002140:	460b      	mov	r3, r1
 8002142:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002146:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800214a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800214e:	6013      	str	r3, [r2, #0]
 8002150:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002154:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002158:	7113      	strb	r3, [r2, #4]
 800215a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800215e:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002162:	7153      	strb	r3, [r2, #5]
            intel = static_cast<uint32_t>(rxBuf[0]) + (static_cast<uint32_t>(rxBuf[1]) << 8) + (static_cast<uint32_t>(rxBuf[2]) << 16) + (static_cast<uint32_t>(rxBuf[3]) << 24);
 8002164:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	461a      	mov	r2, r3
 800216c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002170:	3301      	adds	r3, #1
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	021b      	lsls	r3, r3, #8
 8002176:	441a      	add	r2, r3
 8002178:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800217c:	3302      	adds	r3, #2
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	041b      	lsls	r3, r3, #16
 8002182:	441a      	add	r2, r3
 8002184:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002188:	3303      	adds	r3, #3
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	061b      	lsls	r3, r3, #24
 800218e:	4413      	add	r3, r2
 8002190:	2200      	movs	r2, #0
 8002192:	461c      	mov	r4, r3
 8002194:	4615      	mov	r5, r2
 8002196:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800219a:	e9c3 4502 	strd	r4, r5, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[4]) << 32) + (static_cast<uint64_t>(rxBuf[5]) << 40);
 800219e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021a2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80021a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021aa:	3304      	adds	r3, #4
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2200      	movs	r2, #0
 80021b2:	673b      	str	r3, [r7, #112]	; 0x70
 80021b4:	677a      	str	r2, [r7, #116]	; 0x74
 80021b6:	f04f 0000 	mov.w	r0, #0
 80021ba:	f04f 0100 	mov.w	r1, #0
 80021be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021c0:	0019      	movs	r1, r3
 80021c2:	2000      	movs	r0, #0
 80021c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80021c8:	3305      	adds	r3, #5
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2200      	movs	r2, #0
 80021d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80021d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 80021de:	0233      	lsls	r3, r6, #8
 80021e0:	2200      	movs	r2, #0
 80021e2:	eb10 0802 	adds.w	r8, r0, r2
 80021e6:	eb41 0903 	adc.w	r9, r1, r3
 80021ea:	eb14 0308 	adds.w	r3, r4, r8
 80021ee:	663b      	str	r3, [r7, #96]	; 0x60
 80021f0:	eb45 0309 	adc.w	r3, r5, r9
 80021f4:	667b      	str	r3, [r7, #100]	; 0x64
 80021f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021fa:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80021fe:	e9c3 1202 	strd	r1, r2, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[6]) << 48) + (static_cast<uint64_t>(rxBuf[7]) << 56);
 8002202:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002206:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800220a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800220e:	3306      	adds	r3, #6
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2200      	movs	r2, #0
 8002216:	65bb      	str	r3, [r7, #88]	; 0x58
 8002218:	65fa      	str	r2, [r7, #92]	; 0x5c
 800221a:	f04f 0000 	mov.w	r0, #0
 800221e:	f04f 0100 	mov.w	r1, #0
 8002222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002224:	0419      	lsls	r1, r3, #16
 8002226:	2000      	movs	r0, #0
 8002228:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800222c:	3307      	adds	r3, #7
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2200      	movs	r2, #0
 8002234:	653b      	str	r3, [r7, #80]	; 0x50
 8002236:	657a      	str	r2, [r7, #84]	; 0x54
 8002238:	f04f 0200 	mov.w	r2, #0
 800223c:	f04f 0300 	mov.w	r3, #0
 8002240:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8002242:	0633      	lsls	r3, r6, #24
 8002244:	2200      	movs	r2, #0
 8002246:	eb10 0a02 	adds.w	sl, r0, r2
 800224a:	eb41 0b03 	adc.w	fp, r1, r3
 800224e:	eb14 030a 	adds.w	r3, r4, sl
 8002252:	64bb      	str	r3, [r7, #72]	; 0x48
 8002254:	eb45 030b 	adc.w	r3, r5, fp
 8002258:	64fb      	str	r3, [r7, #76]	; 0x4c
 800225a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800225e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8002262:	e9c3 1202 	strd	r1, r2, [r3, #8]
            motorola = static_cast<uint32_t>(rxBuf[7]) + (static_cast<uint32_t>(rxBuf[6]) << 8) + (static_cast<uint32_t>(rxBuf[5]) << 16) + (static_cast<uint32_t>(rxBuf[4]) << 24);
 8002266:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800226a:	3307      	adds	r3, #7
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002274:	3306      	adds	r3, #6
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	021b      	lsls	r3, r3, #8
 800227a:	441a      	add	r2, r3
 800227c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002280:	3305      	adds	r3, #5
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	041b      	lsls	r3, r3, #16
 8002286:	441a      	add	r2, r3
 8002288:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800228c:	3304      	adds	r3, #4
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	061b      	lsls	r3, r3, #24
 8002292:	4413      	add	r3, r2
 8002294:	2200      	movs	r2, #0
 8002296:	643b      	str	r3, [r7, #64]	; 0x40
 8002298:	647a      	str	r2, [r7, #68]	; 0x44
 800229a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800229e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80022a2:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[3]) << 32) + (static_cast<uint64_t>(rxBuf[2]) << 40);
 80022a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022aa:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80022ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022b2:	3303      	adds	r3, #3
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2200      	movs	r2, #0
 80022ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80022bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80022be:	f04f 0000 	mov.w	r0, #0
 80022c2:	f04f 0100 	mov.w	r1, #0
 80022c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022c8:	0019      	movs	r1, r3
 80022ca:	2000      	movs	r0, #0
 80022cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022d0:	3302      	adds	r3, #2
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2200      	movs	r2, #0
 80022d8:	633b      	str	r3, [r7, #48]	; 0x30
 80022da:	637a      	str	r2, [r7, #52]	; 0x34
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80022e6:	0233      	lsls	r3, r6, #8
 80022e8:	2200      	movs	r2, #0
 80022ea:	1886      	adds	r6, r0, r2
 80022ec:	62be      	str	r6, [r7, #40]	; 0x28
 80022ee:	eb41 0303 	adc.w	r3, r1, r3
 80022f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022f4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80022f8:	460b      	mov	r3, r1
 80022fa:	18e3      	adds	r3, r4, r3
 80022fc:	623b      	str	r3, [r7, #32]
 80022fe:	4613      	mov	r3, r2
 8002300:	eb45 0303 	adc.w	r3, r5, r3
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
 8002306:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800230a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800230e:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[1]) << 48) + (static_cast<uint64_t>(rxBuf[0]) << 56);
 8002312:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002316:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800231a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800231e:	3301      	adds	r3, #1
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	2200      	movs	r2, #0
 8002326:	61bb      	str	r3, [r7, #24]
 8002328:	61fa      	str	r2, [r7, #28]
 800232a:	f04f 0000 	mov.w	r0, #0
 800232e:	f04f 0100 	mov.w	r1, #0
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	0419      	lsls	r1, r3, #16
 8002336:	2000      	movs	r0, #0
 8002338:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2200      	movs	r2, #0
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	617a      	str	r2, [r7, #20]
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	693e      	ldr	r6, [r7, #16]
 8002350:	0633      	lsls	r3, r6, #24
 8002352:	2200      	movs	r2, #0
 8002354:	1886      	adds	r6, r0, r2
 8002356:	60be      	str	r6, [r7, #8]
 8002358:	eb41 0303 	adc.w	r3, r1, r3
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002362:	460b      	mov	r3, r1
 8002364:	18e3      	adds	r3, r4, r3
 8002366:	603b      	str	r3, [r7, #0]
 8002368:	4613      	mov	r3, r2
 800236a:	eb45 0303 	adc.w	r3, r5, r3
 800236e:	607b      	str	r3, [r7, #4]
 8002370:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002374:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002378:	e9c3 1204 	strd	r1, r2, [r3, #16]
        };
 800237c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002380:	4618      	mov	r0, r3
 8002382:	3788      	adds	r7, #136	; 0x88
 8002384:	46bd      	mov	sp, r7
 8002386:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800238a:	4770      	bx	lr

0800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 3;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1, 0x601 };
            constexpr static uint16_t min = static_cast<uint16_t>(0);
            constexpr static uint16_t max = static_cast<uint16_t>(4095);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800238c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002390:	b087      	sub	sp, #28
 8002392:	af00      	add	r7, sp, #0
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
 800239a:	807b      	strh	r3, [r7, #2]
                if (value > max) {
 800239c:	887b      	ldrh	r3, [r7, #2]
 800239e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a2:	d302      	bcc.n	80023aa <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht+0x1e>
                    value = max;
 80023a4:	f640 73ff 	movw	r3, #4095	; 0xfff
 80023a8:	807b      	strh	r3, [r7, #2]
                }
                if (value < min) {
                    value = min;
                }
                uint16_t rawValue = (value);
 80023aa:	887b      	ldrh	r3, [r7, #2]
 80023ac:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b4:	8af9      	ldrh	r1, [r7, #22]
 80023b6:	2000      	movs	r0, #0
 80023b8:	468a      	mov	sl, r1
 80023ba:	4683      	mov	fp, r0
 80023bc:	f3ca 040b 	ubfx	r4, sl, #0, #12
 80023c0:	2500      	movs	r5, #0
 80023c2:	ea42 0804 	orr.w	r8, r2, r4
 80023c6:	ea43 0905 	orr.w	r9, r3, r5
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	e9c3 8900 	strd	r8, r9, [r3]
            }
 80023d0:	bf00      	nop
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80023da:	4770      	bx	lr

080023dc <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ec:	b293      	uxth	r3, r2
 80023ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f2:	81fb      	strh	r3, [r7, #14]
                return value;
 80023f4:	89fb      	ldrh	r3, [r7, #14]
            }
 80023f6:	4618      	mov	r0, r3
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <_ZN3can7signals19SENSOR_SDO_RespCode3setERyS2_Rhh>:
        class SENSOR_SDO_RespCode {
            public:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x581 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002402:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002406:	b087      	sub	sp, #28
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xF000ull;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	e9d3 0100 	ldrd	r0, r1, [r3]
 800241c:	7dfb      	ldrb	r3, [r7, #23]
 800241e:	2200      	movs	r2, #0
 8002420:	4698      	mov	r8, r3
 8002422:	4691      	mov	r9, r2
 8002424:	f04f 0200 	mov.w	r2, #0
 8002428:	f04f 0300 	mov.w	r3, #0
 800242c:	ea4f 3309 	mov.w	r3, r9, lsl #12
 8002430:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 8002434:	ea4f 3208 	mov.w	r2, r8, lsl #12
 8002438:	b294      	uxth	r4, r2
 800243a:	2500      	movs	r5, #0
 800243c:	ea40 0a04 	orr.w	sl, r0, r4
 8002440:	ea41 0b05 	orr.w	fp, r1, r5
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800244a:	bf00      	nop
 800244c:	371c      	adds	r7, #28
 800244e:	46bd      	mov	sp, r7
 8002450:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002454:	4770      	bx	lr
	...

08002458 <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800245c:	b088      	sub	sp, #32
 800245e:	af00      	add	r7, sp, #0
 8002460:	6178      	str	r0, [r7, #20]
 8002462:	6139      	str	r1, [r7, #16]
 8002464:	60fa      	str	r2, [r7, #12]
 8002466:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800246a:	edd7 7a02 	vldr	s15, [r7, #8]
 800246e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800250c <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0xb4>
 8002472:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800247a:	dd01      	ble.n	8002480 <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 800247c:	4b24      	ldr	r3, [pc, #144]	; (8002510 <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0xb8>)
 800247e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002480:	edd7 7a02 	vldr	s15, [r7, #8]
 8002484:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002514 <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0xbc>
 8002488:	eef4 7ac7 	vcmpe.f32	s15, s14
 800248c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002490:	d501      	bpl.n	8002496 <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 8002492:	4b21      	ldr	r3, [pc, #132]	; (8002518 <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0xc0>)
 8002494:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 2599);
 8002496:	f640 2327 	movw	r3, #2599	; 0xa27
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	6939      	ldr	r1, [r7, #16]
 800249e:	6978      	ldr	r0, [r7, #20]
 80024a0:	f7ff ff74 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 80024a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80024a8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800251c <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0xc4>
 80024ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024b0:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002520 <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf+0xc8>
 80024b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80024b8:	eeb0 0a47 	vmov.f32	s0, s14
 80024bc:	f7ff fe24 	bl	8002108 <_ZSt5roundf>
 80024c0:	eef0 7a40 	vmov.f32	s15, s0
 80024c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024c8:	ee17 3a90 	vmov	r3, s15
 80024cc:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d4:	8bf9      	ldrh	r1, [r7, #30]
 80024d6:	2000      	movs	r0, #0
 80024d8:	4688      	mov	r8, r1
 80024da:	4681      	mov	r9, r0
 80024dc:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80024e0:	6079      	str	r1, [r7, #4]
 80024e2:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80024e6:	6039      	str	r1, [r7, #0]
 80024e8:	683c      	ldr	r4, [r7, #0]
 80024ea:	2500      	movs	r5, #0
 80024ec:	ea42 0a04 	orr.w	sl, r2, r4
 80024f0:	ea43 0b05 	orr.w	fp, r3, r5
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2204      	movs	r2, #4
 80024fe:	701a      	strb	r2, [r3, #0]
            }
 8002500:	bf00      	nop
 8002502:	3720      	adds	r7, #32
 8002504:	46bd      	mov	sp, r7
 8002506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800250a:	bf00      	nop
 800250c:	440ad666 	.word	0x440ad666
 8002510:	440ad666 	.word	0x440ad666
 8002514:	c2c80000 	.word	0xc2c80000
 8002518:	c2c80000 	.word	0xc2c80000
 800251c:	42c80000 	.word	0x42c80000
 8002520:	3c23d70a 	.word	0x3c23d70a

08002524 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002528:	b088      	sub	sp, #32
 800252a:	af00      	add	r7, sp, #0
 800252c:	6178      	str	r0, [r7, #20]
 800252e:	6139      	str	r1, [r7, #16]
 8002530:	60fa      	str	r2, [r7, #12]
 8002532:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002536:	edd7 7a02 	vldr	s15, [r7, #8]
 800253a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80025d8 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0xb4>
 800253e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002546:	dd01      	ble.n	800254c <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 8002548:	4b24      	ldr	r3, [pc, #144]	; (80025dc <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0xb8>)
 800254a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 800254c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002550:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80025e0 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0xbc>
 8002554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800255c:	d501      	bpl.n	8002562 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 800255e:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0xc0>)
 8002560:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 2598);
 8002562:	f640 2326 	movw	r3, #2598	; 0xa26
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	6939      	ldr	r1, [r7, #16]
 800256a:	6978      	ldr	r0, [r7, #20]
 800256c:	f7ff ff0e 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002570:	edd7 7a02 	vldr	s15, [r7, #8]
 8002574:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80025e8 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0xc4>
 8002578:	ee77 7a87 	vadd.f32	s15, s15, s14
 800257c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80025ec <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf+0xc8>
 8002580:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002584:	eeb0 0a47 	vmov.f32	s0, s14
 8002588:	f7ff fdbe 	bl	8002108 <_ZSt5roundf>
 800258c:	eef0 7a40 	vmov.f32	s15, s0
 8002590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002594:	ee17 3a90 	vmov	r3, s15
 8002598:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a0:	8bf9      	ldrh	r1, [r7, #30]
 80025a2:	2000      	movs	r0, #0
 80025a4:	4688      	mov	r8, r1
 80025a6:	4681      	mov	r9, r0
 80025a8:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80025ac:	6079      	str	r1, [r7, #4]
 80025ae:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80025b2:	6039      	str	r1, [r7, #0]
 80025b4:	683c      	ldr	r4, [r7, #0]
 80025b6:	2500      	movs	r5, #0
 80025b8:	ea42 0a04 	orr.w	sl, r2, r4
 80025bc:	ea43 0b05 	orr.w	fp, r3, r5
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2204      	movs	r2, #4
 80025ca:	701a      	strb	r2, [r3, #0]
            }
 80025cc:	bf00      	nop
 80025ce:	3720      	adds	r7, #32
 80025d0:	46bd      	mov	sp, r7
 80025d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025d6:	bf00      	nop
 80025d8:	440ad666 	.word	0x440ad666
 80025dc:	440ad666 	.word	0x440ad666
 80025e0:	c2c80000 	.word	0xc2c80000
 80025e4:	c2c80000 	.word	0xc2c80000
 80025e8:	42c80000 	.word	0x42c80000
 80025ec:	3c23d70a 	.word	0x3c23d70a

080025f0 <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80025f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025f4:	b088      	sub	sp, #32
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6178      	str	r0, [r7, #20]
 80025fa:	6139      	str	r1, [r7, #16]
 80025fc:	60fa      	str	r2, [r7, #12]
 80025fe:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002602:	edd7 7a02 	vldr	s15, [r7, #8]
 8002606:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80026a4 <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0xb4>
 800260a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800260e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002612:	dd01      	ble.n	8002618 <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 8002614:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0xb8>)
 8002616:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002618:	edd7 7a02 	vldr	s15, [r7, #8]
 800261c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80026ac <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0xbc>
 8002620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002628:	d501      	bpl.n	800262e <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 800262a:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0xc0>)
 800262c:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 2597);
 800262e:	f640 2325 	movw	r3, #2597	; 0xa25
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	6939      	ldr	r1, [r7, #16]
 8002636:	6978      	ldr	r0, [r7, #20]
 8002638:	f7ff fea8 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 800263c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002640:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80026b4 <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0xc4>
 8002644:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002648:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80026b8 <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf+0xc8>
 800264c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002650:	eeb0 0a47 	vmov.f32	s0, s14
 8002654:	f7ff fd58 	bl	8002108 <_ZSt5roundf>
 8002658:	eef0 7a40 	vmov.f32	s15, s0
 800265c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002660:	ee17 3a90 	vmov	r3, s15
 8002664:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800266c:	8bf9      	ldrh	r1, [r7, #30]
 800266e:	2000      	movs	r0, #0
 8002670:	4688      	mov	r8, r1
 8002672:	4681      	mov	r9, r0
 8002674:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002678:	6079      	str	r1, [r7, #4]
 800267a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800267e:	6039      	str	r1, [r7, #0]
 8002680:	683c      	ldr	r4, [r7, #0]
 8002682:	2500      	movs	r5, #0
 8002684:	ea42 0a04 	orr.w	sl, r2, r4
 8002688:	ea43 0b05 	orr.w	fp, r3, r5
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2204      	movs	r2, #4
 8002696:	701a      	strb	r2, [r3, #0]
            }
 8002698:	bf00      	nop
 800269a:	3720      	adds	r7, #32
 800269c:	46bd      	mov	sp, r7
 800269e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026a2:	bf00      	nop
 80026a4:	440ad666 	.word	0x440ad666
 80026a8:	440ad666 	.word	0x440ad666
 80026ac:	c2c80000 	.word	0xc2c80000
 80026b0:	c2c80000 	.word	0xc2c80000
 80026b4:	42c80000 	.word	0x42c80000
 80026b8:	3c23d70a 	.word	0x3c23d70a

080026bc <_ZN3can7signals20SENSOR_OD_IMU_number3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 2592            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80026bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 2592);
 80026cc:	f44f 6322 	mov.w	r3, #2592	; 0xa20
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	68b9      	ldr	r1, [r7, #8]
 80026d4:	68f8      	ldr	r0, [r7, #12]
 80026d6:	f7ff fe59 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80026da:	78fb      	ldrb	r3, [r7, #3]
 80026dc:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026e4:	7dfb      	ldrb	r3, [r7, #23]
 80026e6:	2200      	movs	r2, #0
 80026e8:	4698      	mov	r8, r3
 80026ea:	4691      	mov	r9, r2
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80026f8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80026fc:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002700:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002704:	2500      	movs	r5, #0
 8002706:	ea40 0a04 	orr.w	sl, r0, r4
 800270a:	ea41 0b05 	orr.w	fp, r1, r5
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2203      	movs	r2, #3
 8002718:	701a      	strb	r2, [r3, #0]
            }
 800271a:	bf00      	nop
 800271c:	3718      	adds	r7, #24
 800271e:	46bd      	mov	sp, r7
 8002720:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002724 <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002728:	b088      	sub	sp, #32
 800272a:	af00      	add	r7, sp, #0
 800272c:	6178      	str	r0, [r7, #20]
 800272e:	6139      	str	r1, [r7, #16]
 8002730:	60fa      	str	r2, [r7, #12]
 8002732:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800273a:	d302      	bcc.n	8002742 <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 800273c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002740:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1129);
 8002742:	f240 4369 	movw	r3, #1129	; 0x469
 8002746:	68fa      	ldr	r2, [r7, #12]
 8002748:	6939      	ldr	r1, [r7, #16]
 800274a:	6978      	ldr	r0, [r7, #20]
 800274c:	f7ff fe1e 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800275a:	69f9      	ldr	r1, [r7, #28]
 800275c:	2000      	movs	r0, #0
 800275e:	468a      	mov	sl, r1
 8002760:	4683      	mov	fp, r0
 8002762:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002766:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800276a:	ea4f 4418 	mov.w	r4, r8, lsr #16
 800276e:	0424      	lsls	r4, r4, #16
 8002770:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002774:	ea42 0104 	orr.w	r1, r2, r4
 8002778:	6039      	str	r1, [r7, #0]
 800277a:	432b      	orrs	r3, r5
 800277c:	607b      	str	r3, [r7, #4]
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002784:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2205      	movs	r2, #5
 800278c:	701a      	strb	r2, [r3, #0]
            }
 800278e:	bf00      	nop
 8002790:	3720      	adds	r7, #32
 8002792:	46bd      	mov	sp, r7
 8002794:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002798 <_ZN3can7signals26SENSOR_OD_CAN2_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1128            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800279c:	b086      	sub	sp, #24
 800279e:	af00      	add	r7, sp, #0
 80027a0:	60f8      	str	r0, [r7, #12]
 80027a2:	60b9      	str	r1, [r7, #8]
 80027a4:	607a      	str	r2, [r7, #4]
 80027a6:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1128);
 80027a8:	f44f 638d 	mov.w	r3, #1128	; 0x468
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	68b9      	ldr	r1, [r7, #8]
 80027b0:	68f8      	ldr	r0, [r7, #12]
 80027b2:	f7ff fdeb 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027c0:	7dfb      	ldrb	r3, [r7, #23]
 80027c2:	2200      	movs	r2, #0
 80027c4:	4698      	mov	r8, r3
 80027c6:	4691      	mov	r9, r2
 80027c8:	f04f 0200 	mov.w	r2, #0
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80027d4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80027d8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80027dc:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80027e0:	2500      	movs	r5, #0
 80027e2:	ea40 0a04 	orr.w	sl, r0, r4
 80027e6:	ea41 0b05 	orr.w	fp, r1, r5
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2203      	movs	r2, #3
 80027f4:	701a      	strb	r2, [r3, #0]
            }
 80027f6:	bf00      	nop
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002800 <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002800:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002804:	b088      	sub	sp, #32
 8002806:	af00      	add	r7, sp, #0
 8002808:	6178      	str	r0, [r7, #20]
 800280a:	6139      	str	r1, [r7, #16]
 800280c:	60fa      	str	r2, [r7, #12]
 800280e:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002816:	d302      	bcc.n	800281e <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8002818:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800281c:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1127);
 800281e:	f240 4367 	movw	r3, #1127	; 0x467
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	6939      	ldr	r1, [r7, #16]
 8002826:	6978      	ldr	r0, [r7, #20]
 8002828:	f7ff fdb0 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002836:	69f9      	ldr	r1, [r7, #28]
 8002838:	2000      	movs	r0, #0
 800283a:	468a      	mov	sl, r1
 800283c:	4683      	mov	fp, r0
 800283e:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002842:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002846:	ea4f 4418 	mov.w	r4, r8, lsr #16
 800284a:	0424      	lsls	r4, r4, #16
 800284c:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002850:	ea42 0104 	orr.w	r1, r2, r4
 8002854:	6039      	str	r1, [r7, #0]
 8002856:	432b      	orrs	r3, r5
 8002858:	607b      	str	r3, [r7, #4]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002860:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2205      	movs	r2, #5
 8002868:	701a      	strb	r2, [r3, #0]
            }
 800286a:	bf00      	nop
 800286c:	3720      	adds	r7, #32
 800286e:	46bd      	mov	sp, r7
 8002870:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002874 <_ZN3can7signals21SENSOR_OD_CAN2_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1126            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002878:	b086      	sub	sp, #24
 800287a:	af00      	add	r7, sp, #0
 800287c:	60f8      	str	r0, [r7, #12]
 800287e:	60b9      	str	r1, [r7, #8]
 8002880:	607a      	str	r2, [r7, #4]
 8002882:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1126);
 8002884:	f240 4366 	movw	r3, #1126	; 0x466
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	68b9      	ldr	r1, [r7, #8]
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f7ff fd7d 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002892:	78fb      	ldrb	r3, [r7, #3]
 8002894:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	e9d3 0100 	ldrd	r0, r1, [r3]
 800289c:	7dfb      	ldrb	r3, [r7, #23]
 800289e:	2200      	movs	r2, #0
 80028a0:	4698      	mov	r8, r3
 80028a2:	4691      	mov	r9, r2
 80028a4:	f04f 0200 	mov.w	r2, #0
 80028a8:	f04f 0300 	mov.w	r3, #0
 80028ac:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80028b0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80028b4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80028b8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80028bc:	2500      	movs	r5, #0
 80028be:	ea40 0a04 	orr.w	sl, r0, r4
 80028c2:	ea41 0b05 	orr.w	fp, r1, r5
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2203      	movs	r2, #3
 80028d0:	701a      	strb	r2, [r3, #0]
            }
 80028d2:	bf00      	nop
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080028dc <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80028dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028e0:	b088      	sub	sp, #32
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6178      	str	r0, [r7, #20]
 80028e6:	6139      	str	r1, [r7, #16]
 80028e8:	60fa      	str	r2, [r7, #12]
 80028ea:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 80028ec:	897b      	ldrh	r3, [r7, #10]
 80028ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028f2:	d902      	bls.n	80028fa <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 80028f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028f8:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 80028fa:	897b      	ldrh	r3, [r7, #10]
 80028fc:	2b7c      	cmp	r3, #124	; 0x7c
 80028fe:	d801      	bhi.n	8002904 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 8002900:	237d      	movs	r3, #125	; 0x7d
 8002902:	817b      	strh	r3, [r7, #10]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1124);
 8002904:	f240 4364 	movw	r3, #1124	; 0x464
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	6939      	ldr	r1, [r7, #16]
 800290c:	6978      	ldr	r0, [r7, #20]
 800290e:	f7ff fd3d 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002912:	897b      	ldrh	r3, [r7, #10]
 8002914:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800291c:	8bf9      	ldrh	r1, [r7, #30]
 800291e:	2000      	movs	r0, #0
 8002920:	4688      	mov	r8, r1
 8002922:	4681      	mov	r9, r0
 8002924:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002928:	6079      	str	r1, [r7, #4]
 800292a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800292e:	6039      	str	r1, [r7, #0]
 8002930:	683c      	ldr	r4, [r7, #0]
 8002932:	2500      	movs	r5, #0
 8002934:	ea42 0a04 	orr.w	sl, r2, r4
 8002938:	ea43 0b05 	orr.w	fp, r3, r5
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2204      	movs	r2, #4
 8002946:	701a      	strb	r2, [r3, #0]
            }
 8002948:	bf00      	nop
 800294a:	3720      	adds	r7, #32
 800294c:	46bd      	mov	sp, r7
 800294e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002952 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1124) {
 800295c:	6839      	ldr	r1, [r7, #0]
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff fd3c 	bl	80023dc <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002964:	4603      	mov	r3, r0
 8002966:	461a      	mov	r2, r3
 8002968:	f240 4364 	movw	r3, #1124	; 0x464
 800296c:	429a      	cmp	r2, r3
 800296e:	bf14      	ite	ne
 8002970:	2301      	movne	r3, #1
 8002972:	2300      	moveq	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d000      	beq.n	800297c <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_+0x2a>
                    while(1);
 800297a:	e7fe      	b.n	800297a <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	0c02      	lsrs	r2, r0, #16
 800298c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002990:	0c0b      	lsrs	r3, r1, #16
 8002992:	4613      	mov	r3, r2
 8002994:	81fb      	strh	r3, [r7, #14]
                return value;
 8002996:	89fb      	ldrh	r3, [r7, #14]
            }
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1123            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80029a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029a4:	b086      	sub	sp, #24
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
 80029ae:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1123);
 80029b0:	f240 4363 	movw	r3, #1123	; 0x463
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	68b9      	ldr	r1, [r7, #8]
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f7ff fce7 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80029be:	78fb      	ldrb	r3, [r7, #3]
 80029c0:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029c8:	7dfb      	ldrb	r3, [r7, #23]
 80029ca:	2200      	movs	r2, #0
 80029cc:	4698      	mov	r8, r3
 80029ce:	4691      	mov	r9, r2
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80029dc:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80029e0:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80029e4:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80029e8:	2500      	movs	r5, #0
 80029ea:	ea40 0a04 	orr.w	sl, r0, r4
 80029ee:	ea41 0b05 	orr.w	fp, r1, r5
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2203      	movs	r2, #3
 80029fc:	701a      	strb	r2, [r3, #0]
            }
 80029fe:	bf00      	nop
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002a08 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1123) {
 8002a12:	6839      	ldr	r1, [r7, #0]
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7ff fce1 	bl	80023dc <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	f240 4363 	movw	r3, #1123	; 0x463
 8002a22:	429a      	cmp	r2, r3
 8002a24:	bf14      	ite	ne
 8002a26:	2301      	movne	r3, #1
 8002a28:	2300      	moveq	r3, #0
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d000      	beq.n	8002a32 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8002a30:	e7fe      	b.n	8002a30 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	0c02      	lsrs	r2, r0, #16
 8002a42:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002a46:	0c0b      	lsrs	r3, r1, #16
 8002a48:	4613      	mov	r3, r2
 8002a4a:	73fb      	strb	r3, [r7, #15]
                return value;
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
            }
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1122            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a5c:	b088      	sub	sp, #32
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6178      	str	r0, [r7, #20]
 8002a62:	6139      	str	r1, [r7, #16]
 8002a64:	60fa      	str	r2, [r7, #12]
 8002a66:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1122);
 8002a68:	f240 4362 	movw	r3, #1122	; 0x462
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	6939      	ldr	r1, [r7, #16]
 8002a70:	6978      	ldr	r0, [r7, #20]
 8002a72:	f7ff fc8b 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a80:	69f9      	ldr	r1, [r7, #28]
 8002a82:	2000      	movs	r0, #0
 8002a84:	468a      	mov	sl, r1
 8002a86:	4683      	mov	fp, r0
 8002a88:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002a8c:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002a90:	480c      	ldr	r0, [pc, #48]	; (8002ac4 <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm+0x6c>)
 8002a92:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002a96:	ea08 0400 	and.w	r4, r8, r0
 8002a9a:	ea09 0501 	and.w	r5, r9, r1
 8002a9e:	ea42 0104 	orr.w	r1, r2, r4
 8002aa2:	6039      	str	r1, [r7, #0]
 8002aa4:	432b      	orrs	r3, r5
 8002aa6:	607b      	str	r3, [r7, #4]
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002aae:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2206      	movs	r2, #6
 8002ab6:	701a      	strb	r2, [r3, #0]
            }
 8002ab8:	bf00      	nop
 8002aba:	3720      	adds	r7, #32
 8002abc:	46bd      	mov	sp, r7
 8002abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ac2:	bf00      	nop
 8002ac4:	ffff0000 	.word	0xffff0000

08002ac8 <_ZN3can7signals23SENSOR_OD_CAN2_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1121            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002ac8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002acc:	b086      	sub	sp, #24
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1121);
 8002ad8:	f240 4361 	movw	r3, #1121	; 0x461
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	68b9      	ldr	r1, [r7, #8]
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f7ff fc53 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002ae6:	78fb      	ldrb	r3, [r7, #3]
 8002ae8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002af0:	7dfb      	ldrb	r3, [r7, #23]
 8002af2:	2200      	movs	r2, #0
 8002af4:	4698      	mov	r8, r3
 8002af6:	4691      	mov	r9, r2
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002b04:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002b08:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002b0c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002b10:	2500      	movs	r5, #0
 8002b12:	ea40 0a04 	orr.w	sl, r0, r4
 8002b16:	ea41 0b05 	orr.w	fp, r1, r5
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2203      	movs	r2, #3
 8002b24:	701a      	strb	r2, [r3, #0]
            }
 8002b26:	bf00      	nop
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002b30 <_ZN3can7signals23SENSOR_OD_CAN2_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1120            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b34:	b086      	sub	sp, #24
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	60f8      	str	r0, [r7, #12]
 8002b3a:	60b9      	str	r1, [r7, #8]
 8002b3c:	607a      	str	r2, [r7, #4]
 8002b3e:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1120);
 8002b40:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	68b9      	ldr	r1, [r7, #8]
 8002b48:	68f8      	ldr	r0, [r7, #12]
 8002b4a:	f7ff fc1f 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002b4e:	78fb      	ldrb	r3, [r7, #3]
 8002b50:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b58:	7dfb      	ldrb	r3, [r7, #23]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	4698      	mov	r8, r3
 8002b5e:	4691      	mov	r9, r2
 8002b60:	f04f 0200 	mov.w	r2, #0
 8002b64:	f04f 0300 	mov.w	r3, #0
 8002b68:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002b6c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002b70:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002b74:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002b78:	2500      	movs	r5, #0
 8002b7a:	ea40 0a04 	orr.w	sl, r0, r4
 8002b7e:	ea41 0b05 	orr.w	fp, r1, r5
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	701a      	strb	r2, [r3, #0]
            }
 8002b8e:	bf00      	nop
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002b98 <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b9c:	b088      	sub	sp, #32
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6178      	str	r0, [r7, #20]
 8002ba2:	6139      	str	r1, [r7, #16]
 8002ba4:	60fa      	str	r2, [r7, #12]
 8002ba6:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bae:	d302      	bcc.n	8002bb6 <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8002bb0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002bb4:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1113);
 8002bb6:	f240 4359 	movw	r3, #1113	; 0x459
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	6939      	ldr	r1, [r7, #16]
 8002bbe:	6978      	ldr	r0, [r7, #20]
 8002bc0:	f7ff fbe4 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bce:	69f9      	ldr	r1, [r7, #28]
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	468a      	mov	sl, r1
 8002bd4:	4683      	mov	fp, r0
 8002bd6:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002bda:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002bde:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8002be2:	0424      	lsls	r4, r4, #16
 8002be4:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002be8:	ea42 0104 	orr.w	r1, r2, r4
 8002bec:	6039      	str	r1, [r7, #0]
 8002bee:	432b      	orrs	r3, r5
 8002bf0:	607b      	str	r3, [r7, #4]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002bf8:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2205      	movs	r2, #5
 8002c00:	701a      	strb	r2, [r3, #0]
            }
 8002c02:	bf00      	nop
 8002c04:	3720      	adds	r7, #32
 8002c06:	46bd      	mov	sp, r7
 8002c08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002c0c <_ZN3can7signals26SENSOR_OD_CAN1_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1112            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c10:	b086      	sub	sp, #24
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
 8002c1a:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1112);
 8002c1c:	f44f 638b 	mov.w	r3, #1112	; 0x458
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	68b9      	ldr	r1, [r7, #8]
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f7ff fbb1 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002c2a:	78fb      	ldrb	r3, [r7, #3]
 8002c2c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c34:	7dfb      	ldrb	r3, [r7, #23]
 8002c36:	2200      	movs	r2, #0
 8002c38:	4698      	mov	r8, r3
 8002c3a:	4691      	mov	r9, r2
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002c48:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002c4c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002c50:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002c54:	2500      	movs	r5, #0
 8002c56:	ea40 0a04 	orr.w	sl, r0, r4
 8002c5a:	ea41 0b05 	orr.w	fp, r1, r5
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2203      	movs	r2, #3
 8002c68:	701a      	strb	r2, [r3, #0]
            }
 8002c6a:	bf00      	nop
 8002c6c:	3718      	adds	r7, #24
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002c74 <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002c74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c78:	b088      	sub	sp, #32
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6178      	str	r0, [r7, #20]
 8002c7e:	6139      	str	r1, [r7, #16]
 8002c80:	60fa      	str	r2, [r7, #12]
 8002c82:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c8a:	d302      	bcc.n	8002c92 <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8002c8c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002c90:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1111);
 8002c92:	f240 4357 	movw	r3, #1111	; 0x457
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	6939      	ldr	r1, [r7, #16]
 8002c9a:	6978      	ldr	r0, [r7, #20]
 8002c9c:	f7ff fb76 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	69f9      	ldr	r1, [r7, #28]
 8002cac:	2000      	movs	r0, #0
 8002cae:	468a      	mov	sl, r1
 8002cb0:	4683      	mov	fp, r0
 8002cb2:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002cb6:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002cba:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8002cbe:	0424      	lsls	r4, r4, #16
 8002cc0:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002cc4:	ea42 0104 	orr.w	r1, r2, r4
 8002cc8:	6039      	str	r1, [r7, #0]
 8002cca:	432b      	orrs	r3, r5
 8002ccc:	607b      	str	r3, [r7, #4]
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002cd4:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2205      	movs	r2, #5
 8002cdc:	701a      	strb	r2, [r3, #0]
            }
 8002cde:	bf00      	nop
 8002ce0:	3720      	adds	r7, #32
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002ce8 <_ZN3can7signals21SENSOR_OD_CAN1_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1110            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cec:	b086      	sub	sp, #24
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	60f8      	str	r0, [r7, #12]
 8002cf2:	60b9      	str	r1, [r7, #8]
 8002cf4:	607a      	str	r2, [r7, #4]
 8002cf6:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1110);
 8002cf8:	f240 4356 	movw	r3, #1110	; 0x456
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	68b9      	ldr	r1, [r7, #8]
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f7ff fb43 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002d06:	78fb      	ldrb	r3, [r7, #3]
 8002d08:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d10:	7dfb      	ldrb	r3, [r7, #23]
 8002d12:	2200      	movs	r2, #0
 8002d14:	4698      	mov	r8, r3
 8002d16:	4691      	mov	r9, r2
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002d24:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002d28:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002d2c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002d30:	2500      	movs	r5, #0
 8002d32:	ea40 0a04 	orr.w	sl, r0, r4
 8002d36:	ea41 0b05 	orr.w	fp, r1, r5
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2203      	movs	r2, #3
 8002d44:	701a      	strb	r2, [r3, #0]
            }
 8002d46:	bf00      	nop
 8002d48:	3718      	adds	r7, #24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002d50 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d54:	b088      	sub	sp, #32
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6178      	str	r0, [r7, #20]
 8002d5a:	6139      	str	r1, [r7, #16]
 8002d5c:	60fa      	str	r2, [r7, #12]
 8002d5e:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8002d60:	897b      	ldrh	r3, [r7, #10]
 8002d62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d66:	d902      	bls.n	8002d6e <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8002d68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d6c:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8002d6e:	897b      	ldrh	r3, [r7, #10]
 8002d70:	2b7c      	cmp	r3, #124	; 0x7c
 8002d72:	d801      	bhi.n	8002d78 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 8002d74:	237d      	movs	r3, #125	; 0x7d
 8002d76:	817b      	strh	r3, [r7, #10]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1108);
 8002d78:	f240 4354 	movw	r3, #1108	; 0x454
 8002d7c:	68fa      	ldr	r2, [r7, #12]
 8002d7e:	6939      	ldr	r1, [r7, #16]
 8002d80:	6978      	ldr	r0, [r7, #20]
 8002d82:	f7ff fb03 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002d86:	897b      	ldrh	r3, [r7, #10]
 8002d88:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d90:	8bf9      	ldrh	r1, [r7, #30]
 8002d92:	2000      	movs	r0, #0
 8002d94:	4688      	mov	r8, r1
 8002d96:	4681      	mov	r9, r0
 8002d98:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002d9c:	6079      	str	r1, [r7, #4]
 8002d9e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002da2:	6039      	str	r1, [r7, #0]
 8002da4:	683c      	ldr	r4, [r7, #0]
 8002da6:	2500      	movs	r5, #0
 8002da8:	ea42 0a04 	orr.w	sl, r2, r4
 8002dac:	ea43 0b05 	orr.w	fp, r3, r5
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2204      	movs	r2, #4
 8002dba:	701a      	strb	r2, [r3, #0]
            }
 8002dbc:	bf00      	nop
 8002dbe:	3720      	adds	r7, #32
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002dc6 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b084      	sub	sp, #16
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1108) {
 8002dd0:	6839      	ldr	r1, [r7, #0]
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7ff fb02 	bl	80023dc <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	461a      	mov	r2, r3
 8002ddc:	f240 4354 	movw	r3, #1108	; 0x454
 8002de0:	429a      	cmp	r2, r3
 8002de2:	bf14      	ite	ne
 8002de4:	2301      	movne	r3, #1
 8002de6:	2300      	moveq	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d000      	beq.n	8002df0 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_+0x2a>
                    while(1);
 8002dee:	e7fe      	b.n	8002dee <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	0c02      	lsrs	r2, r0, #16
 8002e00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002e04:	0c0b      	lsrs	r3, r1, #16
 8002e06:	4613      	mov	r3, r2
 8002e08:	81fb      	strh	r3, [r7, #14]
                return value;
 8002e0a:	89fb      	ldrh	r3, [r7, #14]
            }
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1107            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	607a      	str	r2, [r7, #4]
 8002e22:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1107);
 8002e24:	f240 4353 	movw	r3, #1107	; 0x453
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	68b9      	ldr	r1, [r7, #8]
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f7ff faad 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002e32:	78fb      	ldrb	r3, [r7, #3]
 8002e34:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e3c:	7dfb      	ldrb	r3, [r7, #23]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	4698      	mov	r8, r3
 8002e42:	4691      	mov	r9, r2
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002e50:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002e54:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002e58:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002e5c:	2500      	movs	r5, #0
 8002e5e:	ea40 0a04 	orr.w	sl, r0, r4
 8002e62:	ea41 0b05 	orr.w	fp, r1, r5
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2203      	movs	r2, #3
 8002e70:	701a      	strb	r2, [r3, #0]
            }
 8002e72:	bf00      	nop
 8002e74:	3718      	adds	r7, #24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002e7c <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1107) {
 8002e86:	6839      	ldr	r1, [r7, #0]
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff faa7 	bl	80023dc <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	461a      	mov	r2, r3
 8002e92:	f240 4353 	movw	r3, #1107	; 0x453
 8002e96:	429a      	cmp	r2, r3
 8002e98:	bf14      	ite	ne
 8002e9a:	2301      	movne	r3, #1
 8002e9c:	2300      	moveq	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d000      	beq.n	8002ea6 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8002ea4:	e7fe      	b.n	8002ea4 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	f04f 0300 	mov.w	r3, #0
 8002eb4:	0c02      	lsrs	r2, r0, #16
 8002eb6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002eba:	0c0b      	lsrs	r3, r1, #16
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	73fb      	strb	r3, [r7, #15]
                return value;
 8002ec0:	7bfb      	ldrb	r3, [r7, #15]
            }
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1106            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ed0:	b088      	sub	sp, #32
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6178      	str	r0, [r7, #20]
 8002ed6:	6139      	str	r1, [r7, #16]
 8002ed8:	60fa      	str	r2, [r7, #12]
 8002eda:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1106);
 8002edc:	f240 4352 	movw	r3, #1106	; 0x452
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	6939      	ldr	r1, [r7, #16]
 8002ee4:	6978      	ldr	r0, [r7, #20]
 8002ee6:	f7ff fa51 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef4:	69f9      	ldr	r1, [r7, #28]
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	468a      	mov	sl, r1
 8002efa:	4683      	mov	fp, r0
 8002efc:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002f00:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002f04:	480c      	ldr	r0, [pc, #48]	; (8002f38 <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm+0x6c>)
 8002f06:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f0a:	ea08 0400 	and.w	r4, r8, r0
 8002f0e:	ea09 0501 	and.w	r5, r9, r1
 8002f12:	ea42 0104 	orr.w	r1, r2, r4
 8002f16:	6039      	str	r1, [r7, #0]
 8002f18:	432b      	orrs	r3, r5
 8002f1a:	607b      	str	r3, [r7, #4]
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002f22:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2206      	movs	r2, #6
 8002f2a:	701a      	strb	r2, [r3, #0]
            }
 8002f2c:	bf00      	nop
 8002f2e:	3720      	adds	r7, #32
 8002f30:	46bd      	mov	sp, r7
 8002f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f36:	bf00      	nop
 8002f38:	ffff0000 	.word	0xffff0000

08002f3c <_ZN3can7signals23SENSOR_OD_CAN1_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1105            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f40:	b086      	sub	sp, #24
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	60f8      	str	r0, [r7, #12]
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1105);
 8002f4c:	f240 4351 	movw	r3, #1105	; 0x451
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f7ff fa19 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f64:	7dfb      	ldrb	r3, [r7, #23]
 8002f66:	2200      	movs	r2, #0
 8002f68:	4698      	mov	r8, r3
 8002f6a:	4691      	mov	r9, r2
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	f04f 0300 	mov.w	r3, #0
 8002f74:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002f78:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002f7c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002f80:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002f84:	2500      	movs	r5, #0
 8002f86:	ea40 0a04 	orr.w	sl, r0, r4
 8002f8a:	ea41 0b05 	orr.w	fp, r1, r5
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2203      	movs	r2, #3
 8002f98:	701a      	strb	r2, [r3, #0]
            }
 8002f9a:	bf00      	nop
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002fa4 <_ZN3can7signals23SENSOR_OD_CAN1_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1104            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fa8:	b086      	sub	sp, #24
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
 8002fb2:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1104);
 8002fb4:	f44f 638a 	mov.w	r3, #1104	; 0x450
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	68b9      	ldr	r1, [r7, #8]
 8002fbc:	68f8      	ldr	r0, [r7, #12]
 8002fbe:	f7ff f9e5 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002fc2:	78fb      	ldrb	r3, [r7, #3]
 8002fc4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fcc:	7dfb      	ldrb	r3, [r7, #23]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	4698      	mov	r8, r3
 8002fd2:	4691      	mov	r9, r2
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002fe0:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002fe4:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002fe8:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002fec:	2500      	movs	r5, #0
 8002fee:	ea40 0a04 	orr.w	sl, r0, r4
 8002ff2:	ea41 0b05 	orr.w	fp, r1, r5
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2203      	movs	r2, #3
 8003000:	701a      	strb	r2, [r3, #0]
            }
 8003002:	bf00      	nop
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800300c <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 800300c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003010:	b088      	sub	sp, #32
 8003012:	af00      	add	r7, sp, #0
 8003014:	6178      	str	r0, [r7, #20]
 8003016:	6139      	str	r1, [r7, #16]
 8003018:	60fa      	str	r2, [r7, #12]
 800301a:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003022:	d302      	bcc.n	800302a <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm+0x1e>
                    value = max;
 8003024:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003028:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1073);
 800302a:	f240 4331 	movw	r3, #1073	; 0x431
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	6939      	ldr	r1, [r7, #16]
 8003032:	6978      	ldr	r0, [r7, #20]
 8003034:	f7ff f9aa 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003042:	69f9      	ldr	r1, [r7, #28]
 8003044:	2000      	movs	r0, #0
 8003046:	468a      	mov	sl, r1
 8003048:	4683      	mov	fp, r0
 800304a:	ea4f 491a 	mov.w	r9, sl, lsr #16
 800304e:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003052:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8003056:	0424      	lsls	r4, r4, #16
 8003058:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 800305c:	ea42 0104 	orr.w	r1, r2, r4
 8003060:	6039      	str	r1, [r7, #0]
 8003062:	432b      	orrs	r3, r5
 8003064:	607b      	str	r3, [r7, #4]
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	e9d7 1200 	ldrd	r1, r2, [r7]
 800306c:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2205      	movs	r2, #5
 8003074:	701a      	strb	r2, [r3, #0]
            }
 8003076:	bf00      	nop
 8003078:	3720      	adds	r7, #32
 800307a:	46bd      	mov	sp, r7
 800307c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003080 <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1072            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003084:	b088      	sub	sp, #32
 8003086:	af00      	add	r7, sp, #0
 8003088:	6178      	str	r0, [r7, #20]
 800308a:	6139      	str	r1, [r7, #16]
 800308c:	60fa      	str	r2, [r7, #12]
 800308e:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1072);
 8003090:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	6939      	ldr	r1, [r7, #16]
 8003098:	6978      	ldr	r0, [r7, #20]
 800309a:	f7ff f977 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a8:	69f9      	ldr	r1, [r7, #28]
 80030aa:	2000      	movs	r0, #0
 80030ac:	468a      	mov	sl, r1
 80030ae:	4683      	mov	fp, r0
 80030b0:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80030b4:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80030b8:	480c      	ldr	r0, [pc, #48]	; (80030ec <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm+0x6c>)
 80030ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030be:	ea08 0400 	and.w	r4, r8, r0
 80030c2:	ea09 0501 	and.w	r5, r9, r1
 80030c6:	ea42 0104 	orr.w	r1, r2, r4
 80030ca:	6039      	str	r1, [r7, #0]
 80030cc:	432b      	orrs	r3, r5
 80030ce:	607b      	str	r3, [r7, #4]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80030d6:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2206      	movs	r2, #6
 80030de:	701a      	strb	r2, [r3, #0]
            }
 80030e0:	bf00      	nop
 80030e2:	3720      	adds	r7, #32
 80030e4:	46bd      	mov	sp, r7
 80030e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ea:	bf00      	nop
 80030ec:	ffff0000 	.word	0xffff0000

080030f0 <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 80030f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030f4:	b086      	sub	sp, #24
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
                if (value > max) {
 80030fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003102:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003106:	d305      	bcc.n	8003114 <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy+0x24>
                    value = max;
 8003108:	f04f 32ff 	mov.w	r2, #4294967295
 800310c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003110:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1057);
 8003114:	f240 4321 	movw	r3, #1057	; 0x421
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	68b9      	ldr	r1, [r7, #8]
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f7ff f935 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8003122:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003126:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003130:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003134:	f04f 0200 	mov.w	r2, #0
 8003138:	f04f 0300 	mov.w	r3, #0
 800313c:	040b      	lsls	r3, r1, #16
 800313e:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8003142:	0402      	lsls	r2, r0, #16
 8003144:	ea48 0402 	orr.w	r4, r8, r2
 8003148:	ea49 0503 	orr.w	r5, r9, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2208      	movs	r2, #8
 8003156:	701a      	strb	r2, [r3, #0]
            }
 8003158:	bf00      	nop
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003162 <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8003162:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003166:	b086      	sub	sp, #24
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8003170:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003178:	d305      	bcc.n	8003186 <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy+0x24>
                    value = max;
 800317a:	f04f 32ff 	mov.w	r2, #4294967295
 800317e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003182:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1056);
 8003186:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68b9      	ldr	r1, [r7, #8]
 800318e:	68f8      	ldr	r0, [r7, #12]
 8003190:	f7ff f8fc 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8003194:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003198:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80031a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	040b      	lsls	r3, r1, #16
 80031b0:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80031b4:	0402      	lsls	r2, r0, #16
 80031b6:	ea48 0402 	orr.w	r4, r8, r2
 80031ba:	ea49 0503 	orr.w	r5, r9, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2208      	movs	r2, #8
 80031c8:	701a      	strb	r2, [r3, #0]
            }
 80031ca:	bf00      	nop
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080031d4 <_ZN3can7signals16SENSOR_OD_SdcOut3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1046            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80031d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d8:	b086      	sub	sp, #24
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1046);
 80031e4:	f240 4316 	movw	r3, #1046	; 0x416
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f7ff f8cd 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031fc:	7dfb      	ldrb	r3, [r7, #23]
 80031fe:	2200      	movs	r2, #0
 8003200:	4698      	mov	r8, r3
 8003202:	4691      	mov	r9, r2
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003210:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003214:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003218:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800321c:	2500      	movs	r5, #0
 800321e:	ea40 0a04 	orr.w	sl, r0, r4
 8003222:	ea41 0b05 	orr.w	fp, r1, r5
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2203      	movs	r2, #3
 8003230:	701a      	strb	r2, [r3, #0]
            }
 8003232:	bf00      	nop
 8003234:	3718      	adds	r7, #24
 8003236:	46bd      	mov	sp, r7
 8003238:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800323c <_ZN3can7signals15SENSOR_OD_SdcIn3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1045            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800323c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003240:	b086      	sub	sp, #24
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
 800324a:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1045);
 800324c:	f240 4315 	movw	r3, #1045	; 0x415
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	68b9      	ldr	r1, [r7, #8]
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f7ff f899 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003264:	7dfb      	ldrb	r3, [r7, #23]
 8003266:	2200      	movs	r2, #0
 8003268:	4698      	mov	r8, r3
 800326a:	4691      	mov	r9, r2
 800326c:	f04f 0200 	mov.w	r2, #0
 8003270:	f04f 0300 	mov.w	r3, #0
 8003274:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003278:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800327c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003280:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003284:	2500      	movs	r5, #0
 8003286:	ea40 0a04 	orr.w	sl, r0, r4
 800328a:	ea41 0b05 	orr.w	fp, r1, r5
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2203      	movs	r2, #3
 8003298:	701a      	strb	r2, [r3, #0]
            }
 800329a:	bf00      	nop
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080032a4 <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80032a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a8:	b088      	sub	sp, #32
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6178      	str	r0, [r7, #20]
 80032ae:	6139      	str	r1, [r7, #16]
 80032b0:	60fa      	str	r2, [r7, #12]
 80032b2:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032ba:	d302      	bcc.n	80032c2 <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm+0x1e>
                    value = max;
 80032bc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80032c0:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1044);
 80032c2:	f240 4314 	movw	r3, #1044	; 0x414
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	6939      	ldr	r1, [r7, #16]
 80032ca:	6978      	ldr	r0, [r7, #20]
 80032cc:	f7ff f85e 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032da:	69f9      	ldr	r1, [r7, #28]
 80032dc:	2000      	movs	r0, #0
 80032de:	468a      	mov	sl, r1
 80032e0:	4683      	mov	fp, r0
 80032e2:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80032e6:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80032ea:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80032ee:	0424      	lsls	r4, r4, #16
 80032f0:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80032f4:	ea42 0104 	orr.w	r1, r2, r4
 80032f8:	6039      	str	r1, [r7, #0]
 80032fa:	432b      	orrs	r3, r5
 80032fc:	607b      	str	r3, [r7, #4]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003304:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2205      	movs	r2, #5
 800330c:	701a      	strb	r2, [r3, #0]
            }
 800330e:	bf00      	nop
 8003310:	3720      	adds	r7, #32
 8003312:	46bd      	mov	sp, r7
 8003314:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003318 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(65.535);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800331c:	b088      	sub	sp, #32
 800331e:	af00      	add	r7, sp, #0
 8003320:	6178      	str	r0, [r7, #20]
 8003322:	6139      	str	r1, [r7, #16]
 8003324:	60fa      	str	r2, [r7, #12]
 8003326:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800332a:	edd7 7a02 	vldr	s15, [r7, #8]
 800332e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80033c0 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xa8>
 8003332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800333a:	dd01      	ble.n	8003340 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0x28>
                    value = max;
 800333c:	4b21      	ldr	r3, [pc, #132]	; (80033c4 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xac>)
 800333e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003340:	edd7 7a02 	vldr	s15, [r7, #8]
 8003344:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800334c:	d502      	bpl.n	8003354 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0x3c>
                    value = min;
 800334e:	f04f 0300 	mov.w	r3, #0
 8003352:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1043);
 8003354:	f240 4313 	movw	r3, #1043	; 0x413
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	6939      	ldr	r1, [r7, #16]
 800335c:	6978      	ldr	r0, [r7, #20]
 800335e:	f7ff f815 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.001f)));
 8003362:	edd7 7a02 	vldr	s15, [r7, #8]
 8003366:	eddf 6a18 	vldr	s13, [pc, #96]	; 80033c8 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xb0>
 800336a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800336e:	eeb0 0a47 	vmov.f32	s0, s14
 8003372:	f7fe fec9 	bl	8002108 <_ZSt5roundf>
 8003376:	eef0 7a40 	vmov.f32	s15, s0
 800337a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800337e:	ee17 3a90 	vmov	r3, s15
 8003382:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338a:	8bf9      	ldrh	r1, [r7, #30]
 800338c:	2000      	movs	r0, #0
 800338e:	4688      	mov	r8, r1
 8003390:	4681      	mov	r9, r0
 8003392:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003396:	6079      	str	r1, [r7, #4]
 8003398:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800339c:	6039      	str	r1, [r7, #0]
 800339e:	683c      	ldr	r4, [r7, #0]
 80033a0:	2500      	movs	r5, #0
 80033a2:	ea42 0a04 	orr.w	sl, r2, r4
 80033a6:	ea43 0b05 	orr.w	fp, r3, r5
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2204      	movs	r2, #4
 80033b4:	701a      	strb	r2, [r3, #0]
            }
 80033b6:	bf00      	nop
 80033b8:	3720      	adds	r7, #32
 80033ba:	46bd      	mov	sp, r7
 80033bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033c0:	428311ec 	.word	0x428311ec
 80033c4:	428311ec 	.word	0x428311ec
 80033c8:	3a83126f 	.word	0x3a83126f

080033cc <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-30);
            constexpr static float max = static_cast<float>(625.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80033cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033d0:	b088      	sub	sp, #32
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6178      	str	r0, [r7, #20]
 80033d6:	6139      	str	r1, [r7, #16]
 80033d8:	60fa      	str	r2, [r7, #12]
 80033da:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80033de:	edd7 7a02 	vldr	s15, [r7, #8]
 80033e2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003480 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xb4>
 80033e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ee:	dd01      	ble.n	80033f4 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0x28>
                    value = max;
 80033f0:	4b24      	ldr	r3, [pc, #144]	; (8003484 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xb8>)
 80033f2:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80033f4:	edd7 7a02 	vldr	s15, [r7, #8]
 80033f8:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80033fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003404:	d501      	bpl.n	800340a <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0x3e>
                    value = min;
 8003406:	4b20      	ldr	r3, [pc, #128]	; (8003488 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xbc>)
 8003408:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1042);
 800340a:	f240 4312 	movw	r3, #1042	; 0x412
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	6939      	ldr	r1, [r7, #16]
 8003412:	6978      	ldr	r0, [r7, #20]
 8003414:	f7fe ffba 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-30.0f)) / (0.01f)));
 8003418:	edd7 7a02 	vldr	s15, [r7, #8]
 800341c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003420:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003424:	eddf 6a19 	vldr	s13, [pc, #100]	; 800348c <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xc0>
 8003428:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800342c:	eeb0 0a47 	vmov.f32	s0, s14
 8003430:	f7fe fe6a 	bl	8002108 <_ZSt5roundf>
 8003434:	eef0 7a40 	vmov.f32	s15, s0
 8003438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800343c:	ee17 3a90 	vmov	r3, s15
 8003440:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	8bf9      	ldrh	r1, [r7, #30]
 800344a:	2000      	movs	r0, #0
 800344c:	4688      	mov	r8, r1
 800344e:	4681      	mov	r9, r0
 8003450:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003454:	6079      	str	r1, [r7, #4]
 8003456:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800345a:	6039      	str	r1, [r7, #0]
 800345c:	683c      	ldr	r4, [r7, #0]
 800345e:	2500      	movs	r5, #0
 8003460:	ea42 0a04 	orr.w	sl, r2, r4
 8003464:	ea43 0b05 	orr.w	fp, r3, r5
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2204      	movs	r2, #4
 8003472:	701a      	strb	r2, [r3, #0]
            }
 8003474:	bf00      	nop
 8003476:	3720      	adds	r7, #32
 8003478:	46bd      	mov	sp, r7
 800347a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800347e:	bf00      	nop
 8003480:	441c5666 	.word	0x441c5666
 8003484:	441c5666 	.word	0x441c5666
 8003488:	c1f00000 	.word	0xc1f00000
 800348c:	3c23d70a 	.word	0x3c23d70a

08003490 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(262140);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003490:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003494:	b088      	sub	sp, #32
 8003496:	af00      	add	r7, sp, #0
 8003498:	6178      	str	r0, [r7, #20]
 800349a:	6139      	str	r1, [r7, #16]
 800349c:	60fa      	str	r2, [r7, #12]
 800349e:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4a16      	ldr	r2, [pc, #88]	; (80034fc <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x6c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d901      	bls.n	80034ac <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x1c>
                    value = max;
 80034a8:	4b14      	ldr	r3, [pc, #80]	; (80034fc <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x6c>)
 80034aa:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1041);
 80034ac:	f240 4311 	movw	r3, #1041	; 0x411
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	6939      	ldr	r1, [r7, #16]
 80034b4:	6978      	ldr	r0, [r7, #20]
 80034b6:	f7fe ff69 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = static_cast<uint32_t>((value) / (4));
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	089b      	lsrs	r3, r3, #2
 80034be:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c6:	69f9      	ldr	r1, [r7, #28]
 80034c8:	2000      	movs	r0, #0
 80034ca:	4688      	mov	r8, r1
 80034cc:	4681      	mov	r9, r0
 80034ce:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80034d2:	6079      	str	r1, [r7, #4]
 80034d4:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80034d8:	6039      	str	r1, [r7, #0]
 80034da:	683c      	ldr	r4, [r7, #0]
 80034dc:	2500      	movs	r5, #0
 80034de:	ea42 0a04 	orr.w	sl, r2, r4
 80034e2:	ea43 0b05 	orr.w	fp, r3, r5
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2204      	movs	r2, #4
 80034f0:	701a      	strb	r2, [r3, #0]
            }
 80034f2:	bf00      	nop
 80034f4:	3720      	adds	r7, #32
 80034f6:	46bd      	mov	sp, r7
 80034f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034fc:	0003fffc 	.word	0x0003fffc

08003500 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003500:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003504:	b088      	sub	sp, #32
 8003506:	af00      	add	r7, sp, #0
 8003508:	6178      	str	r0, [r7, #20]
 800350a:	6139      	str	r1, [r7, #16]
 800350c:	60fa      	str	r2, [r7, #12]
 800350e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8003512:	edd7 7a02 	vldr	s15, [r7, #8]
 8003516:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80035b4 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0xb4>
 800351a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800351e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003522:	dd01      	ble.n	8003528 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0x28>
                    value = max;
 8003524:	4b24      	ldr	r3, [pc, #144]	; (80035b8 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0xb8>)
 8003526:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003528:	edd7 7a02 	vldr	s15, [r7, #8]
 800352c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003534:	d502      	bpl.n	800353c <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0x3c>
                    value = min;
 8003536:	f04f 0300 	mov.w	r3, #0
 800353a:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1040);
 800353c:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	6939      	ldr	r1, [r7, #16]
 8003544:	6978      	ldr	r0, [r7, #20]
 8003546:	f7fe ff21 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 800354a:	edd7 7a02 	vldr	s15, [r7, #8]
 800354e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8003552:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003556:	eeb0 0a47 	vmov.f32	s0, s14
 800355a:	f7fe fdd5 	bl	8002108 <_ZSt5roundf>
 800355e:	eef0 7a40 	vmov.f32	s15, s0
 8003562:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003566:	edc7 7a01 	vstr	s15, [r7, #4]
 800356a:	793b      	ldrb	r3, [r7, #4]
 800356c:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003574:	7ffb      	ldrb	r3, [r7, #31]
 8003576:	2200      	movs	r2, #0
 8003578:	4698      	mov	r8, r3
 800357a:	4691      	mov	r9, r2
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003588:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800358c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003590:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003594:	2500      	movs	r5, #0
 8003596:	ea40 0a04 	orr.w	sl, r0, r4
 800359a:	ea41 0b05 	orr.w	fp, r1, r5
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2203      	movs	r2, #3
 80035a8:	701a      	strb	r2, [r3, #0]
            }
 80035aa:	bf00      	nop
 80035ac:	3720      	adds	r7, #32
 80035ae:	46bd      	mov	sp, r7
 80035b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035b4:	42c80000 	.word	0x42c80000
 80035b8:	42c80000 	.word	0x42c80000

080035bc <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 33            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80035bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c0:	b088      	sub	sp, #32
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6178      	str	r0, [r7, #20]
 80035c6:	6139      	str	r1, [r7, #16]
 80035c8:	60fa      	str	r2, [r7, #12]
 80035ca:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 33);
 80035cc:	2321      	movs	r3, #33	; 0x21
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	6939      	ldr	r1, [r7, #16]
 80035d2:	6978      	ldr	r0, [r7, #20]
 80035d4:	f7fe feda 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80035d8:	897b      	ldrh	r3, [r7, #10]
 80035da:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e2:	8bf9      	ldrh	r1, [r7, #30]
 80035e4:	2000      	movs	r0, #0
 80035e6:	4688      	mov	r8, r1
 80035e8:	4681      	mov	r9, r0
 80035ea:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80035ee:	6079      	str	r1, [r7, #4]
 80035f0:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80035f4:	6039      	str	r1, [r7, #0]
 80035f6:	683c      	ldr	r4, [r7, #0]
 80035f8:	2500      	movs	r5, #0
 80035fa:	ea42 0a04 	orr.w	sl, r2, r4
 80035fe:	ea43 0b05 	orr.w	fp, r3, r5
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2204      	movs	r2, #4
 800360c:	701a      	strb	r2, [r3, #0]
            }
 800360e:	bf00      	nop
 8003610:	3720      	adds	r7, #32
 8003612:	46bd      	mov	sp, r7
 8003614:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003618 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 33) {
 8003622:	6839      	ldr	r1, [r7, #0]
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7fe fed9 	bl	80023dc <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 800362a:	4603      	mov	r3, r0
 800362c:	2b21      	cmp	r3, #33	; 0x21
 800362e:	bf14      	ite	ne
 8003630:	2301      	movne	r3, #1
 8003632:	2300      	moveq	r3, #0
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d000      	beq.n	800363c <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_+0x24>
                    while(1);
 800363a:	e7fe      	b.n	800363a <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	f04f 0300 	mov.w	r3, #0
 800364a:	0c02      	lsrs	r2, r0, #16
 800364c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003650:	0c0b      	lsrs	r3, r1, #16
 8003652:	4613      	mov	r3, r2
 8003654:	81fb      	strh	r3, [r7, #14]
                return value;
 8003656:	89fb      	ldrh	r3, [r7, #14]
            }
 8003658:	4618      	mov	r0, r3
 800365a:	3710      	adds	r7, #16
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 32            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003664:	b086      	sub	sp, #24
 8003666:	af00      	add	r7, sp, #0
 8003668:	60f8      	str	r0, [r7, #12]
 800366a:	60b9      	str	r1, [r7, #8]
 800366c:	607a      	str	r2, [r7, #4]
 800366e:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 32);
 8003670:	2320      	movs	r3, #32
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f7fe fe88 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003686:	7dfb      	ldrb	r3, [r7, #23]
 8003688:	2200      	movs	r2, #0
 800368a:	4698      	mov	r8, r3
 800368c:	4691      	mov	r9, r2
 800368e:	f04f 0200 	mov.w	r2, #0
 8003692:	f04f 0300 	mov.w	r3, #0
 8003696:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800369a:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800369e:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80036a2:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80036a6:	2500      	movs	r5, #0
 80036a8:	ea40 0a04 	orr.w	sl, r0, r4
 80036ac:	ea41 0b05 	orr.w	fp, r1, r5
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2203      	movs	r2, #3
 80036ba:	701a      	strb	r2, [r3, #0]
            }
 80036bc:	bf00      	nop
 80036be:	3718      	adds	r7, #24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080036c6 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b084      	sub	sp, #16
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
 80036ce:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 32) {
 80036d0:	6839      	ldr	r1, [r7, #0]
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7fe fe82 	bl	80023dc <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b20      	cmp	r3, #32
 80036dc:	bf14      	ite	ne
 80036de:	2301      	movne	r3, #1
 80036e0:	2300      	moveq	r3, #0
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d000      	beq.n	80036ea <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_+0x24>
                    while(1);
 80036e8:	e7fe      	b.n	80036e8 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_+0x22>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036f0:	f04f 0200 	mov.w	r2, #0
 80036f4:	f04f 0300 	mov.w	r3, #0
 80036f8:	0c02      	lsrs	r2, r0, #16
 80036fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80036fe:	0c0b      	lsrs	r3, r1, #16
 8003700:	4613      	mov	r3, r2
 8003702:	73fb      	strb	r3, [r7, #15]
                return value;
 8003704:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003706:	4618      	mov	r0, r3
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 16            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800370e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003712:	b088      	sub	sp, #32
 8003714:	af00      	add	r7, sp, #0
 8003716:	6178      	str	r0, [r7, #20]
 8003718:	6139      	str	r1, [r7, #16]
 800371a:	60fa      	str	r2, [r7, #12]
 800371c:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 16);
 800371e:	2310      	movs	r3, #16
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	6939      	ldr	r1, [r7, #16]
 8003724:	6978      	ldr	r0, [r7, #20]
 8003726:	f7fe fe31 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800372a:	897b      	ldrh	r3, [r7, #10]
 800372c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003734:	8bf9      	ldrh	r1, [r7, #30]
 8003736:	2000      	movs	r0, #0
 8003738:	4688      	mov	r8, r1
 800373a:	4681      	mov	r9, r0
 800373c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003740:	6079      	str	r1, [r7, #4]
 8003742:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003746:	6039      	str	r1, [r7, #0]
 8003748:	683c      	ldr	r4, [r7, #0]
 800374a:	2500      	movs	r5, #0
 800374c:	ea42 0a04 	orr.w	sl, r2, r4
 8003750:	ea43 0b05 	orr.w	fp, r3, r5
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2204      	movs	r2, #4
 800375e:	701a      	strb	r2, [r3, #0]
            }
 8003760:	bf00      	nop
 8003762:	3720      	adds	r7, #32
 8003764:	46bd      	mov	sp, r7
 8003766:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800376a <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800376a:	b580      	push	{r7, lr}
 800376c:	b084      	sub	sp, #16
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 16) {
 8003774:	6839      	ldr	r1, [r7, #0]
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7fe fe30 	bl	80023dc <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 800377c:	4603      	mov	r3, r0
 800377e:	2b10      	cmp	r3, #16
 8003780:	bf14      	ite	ne
 8003782:	2301      	movne	r3, #1
 8003784:	2300      	moveq	r3, #0
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	d000      	beq.n	800378e <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_+0x24>
                    while(1);
 800378c:	e7fe      	b.n	800378c <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	f04f 0300 	mov.w	r3, #0
 800379c:	0c02      	lsrs	r2, r0, #16
 800379e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80037a2:	0c0b      	lsrs	r3, r1, #16
 80037a4:	4613      	mov	r3, r2
 80037a6:	81fb      	strh	r3, [r7, #14]
                return value;
 80037a8:	89fb      	ldrh	r3, [r7, #14]
            }
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <_ZN3can7signals20SENSOR_OD_DbcVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 5            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80037b2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6178      	str	r0, [r7, #20]
 80037bc:	6139      	str	r1, [r7, #16]
 80037be:	60fa      	str	r2, [r7, #12]
 80037c0:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 5);
 80037c2:	2305      	movs	r3, #5
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	6939      	ldr	r1, [r7, #16]
 80037c8:	6978      	ldr	r0, [r7, #20]
 80037ca:	f7fe fddf 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80037ce:	897b      	ldrh	r3, [r7, #10]
 80037d0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d8:	8bf9      	ldrh	r1, [r7, #30]
 80037da:	2000      	movs	r0, #0
 80037dc:	4688      	mov	r8, r1
 80037de:	4681      	mov	r9, r0
 80037e0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80037e4:	6079      	str	r1, [r7, #4]
 80037e6:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80037ea:	6039      	str	r1, [r7, #0]
 80037ec:	683c      	ldr	r4, [r7, #0]
 80037ee:	2500      	movs	r5, #0
 80037f0:	ea42 0a04 	orr.w	sl, r2, r4
 80037f4:	ea43 0b05 	orr.w	fp, r3, r5
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2204      	movs	r2, #4
 8003802:	701a      	strb	r2, [r3, #0]
            }
 8003804:	bf00      	nop
 8003806:	3720      	adds	r7, #32
 8003808:	46bd      	mov	sp, r7
 800380a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800380e <_ZN3can7signals22SENSOR_OD_StackVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 4            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800380e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af00      	add	r7, sp, #0
 8003816:	6178      	str	r0, [r7, #20]
 8003818:	6139      	str	r1, [r7, #16]
 800381a:	60fa      	str	r2, [r7, #12]
 800381c:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 4);
 800381e:	2304      	movs	r3, #4
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	6939      	ldr	r1, [r7, #16]
 8003824:	6978      	ldr	r0, [r7, #20]
 8003826:	f7fe fdb1 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800382a:	897b      	ldrh	r3, [r7, #10]
 800382c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003834:	8bf9      	ldrh	r1, [r7, #30]
 8003836:	2000      	movs	r0, #0
 8003838:	4688      	mov	r8, r1
 800383a:	4681      	mov	r9, r0
 800383c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003840:	6079      	str	r1, [r7, #4]
 8003842:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003846:	6039      	str	r1, [r7, #0]
 8003848:	683c      	ldr	r4, [r7, #0]
 800384a:	2500      	movs	r5, #0
 800384c:	ea42 0a04 	orr.w	sl, r2, r4
 8003850:	ea43 0b05 	orr.w	fp, r3, r5
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2204      	movs	r2, #4
 800385e:	701a      	strb	r2, [r3, #0]
            }
 8003860:	bf00      	nop
 8003862:	3720      	adds	r7, #32
 8003864:	46bd      	mov	sp, r7
 8003866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800386a <_ZN3can7signals25SENSOR_OD_ProtocolVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 3            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800386a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af00      	add	r7, sp, #0
 8003872:	6178      	str	r0, [r7, #20]
 8003874:	6139      	str	r1, [r7, #16]
 8003876:	60fa      	str	r2, [r7, #12]
 8003878:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 3);
 800387a:	2303      	movs	r3, #3
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	6939      	ldr	r1, [r7, #16]
 8003880:	6978      	ldr	r0, [r7, #20]
 8003882:	f7fe fd83 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003886:	897b      	ldrh	r3, [r7, #10]
 8003888:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	8bf9      	ldrh	r1, [r7, #30]
 8003892:	2000      	movs	r0, #0
 8003894:	4688      	mov	r8, r1
 8003896:	4681      	mov	r9, r0
 8003898:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800389c:	6079      	str	r1, [r7, #4]
 800389e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80038a2:	6039      	str	r1, [r7, #0]
 80038a4:	683c      	ldr	r4, [r7, #0]
 80038a6:	2500      	movs	r5, #0
 80038a8:	ea42 0a04 	orr.w	sl, r2, r4
 80038ac:	ea43 0b05 	orr.w	fp, r3, r5
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2204      	movs	r2, #4
 80038ba:	701a      	strb	r2, [r3, #0]
            }
 80038bc:	bf00      	nop
 80038be:	3720      	adds	r7, #32
 80038c0:	46bd      	mov	sp, r7
 80038c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080038c6 <_ZN3can7signals20SENSOR_OD_NodeStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 2            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80038c6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038ca:	b086      	sub	sp, #24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 2);
 80038d6:	2302      	movs	r3, #2
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	68b9      	ldr	r1, [r7, #8]
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f7fe fd55 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038ec:	7dfb      	ldrb	r3, [r7, #23]
 80038ee:	2200      	movs	r2, #0
 80038f0:	4698      	mov	r8, r3
 80038f2:	4691      	mov	r9, r2
 80038f4:	f04f 0200 	mov.w	r2, #0
 80038f8:	f04f 0300 	mov.w	r3, #0
 80038fc:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003900:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003904:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003908:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800390c:	2500      	movs	r5, #0
 800390e:	ea40 0a04 	orr.w	sl, r0, r4
 8003912:	ea41 0b05 	orr.w	fp, r1, r5
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2203      	movs	r2, #3
 8003920:	701a      	strb	r2, [r3, #0]
            }
 8003922:	bf00      	nop
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800392c <_ZN3can7signals16SENSOR_OD_NodeID3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800392c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003930:	b086      	sub	sp, #24
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1);
 800393c:	2301      	movs	r3, #1
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	68b9      	ldr	r1, [r7, #8]
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f7fe fd22 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003948:	78fb      	ldrb	r3, [r7, #3]
 800394a:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003952:	7dfb      	ldrb	r3, [r7, #23]
 8003954:	2200      	movs	r2, #0
 8003956:	4698      	mov	r8, r3
 8003958:	4691      	mov	r9, r2
 800395a:	f04f 0200 	mov.w	r2, #0
 800395e:	f04f 0300 	mov.w	r3, #0
 8003962:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003966:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800396a:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800396e:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003972:	2500      	movs	r5, #0
 8003974:	ea40 0a04 	orr.w	sl, r0, r4
 8003978:	ea41 0b05 	orr.w	fp, r1, r5
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2203      	movs	r2, #3
 8003986:	701a      	strb	r2, [r3, #0]
            }
 8003988:	bf00      	nop
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003992 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8003992:	b580      	push	{r7, lr}
 8003994:	b086      	sub	sp, #24
 8003996:	af02      	add	r7, sp, #8
 8003998:	60f8      	str	r0, [r7, #12]
 800399a:	60b9      	str	r1, [r7, #8]
 800399c:	607a      	str	r2, [r7, #4]
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	2300      	movs	r3, #0
 80039a6:	2202      	movs	r2, #2
 80039a8:	f240 6101 	movw	r1, #1537	; 0x601
 80039ac:	f7fe fbbc 	bl	8002128 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 80039b4:	f240 6201 	movw	r2, #1537	; 0x601
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d000      	beq.n	80039be <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 80039bc:	e7fe      	b.n	80039bc <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
 80039d2:	6839      	ldr	r1, [r7, #0]
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	331c      	adds	r3, #28
 80039d8:	461a      	mov	r2, r3
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7ff ffd9 	bl	8003992 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4618      	mov	r0, r3
 80039e4:	3708      	adds	r7, #8
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}

080039ea <_Z24handleSDORequestDownloadRK9RxMessage>:


/**************************************************************************
* Functions to handle a SDO download and upload request.                  *
***************************************************************************/
void handleSDORequestDownload(const RxMessage& rxMsgSdoReq) {
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b08a      	sub	sp, #40	; 0x28
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SENSOR_SDO_Req_Down> msgSdoReq(rxMsgSdoReq);
 80039f2:	f107 0308 	add.w	r3, r7, #8
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7ff ffe5 	bl	80039c8 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK9RxMessage>
    uint16_t sdoId = msgSdoReq.get<can::signals::SENSOR_SDO_ID>();
 80039fe:	f107 0308 	add.w	r3, r7, #8
 8003a02:	4618      	mov	r0, r3
 8003a04:	f001 fdd6 	bl	80055b4 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	84fb      	strh	r3, [r7, #38]	; 0x26
    handleSDORequestDownloadBySDOID(sdoId);
 8003a0c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 f814 	bl	8003a3c <_Z31handleSDORequestDownloadBySDOIDt>
}
 8003a14:	bf00      	nop
 8003a16:	3728      	adds	r7, #40	; 0x28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	2300      	movs	r3, #0
 8003a28:	2208      	movs	r2, #8
 8003a2a:	f240 5181 	movw	r1, #1409	; 0x581
 8003a2e:	f7fd fa55 	bl	8000edc <_ZN3can11MessageBaseC1Emhb>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <_Z31handleSDORequestDownloadBySDOIDt>:
void handleSDORequestDownloadBySDOID(const uint16_t sdoId) {    
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b092      	sub	sp, #72	; 0x48
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	80fb      	strh	r3, [r7, #6]
    can::Message<can::messages::SENSOR_SDO_Resp> msgSdoResp;
 8003a46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff ffe6 	bl	8003a1c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SENSOR_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 8003a50:	2301      	movs	r3, #1
 8003a52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    switch (sdoId) {
 8003a56:	88fb      	ldrh	r3, [r7, #6]
 8003a58:	f640 2227 	movw	r2, #2599	; 0xa27
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	f300 836b 	bgt.w	8004138 <_Z31handleSDORequestDownloadBySDOIDt+0x6fc>
 8003a62:	f5b3 6f22 	cmp.w	r3, #2592	; 0xa20
 8003a66:	da06      	bge.n	8003a76 <_Z31handleSDORequestDownloadBySDOIDt+0x3a>
 8003a68:	2b21      	cmp	r3, #33	; 0x21
 8003a6a:	f300 8123 	bgt.w	8003cb4 <_Z31handleSDORequestDownloadBySDOIDt+0x278>
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	f300 80d6 	bgt.w	8003c20 <_Z31handleSDORequestDownloadBySDOIDt+0x1e4>
 8003a74:	e360      	b.n	8004138 <_Z31handleSDORequestDownloadBySDOIDt+0x6fc>
 8003a76:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 8003a7a:	2b07      	cmp	r3, #7
 8003a7c:	f200 835c 	bhi.w	8004138 <_Z31handleSDORequestDownloadBySDOIDt+0x6fc>
 8003a80:	a201      	add	r2, pc, #4	; (adr r2, 8003a88 <_Z31handleSDORequestDownloadBySDOIDt+0x4c>)
 8003a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a86:	bf00      	nop
 8003a88:	080040c3 	.word	0x080040c3
 8003a8c:	08004139 	.word	0x08004139
 8003a90:	08004139 	.word	0x08004139
 8003a94:	08004139 	.word	0x08004139
 8003a98:	08004139 	.word	0x08004139
 8003a9c:	080040df 	.word	0x080040df
 8003aa0:	080040fd 	.word	0x080040fd
 8003aa4:	0800411b 	.word	0x0800411b
 8003aa8:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8003aac:	2b59      	cmp	r3, #89	; 0x59
 8003aae:	f200 8343 	bhi.w	8004138 <_Z31handleSDORequestDownloadBySDOIDt+0x6fc>
 8003ab2:	a201      	add	r2, pc, #4	; (adr r2, 8003ab8 <_Z31handleSDORequestDownloadBySDOIDt+0x7c>)
 8003ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab8:	08003da9 	.word	0x08003da9
 8003abc:	08003dc7 	.word	0x08003dc7
 8003ac0:	08003de1 	.word	0x08003de1
 8003ac4:	08003dff 	.word	0x08003dff
 8003ac8:	08003e1d 	.word	0x08003e1d
 8003acc:	08003e37 	.word	0x08003e37
 8003ad0:	08003e53 	.word	0x08003e53
 8003ad4:	08004139 	.word	0x08004139
 8003ad8:	08004139 	.word	0x08004139
 8003adc:	08004139 	.word	0x08004139
 8003ae0:	08004139 	.word	0x08004139
 8003ae4:	08004139 	.word	0x08004139
 8003ae8:	08004139 	.word	0x08004139
 8003aec:	08004139 	.word	0x08004139
 8003af0:	08004139 	.word	0x08004139
 8003af4:	08004139 	.word	0x08004139
 8003af8:	08003e6f 	.word	0x08003e6f
 8003afc:	08003e89 	.word	0x08003e89
 8003b00:	08004139 	.word	0x08004139
 8003b04:	08004139 	.word	0x08004139
 8003b08:	08004139 	.word	0x08004139
 8003b0c:	08004139 	.word	0x08004139
 8003b10:	08004139 	.word	0x08004139
 8003b14:	08004139 	.word	0x08004139
 8003b18:	08004139 	.word	0x08004139
 8003b1c:	08004139 	.word	0x08004139
 8003b20:	08004139 	.word	0x08004139
 8003b24:	08004139 	.word	0x08004139
 8003b28:	08004139 	.word	0x08004139
 8003b2c:	08004139 	.word	0x08004139
 8003b30:	08004139 	.word	0x08004139
 8003b34:	08004139 	.word	0x08004139
 8003b38:	08003ea3 	.word	0x08003ea3
 8003b3c:	08003ebd 	.word	0x08003ebd
 8003b40:	08004139 	.word	0x08004139
 8003b44:	08004139 	.word	0x08004139
 8003b48:	08004139 	.word	0x08004139
 8003b4c:	08004139 	.word	0x08004139
 8003b50:	08004139 	.word	0x08004139
 8003b54:	08004139 	.word	0x08004139
 8003b58:	08004139 	.word	0x08004139
 8003b5c:	08004139 	.word	0x08004139
 8003b60:	08004139 	.word	0x08004139
 8003b64:	08004139 	.word	0x08004139
 8003b68:	08004139 	.word	0x08004139
 8003b6c:	08004139 	.word	0x08004139
 8003b70:	08004139 	.word	0x08004139
 8003b74:	08004139 	.word	0x08004139
 8003b78:	08004139 	.word	0x08004139
 8003b7c:	08004139 	.word	0x08004139
 8003b80:	08004139 	.word	0x08004139
 8003b84:	08004139 	.word	0x08004139
 8003b88:	08004139 	.word	0x08004139
 8003b8c:	08004139 	.word	0x08004139
 8003b90:	08004139 	.word	0x08004139
 8003b94:	08004139 	.word	0x08004139
 8003b98:	08004139 	.word	0x08004139
 8003b9c:	08004139 	.word	0x08004139
 8003ba0:	08004139 	.word	0x08004139
 8003ba4:	08004139 	.word	0x08004139
 8003ba8:	08004139 	.word	0x08004139
 8003bac:	08004139 	.word	0x08004139
 8003bb0:	08004139 	.word	0x08004139
 8003bb4:	08004139 	.word	0x08004139
 8003bb8:	08003ed7 	.word	0x08003ed7
 8003bbc:	08003ef3 	.word	0x08003ef3
 8003bc0:	08003f0f 	.word	0x08003f0f
 8003bc4:	08003f29 	.word	0x08003f29
 8003bc8:	08003f45 	.word	0x08003f45
 8003bcc:	08004139 	.word	0x08004139
 8003bd0:	08003f61 	.word	0x08003f61
 8003bd4:	08003f7d 	.word	0x08003f7d
 8003bd8:	08003f97 	.word	0x08003f97
 8003bdc:	08003fb3 	.word	0x08003fb3
 8003be0:	08004139 	.word	0x08004139
 8003be4:	08004139 	.word	0x08004139
 8003be8:	08004139 	.word	0x08004139
 8003bec:	08004139 	.word	0x08004139
 8003bf0:	08004139 	.word	0x08004139
 8003bf4:	08004139 	.word	0x08004139
 8003bf8:	08003fcd 	.word	0x08003fcd
 8003bfc:	08003fe9 	.word	0x08003fe9
 8003c00:	08004005 	.word	0x08004005
 8003c04:	0800401f 	.word	0x0800401f
 8003c08:	0800403b 	.word	0x0800403b
 8003c0c:	08004139 	.word	0x08004139
 8003c10:	08004057 	.word	0x08004057
 8003c14:	08004073 	.word	0x08004073
 8003c18:	0800408d 	.word	0x0800408d
 8003c1c:	080040a9 	.word	0x080040a9
 8003c20:	3b01      	subs	r3, #1
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	f200 8288 	bhi.w	8004138 <_Z31handleSDORequestDownloadBySDOIDt+0x6fc>
 8003c28:	a201      	add	r2, pc, #4	; (adr r2, 8003c30 <_Z31handleSDORequestDownloadBySDOIDt+0x1f4>)
 8003c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2e:	bf00      	nop
 8003c30:	08003cc9 	.word	0x08003cc9
 8003c34:	08003ce5 	.word	0x08003ce5
 8003c38:	08003d01 	.word	0x08003d01
 8003c3c:	08003d1d 	.word	0x08003d1d
 8003c40:	08003d39 	.word	0x08003d39
 8003c44:	08004139 	.word	0x08004139
 8003c48:	08004139 	.word	0x08004139
 8003c4c:	08004139 	.word	0x08004139
 8003c50:	08004139 	.word	0x08004139
 8003c54:	08004139 	.word	0x08004139
 8003c58:	08004139 	.word	0x08004139
 8003c5c:	08004139 	.word	0x08004139
 8003c60:	08004139 	.word	0x08004139
 8003c64:	08004139 	.word	0x08004139
 8003c68:	08004139 	.word	0x08004139
 8003c6c:	08003d55 	.word	0x08003d55
 8003c70:	08004139 	.word	0x08004139
 8003c74:	08004139 	.word	0x08004139
 8003c78:	08004139 	.word	0x08004139
 8003c7c:	08004139 	.word	0x08004139
 8003c80:	08004139 	.word	0x08004139
 8003c84:	08004139 	.word	0x08004139
 8003c88:	08004139 	.word	0x08004139
 8003c8c:	08004139 	.word	0x08004139
 8003c90:	08004139 	.word	0x08004139
 8003c94:	08004139 	.word	0x08004139
 8003c98:	08004139 	.word	0x08004139
 8003c9c:	08004139 	.word	0x08004139
 8003ca0:	08004139 	.word	0x08004139
 8003ca4:	08004139 	.word	0x08004139
 8003ca8:	08004139 	.word	0x08004139
 8003cac:	08003d71 	.word	0x08003d71
 8003cb0:	08003d8d 	.word	0x08003d8d
 8003cb4:	f240 4269 	movw	r2, #1129	; 0x469
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	f300 823d 	bgt.w	8004138 <_Z31handleSDORequestDownloadBySDOIDt+0x6fc>
 8003cbe:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8003cc2:	f6bf aef1 	bge.w	8003aa8 <_Z31handleSDORequestDownloadBySDOIDt+0x6c>
 8003cc6:	e237      	b.n	8004138 <_Z31handleSDORequestDownloadBySDOIDt+0x6fc>
        case 0x1:    // OD_NodeID
            msgSdoResp.set<can::signals::SENSOR_OD_NodeID>(OD_NodeID_get());
 8003cc8:	f000 feb0 	bl	8004a2c <_Z13OD_NodeID_getv>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cd4:	4611      	mov	r1, r2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f001 fc7e 	bl	80055d8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003ce2:	e231      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x2:    // OD_NodeStatus
            msgSdoResp.set<can::signals::SENSOR_OD_NodeStatus>(OD_NodeStatus_get());
 8003ce4:	f000 febe 	bl	8004a64 <_Z17OD_NodeStatus_getv>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	461a      	mov	r2, r3
 8003cec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f001 fc85 	bl	8005602 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003cfe:	e223      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x3:    // OD_ProtocolVersion
            msgSdoResp.set<can::signals::SENSOR_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8003d00:	f000 fecc 	bl	8004a9c <_Z22OD_ProtocolVersion_getv>
 8003d04:	4603      	mov	r3, r0
 8003d06:	461a      	mov	r2, r3
 8003d08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d0c:	4611      	mov	r1, r2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f001 fc8c 	bl	800562c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003d1a:	e215      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x4:    // OD_StackVersion
            msgSdoResp.set<can::signals::SENSOR_OD_StackVersion>(OD_StackVersion_get());
 8003d1c:	f000 feda 	bl	8004ad4 <_Z19OD_StackVersion_getv>
 8003d20:	4603      	mov	r3, r0
 8003d22:	461a      	mov	r2, r3
 8003d24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d28:	4611      	mov	r1, r2
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f001 fc93 	bl	8005656 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d30:	2300      	movs	r3, #0
 8003d32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003d36:	e207      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x5:    // OD_DbcVersion
            msgSdoResp.set<can::signals::SENSOR_OD_DbcVersion>(OD_DbcVersion_get());
 8003d38:	f000 fee8 	bl	8004b0c <_Z17OD_DbcVersion_getv>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d44:	4611      	mov	r1, r2
 8003d46:	4618      	mov	r0, r3
 8003d48:	f001 fc9a 	bl	8005680 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003d52:	e1f9      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x10:    // OD_HeartbeatInterval
            msgSdoResp.set<can::signals::SENSOR_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 8003d54:	f000 fef6 	bl	8004b44 <_Z24OD_HeartbeatInterval_getv>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d60:	4611      	mov	r1, r2
 8003d62:	4618      	mov	r0, r3
 8003d64:	f001 fca1 	bl	80056aa <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003d6e:	e1eb      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x20:    // OD_SendOdOnBootup
            msgSdoResp.set<can::signals::SENSOR_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8003d70:	f000 ff20 	bl	8004bb4 <_Z21OD_SendOdOnBootup_getv>
 8003d74:	4603      	mov	r3, r0
 8003d76:	461a      	mov	r2, r3
 8003d78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f001 fca8 	bl	80056d4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d84:	2300      	movs	r3, #0
 8003d86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003d8a:	e1dd      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x21:    // OD_OdEntrySendInterval
            msgSdoResp.set<can::signals::SENSOR_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8003d8c:	f000 ff4a 	bl	8004c24 <_Z26OD_OdEntrySendInterval_getv>
 8003d90:	4603      	mov	r3, r0
 8003d92:	461a      	mov	r2, r3
 8003d94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d98:	4611      	mov	r1, r2
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f001 fcaf 	bl	80056fe <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003da6:	e1cf      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x410:    // OD_CpuUsage
            msgSdoResp.set<can::signals::SENSOR_OD_CpuUsage>(OD_CpuUsage_get());
 8003da8:	f000 ff74 	bl	8004c94 <_Z15OD_CpuUsage_getv>
 8003dac:	eef0 7a40 	vmov.f32	s15, s0
 8003db0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003db4:	eeb0 0a67 	vmov.f32	s0, s15
 8003db8:	4618      	mov	r0, r3
 8003dba:	f001 fcb5 	bl	8005728 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003dc4:	e1c0      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x411:    // OD_MemFree
            msgSdoResp.set<can::signals::SENSOR_OD_MemFree>(OD_MemFree_get());
 8003dc6:	f000 ff9f 	bl	8004d08 <_Z14OD_MemFree_getv>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f001 fcbf 	bl	8005756 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003dde:	e1b3      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x412:    // OD_BoardTemp
            msgSdoResp.set<can::signals::SENSOR_OD_BoardTemp>(OD_BoardTemp_get());
 8003de0:	f000 ffca 	bl	8004d78 <_Z16OD_BoardTemp_getv>
 8003de4:	eef0 7a40 	vmov.f32	s15, s0
 8003de8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dec:	eeb0 0a67 	vmov.f32	s0, s15
 8003df0:	4618      	mov	r0, r3
 8003df2:	f001 fcc4 	bl	800577e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003dfc:	e1a4      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x413:    // OD_InputVoltage
            msgSdoResp.set<can::signals::SENSOR_OD_InputVoltage>(OD_InputVoltage_get());
 8003dfe:	f000 fff5 	bl	8004dec <_Z19OD_InputVoltage_getv>
 8003e02:	eef0 7a40 	vmov.f32	s15, s0
 8003e06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f001 fccc 	bl	80057ac <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e1a:	e195      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x414:    // OD_runtime
            msgSdoResp.set<can::signals::SENSOR_OD_runtime>(OD_runtime_get());
 8003e1c:	f001 f820 	bl	8004e60 <_Z14OD_runtime_getv>
 8003e20:	4602      	mov	r2, r0
 8003e22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e26:	4611      	mov	r1, r2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f001 fcd6 	bl	80057da <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e34:	e188      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x415:    // OD_SdcIn
            msgSdoResp.set<can::signals::SENSOR_OD_SdcIn>(OD_SdcIn_get());
 8003e36:	f001 f82f 	bl	8004e98 <_Z12OD_SdcIn_getv>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f001 fcdc 	bl	8005802 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e50:	e17a      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x416:    // OD_SdcOut
            msgSdoResp.set<can::signals::SENSOR_OD_SdcOut>(OD_SdcOut_get());
 8003e52:	f001 f83d 	bl	8004ed0 <_Z13OD_SdcOut_getv>
 8003e56:	4603      	mov	r3, r0
 8003e58:	461a      	mov	r2, r3
 8003e5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e5e:	4611      	mov	r1, r2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f001 fce3 	bl	800582c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003e66:	2300      	movs	r3, #0
 8003e68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e6c:	e16c      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x420:    // OD_ChipUID1
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID1>(OD_ChipUID1_get());
 8003e6e:	f001 f84b 	bl	8004f08 <_Z15OD_ChipUID1_getv>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003e7a:	4608      	mov	r0, r1
 8003e7c:	f001 fceb 	bl	8005856 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003e80:	2300      	movs	r3, #0
 8003e82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e86:	e15f      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x421:    // OD_ChipUID2
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID2>(OD_ChipUID2_get());
 8003e88:	f001 f85e 	bl	8004f48 <_Z15OD_ChipUID2_getv>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003e94:	4608      	mov	r0, r1
 8003e96:	f001 fcf7 	bl	8005888 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003ea0:	e152      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x430:    // OD_BuildDate
            msgSdoResp.set<can::signals::SENSOR_OD_BuildDate>(OD_BuildDate_get());
 8003ea2:	f001 f871 	bl	8004f88 <_Z16OD_BuildDate_getv>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003eac:	4611      	mov	r1, r2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f001 fd03 	bl	80058ba <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003eba:	e145      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x431:    // OD_BuildTime
            msgSdoResp.set<can::signals::SENSOR_OD_BuildTime>(OD_BuildTime_get());
 8003ebc:	f001 f880 	bl	8004fc0 <_Z16OD_BuildTime_getv>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f001 fd0a 	bl	80058e2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003ed4:	e138      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x450:    // OD_CAN1_TxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 8003ed6:	f001 f88f 	bl	8004ff8 <_Z20OD_CAN1_TxErrCnt_getv>
 8003eda:	4603      	mov	r3, r0
 8003edc:	461a      	mov	r2, r3
 8003ede:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ee2:	4611      	mov	r1, r2
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f001 fd10 	bl	800590a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003eea:	2300      	movs	r3, #0
 8003eec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003ef0:	e12a      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x451:    // OD_CAN1_RxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 8003ef2:	f001 f89d 	bl	8005030 <_Z20OD_CAN1_RxErrCnt_getv>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	461a      	mov	r2, r3
 8003efa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003efe:	4611      	mov	r1, r2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f001 fd17 	bl	8005934 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003f0c:	e11c      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x452:    // OD_CAN1_lastErrorCode
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 8003f0e:	f001 f8ab 	bl	8005068 <_Z25OD_CAN1_lastErrorCode_getv>
 8003f12:	4602      	mov	r2, r0
 8003f14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f18:	4611      	mov	r1, r2
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f001 fd1f 	bl	800595e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003f26:	e10f      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x453:    // OD_CAN1_autoErrorReset
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 8003f28:	f001 f8ba 	bl	80050a0 <_Z26OD_CAN1_autoErrorReset_getv>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	461a      	mov	r2, r3
 8003f30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f34:	4611      	mov	r1, r2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f001 fd25 	bl	8005986 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003f42:	e101      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x454:    // OD_CAN1_Baudrate
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 8003f44:	f001 f8e4 	bl	8005110 <_Z20OD_CAN1_Baudrate_getv>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f50:	4611      	mov	r1, r2
 8003f52:	4618      	mov	r0, r3
 8003f54:	f001 fd2c 	bl	80059b0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003f5e:	e0f3      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x456:    // OD_CAN1_Status
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Status>(OD_CAN1_Status_get());
 8003f60:	f001 f90e 	bl	8005180 <_Z18OD_CAN1_Status_getv>
 8003f64:	4603      	mov	r3, r0
 8003f66:	461a      	mov	r2, r3
 8003f68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f001 fd33 	bl	80059da <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003f74:	2300      	movs	r3, #0
 8003f76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003f7a:	e0e5      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x457:    // OD_CAN1_DiscardedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 8003f7c:	f001 f91c 	bl	80051b8 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 8003f80:	4602      	mov	r2, r0
 8003f82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f86:	4611      	mov	r1, r2
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f001 fd3b 	bl	8005a04 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003f94:	e0d8      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x458:    // OD_CAN1_ErrorStatus
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 8003f96:	f001 f92b 	bl	80051f0 <_Z23OD_CAN1_ErrorStatus_getv>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f001 fd41 	bl	8005a2c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003faa:	2300      	movs	r3, #0
 8003fac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003fb0:	e0ca      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x459:    // OD_CAN1_DelayedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 8003fb2:	f001 f939 	bl	8005228 <_Z29OD_CAN1_DelayedTxMessages_getv>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fbc:	4611      	mov	r1, r2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f001 fd49 	bl	8005a56 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003fca:	e0bd      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x460:    // OD_CAN2_TxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 8003fcc:	f001 f948 	bl	8005260 <_Z20OD_CAN2_TxErrCnt_getv>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fd8:	4611      	mov	r1, r2
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f001 fd4f 	bl	8005a7e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003fe6:	e0af      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x461:    // OD_CAN2_RxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8003fe8:	f001 f956 	bl	8005298 <_Z20OD_CAN2_RxErrCnt_getv>
 8003fec:	4603      	mov	r3, r0
 8003fee:	461a      	mov	r2, r3
 8003ff0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f001 fd56 	bl	8005aa8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004002:	e0a1      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x462:    // OD_CAN2_lastErrorCode
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8004004:	f001 f964 	bl	80052d0 <_Z25OD_CAN2_lastErrorCode_getv>
 8004008:	4602      	mov	r2, r0
 800400a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800400e:	4611      	mov	r1, r2
 8004010:	4618      	mov	r0, r3
 8004012:	f001 fd5e 	bl	8005ad2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004016:	2300      	movs	r3, #0
 8004018:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800401c:	e094      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x463:    // OD_CAN2_autoErrorReset
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 800401e:	f001 f973 	bl	8005308 <_Z26OD_CAN2_autoErrorReset_getv>
 8004022:	4603      	mov	r3, r0
 8004024:	461a      	mov	r2, r3
 8004026:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800402a:	4611      	mov	r1, r2
 800402c:	4618      	mov	r0, r3
 800402e:	f001 fd64 	bl	8005afa <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004032:	2300      	movs	r3, #0
 8004034:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004038:	e086      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x464:    // OD_CAN2_Baudrate
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 800403a:	f001 f99d 	bl	8005378 <_Z20OD_CAN2_Baudrate_getv>
 800403e:	4603      	mov	r3, r0
 8004040:	461a      	mov	r2, r3
 8004042:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004046:	4611      	mov	r1, r2
 8004048:	4618      	mov	r0, r3
 800404a:	f001 fd6b 	bl	8005b24 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800404e:	2300      	movs	r3, #0
 8004050:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004054:	e078      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x466:    // OD_CAN2_Status
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Status>(OD_CAN2_Status_get());
 8004056:	f001 f9c7 	bl	80053e8 <_Z18OD_CAN2_Status_getv>
 800405a:	4603      	mov	r3, r0
 800405c:	461a      	mov	r2, r3
 800405e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004062:	4611      	mov	r1, r2
 8004064:	4618      	mov	r0, r3
 8004066:	f001 fd72 	bl	8005b4e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800406a:	2300      	movs	r3, #0
 800406c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004070:	e06a      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x467:    // OD_CAN2_DiscardedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 8004072:	f001 f9d5 	bl	8005420 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 8004076:	4602      	mov	r2, r0
 8004078:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800407c:	4611      	mov	r1, r2
 800407e:	4618      	mov	r0, r3
 8004080:	f001 fd7a 	bl	8005b78 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004084:	2300      	movs	r3, #0
 8004086:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800408a:	e05d      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x468:    // OD_CAN2_ErrorStatus
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 800408c:	f001 f9e4 	bl	8005458 <_Z23OD_CAN2_ErrorStatus_getv>
 8004090:	4603      	mov	r3, r0
 8004092:	461a      	mov	r2, r3
 8004094:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004098:	4611      	mov	r1, r2
 800409a:	4618      	mov	r0, r3
 800409c:	f001 fd80 	bl	8005ba0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80040a0:	2300      	movs	r3, #0
 80040a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80040a6:	e04f      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0x469:    // OD_CAN2_DelayedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 80040a8:	f001 f9f2 	bl	8005490 <_Z29OD_CAN2_DelayedTxMessages_getv>
 80040ac:	4602      	mov	r2, r0
 80040ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040b2:	4611      	mov	r1, r2
 80040b4:	4618      	mov	r0, r3
 80040b6:	f001 fd88 	bl	8005bca <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80040ba:	2300      	movs	r3, #0
 80040bc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80040c0:	e042      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0xA20:    // OD_IMU_number
            msgSdoResp.set<can::signals::SENSOR_OD_IMU_number>(OD_IMU_number_get());
 80040c2:	f001 fa01 	bl	80054c8 <_Z17OD_IMU_number_getv>
 80040c6:	4603      	mov	r3, r0
 80040c8:	461a      	mov	r2, r3
 80040ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040ce:	4611      	mov	r1, r2
 80040d0:	4618      	mov	r0, r3
 80040d2:	f001 fd8e 	bl	8005bf2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_IMU_numberEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80040dc:	e034      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0xA25:    // OD_IMU1_Temperature
            msgSdoResp.set<can::signals::SENSOR_OD_IMU1_Temperature>(OD_IMU1_Temperature_get());
 80040de:	f001 fa0f 	bl	8005500 <_Z23OD_IMU1_Temperature_getv>
 80040e2:	eef0 7a40 	vmov.f32	s15, s0
 80040e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80040ea:	eeb0 0a67 	vmov.f32	s0, s15
 80040ee:	4618      	mov	r0, r3
 80040f0:	f001 fd94 	bl	8005c1c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU1_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80040fa:	e025      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0xA26:    // OD_IMU2_Temperature
            msgSdoResp.set<can::signals::SENSOR_OD_IMU2_Temperature>(OD_IMU2_Temperature_get());
 80040fc:	f001 fa1e 	bl	800553c <_Z23OD_IMU2_Temperature_getv>
 8004100:	eef0 7a40 	vmov.f32	s15, s0
 8004104:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004108:	eeb0 0a67 	vmov.f32	s0, s15
 800410c:	4618      	mov	r0, r3
 800410e:	f001 fd9c 	bl	8005c4a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU2_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004112:	2300      	movs	r3, #0
 8004114:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004118:	e016      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        case 0xA27:    // OD_IMU3_Temperature
            msgSdoResp.set<can::signals::SENSOR_OD_IMU3_Temperature>(OD_IMU3_Temperature_get());
 800411a:	f001 fa2d 	bl	8005578 <_Z23OD_IMU3_Temperature_getv>
 800411e:	eef0 7a40 	vmov.f32	s15, s0
 8004122:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004126:	eeb0 0a67 	vmov.f32	s0, s15
 800412a:	4618      	mov	r0, r3
 800412c:	f001 fda4 	bl	8005c78 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU3_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004130:	2300      	movs	r3, #0
 8004132:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004136:	e007      	b.n	8004148 <_Z31handleSDORequestDownloadBySDOIDt+0x70c>
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SENSOR_SDO_ID>(sdoId);
 8004138:	88fa      	ldrh	r2, [r7, #6]
 800413a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800413e:	4611      	mov	r1, r2
 8004140:	4618      	mov	r0, r3
 8004142:	f001 fdb0 	bl	8005ca6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>
            break;
 8004146:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SENSOR_SDO_RespCode>(respCode);
 8004148:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800414c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004150:	4611      	mov	r1, r2
 8004152:	4618      	mov	r0, r3
 8004154:	f001 fdbc 	bl	8005cd0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 8004158:	f107 0308 	add.w	r3, r7, #8
 800415c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004160:	2200      	movs	r2, #0
 8004162:	4618      	mov	r0, r3
 8004164:	f7fc ffee 	bl	8001144 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 8004168:	4b05      	ldr	r3, [pc, #20]	; (8004180 <_Z31handleSDORequestDownloadBySDOIDt+0x744>)
 800416a:	6818      	ldr	r0, [r3, #0]
 800416c:	f107 0108 	add.w	r1, r7, #8
 8004170:	2300      	movs	r3, #0
 8004172:	2200      	movs	r2, #0
 8004174:	f00b f8d4 	bl	800f320 <osMessageQueuePut>
}
 8004178:	bf00      	nop
 800417a:	3748      	adds	r7, #72	; 0x48
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	2000062c 	.word	0x2000062c

08004184 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af02      	add	r7, sp, #8
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	2300      	movs	r3, #0
 8004198:	2208      	movs	r2, #8
 800419a:	f240 51c1 	movw	r1, #1473	; 0x5c1
 800419e:	f7fd ffc3 	bl	8002128 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 80041a6:	f240 52c1 	movw	r2, #1473	; 0x5c1
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d000      	beq.n	80041b0 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 80041ae:	e7fe      	b.n	80041ae <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	6039      	str	r1, [r7, #0]
 80041c4:	6839      	ldr	r1, [r7, #0]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	331c      	adds	r3, #28
 80041ca:	461a      	mov	r2, r3
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff ffd9 	bl	8004184 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4618      	mov	r0, r3
 80041d6:	3708      	adds	r7, #8
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <_Z22handleSDORequestUploadRK9RxMessage>:

void handleSDORequestUpload(const RxMessage& rxMsgSdoReq) {
 80041dc:	b580      	push	{r7, lr}
 80041de:	b09c      	sub	sp, #112	; 0x70
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SENSOR_SDO_Req_Up> msgSdoReq(rxMsgSdoReq);
 80041e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff ffe5 	bl	80041ba <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK9RxMessage>
    can::Message<can::messages::SENSOR_SDO_Resp> msgSdoResp;
 80041f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff fc11 	bl	8003a1c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SENSOR_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 80041fa:	2301      	movs	r3, #1
 80041fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint16_t sdoId = msgSdoReq.get<can::signals::SENSOR_SDO_ID>();
 8004200:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004204:	4618      	mov	r0, r3
 8004206:	f001 fd78 	bl	8005cfa <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>
 800420a:	4603      	mov	r3, r0
 800420c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

    switch (sdoId) {
 8004210:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004214:	f640 2227 	movw	r2, #2599	; 0xa27
 8004218:	4293      	cmp	r3, r2
 800421a:	f300 83e0 	bgt.w	80049de <_Z22handleSDORequestUploadRK9RxMessage+0x802>
 800421e:	f5b3 6f22 	cmp.w	r3, #2592	; 0xa20
 8004222:	da06      	bge.n	8004232 <_Z22handleSDORequestUploadRK9RxMessage+0x56>
 8004224:	2b21      	cmp	r3, #33	; 0x21
 8004226:	f300 8123 	bgt.w	8004470 <_Z22handleSDORequestUploadRK9RxMessage+0x294>
 800422a:	2b00      	cmp	r3, #0
 800422c:	f300 80d6 	bgt.w	80043dc <_Z22handleSDORequestUploadRK9RxMessage+0x200>
 8004230:	e3d5      	b.n	80049de <_Z22handleSDORequestUploadRK9RxMessage+0x802>
 8004232:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 8004236:	2b07      	cmp	r3, #7
 8004238:	f200 83d1 	bhi.w	80049de <_Z22handleSDORequestUploadRK9RxMessage+0x802>
 800423c:	a201      	add	r2, pc, #4	; (adr r2, 8004244 <_Z22handleSDORequestUploadRK9RxMessage+0x68>)
 800423e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004242:	bf00      	nop
 8004244:	08004969 	.word	0x08004969
 8004248:	080049df 	.word	0x080049df
 800424c:	080049df 	.word	0x080049df
 8004250:	080049df 	.word	0x080049df
 8004254:	080049df 	.word	0x080049df
 8004258:	08004985 	.word	0x08004985
 800425c:	080049a3 	.word	0x080049a3
 8004260:	080049c1 	.word	0x080049c1
 8004264:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004268:	2b59      	cmp	r3, #89	; 0x59
 800426a:	f200 83b8 	bhi.w	80049de <_Z22handleSDORequestUploadRK9RxMessage+0x802>
 800426e:	a201      	add	r2, pc, #4	; (adr r2, 8004274 <_Z22handleSDORequestUploadRK9RxMessage+0x98>)
 8004270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004274:	080045b3 	.word	0x080045b3
 8004278:	080045d1 	.word	0x080045d1
 800427c:	080045eb 	.word	0x080045eb
 8004280:	08004609 	.word	0x08004609
 8004284:	08004627 	.word	0x08004627
 8004288:	08004641 	.word	0x08004641
 800428c:	0800465d 	.word	0x0800465d
 8004290:	080049df 	.word	0x080049df
 8004294:	080049df 	.word	0x080049df
 8004298:	080049df 	.word	0x080049df
 800429c:	080049df 	.word	0x080049df
 80042a0:	080049df 	.word	0x080049df
 80042a4:	080049df 	.word	0x080049df
 80042a8:	080049df 	.word	0x080049df
 80042ac:	080049df 	.word	0x080049df
 80042b0:	080049df 	.word	0x080049df
 80042b4:	08004679 	.word	0x08004679
 80042b8:	08004693 	.word	0x08004693
 80042bc:	080049df 	.word	0x080049df
 80042c0:	080049df 	.word	0x080049df
 80042c4:	080049df 	.word	0x080049df
 80042c8:	080049df 	.word	0x080049df
 80042cc:	080049df 	.word	0x080049df
 80042d0:	080049df 	.word	0x080049df
 80042d4:	080049df 	.word	0x080049df
 80042d8:	080049df 	.word	0x080049df
 80042dc:	080049df 	.word	0x080049df
 80042e0:	080049df 	.word	0x080049df
 80042e4:	080049df 	.word	0x080049df
 80042e8:	080049df 	.word	0x080049df
 80042ec:	080049df 	.word	0x080049df
 80042f0:	080049df 	.word	0x080049df
 80042f4:	080046ad 	.word	0x080046ad
 80042f8:	080046c7 	.word	0x080046c7
 80042fc:	080049df 	.word	0x080049df
 8004300:	080049df 	.word	0x080049df
 8004304:	080049df 	.word	0x080049df
 8004308:	080049df 	.word	0x080049df
 800430c:	080049df 	.word	0x080049df
 8004310:	080049df 	.word	0x080049df
 8004314:	080049df 	.word	0x080049df
 8004318:	080049df 	.word	0x080049df
 800431c:	080049df 	.word	0x080049df
 8004320:	080049df 	.word	0x080049df
 8004324:	080049df 	.word	0x080049df
 8004328:	080049df 	.word	0x080049df
 800432c:	080049df 	.word	0x080049df
 8004330:	080049df 	.word	0x080049df
 8004334:	080049df 	.word	0x080049df
 8004338:	080049df 	.word	0x080049df
 800433c:	080049df 	.word	0x080049df
 8004340:	080049df 	.word	0x080049df
 8004344:	080049df 	.word	0x080049df
 8004348:	080049df 	.word	0x080049df
 800434c:	080049df 	.word	0x080049df
 8004350:	080049df 	.word	0x080049df
 8004354:	080049df 	.word	0x080049df
 8004358:	080049df 	.word	0x080049df
 800435c:	080049df 	.word	0x080049df
 8004360:	080049df 	.word	0x080049df
 8004364:	080049df 	.word	0x080049df
 8004368:	080049df 	.word	0x080049df
 800436c:	080049df 	.word	0x080049df
 8004370:	080049df 	.word	0x080049df
 8004374:	080046e1 	.word	0x080046e1
 8004378:	080046fd 	.word	0x080046fd
 800437c:	08004719 	.word	0x08004719
 8004380:	08004733 	.word	0x08004733
 8004384:	08004769 	.word	0x08004769
 8004388:	080049df 	.word	0x080049df
 800438c:	080047b9 	.word	0x080047b9
 8004390:	080047d5 	.word	0x080047d5
 8004394:	080047ef 	.word	0x080047ef
 8004398:	0800480b 	.word	0x0800480b
 800439c:	080049df 	.word	0x080049df
 80043a0:	080049df 	.word	0x080049df
 80043a4:	080049df 	.word	0x080049df
 80043a8:	080049df 	.word	0x080049df
 80043ac:	080049df 	.word	0x080049df
 80043b0:	080049df 	.word	0x080049df
 80043b4:	08004825 	.word	0x08004825
 80043b8:	08004841 	.word	0x08004841
 80043bc:	0800485d 	.word	0x0800485d
 80043c0:	08004877 	.word	0x08004877
 80043c4:	080048ad 	.word	0x080048ad
 80043c8:	080049df 	.word	0x080049df
 80043cc:	080048fd 	.word	0x080048fd
 80043d0:	08004919 	.word	0x08004919
 80043d4:	08004933 	.word	0x08004933
 80043d8:	0800494f 	.word	0x0800494f
 80043dc:	3b01      	subs	r3, #1
 80043de:	2b20      	cmp	r3, #32
 80043e0:	f200 82fd 	bhi.w	80049de <_Z22handleSDORequestUploadRK9RxMessage+0x802>
 80043e4:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <_Z22handleSDORequestUploadRK9RxMessage+0x210>)
 80043e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ea:	bf00      	nop
 80043ec:	08004485 	.word	0x08004485
 80043f0:	080044a1 	.word	0x080044a1
 80043f4:	080044bd 	.word	0x080044bd
 80043f8:	080044d9 	.word	0x080044d9
 80043fc:	080044f5 	.word	0x080044f5
 8004400:	080049df 	.word	0x080049df
 8004404:	080049df 	.word	0x080049df
 8004408:	080049df 	.word	0x080049df
 800440c:	080049df 	.word	0x080049df
 8004410:	080049df 	.word	0x080049df
 8004414:	080049df 	.word	0x080049df
 8004418:	080049df 	.word	0x080049df
 800441c:	080049df 	.word	0x080049df
 8004420:	080049df 	.word	0x080049df
 8004424:	080049df 	.word	0x080049df
 8004428:	08004511 	.word	0x08004511
 800442c:	080049df 	.word	0x080049df
 8004430:	080049df 	.word	0x080049df
 8004434:	080049df 	.word	0x080049df
 8004438:	080049df 	.word	0x080049df
 800443c:	080049df 	.word	0x080049df
 8004440:	080049df 	.word	0x080049df
 8004444:	080049df 	.word	0x080049df
 8004448:	080049df 	.word	0x080049df
 800444c:	080049df 	.word	0x080049df
 8004450:	080049df 	.word	0x080049df
 8004454:	080049df 	.word	0x080049df
 8004458:	080049df 	.word	0x080049df
 800445c:	080049df 	.word	0x080049df
 8004460:	080049df 	.word	0x080049df
 8004464:	080049df 	.word	0x080049df
 8004468:	08004547 	.word	0x08004547
 800446c:	0800457d 	.word	0x0800457d
 8004470:	f240 4269 	movw	r2, #1129	; 0x469
 8004474:	4293      	cmp	r3, r2
 8004476:	f300 82b2 	bgt.w	80049de <_Z22handleSDORequestUploadRK9RxMessage+0x802>
 800447a:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800447e:	f6bf aef1 	bge.w	8004264 <_Z22handleSDORequestUploadRK9RxMessage+0x88>
 8004482:	e2ac      	b.n	80049de <_Z22handleSDORequestUploadRK9RxMessage+0x802>
        case 0x1: {   // OD_NodeID
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004484:	2303      	movs	r3, #3
 8004486:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_NodeID>(OD_NodeID_get());
 800448a:	f000 facf 	bl	8004a2c <_Z13OD_NodeID_getv>
 800448e:	4603      	mov	r3, r0
 8004490:	461a      	mov	r2, r3
 8004492:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004496:	4611      	mov	r1, r2
 8004498:	4618      	mov	r0, r3
 800449a:	f001 f89d 	bl	80055d8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>
            break;
 800449e:	e2a7      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x2: {   // OD_NodeStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80044a0:	2303      	movs	r3, #3
 80044a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_NodeStatus>(OD_NodeStatus_get());
 80044a6:	f000 fadd 	bl	8004a64 <_Z17OD_NodeStatus_getv>
 80044aa:	4603      	mov	r3, r0
 80044ac:	461a      	mov	r2, r3
 80044ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044b2:	4611      	mov	r1, r2
 80044b4:	4618      	mov	r0, r3
 80044b6:	f001 f8a4 	bl	8005602 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>
            break;
 80044ba:	e299      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x3: {   // OD_ProtocolVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80044bc:	2303      	movs	r3, #3
 80044be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 80044c2:	f000 faeb 	bl	8004a9c <_Z22OD_ProtocolVersion_getv>
 80044c6:	4603      	mov	r3, r0
 80044c8:	461a      	mov	r2, r3
 80044ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044ce:	4611      	mov	r1, r2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f001 f8ab 	bl	800562c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>
            break;
 80044d6:	e28b      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x4: {   // OD_StackVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80044d8:	2303      	movs	r3, #3
 80044da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_StackVersion>(OD_StackVersion_get());
 80044de:	f000 faf9 	bl	8004ad4 <_Z19OD_StackVersion_getv>
 80044e2:	4603      	mov	r3, r0
 80044e4:	461a      	mov	r2, r3
 80044e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044ea:	4611      	mov	r1, r2
 80044ec:	4618      	mov	r0, r3
 80044ee:	f001 f8b2 	bl	8005656 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>
            break;
 80044f2:	e27d      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x5: {   // OD_DbcVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_DbcVersion>(OD_DbcVersion_get());
 80044fa:	f000 fb07 	bl	8004b0c <_Z17OD_DbcVersion_getv>
 80044fe:	4603      	mov	r3, r0
 8004500:	461a      	mov	r2, r3
 8004502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004506:	4611      	mov	r1, r2
 8004508:	4618      	mov	r0, r3
 800450a:	f001 f8b9 	bl	8005680 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>
            break;
 800450e:	e26f      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x10: {   // OD_HeartbeatInterval
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_HeartbeatInterval>();
 8004510:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004514:	4618      	mov	r0, r3
 8004516:	f001 fc02 	bl	8005d1e <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals27SENSOR_OD_HeartbeatIntervalEEENT_8dataTypeEv>
 800451a:	4603      	mov	r3, r0
 800451c:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                OD_HeartbeatInterval_set(value);
 8004520:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004524:	4618      	mov	r0, r3
 8004526:	f000 fb29 	bl	8004b7c <_Z24OD_HeartbeatInterval_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800452a:	2300      	movs	r3, #0
 800452c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 8004530:	f000 fb08 	bl	8004b44 <_Z24OD_HeartbeatInterval_getv>
 8004534:	4603      	mov	r3, r0
 8004536:	461a      	mov	r2, r3
 8004538:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800453c:	4611      	mov	r1, r2
 800453e:	4618      	mov	r0, r3
 8004540:	f001 f8b3 	bl	80056aa <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            break;
 8004544:	e254      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x20: {   // OD_SendOdOnBootup
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_SendOdOnBootup>();
 8004546:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800454a:	4618      	mov	r0, r3
 800454c:	f001 fbf9 	bl	8005d42 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals24SENSOR_OD_SendOdOnBootupEEENT_8dataTypeEv>
 8004550:	4603      	mov	r3, r0
 8004552:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                OD_SendOdOnBootup_set(value);
 8004556:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 800455a:	4618      	mov	r0, r3
 800455c:	f000 fb46 	bl	8004bec <_Z21OD_SendOdOnBootup_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004560:	2300      	movs	r3, #0
 8004562:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8004566:	f000 fb25 	bl	8004bb4 <_Z21OD_SendOdOnBootup_getv>
 800456a:	4603      	mov	r3, r0
 800456c:	461a      	mov	r2, r3
 800456e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004572:	4611      	mov	r1, r2
 8004574:	4618      	mov	r0, r3
 8004576:	f001 f8ad 	bl	80056d4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            break;
 800457a:	e239      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x21: {   // OD_OdEntrySendInterval
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_OdEntrySendInterval>();
 800457c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004580:	4618      	mov	r0, r3
 8004582:	f001 fbf0 	bl	8005d66 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_OdEntrySendIntervalEEENT_8dataTypeEv>
 8004586:	4603      	mov	r3, r0
 8004588:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                OD_OdEntrySendInterval_set(value);
 800458c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004590:	4618      	mov	r0, r3
 8004592:	f000 fb63 	bl	8004c5c <_Z26OD_OdEntrySendInterval_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004596:	2300      	movs	r3, #0
 8004598:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 800459c:	f000 fb42 	bl	8004c24 <_Z26OD_OdEntrySendInterval_getv>
 80045a0:	4603      	mov	r3, r0
 80045a2:	461a      	mov	r2, r3
 80045a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045a8:	4611      	mov	r1, r2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f001 f8a7 	bl	80056fe <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            break;
 80045b0:	e21e      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x410: {   // OD_CpuUsage
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CpuUsage>(OD_CpuUsage_get());
 80045b8:	f000 fb6c 	bl	8004c94 <_Z15OD_CpuUsage_getv>
 80045bc:	eef0 7a40 	vmov.f32	s15, s0
 80045c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045c4:	eeb0 0a67 	vmov.f32	s0, s15
 80045c8:	4618      	mov	r0, r3
 80045ca:	f001 f8ad 	bl	8005728 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>
            break;
 80045ce:	e20f      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x411: {   // OD_MemFree
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_MemFree>(OD_MemFree_get());
 80045d6:	f000 fb97 	bl	8004d08 <_Z14OD_MemFree_getv>
 80045da:	4602      	mov	r2, r0
 80045dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045e0:	4611      	mov	r1, r2
 80045e2:	4618      	mov	r0, r3
 80045e4:	f001 f8b7 	bl	8005756 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>
            break;
 80045e8:	e202      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x412: {   // OD_BoardTemp
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BoardTemp>(OD_BoardTemp_get());
 80045f0:	f000 fbc2 	bl	8004d78 <_Z16OD_BoardTemp_getv>
 80045f4:	eef0 7a40 	vmov.f32	s15, s0
 80045f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045fc:	eeb0 0a67 	vmov.f32	s0, s15
 8004600:	4618      	mov	r0, r3
 8004602:	f001 f8bc 	bl	800577e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>
            break;
 8004606:	e1f3      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x413: {   // OD_InputVoltage
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004608:	2303      	movs	r3, #3
 800460a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_InputVoltage>(OD_InputVoltage_get());
 800460e:	f000 fbed 	bl	8004dec <_Z19OD_InputVoltage_getv>
 8004612:	eef0 7a40 	vmov.f32	s15, s0
 8004616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800461a:	eeb0 0a67 	vmov.f32	s0, s15
 800461e:	4618      	mov	r0, r3
 8004620:	f001 f8c4 	bl	80057ac <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>
            break;
 8004624:	e1e4      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x414: {   // OD_runtime
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004626:	2303      	movs	r3, #3
 8004628:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_runtime>(OD_runtime_get());
 800462c:	f000 fc18 	bl	8004e60 <_Z14OD_runtime_getv>
 8004630:	4602      	mov	r2, r0
 8004632:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004636:	4611      	mov	r1, r2
 8004638:	4618      	mov	r0, r3
 800463a:	f001 f8ce 	bl	80057da <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>
            break;
 800463e:	e1d7      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x415: {   // OD_SdcIn
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004640:	2303      	movs	r3, #3
 8004642:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SdcIn>(OD_SdcIn_get());
 8004646:	f000 fc27 	bl	8004e98 <_Z12OD_SdcIn_getv>
 800464a:	4603      	mov	r3, r0
 800464c:	461a      	mov	r2, r3
 800464e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004652:	4611      	mov	r1, r2
 8004654:	4618      	mov	r0, r3
 8004656:	f001 f8d4 	bl	8005802 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>
            break;
 800465a:	e1c9      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x416: {   // OD_SdcOut
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800465c:	2303      	movs	r3, #3
 800465e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SdcOut>(OD_SdcOut_get());
 8004662:	f000 fc35 	bl	8004ed0 <_Z13OD_SdcOut_getv>
 8004666:	4603      	mov	r3, r0
 8004668:	461a      	mov	r2, r3
 800466a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800466e:	4611      	mov	r1, r2
 8004670:	4618      	mov	r0, r3
 8004672:	f001 f8db 	bl	800582c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>
            break;
 8004676:	e1bb      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x420: {   // OD_ChipUID1
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004678:	2303      	movs	r3, #3
 800467a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID1>(OD_ChipUID1_get());
 800467e:	f000 fc43 	bl	8004f08 <_Z15OD_ChipUID1_getv>
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800468a:	4608      	mov	r0, r1
 800468c:	f001 f8e3 	bl	8005856 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>
            break;
 8004690:	e1ae      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x421: {   // OD_ChipUID2
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004692:	2303      	movs	r3, #3
 8004694:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID2>(OD_ChipUID2_get());
 8004698:	f000 fc56 	bl	8004f48 <_Z15OD_ChipUID2_getv>
 800469c:	4602      	mov	r2, r0
 800469e:	460b      	mov	r3, r1
 80046a0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80046a4:	4608      	mov	r0, r1
 80046a6:	f001 f8ef 	bl	8005888 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>
            break;
 80046aa:	e1a1      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x430: {   // OD_BuildDate
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80046ac:	2303      	movs	r3, #3
 80046ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BuildDate>(OD_BuildDate_get());
 80046b2:	f000 fc69 	bl	8004f88 <_Z16OD_BuildDate_getv>
 80046b6:	4602      	mov	r2, r0
 80046b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046bc:	4611      	mov	r1, r2
 80046be:	4618      	mov	r0, r3
 80046c0:	f001 f8fb 	bl	80058ba <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>
            break;
 80046c4:	e194      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x431: {   // OD_BuildTime
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BuildTime>(OD_BuildTime_get());
 80046cc:	f000 fc78 	bl	8004fc0 <_Z16OD_BuildTime_getv>
 80046d0:	4602      	mov	r2, r0
 80046d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046d6:	4611      	mov	r1, r2
 80046d8:	4618      	mov	r0, r3
 80046da:	f001 f902 	bl	80058e2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>
            break;
 80046de:	e187      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x450: {   // OD_CAN1_TxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 80046e6:	f000 fc87 	bl	8004ff8 <_Z20OD_CAN1_TxErrCnt_getv>
 80046ea:	4603      	mov	r3, r0
 80046ec:	461a      	mov	r2, r3
 80046ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80046f2:	4611      	mov	r1, r2
 80046f4:	4618      	mov	r0, r3
 80046f6:	f001 f908 	bl	800590a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            break;
 80046fa:	e179      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x451: {   // OD_CAN1_RxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 8004702:	f000 fc95 	bl	8005030 <_Z20OD_CAN1_RxErrCnt_getv>
 8004706:	4603      	mov	r3, r0
 8004708:	461a      	mov	r2, r3
 800470a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800470e:	4611      	mov	r1, r2
 8004710:	4618      	mov	r0, r3
 8004712:	f001 f90f 	bl	8005934 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            break;
 8004716:	e16b      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x452: {   // OD_CAN1_lastErrorCode
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004718:	2303      	movs	r3, #3
 800471a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 800471e:	f000 fca3 	bl	8005068 <_Z25OD_CAN1_lastErrorCode_getv>
 8004722:	4602      	mov	r2, r0
 8004724:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004728:	4611      	mov	r1, r2
 800472a:	4618      	mov	r0, r3
 800472c:	f001 f917 	bl	800595e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8004730:	e15e      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x453: {   // OD_CAN1_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN1_autoErrorReset>();
 8004732:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004736:	4618      	mov	r0, r3
 8004738:	f001 fb27 	bl	8005d8a <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>
 800473c:	4603      	mov	r3, r0
 800473e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                OD_CAN1_autoErrorReset_set(value);
 8004742:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fcc6 	bl	80050d8 <_Z26OD_CAN1_autoErrorReset_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800474c:	2300      	movs	r3, #0
 800474e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 8004752:	f000 fca5 	bl	80050a0 <_Z26OD_CAN1_autoErrorReset_getv>
 8004756:	4603      	mov	r3, r0
 8004758:	461a      	mov	r2, r3
 800475a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800475e:	4611      	mov	r1, r2
 8004760:	4618      	mov	r0, r3
 8004762:	f001 f910 	bl	8005986 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8004766:	e143      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x454: {   // OD_CAN1_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN1_Baudrate>();
 8004768:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800476c:	4618      	mov	r0, r3
 800476e:	f001 fb1e 	bl	8005dae <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN1_BaudrateEEENT_8dataTypeEv>
 8004772:	4603      	mov	r3, r0
 8004774:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
if (value < 125 || value > 1000) {
 8004778:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800477c:	2b7c      	cmp	r3, #124	; 0x7c
 800477e:	d904      	bls.n	800478a <_Z22handleSDORequestUploadRK9RxMessage+0x5ae>
 8004780:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004784:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004788:	d903      	bls.n	8004792 <_Z22handleSDORequestUploadRK9RxMessage+0x5b6>
                respCode = can::signals::SENSOR_SDO_RespCode::ERR_OUT_OF_RANGE;
 800478a:	2305      	movs	r3, #5
 800478c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004790:	e007      	b.n	80047a2 <_Z22handleSDORequestUploadRK9RxMessage+0x5c6>
            }
            else {
                OD_CAN1_Baudrate_set(value);
 8004792:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004796:	4618      	mov	r0, r3
 8004798:	f000 fcd6 	bl	8005148 <_Z20OD_CAN1_Baudrate_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 800479c:	2300      	movs	r3, #0
 800479e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            }
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 80047a2:	f000 fcb5 	bl	8005110 <_Z20OD_CAN1_Baudrate_getv>
 80047a6:	4603      	mov	r3, r0
 80047a8:	461a      	mov	r2, r3
 80047aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047ae:	4611      	mov	r1, r2
 80047b0:	4618      	mov	r0, r3
 80047b2:	f001 f8fd 	bl	80059b0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            break;
 80047b6:	e11b      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x456: {   // OD_CAN1_Status
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Status>(OD_CAN1_Status_get());
 80047be:	f000 fcdf 	bl	8005180 <_Z18OD_CAN1_Status_getv>
 80047c2:	4603      	mov	r3, r0
 80047c4:	461a      	mov	r2, r3
 80047c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047ca:	4611      	mov	r1, r2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f001 f904 	bl	80059da <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>
            break;
 80047d2:	e10d      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x457: {   // OD_CAN1_DiscardedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 80047da:	f000 fced 	bl	80051b8 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 80047de:	4602      	mov	r2, r0
 80047e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047e4:	4611      	mov	r1, r2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f001 f90c 	bl	8005a04 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 80047ec:	e100      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x458: {   // OD_CAN1_ErrorStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 80047f4:	f000 fcfc 	bl	80051f0 <_Z23OD_CAN1_ErrorStatus_getv>
 80047f8:	4603      	mov	r3, r0
 80047fa:	461a      	mov	r2, r3
 80047fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004800:	4611      	mov	r1, r2
 8004802:	4618      	mov	r0, r3
 8004804:	f001 f912 	bl	8005a2c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            break;
 8004808:	e0f2      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x459: {   // OD_CAN1_DelayedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800480a:	2303      	movs	r3, #3
 800480c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 8004810:	f000 fd0a 	bl	8005228 <_Z29OD_CAN1_DelayedTxMessages_getv>
 8004814:	4602      	mov	r2, r0
 8004816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800481a:	4611      	mov	r1, r2
 800481c:	4618      	mov	r0, r3
 800481e:	f001 f91a 	bl	8005a56 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 8004822:	e0e5      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x460: {   // OD_CAN2_TxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004824:	2303      	movs	r3, #3
 8004826:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 800482a:	f000 fd19 	bl	8005260 <_Z20OD_CAN2_TxErrCnt_getv>
 800482e:	4603      	mov	r3, r0
 8004830:	461a      	mov	r2, r3
 8004832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004836:	4611      	mov	r1, r2
 8004838:	4618      	mov	r0, r3
 800483a:	f001 f920 	bl	8005a7e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            break;
 800483e:	e0d7      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x461: {   // OD_CAN2_RxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004840:	2303      	movs	r3, #3
 8004842:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8004846:	f000 fd27 	bl	8005298 <_Z20OD_CAN2_RxErrCnt_getv>
 800484a:	4603      	mov	r3, r0
 800484c:	461a      	mov	r2, r3
 800484e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004852:	4611      	mov	r1, r2
 8004854:	4618      	mov	r0, r3
 8004856:	f001 f927 	bl	8005aa8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            break;
 800485a:	e0c9      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x462: {   // OD_CAN2_lastErrorCode
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800485c:	2303      	movs	r3, #3
 800485e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8004862:	f000 fd35 	bl	80052d0 <_Z25OD_CAN2_lastErrorCode_getv>
 8004866:	4602      	mov	r2, r0
 8004868:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800486c:	4611      	mov	r1, r2
 800486e:	4618      	mov	r0, r3
 8004870:	f001 f92f 	bl	8005ad2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8004874:	e0bc      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x463: {   // OD_CAN2_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN2_autoErrorReset>();
 8004876:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800487a:	4618      	mov	r0, r3
 800487c:	f001 faa9 	bl	8005dd2 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>
 8004880:	4603      	mov	r3, r0
 8004882:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                OD_CAN2_autoErrorReset_set(value);
 8004886:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fd58 	bl	8005340 <_Z26OD_CAN2_autoErrorReset_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004890:	2300      	movs	r3, #0
 8004892:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8004896:	f000 fd37 	bl	8005308 <_Z26OD_CAN2_autoErrorReset_getv>
 800489a:	4603      	mov	r3, r0
 800489c:	461a      	mov	r2, r3
 800489e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048a2:	4611      	mov	r1, r2
 80048a4:	4618      	mov	r0, r3
 80048a6:	f001 f928 	bl	8005afa <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            break;
 80048aa:	e0a1      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x464: {   // OD_CAN2_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN2_Baudrate>();
 80048ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80048b0:	4618      	mov	r0, r3
 80048b2:	f001 faa0 	bl	8005df6 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN2_BaudrateEEENT_8dataTypeEv>
 80048b6:	4603      	mov	r3, r0
 80048b8:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
if (value < 125 || value > 1000) {
 80048bc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80048c0:	2b7c      	cmp	r3, #124	; 0x7c
 80048c2:	d904      	bls.n	80048ce <_Z22handleSDORequestUploadRK9RxMessage+0x6f2>
 80048c4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80048c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048cc:	d903      	bls.n	80048d6 <_Z22handleSDORequestUploadRK9RxMessage+0x6fa>
                respCode = can::signals::SENSOR_SDO_RespCode::ERR_OUT_OF_RANGE;
 80048ce:	2305      	movs	r3, #5
 80048d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80048d4:	e007      	b.n	80048e6 <_Z22handleSDORequestUploadRK9RxMessage+0x70a>
            }
            else {
                OD_CAN2_Baudrate_set(value);
 80048d6:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80048da:	4618      	mov	r0, r3
 80048dc:	f000 fd68 	bl	80053b0 <_Z20OD_CAN2_Baudrate_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80048e0:	2300      	movs	r3, #0
 80048e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            }
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 80048e6:	f000 fd47 	bl	8005378 <_Z20OD_CAN2_Baudrate_getv>
 80048ea:	4603      	mov	r3, r0
 80048ec:	461a      	mov	r2, r3
 80048ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048f2:	4611      	mov	r1, r2
 80048f4:	4618      	mov	r0, r3
 80048f6:	f001 f915 	bl	8005b24 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            break;
 80048fa:	e079      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x466: {   // OD_CAN2_Status
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Status>(OD_CAN2_Status_get());
 8004902:	f000 fd71 	bl	80053e8 <_Z18OD_CAN2_Status_getv>
 8004906:	4603      	mov	r3, r0
 8004908:	461a      	mov	r2, r3
 800490a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800490e:	4611      	mov	r1, r2
 8004910:	4618      	mov	r0, r3
 8004912:	f001 f91c 	bl	8005b4e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>
            break;
 8004916:	e06b      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x467: {   // OD_CAN2_DiscardedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004918:	2303      	movs	r3, #3
 800491a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 800491e:	f000 fd7f 	bl	8005420 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 8004922:	4602      	mov	r2, r0
 8004924:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004928:	4611      	mov	r1, r2
 800492a:	4618      	mov	r0, r3
 800492c:	f001 f924 	bl	8005b78 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8004930:	e05e      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x468: {   // OD_CAN2_ErrorStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004932:	2303      	movs	r3, #3
 8004934:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8004938:	f000 fd8e 	bl	8005458 <_Z23OD_CAN2_ErrorStatus_getv>
 800493c:	4603      	mov	r3, r0
 800493e:	461a      	mov	r2, r3
 8004940:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004944:	4611      	mov	r1, r2
 8004946:	4618      	mov	r0, r3
 8004948:	f001 f92a 	bl	8005ba0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            break;
 800494c:	e050      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0x469: {   // OD_CAN2_DelayedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800494e:	2303      	movs	r3, #3
 8004950:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8004954:	f000 fd9c 	bl	8005490 <_Z29OD_CAN2_DelayedTxMessages_getv>
 8004958:	4602      	mov	r2, r0
 800495a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800495e:	4611      	mov	r1, r2
 8004960:	4618      	mov	r0, r3
 8004962:	f001 f932 	bl	8005bca <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 8004966:	e043      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0xA20: {   // OD_IMU_number
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004968:	2303      	movs	r3, #3
 800496a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_IMU_number>(OD_IMU_number_get());
 800496e:	f000 fdab 	bl	80054c8 <_Z17OD_IMU_number_getv>
 8004972:	4603      	mov	r3, r0
 8004974:	461a      	mov	r2, r3
 8004976:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800497a:	4611      	mov	r1, r2
 800497c:	4618      	mov	r0, r3
 800497e:	f001 f938 	bl	8005bf2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_IMU_numberEEEvNT_8dataTypeE>
            break;
 8004982:	e035      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0xA25: {   // OD_IMU1_Temperature
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004984:	2303      	movs	r3, #3
 8004986:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_IMU1_Temperature>(OD_IMU1_Temperature_get());
 800498a:	f000 fdb9 	bl	8005500 <_Z23OD_IMU1_Temperature_getv>
 800498e:	eef0 7a40 	vmov.f32	s15, s0
 8004992:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004996:	eeb0 0a67 	vmov.f32	s0, s15
 800499a:	4618      	mov	r0, r3
 800499c:	f001 f93e 	bl	8005c1c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU1_TemperatureEEEvNT_8dataTypeE>
            break;
 80049a0:	e026      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0xA26: {   // OD_IMU2_Temperature
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_IMU2_Temperature>(OD_IMU2_Temperature_get());
 80049a8:	f000 fdc8 	bl	800553c <_Z23OD_IMU2_Temperature_getv>
 80049ac:	eef0 7a40 	vmov.f32	s15, s0
 80049b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049b4:	eeb0 0a67 	vmov.f32	s0, s15
 80049b8:	4618      	mov	r0, r3
 80049ba:	f001 f946 	bl	8005c4a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU2_TemperatureEEEvNT_8dataTypeE>
            break;
 80049be:	e017      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        case 0xA27: {   // OD_IMU3_Temperature
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_IMU3_Temperature>(OD_IMU3_Temperature_get());
 80049c6:	f000 fdd7 	bl	8005578 <_Z23OD_IMU3_Temperature_getv>
 80049ca:	eef0 7a40 	vmov.f32	s15, s0
 80049ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049d2:	eeb0 0a67 	vmov.f32	s0, s15
 80049d6:	4618      	mov	r0, r3
 80049d8:	f001 f94e 	bl	8005c78 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU3_TemperatureEEEvNT_8dataTypeE>
            break;
 80049dc:	e008      	b.n	80049f0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
        }
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SENSOR_SDO_ID>(sdoId);
 80049de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80049e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049e6:	4611      	mov	r1, r2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f001 f95c 	bl	8005ca6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>
            break;
 80049ee:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SENSOR_SDO_RespCode>(respCode);
 80049f0:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80049f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049f8:	4611      	mov	r1, r2
 80049fa:	4618      	mov	r0, r3
 80049fc:	f001 f968 	bl	8005cd0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 8004a00:	f107 0308 	add.w	r3, r7, #8
 8004a04:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004a08:	2200      	movs	r2, #0
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fc fb9a 	bl	8001144 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <_Z22handleSDORequestUploadRK9RxMessage+0x84c>)
 8004a12:	6818      	ldr	r0, [r3, #0]
 8004a14:	f107 0108 	add.w	r1, r7, #8
 8004a18:	2300      	movs	r3, #0
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f00a fc80 	bl	800f320 <osMessageQueuePut>
}
 8004a20:	bf00      	nop
 8004a22:	3770      	adds	r7, #112	; 0x70
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}
 8004a28:	2000062c 	.word	0x2000062c

08004a2c <_Z13OD_NodeID_getv>:
* or to trigger another function (e.g. enter debug mode).                 *
* ATTENTION: Then the threadsafe access has to be handled by the user,    *
* e.g with using the provided mutex.                                      *
***************************************************************************/
#ifndef OD_NodeID_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeID_get() {
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeID, portMAX_DELAY);
 8004a32:	4b0a      	ldr	r3, [pc, #40]	; (8004a5c <_Z13OD_NodeID_getv+0x30>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f04f 31ff 	mov.w	r1, #4294967295
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f00a fa35 	bl	800eeaa <osMutexAcquire>
    uint8_t value = OD_NodeID;
 8004a40:	4b07      	ldr	r3, [pc, #28]	; (8004a60 <_Z13OD_NodeID_getv+0x34>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeID);
 8004a46:	4b05      	ldr	r3, [pc, #20]	; (8004a5c <_Z13OD_NodeID_getv+0x30>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f00a fa78 	bl	800ef40 <osMutexRelease>
    return value;
 8004a50:	79fb      	ldrb	r3, [r7, #7]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	200006b0 	.word	0x200006b0
 8004a60:	20000635 	.word	0x20000635

08004a64 <_Z17OD_NodeStatus_getv>:
    osMutexRelease(mutex_OD_NodeID);
}
#endif

#ifndef OD_NodeStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeStatus_get() {
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeStatus, portMAX_DELAY);
 8004a6a:	4b0a      	ldr	r3, [pc, #40]	; (8004a94 <_Z17OD_NodeStatus_getv+0x30>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f04f 31ff 	mov.w	r1, #4294967295
 8004a72:	4618      	mov	r0, r3
 8004a74:	f00a fa19 	bl	800eeaa <osMutexAcquire>
    uint8_t value = OD_NodeStatus;
 8004a78:	4b07      	ldr	r3, [pc, #28]	; (8004a98 <_Z17OD_NodeStatus_getv+0x34>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeStatus);
 8004a7e:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <_Z17OD_NodeStatus_getv+0x30>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f00a fa5c 	bl	800ef40 <osMutexRelease>
    return value;
 8004a88:	79fb      	ldrb	r3, [r7, #7]
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	200006b4 	.word	0x200006b4
 8004a98:	20000636 	.word	0x20000636

08004a9c <_Z22OD_ProtocolVersion_getv>:
    osMutexRelease(mutex_OD_NodeStatus);
}
#endif

#ifndef OD_ProtocolVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_ProtocolVersion_get() {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ProtocolVersion, portMAX_DELAY);
 8004aa2:	4b0a      	ldr	r3, [pc, #40]	; (8004acc <_Z22OD_ProtocolVersion_getv+0x30>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f04f 31ff 	mov.w	r1, #4294967295
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f00a f9fd 	bl	800eeaa <osMutexAcquire>
    uint16_t value = OD_ProtocolVersion;
 8004ab0:	4b07      	ldr	r3, [pc, #28]	; (8004ad0 <_Z22OD_ProtocolVersion_getv+0x34>)
 8004ab2:	881b      	ldrh	r3, [r3, #0]
 8004ab4:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_ProtocolVersion);
 8004ab6:	4b05      	ldr	r3, [pc, #20]	; (8004acc <_Z22OD_ProtocolVersion_getv+0x30>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f00a fa40 	bl	800ef40 <osMutexRelease>
    return value;
 8004ac0:	88fb      	ldrh	r3, [r7, #6]
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	200006b8 	.word	0x200006b8
 8004ad0:	20000000 	.word	0x20000000

08004ad4 <_Z19OD_StackVersion_getv>:
    osMutexRelease(mutex_OD_ProtocolVersion);
}
#endif

#ifndef OD_StackVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_StackVersion_get() {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StackVersion, portMAX_DELAY);
 8004ada:	4b0a      	ldr	r3, [pc, #40]	; (8004b04 <_Z19OD_StackVersion_getv+0x30>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f04f 31ff 	mov.w	r1, #4294967295
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f00a f9e1 	bl	800eeaa <osMutexAcquire>
    uint16_t value = OD_StackVersion;
 8004ae8:	4b07      	ldr	r3, [pc, #28]	; (8004b08 <_Z19OD_StackVersion_getv+0x34>)
 8004aea:	881b      	ldrh	r3, [r3, #0]
 8004aec:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_StackVersion);
 8004aee:	4b05      	ldr	r3, [pc, #20]	; (8004b04 <_Z19OD_StackVersion_getv+0x30>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f00a fa24 	bl	800ef40 <osMutexRelease>
    return value;
 8004af8:	88fb      	ldrh	r3, [r7, #6]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3708      	adds	r7, #8
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	200006bc 	.word	0x200006bc
 8004b08:	20000638 	.word	0x20000638

08004b0c <_Z17OD_DbcVersion_getv>:
    osMutexRelease(mutex_OD_StackVersion);
}
#endif

#ifndef OD_DbcVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_DbcVersion_get() {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b082      	sub	sp, #8
 8004b10:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_DbcVersion, portMAX_DELAY);
 8004b12:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <_Z17OD_DbcVersion_getv+0x30>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f04f 31ff 	mov.w	r1, #4294967295
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f00a f9c5 	bl	800eeaa <osMutexAcquire>
    uint16_t value = OD_DbcVersion;
 8004b20:	4b07      	ldr	r3, [pc, #28]	; (8004b40 <_Z17OD_DbcVersion_getv+0x34>)
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_DbcVersion);
 8004b26:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <_Z17OD_DbcVersion_getv+0x30>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f00a fa08 	bl	800ef40 <osMutexRelease>
    return value;
 8004b30:	88fb      	ldrh	r3, [r7, #6]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	200006c0 	.word	0x200006c0
 8004b40:	2000063a 	.word	0x2000063a

08004b44 <_Z24OD_HeartbeatInterval_getv>:
    osMutexRelease(mutex_OD_DbcVersion);
}
#endif

#ifndef OD_HeartbeatInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_HeartbeatInterval_get() {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 8004b4a:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <_Z24OD_HeartbeatInterval_getv+0x30>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f04f 31ff 	mov.w	r1, #4294967295
 8004b52:	4618      	mov	r0, r3
 8004b54:	f00a f9a9 	bl	800eeaa <osMutexAcquire>
    uint16_t value = OD_HeartbeatInterval;
 8004b58:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <_Z24OD_HeartbeatInterval_getv+0x34>)
 8004b5a:	881b      	ldrh	r3, [r3, #0]
 8004b5c:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 8004b5e:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <_Z24OD_HeartbeatInterval_getv+0x30>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f00a f9ec 	bl	800ef40 <osMutexRelease>
    return value;
 8004b68:	88fb      	ldrh	r3, [r7, #6]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	200006c4 	.word	0x200006c4
 8004b78:	20000002 	.word	0x20000002

08004b7c <_Z24OD_HeartbeatInterval_sett>:
#endif
#ifndef OD_HeartbeatInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_HeartbeatInterval_set(const uint16_t value) {
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	4603      	mov	r3, r0
 8004b84:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 8004b86:	4b09      	ldr	r3, [pc, #36]	; (8004bac <_Z24OD_HeartbeatInterval_sett+0x30>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f04f 31ff 	mov.w	r1, #4294967295
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f00a f98b 	bl	800eeaa <osMutexAcquire>
    OD_HeartbeatInterval = value;
 8004b94:	4a06      	ldr	r2, [pc, #24]	; (8004bb0 <_Z24OD_HeartbeatInterval_sett+0x34>)
 8004b96:	88fb      	ldrh	r3, [r7, #6]
 8004b98:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 8004b9a:	4b04      	ldr	r3, [pc, #16]	; (8004bac <_Z24OD_HeartbeatInterval_sett+0x30>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f00a f9ce 	bl	800ef40 <osMutexRelease>
}
 8004ba4:	bf00      	nop
 8004ba6:	3708      	adds	r7, #8
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	200006c4 	.word	0x200006c4
 8004bb0:	20000002 	.word	0x20000002

08004bb4 <_Z21OD_SendOdOnBootup_getv>:
#endif

#ifndef OD_SendOdOnBootup_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SendOdOnBootup_get() {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 8004bba:	4b0a      	ldr	r3, [pc, #40]	; (8004be4 <_Z21OD_SendOdOnBootup_getv+0x30>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f04f 31ff 	mov.w	r1, #4294967295
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f00a f971 	bl	800eeaa <osMutexAcquire>
    uint8_t value = OD_SendOdOnBootup;
 8004bc8:	4b07      	ldr	r3, [pc, #28]	; (8004be8 <_Z21OD_SendOdOnBootup_getv+0x34>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 8004bce:	4b05      	ldr	r3, [pc, #20]	; (8004be4 <_Z21OD_SendOdOnBootup_getv+0x30>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f00a f9b4 	bl	800ef40 <osMutexRelease>
    return value;
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	200006c8 	.word	0x200006c8
 8004be8:	2000063c 	.word	0x2000063c

08004bec <_Z21OD_SendOdOnBootup_seth>:
#endif
#ifndef OD_SendOdOnBootup_SET_OVERWRITE
void WEAK_SYMBOL OD_SendOdOnBootup_set(const uint8_t value) {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 8004bf6:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <_Z21OD_SendOdOnBootup_seth+0x30>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f04f 31ff 	mov.w	r1, #4294967295
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f00a f953 	bl	800eeaa <osMutexAcquire>
    OD_SendOdOnBootup = value;
 8004c04:	4a06      	ldr	r2, [pc, #24]	; (8004c20 <_Z21OD_SendOdOnBootup_seth+0x34>)
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 8004c0a:	4b04      	ldr	r3, [pc, #16]	; (8004c1c <_Z21OD_SendOdOnBootup_seth+0x30>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f00a f996 	bl	800ef40 <osMutexRelease>
}
 8004c14:	bf00      	nop
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	200006c8 	.word	0x200006c8
 8004c20:	2000063c 	.word	0x2000063c

08004c24 <_Z26OD_OdEntrySendInterval_getv>:
#endif

#ifndef OD_OdEntrySendInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_OdEntrySendInterval_get() {
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8004c2a:	4b0a      	ldr	r3, [pc, #40]	; (8004c54 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f04f 31ff 	mov.w	r1, #4294967295
 8004c32:	4618      	mov	r0, r3
 8004c34:	f00a f939 	bl	800eeaa <osMutexAcquire>
    uint16_t value = OD_OdEntrySendInterval;
 8004c38:	4b07      	ldr	r3, [pc, #28]	; (8004c58 <_Z26OD_OdEntrySendInterval_getv+0x34>)
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f00a f97c 	bl	800ef40 <osMutexRelease>
    return value;
 8004c48:	88fb      	ldrh	r3, [r7, #6]
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	200006cc 	.word	0x200006cc
 8004c58:	20000004 	.word	0x20000004

08004c5c <_Z26OD_OdEntrySendInterval_sett>:
#endif
#ifndef OD_OdEntrySendInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_OdEntrySendInterval_set(const uint16_t value) {
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	4603      	mov	r3, r0
 8004c64:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8004c66:	4b09      	ldr	r3, [pc, #36]	; (8004c8c <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f04f 31ff 	mov.w	r1, #4294967295
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f00a f91b 	bl	800eeaa <osMutexAcquire>
    OD_OdEntrySendInterval = value;
 8004c74:	4a06      	ldr	r2, [pc, #24]	; (8004c90 <_Z26OD_OdEntrySendInterval_sett+0x34>)
 8004c76:	88fb      	ldrh	r3, [r7, #6]
 8004c78:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 8004c7a:	4b04      	ldr	r3, [pc, #16]	; (8004c8c <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f00a f95e 	bl	800ef40 <osMutexRelease>
}
 8004c84:	bf00      	nop
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	200006cc 	.word	0x200006cc
 8004c90:	20000004 	.word	0x20000004

08004c94 <_Z15OD_CpuUsage_getv>:
#endif

#ifndef OD_CpuUsage_GET_OVERWRITE
float WEAK_SYMBOL OD_CpuUsage_get() {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 8004c9a:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <_Z15OD_CpuUsage_getv+0x34>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f04f 31ff 	mov.w	r1, #4294967295
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f00a f901 	bl	800eeaa <osMutexAcquire>
    float value = OD_CpuUsage;
 8004ca8:	4b08      	ldr	r3, [pc, #32]	; (8004ccc <_Z15OD_CpuUsage_getv+0x38>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CpuUsage);
 8004cae:	4b06      	ldr	r3, [pc, #24]	; (8004cc8 <_Z15OD_CpuUsage_getv+0x34>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f00a f944 	bl	800ef40 <osMutexRelease>
    return value;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	ee07 3a90 	vmov	s15, r3
}
 8004cbe:	eeb0 0a67 	vmov.f32	s0, s15
 8004cc2:	3708      	adds	r7, #8
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	200006d0 	.word	0x200006d0
 8004ccc:	20000640 	.word	0x20000640

08004cd0 <_Z15OD_CpuUsage_setf>:
#endif
#ifndef OD_CpuUsage_SET_OVERWRITE
void WEAK_SYMBOL OD_CpuUsage_set(const float value) {
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 8004cda:	4b09      	ldr	r3, [pc, #36]	; (8004d00 <_Z15OD_CpuUsage_setf+0x30>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f04f 31ff 	mov.w	r1, #4294967295
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f00a f8e1 	bl	800eeaa <osMutexAcquire>
    OD_CpuUsage = value;
 8004ce8:	4a06      	ldr	r2, [pc, #24]	; (8004d04 <_Z15OD_CpuUsage_setf+0x34>)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_CpuUsage);
 8004cee:	4b04      	ldr	r3, [pc, #16]	; (8004d00 <_Z15OD_CpuUsage_setf+0x30>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f00a f924 	bl	800ef40 <osMutexRelease>
}
 8004cf8:	bf00      	nop
 8004cfa:	3708      	adds	r7, #8
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	200006d0 	.word	0x200006d0
 8004d04:	20000640 	.word	0x20000640

08004d08 <_Z14OD_MemFree_getv>:
#endif

#ifndef OD_MemFree_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_MemFree_get() {
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 8004d0e:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <_Z14OD_MemFree_getv+0x30>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f04f 31ff 	mov.w	r1, #4294967295
 8004d16:	4618      	mov	r0, r3
 8004d18:	f00a f8c7 	bl	800eeaa <osMutexAcquire>
    uint32_t value = OD_MemFree;
 8004d1c:	4b07      	ldr	r3, [pc, #28]	; (8004d3c <_Z14OD_MemFree_getv+0x34>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_MemFree);
 8004d22:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <_Z14OD_MemFree_getv+0x30>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f00a f90a 	bl	800ef40 <osMutexRelease>
    return value;
 8004d2c:	687b      	ldr	r3, [r7, #4]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	200006d4 	.word	0x200006d4
 8004d3c:	20000644 	.word	0x20000644

08004d40 <_Z14OD_MemFree_setm>:
#endif
#ifndef OD_MemFree_SET_OVERWRITE
void WEAK_SYMBOL OD_MemFree_set(const uint32_t value) {
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 8004d48:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <_Z14OD_MemFree_setm+0x30>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8004d50:	4618      	mov	r0, r3
 8004d52:	f00a f8aa 	bl	800eeaa <osMutexAcquire>
    OD_MemFree = value;
 8004d56:	4a07      	ldr	r2, [pc, #28]	; (8004d74 <_Z14OD_MemFree_setm+0x34>)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_MemFree);
 8004d5c:	4b04      	ldr	r3, [pc, #16]	; (8004d70 <_Z14OD_MemFree_setm+0x30>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f00a f8ed 	bl	800ef40 <osMutexRelease>
}
 8004d66:	bf00      	nop
 8004d68:	3708      	adds	r7, #8
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	200006d4 	.word	0x200006d4
 8004d74:	20000644 	.word	0x20000644

08004d78 <_Z16OD_BoardTemp_getv>:
#endif

#ifndef OD_BoardTemp_GET_OVERWRITE
float WEAK_SYMBOL OD_BoardTemp_get() {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 8004d7e:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <_Z16OD_BoardTemp_getv+0x34>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f04f 31ff 	mov.w	r1, #4294967295
 8004d86:	4618      	mov	r0, r3
 8004d88:	f00a f88f 	bl	800eeaa <osMutexAcquire>
    float value = OD_BoardTemp;
 8004d8c:	4b08      	ldr	r3, [pc, #32]	; (8004db0 <_Z16OD_BoardTemp_getv+0x38>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BoardTemp);
 8004d92:	4b06      	ldr	r3, [pc, #24]	; (8004dac <_Z16OD_BoardTemp_getv+0x34>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f00a f8d2 	bl	800ef40 <osMutexRelease>
    return value;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	ee07 3a90 	vmov	s15, r3
}
 8004da2:	eeb0 0a67 	vmov.f32	s0, s15
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	200006d8 	.word	0x200006d8
 8004db0:	20000648 	.word	0x20000648

08004db4 <_Z16OD_BoardTemp_setf>:
#endif
#ifndef OD_BoardTemp_SET_OVERWRITE
void WEAK_SYMBOL OD_BoardTemp_set(const float value) {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 8004dbe:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <_Z16OD_BoardTemp_setf+0x30>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f04f 31ff 	mov.w	r1, #4294967295
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f00a f86f 	bl	800eeaa <osMutexAcquire>
    OD_BoardTemp = value;
 8004dcc:	4a06      	ldr	r2, [pc, #24]	; (8004de8 <_Z16OD_BoardTemp_setf+0x34>)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_BoardTemp);
 8004dd2:	4b04      	ldr	r3, [pc, #16]	; (8004de4 <_Z16OD_BoardTemp_setf+0x30>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f00a f8b2 	bl	800ef40 <osMutexRelease>
}
 8004ddc:	bf00      	nop
 8004dde:	3708      	adds	r7, #8
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	200006d8 	.word	0x200006d8
 8004de8:	20000648 	.word	0x20000648

08004dec <_Z19OD_InputVoltage_getv>:
#endif

#ifndef OD_InputVoltage_GET_OVERWRITE
float WEAK_SYMBOL OD_InputVoltage_get() {
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 8004df2:	4b0b      	ldr	r3, [pc, #44]	; (8004e20 <_Z19OD_InputVoltage_getv+0x34>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f04f 31ff 	mov.w	r1, #4294967295
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f00a f855 	bl	800eeaa <osMutexAcquire>
    float value = OD_InputVoltage;
 8004e00:	4b08      	ldr	r3, [pc, #32]	; (8004e24 <_Z19OD_InputVoltage_getv+0x38>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_InputVoltage);
 8004e06:	4b06      	ldr	r3, [pc, #24]	; (8004e20 <_Z19OD_InputVoltage_getv+0x34>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f00a f898 	bl	800ef40 <osMutexRelease>
    return value;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	ee07 3a90 	vmov	s15, r3
}
 8004e16:	eeb0 0a67 	vmov.f32	s0, s15
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	200006dc 	.word	0x200006dc
 8004e24:	2000064c 	.word	0x2000064c

08004e28 <_Z19OD_InputVoltage_setf>:
#endif
#ifndef OD_InputVoltage_SET_OVERWRITE
void WEAK_SYMBOL OD_InputVoltage_set(const float value) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 8004e32:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <_Z19OD_InputVoltage_setf+0x30>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f04f 31ff 	mov.w	r1, #4294967295
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f00a f835 	bl	800eeaa <osMutexAcquire>
    OD_InputVoltage = value;
 8004e40:	4a06      	ldr	r2, [pc, #24]	; (8004e5c <_Z19OD_InputVoltage_setf+0x34>)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_InputVoltage);
 8004e46:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <_Z19OD_InputVoltage_setf+0x30>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f00a f878 	bl	800ef40 <osMutexRelease>
}
 8004e50:	bf00      	nop
 8004e52:	3708      	adds	r7, #8
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	200006dc 	.word	0x200006dc
 8004e5c:	2000064c 	.word	0x2000064c

08004e60 <_Z14OD_runtime_getv>:
#endif

#ifndef OD_runtime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_runtime_get() {
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_runtime, portMAX_DELAY);
 8004e66:	4b0a      	ldr	r3, [pc, #40]	; (8004e90 <_Z14OD_runtime_getv+0x30>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f04f 31ff 	mov.w	r1, #4294967295
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f00a f81b 	bl	800eeaa <osMutexAcquire>
    uint32_t value = OD_runtime;
 8004e74:	4b07      	ldr	r3, [pc, #28]	; (8004e94 <_Z14OD_runtime_getv+0x34>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_runtime);
 8004e7a:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <_Z14OD_runtime_getv+0x30>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f00a f85e 	bl	800ef40 <osMutexRelease>
    return value;
 8004e84:	687b      	ldr	r3, [r7, #4]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	200006e0 	.word	0x200006e0
 8004e94:	20000650 	.word	0x20000650

08004e98 <_Z12OD_SdcIn_getv>:
    osMutexRelease(mutex_OD_runtime);
}
#endif

#ifndef OD_SdcIn_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcIn_get() {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcIn, portMAX_DELAY);
 8004e9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <_Z12OD_SdcIn_getv+0x30>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f04f 31ff 	mov.w	r1, #4294967295
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f009 ffff 	bl	800eeaa <osMutexAcquire>
    uint8_t value = OD_SdcIn;
 8004eac:	4b07      	ldr	r3, [pc, #28]	; (8004ecc <_Z12OD_SdcIn_getv+0x34>)
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcIn);
 8004eb2:	4b05      	ldr	r3, [pc, #20]	; (8004ec8 <_Z12OD_SdcIn_getv+0x30>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f00a f842 	bl	800ef40 <osMutexRelease>
    return value;
 8004ebc:	79fb      	ldrb	r3, [r7, #7]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3708      	adds	r7, #8
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	200006e4 	.word	0x200006e4
 8004ecc:	20000654 	.word	0x20000654

08004ed0 <_Z13OD_SdcOut_getv>:
    osMutexRelease(mutex_OD_SdcIn);
}
#endif

#ifndef OD_SdcOut_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcOut_get() {
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcOut, portMAX_DELAY);
 8004ed6:	4b0a      	ldr	r3, [pc, #40]	; (8004f00 <_Z13OD_SdcOut_getv+0x30>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f04f 31ff 	mov.w	r1, #4294967295
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f009 ffe3 	bl	800eeaa <osMutexAcquire>
    uint8_t value = OD_SdcOut;
 8004ee4:	4b07      	ldr	r3, [pc, #28]	; (8004f04 <_Z13OD_SdcOut_getv+0x34>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcOut);
 8004eea:	4b05      	ldr	r3, [pc, #20]	; (8004f00 <_Z13OD_SdcOut_getv+0x30>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f00a f826 	bl	800ef40 <osMutexRelease>
    return value;
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	200006e8 	.word	0x200006e8
 8004f04:	20000655 	.word	0x20000655

08004f08 <_Z15OD_ChipUID1_getv>:
    osMutexRelease(mutex_OD_SdcOut);
}
#endif

#ifndef OD_ChipUID1_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID1_get() {
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID1, portMAX_DELAY);
 8004f0e:	4b0c      	ldr	r3, [pc, #48]	; (8004f40 <_Z15OD_ChipUID1_getv+0x38>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f04f 31ff 	mov.w	r1, #4294967295
 8004f16:	4618      	mov	r0, r3
 8004f18:	f009 ffc7 	bl	800eeaa <osMutexAcquire>
    uint64_t value = OD_ChipUID1;
 8004f1c:	4b09      	ldr	r3, [pc, #36]	; (8004f44 <_Z15OD_ChipUID1_getv+0x3c>)
 8004f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f22:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID1);
 8004f26:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <_Z15OD_ChipUID1_getv+0x38>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f00a f808 	bl	800ef40 <osMutexRelease>
    return value;
 8004f30:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004f34:	4610      	mov	r0, r2
 8004f36:	4619      	mov	r1, r3
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	200006ec 	.word	0x200006ec
 8004f44:	20000658 	.word	0x20000658

08004f48 <_Z15OD_ChipUID2_getv>:
    osMutexRelease(mutex_OD_ChipUID1);
}
#endif

#ifndef OD_ChipUID2_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID2_get() {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID2, portMAX_DELAY);
 8004f4e:	4b0c      	ldr	r3, [pc, #48]	; (8004f80 <_Z15OD_ChipUID2_getv+0x38>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f04f 31ff 	mov.w	r1, #4294967295
 8004f56:	4618      	mov	r0, r3
 8004f58:	f009 ffa7 	bl	800eeaa <osMutexAcquire>
    uint64_t value = OD_ChipUID2;
 8004f5c:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <_Z15OD_ChipUID2_getv+0x3c>)
 8004f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f62:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID2);
 8004f66:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <_Z15OD_ChipUID2_getv+0x38>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f009 ffe8 	bl	800ef40 <osMutexRelease>
    return value;
 8004f70:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004f74:	4610      	mov	r0, r2
 8004f76:	4619      	mov	r1, r3
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	200006f0 	.word	0x200006f0
 8004f84:	20000660 	.word	0x20000660

08004f88 <_Z16OD_BuildDate_getv>:
    osMutexRelease(mutex_OD_ChipUID2);
}
#endif

#ifndef OD_BuildDate_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildDate_get() {
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildDate, portMAX_DELAY);
 8004f8e:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <_Z16OD_BuildDate_getv+0x30>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f04f 31ff 	mov.w	r1, #4294967295
 8004f96:	4618      	mov	r0, r3
 8004f98:	f009 ff87 	bl	800eeaa <osMutexAcquire>
    uint32_t value = OD_BuildDate;
 8004f9c:	4b07      	ldr	r3, [pc, #28]	; (8004fbc <_Z16OD_BuildDate_getv+0x34>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildDate);
 8004fa2:	4b05      	ldr	r3, [pc, #20]	; (8004fb8 <_Z16OD_BuildDate_getv+0x30>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f009 ffca 	bl	800ef40 <osMutexRelease>
    return value;
 8004fac:	687b      	ldr	r3, [r7, #4]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	200006f4 	.word	0x200006f4
 8004fbc:	20000668 	.word	0x20000668

08004fc0 <_Z16OD_BuildTime_getv>:
    osMutexRelease(mutex_OD_BuildDate);
}
#endif

#ifndef OD_BuildTime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildTime_get() {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildTime, portMAX_DELAY);
 8004fc6:	4b0a      	ldr	r3, [pc, #40]	; (8004ff0 <_Z16OD_BuildTime_getv+0x30>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f04f 31ff 	mov.w	r1, #4294967295
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f009 ff6b 	bl	800eeaa <osMutexAcquire>
    uint32_t value = OD_BuildTime;
 8004fd4:	4b07      	ldr	r3, [pc, #28]	; (8004ff4 <_Z16OD_BuildTime_getv+0x34>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildTime);
 8004fda:	4b05      	ldr	r3, [pc, #20]	; (8004ff0 <_Z16OD_BuildTime_getv+0x30>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f009 ffae 	bl	800ef40 <osMutexRelease>
    return value;
 8004fe4:	687b      	ldr	r3, [r7, #4]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	200006f8 	.word	0x200006f8
 8004ff4:	2000066c 	.word	0x2000066c

08004ff8 <_Z20OD_CAN1_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_BuildTime);
}
#endif

#ifndef OD_CAN1_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_TxErrCnt_get() {
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_TxErrCnt, portMAX_DELAY);
 8004ffe:	4b0a      	ldr	r3, [pc, #40]	; (8005028 <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f04f 31ff 	mov.w	r1, #4294967295
 8005006:	4618      	mov	r0, r3
 8005008:	f009 ff4f 	bl	800eeaa <osMutexAcquire>
    uint8_t value = OD_CAN1_TxErrCnt;
 800500c:	4b07      	ldr	r3, [pc, #28]	; (800502c <_Z20OD_CAN1_TxErrCnt_getv+0x34>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
 8005012:	4b05      	ldr	r3, [pc, #20]	; (8005028 <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f009 ff92 	bl	800ef40 <osMutexRelease>
    return value;
 800501c:	79fb      	ldrb	r3, [r7, #7]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	200006fc 	.word	0x200006fc
 800502c:	20000670 	.word	0x20000670

08005030 <_Z20OD_CAN1_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
}
#endif

#ifndef OD_CAN1_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_RxErrCnt_get() {
 8005030:	b580      	push	{r7, lr}
 8005032:	b082      	sub	sp, #8
 8005034:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_RxErrCnt, portMAX_DELAY);
 8005036:	4b0a      	ldr	r3, [pc, #40]	; (8005060 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f04f 31ff 	mov.w	r1, #4294967295
 800503e:	4618      	mov	r0, r3
 8005040:	f009 ff33 	bl	800eeaa <osMutexAcquire>
    uint8_t value = OD_CAN1_RxErrCnt;
 8005044:	4b07      	ldr	r3, [pc, #28]	; (8005064 <_Z20OD_CAN1_RxErrCnt_getv+0x34>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
 800504a:	4b05      	ldr	r3, [pc, #20]	; (8005060 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4618      	mov	r0, r3
 8005050:	f009 ff76 	bl	800ef40 <osMutexRelease>
    return value;
 8005054:	79fb      	ldrb	r3, [r7, #7]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3708      	adds	r7, #8
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000700 	.word	0x20000700
 8005064:	20000671 	.word	0x20000671

08005068 <_Z25OD_CAN1_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
}
#endif

#ifndef OD_CAN1_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_lastErrorCode_get() {
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_lastErrorCode, portMAX_DELAY);
 800506e:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f04f 31ff 	mov.w	r1, #4294967295
 8005076:	4618      	mov	r0, r3
 8005078:	f009 ff17 	bl	800eeaa <osMutexAcquire>
    uint32_t value = OD_CAN1_lastErrorCode;
 800507c:	4b07      	ldr	r3, [pc, #28]	; (800509c <_Z25OD_CAN1_lastErrorCode_getv+0x34>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
 8005082:	4b05      	ldr	r3, [pc, #20]	; (8005098 <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f009 ff5a 	bl	800ef40 <osMutexRelease>
    return value;
 800508c:	687b      	ldr	r3, [r7, #4]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3708      	adds	r7, #8
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20000704 	.word	0x20000704
 800509c:	20000674 	.word	0x20000674

080050a0 <_Z26OD_CAN1_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
}
#endif

#ifndef OD_CAN1_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_autoErrorReset_get() {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 80050a6:	4b0a      	ldr	r3, [pc, #40]	; (80050d0 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f04f 31ff 	mov.w	r1, #4294967295
 80050ae:	4618      	mov	r0, r3
 80050b0:	f009 fefb 	bl	800eeaa <osMutexAcquire>
    uint8_t value = OD_CAN1_autoErrorReset;
 80050b4:	4b07      	ldr	r3, [pc, #28]	; (80050d4 <_Z26OD_CAN1_autoErrorReset_getv+0x34>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 80050ba:	4b05      	ldr	r3, [pc, #20]	; (80050d0 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4618      	mov	r0, r3
 80050c0:	f009 ff3e 	bl	800ef40 <osMutexRelease>
    return value;
 80050c4:	79fb      	ldrb	r3, [r7, #7]
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	20000708 	.word	0x20000708
 80050d4:	20000006 	.word	0x20000006

080050d8 <_Z26OD_CAN1_autoErrorReset_seth>:
#endif
#ifndef OD_CAN1_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_autoErrorReset_set(const uint8_t value) {
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	4603      	mov	r3, r0
 80050e0:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 80050e2:	4b09      	ldr	r3, [pc, #36]	; (8005108 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f04f 31ff 	mov.w	r1, #4294967295
 80050ea:	4618      	mov	r0, r3
 80050ec:	f009 fedd 	bl	800eeaa <osMutexAcquire>
    OD_CAN1_autoErrorReset = value;
 80050f0:	4a06      	ldr	r2, [pc, #24]	; (800510c <_Z26OD_CAN1_autoErrorReset_seth+0x34>)
 80050f2:	79fb      	ldrb	r3, [r7, #7]
 80050f4:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 80050f6:	4b04      	ldr	r3, [pc, #16]	; (8005108 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f009 ff20 	bl	800ef40 <osMutexRelease>
}
 8005100:	bf00      	nop
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	20000708 	.word	0x20000708
 800510c:	20000006 	.word	0x20000006

08005110 <_Z20OD_CAN1_Baudrate_getv>:
#endif

#ifndef OD_CAN1_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN1_Baudrate_get() {
 8005110:	b580      	push	{r7, lr}
 8005112:	b082      	sub	sp, #8
 8005114:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8005116:	4b0a      	ldr	r3, [pc, #40]	; (8005140 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f04f 31ff 	mov.w	r1, #4294967295
 800511e:	4618      	mov	r0, r3
 8005120:	f009 fec3 	bl	800eeaa <osMutexAcquire>
    uint16_t value = OD_CAN1_Baudrate;
 8005124:	4b07      	ldr	r3, [pc, #28]	; (8005144 <_Z20OD_CAN1_Baudrate_getv+0x34>)
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 800512a:	4b05      	ldr	r3, [pc, #20]	; (8005140 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4618      	mov	r0, r3
 8005130:	f009 ff06 	bl	800ef40 <osMutexRelease>
    return value;
 8005134:	88fb      	ldrh	r3, [r7, #6]
}
 8005136:	4618      	mov	r0, r3
 8005138:	3708      	adds	r7, #8
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	2000070c 	.word	0x2000070c
 8005144:	20000008 	.word	0x20000008

08005148 <_Z20OD_CAN1_Baudrate_sett>:
#endif
#ifndef OD_CAN1_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_Baudrate_set(const uint16_t value) {
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	4603      	mov	r3, r0
 8005150:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8005152:	4b09      	ldr	r3, [pc, #36]	; (8005178 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f04f 31ff 	mov.w	r1, #4294967295
 800515a:	4618      	mov	r0, r3
 800515c:	f009 fea5 	bl	800eeaa <osMutexAcquire>
    OD_CAN1_Baudrate = value;
 8005160:	4a06      	ldr	r2, [pc, #24]	; (800517c <_Z20OD_CAN1_Baudrate_sett+0x34>)
 8005162:	88fb      	ldrh	r3, [r7, #6]
 8005164:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 8005166:	4b04      	ldr	r3, [pc, #16]	; (8005178 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f009 fee8 	bl	800ef40 <osMutexRelease>
}
 8005170:	bf00      	nop
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	2000070c 	.word	0x2000070c
 800517c:	20000008 	.word	0x20000008

08005180 <_Z18OD_CAN1_Status_getv>:
#endif

#ifndef OD_CAN1_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_Status_get() {
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Status, portMAX_DELAY);
 8005186:	4b0a      	ldr	r3, [pc, #40]	; (80051b0 <_Z18OD_CAN1_Status_getv+0x30>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f04f 31ff 	mov.w	r1, #4294967295
 800518e:	4618      	mov	r0, r3
 8005190:	f009 fe8b 	bl	800eeaa <osMutexAcquire>
    uint8_t value = OD_CAN1_Status;
 8005194:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <_Z18OD_CAN1_Status_getv+0x34>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_Status);
 800519a:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <_Z18OD_CAN1_Status_getv+0x30>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4618      	mov	r0, r3
 80051a0:	f009 fece 	bl	800ef40 <osMutexRelease>
    return value;
 80051a4:	79fb      	ldrb	r3, [r7, #7]
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	20000710 	.word	0x20000710
 80051b4:	20000678 	.word	0x20000678

080051b8 <_Z31OD_CAN1_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_Status);
}
#endif

#ifndef OD_CAN1_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DiscardedTxMessages_get() {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DiscardedTxMessages, portMAX_DELAY);
 80051be:	4b0a      	ldr	r3, [pc, #40]	; (80051e8 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f04f 31ff 	mov.w	r1, #4294967295
 80051c6:	4618      	mov	r0, r3
 80051c8:	f009 fe6f 	bl	800eeaa <osMutexAcquire>
    uint32_t value = OD_CAN1_DiscardedTxMessages;
 80051cc:	4b07      	ldr	r3, [pc, #28]	; (80051ec <_Z31OD_CAN1_DiscardedTxMessages_getv+0x34>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
 80051d2:	4b05      	ldr	r3, [pc, #20]	; (80051e8 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f009 feb2 	bl	800ef40 <osMutexRelease>
    return value;
 80051dc:	687b      	ldr	r3, [r7, #4]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20000714 	.word	0x20000714
 80051ec:	2000067c 	.word	0x2000067c

080051f0 <_Z23OD_CAN1_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN1_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_ErrorStatus_get() {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_ErrorStatus, portMAX_DELAY);
 80051f6:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f04f 31ff 	mov.w	r1, #4294967295
 80051fe:	4618      	mov	r0, r3
 8005200:	f009 fe53 	bl	800eeaa <osMutexAcquire>
    uint8_t value = OD_CAN1_ErrorStatus;
 8005204:	4b07      	ldr	r3, [pc, #28]	; (8005224 <_Z23OD_CAN1_ErrorStatus_getv+0x34>)
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f009 fe96 	bl	800ef40 <osMutexRelease>
    return value;
 8005214:	79fb      	ldrb	r3, [r7, #7]
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20000718 	.word	0x20000718
 8005224:	20000680 	.word	0x20000680

08005228 <_Z29OD_CAN1_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
}
#endif

#ifndef OD_CAN1_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DelayedTxMessages_get() {
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DelayedTxMessages, portMAX_DELAY);
 800522e:	4b0a      	ldr	r3, [pc, #40]	; (8005258 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f04f 31ff 	mov.w	r1, #4294967295
 8005236:	4618      	mov	r0, r3
 8005238:	f009 fe37 	bl	800eeaa <osMutexAcquire>
    uint32_t value = OD_CAN1_DelayedTxMessages;
 800523c:	4b07      	ldr	r3, [pc, #28]	; (800525c <_Z29OD_CAN1_DelayedTxMessages_getv+0x34>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
 8005242:	4b05      	ldr	r3, [pc, #20]	; (8005258 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f009 fe7a 	bl	800ef40 <osMutexRelease>
    return value;
 800524c:	687b      	ldr	r3, [r7, #4]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3708      	adds	r7, #8
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	2000071c 	.word	0x2000071c
 800525c:	20000684 	.word	0x20000684

08005260 <_Z20OD_CAN2_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
}
#endif

#ifndef OD_CAN2_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_TxErrCnt_get() {
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_TxErrCnt, portMAX_DELAY);
 8005266:	4b0a      	ldr	r3, [pc, #40]	; (8005290 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f04f 31ff 	mov.w	r1, #4294967295
 800526e:	4618      	mov	r0, r3
 8005270:	f009 fe1b 	bl	800eeaa <osMutexAcquire>
    uint8_t value = OD_CAN2_TxErrCnt;
 8005274:	4b07      	ldr	r3, [pc, #28]	; (8005294 <_Z20OD_CAN2_TxErrCnt_getv+0x34>)
 8005276:	781b      	ldrb	r3, [r3, #0]
 8005278:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
 800527a:	4b05      	ldr	r3, [pc, #20]	; (8005290 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f009 fe5e 	bl	800ef40 <osMutexRelease>
    return value;
 8005284:	79fb      	ldrb	r3, [r7, #7]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	20000720 	.word	0x20000720
 8005294:	20000688 	.word	0x20000688

08005298 <_Z20OD_CAN2_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
}
#endif

#ifndef OD_CAN2_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_RxErrCnt_get() {
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_RxErrCnt, portMAX_DELAY);
 800529e:	4b0a      	ldr	r3, [pc, #40]	; (80052c8 <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f04f 31ff 	mov.w	r1, #4294967295
 80052a6:	4618      	mov	r0, r3
 80052a8:	f009 fdff 	bl	800eeaa <osMutexAcquire>
    uint8_t value = OD_CAN2_RxErrCnt;
 80052ac:	4b07      	ldr	r3, [pc, #28]	; (80052cc <_Z20OD_CAN2_RxErrCnt_getv+0x34>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
 80052b2:	4b05      	ldr	r3, [pc, #20]	; (80052c8 <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f009 fe42 	bl	800ef40 <osMutexRelease>
    return value;
 80052bc:	79fb      	ldrb	r3, [r7, #7]
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	20000724 	.word	0x20000724
 80052cc:	20000689 	.word	0x20000689

080052d0 <_Z25OD_CAN2_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
}
#endif

#ifndef OD_CAN2_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_lastErrorCode_get() {
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_lastErrorCode, portMAX_DELAY);
 80052d6:	4b0a      	ldr	r3, [pc, #40]	; (8005300 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f04f 31ff 	mov.w	r1, #4294967295
 80052de:	4618      	mov	r0, r3
 80052e0:	f009 fde3 	bl	800eeaa <osMutexAcquire>
    uint32_t value = OD_CAN2_lastErrorCode;
 80052e4:	4b07      	ldr	r3, [pc, #28]	; (8005304 <_Z25OD_CAN2_lastErrorCode_getv+0x34>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
 80052ea:	4b05      	ldr	r3, [pc, #20]	; (8005300 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4618      	mov	r0, r3
 80052f0:	f009 fe26 	bl	800ef40 <osMutexRelease>
    return value;
 80052f4:	687b      	ldr	r3, [r7, #4]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	20000728 	.word	0x20000728
 8005304:	2000068c 	.word	0x2000068c

08005308 <_Z26OD_CAN2_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
}
#endif

#ifndef OD_CAN2_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_autoErrorReset_get() {
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 800530e:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f04f 31ff 	mov.w	r1, #4294967295
 8005316:	4618      	mov	r0, r3
 8005318:	f009 fdc7 	bl	800eeaa <osMutexAcquire>
    uint8_t value = OD_CAN2_autoErrorReset;
 800531c:	4b07      	ldr	r3, [pc, #28]	; (800533c <_Z26OD_CAN2_autoErrorReset_getv+0x34>)
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 8005322:	4b05      	ldr	r3, [pc, #20]	; (8005338 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f009 fe0a 	bl	800ef40 <osMutexRelease>
    return value;
 800532c:	79fb      	ldrb	r3, [r7, #7]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	2000072c 	.word	0x2000072c
 800533c:	2000000a 	.word	0x2000000a

08005340 <_Z26OD_CAN2_autoErrorReset_seth>:
#endif
#ifndef OD_CAN2_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_autoErrorReset_set(const uint8_t value) {
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	4603      	mov	r3, r0
 8005348:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 800534a:	4b09      	ldr	r3, [pc, #36]	; (8005370 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f04f 31ff 	mov.w	r1, #4294967295
 8005352:	4618      	mov	r0, r3
 8005354:	f009 fda9 	bl	800eeaa <osMutexAcquire>
    OD_CAN2_autoErrorReset = value;
 8005358:	4a06      	ldr	r2, [pc, #24]	; (8005374 <_Z26OD_CAN2_autoErrorReset_seth+0x34>)
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 800535e:	4b04      	ldr	r3, [pc, #16]	; (8005370 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4618      	mov	r0, r3
 8005364:	f009 fdec 	bl	800ef40 <osMutexRelease>
}
 8005368:	bf00      	nop
 800536a:	3708      	adds	r7, #8
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	2000072c 	.word	0x2000072c
 8005374:	2000000a 	.word	0x2000000a

08005378 <_Z20OD_CAN2_Baudrate_getv>:
#endif

#ifndef OD_CAN2_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN2_Baudrate_get() {
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 800537e:	4b0a      	ldr	r3, [pc, #40]	; (80053a8 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f04f 31ff 	mov.w	r1, #4294967295
 8005386:	4618      	mov	r0, r3
 8005388:	f009 fd8f 	bl	800eeaa <osMutexAcquire>
    uint16_t value = OD_CAN2_Baudrate;
 800538c:	4b07      	ldr	r3, [pc, #28]	; (80053ac <_Z20OD_CAN2_Baudrate_getv+0x34>)
 800538e:	881b      	ldrh	r3, [r3, #0]
 8005390:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 8005392:	4b05      	ldr	r3, [pc, #20]	; (80053a8 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4618      	mov	r0, r3
 8005398:	f009 fdd2 	bl	800ef40 <osMutexRelease>
    return value;
 800539c:	88fb      	ldrh	r3, [r7, #6]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3708      	adds	r7, #8
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	20000730 	.word	0x20000730
 80053ac:	2000000c 	.word	0x2000000c

080053b0 <_Z20OD_CAN2_Baudrate_sett>:
#endif
#ifndef OD_CAN2_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_Baudrate_set(const uint16_t value) {
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	4603      	mov	r3, r0
 80053b8:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 80053ba:	4b09      	ldr	r3, [pc, #36]	; (80053e0 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f04f 31ff 	mov.w	r1, #4294967295
 80053c2:	4618      	mov	r0, r3
 80053c4:	f009 fd71 	bl	800eeaa <osMutexAcquire>
    OD_CAN2_Baudrate = value;
 80053c8:	4a06      	ldr	r2, [pc, #24]	; (80053e4 <_Z20OD_CAN2_Baudrate_sett+0x34>)
 80053ca:	88fb      	ldrh	r3, [r7, #6]
 80053cc:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 80053ce:	4b04      	ldr	r3, [pc, #16]	; (80053e0 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f009 fdb4 	bl	800ef40 <osMutexRelease>
}
 80053d8:	bf00      	nop
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	20000730 	.word	0x20000730
 80053e4:	2000000c 	.word	0x2000000c

080053e8 <_Z18OD_CAN2_Status_getv>:
#endif

#ifndef OD_CAN2_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_Status_get() {
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Status, portMAX_DELAY);
 80053ee:	4b0a      	ldr	r3, [pc, #40]	; (8005418 <_Z18OD_CAN2_Status_getv+0x30>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f04f 31ff 	mov.w	r1, #4294967295
 80053f6:	4618      	mov	r0, r3
 80053f8:	f009 fd57 	bl	800eeaa <osMutexAcquire>
    uint8_t value = OD_CAN2_Status;
 80053fc:	4b07      	ldr	r3, [pc, #28]	; (800541c <_Z18OD_CAN2_Status_getv+0x34>)
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_Status);
 8005402:	4b05      	ldr	r3, [pc, #20]	; (8005418 <_Z18OD_CAN2_Status_getv+0x30>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f009 fd9a 	bl	800ef40 <osMutexRelease>
    return value;
 800540c:	79fb      	ldrb	r3, [r7, #7]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3708      	adds	r7, #8
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	20000734 	.word	0x20000734
 800541c:	20000690 	.word	0x20000690

08005420 <_Z31OD_CAN2_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_Status);
}
#endif

#ifndef OD_CAN2_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DiscardedTxMessages_get() {
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DiscardedTxMessages, portMAX_DELAY);
 8005426:	4b0a      	ldr	r3, [pc, #40]	; (8005450 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f04f 31ff 	mov.w	r1, #4294967295
 800542e:	4618      	mov	r0, r3
 8005430:	f009 fd3b 	bl	800eeaa <osMutexAcquire>
    uint32_t value = OD_CAN2_DiscardedTxMessages;
 8005434:	4b07      	ldr	r3, [pc, #28]	; (8005454 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x34>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
 800543a:	4b05      	ldr	r3, [pc, #20]	; (8005450 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4618      	mov	r0, r3
 8005440:	f009 fd7e 	bl	800ef40 <osMutexRelease>
    return value;
 8005444:	687b      	ldr	r3, [r7, #4]
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	20000738 	.word	0x20000738
 8005454:	20000694 	.word	0x20000694

08005458 <_Z23OD_CAN2_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN2_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_ErrorStatus_get() {
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_ErrorStatus, portMAX_DELAY);
 800545e:	4b0a      	ldr	r3, [pc, #40]	; (8005488 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f04f 31ff 	mov.w	r1, #4294967295
 8005466:	4618      	mov	r0, r3
 8005468:	f009 fd1f 	bl	800eeaa <osMutexAcquire>
    uint8_t value = OD_CAN2_ErrorStatus;
 800546c:	4b07      	ldr	r3, [pc, #28]	; (800548c <_Z23OD_CAN2_ErrorStatus_getv+0x34>)
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
 8005472:	4b05      	ldr	r3, [pc, #20]	; (8005488 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4618      	mov	r0, r3
 8005478:	f009 fd62 	bl	800ef40 <osMutexRelease>
    return value;
 800547c:	79fb      	ldrb	r3, [r7, #7]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	2000073c 	.word	0x2000073c
 800548c:	20000698 	.word	0x20000698

08005490 <_Z29OD_CAN2_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
}
#endif

#ifndef OD_CAN2_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DelayedTxMessages_get() {
 8005490:	b580      	push	{r7, lr}
 8005492:	b082      	sub	sp, #8
 8005494:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DelayedTxMessages, portMAX_DELAY);
 8005496:	4b0a      	ldr	r3, [pc, #40]	; (80054c0 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f04f 31ff 	mov.w	r1, #4294967295
 800549e:	4618      	mov	r0, r3
 80054a0:	f009 fd03 	bl	800eeaa <osMutexAcquire>
    uint32_t value = OD_CAN2_DelayedTxMessages;
 80054a4:	4b07      	ldr	r3, [pc, #28]	; (80054c4 <_Z29OD_CAN2_DelayedTxMessages_getv+0x34>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
 80054aa:	4b05      	ldr	r3, [pc, #20]	; (80054c0 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f009 fd46 	bl	800ef40 <osMutexRelease>
    return value;
 80054b4:	687b      	ldr	r3, [r7, #4]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	20000740 	.word	0x20000740
 80054c4:	2000069c 	.word	0x2000069c

080054c8 <_Z17OD_IMU_number_getv>:
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
}
#endif

#ifndef OD_IMU_number_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_IMU_number_get() {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_number, portMAX_DELAY);
 80054ce:	4b0a      	ldr	r3, [pc, #40]	; (80054f8 <_Z17OD_IMU_number_getv+0x30>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f04f 31ff 	mov.w	r1, #4294967295
 80054d6:	4618      	mov	r0, r3
 80054d8:	f009 fce7 	bl	800eeaa <osMutexAcquire>
    uint8_t value = OD_IMU_number;
 80054dc:	4b07      	ldr	r3, [pc, #28]	; (80054fc <_Z17OD_IMU_number_getv+0x34>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_IMU_number);
 80054e2:	4b05      	ldr	r3, [pc, #20]	; (80054f8 <_Z17OD_IMU_number_getv+0x30>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4618      	mov	r0, r3
 80054e8:	f009 fd2a 	bl	800ef40 <osMutexRelease>
    return value;
 80054ec:	79fb      	ldrb	r3, [r7, #7]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3708      	adds	r7, #8
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	20000744 	.word	0x20000744
 80054fc:	200006a0 	.word	0x200006a0

08005500 <_Z23OD_IMU1_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU_number);
}
#endif

#ifndef OD_IMU1_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU1_Temperature_get() {
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU1_Temperature, portMAX_DELAY);
 8005506:	4b0b      	ldr	r3, [pc, #44]	; (8005534 <_Z23OD_IMU1_Temperature_getv+0x34>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f04f 31ff 	mov.w	r1, #4294967295
 800550e:	4618      	mov	r0, r3
 8005510:	f009 fccb 	bl	800eeaa <osMutexAcquire>
    float value = OD_IMU1_Temperature;
 8005514:	4b08      	ldr	r3, [pc, #32]	; (8005538 <_Z23OD_IMU1_Temperature_getv+0x38>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU1_Temperature);
 800551a:	4b06      	ldr	r3, [pc, #24]	; (8005534 <_Z23OD_IMU1_Temperature_getv+0x34>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f009 fd0e 	bl	800ef40 <osMutexRelease>
    return value;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	ee07 3a90 	vmov	s15, r3
}
 800552a:	eeb0 0a67 	vmov.f32	s0, s15
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20000748 	.word	0x20000748
 8005538:	200006a4 	.word	0x200006a4

0800553c <_Z23OD_IMU2_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU1_Temperature);
}
#endif

#ifndef OD_IMU2_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU2_Temperature_get() {
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU2_Temperature, portMAX_DELAY);
 8005542:	4b0b      	ldr	r3, [pc, #44]	; (8005570 <_Z23OD_IMU2_Temperature_getv+0x34>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f04f 31ff 	mov.w	r1, #4294967295
 800554a:	4618      	mov	r0, r3
 800554c:	f009 fcad 	bl	800eeaa <osMutexAcquire>
    float value = OD_IMU2_Temperature;
 8005550:	4b08      	ldr	r3, [pc, #32]	; (8005574 <_Z23OD_IMU2_Temperature_getv+0x38>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU2_Temperature);
 8005556:	4b06      	ldr	r3, [pc, #24]	; (8005570 <_Z23OD_IMU2_Temperature_getv+0x34>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f009 fcf0 	bl	800ef40 <osMutexRelease>
    return value;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	ee07 3a90 	vmov	s15, r3
}
 8005566:	eeb0 0a67 	vmov.f32	s0, s15
 800556a:	3708      	adds	r7, #8
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	2000074c 	.word	0x2000074c
 8005574:	200006a8 	.word	0x200006a8

08005578 <_Z23OD_IMU3_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU2_Temperature);
}
#endif

#ifndef OD_IMU3_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU3_Temperature_get() {
 8005578:	b580      	push	{r7, lr}
 800557a:	b082      	sub	sp, #8
 800557c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU3_Temperature, portMAX_DELAY);
 800557e:	4b0b      	ldr	r3, [pc, #44]	; (80055ac <_Z23OD_IMU3_Temperature_getv+0x34>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f04f 31ff 	mov.w	r1, #4294967295
 8005586:	4618      	mov	r0, r3
 8005588:	f009 fc8f 	bl	800eeaa <osMutexAcquire>
    float value = OD_IMU3_Temperature;
 800558c:	4b08      	ldr	r3, [pc, #32]	; (80055b0 <_Z23OD_IMU3_Temperature_getv+0x38>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU3_Temperature);
 8005592:	4b06      	ldr	r3, [pc, #24]	; (80055ac <_Z23OD_IMU3_Temperature_getv+0x34>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4618      	mov	r0, r3
 8005598:	f009 fcd2 	bl	800ef40 <osMutexRelease>
    return value;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	ee07 3a90 	vmov	s15, r3
}
 80055a2:	eeb0 0a67 	vmov.f32	s0, s15
 80055a6:	3708      	adds	r7, #8
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20000750 	.word	0x20000750
 80055b0:	200006ac 	.word	0x200006ac

080055b4 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f103 0208 	add.w	r2, r3, #8
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3310      	adds	r3, #16
 80055c6:	4619      	mov	r1, r3
 80055c8:	4610      	mov	r0, r2
 80055ca:	f7fc ff07 	bl	80023dc <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 80055ce:	4603      	mov	r3, r0
        }
 80055d0:	4618      	mov	r0, r3
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	460b      	mov	r3, r1
 80055e2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f103 0008 	add.w	r0, r3, #8
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f103 0110 	add.w	r1, r3, #16
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	1d1a      	adds	r2, r3, #4
 80055f4:	78fb      	ldrb	r3, [r7, #3]
 80055f6:	f7fe f999 	bl	800392c <_ZN3can7signals16SENSOR_OD_NodeID3setERyS2_Rhh>
        }
 80055fa:	bf00      	nop
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}

08005602 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005602:	b580      	push	{r7, lr}
 8005604:	b082      	sub	sp, #8
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
 800560a:	460b      	mov	r3, r1
 800560c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f103 0008 	add.w	r0, r3, #8
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f103 0110 	add.w	r1, r3, #16
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	1d1a      	adds	r2, r3, #4
 800561e:	78fb      	ldrb	r3, [r7, #3]
 8005620:	f7fe f951 	bl	80038c6 <_ZN3can7signals20SENSOR_OD_NodeStatus3setERyS2_Rhh>
        }
 8005624:	bf00      	nop
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	460b      	mov	r3, r1
 8005636:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f103 0008 	add.w	r0, r3, #8
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f103 0110 	add.w	r1, r3, #16
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	1d1a      	adds	r2, r3, #4
 8005648:	887b      	ldrh	r3, [r7, #2]
 800564a:	f7fe f90e 	bl	800386a <_ZN3can7signals25SENSOR_OD_ProtocolVersion3setERyS2_Rht>
        }
 800564e:	bf00      	nop
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005656:	b580      	push	{r7, lr}
 8005658:	b082      	sub	sp, #8
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	460b      	mov	r3, r1
 8005660:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f103 0008 	add.w	r0, r3, #8
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f103 0110 	add.w	r1, r3, #16
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	1d1a      	adds	r2, r3, #4
 8005672:	887b      	ldrh	r3, [r7, #2]
 8005674:	f7fe f8cb 	bl	800380e <_ZN3can7signals22SENSOR_OD_StackVersion3setERyS2_Rht>
        }
 8005678:	bf00      	nop
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	460b      	mov	r3, r1
 800568a:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f103 0008 	add.w	r0, r3, #8
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f103 0110 	add.w	r1, r3, #16
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	1d1a      	adds	r2, r3, #4
 800569c:	887b      	ldrh	r3, [r7, #2]
 800569e:	f7fe f888 	bl	80037b2 <_ZN3can7signals20SENSOR_OD_DbcVersion3setERyS2_Rht>
        }
 80056a2:	bf00      	nop
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b082      	sub	sp, #8
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
 80056b2:	460b      	mov	r3, r1
 80056b4:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f103 0008 	add.w	r0, r3, #8
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f103 0110 	add.w	r1, r3, #16
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	1d1a      	adds	r2, r3, #4
 80056c6:	887b      	ldrh	r3, [r7, #2]
 80056c8:	f7fe f821 	bl	800370e <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3setERyS2_Rht>
        }
 80056cc:	bf00      	nop
 80056ce:	3708      	adds	r7, #8
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	460b      	mov	r3, r1
 80056de:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f103 0008 	add.w	r0, r3, #8
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f103 0110 	add.w	r1, r3, #16
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	1d1a      	adds	r2, r3, #4
 80056f0:	78fb      	ldrb	r3, [r7, #3]
 80056f2:	f7fd ffb5 	bl	8003660 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3setERyS2_Rhh>
        }
 80056f6:	bf00      	nop
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80056fe:	b580      	push	{r7, lr}
 8005700:	b082      	sub	sp, #8
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	460b      	mov	r3, r1
 8005708:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f103 0008 	add.w	r0, r3, #8
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f103 0110 	add.w	r1, r3, #16
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	1d1a      	adds	r2, r3, #4
 800571a:	887b      	ldrh	r3, [r7, #2]
 800571c:	f7fd ff4e 	bl	80035bc <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3setERyS2_Rht>
        }
 8005720:	bf00      	nop
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f103 0008 	add.w	r0, r3, #8
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f103 0110 	add.w	r1, r3, #16
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	3304      	adds	r3, #4
 8005744:	ed97 0a00 	vldr	s0, [r7]
 8005748:	461a      	mov	r2, r3
 800574a:	f7fd fed9 	bl	8003500 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf>
        }
 800574e:	bf00      	nop
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005756:	b580      	push	{r7, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
 800575e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f103 0008 	add.w	r0, r3, #8
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f103 0110 	add.w	r1, r3, #16
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	1d1a      	adds	r2, r3, #4
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	f7fd fe8d 	bl	8003490 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm>
        }
 8005776:	bf00      	nop
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800577e:	b580      	push	{r7, lr}
 8005780:	b082      	sub	sp, #8
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
 8005786:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f103 0008 	add.w	r0, r3, #8
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f103 0110 	add.w	r1, r3, #16
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	3304      	adds	r3, #4
 800579a:	ed97 0a00 	vldr	s0, [r7]
 800579e:	461a      	mov	r2, r3
 80057a0:	f7fd fe14 	bl	80033cc <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf>
        }
 80057a4:	bf00      	nop
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f103 0008 	add.w	r0, r3, #8
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f103 0110 	add.w	r1, r3, #16
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3304      	adds	r3, #4
 80057c8:	ed97 0a00 	vldr	s0, [r7]
 80057cc:	461a      	mov	r2, r3
 80057ce:	f7fd fda3 	bl	8003318 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf>
        }
 80057d2:	bf00      	nop
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}

080057da <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80057da:	b580      	push	{r7, lr}
 80057dc:	b082      	sub	sp, #8
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f103 0008 	add.w	r0, r3, #8
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f103 0110 	add.w	r1, r3, #16
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	1d1a      	adds	r2, r3, #4
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	f7fd fd55 	bl	80032a4 <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm>
        }
 80057fa:	bf00      	nop
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005802:	b580      	push	{r7, lr}
 8005804:	b082      	sub	sp, #8
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	460b      	mov	r3, r1
 800580c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f103 0008 	add.w	r0, r3, #8
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f103 0110 	add.w	r1, r3, #16
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	1d1a      	adds	r2, r3, #4
 800581e:	78fb      	ldrb	r3, [r7, #3]
 8005820:	f7fd fd0c 	bl	800323c <_ZN3can7signals15SENSOR_OD_SdcIn3setERyS2_Rhh>
        }
 8005824:	bf00      	nop
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	460b      	mov	r3, r1
 8005836:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f103 0008 	add.w	r0, r3, #8
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f103 0110 	add.w	r1, r3, #16
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	1d1a      	adds	r2, r3, #4
 8005848:	78fb      	ldrb	r3, [r7, #3]
 800584a:	f7fd fcc3 	bl	80031d4 <_ZN3can7signals16SENSOR_OD_SdcOut3setERyS2_Rhh>
        }
 800584e:	bf00      	nop
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005856:	b590      	push	{r4, r7, lr}
 8005858:	b087      	sub	sp, #28
 800585a:	af02      	add	r7, sp, #8
 800585c:	60f8      	str	r0, [r7, #12]
 800585e:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f103 0008 	add.w	r0, r3, #8
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f103 0110 	add.w	r1, r3, #16
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	1d1c      	adds	r4, r3, #4
 8005872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005876:	e9cd 2300 	strd	r2, r3, [sp]
 800587a:	4622      	mov	r2, r4
 800587c:	f7fd fc71 	bl	8003162 <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy>
        }
 8005880:	bf00      	nop
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	bd90      	pop	{r4, r7, pc}

08005888 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005888:	b590      	push	{r4, r7, lr}
 800588a:	b087      	sub	sp, #28
 800588c:	af02      	add	r7, sp, #8
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f103 0008 	add.w	r0, r3, #8
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f103 0110 	add.w	r1, r3, #16
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	1d1c      	adds	r4, r3, #4
 80058a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058a8:	e9cd 2300 	strd	r2, r3, [sp]
 80058ac:	4622      	mov	r2, r4
 80058ae:	f7fd fc1f 	bl	80030f0 <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy>
        }
 80058b2:	bf00      	nop
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd90      	pop	{r4, r7, pc}

080058ba <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80058ba:	b580      	push	{r7, lr}
 80058bc:	b082      	sub	sp, #8
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
 80058c2:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f103 0008 	add.w	r0, r3, #8
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f103 0110 	add.w	r1, r3, #16
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	1d1a      	adds	r2, r3, #4
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	f7fd fbd3 	bl	8003080 <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm>
        }
 80058da:	bf00      	nop
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b082      	sub	sp, #8
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f103 0008 	add.w	r0, r3, #8
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f103 0110 	add.w	r1, r3, #16
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	1d1a      	adds	r2, r3, #4
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	f7fd fb85 	bl	800300c <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm>
        }
 8005902:	bf00      	nop
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800590a:	b580      	push	{r7, lr}
 800590c:	b082      	sub	sp, #8
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	460b      	mov	r3, r1
 8005914:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f103 0008 	add.w	r0, r3, #8
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f103 0110 	add.w	r1, r3, #16
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	1d1a      	adds	r2, r3, #4
 8005926:	78fb      	ldrb	r3, [r7, #3]
 8005928:	f7fd fb3c 	bl	8002fa4 <_ZN3can7signals23SENSOR_OD_CAN1_TxErrCnt3setERyS2_Rhh>
        }
 800592c:	bf00      	nop
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f103 0008 	add.w	r0, r3, #8
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f103 0110 	add.w	r1, r3, #16
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	1d1a      	adds	r2, r3, #4
 8005950:	78fb      	ldrb	r3, [r7, #3]
 8005952:	f7fd faf3 	bl	8002f3c <_ZN3can7signals23SENSOR_OD_CAN1_RxErrCnt3setERyS2_Rhh>
        }
 8005956:	bf00      	nop
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800595e:	b580      	push	{r7, lr}
 8005960:	b082      	sub	sp, #8
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f103 0008 	add.w	r0, r3, #8
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f103 0110 	add.w	r1, r3, #16
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	1d1a      	adds	r2, r3, #4
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	f7fd faa7 	bl	8002ecc <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm>
        }
 800597e:	bf00      	nop
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005986:	b580      	push	{r7, lr}
 8005988:	b082      	sub	sp, #8
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	460b      	mov	r3, r1
 8005990:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f103 0008 	add.w	r0, r3, #8
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f103 0110 	add.w	r1, r3, #16
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	1d1a      	adds	r2, r3, #4
 80059a2:	78fb      	ldrb	r3, [r7, #3]
 80059a4:	f7fd fa36 	bl	8002e14 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3setERyS2_Rhh>
        }
 80059a8:	bf00      	nop
 80059aa:	3708      	adds	r7, #8
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f103 0008 	add.w	r0, r3, #8
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f103 0110 	add.w	r1, r3, #16
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	1d1a      	adds	r2, r3, #4
 80059cc:	887b      	ldrh	r3, [r7, #2]
 80059ce:	f7fd f9bf 	bl	8002d50 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht>
        }
 80059d2:	bf00      	nop
 80059d4:	3708      	adds	r7, #8
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80059da:	b580      	push	{r7, lr}
 80059dc:	b082      	sub	sp, #8
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
 80059e2:	460b      	mov	r3, r1
 80059e4:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f103 0008 	add.w	r0, r3, #8
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f103 0110 	add.w	r1, r3, #16
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	1d1a      	adds	r2, r3, #4
 80059f6:	78fb      	ldrb	r3, [r7, #3]
 80059f8:	f7fd f976 	bl	8002ce8 <_ZN3can7signals21SENSOR_OD_CAN1_Status3setERyS2_Rhh>
        }
 80059fc:	bf00      	nop
 80059fe:	3708      	adds	r7, #8
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	f103 0008 	add.w	r0, r3, #8
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f103 0110 	add.w	r1, r3, #16
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	1d1a      	adds	r2, r3, #4
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	f7fd f928 	bl	8002c74 <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>
        }
 8005a24:	bf00      	nop
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	460b      	mov	r3, r1
 8005a36:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f103 0008 	add.w	r0, r3, #8
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f103 0110 	add.w	r1, r3, #16
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	1d1a      	adds	r2, r3, #4
 8005a48:	78fb      	ldrb	r3, [r7, #3]
 8005a4a:	f7fd f8df 	bl	8002c0c <_ZN3can7signals26SENSOR_OD_CAN1_ErrorStatus3setERyS2_Rhh>
        }
 8005a4e:	bf00      	nop
 8005a50:	3708      	adds	r7, #8
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b082      	sub	sp, #8
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f103 0008 	add.w	r0, r3, #8
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f103 0110 	add.w	r1, r3, #16
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	1d1a      	adds	r2, r3, #4
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	f7fd f891 	bl	8002b98 <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>
        }
 8005a76:	bf00      	nop
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b082      	sub	sp, #8
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	460b      	mov	r3, r1
 8005a88:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f103 0008 	add.w	r0, r3, #8
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f103 0110 	add.w	r1, r3, #16
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	1d1a      	adds	r2, r3, #4
 8005a9a:	78fb      	ldrb	r3, [r7, #3]
 8005a9c:	f7fd f848 	bl	8002b30 <_ZN3can7signals23SENSOR_OD_CAN2_TxErrCnt3setERyS2_Rhh>
        }
 8005aa0:	bf00      	nop
 8005aa2:	3708      	adds	r7, #8
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f103 0008 	add.w	r0, r3, #8
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f103 0110 	add.w	r1, r3, #16
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	1d1a      	adds	r2, r3, #4
 8005ac4:	78fb      	ldrb	r3, [r7, #3]
 8005ac6:	f7fc ffff 	bl	8002ac8 <_ZN3can7signals23SENSOR_OD_CAN2_RxErrCnt3setERyS2_Rhh>
        }
 8005aca:	bf00      	nop
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f103 0008 	add.w	r0, r3, #8
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f103 0110 	add.w	r1, r3, #16
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	1d1a      	adds	r2, r3, #4
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	f7fc ffb3 	bl	8002a58 <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm>
        }
 8005af2:	bf00      	nop
 8005af4:	3708      	adds	r7, #8
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}

08005afa <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005afa:	b580      	push	{r7, lr}
 8005afc:	b082      	sub	sp, #8
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
 8005b02:	460b      	mov	r3, r1
 8005b04:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f103 0008 	add.w	r0, r3, #8
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f103 0110 	add.w	r1, r3, #16
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	1d1a      	adds	r2, r3, #4
 8005b16:	78fb      	ldrb	r3, [r7, #3]
 8005b18:	f7fc ff42 	bl	80029a0 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3setERyS2_Rhh>
        }
 8005b1c:	bf00      	nop
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f103 0008 	add.w	r0, r3, #8
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f103 0110 	add.w	r1, r3, #16
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	1d1a      	adds	r2, r3, #4
 8005b40:	887b      	ldrh	r3, [r7, #2]
 8005b42:	f7fc fecb 	bl	80028dc <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht>
        }
 8005b46:	bf00      	nop
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b082      	sub	sp, #8
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	460b      	mov	r3, r1
 8005b58:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f103 0008 	add.w	r0, r3, #8
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f103 0110 	add.w	r1, r3, #16
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	1d1a      	adds	r2, r3, #4
 8005b6a:	78fb      	ldrb	r3, [r7, #3]
 8005b6c:	f7fc fe82 	bl	8002874 <_ZN3can7signals21SENSOR_OD_CAN2_Status3setERyS2_Rhh>
        }
 8005b70:	bf00      	nop
 8005b72:	3708      	adds	r7, #8
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f103 0008 	add.w	r0, r3, #8
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f103 0110 	add.w	r1, r3, #16
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	1d1a      	adds	r2, r3, #4
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	f7fc fe34 	bl	8002800 <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>
        }
 8005b98:	bf00      	nop
 8005b9a:	3708      	adds	r7, #8
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	460b      	mov	r3, r1
 8005baa:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f103 0008 	add.w	r0, r3, #8
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f103 0110 	add.w	r1, r3, #16
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	1d1a      	adds	r2, r3, #4
 8005bbc:	78fb      	ldrb	r3, [r7, #3]
 8005bbe:	f7fc fdeb 	bl	8002798 <_ZN3can7signals26SENSOR_OD_CAN2_ErrorStatus3setERyS2_Rhh>
        }
 8005bc2:	bf00      	nop
 8005bc4:	3708      	adds	r7, #8
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b082      	sub	sp, #8
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
 8005bd2:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f103 0008 	add.w	r0, r3, #8
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f103 0110 	add.w	r1, r3, #16
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	1d1a      	adds	r2, r3, #4
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	f7fc fd9d 	bl	8002724 <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>
        }
 8005bea:	bf00      	nop
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_IMU_numberEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f103 0008 	add.w	r0, r3, #8
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f103 0110 	add.w	r1, r3, #16
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	1d1a      	adds	r2, r3, #4
 8005c0e:	78fb      	ldrb	r3, [r7, #3]
 8005c10:	f7fc fd54 	bl	80026bc <_ZN3can7signals20SENSOR_OD_IMU_number3setERyS2_Rhh>
        }
 8005c14:	bf00      	nop
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU1_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f103 0008 	add.w	r0, r3, #8
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f103 0110 	add.w	r1, r3, #16
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	3304      	adds	r3, #4
 8005c38:	ed97 0a00 	vldr	s0, [r7]
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	f7fc fcd7 	bl	80025f0 <_ZN3can7signals26SENSOR_OD_IMU1_Temperature3setERyS2_Rhf>
        }
 8005c42:	bf00      	nop
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}

08005c4a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU2_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b082      	sub	sp, #8
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f103 0008 	add.w	r0, r3, #8
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f103 0110 	add.w	r1, r3, #16
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	3304      	adds	r3, #4
 8005c66:	ed97 0a00 	vldr	s0, [r7]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f7fc fc5a 	bl	8002524 <_ZN3can7signals26SENSOR_OD_IMU2_Temperature3setERyS2_Rhf>
        }
 8005c70:	bf00      	nop
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_IMU3_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f103 0008 	add.w	r0, r3, #8
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f103 0110 	add.w	r1, r3, #16
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	3304      	adds	r3, #4
 8005c94:	ed97 0a00 	vldr	s0, [r7]
 8005c98:	461a      	mov	r2, r3
 8005c9a:	f7fc fbdd 	bl	8002458 <_ZN3can7signals26SENSOR_OD_IMU3_Temperature3setERyS2_Rhf>
        }
 8005c9e:	bf00      	nop
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b082      	sub	sp, #8
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	460b      	mov	r3, r1
 8005cb0:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f103 0008 	add.w	r0, r3, #8
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f103 0110 	add.w	r1, r3, #16
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	1d1a      	adds	r2, r3, #4
 8005cc2:	887b      	ldrh	r3, [r7, #2]
 8005cc4:	f7fc fb62 	bl	800238c <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
        }
 8005cc8:	bf00      	nop
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}

08005cd0 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f103 0008 	add.w	r0, r3, #8
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f103 0110 	add.w	r1, r3, #16
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	1d1a      	adds	r2, r3, #4
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	f7fc fb88 	bl	8002402 <_ZN3can7signals19SENSOR_SDO_RespCode3setERyS2_Rhh>
        }
 8005cf2:	bf00      	nop
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b082      	sub	sp, #8
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f103 0208 	add.w	r2, r3, #8
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3310      	adds	r3, #16
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4610      	mov	r0, r2
 8005d10:	f7fc fb64 	bl	80023dc <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8005d14:	4603      	mov	r3, r0
        }
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals27SENSOR_OD_HeartbeatIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b082      	sub	sp, #8
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f103 0208 	add.w	r2, r3, #8
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	3310      	adds	r3, #16
 8005d30:	4619      	mov	r1, r3
 8005d32:	4610      	mov	r0, r2
 8005d34:	f7fd fd19 	bl	800376a <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_>
 8005d38:	4603      	mov	r3, r0
        }
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals24SENSOR_OD_SendOdOnBootupEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b082      	sub	sp, #8
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f103 0208 	add.w	r2, r3, #8
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	3310      	adds	r3, #16
 8005d54:	4619      	mov	r1, r3
 8005d56:	4610      	mov	r0, r2
 8005d58:	f7fd fcb5 	bl	80036c6 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_>
 8005d5c:	4603      	mov	r3, r0
        }
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3708      	adds	r7, #8
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_OdEntrySendIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b082      	sub	sp, #8
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f103 0208 	add.w	r2, r3, #8
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3310      	adds	r3, #16
 8005d78:	4619      	mov	r1, r3
 8005d7a:	4610      	mov	r0, r2
 8005d7c:	f7fd fc4c 	bl	8003618 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_>
 8005d80:	4603      	mov	r3, r0
        }
 8005d82:	4618      	mov	r0, r3
 8005d84:	3708      	adds	r7, #8
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b082      	sub	sp, #8
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f103 0208 	add.w	r2, r3, #8
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	3310      	adds	r3, #16
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4610      	mov	r0, r2
 8005da0:	f7fd f86c 	bl	8002e7c <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_>
 8005da4:	4603      	mov	r3, r0
        }
 8005da6:	4618      	mov	r0, r3
 8005da8:	3708      	adds	r7, #8
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN1_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b082      	sub	sp, #8
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f103 0208 	add.w	r2, r3, #8
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	3310      	adds	r3, #16
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	4610      	mov	r0, r2
 8005dc4:	f7fc ffff 	bl	8002dc6 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_>
 8005dc8:	4603      	mov	r3, r0
        }
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b082      	sub	sp, #8
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f103 0208 	add.w	r2, r3, #8
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3310      	adds	r3, #16
 8005de4:	4619      	mov	r1, r3
 8005de6:	4610      	mov	r0, r2
 8005de8:	f7fc fe0e 	bl	8002a08 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_>
 8005dec:	4603      	mov	r3, r0
        }
 8005dee:	4618      	mov	r0, r3
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN2_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b082      	sub	sp, #8
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f103 0208 	add.w	r2, r3, #8
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3310      	adds	r3, #16
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	f7fc fda1 	bl	8002952 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_>
 8005e10:	4603      	mov	r3, r0
        }
 8005e12:	4618      	mov	r0, r3
 8005e14:	3708      	adds	r7, #8
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
	...

08005e1c <_Z41__static_initialization_and_destruction_0ii>:

        } else {    // Sending OD entries is disabled, sleep for one second and then check again
            osDelay(pdMS_TO_TICKS(1000));
        }
    }
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	6039      	str	r1, [r7, #0]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	f040 80fc 	bne.w	8006026 <_Z41__static_initialization_and_destruction_0ii+0x20a>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e34:	4293      	cmp	r3, r2
 8005e36:	f040 80f6 	bne.w	8006026 <_Z41__static_initialization_and_destruction_0ii+0x20a>
osMutexId_t mutex_OD_NodeID                   = osMutexNew(NULL);
 8005e3a:	2000      	movs	r0, #0
 8005e3c:	f008 ffaf 	bl	800ed9e <osMutexNew>
 8005e40:	4603      	mov	r3, r0
 8005e42:	4a7b      	ldr	r2, [pc, #492]	; (8006030 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8005e44:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_NodeStatus               = osMutexNew(NULL);
 8005e46:	2000      	movs	r0, #0
 8005e48:	f008 ffa9 	bl	800ed9e <osMutexNew>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	4a79      	ldr	r2, [pc, #484]	; (8006034 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8005e50:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ProtocolVersion          = osMutexNew(NULL);
 8005e52:	2000      	movs	r0, #0
 8005e54:	f008 ffa3 	bl	800ed9e <osMutexNew>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	4a77      	ldr	r2, [pc, #476]	; (8006038 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8005e5c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StackVersion             = osMutexNew(NULL);
 8005e5e:	2000      	movs	r0, #0
 8005e60:	f008 ff9d 	bl	800ed9e <osMutexNew>
 8005e64:	4603      	mov	r3, r0
 8005e66:	4a75      	ldr	r2, [pc, #468]	; (800603c <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8005e68:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_DbcVersion               = osMutexNew(NULL);
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	f008 ff97 	bl	800ed9e <osMutexNew>
 8005e70:	4603      	mov	r3, r0
 8005e72:	4a73      	ldr	r2, [pc, #460]	; (8006040 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8005e74:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HeartbeatInterval        = osMutexNew(NULL);
 8005e76:	2000      	movs	r0, #0
 8005e78:	f008 ff91 	bl	800ed9e <osMutexNew>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	4a71      	ldr	r2, [pc, #452]	; (8006044 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8005e80:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SendOdOnBootup           = osMutexNew(NULL);
 8005e82:	2000      	movs	r0, #0
 8005e84:	f008 ff8b 	bl	800ed9e <osMutexNew>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	4a6f      	ldr	r2, [pc, #444]	; (8006048 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8005e8c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_OdEntrySendInterval      = osMutexNew(NULL);
 8005e8e:	2000      	movs	r0, #0
 8005e90:	f008 ff85 	bl	800ed9e <osMutexNew>
 8005e94:	4603      	mov	r3, r0
 8005e96:	4a6d      	ldr	r2, [pc, #436]	; (800604c <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8005e98:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CpuUsage                 = osMutexNew(NULL);
 8005e9a:	2000      	movs	r0, #0
 8005e9c:	f008 ff7f 	bl	800ed9e <osMutexNew>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	4a6b      	ldr	r2, [pc, #428]	; (8006050 <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8005ea4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_MemFree                  = osMutexNew(NULL);
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	f008 ff79 	bl	800ed9e <osMutexNew>
 8005eac:	4603      	mov	r3, r0
 8005eae:	4a69      	ldr	r2, [pc, #420]	; (8006054 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8005eb0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BoardTemp                = osMutexNew(NULL);
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	f008 ff73 	bl	800ed9e <osMutexNew>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	4a67      	ldr	r2, [pc, #412]	; (8006058 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8005ebc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_InputVoltage             = osMutexNew(NULL);
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	f008 ff6d 	bl	800ed9e <osMutexNew>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	4a65      	ldr	r2, [pc, #404]	; (800605c <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8005ec8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_runtime                  = osMutexNew(NULL);
 8005eca:	2000      	movs	r0, #0
 8005ecc:	f008 ff67 	bl	800ed9e <osMutexNew>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	4a63      	ldr	r2, [pc, #396]	; (8006060 <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8005ed4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcIn                    = osMutexNew(NULL);
 8005ed6:	2000      	movs	r0, #0
 8005ed8:	f008 ff61 	bl	800ed9e <osMutexNew>
 8005edc:	4603      	mov	r3, r0
 8005ede:	4a61      	ldr	r2, [pc, #388]	; (8006064 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8005ee0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcOut                   = osMutexNew(NULL);
 8005ee2:	2000      	movs	r0, #0
 8005ee4:	f008 ff5b 	bl	800ed9e <osMutexNew>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	4a5f      	ldr	r2, [pc, #380]	; (8006068 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8005eec:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID1                 = osMutexNew(NULL);
 8005eee:	2000      	movs	r0, #0
 8005ef0:	f008 ff55 	bl	800ed9e <osMutexNew>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	4a5d      	ldr	r2, [pc, #372]	; (800606c <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005ef8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID2                 = osMutexNew(NULL);
 8005efa:	2000      	movs	r0, #0
 8005efc:	f008 ff4f 	bl	800ed9e <osMutexNew>
 8005f00:	4603      	mov	r3, r0
 8005f02:	4a5b      	ldr	r2, [pc, #364]	; (8006070 <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8005f04:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildDate                = osMutexNew(NULL);
 8005f06:	2000      	movs	r0, #0
 8005f08:	f008 ff49 	bl	800ed9e <osMutexNew>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	4a59      	ldr	r2, [pc, #356]	; (8006074 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005f10:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildTime                = osMutexNew(NULL);
 8005f12:	2000      	movs	r0, #0
 8005f14:	f008 ff43 	bl	800ed9e <osMutexNew>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	4a57      	ldr	r2, [pc, #348]	; (8006078 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8005f1c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_TxErrCnt            = osMutexNew(NULL);
 8005f1e:	2000      	movs	r0, #0
 8005f20:	f008 ff3d 	bl	800ed9e <osMutexNew>
 8005f24:	4603      	mov	r3, r0
 8005f26:	4a55      	ldr	r2, [pc, #340]	; (800607c <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8005f28:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_RxErrCnt            = osMutexNew(NULL);
 8005f2a:	2000      	movs	r0, #0
 8005f2c:	f008 ff37 	bl	800ed9e <osMutexNew>
 8005f30:	4603      	mov	r3, r0
 8005f32:	4a53      	ldr	r2, [pc, #332]	; (8006080 <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8005f34:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_lastErrorCode       = osMutexNew(NULL);
 8005f36:	2000      	movs	r0, #0
 8005f38:	f008 ff31 	bl	800ed9e <osMutexNew>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	4a51      	ldr	r2, [pc, #324]	; (8006084 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8005f40:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_autoErrorReset      = osMutexNew(NULL);
 8005f42:	2000      	movs	r0, #0
 8005f44:	f008 ff2b 	bl	800ed9e <osMutexNew>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	4a4f      	ldr	r2, [pc, #316]	; (8006088 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8005f4c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Baudrate            = osMutexNew(NULL);
 8005f4e:	2000      	movs	r0, #0
 8005f50:	f008 ff25 	bl	800ed9e <osMutexNew>
 8005f54:	4603      	mov	r3, r0
 8005f56:	4a4d      	ldr	r2, [pc, #308]	; (800608c <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8005f58:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Status              = osMutexNew(NULL);
 8005f5a:	2000      	movs	r0, #0
 8005f5c:	f008 ff1f 	bl	800ed9e <osMutexNew>
 8005f60:	4603      	mov	r3, r0
 8005f62:	4a4b      	ldr	r2, [pc, #300]	; (8006090 <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8005f64:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DiscardedTxMessages = osMutexNew(NULL);
 8005f66:	2000      	movs	r0, #0
 8005f68:	f008 ff19 	bl	800ed9e <osMutexNew>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	4a49      	ldr	r2, [pc, #292]	; (8006094 <_Z41__static_initialization_and_destruction_0ii+0x278>)
 8005f70:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_ErrorStatus         = osMutexNew(NULL);
 8005f72:	2000      	movs	r0, #0
 8005f74:	f008 ff13 	bl	800ed9e <osMutexNew>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	4a47      	ldr	r2, [pc, #284]	; (8006098 <_Z41__static_initialization_and_destruction_0ii+0x27c>)
 8005f7c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DelayedTxMessages   = osMutexNew(NULL);
 8005f7e:	2000      	movs	r0, #0
 8005f80:	f008 ff0d 	bl	800ed9e <osMutexNew>
 8005f84:	4603      	mov	r3, r0
 8005f86:	4a45      	ldr	r2, [pc, #276]	; (800609c <_Z41__static_initialization_and_destruction_0ii+0x280>)
 8005f88:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_TxErrCnt            = osMutexNew(NULL);
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	f008 ff07 	bl	800ed9e <osMutexNew>
 8005f90:	4603      	mov	r3, r0
 8005f92:	4a43      	ldr	r2, [pc, #268]	; (80060a0 <_Z41__static_initialization_and_destruction_0ii+0x284>)
 8005f94:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_RxErrCnt            = osMutexNew(NULL);
 8005f96:	2000      	movs	r0, #0
 8005f98:	f008 ff01 	bl	800ed9e <osMutexNew>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	4a41      	ldr	r2, [pc, #260]	; (80060a4 <_Z41__static_initialization_and_destruction_0ii+0x288>)
 8005fa0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_lastErrorCode       = osMutexNew(NULL);
 8005fa2:	2000      	movs	r0, #0
 8005fa4:	f008 fefb 	bl	800ed9e <osMutexNew>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	4a3f      	ldr	r2, [pc, #252]	; (80060a8 <_Z41__static_initialization_and_destruction_0ii+0x28c>)
 8005fac:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_autoErrorReset      = osMutexNew(NULL);
 8005fae:	2000      	movs	r0, #0
 8005fb0:	f008 fef5 	bl	800ed9e <osMutexNew>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	4a3d      	ldr	r2, [pc, #244]	; (80060ac <_Z41__static_initialization_and_destruction_0ii+0x290>)
 8005fb8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Baudrate            = osMutexNew(NULL);
 8005fba:	2000      	movs	r0, #0
 8005fbc:	f008 feef 	bl	800ed9e <osMutexNew>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	4a3b      	ldr	r2, [pc, #236]	; (80060b0 <_Z41__static_initialization_and_destruction_0ii+0x294>)
 8005fc4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Status              = osMutexNew(NULL);
 8005fc6:	2000      	movs	r0, #0
 8005fc8:	f008 fee9 	bl	800ed9e <osMutexNew>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	4a39      	ldr	r2, [pc, #228]	; (80060b4 <_Z41__static_initialization_and_destruction_0ii+0x298>)
 8005fd0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DiscardedTxMessages = osMutexNew(NULL);
 8005fd2:	2000      	movs	r0, #0
 8005fd4:	f008 fee3 	bl	800ed9e <osMutexNew>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	4a37      	ldr	r2, [pc, #220]	; (80060b8 <_Z41__static_initialization_and_destruction_0ii+0x29c>)
 8005fdc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_ErrorStatus         = osMutexNew(NULL);
 8005fde:	2000      	movs	r0, #0
 8005fe0:	f008 fedd 	bl	800ed9e <osMutexNew>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	4a35      	ldr	r2, [pc, #212]	; (80060bc <_Z41__static_initialization_and_destruction_0ii+0x2a0>)
 8005fe8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DelayedTxMessages   = osMutexNew(NULL);
 8005fea:	2000      	movs	r0, #0
 8005fec:	f008 fed7 	bl	800ed9e <osMutexNew>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	4a33      	ldr	r2, [pc, #204]	; (80060c0 <_Z41__static_initialization_and_destruction_0ii+0x2a4>)
 8005ff4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_number               = osMutexNew(NULL);
 8005ff6:	2000      	movs	r0, #0
 8005ff8:	f008 fed1 	bl	800ed9e <osMutexNew>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	4a31      	ldr	r2, [pc, #196]	; (80060c4 <_Z41__static_initialization_and_destruction_0ii+0x2a8>)
 8006000:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU1_Temperature         = osMutexNew(NULL);
 8006002:	2000      	movs	r0, #0
 8006004:	f008 fecb 	bl	800ed9e <osMutexNew>
 8006008:	4603      	mov	r3, r0
 800600a:	4a2f      	ldr	r2, [pc, #188]	; (80060c8 <_Z41__static_initialization_and_destruction_0ii+0x2ac>)
 800600c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU2_Temperature         = osMutexNew(NULL);
 800600e:	2000      	movs	r0, #0
 8006010:	f008 fec5 	bl	800ed9e <osMutexNew>
 8006014:	4603      	mov	r3, r0
 8006016:	4a2d      	ldr	r2, [pc, #180]	; (80060cc <_Z41__static_initialization_and_destruction_0ii+0x2b0>)
 8006018:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU3_Temperature         = osMutexNew(NULL);
 800601a:	2000      	movs	r0, #0
 800601c:	f008 febf 	bl	800ed9e <osMutexNew>
 8006020:	4603      	mov	r3, r0
 8006022:	4a2b      	ldr	r2, [pc, #172]	; (80060d0 <_Z41__static_initialization_and_destruction_0ii+0x2b4>)
 8006024:	6013      	str	r3, [r2, #0]
 8006026:	bf00      	nop
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
 800602e:	bf00      	nop
 8006030:	200006b0 	.word	0x200006b0
 8006034:	200006b4 	.word	0x200006b4
 8006038:	200006b8 	.word	0x200006b8
 800603c:	200006bc 	.word	0x200006bc
 8006040:	200006c0 	.word	0x200006c0
 8006044:	200006c4 	.word	0x200006c4
 8006048:	200006c8 	.word	0x200006c8
 800604c:	200006cc 	.word	0x200006cc
 8006050:	200006d0 	.word	0x200006d0
 8006054:	200006d4 	.word	0x200006d4
 8006058:	200006d8 	.word	0x200006d8
 800605c:	200006dc 	.word	0x200006dc
 8006060:	200006e0 	.word	0x200006e0
 8006064:	200006e4 	.word	0x200006e4
 8006068:	200006e8 	.word	0x200006e8
 800606c:	200006ec 	.word	0x200006ec
 8006070:	200006f0 	.word	0x200006f0
 8006074:	200006f4 	.word	0x200006f4
 8006078:	200006f8 	.word	0x200006f8
 800607c:	200006fc 	.word	0x200006fc
 8006080:	20000700 	.word	0x20000700
 8006084:	20000704 	.word	0x20000704
 8006088:	20000708 	.word	0x20000708
 800608c:	2000070c 	.word	0x2000070c
 8006090:	20000710 	.word	0x20000710
 8006094:	20000714 	.word	0x20000714
 8006098:	20000718 	.word	0x20000718
 800609c:	2000071c 	.word	0x2000071c
 80060a0:	20000720 	.word	0x20000720
 80060a4:	20000724 	.word	0x20000724
 80060a8:	20000728 	.word	0x20000728
 80060ac:	2000072c 	.word	0x2000072c
 80060b0:	20000730 	.word	0x20000730
 80060b4:	20000734 	.word	0x20000734
 80060b8:	20000738 	.word	0x20000738
 80060bc:	2000073c 	.word	0x2000073c
 80060c0:	20000740 	.word	0x20000740
 80060c4:	20000744 	.word	0x20000744
 80060c8:	20000748 	.word	0x20000748
 80060cc:	2000074c 	.word	0x2000074c
 80060d0:	20000750 	.word	0x20000750

080060d4 <_GLOBAL__sub_I_OD_NodeID>:
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80060dc:	2001      	movs	r0, #1
 80060de:	f7ff fe9d 	bl	8005e1c <_Z41__static_initialization_and_destruction_0ii>
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <_ZL17AdcModuleToHandle9AdcModule>:

enum AdcModule : int {
	ADC_MODULE1, ADC_MODULE2,
};

static inline ADC_HandleTypeDef* AdcModuleToHandle(AdcModule module) {
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
	switch (module) {
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d003      	beq.n	80060fa <_ZL17AdcModuleToHandle9AdcModule+0x16>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d002      	beq.n	80060fe <_ZL17AdcModuleToHandle9AdcModule+0x1a>
 80060f8:	e003      	b.n	8006102 <_ZL17AdcModuleToHandle9AdcModule+0x1e>
	case ADC_MODULE1:
		return &hadc1;
 80060fa:	4b05      	ldr	r3, [pc, #20]	; (8006110 <_ZL17AdcModuleToHandle9AdcModule+0x2c>)
 80060fc:	e004      	b.n	8006108 <_ZL17AdcModuleToHandle9AdcModule+0x24>
	case ADC_MODULE2:
		return &hadc2;
 80060fe:	4b05      	ldr	r3, [pc, #20]	; (8006114 <_ZL17AdcModuleToHandle9AdcModule+0x30>)
 8006100:	e002      	b.n	8006108 <_ZL17AdcModuleToHandle9AdcModule+0x24>
	default:
		Error_Handler();
 8006102:	f001 fd93 	bl	8007c2c <Error_Handler>
		return nullptr;
 8006106:	2300      	movs	r3, #0
	}
}
 8006108:	4618      	mov	r0, r3
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}
 8006110:	200008b0 	.word	0x200008b0
 8006114:	200008f8 	.word	0x200008f8

08006118 <_ZN10AdcChannelC1Ev>:
#include "FreeRTOS.h"
#include "cmsis_os.h"

class AdcChannel {
public:
	explicit AdcChannel() {
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]

	}
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4618      	mov	r0, r3
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr

0800612e <_ZN10AdcChannel3getEv>:

	uint16_t get() {
 800612e:	b480      	push	{r7}
 8006130:	b083      	sub	sp, #12
 8006132:	af00      	add	r7, sp, #0
 8006134:	6078      	str	r0, [r7, #4]
		return m_value;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	881b      	ldrh	r3, [r3, #0]
	}
 800613a:	4618      	mov	r0, r3
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr

08006146 <_ZN10AdcChannel8setValueEt>:

	void setValue(uint16_t value){
 8006146:	b480      	push	{r7}
 8006148:	b083      	sub	sp, #12
 800614a:	af00      	add	r7, sp, #0
 800614c:	6078      	str	r0, [r7, #4]
 800614e:	460b      	mov	r3, r1
 8006150:	807b      	strh	r3, [r7, #2]
		m_value = value;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	887a      	ldrh	r2, [r7, #2]
 8006156:	801a      	strh	r2, [r3, #0]
	}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8006164:	b480      	push	{r7}
 8006166:	b083      	sub	sp, #12
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	4618      	mov	r0, r3
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4618      	mov	r0, r3
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4618      	mov	r0, r3
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>:
    class function<_Res(_ArgTypes...)>
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fb f8e8 	bl	8001388 <_ZNSt14_Function_baseD1Ev>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4618      	mov	r0, r3
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <_ZN26AdcConvCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvCpltCallbackHandler() = default;
 80061c2:	b5b0      	push	{r4, r5, r7, lr}
 80061c4:	b082      	sub	sp, #8
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	240f      	movs	r4, #15
 80061ce:	461d      	mov	r5, r3
 80061d0:	2c00      	cmp	r4, #0
 80061d2:	db05      	blt.n	80061e0 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0x1e>
 80061d4:	4628      	mov	r0, r5
 80061d6:	f000 fa0f 	bl	80065f8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 80061da:	3510      	adds	r5, #16
 80061dc:	3c01      	subs	r4, #1
 80061de:	e7f7      	b.n	80061d0 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0xe>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bdb0      	pop	{r4, r5, r7, pc}

080061f2 <_ZN26AdcConvCpltCallbackHandlerD1Ev>:
class AdcConvCpltCallbackHandler {
 80061f2:	b590      	push	{r4, r7, lr}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	429c      	cmp	r4, r3
 800620a:	d004      	beq.n	8006216 <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 800620c:	3c10      	subs	r4, #16
 800620e:	4620      	mov	r0, r4
 8006210:	f7ff ffca 	bl	80061a8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 8006214:	e7f7      	b.n	8006206 <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x14>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4618      	mov	r0, r3
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	bd90      	pop	{r4, r7, pc}

08006220 <__tcf_0>:
		static AdcConvCpltCallbackHandler instance;
 8006220:	b580      	push	{r7, lr}
 8006222:	af00      	add	r7, sp, #0
 8006224:	4801      	ldr	r0, [pc, #4]	; (800622c <__tcf_0+0xc>)
 8006226:	f7ff ffe4 	bl	80061f2 <_ZN26AdcConvCpltCallbackHandlerD1Ev>
 800622a:	bd80      	pop	{r7, pc}
 800622c:	20000754 	.word	0x20000754

08006230 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>:
	static AdcConvCpltCallbackHandler& getInstance() {
 8006230:	b580      	push	{r7, lr}
 8006232:	af00      	add	r7, sp, #0
		static AdcConvCpltCallbackHandler instance;
 8006234:	4b12      	ldr	r3, [pc, #72]	; (8006280 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	f3bf 8f5b 	dmb	ish
 800623c:	b2db      	uxtb	r3, r3
 800623e:	f003 0301 	and.w	r3, r3, #1
 8006242:	2b00      	cmp	r3, #0
 8006244:	bf0c      	ite	eq
 8006246:	2301      	moveq	r3, #1
 8006248:	2300      	movne	r3, #0
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d013      	beq.n	8006278 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 8006250:	480b      	ldr	r0, [pc, #44]	; (8006280 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 8006252:	f00c fffd 	bl	8013250 <__cxa_guard_acquire>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	bf14      	ite	ne
 800625c:	2301      	movne	r3, #1
 800625e:	2300      	moveq	r3, #0
 8006260:	b2db      	uxtb	r3, r3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d008      	beq.n	8006278 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 8006266:	4807      	ldr	r0, [pc, #28]	; (8006284 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
 8006268:	f7ff ffab 	bl	80061c2 <_ZN26AdcConvCpltCallbackHandlerC1Ev>
 800626c:	4806      	ldr	r0, [pc, #24]	; (8006288 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x58>)
 800626e:	f00d fa4e 	bl	801370e <atexit>
 8006272:	4803      	ldr	r0, [pc, #12]	; (8006280 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 8006274:	f00c fff8 	bl	8013268 <__cxa_guard_release>
		return instance;
 8006278:	4b02      	ldr	r3, [pc, #8]	; (8006284 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
	}
 800627a:	4618      	mov	r0, r3
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	20000858 	.word	0x20000858
 8006284:	20000754 	.word	0x20000754
 8006288:	08006221 	.word	0x08006221

0800628c <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>:
	unsigned int registerCallback(std::function<void(ADC_HandleTypeDef*)> isr) {
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800629c:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80062a4:	1c59      	adds	r1, r3, #1
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 80062ac:	011b      	lsls	r3, r3, #4
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	4413      	add	r3, r2
 80062b2:	6839      	ldr	r1, [r7, #0]
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 f9ac 	bl	8006612 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		return id;
 80062ba:	68fb      	ldr	r3, [r7, #12]
	}
 80062bc:	4618      	mov	r0, r3
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>:
	void unregisterCallback(unsigned int callbackId) {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
		m_listeners[callbackId] = m_listeners[m_size];
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	011b      	lsls	r3, r3, #4
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	18d0      	adds	r0, r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80062dc:	011b      	lsls	r3, r3, #4
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	4413      	add	r3, r2
 80062e2:	4619      	mov	r1, r3
 80062e4:	f000 f995 	bl	8006612 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		m_listeners[m_size] = nullptr;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80062ee:	011b      	lsls	r3, r3, #4
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	4413      	add	r3, r2
 80062f4:	2100      	movs	r1, #0
 80062f6:	4618      	mov	r0, r3
 80062f8:	f000 f9a6 	bl	8006648 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>
		m_size--;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006302:	1e5a      	subs	r2, r3, #1
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}
 800630a:	bf00      	nop
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>:
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
					m_hadc->Init.NbrOfConversion), m_channels(
					new AdcChannel[m_nbrConvertions]), m_buffer(
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
							[&](ADC_HandleTypeDef *hadc) {
 8006312:	b580      	push	{r7, lr}
 8006314:	b082      	sub	sp, #8
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
 800631a:	6039      	str	r1, [r7, #0]
								if (hadc == m_hadc) {
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	683a      	ldr	r2, [r7, #0]
 8006324:	429a      	cmp	r2, r3
 8006326:	d104      	bne.n	8006332 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_+0x20>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
									dmaCplrCallback();
 800632c:	4618      	mov	r0, r3
 800632e:	f000 f90a 	bl	8006546 <_ZN19AdcModuleController15dmaCplrCallbackEv>
								}
							}
 8006332:	bf00      	nop
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
	...

0800633c <_ZN19AdcModuleControllerC1E9AdcModule>:
	explicit AdcModuleController(AdcModule module) :
 800633c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
 8006346:	6838      	ldr	r0, [r7, #0]
 8006348:	f7ff fecc 	bl	80060e4 <_ZL17AdcModuleToHandle9AdcModule>
 800634c:	4602      	mov	r2, r0
					)) {
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	601a      	str	r2, [r3, #0]
					m_hadc->Init.NbrOfConversion), m_channels(
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	69da      	ldr	r2, [r3, #28]
					)) {
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	605a      	str	r2, [r3, #4]
					new AdcChannel[m_nbrConvertions]), m_buffer(
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685c      	ldr	r4, [r3, #4]
 8006360:	4b2f      	ldr	r3, [pc, #188]	; (8006420 <_ZN19AdcModuleControllerC1E9AdcModule+0xe4>)
 8006362:	429c      	cmp	r4, r3
 8006364:	d801      	bhi.n	800636a <_ZN19AdcModuleControllerC1E9AdcModule+0x2e>
 8006366:	0063      	lsls	r3, r4, #1
 8006368:	e001      	b.n	800636e <_ZN19AdcModuleControllerC1E9AdcModule+0x32>
 800636a:	f04f 33ff 	mov.w	r3, #4294967295
 800636e:	4618      	mov	r0, r3
 8006370:	f00c ff7d 	bl	801326e <_Znaj>
 8006374:	4603      	mov	r3, r0
 8006376:	461e      	mov	r6, r3
 8006378:	4635      	mov	r5, r6
 800637a:	1e63      	subs	r3, r4, #1
 800637c:	461c      	mov	r4, r3
 800637e:	2c00      	cmp	r4, #0
 8006380:	db05      	blt.n	800638e <_ZN19AdcModuleControllerC1E9AdcModule+0x52>
 8006382:	4628      	mov	r0, r5
 8006384:	f7ff fec8 	bl	8006118 <_ZN10AdcChannelC1Ev>
 8006388:	3502      	adds	r5, #2
 800638a:	3c01      	subs	r4, #1
 800638c:	e7f7      	b.n	800637e <_ZN19AdcModuleControllerC1E9AdcModule+0x42>
					)) {
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	609e      	str	r6, [r3, #8]
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	4a22      	ldr	r2, [pc, #136]	; (8006420 <_ZN19AdcModuleControllerC1E9AdcModule+0xe4>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d801      	bhi.n	80063a0 <_ZN19AdcModuleControllerC1E9AdcModule+0x64>
 800639c:	005b      	lsls	r3, r3, #1
 800639e:	e001      	b.n	80063a4 <_ZN19AdcModuleControllerC1E9AdcModule+0x68>
 80063a0:	f04f 33ff 	mov.w	r3, #4294967295
 80063a4:	4618      	mov	r0, r3
 80063a6:	f00c ff62 	bl	801326e <_Znaj>
 80063aa:	4603      	mov	r3, r0
 80063ac:	461a      	mov	r2, r3
					)) {
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60da      	str	r2, [r3, #12]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	741a      	strb	r2, [r3, #16]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 80063b8:	f7ff ff3a 	bl	8006230 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 80063bc:	4604      	mov	r4, r0
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	f107 0308 	add.w	r3, r7, #8
 80063c4:	4611      	mov	r1, r2
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 f958 	bl	800667c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>
 80063cc:	f107 0308 	add.w	r3, r7, #8
 80063d0:	4619      	mov	r1, r3
 80063d2:	4620      	mov	r0, r4
 80063d4:	f7ff ff5a 	bl	800628c <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>
 80063d8:	4602      	mov	r2, r0
					)) {
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	619a      	str	r2, [r3, #24]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 80063de:	f107 0308 	add.w	r3, r7, #8
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7ff fee0 	bl	80061a8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
		m_semaphore = osSemaphoreNew(1, 0, NULL);
 80063e8:	2200      	movs	r2, #0
 80063ea:	2100      	movs	r1, #0
 80063ec:	2001      	movs	r0, #1
 80063ee:	f008 fde4 	bl	800efba <osSemaphoreNew>
 80063f2:	4602      	mov	r2, r0
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	615a      	str	r2, [r3, #20]
		m_bussy = true;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 800640a:	461a      	mov	r2, r3
 800640c:	f002 fb3c 	bl	8008a88 <HAL_ADC_Start_DMA>
		update();
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f854 	bl	80064be <_ZN19AdcModuleController6updateEv>
	}
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4618      	mov	r0, r3
 800641a:	371c      	adds	r7, #28
 800641c:	46bd      	mov	sp, r7
 800641e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006420:	3ffffffc 	.word	0x3ffffffc

08006424 <_ZN19AdcModuleControllerD1Ev>:

	~AdcModuleController() {
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
		AdcConvCpltCallbackHandler::getInstance().unregisterCallback(
 800642c:	f7ff ff00 	bl	8006230 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 8006430:	4602      	mov	r2, r0
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	699b      	ldr	r3, [r3, #24]
 8006436:	4619      	mov	r1, r3
 8006438:	4610      	mov	r0, r2
 800643a:	f7ff ff43 	bl	80062c4 <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>
				m_dmaIsrId);
		if (osSemaphoreGetCount(m_semaphore) != 0) {
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	4618      	mov	r0, r3
 8006444:	f008 fed8 	bl	800f1f8 <osSemaphoreGetCount>
 8006448:	4603      	mov	r3, r0
 800644a:	2b00      	cmp	r3, #0
 800644c:	bf14      	ite	ne
 800644e:	2301      	movne	r3, #1
 8006450:	2300      	moveq	r3, #0
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d006      	beq.n	8006466 <_ZN19AdcModuleControllerD1Ev+0x42>
			osSemaphoreAcquire(m_semaphore, osWaitForever);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	f04f 31ff 	mov.w	r1, #4294967295
 8006460:	4618      	mov	r0, r3
 8006462:	f008 fe33 	bl	800f0cc <osSemaphoreAcquire>
		}
		delete[] m_channels;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d004      	beq.n	8006478 <_ZN19AdcModuleControllerD1Ev+0x54>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	4618      	mov	r0, r3
 8006474:	f00c feea 	bl	801324c <_ZdaPv>
		delete[] m_buffer;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d004      	beq.n	800648a <_ZN19AdcModuleControllerD1Ev+0x66>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	4618      	mov	r0, r3
 8006486:	f00c fee1 	bl	801324c <_ZdaPv>
	}
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4618      	mov	r0, r3
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <_ZN19AdcModuleController16getChannelByRankEj>:
public:

	AdcChannel* getChannelByRank(size_t rank) {
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
 800649c:	6039      	str	r1, [r7, #0]
		if (rank >= m_nbrConvertions) {
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	683a      	ldr	r2, [r7, #0]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d301      	bcc.n	80064ac <_ZN19AdcModuleController16getChannelByRankEj+0x18>
			Error_Handler();
 80064a8:	f001 fbc0 	bl	8007c2c <Error_Handler>
		}
		return m_channels + rank;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689a      	ldr	r2, [r3, #8]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	4413      	add	r3, r2
	}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3708      	adds	r7, #8
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <_ZN19AdcModuleController6updateEv>:

	void update() {
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
		//wait for previous convertion.
		osSemaphoreAcquire(m_semaphore, osWaitForever);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	f04f 31ff 	mov.w	r1, #4294967295
 80064ce:	4618      	mov	r0, r3
 80064d0:	f008 fdfc 	bl	800f0cc <osSemaphoreAcquire>
		//update channels.
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 80064d4:	2300      	movs	r3, #0
 80064d6:	60fb      	str	r3, [r7, #12]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d211      	bcs.n	8006506 <_ZN19AdcModuleController6updateEv+0x48>
			m_channels[i].setValue(m_buffer[i]);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	005b      	lsls	r3, r3, #1
 80064ea:	18d0      	adds	r0, r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68da      	ldr	r2, [r3, #12]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	4413      	add	r3, r2
 80064f6:	881b      	ldrh	r3, [r3, #0]
 80064f8:	4619      	mov	r1, r3
 80064fa:	f7ff fe24 	bl	8006146 <_ZN10AdcChannel8setValueEt>
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	3301      	adds	r3, #1
 8006502:	60fb      	str	r3, [r7, #12]
 8006504:	e7e8      	b.n	80064d8 <_ZN19AdcModuleController6updateEv+0x1a>
		}
		//start next convertion
		m_bussy = true;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2201      	movs	r2, #1
 800650a:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6818      	ldr	r0, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8006518:	461a      	mov	r2, r3
 800651a:	f002 fab5 	bl	8008a88 <HAL_ADC_Start_DMA>
	}
 800651e:	bf00      	nop
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <_ZN19AdcModuleController10weakUpdateEv>:

	void weakUpdate() {
 8006526:	b580      	push	{r7, lr}
 8006528:	b082      	sub	sp, #8
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
		if (m_bussy)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	7c1b      	ldrb	r3, [r3, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d103      	bne.n	800653e <_ZN19AdcModuleController10weakUpdateEv+0x18>
			return;
		else
			update();
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f7ff ffc1 	bl	80064be <_ZN19AdcModuleController6updateEv>
 800653c:	e000      	b.n	8006540 <_ZN19AdcModuleController10weakUpdateEv+0x1a>
			return;
 800653e:	bf00      	nop
	}
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <_ZN19AdcModuleController15dmaCplrCallbackEv>:

private:

	void dmaCplrCallback() {
 8006546:	b580      	push	{r7, lr}
 8006548:	b082      	sub	sp, #8
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
		m_bussy = false;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2200      	movs	r2, #0
 8006552:	741a      	strb	r2, [r3, #16]
		osSemaphoreRelease(m_semaphore);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	695b      	ldr	r3, [r3, #20]
 8006558:	4618      	mov	r0, r3
 800655a:	f008 fe09 	bl	800f170 <osSemaphoreRelease>
	}
 800655e:	bf00      	nop
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
	static AdcModuleController instance(ADC_MODULE);
	return instance;
}

static AdcModuleController& _getChannelAdcModuleControllerRuntime(AdcModule module){
 8006566:	b580      	push	{r7, lr}
 8006568:	b082      	sub	sp, #8
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
	switch(module){
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d003      	beq.n	800657c <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x16>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d004      	beq.n	8006584 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x1e>
 800657a:	e007      	b.n	800658c <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x26>
	case ADC_MODULE1: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 800657c:	f000 f8b0 	bl	80066e0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 8006580:	4603      	mov	r3, r0
 8006582:	e008      	b.n	8006596 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	case ADC_MODULE2: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE2>();
 8006584:	f000 f8e2 	bl	800674c <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>
 8006588:	4603      	mov	r3, r0
 800658a:	e004      	b.n	8006596 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	default:
		Error_Handler();
 800658c:	f001 fb4e 	bl	8007c2c <Error_Handler>
		return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 8006590:	f000 f8a6 	bl	80066e0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 8006594:	4603      	mov	r3, r0
	}
}
 8006596:	4618      	mov	r0, r3
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <_ZN20AdcChannelControllerC1E9AdcModulej>:



class AdcChannelController {
public:
	explicit AdcChannelController(AdcModule module, unsigned int rank) :
 800659e:	b580      	push	{r7, lr}
 80065a0:	b084      	sub	sp, #16
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	60f8      	str	r0, [r7, #12]
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	607a      	str	r2, [r7, #4]
			m_module(_getChannelAdcModuleControllerRuntime(module)),
 80065aa:	68b8      	ldr	r0, [r7, #8]
 80065ac:	f7ff ffdb 	bl	8006566 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>
 80065b0:	4602      	mov	r2, r0
			m_channel(m_module.getChannelByRank(rank)) {
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6879      	ldr	r1, [r7, #4]
 80065bc:	4618      	mov	r0, r3
 80065be:	f7ff ff69 	bl	8006494 <_ZN19AdcModuleController16getChannelByRankEj>
 80065c2:	4602      	mov	r2, r0
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	605a      	str	r2, [r3, #4]
	}
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}

080065d2 <_ZN20AdcChannelController3getEv>:

	uint16_t get() {
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b082      	sub	sp, #8
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
		m_module.weakUpdate();
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff ffa1 	bl	8006526 <_ZN19AdcModuleController10weakUpdateEv>
		return m_channel->get();
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7ff fda0 	bl	800612e <_ZN10AdcChannel3getEv>
 80065ee:	4603      	mov	r3, r0
	}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>:
      function() noexcept
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	4618      	mov	r0, r3
 8006604:	f7fa feb2 	bl	800136c <_ZNSt14_Function_baseC1Ev>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	4618      	mov	r0, r3
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>:
      operator=(const function& __x)
 8006612:	b580      	push	{r7, lr}
 8006614:	b086      	sub	sp, #24
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
 800661a:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800661c:	f107 0308 	add.w	r3, r7, #8
 8006620:	6839      	ldr	r1, [r7, #0]
 8006622:	4618      	mov	r0, r3
 8006624:	f000 f8c0 	bl	80067a8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>
 8006628:	f107 0308 	add.w	r3, r7, #8
 800662c:	6879      	ldr	r1, [r7, #4]
 800662e:	4618      	mov	r0, r3
 8006630:	f000 f8dc 	bl	80067ec <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>
 8006634:	f107 0308 	add.w	r3, r7, #8
 8006638:	4618      	mov	r0, r3
 800663a:	f7ff fdb5 	bl	80061a8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
	return *this;
 800663e:	687b      	ldr	r3, [r7, #4]
      }
 8006640:	4618      	mov	r0, r3
 8006642:	3718      	adds	r7, #24
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>:
      operator=(nullptr_t) noexcept
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
	if (_M_manager)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00b      	beq.n	8006672 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn+0x2a>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	6879      	ldr	r1, [r7, #4]
 8006662:	2203      	movs	r2, #3
 8006664:	4798      	blx	r3
	    _M_manager = nullptr;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	60da      	str	r2, [r3, #12]
	return *this;
 8006672:	687b      	ldr	r3, [r7, #4]
      }
 8006674:	4618      	mov	r0, r3
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 800667c:	b590      	push	{r4, r7, lr}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4618      	mov	r0, r3
 800668a:	f7fa fe6f 	bl	800136c <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 800668e:	463b      	mov	r3, r7
 8006690:	4618      	mov	r0, r3
 8006692:	f000 f8d7 	bl	8006844 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00f      	beq.n	80066bc <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 800669c:	687c      	ldr	r4, [r7, #4]
 800669e:	463b      	mov	r3, r7
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 f8da 	bl	800685a <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 80066a6:	4603      	mov	r3, r0
 80066a8:	4619      	mov	r1, r3
 80066aa:	4620      	mov	r0, r4
 80066ac:	f000 f8e0 	bl	8006870 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>
	    _M_invoker = &_My_handler::_M_invoke;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4a05      	ldr	r2, [pc, #20]	; (80066c8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x4c>)
 80066b4:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a04      	ldr	r2, [pc, #16]	; (80066cc <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x50>)
 80066ba:	609a      	str	r2, [r3, #8]
      }
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4618      	mov	r0, r3
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd90      	pop	{r4, r7, pc}
 80066c6:	bf00      	nop
 80066c8:	08006895 	.word	0x08006895
 80066cc:	080068bf 	.word	0x080068bf

080066d0 <__tcf_1>:
	static AdcModuleController instance(ADC_MODULE);
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	4801      	ldr	r0, [pc, #4]	; (80066dc <__tcf_1+0xc>)
 80066d6:	f7ff fea5 	bl	8006424 <_ZN19AdcModuleControllerD1Ev>
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	2000085c 	.word	0x2000085c

080066e0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 80066e0:	b580      	push	{r7, lr}
 80066e2:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 80066e4:	4b12      	ldr	r3, [pc, #72]	; (8006730 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 80066e6:	781b      	ldrb	r3, [r3, #0]
 80066e8:	f3bf 8f5b 	dmb	ish
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	bf0c      	ite	eq
 80066f6:	2301      	moveq	r3, #1
 80066f8:	2300      	movne	r3, #0
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d014      	beq.n	800672a <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 8006700:	480b      	ldr	r0, [pc, #44]	; (8006730 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 8006702:	f00c fda5 	bl	8013250 <__cxa_guard_acquire>
 8006706:	4603      	mov	r3, r0
 8006708:	2b00      	cmp	r3, #0
 800670a:	bf14      	ite	ne
 800670c:	2301      	movne	r3, #1
 800670e:	2300      	moveq	r3, #0
 8006710:	b2db      	uxtb	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d009      	beq.n	800672a <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 8006716:	2100      	movs	r1, #0
 8006718:	4806      	ldr	r0, [pc, #24]	; (8006734 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
 800671a:	f7ff fe0f 	bl	800633c <_ZN19AdcModuleControllerC1E9AdcModule>
 800671e:	4806      	ldr	r0, [pc, #24]	; (8006738 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x58>)
 8006720:	f00c fff5 	bl	801370e <atexit>
 8006724:	4802      	ldr	r0, [pc, #8]	; (8006730 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 8006726:	f00c fd9f 	bl	8013268 <__cxa_guard_release>
	return instance;
 800672a:	4b02      	ldr	r3, [pc, #8]	; (8006734 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
}
 800672c:	4618      	mov	r0, r3
 800672e:	bd80      	pop	{r7, pc}
 8006730:	20000878 	.word	0x20000878
 8006734:	2000085c 	.word	0x2000085c
 8006738:	080066d1 	.word	0x080066d1

0800673c <__tcf_2>:
	static AdcModuleController instance(ADC_MODULE);
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
 8006740:	4801      	ldr	r0, [pc, #4]	; (8006748 <__tcf_2+0xc>)
 8006742:	f7ff fe6f 	bl	8006424 <_ZN19AdcModuleControllerD1Ev>
 8006746:	bd80      	pop	{r7, pc}
 8006748:	2000087c 	.word	0x2000087c

0800674c <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 8006750:	4b12      	ldr	r3, [pc, #72]	; (800679c <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	f3bf 8f5b 	dmb	ish
 8006758:	b2db      	uxtb	r3, r3
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	bf0c      	ite	eq
 8006762:	2301      	moveq	r3, #1
 8006764:	2300      	movne	r3, #0
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d014      	beq.n	8006796 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 800676c:	480b      	ldr	r0, [pc, #44]	; (800679c <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 800676e:	f00c fd6f 	bl	8013250 <__cxa_guard_acquire>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	bf14      	ite	ne
 8006778:	2301      	movne	r3, #1
 800677a:	2300      	moveq	r3, #0
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d009      	beq.n	8006796 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 8006782:	2101      	movs	r1, #1
 8006784:	4806      	ldr	r0, [pc, #24]	; (80067a0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
 8006786:	f7ff fdd9 	bl	800633c <_ZN19AdcModuleControllerC1E9AdcModule>
 800678a:	4806      	ldr	r0, [pc, #24]	; (80067a4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x58>)
 800678c:	f00c ffbf 	bl	801370e <atexit>
 8006790:	4802      	ldr	r0, [pc, #8]	; (800679c <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 8006792:	f00c fd69 	bl	8013268 <__cxa_guard_release>
	return instance;
 8006796:	4b02      	ldr	r3, [pc, #8]	; (80067a0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
}
 8006798:	4618      	mov	r0, r3
 800679a:	bd80      	pop	{r7, pc}
 800679c:	20000898 	.word	0x20000898
 80067a0:	2000087c 	.word	0x2000087c
 80067a4:	0800673d 	.word	0x0800673d

080067a8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
    : _Function_base()
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7fa fdd9 	bl	800136c <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 80067ba:	6838      	ldr	r0, [r7, #0]
 80067bc:	f000 f89e 	bl	80068fc <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d00d      	beq.n	80067e2 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	2202      	movs	r2, #2
 80067d0:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	68da      	ldr	r2, [r3, #12]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	689a      	ldr	r2, [r3, #8]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	609a      	str	r2, [r3, #8]
    }
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4618      	mov	r0, r3
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>:
      void swap(function& __x) noexcept
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	683a      	ldr	r2, [r7, #0]
 80067fa:	4611      	mov	r1, r2
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7fa fec2 	bl	8001586 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f103 0208 	add.w	r2, r3, #8
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	3308      	adds	r3, #8
 800680c:	4619      	mov	r1, r3
 800680e:	4610      	mov	r0, r2
 8006810:	f7fa feeb 	bl	80015ea <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f103 020c 	add.w	r2, r3, #12
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	330c      	adds	r3, #12
 800681e:	4619      	mov	r1, r3
 8006820:	4610      	mov	r0, r2
 8006822:	f000 f886 	bl	8006932 <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8006826:	bf00      	nop
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4618      	mov	r0, r3
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
	  { return true; }
 800684c:	2301      	movs	r3, #1
 800684e:	4618      	mov	r0, r3
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4618      	mov	r0, r3
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8006870:	b590      	push	{r4, r7, lr}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800687a:	6838      	ldr	r0, [r7, #0]
 800687c:	f7ff ffed 	bl	800685a <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 8006880:	4603      	mov	r3, r0
 8006882:	4622      	mov	r2, r4
 8006884:	4619      	mov	r1, r3
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 f872 	bl	8006970 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	bd90      	pop	{r4, r7, pc}

08006894 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8006894:	b590      	push	{r4, r7, lr}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f87f 	bl	80069a2 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 80068a4:	4604      	mov	r4, r0
 80068a6:	6838      	ldr	r0, [r7, #0]
 80068a8:	f7ff ffc1 	bl	800682e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80068ac:	4603      	mov	r3, r0
 80068ae:	4619      	mov	r1, r3
 80068b0:	4620      	mov	r0, r4
 80068b2:	f000 f887 	bl	80069c4 <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 80068b6:	bf00      	nop
      }
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd90      	pop	{r4, r7, pc}

080068be <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80068be:	b590      	push	{r4, r7, lr}
 80068c0:	b085      	sub	sp, #20
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	60f8      	str	r0, [r7, #12]
 80068c6:	60b9      	str	r1, [r7, #8]
 80068c8:	4613      	mov	r3, r2
 80068ca:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80068cc:	79fb      	ldrb	r3, [r7, #7]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d109      	bne.n	80068e6 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 f88c 	bl	80069f0 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 80068d8:	4604      	mov	r4, r0
 80068da:	68b8      	ldr	r0, [r7, #8]
 80068dc:	f000 f861 	bl	80069a2 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 80068e0:	4603      	mov	r3, r0
 80068e2:	6023      	str	r3, [r4, #0]
	    break;
 80068e4:	e005      	b.n	80068f2 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80068e6:	79fb      	ldrb	r3, [r7, #7]
 80068e8:	461a      	mov	r2, r3
 80068ea:	68b9      	ldr	r1, [r7, #8]
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f000 f88b 	bl	8006a08 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 80068f2:	2300      	movs	r3, #0
      }
 80068f4:	4618      	mov	r0, r3
 80068f6:	3714      	adds	r7, #20
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd90      	pop	{r4, r7, pc}

080068fc <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>:
      explicit operator bool() const noexcept
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4618      	mov	r0, r3
 8006908:	f7fa fd51 	bl	80013ae <_ZNKSt14_Function_base8_M_emptyEv>
 800690c:	4603      	mov	r3, r0
 800690e:	f083 0301 	eor.w	r3, r3, #1
 8006912:	b2db      	uxtb	r3, r3
 8006914:	4618      	mov	r0, r3
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4618      	mov	r0, r3
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8006932:	b580      	push	{r7, lr}
 8006934:	b084      	sub	sp, #16
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7ff ffed 	bl	800691c <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8006942:	4603      	mov	r3, r0
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8006948:	6838      	ldr	r0, [r7, #0]
 800694a:	f7ff ffe7 	bl	800691c <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 800694e:	4603      	mov	r3, r0
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8006956:	f107 030c 	add.w	r3, r7, #12
 800695a:	4618      	mov	r0, r3
 800695c:	f7ff ffde 	bl	800691c <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8006960:	4603      	mov	r3, r0
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	601a      	str	r2, [r3, #0]
    }
 8006968:	bf00      	nop
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8006970:	b590      	push	{r4, r7, lr}
 8006972:	b085      	sub	sp, #20
 8006974:	af00      	add	r7, sp, #0
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800697c:	68b8      	ldr	r0, [r7, #8]
 800697e:	f7ff ff6c 	bl	800685a <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 8006982:	4604      	mov	r4, r0
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f7ff fbf9 	bl	800617c <_ZNSt9_Any_data9_M_accessEv>
 800698a:	4603      	mov	r3, r0
 800698c:	4619      	mov	r1, r3
 800698e:	2004      	movs	r0, #4
 8006990:	f7ff fbe8 	bl	8006164 <_ZnwjPv>
 8006994:	4602      	mov	r2, r0
 8006996:	6823      	ldr	r3, [r4, #0]
 8006998:	6013      	str	r3, [r2, #0]
 800699a:	bf00      	nop
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd90      	pop	{r4, r7, pc}

080069a2 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b084      	sub	sp, #16
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 f857 	bl	8006a5e <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 80069b0:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f000 f85f 	bl	8006a76 <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>
 80069b8:	4603      	mov	r3, r0
 80069ba:	bf00      	nop
	}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80069c4:	b5b0      	push	{r4, r5, r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f85c 	bl	8006a8c <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 80069d4:	4604      	mov	r4, r0
 80069d6:	6838      	ldr	r0, [r7, #0]
 80069d8:	f7ff ff29 	bl	800682e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80069dc:	4603      	mov	r3, r0
 80069de:	461a      	mov	r2, r3
 80069e0:	4621      	mov	r1, r4
 80069e2:	4628      	mov	r0, r5
 80069e4:	f000 f85d 	bl	8006aa2 <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 80069e8:	bf00      	nop
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bdb0      	pop	{r4, r5, r7, pc}

080069f0 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7ff fbbf 	bl	800617c <_ZNSt9_Any_data9_M_accessEv>
 80069fe:	4603      	mov	r3, r0
 8006a00:	4618      	mov	r0, r3
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8006a08:	b5b0      	push	{r4, r5, r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	4613      	mov	r3, r2
 8006a14:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8006a16:	79fb      	ldrb	r3, [r7, #7]
 8006a18:	2b03      	cmp	r3, #3
 8006a1a:	d016      	beq.n	8006a4a <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x42>
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	dc19      	bgt.n	8006a54 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d002      	beq.n	8006a2a <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x22>
 8006a24:	2b02      	cmp	r3, #2
 8006a26:	d00a      	beq.n	8006a3e <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x36>
 8006a28:	e014      	b.n	8006a54 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f7ff ffe0 	bl	80069f0 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 8006a30:	4604      	mov	r4, r0
 8006a32:	68b8      	ldr	r0, [r7, #8]
 8006a34:	f7ff ffb5 	bl	80069a2 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	6023      	str	r3, [r4, #0]
	      break;
 8006a3c:	e00a      	b.n	8006a54 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8006a3e:	462a      	mov	r2, r5
 8006a40:	68b9      	ldr	r1, [r7, #8]
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f000 f844 	bl	8006ad0 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>
	      break;
 8006a48:	e004      	b.n	8006a54 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	68f8      	ldr	r0, [r7, #12]
 8006a4e:	f000 f858 	bl	8006b02 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8006a52:	bf00      	nop
	  return false;
 8006a54:	2300      	movs	r3, #0
	}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bdb0      	pop	{r4, r5, r7, pc}

08006a5e <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>:
      _M_access() const
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b082      	sub	sp, #8
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff fb93 	bl	8006192 <_ZNKSt9_Any_data9_M_accessEv>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8006a76:	b480      	push	{r7}
 8006a78:	b083      	sub	sp, #12
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4618      	mov	r0, r3
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4618      	mov	r0, r3
 8006a98:	370c      	adds	r7, #12
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8006aa2:	b590      	push	{r4, r7, lr}
 8006aa4:	b085      	sub	sp, #20
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	7338      	strb	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8006aae:	68b8      	ldr	r0, [r7, #8]
 8006ab0:	f7ff ffec 	bl	8006a8c <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8006ab4:	4604      	mov	r4, r0
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f7ff feb9 	bl	800682e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8006abc:	4603      	mov	r3, r0
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	4620      	mov	r0, r4
 8006ac4:	f7ff fc25 	bl	8006312 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>
 8006ac8:	bf00      	nop
 8006aca:	3714      	adds	r7, #20
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd90      	pop	{r4, r7, pc}

08006ad0 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8006ad0:	b590      	push	{r4, r7, lr}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8006adc:	68b8      	ldr	r0, [r7, #8]
 8006ade:	f7ff ffbe 	bl	8006a5e <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 8006ae2:	4604      	mov	r4, r0
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f7ff fb49 	bl	800617c <_ZNSt9_Any_data9_M_accessEv>
 8006aea:	4603      	mov	r3, r0
 8006aec:	4619      	mov	r1, r3
 8006aee:	2004      	movs	r0, #4
 8006af0:	f7ff fb38 	bl	8006164 <_ZnwjPv>
 8006af4:	4602      	mov	r2, r0
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	6013      	str	r3, [r2, #0]
	}
 8006afa:	bf00      	nop
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd90      	pop	{r4, r7, pc}

08006b02 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8006b02:	b580      	push	{r7, lr}
 8006b04:	b082      	sub	sp, #8
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f000 f804 	bl	8006b1a <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
	}
 8006b12:	bf00      	nop
 8006b14:	3708      	adds	r7, #8
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}

08006b1a <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 8006b1a:	b580      	push	{r7, lr}
 8006b1c:	b082      	sub	sp, #8
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f7ff fb2a 	bl	800617c <_ZNSt9_Any_data9_M_accessEv>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3708      	adds	r7, #8
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <_ZN14DistanceSensorC1ERK20DistanceSensorConfig>:
#include "AdcChannelController.hpp"
#include "peripheral_config.hpp"

class DistanceSensor {
public:
	explicit DistanceSensor(const DistanceSensorConfig &config) :
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b082      	sub	sp, #8
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
			m_adcChannel(config.m_adc.m_module, config.m_adc.m_rank) {
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	6819      	ldr	r1, [r3, #0]
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	889b      	ldrh	r3, [r3, #4]
 8006b46:	461a      	mov	r2, r3
 8006b48:	f7ff fd29 	bl	800659e <_ZN20AdcChannelControllerC1E9AdcModulej>
	}
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <_ZN14DistanceSensor4readEv>:
	DistanceSensor(DistanceSensor&&) = delete;
	DistanceSensor& operator=(DistanceSensor&) = delete;
	DistanceSensor& operator=(DistanceSensor&&) = delete;


	float read() {
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
		//TODO implement correct distance mapping.
		return m_adcChannel.get() / 4095.0;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	4618      	mov	r0, r3
 8006b64:	f7ff fd35 	bl	80065d2 <_ZN20AdcChannelController3getEv>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7f9 fc82 	bl	8000474 <__aeabi_i2d>
 8006b70:	a309      	add	r3, pc, #36	; (adr r3, 8006b98 <_ZN14DistanceSensor4readEv+0x40>)
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	f7f9 fe11 	bl	800079c <__aeabi_ddiv>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	4610      	mov	r0, r2
 8006b80:	4619      	mov	r1, r3
 8006b82:	f7f9 ffd9 	bl	8000b38 <__aeabi_d2f>
 8006b86:	4603      	mov	r3, r0
 8006b88:	ee07 3a90 	vmov	s15, r3
	}
 8006b8c:	eeb0 0a67 	vmov.f32	s0, s15
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	00000000 	.word	0x00000000
 8006b9c:	40affe00 	.word	0x40affe00

08006ba0 <_ZN19GPIOWriteControllerC1EP12GPIO_TypeDeft>:

#include "main.h"

class GPIOWriteController {
public:
	explicit GPIOWriteController(GPIO_TypeDef *port, uint16_t pin) :
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	4613      	mov	r3, r2
 8006bac:	80fb      	strh	r3, [r7, #6]
			m_port(port), m_pin(pin) {
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	68ba      	ldr	r2, [r7, #8]
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	88fa      	ldrh	r2, [r7, #6]
 8006bb8:	809a      	strh	r2, [r3, #4]
	}
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <_ZN25PneumaticPistonControllerC1ERK31PneumaticPistonControllerConfig>:
#include "GPIOWriteController.hpp"
#include "peripheral_config.hpp"

class PneumaticPistonController {
public:
	explicit PneumaticPistonController(
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
			const PneumaticPistonControllerConfig &config) :
			m_gpioController(config.m_gpio.m_port, config.m_gpio.m_pin) {
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	6819      	ldr	r1, [r3, #0]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	889b      	ldrh	r3, [r3, #4]
 8006bdc:	461a      	mov	r2, r3
 8006bde:	f7ff ffdf 	bl	8006ba0 <_ZN19GPIOWriteControllerC1EP12GPIO_TypeDeft>

	}
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4618      	mov	r0, r3
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <_ZN24GlobalPeripheralRegistryC1Ev>:
#include "PneumaticPistonController.hpp"
#include "peripheral_config.hpp"

class GlobalPeripheralRegistry {
private:
	GlobalPeripheralRegistry() : m_distanceSensor(g_peripherals.m_distanceSensor),
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
		m_pistonController(g_peripherals.m_pneumaticPistonConfig){
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4907      	ldr	r1, [pc, #28]	; (8006c14 <_ZN24GlobalPeripheralRegistryC1Ev+0x28>)
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7ff ff9a 	bl	8006b32 <_ZN14DistanceSensorC1ERK20DistanceSensorConfig>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	3308      	adds	r3, #8
 8006c02:	4905      	ldr	r1, [pc, #20]	; (8006c18 <_ZN24GlobalPeripheralRegistryC1Ev+0x2c>)
 8006c04:	4618      	mov	r0, r3
 8006c06:	f7ff ffdf 	bl	8006bc8 <_ZN25PneumaticPistonControllerC1ERK31PneumaticPistonControllerConfig>

	}
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}
 8006c14:	08013f58 	.word	0x08013f58
 8006c18:	08013f60 	.word	0x08013f60

08006c1c <_ZN24GlobalPeripheralRegistry11getInstanceEv>:
	GlobalPeripheralRegistry(GlobalPeripheralRegistry&) = delete;
	GlobalPeripheralRegistry(GlobalPeripheralRegistry&&) = delete;
	GlobalPeripheralRegistry& operator=(GlobalPeripheralRegistry&) = delete;
	GlobalPeripheralRegistry& operator=(GlobalPeripheralRegistry&&) = delete;
public:
	[[nodiscard]] static inline GlobalPeripheralRegistry& getInstance() {
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	af00      	add	r7, sp, #0
		static GlobalPeripheralRegistry instance;
 8006c20:	4b10      	ldr	r3, [pc, #64]	; (8006c64 <_ZN24GlobalPeripheralRegistry11getInstanceEv+0x48>)
 8006c22:	781b      	ldrb	r3, [r3, #0]
 8006c24:	f3bf 8f5b 	dmb	ish
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	f003 0301 	and.w	r3, r3, #1
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	bf0c      	ite	eq
 8006c32:	2301      	moveq	r3, #1
 8006c34:	2300      	movne	r3, #0
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d010      	beq.n	8006c5e <_ZN24GlobalPeripheralRegistry11getInstanceEv+0x42>
 8006c3c:	4809      	ldr	r0, [pc, #36]	; (8006c64 <_ZN24GlobalPeripheralRegistry11getInstanceEv+0x48>)
 8006c3e:	f00c fb07 	bl	8013250 <__cxa_guard_acquire>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	bf14      	ite	ne
 8006c48:	2301      	movne	r3, #1
 8006c4a:	2300      	moveq	r3, #0
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d005      	beq.n	8006c5e <_ZN24GlobalPeripheralRegistry11getInstanceEv+0x42>
 8006c52:	4805      	ldr	r0, [pc, #20]	; (8006c68 <_ZN24GlobalPeripheralRegistry11getInstanceEv+0x4c>)
 8006c54:	f7ff ffca 	bl	8006bec <_ZN24GlobalPeripheralRegistryC1Ev>
 8006c58:	4802      	ldr	r0, [pc, #8]	; (8006c64 <_ZN24GlobalPeripheralRegistry11getInstanceEv+0x48>)
 8006c5a:	f00c fb05 	bl	8013268 <__cxa_guard_release>
		return instance;
 8006c5e:	4b02      	ldr	r3, [pc, #8]	; (8006c68 <_ZN24GlobalPeripheralRegistry11getInstanceEv+0x4c>)
	}
 8006c60:	4618      	mov	r0, r3
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	200008ac 	.word	0x200008ac
 8006c68:	2000089c 	.word	0x2000089c

08006c6c <_ZN24GlobalPeripheralRegistry17getDistanceSensorEv>:

	[[nodiscard]] inline DistanceSensor& getDistanceSensor() {
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
		return m_distanceSensor;
 8006c74:	687b      	ldr	r3, [r7, #4]
	}
 8006c76:	4618      	mov	r0, r3
 8006c78:	370c      	adds	r7, #12
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <main_entry>:
#ifdef __cplusplus
extern "C" {
#endif


void main_entry(void *argv) {
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b084      	sub	sp, #16
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
	DistanceSensor& distanceSensor = GlobalPeripheralRegistry::getInstance().getDistanceSensor();
 8006c8a:	f7ff ffc7 	bl	8006c1c <_ZN24GlobalPeripheralRegistry11getInstanceEv>
 8006c8e:	4603      	mov	r3, r0
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7ff ffeb 	bl	8006c6c <_ZN24GlobalPeripheralRegistry17getDistanceSensorEv>
 8006c96:	60f8      	str	r0, [r7, #12]
	while(true){
		float distance = distanceSensor.read();
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f7ff ff5d 	bl	8006b58 <_ZN14DistanceSensor4readEv>
 8006c9e:	ed87 0a02 	vstr	s0, [r7, #8]
		//put logic here.
		osDelay(pdMS_TO_TICKS(50));
 8006ca2:	2032      	movs	r0, #50	; 0x32
 8006ca4:	f008 f860 	bl	800ed68 <osDelay>
	}
 8006ca8:	e7f6      	b.n	8006c98 <main_entry+0x16>

08006caa <_ZN14OnBoardSensorsC1E23OnBoardTemperaturConfig>:
#include <cmath>
#include "canzero.hpp"

class OnBoardSensors {
public:
	explicit OnBoardSensors(OnBoardTemperaturConfig config) :
 8006caa:	b084      	sub	sp, #16
 8006cac:	b5b0      	push	{r4, r5, r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	f107 001c 	add.w	r0, r7, #28
 8006cb8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			m_internalNTC(config.m_internalNTCConfig.m_adc.m_module,
					config.m_internalNTCConfig.m_adc.m_rank), m_externalNTC(
					config.m_externalNTCConfig.m_adc.m_module,
					config.m_externalNTCConfig.m_adc.m_rank),
					m_inputVoltage(config.m_inputVoltageConfig.m_module, config.m_inputVoltageConfig.m_rank),
					m_config(config) {
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	69f9      	ldr	r1, [r7, #28]
					config.m_internalNTCConfig.m_adc.m_rank), m_externalNTC(
 8006cc0:	8c3a      	ldrh	r2, [r7, #32]
					m_config(config) {
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7ff fc6b 	bl	800659e <_ZN20AdcChannelControllerC1E9AdcModulej>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	3308      	adds	r3, #8
 8006ccc:	6b79      	ldr	r1, [r7, #52]	; 0x34
					config.m_externalNTCConfig.m_adc.m_rank),
 8006cce:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
					m_config(config) {
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7ff fc64 	bl	800659e <_ZN20AdcChannelControllerC1E9AdcModulej>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	3310      	adds	r3, #16
 8006cda:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
					m_inputVoltage(config.m_inputVoltageConfig.m_module, config.m_inputVoltageConfig.m_rank),
 8006cdc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
					m_config(config) {
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7ff fc5c 	bl	800659e <_ZN20AdcChannelControllerC1E9AdcModulej>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f103 0418 	add.w	r4, r3, #24
 8006cec:	f107 051c 	add.w	r5, r7, #28
 8006cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006cfc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006d00:	e884 0003 	stmia.w	r4, {r0, r1}
	}
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	4618      	mov	r0, r3
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8006d10:	b004      	add	sp, #16
 8006d12:	4770      	bx	lr

08006d14 <_ZN14OnBoardSensors22getInternalTemperaturCEv>:

	float getInternalTemperaturC(){
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_internalNTC.get();
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7ff fc57 	bl	80065d2 <_ZN20AdcChannelController3getEv>
 8006d24:	4603      	mov	r3, r0
 8006d26:	81fb      	strh	r3, [r7, #14]
		float internalTemp = (3.3f * (float) avalue/4095.0f - 0.76f) / 0.0025f + 25.0f;
 8006d28:	89fb      	ldrh	r3, [r7, #14]
 8006d2a:	ee07 3a90 	vmov	s15, r3
 8006d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d32:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8006d70 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x5c>
 8006d36:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006d3a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006d74 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x60>
 8006d3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d42:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8006d78 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x64>
 8006d46:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8006d4a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8006d7c <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x68>
 8006d4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d52:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8006d56:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d5a:	edc7 7a02 	vstr	s15, [r7, #8]
		return internalTemp;
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	ee07 3a90 	vmov	s15, r3
	}
 8006d64:	eeb0 0a67 	vmov.f32	s0, s15
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	40533333 	.word	0x40533333
 8006d74:	457ff000 	.word	0x457ff000
 8006d78:	3f428f5c 	.word	0x3f428f5c
 8006d7c:	3b23d70a 	.word	0x3b23d70a

08006d80 <_ZN14OnBoardSensors22getExternalTemperaturCEv>:

	float getExternalTemperaturC(){
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b084      	sub	sp, #16
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_externalNTC.get();
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	3308      	adds	r3, #8
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7ff fc20 	bl	80065d2 <_ZN20AdcChannelController3getEv>
 8006d92:	4603      	mov	r3, r0
 8006d94:	81fb      	strh	r3, [r7, #14]
		float ntcTemperature = 1.0f / (1.0f / 298.15f + 1.0f / 3380.0f * log(1.0f / (4095.0f / (float) avalue - 1.0f) )) - 273.15f;
 8006d96:	89fb      	ldrh	r3, [r7, #14]
 8006d98:	ee07 3a90 	vmov	s15, r3
 8006d9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006da0:	eddf 6a29 	vldr	s13, [pc, #164]	; 8006e48 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xc8>
 8006da4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006da8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006db0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006db4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006db8:	ee16 0a90 	vmov	r0, s13
 8006dbc:	f7f9 fb6c 	bl	8000498 <__aeabi_f2d>
 8006dc0:	4602      	mov	r2, r0
 8006dc2:	460b      	mov	r3, r1
 8006dc4:	ec43 2b10 	vmov	d0, r2, r3
 8006dc8:	f00c fa96 	bl	80132f8 <log>
 8006dcc:	ec51 0b10 	vmov	r0, r1, d0
 8006dd0:	a317      	add	r3, pc, #92	; (adr r3, 8006e30 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xb0>)
 8006dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd6:	f7f9 fbb7 	bl	8000548 <__aeabi_dmul>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4610      	mov	r0, r2
 8006de0:	4619      	mov	r1, r3
 8006de2:	a315      	add	r3, pc, #84	; (adr r3, 8006e38 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xb8>)
 8006de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de8:	f7f9 f9f8 	bl	80001dc <__adddf3>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	f04f 0000 	mov.w	r0, #0
 8006df4:	4915      	ldr	r1, [pc, #84]	; (8006e4c <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xcc>)
 8006df6:	f7f9 fcd1 	bl	800079c <__aeabi_ddiv>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	4610      	mov	r0, r2
 8006e00:	4619      	mov	r1, r3
 8006e02:	a30f      	add	r3, pc, #60	; (adr r3, 8006e40 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xc0>)
 8006e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e08:	f7f9 f9e6 	bl	80001d8 <__aeabi_dsub>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	460b      	mov	r3, r1
 8006e10:	4610      	mov	r0, r2
 8006e12:	4619      	mov	r1, r3
 8006e14:	f7f9 fe90 	bl	8000b38 <__aeabi_d2f>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	60bb      	str	r3, [r7, #8]
		return ntcTemperature;
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	ee07 3a90 	vmov	s15, r3
	}
 8006e22:	eeb0 0a67 	vmov.f32	s0, s15
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	f3af 8000 	nop.w
 8006e30:	60000000 	.word	0x60000000
 8006e34:	3f3363ac 	.word	0x3f3363ac
 8006e38:	e0000000 	.word	0xe0000000
 8006e3c:	3f6b79e1 	.word	0x3f6b79e1
 8006e40:	60000000 	.word	0x60000000
 8006e44:	40711266 	.word	0x40711266
 8006e48:	457ff000 	.word	0x457ff000
 8006e4c:	3ff00000 	.word	0x3ff00000

08006e50 <_ZN14OnBoardSensors21getAverageTemperaturCEv>:

	float getAverageTemperaturC(){
 8006e50:	b580      	push	{r7, lr}
 8006e52:	ed2d 8b02 	vpush	{d8}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
		float average = (getExternalTemperaturC() + getInternalTemperaturC() ) / 2.0;
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7ff ff8f 	bl	8006d80 <_ZN14OnBoardSensors22getExternalTemperaturCEv>
 8006e62:	eeb0 8a40 	vmov.f32	s16, s0
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f7ff ff54 	bl	8006d14 <_ZN14OnBoardSensors22getInternalTemperaturCEv>
 8006e6c:	eef0 7a40 	vmov.f32	s15, s0
 8006e70:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006e74:	ee17 0a90 	vmov	r0, s15
 8006e78:	f7f9 fb0e 	bl	8000498 <__aeabi_f2d>
 8006e7c:	f04f 0200 	mov.w	r2, #0
 8006e80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e84:	f7f9 fc8a 	bl	800079c <__aeabi_ddiv>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	4610      	mov	r0, r2
 8006e8e:	4619      	mov	r1, r3
 8006e90:	f7f9 fe52 	bl	8000b38 <__aeabi_d2f>
 8006e94:	4603      	mov	r3, r0
 8006e96:	60fb      	str	r3, [r7, #12]
		return average;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	ee07 3a90 	vmov	s15, r3
	}
 8006e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8006ea2:	3710      	adds	r7, #16
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	ecbd 8b02 	vpop	{d8}
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <_ZN14OnBoardSensors15getInputVoltageEv>:

	float getInputVoltage() {
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_inputVoltage.get();
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	3310      	adds	r3, #16
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff fb8a 	bl	80065d2 <_ZN20AdcChannelController3getEv>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	81fb      	strh	r3, [r7, #14]
		float inputVoltage = (float)avalue/ 4095.0f * 3.3f / 0.106464f + 0.6f;
 8006ec2:	89fb      	ldrh	r3, [r7, #14]
 8006ec4:	ee07 3a90 	vmov	s15, r3
 8006ec8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ecc:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8006f00 <_ZN14OnBoardSensors15getInputVoltageEv+0x54>
 8006ed0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ed4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8006f04 <_ZN14OnBoardSensors15getInputVoltageEv+0x58>
 8006ed8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006edc:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8006f08 <_ZN14OnBoardSensors15getInputVoltageEv+0x5c>
 8006ee0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ee4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8006f0c <_ZN14OnBoardSensors15getInputVoltageEv+0x60>
 8006ee8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006eec:	edc7 7a02 	vstr	s15, [r7, #8]
		return inputVoltage;
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	ee07 3a90 	vmov	s15, r3
	}
 8006ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	457ff000 	.word	0x457ff000
 8006f04:	40533333 	.word	0x40533333
 8006f08:	3dda09cc 	.word	0x3dda09cc
 8006f0c:	3f19999a 	.word	0x3f19999a

08006f10 <_ZN14OnBoardSensors9updateODsEv>:

	void updateODs(){
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
		float temp = getAverageTemperaturC();
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7ff ff99 	bl	8006e50 <_ZN14OnBoardSensors21getAverageTemperaturCEv>
 8006f1e:	ed87 0a03 	vstr	s0, [r7, #12]
		float vBat = getInputVoltage();
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7ff ffc2 	bl	8006eac <_ZN14OnBoardSensors15getInputVoltageEv>
 8006f28:	ed87 0a02 	vstr	s0, [r7, #8]
		OD_BoardTemp_set(temp);
 8006f2c:	ed97 0a03 	vldr	s0, [r7, #12]
 8006f30:	f7fd ff40 	bl	8004db4 <_Z16OD_BoardTemp_setf>
		OD_InputVoltage_set(vBat);
 8006f34:	ed97 0a02 	vldr	s0, [r7, #8]
 8006f38:	f7fd ff76 	bl	8004e28 <_Z19OD_InputVoltage_setf>
	}
 8006f3c:	bf00      	nop
 8006f3e:	3710      	adds	r7, #16
 8006f40:	46bd      	mov	sp, r7
 8006f42:	bd80      	pop	{r7, pc}

08006f44 <_ZL18estimateFreeMemoryv>:
#include "canzero.hpp"
#include "FreeRTOS.h"
#include "cmsis_os.h"
#include "task.h"

static inline size_t estimateFreeMemory() {
 8006f44:	b580      	push	{r7, lr}
 8006f46:	af00      	add	r7, sp, #0
	return xPortGetFreeHeapSize();
 8006f48:	f00c f8b8 	bl	80130bc <xPortGetFreeHeapSize>
 8006f4c:	4603      	mov	r3, r0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	bd80      	pop	{r7, pc}
	...

08006f54 <_ZL16estimateCPUusagev>:


static inline float estimateCPUusage() {
 8006f54:	b480      	push	{r7}
 8006f56:	af00      	add	r7, sp, #0
	}
	g_oldIdleTick = xTaskGetIdleRunTimeCounter();
	g_oldTotalTick = portGET_RUN_TIME_COUNTER_VALUE();
	return cpuUsage;
	*/
	return 100.0;
 8006f58:	4b04      	ldr	r3, [pc, #16]	; (8006f6c <_ZL16estimateCPUusagev+0x18>)
 8006f5a:	ee07 3a90 	vmov	s15, r3
}
 8006f5e:	eeb0 0a67 	vmov.f32	s0, s15
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	42c80000 	.word	0x42c80000

08006f70 <microcontroller_info_entry>:

#ifdef __cplusplus
extern "C" {
#endif

void microcontroller_info_entry(void *argv) {
 8006f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f72:	b0a7      	sub	sp, #156	; 0x9c
 8006f74:	af0c      	add	r7, sp, #48	; 0x30
 8006f76:	6078      	str	r0, [r7, #4]
	OnBoardSensors onBoardSensors(g_peripherals.m_onBoardTemperaturConfig);
 8006f78:	4e18      	ldr	r6, [pc, #96]	; (8006fdc <microcontroller_info_entry+0x6c>)
 8006f7a:	f107 0c0c 	add.w	ip, r7, #12
 8006f7e:	466d      	mov	r5, sp
 8006f80:	f106 040c 	add.w	r4, r6, #12
 8006f84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f8c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006f90:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006f94:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8006f98:	4660      	mov	r0, ip
 8006f9a:	f7ff fe86 	bl	8006caa <_ZN14OnBoardSensorsC1E23OnBoardTemperaturConfig>
	unsigned int frameCounter;
	while (true) {
		onBoardSensors.updateODs();
 8006f9e:	f107 030c 	add.w	r3, r7, #12
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f7ff ffb4 	bl	8006f10 <_ZN14OnBoardSensors9updateODsEv>
		if (frameCounter > 20) {
 8006fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006faa:	2b14      	cmp	r3, #20
 8006fac:	d90f      	bls.n	8006fce <microcontroller_info_entry+0x5e>
			float cpuUsage = estimateCPUusage();
 8006fae:	f7ff ffd1 	bl	8006f54 <_ZL16estimateCPUusagev>
 8006fb2:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
			OD_CpuUsage_set(cpuUsage);
 8006fb6:	ed97 0a18 	vldr	s0, [r7, #96]	; 0x60
 8006fba:	f7fd fe89 	bl	8004cd0 <_Z15OD_CpuUsage_setf>
			size_t freeMemory = estimateFreeMemory();
 8006fbe:	f7ff ffc1 	bl	8006f44 <_ZL18estimateFreeMemoryv>
 8006fc2:	65f8      	str	r0, [r7, #92]	; 0x5c
			OD_MemFree_set(freeMemory);
 8006fc4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006fc6:	f7fd febb 	bl	8004d40 <_Z14OD_MemFree_setm>
			frameCounter = 0;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	667b      	str	r3, [r7, #100]	; 0x64
		}
		frameCounter++;
 8006fce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fd0:	3301      	adds	r3, #1
 8006fd2:	667b      	str	r3, [r7, #100]	; 0x64
		osDelay(pdMS_TO_TICKS(50));	//update every 50ms because some nodes (i.e. PDU) need high frequency voltage data
 8006fd4:	2032      	movs	r0, #50	; 0x32
 8006fd6:	f007 fec7 	bl	800ed68 <osDelay>
	}
 8006fda:	e7e0      	b.n	8006f9e <microcontroller_info_entry+0x2e>
 8006fdc:	08013f68 	.word	0x08013f68

08006fe0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006fe6:	463b      	mov	r3, r7
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]
 8006fec:	605a      	str	r2, [r3, #4]
 8006fee:	609a      	str	r2, [r3, #8]
 8006ff0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8006ff2:	4b36      	ldr	r3, [pc, #216]	; (80070cc <MX_ADC1_Init+0xec>)
 8006ff4:	4a36      	ldr	r2, [pc, #216]	; (80070d0 <MX_ADC1_Init+0xf0>)
 8006ff6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8006ff8:	4b34      	ldr	r3, [pc, #208]	; (80070cc <MX_ADC1_Init+0xec>)
 8006ffa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006ffe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007000:	4b32      	ldr	r3, [pc, #200]	; (80070cc <MX_ADC1_Init+0xec>)
 8007002:	2200      	movs	r2, #0
 8007004:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8007006:	4b31      	ldr	r3, [pc, #196]	; (80070cc <MX_ADC1_Init+0xec>)
 8007008:	2201      	movs	r2, #1
 800700a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800700c:	4b2f      	ldr	r3, [pc, #188]	; (80070cc <MX_ADC1_Init+0xec>)
 800700e:	2200      	movs	r2, #0
 8007010:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007012:	4b2e      	ldr	r3, [pc, #184]	; (80070cc <MX_ADC1_Init+0xec>)
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800701a:	4b2c      	ldr	r3, [pc, #176]	; (80070cc <MX_ADC1_Init+0xec>)
 800701c:	2200      	movs	r2, #0
 800701e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007020:	4b2a      	ldr	r3, [pc, #168]	; (80070cc <MX_ADC1_Init+0xec>)
 8007022:	4a2c      	ldr	r2, [pc, #176]	; (80070d4 <MX_ADC1_Init+0xf4>)
 8007024:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007026:	4b29      	ldr	r3, [pc, #164]	; (80070cc <MX_ADC1_Init+0xec>)
 8007028:	2200      	movs	r2, #0
 800702a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800702c:	4b27      	ldr	r3, [pc, #156]	; (80070cc <MX_ADC1_Init+0xec>)
 800702e:	2204      	movs	r2, #4
 8007030:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8007032:	4b26      	ldr	r3, [pc, #152]	; (80070cc <MX_ADC1_Init+0xec>)
 8007034:	2200      	movs	r2, #0
 8007036:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800703a:	4b24      	ldr	r3, [pc, #144]	; (80070cc <MX_ADC1_Init+0xec>)
 800703c:	2200      	movs	r2, #0
 800703e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007040:	4822      	ldr	r0, [pc, #136]	; (80070cc <MX_ADC1_Init+0xec>)
 8007042:	f001 fcdd 	bl	8008a00 <HAL_ADC_Init>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800704c:	f000 fdee 	bl	8007c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8007050:	230a      	movs	r3, #10
 8007052:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007054:	2301      	movs	r3, #1
 8007056:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8007058:	2305      	movs	r3, #5
 800705a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800705c:	463b      	mov	r3, r7
 800705e:	4619      	mov	r1, r3
 8007060:	481a      	ldr	r0, [pc, #104]	; (80070cc <MX_ADC1_Init+0xec>)
 8007062:	f001 fe2b 	bl	8008cbc <HAL_ADC_ConfigChannel>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800706c:	f000 fdde 	bl	8007c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8007070:	230c      	movs	r3, #12
 8007072:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8007074:	2302      	movs	r3, #2
 8007076:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007078:	463b      	mov	r3, r7
 800707a:	4619      	mov	r1, r3
 800707c:	4813      	ldr	r0, [pc, #76]	; (80070cc <MX_ADC1_Init+0xec>)
 800707e:	f001 fe1d 	bl	8008cbc <HAL_ADC_ConfigChannel>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d001      	beq.n	800708c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8007088:	f000 fdd0 	bl	8007c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800708c:	2310      	movs	r3, #16
 800708e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8007090:	2303      	movs	r3, #3
 8007092:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007094:	463b      	mov	r3, r7
 8007096:	4619      	mov	r1, r3
 8007098:	480c      	ldr	r0, [pc, #48]	; (80070cc <MX_ADC1_Init+0xec>)
 800709a:	f001 fe0f 	bl	8008cbc <HAL_ADC_ConfigChannel>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80070a4:	f000 fdc2 	bl	8007c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80070a8:	2311      	movs	r3, #17
 80070aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80070ac:	2304      	movs	r3, #4
 80070ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80070b0:	463b      	mov	r3, r7
 80070b2:	4619      	mov	r1, r3
 80070b4:	4805      	ldr	r0, [pc, #20]	; (80070cc <MX_ADC1_Init+0xec>)
 80070b6:	f001 fe01 	bl	8008cbc <HAL_ADC_ConfigChannel>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d001      	beq.n	80070c4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80070c0:	f000 fdb4 	bl	8007c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80070c4:	bf00      	nop
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	200008b0 	.word	0x200008b0
 80070d0:	40012000 	.word	0x40012000
 80070d4:	0f000001 	.word	0x0f000001

080070d8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b084      	sub	sp, #16
 80070dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80070de:	463b      	mov	r3, r7
 80070e0:	2200      	movs	r2, #0
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	605a      	str	r2, [r3, #4]
 80070e6:	609a      	str	r2, [r3, #8]
 80070e8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80070ea:	4b52      	ldr	r3, [pc, #328]	; (8007234 <MX_ADC2_Init+0x15c>)
 80070ec:	4a52      	ldr	r2, [pc, #328]	; (8007238 <MX_ADC2_Init+0x160>)
 80070ee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80070f0:	4b50      	ldr	r3, [pc, #320]	; (8007234 <MX_ADC2_Init+0x15c>)
 80070f2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80070f6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80070f8:	4b4e      	ldr	r3, [pc, #312]	; (8007234 <MX_ADC2_Init+0x15c>)
 80070fa:	2200      	movs	r2, #0
 80070fc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80070fe:	4b4d      	ldr	r3, [pc, #308]	; (8007234 <MX_ADC2_Init+0x15c>)
 8007100:	2201      	movs	r2, #1
 8007102:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8007104:	4b4b      	ldr	r3, [pc, #300]	; (8007234 <MX_ADC2_Init+0x15c>)
 8007106:	2200      	movs	r2, #0
 8007108:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800710a:	4b4a      	ldr	r3, [pc, #296]	; (8007234 <MX_ADC2_Init+0x15c>)
 800710c:	2200      	movs	r2, #0
 800710e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007112:	4b48      	ldr	r3, [pc, #288]	; (8007234 <MX_ADC2_Init+0x15c>)
 8007114:	2200      	movs	r2, #0
 8007116:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007118:	4b46      	ldr	r3, [pc, #280]	; (8007234 <MX_ADC2_Init+0x15c>)
 800711a:	4a48      	ldr	r2, [pc, #288]	; (800723c <MX_ADC2_Init+0x164>)
 800711c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800711e:	4b45      	ldr	r3, [pc, #276]	; (8007234 <MX_ADC2_Init+0x15c>)
 8007120:	2200      	movs	r2, #0
 8007122:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 8;
 8007124:	4b43      	ldr	r3, [pc, #268]	; (8007234 <MX_ADC2_Init+0x15c>)
 8007126:	2208      	movs	r2, #8
 8007128:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800712a:	4b42      	ldr	r3, [pc, #264]	; (8007234 <MX_ADC2_Init+0x15c>)
 800712c:	2200      	movs	r2, #0
 800712e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007132:	4b40      	ldr	r3, [pc, #256]	; (8007234 <MX_ADC2_Init+0x15c>)
 8007134:	2200      	movs	r2, #0
 8007136:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8007138:	483e      	ldr	r0, [pc, #248]	; (8007234 <MX_ADC2_Init+0x15c>)
 800713a:	f001 fc61 	bl	8008a00 <HAL_ADC_Init>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d001      	beq.n	8007148 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8007144:	f000 fd72 	bl	8007c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8007148:	230f      	movs	r3, #15
 800714a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800714c:	2301      	movs	r3, #1
 800714e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8007150:	2304      	movs	r3, #4
 8007152:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007154:	463b      	mov	r3, r7
 8007156:	4619      	mov	r1, r3
 8007158:	4836      	ldr	r0, [pc, #216]	; (8007234 <MX_ADC2_Init+0x15c>)
 800715a:	f001 fdaf 	bl	8008cbc <HAL_ADC_ConfigChannel>
 800715e:	4603      	mov	r3, r0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d001      	beq.n	8007168 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8007164:	f000 fd62 	bl	8007c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8007168:	230e      	movs	r3, #14
 800716a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800716c:	2302      	movs	r3, #2
 800716e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007170:	463b      	mov	r3, r7
 8007172:	4619      	mov	r1, r3
 8007174:	482f      	ldr	r0, [pc, #188]	; (8007234 <MX_ADC2_Init+0x15c>)
 8007176:	f001 fda1 	bl	8008cbc <HAL_ADC_ConfigChannel>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d001      	beq.n	8007184 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8007180:	f000 fd54 	bl	8007c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8007184:	2303      	movs	r3, #3
 8007186:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8007188:	2303      	movs	r3, #3
 800718a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800718c:	463b      	mov	r3, r7
 800718e:	4619      	mov	r1, r3
 8007190:	4828      	ldr	r0, [pc, #160]	; (8007234 <MX_ADC2_Init+0x15c>)
 8007192:	f001 fd93 	bl	8008cbc <HAL_ADC_ConfigChannel>
 8007196:	4603      	mov	r3, r0
 8007198:	2b00      	cmp	r3, #0
 800719a:	d001      	beq.n	80071a0 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 800719c:	f000 fd46 	bl	8007c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80071a0:	2302      	movs	r3, #2
 80071a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80071a4:	2304      	movs	r3, #4
 80071a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80071a8:	463b      	mov	r3, r7
 80071aa:	4619      	mov	r1, r3
 80071ac:	4821      	ldr	r0, [pc, #132]	; (8007234 <MX_ADC2_Init+0x15c>)
 80071ae:	f001 fd85 	bl	8008cbc <HAL_ADC_ConfigChannel>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d001      	beq.n	80071bc <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80071b8:	f000 fd38 	bl	8007c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80071bc:	2304      	movs	r3, #4
 80071be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80071c0:	2305      	movs	r3, #5
 80071c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80071c4:	463b      	mov	r3, r7
 80071c6:	4619      	mov	r1, r3
 80071c8:	481a      	ldr	r0, [pc, #104]	; (8007234 <MX_ADC2_Init+0x15c>)
 80071ca:	f001 fd77 	bl	8008cbc <HAL_ADC_ConfigChannel>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d001      	beq.n	80071d8 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 80071d4:	f000 fd2a 	bl	8007c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80071d8:	2305      	movs	r3, #5
 80071da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80071dc:	2306      	movs	r3, #6
 80071de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80071e0:	463b      	mov	r3, r7
 80071e2:	4619      	mov	r1, r3
 80071e4:	4813      	ldr	r0, [pc, #76]	; (8007234 <MX_ADC2_Init+0x15c>)
 80071e6:	f001 fd69 	bl	8008cbc <HAL_ADC_ConfigChannel>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d001      	beq.n	80071f4 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 80071f0:	f000 fd1c 	bl	8007c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80071f4:	2306      	movs	r3, #6
 80071f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80071f8:	2307      	movs	r3, #7
 80071fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80071fc:	463b      	mov	r3, r7
 80071fe:	4619      	mov	r1, r3
 8007200:	480c      	ldr	r0, [pc, #48]	; (8007234 <MX_ADC2_Init+0x15c>)
 8007202:	f001 fd5b 	bl	8008cbc <HAL_ADC_ConfigChannel>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d001      	beq.n	8007210 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 800720c:	f000 fd0e 	bl	8007c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8007210:	2307      	movs	r3, #7
 8007212:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8007214:	2308      	movs	r3, #8
 8007216:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007218:	463b      	mov	r3, r7
 800721a:	4619      	mov	r1, r3
 800721c:	4805      	ldr	r0, [pc, #20]	; (8007234 <MX_ADC2_Init+0x15c>)
 800721e:	f001 fd4d 	bl	8008cbc <HAL_ADC_ConfigChannel>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d001      	beq.n	800722c <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8007228:	f000 fd00 	bl	8007c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800722c:	bf00      	nop
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	200008f8 	.word	0x200008f8
 8007238:	40012100 	.word	0x40012100
 800723c:	0f000001 	.word	0x0f000001

08007240 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b08c      	sub	sp, #48	; 0x30
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007248:	f107 031c 	add.w	r3, r7, #28
 800724c:	2200      	movs	r2, #0
 800724e:	601a      	str	r2, [r3, #0]
 8007250:	605a      	str	r2, [r3, #4]
 8007252:	609a      	str	r2, [r3, #8]
 8007254:	60da      	str	r2, [r3, #12]
 8007256:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a6b      	ldr	r2, [pc, #428]	; (800740c <HAL_ADC_MspInit+0x1cc>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d157      	bne.n	8007312 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007262:	2300      	movs	r3, #0
 8007264:	61bb      	str	r3, [r7, #24]
 8007266:	4b6a      	ldr	r3, [pc, #424]	; (8007410 <HAL_ADC_MspInit+0x1d0>)
 8007268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800726a:	4a69      	ldr	r2, [pc, #420]	; (8007410 <HAL_ADC_MspInit+0x1d0>)
 800726c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007270:	6453      	str	r3, [r2, #68]	; 0x44
 8007272:	4b67      	ldr	r3, [pc, #412]	; (8007410 <HAL_ADC_MspInit+0x1d0>)
 8007274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800727a:	61bb      	str	r3, [r7, #24]
 800727c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800727e:	2300      	movs	r3, #0
 8007280:	617b      	str	r3, [r7, #20]
 8007282:	4b63      	ldr	r3, [pc, #396]	; (8007410 <HAL_ADC_MspInit+0x1d0>)
 8007284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007286:	4a62      	ldr	r2, [pc, #392]	; (8007410 <HAL_ADC_MspInit+0x1d0>)
 8007288:	f043 0304 	orr.w	r3, r3, #4
 800728c:	6313      	str	r3, [r2, #48]	; 0x30
 800728e:	4b60      	ldr	r3, [pc, #384]	; (8007410 <HAL_ADC_MspInit+0x1d0>)
 8007290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007292:	f003 0304 	and.w	r3, r3, #4
 8007296:	617b      	str	r3, [r7, #20]
 8007298:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 800729a:	2305      	movs	r3, #5
 800729c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800729e:	2303      	movs	r3, #3
 80072a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072a2:	2300      	movs	r3, #0
 80072a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80072a6:	f107 031c 	add.w	r3, r7, #28
 80072aa:	4619      	mov	r1, r3
 80072ac:	4859      	ldr	r0, [pc, #356]	; (8007414 <HAL_ADC_MspInit+0x1d4>)
 80072ae:	f003 faaf 	bl	800a810 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80072b2:	4b59      	ldr	r3, [pc, #356]	; (8007418 <HAL_ADC_MspInit+0x1d8>)
 80072b4:	4a59      	ldr	r2, [pc, #356]	; (800741c <HAL_ADC_MspInit+0x1dc>)
 80072b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80072b8:	4b57      	ldr	r3, [pc, #348]	; (8007418 <HAL_ADC_MspInit+0x1d8>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80072be:	4b56      	ldr	r3, [pc, #344]	; (8007418 <HAL_ADC_MspInit+0x1d8>)
 80072c0:	2200      	movs	r2, #0
 80072c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80072c4:	4b54      	ldr	r3, [pc, #336]	; (8007418 <HAL_ADC_MspInit+0x1d8>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80072ca:	4b53      	ldr	r3, [pc, #332]	; (8007418 <HAL_ADC_MspInit+0x1d8>)
 80072cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072d0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80072d2:	4b51      	ldr	r3, [pc, #324]	; (8007418 <HAL_ADC_MspInit+0x1d8>)
 80072d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072d8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80072da:	4b4f      	ldr	r3, [pc, #316]	; (8007418 <HAL_ADC_MspInit+0x1d8>)
 80072dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80072e0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80072e2:	4b4d      	ldr	r3, [pc, #308]	; (8007418 <HAL_ADC_MspInit+0x1d8>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80072e8:	4b4b      	ldr	r3, [pc, #300]	; (8007418 <HAL_ADC_MspInit+0x1d8>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80072ee:	4b4a      	ldr	r3, [pc, #296]	; (8007418 <HAL_ADC_MspInit+0x1d8>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80072f4:	4848      	ldr	r0, [pc, #288]	; (8007418 <HAL_ADC_MspInit+0x1d8>)
 80072f6:	f002 ff1b 	bl	800a130 <HAL_DMA_Init>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d001      	beq.n	8007304 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8007300:	f000 fc94 	bl	8007c2c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a44      	ldr	r2, [pc, #272]	; (8007418 <HAL_ADC_MspInit+0x1d8>)
 8007308:	639a      	str	r2, [r3, #56]	; 0x38
 800730a:	4a43      	ldr	r2, [pc, #268]	; (8007418 <HAL_ADC_MspInit+0x1d8>)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8007310:	e077      	b.n	8007402 <HAL_ADC_MspInit+0x1c2>
  else if(adcHandle->Instance==ADC2)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a42      	ldr	r2, [pc, #264]	; (8007420 <HAL_ADC_MspInit+0x1e0>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d172      	bne.n	8007402 <HAL_ADC_MspInit+0x1c2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800731c:	2300      	movs	r3, #0
 800731e:	613b      	str	r3, [r7, #16]
 8007320:	4b3b      	ldr	r3, [pc, #236]	; (8007410 <HAL_ADC_MspInit+0x1d0>)
 8007322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007324:	4a3a      	ldr	r2, [pc, #232]	; (8007410 <HAL_ADC_MspInit+0x1d0>)
 8007326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800732a:	6453      	str	r3, [r2, #68]	; 0x44
 800732c:	4b38      	ldr	r3, [pc, #224]	; (8007410 <HAL_ADC_MspInit+0x1d0>)
 800732e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007334:	613b      	str	r3, [r7, #16]
 8007336:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007338:	2300      	movs	r3, #0
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	4b34      	ldr	r3, [pc, #208]	; (8007410 <HAL_ADC_MspInit+0x1d0>)
 800733e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007340:	4a33      	ldr	r2, [pc, #204]	; (8007410 <HAL_ADC_MspInit+0x1d0>)
 8007342:	f043 0304 	orr.w	r3, r3, #4
 8007346:	6313      	str	r3, [r2, #48]	; 0x30
 8007348:	4b31      	ldr	r3, [pc, #196]	; (8007410 <HAL_ADC_MspInit+0x1d0>)
 800734a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734c:	f003 0304 	and.w	r3, r3, #4
 8007350:	60fb      	str	r3, [r7, #12]
 8007352:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007354:	2300      	movs	r3, #0
 8007356:	60bb      	str	r3, [r7, #8]
 8007358:	4b2d      	ldr	r3, [pc, #180]	; (8007410 <HAL_ADC_MspInit+0x1d0>)
 800735a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800735c:	4a2c      	ldr	r2, [pc, #176]	; (8007410 <HAL_ADC_MspInit+0x1d0>)
 800735e:	f043 0301 	orr.w	r3, r3, #1
 8007362:	6313      	str	r3, [r2, #48]	; 0x30
 8007364:	4b2a      	ldr	r3, [pc, #168]	; (8007410 <HAL_ADC_MspInit+0x1d0>)
 8007366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007368:	f003 0301 	and.w	r3, r3, #1
 800736c:	60bb      	str	r3, [r7, #8]
 800736e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin|AN2_Pin|AN1_Pin;
 8007370:	2335      	movs	r3, #53	; 0x35
 8007372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007374:	2303      	movs	r3, #3
 8007376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007378:	2300      	movs	r3, #0
 800737a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800737c:	f107 031c 	add.w	r3, r7, #28
 8007380:	4619      	mov	r1, r3
 8007382:	4824      	ldr	r0, [pc, #144]	; (8007414 <HAL_ADC_MspInit+0x1d4>)
 8007384:	f003 fa44 	bl	800a810 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AN4_Pin|AN3_Pin|AN5_Pin|AN6_Pin
 8007388:	23fc      	movs	r3, #252	; 0xfc
 800738a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800738c:	2303      	movs	r3, #3
 800738e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007390:	2300      	movs	r3, #0
 8007392:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007394:	f107 031c 	add.w	r3, r7, #28
 8007398:	4619      	mov	r1, r3
 800739a:	4822      	ldr	r0, [pc, #136]	; (8007424 <HAL_ADC_MspInit+0x1e4>)
 800739c:	f003 fa38 	bl	800a810 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80073a0:	4b21      	ldr	r3, [pc, #132]	; (8007428 <HAL_ADC_MspInit+0x1e8>)
 80073a2:	4a22      	ldr	r2, [pc, #136]	; (800742c <HAL_ADC_MspInit+0x1ec>)
 80073a4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80073a6:	4b20      	ldr	r3, [pc, #128]	; (8007428 <HAL_ADC_MspInit+0x1e8>)
 80073a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80073ac:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80073ae:	4b1e      	ldr	r3, [pc, #120]	; (8007428 <HAL_ADC_MspInit+0x1e8>)
 80073b0:	2200      	movs	r2, #0
 80073b2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80073b4:	4b1c      	ldr	r3, [pc, #112]	; (8007428 <HAL_ADC_MspInit+0x1e8>)
 80073b6:	2200      	movs	r2, #0
 80073b8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80073ba:	4b1b      	ldr	r3, [pc, #108]	; (8007428 <HAL_ADC_MspInit+0x1e8>)
 80073bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80073c0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80073c2:	4b19      	ldr	r3, [pc, #100]	; (8007428 <HAL_ADC_MspInit+0x1e8>)
 80073c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80073c8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80073ca:	4b17      	ldr	r3, [pc, #92]	; (8007428 <HAL_ADC_MspInit+0x1e8>)
 80073cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80073d0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80073d2:	4b15      	ldr	r3, [pc, #84]	; (8007428 <HAL_ADC_MspInit+0x1e8>)
 80073d4:	2200      	movs	r2, #0
 80073d6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 80073d8:	4b13      	ldr	r3, [pc, #76]	; (8007428 <HAL_ADC_MspInit+0x1e8>)
 80073da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80073de:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80073e0:	4b11      	ldr	r3, [pc, #68]	; (8007428 <HAL_ADC_MspInit+0x1e8>)
 80073e2:	2200      	movs	r2, #0
 80073e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80073e6:	4810      	ldr	r0, [pc, #64]	; (8007428 <HAL_ADC_MspInit+0x1e8>)
 80073e8:	f002 fea2 	bl	800a130 <HAL_DMA_Init>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <HAL_ADC_MspInit+0x1b6>
      Error_Handler();
 80073f2:	f000 fc1b 	bl	8007c2c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a0b      	ldr	r2, [pc, #44]	; (8007428 <HAL_ADC_MspInit+0x1e8>)
 80073fa:	639a      	str	r2, [r3, #56]	; 0x38
 80073fc:	4a0a      	ldr	r2, [pc, #40]	; (8007428 <HAL_ADC_MspInit+0x1e8>)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6393      	str	r3, [r2, #56]	; 0x38
}
 8007402:	bf00      	nop
 8007404:	3730      	adds	r7, #48	; 0x30
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	40012000 	.word	0x40012000
 8007410:	40023800 	.word	0x40023800
 8007414:	40020800 	.word	0x40020800
 8007418:	20000940 	.word	0x20000940
 800741c:	40026410 	.word	0x40026410
 8007420:	40012100 	.word	0x40012100
 8007424:	40020000 	.word	0x40020000
 8007428:	200009a0 	.word	0x200009a0
 800742c:	40026440 	.word	0x40026440

08007430 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8007434:	4b17      	ldr	r3, [pc, #92]	; (8007494 <MX_CAN1_Init+0x64>)
 8007436:	4a18      	ldr	r2, [pc, #96]	; (8007498 <MX_CAN1_Init+0x68>)
 8007438:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800743a:	4b16      	ldr	r3, [pc, #88]	; (8007494 <MX_CAN1_Init+0x64>)
 800743c:	2203      	movs	r2, #3
 800743e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8007440:	4b14      	ldr	r3, [pc, #80]	; (8007494 <MX_CAN1_Init+0x64>)
 8007442:	2200      	movs	r2, #0
 8007444:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007446:	4b13      	ldr	r3, [pc, #76]	; (8007494 <MX_CAN1_Init+0x64>)
 8007448:	2200      	movs	r2, #0
 800744a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 800744c:	4b11      	ldr	r3, [pc, #68]	; (8007494 <MX_CAN1_Init+0x64>)
 800744e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8007452:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8007454:	4b0f      	ldr	r3, [pc, #60]	; (8007494 <MX_CAN1_Init+0x64>)
 8007456:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800745a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800745c:	4b0d      	ldr	r3, [pc, #52]	; (8007494 <MX_CAN1_Init+0x64>)
 800745e:	2200      	movs	r2, #0
 8007460:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8007462:	4b0c      	ldr	r3, [pc, #48]	; (8007494 <MX_CAN1_Init+0x64>)
 8007464:	2201      	movs	r2, #1
 8007466:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8007468:	4b0a      	ldr	r3, [pc, #40]	; (8007494 <MX_CAN1_Init+0x64>)
 800746a:	2200      	movs	r2, #0
 800746c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800746e:	4b09      	ldr	r3, [pc, #36]	; (8007494 <MX_CAN1_Init+0x64>)
 8007470:	2201      	movs	r2, #1
 8007472:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8007474:	4b07      	ldr	r3, [pc, #28]	; (8007494 <MX_CAN1_Init+0x64>)
 8007476:	2200      	movs	r2, #0
 8007478:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800747a:	4b06      	ldr	r3, [pc, #24]	; (8007494 <MX_CAN1_Init+0x64>)
 800747c:	2200      	movs	r2, #0
 800747e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8007480:	4804      	ldr	r0, [pc, #16]	; (8007494 <MX_CAN1_Init+0x64>)
 8007482:	f001 febb 	bl	80091fc <HAL_CAN_Init>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800748c:	f000 fbce 	bl	8007c2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8007490:	bf00      	nop
 8007492:	bd80      	pop	{r7, pc}
 8007494:	20000a00 	.word	0x20000a00
 8007498:	40006400 	.word	0x40006400

0800749c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80074a0:	4b17      	ldr	r3, [pc, #92]	; (8007500 <MX_CAN2_Init+0x64>)
 80074a2:	4a18      	ldr	r2, [pc, #96]	; (8007504 <MX_CAN2_Init+0x68>)
 80074a4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 80074a6:	4b16      	ldr	r3, [pc, #88]	; (8007500 <MX_CAN2_Init+0x64>)
 80074a8:	2203      	movs	r2, #3
 80074aa:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80074ac:	4b14      	ldr	r3, [pc, #80]	; (8007500 <MX_CAN2_Init+0x64>)
 80074ae:	2200      	movs	r2, #0
 80074b0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80074b2:	4b13      	ldr	r3, [pc, #76]	; (8007500 <MX_CAN2_Init+0x64>)
 80074b4:	2200      	movs	r2, #0
 80074b6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 80074b8:	4b11      	ldr	r3, [pc, #68]	; (8007500 <MX_CAN2_Init+0x64>)
 80074ba:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80074be:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80074c0:	4b0f      	ldr	r3, [pc, #60]	; (8007500 <MX_CAN2_Init+0x64>)
 80074c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80074c6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80074c8:	4b0d      	ldr	r3, [pc, #52]	; (8007500 <MX_CAN2_Init+0x64>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 80074ce:	4b0c      	ldr	r3, [pc, #48]	; (8007500 <MX_CAN2_Init+0x64>)
 80074d0:	2201      	movs	r2, #1
 80074d2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80074d4:	4b0a      	ldr	r3, [pc, #40]	; (8007500 <MX_CAN2_Init+0x64>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 80074da:	4b09      	ldr	r3, [pc, #36]	; (8007500 <MX_CAN2_Init+0x64>)
 80074dc:	2201      	movs	r2, #1
 80074de:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80074e0:	4b07      	ldr	r3, [pc, #28]	; (8007500 <MX_CAN2_Init+0x64>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80074e6:	4b06      	ldr	r3, [pc, #24]	; (8007500 <MX_CAN2_Init+0x64>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80074ec:	4804      	ldr	r0, [pc, #16]	; (8007500 <MX_CAN2_Init+0x64>)
 80074ee:	f001 fe85 	bl	80091fc <HAL_CAN_Init>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d001      	beq.n	80074fc <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80074f8:	f000 fb98 	bl	8007c2c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80074fc:	bf00      	nop
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	20000a28 	.word	0x20000a28
 8007504:	40006800 	.word	0x40006800

08007508 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b08c      	sub	sp, #48	; 0x30
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007510:	f107 031c 	add.w	r3, r7, #28
 8007514:	2200      	movs	r2, #0
 8007516:	601a      	str	r2, [r3, #0]
 8007518:	605a      	str	r2, [r3, #4]
 800751a:	609a      	str	r2, [r3, #8]
 800751c:	60da      	str	r2, [r3, #12]
 800751e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4a5a      	ldr	r2, [pc, #360]	; (8007690 <HAL_CAN_MspInit+0x188>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d14d      	bne.n	80075c6 <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800752a:	4b5a      	ldr	r3, [pc, #360]	; (8007694 <HAL_CAN_MspInit+0x18c>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3301      	adds	r3, #1
 8007530:	4a58      	ldr	r2, [pc, #352]	; (8007694 <HAL_CAN_MspInit+0x18c>)
 8007532:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8007534:	4b57      	ldr	r3, [pc, #348]	; (8007694 <HAL_CAN_MspInit+0x18c>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d10d      	bne.n	8007558 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800753c:	2300      	movs	r3, #0
 800753e:	61bb      	str	r3, [r7, #24]
 8007540:	4b55      	ldr	r3, [pc, #340]	; (8007698 <HAL_CAN_MspInit+0x190>)
 8007542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007544:	4a54      	ldr	r2, [pc, #336]	; (8007698 <HAL_CAN_MspInit+0x190>)
 8007546:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800754a:	6413      	str	r3, [r2, #64]	; 0x40
 800754c:	4b52      	ldr	r3, [pc, #328]	; (8007698 <HAL_CAN_MspInit+0x190>)
 800754e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007554:	61bb      	str	r3, [r7, #24]
 8007556:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007558:	2300      	movs	r3, #0
 800755a:	617b      	str	r3, [r7, #20]
 800755c:	4b4e      	ldr	r3, [pc, #312]	; (8007698 <HAL_CAN_MspInit+0x190>)
 800755e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007560:	4a4d      	ldr	r2, [pc, #308]	; (8007698 <HAL_CAN_MspInit+0x190>)
 8007562:	f043 0308 	orr.w	r3, r3, #8
 8007566:	6313      	str	r3, [r2, #48]	; 0x30
 8007568:	4b4b      	ldr	r3, [pc, #300]	; (8007698 <HAL_CAN_MspInit+0x190>)
 800756a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800756c:	f003 0308 	and.w	r3, r3, #8
 8007570:	617b      	str	r3, [r7, #20]
 8007572:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007574:	2303      	movs	r3, #3
 8007576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007578:	2302      	movs	r3, #2
 800757a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800757c:	2300      	movs	r3, #0
 800757e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007580:	2303      	movs	r3, #3
 8007582:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8007584:	2309      	movs	r3, #9
 8007586:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007588:	f107 031c 	add.w	r3, r7, #28
 800758c:	4619      	mov	r1, r3
 800758e:	4843      	ldr	r0, [pc, #268]	; (800769c <HAL_CAN_MspInit+0x194>)
 8007590:	f003 f93e 	bl	800a810 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8007594:	2200      	movs	r2, #0
 8007596:	2105      	movs	r1, #5
 8007598:	2013      	movs	r0, #19
 800759a:	f002 fd83 	bl	800a0a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800759e:	2013      	movs	r0, #19
 80075a0:	f002 fd9c 	bl	800a0dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80075a4:	2200      	movs	r2, #0
 80075a6:	2105      	movs	r1, #5
 80075a8:	2014      	movs	r0, #20
 80075aa:	f002 fd7b 	bl	800a0a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80075ae:	2014      	movs	r0, #20
 80075b0:	f002 fd94 	bl	800a0dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80075b4:	2200      	movs	r2, #0
 80075b6:	2105      	movs	r1, #5
 80075b8:	2015      	movs	r0, #21
 80075ba:	f002 fd73 	bl	800a0a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80075be:	2015      	movs	r0, #21
 80075c0:	f002 fd8c 	bl	800a0dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80075c4:	e05f      	b.n	8007686 <HAL_CAN_MspInit+0x17e>
  else if(canHandle->Instance==CAN2)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a35      	ldr	r2, [pc, #212]	; (80076a0 <HAL_CAN_MspInit+0x198>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d15a      	bne.n	8007686 <HAL_CAN_MspInit+0x17e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80075d0:	2300      	movs	r3, #0
 80075d2:	613b      	str	r3, [r7, #16]
 80075d4:	4b30      	ldr	r3, [pc, #192]	; (8007698 <HAL_CAN_MspInit+0x190>)
 80075d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d8:	4a2f      	ldr	r2, [pc, #188]	; (8007698 <HAL_CAN_MspInit+0x190>)
 80075da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075de:	6413      	str	r3, [r2, #64]	; 0x40
 80075e0:	4b2d      	ldr	r3, [pc, #180]	; (8007698 <HAL_CAN_MspInit+0x190>)
 80075e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80075e8:	613b      	str	r3, [r7, #16]
 80075ea:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80075ec:	4b29      	ldr	r3, [pc, #164]	; (8007694 <HAL_CAN_MspInit+0x18c>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	3301      	adds	r3, #1
 80075f2:	4a28      	ldr	r2, [pc, #160]	; (8007694 <HAL_CAN_MspInit+0x18c>)
 80075f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80075f6:	4b27      	ldr	r3, [pc, #156]	; (8007694 <HAL_CAN_MspInit+0x18c>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d10d      	bne.n	800761a <HAL_CAN_MspInit+0x112>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80075fe:	2300      	movs	r3, #0
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	4b25      	ldr	r3, [pc, #148]	; (8007698 <HAL_CAN_MspInit+0x190>)
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	4a24      	ldr	r2, [pc, #144]	; (8007698 <HAL_CAN_MspInit+0x190>)
 8007608:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800760c:	6413      	str	r3, [r2, #64]	; 0x40
 800760e:	4b22      	ldr	r3, [pc, #136]	; (8007698 <HAL_CAN_MspInit+0x190>)
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007616:	60fb      	str	r3, [r7, #12]
 8007618:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800761a:	2300      	movs	r3, #0
 800761c:	60bb      	str	r3, [r7, #8]
 800761e:	4b1e      	ldr	r3, [pc, #120]	; (8007698 <HAL_CAN_MspInit+0x190>)
 8007620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007622:	4a1d      	ldr	r2, [pc, #116]	; (8007698 <HAL_CAN_MspInit+0x190>)
 8007624:	f043 0302 	orr.w	r3, r3, #2
 8007628:	6313      	str	r3, [r2, #48]	; 0x30
 800762a:	4b1b      	ldr	r3, [pc, #108]	; (8007698 <HAL_CAN_MspInit+0x190>)
 800762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	60bb      	str	r3, [r7, #8]
 8007634:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8007636:	2360      	movs	r3, #96	; 0x60
 8007638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800763a:	2302      	movs	r3, #2
 800763c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800763e:	2300      	movs	r3, #0
 8007640:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007642:	2303      	movs	r3, #3
 8007644:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8007646:	2309      	movs	r3, #9
 8007648:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800764a:	f107 031c 	add.w	r3, r7, #28
 800764e:	4619      	mov	r1, r3
 8007650:	4814      	ldr	r0, [pc, #80]	; (80076a4 <HAL_CAN_MspInit+0x19c>)
 8007652:	f003 f8dd 	bl	800a810 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8007656:	2200      	movs	r2, #0
 8007658:	2105      	movs	r1, #5
 800765a:	203f      	movs	r0, #63	; 0x3f
 800765c:	f002 fd22 	bl	800a0a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8007660:	203f      	movs	r0, #63	; 0x3f
 8007662:	f002 fd3b 	bl	800a0dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8007666:	2200      	movs	r2, #0
 8007668:	2105      	movs	r1, #5
 800766a:	2040      	movs	r0, #64	; 0x40
 800766c:	f002 fd1a 	bl	800a0a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8007670:	2040      	movs	r0, #64	; 0x40
 8007672:	f002 fd33 	bl	800a0dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8007676:	2200      	movs	r2, #0
 8007678:	2105      	movs	r1, #5
 800767a:	2041      	movs	r0, #65	; 0x41
 800767c:	f002 fd12 	bl	800a0a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8007680:	2041      	movs	r0, #65	; 0x41
 8007682:	f002 fd2b 	bl	800a0dc <HAL_NVIC_EnableIRQ>
}
 8007686:	bf00      	nop
 8007688:	3730      	adds	r7, #48	; 0x30
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	40006400 	.word	0x40006400
 8007694:	20000a50 	.word	0x20000a50
 8007698:	40023800 	.word	0x40023800
 800769c:	40020c00 	.word	0x40020c00
 80076a0:	40006800 	.word	0x40006800
 80076a4:	40020400 	.word	0x40020400

080076a8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80076ac:	4b06      	ldr	r3, [pc, #24]	; (80076c8 <MX_CRC_Init+0x20>)
 80076ae:	4a07      	ldr	r2, [pc, #28]	; (80076cc <MX_CRC_Init+0x24>)
 80076b0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80076b2:	4805      	ldr	r0, [pc, #20]	; (80076c8 <MX_CRC_Init+0x20>)
 80076b4:	f002 fd20 	bl	800a0f8 <HAL_CRC_Init>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80076be:	f000 fab5 	bl	8007c2c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80076c2:	bf00      	nop
 80076c4:	bd80      	pop	{r7, pc}
 80076c6:	bf00      	nop
 80076c8:	20000a54 	.word	0x20000a54
 80076cc:	40023000 	.word	0x40023000

080076d0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a0b      	ldr	r2, [pc, #44]	; (800770c <HAL_CRC_MspInit+0x3c>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d10d      	bne.n	80076fe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80076e2:	2300      	movs	r3, #0
 80076e4:	60fb      	str	r3, [r7, #12]
 80076e6:	4b0a      	ldr	r3, [pc, #40]	; (8007710 <HAL_CRC_MspInit+0x40>)
 80076e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ea:	4a09      	ldr	r2, [pc, #36]	; (8007710 <HAL_CRC_MspInit+0x40>)
 80076ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80076f0:	6313      	str	r3, [r2, #48]	; 0x30
 80076f2:	4b07      	ldr	r3, [pc, #28]	; (8007710 <HAL_CRC_MspInit+0x40>)
 80076f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076fa:	60fb      	str	r3, [r7, #12]
 80076fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80076fe:	bf00      	nop
 8007700:	3714      	adds	r7, #20
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	40023000 	.word	0x40023000
 8007710:	40023800 	.word	0x40023800

08007714 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800771a:	2300      	movs	r3, #0
 800771c:	607b      	str	r3, [r7, #4]
 800771e:	4b18      	ldr	r3, [pc, #96]	; (8007780 <MX_DMA_Init+0x6c>)
 8007720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007722:	4a17      	ldr	r2, [pc, #92]	; (8007780 <MX_DMA_Init+0x6c>)
 8007724:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007728:	6313      	str	r3, [r2, #48]	; 0x30
 800772a:	4b15      	ldr	r3, [pc, #84]	; (8007780 <MX_DMA_Init+0x6c>)
 800772c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007732:	607b      	str	r3, [r7, #4]
 8007734:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8007736:	2200      	movs	r2, #0
 8007738:	2105      	movs	r1, #5
 800773a:	2038      	movs	r0, #56	; 0x38
 800773c:	f002 fcb2 	bl	800a0a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8007740:	2038      	movs	r0, #56	; 0x38
 8007742:	f002 fccb 	bl	800a0dc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8007746:	2200      	movs	r2, #0
 8007748:	2105      	movs	r1, #5
 800774a:	203a      	movs	r0, #58	; 0x3a
 800774c:	f002 fcaa 	bl	800a0a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8007750:	203a      	movs	r0, #58	; 0x3a
 8007752:	f002 fcc3 	bl	800a0dc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8007756:	2200      	movs	r2, #0
 8007758:	2105      	movs	r1, #5
 800775a:	2044      	movs	r0, #68	; 0x44
 800775c:	f002 fca2 	bl	800a0a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8007760:	2044      	movs	r0, #68	; 0x44
 8007762:	f002 fcbb 	bl	800a0dc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8007766:	2200      	movs	r2, #0
 8007768:	2105      	movs	r1, #5
 800776a:	2046      	movs	r0, #70	; 0x46
 800776c:	f002 fc9a 	bl	800a0a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8007770:	2046      	movs	r0, #70	; 0x46
 8007772:	f002 fcb3 	bl	800a0dc <HAL_NVIC_EnableIRQ>

}
 8007776:	bf00      	nop
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	40023800 	.word	0x40023800

08007784 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8007784:	b480      	push	{r7}
 8007786:	af00      	add	r7, sp, #0

}
 8007788:	bf00      	nop
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr

08007792 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8007792:	b480      	push	{r7}
 8007794:	af00      	add	r7, sp, #0
return 0;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b083      	sub	sp, #12
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80077ac:	bf00      	nop
 80077ae:	370c      	adds	r7, #12
 80077b0:	46bd      	mov	sp, r7
 80077b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b6:	4770      	bx	lr

080077b8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 80077b8:	b480      	push	{r7}
 80077ba:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80077bc:	bf00      	nop
 80077be:	46bd      	mov	sp, r7
 80077c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c4:	4770      	bx	lr
	...

080077c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of printQueue */
  printQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &printQueue_attributes);
 80077cc:	4a14      	ldr	r2, [pc, #80]	; (8007820 <MX_FREERTOS_Init+0x58>)
 80077ce:	2101      	movs	r1, #1
 80077d0:	2010      	movs	r0, #16
 80077d2:	f007 fd31 	bl	800f238 <osMessageQueueNew>
 80077d6:	4603      	mov	r3, r0
 80077d8:	4a12      	ldr	r2, [pc, #72]	; (8007824 <MX_FREERTOS_Init+0x5c>)
 80077da:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80077dc:	4a12      	ldr	r2, [pc, #72]	; (8007828 <MX_FREERTOS_Init+0x60>)
 80077de:	2100      	movs	r1, #0
 80077e0:	4812      	ldr	r0, [pc, #72]	; (800782c <MX_FREERTOS_Init+0x64>)
 80077e2:	f007 fa2f 	bl	800ec44 <osThreadNew>
 80077e6:	4603      	mov	r3, r0
 80077e8:	4a11      	ldr	r2, [pc, #68]	; (8007830 <MX_FREERTOS_Init+0x68>)
 80077ea:	6013      	str	r3, [r2, #0]

  /* creation of canzero */
  canzeroHandle = osThreadNew(canzero_start, NULL, &canzero_attributes);
 80077ec:	4a11      	ldr	r2, [pc, #68]	; (8007834 <MX_FREERTOS_Init+0x6c>)
 80077ee:	2100      	movs	r1, #0
 80077f0:	4811      	ldr	r0, [pc, #68]	; (8007838 <MX_FREERTOS_Init+0x70>)
 80077f2:	f007 fa27 	bl	800ec44 <osThreadNew>
 80077f6:	4603      	mov	r3, r0
 80077f8:	4a10      	ldr	r2, [pc, #64]	; (800783c <MX_FREERTOS_Init+0x74>)
 80077fa:	6013      	str	r3, [r2, #0]

  /* creation of main */
  mainHandle = osThreadNew(main_entry, NULL, &main_attributes);
 80077fc:	4a10      	ldr	r2, [pc, #64]	; (8007840 <MX_FREERTOS_Init+0x78>)
 80077fe:	2100      	movs	r1, #0
 8007800:	4810      	ldr	r0, [pc, #64]	; (8007844 <MX_FREERTOS_Init+0x7c>)
 8007802:	f007 fa1f 	bl	800ec44 <osThreadNew>
 8007806:	4603      	mov	r3, r0
 8007808:	4a0f      	ldr	r2, [pc, #60]	; (8007848 <MX_FREERTOS_Init+0x80>)
 800780a:	6013      	str	r3, [r2, #0]

  /* creation of info_task */
  info_taskHandle = osThreadNew(microcontroller_info_entry, NULL, &info_task_attributes);
 800780c:	4a0f      	ldr	r2, [pc, #60]	; (800784c <MX_FREERTOS_Init+0x84>)
 800780e:	2100      	movs	r1, #0
 8007810:	480f      	ldr	r0, [pc, #60]	; (8007850 <MX_FREERTOS_Init+0x88>)
 8007812:	f007 fa17 	bl	800ec44 <osThreadNew>
 8007816:	4603      	mov	r3, r0
 8007818:	4a0e      	ldr	r2, [pc, #56]	; (8007854 <MX_FREERTOS_Init+0x8c>)
 800781a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800781c:	bf00      	nop
 800781e:	bd80      	pop	{r7, pc}
 8007820:	08014040 	.word	0x08014040
 8007824:	20000d2c 	.word	0x20000d2c
 8007828:	08013fb0 	.word	0x08013fb0
 800782c:	08007859 	.word	0x08007859
 8007830:	20000a5c 	.word	0x20000a5c
 8007834:	08013fd4 	.word	0x08013fd4
 8007838:	08001f99 	.word	0x08001f99
 800783c:	20000d20 	.word	0x20000d20
 8007840:	08013ff8 	.word	0x08013ff8
 8007844:	08006c83 	.word	0x08006c83
 8007848:	20000d24 	.word	0x20000d24
 800784c:	0801401c 	.word	0x0801401c
 8007850:	08006f71 	.word	0x08006f71
 8007854:	20000d28 	.word	0x20000d28

08007858 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b082      	sub	sp, #8
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8007860:	2001      	movs	r0, #1
 8007862:	f007 fa81 	bl	800ed68 <osDelay>
 8007866:	e7fb      	b.n	8007860 <StartDefaultTask+0x8>

08007868 <MX_GPIO_Init>:
        * EXTI
     PC0   ------> SharedAnalog_PC0
     PC2   ------> SharedAnalog_PC2
*/
void MX_GPIO_Init(void)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b08a      	sub	sp, #40	; 0x28
 800786c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800786e:	f107 0314 	add.w	r3, r7, #20
 8007872:	2200      	movs	r2, #0
 8007874:	601a      	str	r2, [r3, #0]
 8007876:	605a      	str	r2, [r3, #4]
 8007878:	609a      	str	r2, [r3, #8]
 800787a:	60da      	str	r2, [r3, #12]
 800787c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800787e:	2300      	movs	r3, #0
 8007880:	613b      	str	r3, [r7, #16]
 8007882:	4b54      	ldr	r3, [pc, #336]	; (80079d4 <MX_GPIO_Init+0x16c>)
 8007884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007886:	4a53      	ldr	r2, [pc, #332]	; (80079d4 <MX_GPIO_Init+0x16c>)
 8007888:	f043 0304 	orr.w	r3, r3, #4
 800788c:	6313      	str	r3, [r2, #48]	; 0x30
 800788e:	4b51      	ldr	r3, [pc, #324]	; (80079d4 <MX_GPIO_Init+0x16c>)
 8007890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007892:	f003 0304 	and.w	r3, r3, #4
 8007896:	613b      	str	r3, [r7, #16]
 8007898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800789a:	2300      	movs	r3, #0
 800789c:	60fb      	str	r3, [r7, #12]
 800789e:	4b4d      	ldr	r3, [pc, #308]	; (80079d4 <MX_GPIO_Init+0x16c>)
 80078a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a2:	4a4c      	ldr	r2, [pc, #304]	; (80079d4 <MX_GPIO_Init+0x16c>)
 80078a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078a8:	6313      	str	r3, [r2, #48]	; 0x30
 80078aa:	4b4a      	ldr	r3, [pc, #296]	; (80079d4 <MX_GPIO_Init+0x16c>)
 80078ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078b2:	60fb      	str	r3, [r7, #12]
 80078b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80078b6:	2300      	movs	r3, #0
 80078b8:	60bb      	str	r3, [r7, #8]
 80078ba:	4b46      	ldr	r3, [pc, #280]	; (80079d4 <MX_GPIO_Init+0x16c>)
 80078bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078be:	4a45      	ldr	r2, [pc, #276]	; (80079d4 <MX_GPIO_Init+0x16c>)
 80078c0:	f043 0301 	orr.w	r3, r3, #1
 80078c4:	6313      	str	r3, [r2, #48]	; 0x30
 80078c6:	4b43      	ldr	r3, [pc, #268]	; (80079d4 <MX_GPIO_Init+0x16c>)
 80078c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	60bb      	str	r3, [r7, #8]
 80078d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80078d2:	2300      	movs	r3, #0
 80078d4:	607b      	str	r3, [r7, #4]
 80078d6:	4b3f      	ldr	r3, [pc, #252]	; (80079d4 <MX_GPIO_Init+0x16c>)
 80078d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078da:	4a3e      	ldr	r2, [pc, #248]	; (80079d4 <MX_GPIO_Init+0x16c>)
 80078dc:	f043 0302 	orr.w	r3, r3, #2
 80078e0:	6313      	str	r3, [r2, #48]	; 0x30
 80078e2:	4b3c      	ldr	r3, [pc, #240]	; (80079d4 <MX_GPIO_Init+0x16c>)
 80078e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078e6:	f003 0302 	and.w	r3, r3, #2
 80078ea:	607b      	str	r3, [r7, #4]
 80078ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80078ee:	2300      	movs	r3, #0
 80078f0:	603b      	str	r3, [r7, #0]
 80078f2:	4b38      	ldr	r3, [pc, #224]	; (80079d4 <MX_GPIO_Init+0x16c>)
 80078f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f6:	4a37      	ldr	r2, [pc, #220]	; (80079d4 <MX_GPIO_Init+0x16c>)
 80078f8:	f043 0308 	orr.w	r3, r3, #8
 80078fc:	6313      	str	r3, [r2, #48]	; 0x30
 80078fe:	4b35      	ldr	r3, [pc, #212]	; (80079d4 <MX_GPIO_Init+0x16c>)
 8007900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007902:	f003 0308 	and.w	r3, r3, #8
 8007906:	603b      	str	r3, [r7, #0]
 8007908:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin, GPIO_PIN_RESET);
 800790a:	2200      	movs	r2, #0
 800790c:	f641 4102 	movw	r1, #7170	; 0x1c02
 8007910:	4831      	ldr	r0, [pc, #196]	; (80079d8 <MX_GPIO_Init+0x170>)
 8007912:	f003 f919 	bl	800ab48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIN4_GPIO_Port, DIN4_Pin, GPIO_PIN_SET);
 8007916:	2201      	movs	r2, #1
 8007918:	2180      	movs	r1, #128	; 0x80
 800791a:	482f      	ldr	r0, [pc, #188]	; (80079d8 <MX_GPIO_Init+0x170>)
 800791c:	f003 f914 	bl	800ab48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 8007920:	2305      	movs	r3, #5
 8007922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007924:	2303      	movs	r3, #3
 8007926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007928:	2300      	movs	r3, #0
 800792a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800792c:	f107 0314 	add.w	r3, r7, #20
 8007930:	4619      	mov	r1, r3
 8007932:	482a      	ldr	r0, [pc, #168]	; (80079dc <MX_GPIO_Init+0x174>)
 8007934:	f002 ff6c 	bl	800a810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIN1_Pin|DIN2_Pin;
 8007938:	230a      	movs	r3, #10
 800793a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800793c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007942:	2300      	movs	r3, #0
 8007944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007946:	f107 0314 	add.w	r3, r7, #20
 800794a:	4619      	mov	r1, r3
 800794c:	4823      	ldr	r0, [pc, #140]	; (80079dc <MX_GPIO_Init+0x174>)
 800794e:	f002 ff5f 	bl	800a810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin;
 8007952:	f641 4302 	movw	r3, #7170	; 0x1c02
 8007956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007958:	2301      	movs	r3, #1
 800795a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800795c:	2300      	movs	r3, #0
 800795e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007960:	2300      	movs	r3, #0
 8007962:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007964:	f107 0314 	add.w	r3, r7, #20
 8007968:	4619      	mov	r1, r3
 800796a:	481b      	ldr	r0, [pc, #108]	; (80079d8 <MX_GPIO_Init+0x170>)
 800796c:	f002 ff50 	bl	800a810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SDC_IN_STATUS_Pin|SDC_OUT_STATUS_Pin;
 8007970:	2318      	movs	r3, #24
 8007972:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007974:	2300      	movs	r3, #0
 8007976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007978:	2300      	movs	r3, #0
 800797a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800797c:	f107 0314 	add.w	r3, r7, #20
 8007980:	4619      	mov	r1, r3
 8007982:	4817      	ldr	r0, [pc, #92]	; (80079e0 <MX_GPIO_Init+0x178>)
 8007984:	f002 ff44 	bl	800a810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIN3_Pin;
 8007988:	2310      	movs	r3, #16
 800798a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800798c:	2300      	movs	r3, #0
 800798e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007990:	2300      	movs	r3, #0
 8007992:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN3_GPIO_Port, &GPIO_InitStruct);
 8007994:	f107 0314 	add.w	r3, r7, #20
 8007998:	4619      	mov	r1, r3
 800799a:	480f      	ldr	r0, [pc, #60]	; (80079d8 <MX_GPIO_Init+0x170>)
 800799c:	f002 ff38 	bl	800a810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIN4_Pin;
 80079a0:	2380      	movs	r3, #128	; 0x80
 80079a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80079a4:	2301      	movs	r3, #1
 80079a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80079a8:	2302      	movs	r3, #2
 80079aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079ac:	2300      	movs	r3, #0
 80079ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIN4_GPIO_Port, &GPIO_InitStruct);
 80079b0:	f107 0314 	add.w	r3, r7, #20
 80079b4:	4619      	mov	r1, r3
 80079b6:	4808      	ldr	r0, [pc, #32]	; (80079d8 <MX_GPIO_Init+0x170>)
 80079b8:	f002 ff2a 	bl	800a810 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80079bc:	2200      	movs	r2, #0
 80079be:	2105      	movs	r1, #5
 80079c0:	2009      	movs	r0, #9
 80079c2:	f002 fb6f 	bl	800a0a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80079c6:	2009      	movs	r0, #9
 80079c8:	f002 fb88 	bl	800a0dc <HAL_NVIC_EnableIRQ>

}
 80079cc:	bf00      	nop
 80079ce:	3728      	adds	r7, #40	; 0x28
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	40023800 	.word	0x40023800
 80079d8:	40020400 	.word	0x40020400
 80079dc:	40020800 	.word	0x40020800
 80079e0:	40020c00 	.word	0x40020c00

080079e4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80079e8:	4b12      	ldr	r3, [pc, #72]	; (8007a34 <MX_I2C1_Init+0x50>)
 80079ea:	4a13      	ldr	r2, [pc, #76]	; (8007a38 <MX_I2C1_Init+0x54>)
 80079ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80079ee:	4b11      	ldr	r3, [pc, #68]	; (8007a34 <MX_I2C1_Init+0x50>)
 80079f0:	4a12      	ldr	r2, [pc, #72]	; (8007a3c <MX_I2C1_Init+0x58>)
 80079f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80079f4:	4b0f      	ldr	r3, [pc, #60]	; (8007a34 <MX_I2C1_Init+0x50>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80079fa:	4b0e      	ldr	r3, [pc, #56]	; (8007a34 <MX_I2C1_Init+0x50>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007a00:	4b0c      	ldr	r3, [pc, #48]	; (8007a34 <MX_I2C1_Init+0x50>)
 8007a02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007a08:	4b0a      	ldr	r3, [pc, #40]	; (8007a34 <MX_I2C1_Init+0x50>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007a0e:	4b09      	ldr	r3, [pc, #36]	; (8007a34 <MX_I2C1_Init+0x50>)
 8007a10:	2200      	movs	r2, #0
 8007a12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007a14:	4b07      	ldr	r3, [pc, #28]	; (8007a34 <MX_I2C1_Init+0x50>)
 8007a16:	2200      	movs	r2, #0
 8007a18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007a1a:	4b06      	ldr	r3, [pc, #24]	; (8007a34 <MX_I2C1_Init+0x50>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007a20:	4804      	ldr	r0, [pc, #16]	; (8007a34 <MX_I2C1_Init+0x50>)
 8007a22:	f003 f8c3 	bl	800abac <HAL_I2C_Init>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d001      	beq.n	8007a30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007a2c:	f000 f8fe 	bl	8007c2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007a30:	bf00      	nop
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	20000d30 	.word	0x20000d30
 8007a38:	40005400 	.word	0x40005400
 8007a3c:	000186a0 	.word	0x000186a0

08007a40 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b08a      	sub	sp, #40	; 0x28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a48:	f107 0314 	add.w	r3, r7, #20
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	601a      	str	r2, [r3, #0]
 8007a50:	605a      	str	r2, [r3, #4]
 8007a52:	609a      	str	r2, [r3, #8]
 8007a54:	60da      	str	r2, [r3, #12]
 8007a56:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a19      	ldr	r2, [pc, #100]	; (8007ac4 <HAL_I2C_MspInit+0x84>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d12c      	bne.n	8007abc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a62:	2300      	movs	r3, #0
 8007a64:	613b      	str	r3, [r7, #16]
 8007a66:	4b18      	ldr	r3, [pc, #96]	; (8007ac8 <HAL_I2C_MspInit+0x88>)
 8007a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6a:	4a17      	ldr	r2, [pc, #92]	; (8007ac8 <HAL_I2C_MspInit+0x88>)
 8007a6c:	f043 0302 	orr.w	r3, r3, #2
 8007a70:	6313      	str	r3, [r2, #48]	; 0x30
 8007a72:	4b15      	ldr	r3, [pc, #84]	; (8007ac8 <HAL_I2C_MspInit+0x88>)
 8007a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a76:	f003 0302 	and.w	r3, r3, #2
 8007a7a:	613b      	str	r3, [r7, #16]
 8007a7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_IMU_Pin|I2C_SDA_IMU_Pin;
 8007a7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a84:	2312      	movs	r3, #18
 8007a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007a90:	2304      	movs	r3, #4
 8007a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a94:	f107 0314 	add.w	r3, r7, #20
 8007a98:	4619      	mov	r1, r3
 8007a9a:	480c      	ldr	r0, [pc, #48]	; (8007acc <HAL_I2C_MspInit+0x8c>)
 8007a9c:	f002 feb8 	bl	800a810 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	60fb      	str	r3, [r7, #12]
 8007aa4:	4b08      	ldr	r3, [pc, #32]	; (8007ac8 <HAL_I2C_MspInit+0x88>)
 8007aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa8:	4a07      	ldr	r2, [pc, #28]	; (8007ac8 <HAL_I2C_MspInit+0x88>)
 8007aaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007aae:	6413      	str	r3, [r2, #64]	; 0x40
 8007ab0:	4b05      	ldr	r3, [pc, #20]	; (8007ac8 <HAL_I2C_MspInit+0x88>)
 8007ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ab8:	60fb      	str	r3, [r7, #12]
 8007aba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8007abc:	bf00      	nop
 8007abe:	3728      	adds	r7, #40	; 0x28
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}
 8007ac4:	40005400 	.word	0x40005400
 8007ac8:	40023800 	.word	0x40023800
 8007acc:	40020400 	.word	0x40020400

08007ad0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007ad4:	f000 ff52 	bl	800897c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007ad8:	f000 f82c 	bl	8007b34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007adc:	f7ff fec4 	bl	8007868 <MX_GPIO_Init>
  MX_DMA_Init();
 8007ae0:	f7ff fe18 	bl	8007714 <MX_DMA_Init>
  MX_ADC1_Init();
 8007ae4:	f7ff fa7c 	bl	8006fe0 <MX_ADC1_Init>
  MX_CAN1_Init();
 8007ae8:	f7ff fca2 	bl	8007430 <MX_CAN1_Init>
  MX_CAN2_Init();
 8007aec:	f7ff fcd6 	bl	800749c <MX_CAN2_Init>
  MX_CRC_Init();
 8007af0:	f7ff fdda 	bl	80076a8 <MX_CRC_Init>
  MX_RNG_Init();
 8007af4:	f000 f8a0 	bl	8007c38 <MX_RNG_Init>
  MX_USART2_UART_Init();
 8007af8:	f000 fe08 	bl	800870c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8007afc:	f000 fb96 	bl	800822c <MX_TIM4_Init>
  MX_ADC2_Init();
 8007b00:	f7ff faea 	bl	80070d8 <MX_ADC2_Init>
  MX_I2C1_Init();
 8007b04:	f7ff ff6e 	bl	80079e4 <MX_I2C1_Init>
  MX_SPI2_Init();
 8007b08:	f000 f8cc 	bl	8007ca4 <MX_SPI2_Init>
  MX_TIM5_Init();
 8007b0c:	f000 fc1a 	bl	8008344 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8007b10:	f000 fdd2 	bl	80086b8 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8007b14:	f000 fca4 	bl	8008460 <MX_TIM14_Init>
  MX_TIM2_Init();
 8007b18:	f000 faec 	bl	80080f4 <MX_TIM2_Init>
  MX_TIM9_Init();
 8007b1c:	f000 fc66 	bl	80083ec <MX_TIM9_Init>
  MX_TIM3_Init();
 8007b20:	f000 fb36 	bl	8008190 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8007b24:	f007 f844 	bl	800ebb0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8007b28:	f7ff fe4e 	bl	80077c8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8007b2c:	f007 f864 	bl	800ebf8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007b30:	e7fe      	b.n	8007b30 <main+0x60>
	...

08007b34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b094      	sub	sp, #80	; 0x50
 8007b38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007b3a:	f107 0320 	add.w	r3, r7, #32
 8007b3e:	2230      	movs	r2, #48	; 0x30
 8007b40:	2100      	movs	r1, #0
 8007b42:	4618      	mov	r0, r3
 8007b44:	f00b fe36 	bl	80137b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007b48:	f107 030c 	add.w	r3, r7, #12
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	601a      	str	r2, [r3, #0]
 8007b50:	605a      	str	r2, [r3, #4]
 8007b52:	609a      	str	r2, [r3, #8]
 8007b54:	60da      	str	r2, [r3, #12]
 8007b56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b58:	2300      	movs	r3, #0
 8007b5a:	60bb      	str	r3, [r7, #8]
 8007b5c:	4b28      	ldr	r3, [pc, #160]	; (8007c00 <SystemClock_Config+0xcc>)
 8007b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b60:	4a27      	ldr	r2, [pc, #156]	; (8007c00 <SystemClock_Config+0xcc>)
 8007b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b66:	6413      	str	r3, [r2, #64]	; 0x40
 8007b68:	4b25      	ldr	r3, [pc, #148]	; (8007c00 <SystemClock_Config+0xcc>)
 8007b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b70:	60bb      	str	r3, [r7, #8]
 8007b72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007b74:	2300      	movs	r3, #0
 8007b76:	607b      	str	r3, [r7, #4]
 8007b78:	4b22      	ldr	r3, [pc, #136]	; (8007c04 <SystemClock_Config+0xd0>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a21      	ldr	r2, [pc, #132]	; (8007c04 <SystemClock_Config+0xd0>)
 8007b7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b82:	6013      	str	r3, [r2, #0]
 8007b84:	4b1f      	ldr	r3, [pc, #124]	; (8007c04 <SystemClock_Config+0xd0>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b8c:	607b      	str	r3, [r7, #4]
 8007b8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007b90:	2301      	movs	r3, #1
 8007b92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007b94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007b98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007b9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007ba4:	2308      	movs	r3, #8
 8007ba6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007ba8:	23a8      	movs	r3, #168	; 0xa8
 8007baa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007bac:	2302      	movs	r3, #2
 8007bae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007bb0:	2307      	movs	r3, #7
 8007bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007bb4:	f107 0320 	add.w	r3, r7, #32
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f003 f93b 	bl	800ae34 <HAL_RCC_OscConfig>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d001      	beq.n	8007bc8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007bc4:	f000 f832 	bl	8007c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007bc8:	230f      	movs	r3, #15
 8007bca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007bcc:	2302      	movs	r3, #2
 8007bce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007bd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007bd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007be0:	f107 030c 	add.w	r3, r7, #12
 8007be4:	2105      	movs	r1, #5
 8007be6:	4618      	mov	r0, r3
 8007be8:	f003 fb9c 	bl	800b324 <HAL_RCC_ClockConfig>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8007bf2:	f000 f81b 	bl	8007c2c <Error_Handler>
  }
}
 8007bf6:	bf00      	nop
 8007bf8:	3750      	adds	r7, #80	; 0x50
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	40023800 	.word	0x40023800
 8007c04:	40007000 	.word	0x40007000

08007c08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a04      	ldr	r2, [pc, #16]	; (8007c28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d101      	bne.n	8007c1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8007c1a:	f000 fed1 	bl	80089c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007c1e:	bf00      	nop
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	40010000 	.word	0x40010000

08007c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8007c30:	b672      	cpsid	i
}
 8007c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007c34:	e7fe      	b.n	8007c34 <Error_Handler+0x8>
	...

08007c38 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8007c3c:	4b06      	ldr	r3, [pc, #24]	; (8007c58 <MX_RNG_Init+0x20>)
 8007c3e:	4a07      	ldr	r2, [pc, #28]	; (8007c5c <MX_RNG_Init+0x24>)
 8007c40:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8007c42:	4805      	ldr	r0, [pc, #20]	; (8007c58 <MX_RNG_Init+0x20>)
 8007c44:	f003 fdbe 	bl	800b7c4 <HAL_RNG_Init>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d001      	beq.n	8007c52 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8007c4e:	f7ff ffed 	bl	8007c2c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8007c52:	bf00      	nop
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop
 8007c58:	20000d84 	.word	0x20000d84
 8007c5c:	50060800 	.word	0x50060800

08007c60 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a0b      	ldr	r2, [pc, #44]	; (8007c9c <HAL_RNG_MspInit+0x3c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d10d      	bne.n	8007c8e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8007c72:	2300      	movs	r3, #0
 8007c74:	60fb      	str	r3, [r7, #12]
 8007c76:	4b0a      	ldr	r3, [pc, #40]	; (8007ca0 <HAL_RNG_MspInit+0x40>)
 8007c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7a:	4a09      	ldr	r2, [pc, #36]	; (8007ca0 <HAL_RNG_MspInit+0x40>)
 8007c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c80:	6353      	str	r3, [r2, #52]	; 0x34
 8007c82:	4b07      	ldr	r3, [pc, #28]	; (8007ca0 <HAL_RNG_MspInit+0x40>)
 8007c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c8a:	60fb      	str	r3, [r7, #12]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8007c8e:	bf00      	nop
 8007c90:	3714      	adds	r7, #20
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	50060800 	.word	0x50060800
 8007ca0:	40023800 	.word	0x40023800

08007ca4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007ca8:	4b17      	ldr	r3, [pc, #92]	; (8007d08 <MX_SPI2_Init+0x64>)
 8007caa:	4a18      	ldr	r2, [pc, #96]	; (8007d0c <MX_SPI2_Init+0x68>)
 8007cac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007cae:	4b16      	ldr	r3, [pc, #88]	; (8007d08 <MX_SPI2_Init+0x64>)
 8007cb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007cb4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007cb6:	4b14      	ldr	r3, [pc, #80]	; (8007d08 <MX_SPI2_Init+0x64>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007cbc:	4b12      	ldr	r3, [pc, #72]	; (8007d08 <MX_SPI2_Init+0x64>)
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007cc2:	4b11      	ldr	r3, [pc, #68]	; (8007d08 <MX_SPI2_Init+0x64>)
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007cc8:	4b0f      	ldr	r3, [pc, #60]	; (8007d08 <MX_SPI2_Init+0x64>)
 8007cca:	2200      	movs	r2, #0
 8007ccc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007cce:	4b0e      	ldr	r3, [pc, #56]	; (8007d08 <MX_SPI2_Init+0x64>)
 8007cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cd4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007cd6:	4b0c      	ldr	r3, [pc, #48]	; (8007d08 <MX_SPI2_Init+0x64>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007cdc:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <MX_SPI2_Init+0x64>)
 8007cde:	2200      	movs	r2, #0
 8007ce0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007ce2:	4b09      	ldr	r3, [pc, #36]	; (8007d08 <MX_SPI2_Init+0x64>)
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ce8:	4b07      	ldr	r3, [pc, #28]	; (8007d08 <MX_SPI2_Init+0x64>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007cee:	4b06      	ldr	r3, [pc, #24]	; (8007d08 <MX_SPI2_Init+0x64>)
 8007cf0:	220a      	movs	r2, #10
 8007cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007cf4:	4804      	ldr	r0, [pc, #16]	; (8007d08 <MX_SPI2_Init+0x64>)
 8007cf6:	f003 fd8f 	bl	800b818 <HAL_SPI_Init>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d001      	beq.n	8007d04 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8007d00:	f7ff ff94 	bl	8007c2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007d04:	bf00      	nop
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	20000d94 	.word	0x20000d94
 8007d0c:	40003800 	.word	0x40003800

08007d10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b08a      	sub	sp, #40	; 0x28
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d18:	f107 0314 	add.w	r3, r7, #20
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	601a      	str	r2, [r3, #0]
 8007d20:	605a      	str	r2, [r3, #4]
 8007d22:	609a      	str	r2, [r3, #8]
 8007d24:	60da      	str	r2, [r3, #12]
 8007d26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a19      	ldr	r2, [pc, #100]	; (8007d94 <HAL_SPI_MspInit+0x84>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d12c      	bne.n	8007d8c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007d32:	2300      	movs	r3, #0
 8007d34:	613b      	str	r3, [r7, #16]
 8007d36:	4b18      	ldr	r3, [pc, #96]	; (8007d98 <HAL_SPI_MspInit+0x88>)
 8007d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3a:	4a17      	ldr	r2, [pc, #92]	; (8007d98 <HAL_SPI_MspInit+0x88>)
 8007d3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007d40:	6413      	str	r3, [r2, #64]	; 0x40
 8007d42:	4b15      	ldr	r3, [pc, #84]	; (8007d98 <HAL_SPI_MspInit+0x88>)
 8007d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d4a:	613b      	str	r3, [r7, #16]
 8007d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d4e:	2300      	movs	r3, #0
 8007d50:	60fb      	str	r3, [r7, #12]
 8007d52:	4b11      	ldr	r3, [pc, #68]	; (8007d98 <HAL_SPI_MspInit+0x88>)
 8007d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d56:	4a10      	ldr	r2, [pc, #64]	; (8007d98 <HAL_SPI_MspInit+0x88>)
 8007d58:	f043 0302 	orr.w	r3, r3, #2
 8007d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8007d5e:	4b0e      	ldr	r3, [pc, #56]	; (8007d98 <HAL_SPI_MspInit+0x88>)
 8007d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007d6a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007d70:	2302      	movs	r3, #2
 8007d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d74:	2300      	movs	r3, #0
 8007d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007d7c:	2305      	movs	r3, #5
 8007d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007d80:	f107 0314 	add.w	r3, r7, #20
 8007d84:	4619      	mov	r1, r3
 8007d86:	4805      	ldr	r0, [pc, #20]	; (8007d9c <HAL_SPI_MspInit+0x8c>)
 8007d88:	f002 fd42 	bl	800a810 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007d8c:	bf00      	nop
 8007d8e:	3728      	adds	r7, #40	; 0x28
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}
 8007d94:	40003800 	.word	0x40003800
 8007d98:	40023800 	.word	0x40023800
 8007d9c:	40020400 	.word	0x40020400

08007da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007da6:	2300      	movs	r3, #0
 8007da8:	607b      	str	r3, [r7, #4]
 8007daa:	4b12      	ldr	r3, [pc, #72]	; (8007df4 <HAL_MspInit+0x54>)
 8007dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dae:	4a11      	ldr	r2, [pc, #68]	; (8007df4 <HAL_MspInit+0x54>)
 8007db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007db4:	6453      	str	r3, [r2, #68]	; 0x44
 8007db6:	4b0f      	ldr	r3, [pc, #60]	; (8007df4 <HAL_MspInit+0x54>)
 8007db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dbe:	607b      	str	r3, [r7, #4]
 8007dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	603b      	str	r3, [r7, #0]
 8007dc6:	4b0b      	ldr	r3, [pc, #44]	; (8007df4 <HAL_MspInit+0x54>)
 8007dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dca:	4a0a      	ldr	r2, [pc, #40]	; (8007df4 <HAL_MspInit+0x54>)
 8007dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8007dd2:	4b08      	ldr	r3, [pc, #32]	; (8007df4 <HAL_MspInit+0x54>)
 8007dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dda:	603b      	str	r3, [r7, #0]
 8007ddc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007dde:	2200      	movs	r2, #0
 8007de0:	210f      	movs	r1, #15
 8007de2:	f06f 0001 	mvn.w	r0, #1
 8007de6:	f002 f95d 	bl	800a0a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007dea:	bf00      	nop
 8007dec:	3708      	adds	r7, #8
 8007dee:	46bd      	mov	sp, r7
 8007df0:	bd80      	pop	{r7, pc}
 8007df2:	bf00      	nop
 8007df4:	40023800 	.word	0x40023800

08007df8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b08c      	sub	sp, #48	; 0x30
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8007e04:	2300      	movs	r3, #0
 8007e06:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007e08:	2300      	movs	r3, #0
 8007e0a:	60bb      	str	r3, [r7, #8]
 8007e0c:	4b2f      	ldr	r3, [pc, #188]	; (8007ecc <HAL_InitTick+0xd4>)
 8007e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e10:	4a2e      	ldr	r2, [pc, #184]	; (8007ecc <HAL_InitTick+0xd4>)
 8007e12:	f043 0301 	orr.w	r3, r3, #1
 8007e16:	6453      	str	r3, [r2, #68]	; 0x44
 8007e18:	4b2c      	ldr	r3, [pc, #176]	; (8007ecc <HAL_InitTick+0xd4>)
 8007e1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e1c:	f003 0301 	and.w	r3, r3, #1
 8007e20:	60bb      	str	r3, [r7, #8]
 8007e22:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007e24:	f107 020c 	add.w	r2, r7, #12
 8007e28:	f107 0310 	add.w	r3, r7, #16
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f003 fc96 	bl	800b760 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8007e34:	f003 fc80 	bl	800b738 <HAL_RCC_GetPCLK2Freq>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	005b      	lsls	r3, r3, #1
 8007e3c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e40:	4a23      	ldr	r2, [pc, #140]	; (8007ed0 <HAL_InitTick+0xd8>)
 8007e42:	fba2 2303 	umull	r2, r3, r2, r3
 8007e46:	0c9b      	lsrs	r3, r3, #18
 8007e48:	3b01      	subs	r3, #1
 8007e4a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8007e4c:	4b21      	ldr	r3, [pc, #132]	; (8007ed4 <HAL_InitTick+0xdc>)
 8007e4e:	4a22      	ldr	r2, [pc, #136]	; (8007ed8 <HAL_InitTick+0xe0>)
 8007e50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8007e52:	4b20      	ldr	r3, [pc, #128]	; (8007ed4 <HAL_InitTick+0xdc>)
 8007e54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007e58:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8007e5a:	4a1e      	ldr	r2, [pc, #120]	; (8007ed4 <HAL_InitTick+0xdc>)
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8007e60:	4b1c      	ldr	r3, [pc, #112]	; (8007ed4 <HAL_InitTick+0xdc>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e66:	4b1b      	ldr	r3, [pc, #108]	; (8007ed4 <HAL_InitTick+0xdc>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007e6c:	4b19      	ldr	r3, [pc, #100]	; (8007ed4 <HAL_InitTick+0xdc>)
 8007e6e:	2200      	movs	r2, #0
 8007e70:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8007e72:	4818      	ldr	r0, [pc, #96]	; (8007ed4 <HAL_InitTick+0xdc>)
 8007e74:	f003 fd59 	bl	800b92a <HAL_TIM_Base_Init>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8007e7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d11b      	bne.n	8007ebe <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8007e86:	4813      	ldr	r0, [pc, #76]	; (8007ed4 <HAL_InitTick+0xdc>)
 8007e88:	f003 fd9e 	bl	800b9c8 <HAL_TIM_Base_Start_IT>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8007e92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d111      	bne.n	8007ebe <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007e9a:	2019      	movs	r0, #25
 8007e9c:	f002 f91e 	bl	800a0dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2b0f      	cmp	r3, #15
 8007ea4:	d808      	bhi.n	8007eb8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	6879      	ldr	r1, [r7, #4]
 8007eaa:	2019      	movs	r0, #25
 8007eac:	f002 f8fa 	bl	800a0a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007eb0:	4a0a      	ldr	r2, [pc, #40]	; (8007edc <HAL_InitTick+0xe4>)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6013      	str	r3, [r2, #0]
 8007eb6:	e002      	b.n	8007ebe <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8007ebe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3730      	adds	r7, #48	; 0x30
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	40023800 	.word	0x40023800
 8007ed0:	431bde83 	.word	0x431bde83
 8007ed4:	20000dec 	.word	0x20000dec
 8007ed8:	40010000 	.word	0x40010000
 8007edc:	20000014 	.word	0x20000014

08007ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007ee0:	b480      	push	{r7}
 8007ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007ee4:	e7fe      	b.n	8007ee4 <NMI_Handler+0x4>

08007ee6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007eea:	e7fe      	b.n	8007eea <HardFault_Handler+0x4>

08007eec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007eec:	b480      	push	{r7}
 8007eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007ef0:	e7fe      	b.n	8007ef0 <MemManage_Handler+0x4>

08007ef2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007ef2:	b480      	push	{r7}
 8007ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007ef6:	e7fe      	b.n	8007ef6 <BusFault_Handler+0x4>

08007ef8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007efc:	e7fe      	b.n	8007efc <UsageFault_Handler+0x4>

08007efe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007efe:	b480      	push	{r7}
 8007f00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007f02:	bf00      	nop
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIN2_Pin);
 8007f10:	2008      	movs	r0, #8
 8007f12:	f002 fe33 	bl	800ab7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8007f16:	bf00      	nop
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007f20:	4802      	ldr	r0, [pc, #8]	; (8007f2c <CAN1_TX_IRQHandler+0x10>)
 8007f22:	f001 fdd3 	bl	8009acc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8007f26:	bf00      	nop
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20000a00 	.word	0x20000a00

08007f30 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007f34:	4802      	ldr	r0, [pc, #8]	; (8007f40 <CAN1_RX0_IRQHandler+0x10>)
 8007f36:	f001 fdc9 	bl	8009acc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8007f3a:	bf00      	nop
 8007f3c:	bd80      	pop	{r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	20000a00 	.word	0x20000a00

08007f44 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007f48:	4802      	ldr	r0, [pc, #8]	; (8007f54 <CAN1_RX1_IRQHandler+0x10>)
 8007f4a:	f001 fdbf 	bl	8009acc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8007f4e:	bf00      	nop
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop
 8007f54:	20000a00 	.word	0x20000a00

08007f58 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8007f5c:	4802      	ldr	r0, [pc, #8]	; (8007f68 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8007f5e:	f003 fea2 	bl	800bca6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8007f62:	bf00      	nop
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	20000f58 	.word	0x20000f58

08007f6c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007f70:	4802      	ldr	r0, [pc, #8]	; (8007f7c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8007f72:	f003 fe98 	bl	800bca6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8007f76:	bf00      	nop
 8007f78:	bd80      	pop	{r7, pc}
 8007f7a:	bf00      	nop
 8007f7c:	20000dec 	.word	0x20000dec

08007f80 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007f84:	4802      	ldr	r0, [pc, #8]	; (8007f90 <TIM3_IRQHandler+0x10>)
 8007f86:	f003 fe8e 	bl	800bca6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007f8a:	bf00      	nop
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	20000e80 	.word	0x20000e80

08007f94 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007f98:	4802      	ldr	r0, [pc, #8]	; (8007fa4 <DMA2_Stream0_IRQHandler+0x10>)
 8007f9a:	f002 f9cf 	bl	800a33c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007f9e:	bf00      	nop
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20000940 	.word	0x20000940

08007fa8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007fac:	4802      	ldr	r0, [pc, #8]	; (8007fb8 <DMA2_Stream2_IRQHandler+0x10>)
 8007fae:	f002 f9c5 	bl	800a33c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007fb2:	bf00      	nop
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	200009a0 	.word	0x200009a0

08007fbc <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8007fc0:	4802      	ldr	r0, [pc, #8]	; (8007fcc <CAN2_TX_IRQHandler+0x10>)
 8007fc2:	f001 fd83 	bl	8009acc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8007fc6:	bf00      	nop
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	20000a28 	.word	0x20000a28

08007fd0 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8007fd4:	4802      	ldr	r0, [pc, #8]	; (8007fe0 <CAN2_RX0_IRQHandler+0x10>)
 8007fd6:	f001 fd79 	bl	8009acc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8007fda:	bf00      	nop
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20000a28 	.word	0x20000a28

08007fe4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8007fe8:	4802      	ldr	r0, [pc, #8]	; (8007ff4 <CAN2_RX1_IRQHandler+0x10>)
 8007fea:	f001 fd6f 	bl	8009acc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8007fee:	bf00      	nop
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop
 8007ff4:	20000a28 	.word	0x20000a28

08007ff8 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007ffc:	4802      	ldr	r0, [pc, #8]	; (8008008 <DMA2_Stream5_IRQHandler+0x10>)
 8007ffe:	f002 f99d 	bl	800a33c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8008002:	bf00      	nop
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	200010d0 	.word	0x200010d0

0800800c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008010:	4802      	ldr	r0, [pc, #8]	; (800801c <DMA2_Stream7_IRQHandler+0x10>)
 8008012:	f002 f993 	bl	800a33c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8008016:	bf00      	nop
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop
 800801c:	20001070 	.word	0x20001070

08008020 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008020:	b480      	push	{r7}
 8008022:	af00      	add	r7, sp, #0
  return 1;
 8008024:	2301      	movs	r3, #1
}
 8008026:	4618      	mov	r0, r3
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <_kill>:

int _kill(int pid, int sig)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b082      	sub	sp, #8
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800803a:	f00b fb6f 	bl	801371c <__errno>
 800803e:	4603      	mov	r3, r0
 8008040:	2216      	movs	r2, #22
 8008042:	601a      	str	r2, [r3, #0]
  return -1;
 8008044:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008048:	4618      	mov	r0, r3
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <_exit>:

void _exit (int status)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008058:	f04f 31ff 	mov.w	r1, #4294967295
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7ff ffe7 	bl	8008030 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008062:	e7fe      	b.n	8008062 <_exit+0x12>

08008064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b086      	sub	sp, #24
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800806c:	4a14      	ldr	r2, [pc, #80]	; (80080c0 <_sbrk+0x5c>)
 800806e:	4b15      	ldr	r3, [pc, #84]	; (80080c4 <_sbrk+0x60>)
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008078:	4b13      	ldr	r3, [pc, #76]	; (80080c8 <_sbrk+0x64>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d102      	bne.n	8008086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008080:	4b11      	ldr	r3, [pc, #68]	; (80080c8 <_sbrk+0x64>)
 8008082:	4a12      	ldr	r2, [pc, #72]	; (80080cc <_sbrk+0x68>)
 8008084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008086:	4b10      	ldr	r3, [pc, #64]	; (80080c8 <_sbrk+0x64>)
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	4413      	add	r3, r2
 800808e:	693a      	ldr	r2, [r7, #16]
 8008090:	429a      	cmp	r2, r3
 8008092:	d207      	bcs.n	80080a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008094:	f00b fb42 	bl	801371c <__errno>
 8008098:	4603      	mov	r3, r0
 800809a:	220c      	movs	r2, #12
 800809c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800809e:	f04f 33ff 	mov.w	r3, #4294967295
 80080a2:	e009      	b.n	80080b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80080a4:	4b08      	ldr	r3, [pc, #32]	; (80080c8 <_sbrk+0x64>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80080aa:	4b07      	ldr	r3, [pc, #28]	; (80080c8 <_sbrk+0x64>)
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	4413      	add	r3, r2
 80080b2:	4a05      	ldr	r2, [pc, #20]	; (80080c8 <_sbrk+0x64>)
 80080b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80080b6:	68fb      	ldr	r3, [r7, #12]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3718      	adds	r7, #24
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	20020000 	.word	0x20020000
 80080c4:	00000800 	.word	0x00000800
 80080c8:	20000e34 	.word	0x20000e34
 80080cc:	2000a208 	.word	0x2000a208

080080d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80080d0:	b480      	push	{r7}
 80080d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80080d4:	4b06      	ldr	r3, [pc, #24]	; (80080f0 <SystemInit+0x20>)
 80080d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080da:	4a05      	ldr	r2, [pc, #20]	; (80080f0 <SystemInit+0x20>)
 80080dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80080e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80080e4:	bf00      	nop
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	e000ed00 	.word	0xe000ed00

080080f4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80080fa:	f107 0308 	add.w	r3, r7, #8
 80080fe:	2200      	movs	r2, #0
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	605a      	str	r2, [r3, #4]
 8008104:	609a      	str	r2, [r3, #8]
 8008106:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008108:	463b      	mov	r3, r7
 800810a:	2200      	movs	r2, #0
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008110:	4b1e      	ldr	r3, [pc, #120]	; (800818c <MX_TIM2_Init+0x98>)
 8008112:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008116:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8008118:	4b1c      	ldr	r3, [pc, #112]	; (800818c <MX_TIM2_Init+0x98>)
 800811a:	f240 3247 	movw	r2, #839	; 0x347
 800811e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008120:	4b1a      	ldr	r3, [pc, #104]	; (800818c <MX_TIM2_Init+0x98>)
 8008122:	2200      	movs	r2, #0
 8008124:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8008126:	4b19      	ldr	r3, [pc, #100]	; (800818c <MX_TIM2_Init+0x98>)
 8008128:	f04f 32ff 	mov.w	r2, #4294967295
 800812c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800812e:	4b17      	ldr	r3, [pc, #92]	; (800818c <MX_TIM2_Init+0x98>)
 8008130:	2200      	movs	r2, #0
 8008132:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008134:	4b15      	ldr	r3, [pc, #84]	; (800818c <MX_TIM2_Init+0x98>)
 8008136:	2200      	movs	r2, #0
 8008138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800813a:	4814      	ldr	r0, [pc, #80]	; (800818c <MX_TIM2_Init+0x98>)
 800813c:	f003 fbf5 	bl	800b92a <HAL_TIM_Base_Init>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8008146:	f7ff fd71 	bl	8007c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800814a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800814e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008150:	f107 0308 	add.w	r3, r7, #8
 8008154:	4619      	mov	r1, r3
 8008156:	480d      	ldr	r0, [pc, #52]	; (800818c <MX_TIM2_Init+0x98>)
 8008158:	f003 ff70 	bl	800c03c <HAL_TIM_ConfigClockSource>
 800815c:	4603      	mov	r3, r0
 800815e:	2b00      	cmp	r3, #0
 8008160:	d001      	beq.n	8008166 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8008162:	f7ff fd63 	bl	8007c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008166:	2300      	movs	r3, #0
 8008168:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800816a:	2300      	movs	r3, #0
 800816c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800816e:	463b      	mov	r3, r7
 8008170:	4619      	mov	r1, r3
 8008172:	4806      	ldr	r0, [pc, #24]	; (800818c <MX_TIM2_Init+0x98>)
 8008174:	f004 fb3c 	bl	800c7f0 <HAL_TIMEx_MasterConfigSynchronization>
 8008178:	4603      	mov	r3, r0
 800817a:	2b00      	cmp	r3, #0
 800817c:	d001      	beq.n	8008182 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800817e:	f7ff fd55 	bl	8007c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008182:	bf00      	nop
 8008184:	3718      	adds	r7, #24
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	20000e38 	.word	0x20000e38

08008190 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b086      	sub	sp, #24
 8008194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008196:	f107 0308 	add.w	r3, r7, #8
 800819a:	2200      	movs	r2, #0
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	605a      	str	r2, [r3, #4]
 80081a0:	609a      	str	r2, [r3, #8]
 80081a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80081a4:	463b      	mov	r3, r7
 80081a6:	2200      	movs	r2, #0
 80081a8:	601a      	str	r2, [r3, #0]
 80081aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80081ac:	4b1d      	ldr	r3, [pc, #116]	; (8008224 <MX_TIM3_Init+0x94>)
 80081ae:	4a1e      	ldr	r2, [pc, #120]	; (8008228 <MX_TIM3_Init+0x98>)
 80081b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16800 - 1;
 80081b2:	4b1c      	ldr	r3, [pc, #112]	; (8008224 <MX_TIM3_Init+0x94>)
 80081b4:	f244 129f 	movw	r2, #16799	; 0x419f
 80081b8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80081ba:	4b1a      	ldr	r3, [pc, #104]	; (8008224 <MX_TIM3_Init+0x94>)
 80081bc:	2200      	movs	r2, #0
 80081be:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80081c0:	4b18      	ldr	r3, [pc, #96]	; (8008224 <MX_TIM3_Init+0x94>)
 80081c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081c6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80081c8:	4b16      	ldr	r3, [pc, #88]	; (8008224 <MX_TIM3_Init+0x94>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80081ce:	4b15      	ldr	r3, [pc, #84]	; (8008224 <MX_TIM3_Init+0x94>)
 80081d0:	2200      	movs	r2, #0
 80081d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80081d4:	4813      	ldr	r0, [pc, #76]	; (8008224 <MX_TIM3_Init+0x94>)
 80081d6:	f003 fba8 	bl	800b92a <HAL_TIM_Base_Init>
 80081da:	4603      	mov	r3, r0
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d001      	beq.n	80081e4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80081e0:	f7ff fd24 	bl	8007c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80081e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80081ea:	f107 0308 	add.w	r3, r7, #8
 80081ee:	4619      	mov	r1, r3
 80081f0:	480c      	ldr	r0, [pc, #48]	; (8008224 <MX_TIM3_Init+0x94>)
 80081f2:	f003 ff23 	bl	800c03c <HAL_TIM_ConfigClockSource>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80081fc:	f7ff fd16 	bl	8007c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008200:	2300      	movs	r3, #0
 8008202:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008204:	2300      	movs	r3, #0
 8008206:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008208:	463b      	mov	r3, r7
 800820a:	4619      	mov	r1, r3
 800820c:	4805      	ldr	r0, [pc, #20]	; (8008224 <MX_TIM3_Init+0x94>)
 800820e:	f004 faef 	bl	800c7f0 <HAL_TIMEx_MasterConfigSynchronization>
 8008212:	4603      	mov	r3, r0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8008218:	f7ff fd08 	bl	8007c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800821c:	bf00      	nop
 800821e:	3718      	adds	r7, #24
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	20000e80 	.word	0x20000e80
 8008228:	40000400 	.word	0x40000400

0800822c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b08e      	sub	sp, #56	; 0x38
 8008230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008236:	2200      	movs	r2, #0
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	605a      	str	r2, [r3, #4]
 800823c:	609a      	str	r2, [r3, #8]
 800823e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008240:	f107 0320 	add.w	r3, r7, #32
 8008244:	2200      	movs	r2, #0
 8008246:	601a      	str	r2, [r3, #0]
 8008248:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800824a:	1d3b      	adds	r3, r7, #4
 800824c:	2200      	movs	r2, #0
 800824e:	601a      	str	r2, [r3, #0]
 8008250:	605a      	str	r2, [r3, #4]
 8008252:	609a      	str	r2, [r3, #8]
 8008254:	60da      	str	r2, [r3, #12]
 8008256:	611a      	str	r2, [r3, #16]
 8008258:	615a      	str	r2, [r3, #20]
 800825a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800825c:	4b37      	ldr	r3, [pc, #220]	; (800833c <MX_TIM4_Init+0x110>)
 800825e:	4a38      	ldr	r2, [pc, #224]	; (8008340 <MX_TIM4_Init+0x114>)
 8008260:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000-1;
 8008262:	4b36      	ldr	r3, [pc, #216]	; (800833c <MX_TIM4_Init+0x110>)
 8008264:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8008268:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800826a:	4b34      	ldr	r3, [pc, #208]	; (800833c <MX_TIM4_Init+0x110>)
 800826c:	2200      	movs	r2, #0
 800826e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 8008270:	4b32      	ldr	r3, [pc, #200]	; (800833c <MX_TIM4_Init+0x110>)
 8008272:	22fe      	movs	r2, #254	; 0xfe
 8008274:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008276:	4b31      	ldr	r3, [pc, #196]	; (800833c <MX_TIM4_Init+0x110>)
 8008278:	2200      	movs	r2, #0
 800827a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800827c:	4b2f      	ldr	r3, [pc, #188]	; (800833c <MX_TIM4_Init+0x110>)
 800827e:	2200      	movs	r2, #0
 8008280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008282:	482e      	ldr	r0, [pc, #184]	; (800833c <MX_TIM4_Init+0x110>)
 8008284:	f003 fb51 	bl	800b92a <HAL_TIM_Base_Init>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800828e:	f7ff fccd 	bl	8007c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008292:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008296:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008298:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800829c:	4619      	mov	r1, r3
 800829e:	4827      	ldr	r0, [pc, #156]	; (800833c <MX_TIM4_Init+0x110>)
 80082a0:	f003 fecc 	bl	800c03c <HAL_TIM_ConfigClockSource>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80082aa:	f7ff fcbf 	bl	8007c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80082ae:	4823      	ldr	r0, [pc, #140]	; (800833c <MX_TIM4_Init+0x110>)
 80082b0:	f003 fbfa 	bl	800baa8 <HAL_TIM_PWM_Init>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d001      	beq.n	80082be <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80082ba:	f7ff fcb7 	bl	8007c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80082be:	2300      	movs	r3, #0
 80082c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80082c2:	2300      	movs	r3, #0
 80082c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80082c6:	f107 0320 	add.w	r3, r7, #32
 80082ca:	4619      	mov	r1, r3
 80082cc:	481b      	ldr	r0, [pc, #108]	; (800833c <MX_TIM4_Init+0x110>)
 80082ce:	f004 fa8f 	bl	800c7f0 <HAL_TIMEx_MasterConfigSynchronization>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80082d8:	f7ff fca8 	bl	8007c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80082dc:	2360      	movs	r3, #96	; 0x60
 80082de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80082e0:	2300      	movs	r3, #0
 80082e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80082e4:	2300      	movs	r3, #0
 80082e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80082e8:	2300      	movs	r3, #0
 80082ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80082ec:	1d3b      	adds	r3, r7, #4
 80082ee:	2200      	movs	r2, #0
 80082f0:	4619      	mov	r1, r3
 80082f2:	4812      	ldr	r0, [pc, #72]	; (800833c <MX_TIM4_Init+0x110>)
 80082f4:	f003 fde0 	bl	800beb8 <HAL_TIM_PWM_ConfigChannel>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80082fe:	f7ff fc95 	bl	8007c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008302:	1d3b      	adds	r3, r7, #4
 8008304:	2204      	movs	r2, #4
 8008306:	4619      	mov	r1, r3
 8008308:	480c      	ldr	r0, [pc, #48]	; (800833c <MX_TIM4_Init+0x110>)
 800830a:	f003 fdd5 	bl	800beb8 <HAL_TIM_PWM_ConfigChannel>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8008314:	f7ff fc8a 	bl	8007c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008318:	1d3b      	adds	r3, r7, #4
 800831a:	2208      	movs	r2, #8
 800831c:	4619      	mov	r1, r3
 800831e:	4807      	ldr	r0, [pc, #28]	; (800833c <MX_TIM4_Init+0x110>)
 8008320:	f003 fdca 	bl	800beb8 <HAL_TIM_PWM_ConfigChannel>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d001      	beq.n	800832e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800832a:	f7ff fc7f 	bl	8007c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800832e:	4803      	ldr	r0, [pc, #12]	; (800833c <MX_TIM4_Init+0x110>)
 8008330:	f000 f988 	bl	8008644 <HAL_TIM_MspPostInit>

}
 8008334:	bf00      	nop
 8008336:	3738      	adds	r7, #56	; 0x38
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}
 800833c:	20000ec8 	.word	0x20000ec8
 8008340:	40000800 	.word	0x40000800

08008344 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08c      	sub	sp, #48	; 0x30
 8008348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800834a:	f107 030c 	add.w	r3, r7, #12
 800834e:	2224      	movs	r2, #36	; 0x24
 8008350:	2100      	movs	r1, #0
 8008352:	4618      	mov	r0, r3
 8008354:	f00b fa2e 	bl	80137b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008358:	1d3b      	adds	r3, r7, #4
 800835a:	2200      	movs	r2, #0
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8008360:	4b20      	ldr	r3, [pc, #128]	; (80083e4 <MX_TIM5_Init+0xa0>)
 8008362:	4a21      	ldr	r2, [pc, #132]	; (80083e8 <MX_TIM5_Init+0xa4>)
 8008364:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8008366:	4b1f      	ldr	r3, [pc, #124]	; (80083e4 <MX_TIM5_Init+0xa0>)
 8008368:	2200      	movs	r2, #0
 800836a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800836c:	4b1d      	ldr	r3, [pc, #116]	; (80083e4 <MX_TIM5_Init+0xa0>)
 800836e:	2200      	movs	r2, #0
 8008370:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8008372:	4b1c      	ldr	r3, [pc, #112]	; (80083e4 <MX_TIM5_Init+0xa0>)
 8008374:	f04f 32ff 	mov.w	r2, #4294967295
 8008378:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800837a:	4b1a      	ldr	r3, [pc, #104]	; (80083e4 <MX_TIM5_Init+0xa0>)
 800837c:	2200      	movs	r2, #0
 800837e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008380:	4b18      	ldr	r3, [pc, #96]	; (80083e4 <MX_TIM5_Init+0xa0>)
 8008382:	2200      	movs	r2, #0
 8008384:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8008386:	2301      	movs	r3, #1
 8008388:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800838a:	2300      	movs	r3, #0
 800838c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800838e:	2301      	movs	r3, #1
 8008390:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008392:	2300      	movs	r3, #0
 8008394:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8008396:	2300      	movs	r3, #0
 8008398:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800839a:	2300      	movs	r3, #0
 800839c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800839e:	2301      	movs	r3, #1
 80083a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80083a2:	2300      	movs	r3, #0
 80083a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80083a6:	2300      	movs	r3, #0
 80083a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80083aa:	f107 030c 	add.w	r3, r7, #12
 80083ae:	4619      	mov	r1, r3
 80083b0:	480c      	ldr	r0, [pc, #48]	; (80083e4 <MX_TIM5_Init+0xa0>)
 80083b2:	f003 fbd2 	bl	800bb5a <HAL_TIM_Encoder_Init>
 80083b6:	4603      	mov	r3, r0
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d001      	beq.n	80083c0 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80083bc:	f7ff fc36 	bl	8007c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80083c0:	2300      	movs	r3, #0
 80083c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80083c4:	2300      	movs	r3, #0
 80083c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80083c8:	1d3b      	adds	r3, r7, #4
 80083ca:	4619      	mov	r1, r3
 80083cc:	4805      	ldr	r0, [pc, #20]	; (80083e4 <MX_TIM5_Init+0xa0>)
 80083ce:	f004 fa0f 	bl	800c7f0 <HAL_TIMEx_MasterConfigSynchronization>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d001      	beq.n	80083dc <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80083d8:	f7ff fc28 	bl	8007c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80083dc:	bf00      	nop
 80083de:	3730      	adds	r7, #48	; 0x30
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	20000f10 	.word	0x20000f10
 80083e8:	40000c00 	.word	0x40000c00

080083ec <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80083f2:	463b      	mov	r3, r7
 80083f4:	2200      	movs	r2, #0
 80083f6:	601a      	str	r2, [r3, #0]
 80083f8:	605a      	str	r2, [r3, #4]
 80083fa:	609a      	str	r2, [r3, #8]
 80083fc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80083fe:	4b16      	ldr	r3, [pc, #88]	; (8008458 <MX_TIM9_Init+0x6c>)
 8008400:	4a16      	ldr	r2, [pc, #88]	; (800845c <MX_TIM9_Init+0x70>)
 8008402:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 16800 - 1;
 8008404:	4b14      	ldr	r3, [pc, #80]	; (8008458 <MX_TIM9_Init+0x6c>)
 8008406:	f244 129f 	movw	r2, #16799	; 0x419f
 800840a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800840c:	4b12      	ldr	r3, [pc, #72]	; (8008458 <MX_TIM9_Init+0x6c>)
 800840e:	2200      	movs	r2, #0
 8008410:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8008412:	4b11      	ldr	r3, [pc, #68]	; (8008458 <MX_TIM9_Init+0x6c>)
 8008414:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008418:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800841a:	4b0f      	ldr	r3, [pc, #60]	; (8008458 <MX_TIM9_Init+0x6c>)
 800841c:	2200      	movs	r2, #0
 800841e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008420:	4b0d      	ldr	r3, [pc, #52]	; (8008458 <MX_TIM9_Init+0x6c>)
 8008422:	2200      	movs	r2, #0
 8008424:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8008426:	480c      	ldr	r0, [pc, #48]	; (8008458 <MX_TIM9_Init+0x6c>)
 8008428:	f003 fa7f 	bl	800b92a <HAL_TIM_Base_Init>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8008432:	f7ff fbfb 	bl	8007c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008436:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800843a:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800843c:	463b      	mov	r3, r7
 800843e:	4619      	mov	r1, r3
 8008440:	4805      	ldr	r0, [pc, #20]	; (8008458 <MX_TIM9_Init+0x6c>)
 8008442:	f003 fdfb 	bl	800c03c <HAL_TIM_ConfigClockSource>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d001      	beq.n	8008450 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 800844c:	f7ff fbee 	bl	8007c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8008450:	bf00      	nop
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	20000f58 	.word	0x20000f58
 800845c:	40014000 	.word	0x40014000

08008460 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8008464:	4b0e      	ldr	r3, [pc, #56]	; (80084a0 <MX_TIM14_Init+0x40>)
 8008466:	4a0f      	ldr	r2, [pc, #60]	; (80084a4 <MX_TIM14_Init+0x44>)
 8008468:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 840-1;
 800846a:	4b0d      	ldr	r3, [pc, #52]	; (80084a0 <MX_TIM14_Init+0x40>)
 800846c:	f240 3247 	movw	r2, #839	; 0x347
 8008470:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008472:	4b0b      	ldr	r3, [pc, #44]	; (80084a0 <MX_TIM14_Init+0x40>)
 8008474:	2200      	movs	r2, #0
 8008476:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8008478:	4b09      	ldr	r3, [pc, #36]	; (80084a0 <MX_TIM14_Init+0x40>)
 800847a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800847e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008480:	4b07      	ldr	r3, [pc, #28]	; (80084a0 <MX_TIM14_Init+0x40>)
 8008482:	2200      	movs	r2, #0
 8008484:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008486:	4b06      	ldr	r3, [pc, #24]	; (80084a0 <MX_TIM14_Init+0x40>)
 8008488:	2200      	movs	r2, #0
 800848a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800848c:	4804      	ldr	r0, [pc, #16]	; (80084a0 <MX_TIM14_Init+0x40>)
 800848e:	f003 fa4c 	bl	800b92a <HAL_TIM_Base_Init>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8008498:	f7ff fbc8 	bl	8007c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800849c:	bf00      	nop
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	20000fa0 	.word	0x20000fa0
 80084a4:	40002000 	.word	0x40002000

080084a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b088      	sub	sp, #32
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084b8:	d10e      	bne.n	80084d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80084ba:	2300      	movs	r3, #0
 80084bc:	61fb      	str	r3, [r7, #28]
 80084be:	4b38      	ldr	r3, [pc, #224]	; (80085a0 <HAL_TIM_Base_MspInit+0xf8>)
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	4a37      	ldr	r2, [pc, #220]	; (80085a0 <HAL_TIM_Base_MspInit+0xf8>)
 80084c4:	f043 0301 	orr.w	r3, r3, #1
 80084c8:	6413      	str	r3, [r2, #64]	; 0x40
 80084ca:	4b35      	ldr	r3, [pc, #212]	; (80085a0 <HAL_TIM_Base_MspInit+0xf8>)
 80084cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	61fb      	str	r3, [r7, #28]
 80084d4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80084d6:	e05e      	b.n	8008596 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM3)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4a31      	ldr	r2, [pc, #196]	; (80085a4 <HAL_TIM_Base_MspInit+0xfc>)
 80084de:	4293      	cmp	r3, r2
 80084e0:	d116      	bne.n	8008510 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80084e2:	2300      	movs	r3, #0
 80084e4:	61bb      	str	r3, [r7, #24]
 80084e6:	4b2e      	ldr	r3, [pc, #184]	; (80085a0 <HAL_TIM_Base_MspInit+0xf8>)
 80084e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ea:	4a2d      	ldr	r2, [pc, #180]	; (80085a0 <HAL_TIM_Base_MspInit+0xf8>)
 80084ec:	f043 0302 	orr.w	r3, r3, #2
 80084f0:	6413      	str	r3, [r2, #64]	; 0x40
 80084f2:	4b2b      	ldr	r3, [pc, #172]	; (80085a0 <HAL_TIM_Base_MspInit+0xf8>)
 80084f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f6:	f003 0302 	and.w	r3, r3, #2
 80084fa:	61bb      	str	r3, [r7, #24]
 80084fc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80084fe:	2200      	movs	r2, #0
 8008500:	2105      	movs	r1, #5
 8008502:	201d      	movs	r0, #29
 8008504:	f001 fdce 	bl	800a0a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008508:	201d      	movs	r0, #29
 800850a:	f001 fde7 	bl	800a0dc <HAL_NVIC_EnableIRQ>
}
 800850e:	e042      	b.n	8008596 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM4)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a24      	ldr	r2, [pc, #144]	; (80085a8 <HAL_TIM_Base_MspInit+0x100>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d10e      	bne.n	8008538 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800851a:	2300      	movs	r3, #0
 800851c:	617b      	str	r3, [r7, #20]
 800851e:	4b20      	ldr	r3, [pc, #128]	; (80085a0 <HAL_TIM_Base_MspInit+0xf8>)
 8008520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008522:	4a1f      	ldr	r2, [pc, #124]	; (80085a0 <HAL_TIM_Base_MspInit+0xf8>)
 8008524:	f043 0304 	orr.w	r3, r3, #4
 8008528:	6413      	str	r3, [r2, #64]	; 0x40
 800852a:	4b1d      	ldr	r3, [pc, #116]	; (80085a0 <HAL_TIM_Base_MspInit+0xf8>)
 800852c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852e:	f003 0304 	and.w	r3, r3, #4
 8008532:	617b      	str	r3, [r7, #20]
 8008534:	697b      	ldr	r3, [r7, #20]
}
 8008536:	e02e      	b.n	8008596 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM9)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a1b      	ldr	r2, [pc, #108]	; (80085ac <HAL_TIM_Base_MspInit+0x104>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d116      	bne.n	8008570 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8008542:	2300      	movs	r3, #0
 8008544:	613b      	str	r3, [r7, #16]
 8008546:	4b16      	ldr	r3, [pc, #88]	; (80085a0 <HAL_TIM_Base_MspInit+0xf8>)
 8008548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854a:	4a15      	ldr	r2, [pc, #84]	; (80085a0 <HAL_TIM_Base_MspInit+0xf8>)
 800854c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008550:	6453      	str	r3, [r2, #68]	; 0x44
 8008552:	4b13      	ldr	r3, [pc, #76]	; (80085a0 <HAL_TIM_Base_MspInit+0xf8>)
 8008554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008556:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800855a:	613b      	str	r3, [r7, #16]
 800855c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 800855e:	2200      	movs	r2, #0
 8008560:	2105      	movs	r1, #5
 8008562:	2018      	movs	r0, #24
 8008564:	f001 fd9e 	bl	800a0a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8008568:	2018      	movs	r0, #24
 800856a:	f001 fdb7 	bl	800a0dc <HAL_NVIC_EnableIRQ>
}
 800856e:	e012      	b.n	8008596 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM14)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a0e      	ldr	r2, [pc, #56]	; (80085b0 <HAL_TIM_Base_MspInit+0x108>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d10d      	bne.n	8008596 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800857a:	2300      	movs	r3, #0
 800857c:	60fb      	str	r3, [r7, #12]
 800857e:	4b08      	ldr	r3, [pc, #32]	; (80085a0 <HAL_TIM_Base_MspInit+0xf8>)
 8008580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008582:	4a07      	ldr	r2, [pc, #28]	; (80085a0 <HAL_TIM_Base_MspInit+0xf8>)
 8008584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008588:	6413      	str	r3, [r2, #64]	; 0x40
 800858a:	4b05      	ldr	r3, [pc, #20]	; (80085a0 <HAL_TIM_Base_MspInit+0xf8>)
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	68fb      	ldr	r3, [r7, #12]
}
 8008596:	bf00      	nop
 8008598:	3720      	adds	r7, #32
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	40023800 	.word	0x40023800
 80085a4:	40000400 	.word	0x40000400
 80085a8:	40000800 	.word	0x40000800
 80085ac:	40014000 	.word	0x40014000
 80085b0:	40002000 	.word	0x40002000

080085b4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b08a      	sub	sp, #40	; 0x28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085bc:	f107 0314 	add.w	r3, r7, #20
 80085c0:	2200      	movs	r2, #0
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	605a      	str	r2, [r3, #4]
 80085c6:	609a      	str	r2, [r3, #8]
 80085c8:	60da      	str	r2, [r3, #12]
 80085ca:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a19      	ldr	r2, [pc, #100]	; (8008638 <HAL_TIM_Encoder_MspInit+0x84>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d12b      	bne.n	800862e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80085d6:	2300      	movs	r3, #0
 80085d8:	613b      	str	r3, [r7, #16]
 80085da:	4b18      	ldr	r3, [pc, #96]	; (800863c <HAL_TIM_Encoder_MspInit+0x88>)
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	4a17      	ldr	r2, [pc, #92]	; (800863c <HAL_TIM_Encoder_MspInit+0x88>)
 80085e0:	f043 0308 	orr.w	r3, r3, #8
 80085e4:	6413      	str	r3, [r2, #64]	; 0x40
 80085e6:	4b15      	ldr	r3, [pc, #84]	; (800863c <HAL_TIM_Encoder_MspInit+0x88>)
 80085e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ea:	f003 0308 	and.w	r3, r3, #8
 80085ee:	613b      	str	r3, [r7, #16]
 80085f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085f2:	2300      	movs	r3, #0
 80085f4:	60fb      	str	r3, [r7, #12]
 80085f6:	4b11      	ldr	r3, [pc, #68]	; (800863c <HAL_TIM_Encoder_MspInit+0x88>)
 80085f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fa:	4a10      	ldr	r2, [pc, #64]	; (800863c <HAL_TIM_Encoder_MspInit+0x88>)
 80085fc:	f043 0301 	orr.w	r3, r3, #1
 8008600:	6313      	str	r3, [r2, #48]	; 0x30
 8008602:	4b0e      	ldr	r3, [pc, #56]	; (800863c <HAL_TIM_Encoder_MspInit+0x88>)
 8008604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008606:	f003 0301 	and.w	r3, r3, #1
 800860a:	60fb      	str	r3, [r7, #12]
 800860c:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = WHEELENCODER_A_Pin|WHEELENCODER_B_Pin;
 800860e:	2303      	movs	r3, #3
 8008610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008612:	2302      	movs	r3, #2
 8008614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008616:	2300      	movs	r3, #0
 8008618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800861a:	2300      	movs	r3, #0
 800861c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800861e:	2302      	movs	r3, #2
 8008620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008622:	f107 0314 	add.w	r3, r7, #20
 8008626:	4619      	mov	r1, r3
 8008628:	4805      	ldr	r0, [pc, #20]	; (8008640 <HAL_TIM_Encoder_MspInit+0x8c>)
 800862a:	f002 f8f1 	bl	800a810 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800862e:	bf00      	nop
 8008630:	3728      	adds	r7, #40	; 0x28
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
 8008636:	bf00      	nop
 8008638:	40000c00 	.word	0x40000c00
 800863c:	40023800 	.word	0x40023800
 8008640:	40020000 	.word	0x40020000

08008644 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b088      	sub	sp, #32
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800864c:	f107 030c 	add.w	r3, r7, #12
 8008650:	2200      	movs	r2, #0
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	605a      	str	r2, [r3, #4]
 8008656:	609a      	str	r2, [r3, #8]
 8008658:	60da      	str	r2, [r3, #12]
 800865a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a12      	ldr	r2, [pc, #72]	; (80086ac <HAL_TIM_MspPostInit+0x68>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d11e      	bne.n	80086a4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008666:	2300      	movs	r3, #0
 8008668:	60bb      	str	r3, [r7, #8]
 800866a:	4b11      	ldr	r3, [pc, #68]	; (80086b0 <HAL_TIM_MspPostInit+0x6c>)
 800866c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800866e:	4a10      	ldr	r2, [pc, #64]	; (80086b0 <HAL_TIM_MspPostInit+0x6c>)
 8008670:	f043 0308 	orr.w	r3, r3, #8
 8008674:	6313      	str	r3, [r2, #48]	; 0x30
 8008676:	4b0e      	ldr	r3, [pc, #56]	; (80086b0 <HAL_TIM_MspPostInit+0x6c>)
 8008678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800867a:	f003 0308 	and.w	r3, r3, #8
 800867e:	60bb      	str	r3, [r7, #8]
 8008680:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin;
 8008682:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8008686:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008688:	2302      	movs	r3, #2
 800868a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800868c:	2300      	movs	r3, #0
 800868e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008690:	2300      	movs	r3, #0
 8008692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008694:	2302      	movs	r3, #2
 8008696:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008698:	f107 030c 	add.w	r3, r7, #12
 800869c:	4619      	mov	r1, r3
 800869e:	4805      	ldr	r0, [pc, #20]	; (80086b4 <HAL_TIM_MspPostInit+0x70>)
 80086a0:	f002 f8b6 	bl	800a810 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80086a4:	bf00      	nop
 80086a6:	3720      	adds	r7, #32
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	40000800 	.word	0x40000800
 80086b0:	40023800 	.word	0x40023800
 80086b4:	40020c00 	.word	0x40020c00

080086b8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80086bc:	4b11      	ldr	r3, [pc, #68]	; (8008704 <MX_USART1_UART_Init+0x4c>)
 80086be:	4a12      	ldr	r2, [pc, #72]	; (8008708 <MX_USART1_UART_Init+0x50>)
 80086c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80086c2:	4b10      	ldr	r3, [pc, #64]	; (8008704 <MX_USART1_UART_Init+0x4c>)
 80086c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80086c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80086ca:	4b0e      	ldr	r3, [pc, #56]	; (8008704 <MX_USART1_UART_Init+0x4c>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80086d0:	4b0c      	ldr	r3, [pc, #48]	; (8008704 <MX_USART1_UART_Init+0x4c>)
 80086d2:	2200      	movs	r2, #0
 80086d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80086d6:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <MX_USART1_UART_Init+0x4c>)
 80086d8:	2200      	movs	r2, #0
 80086da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80086dc:	4b09      	ldr	r3, [pc, #36]	; (8008704 <MX_USART1_UART_Init+0x4c>)
 80086de:	220c      	movs	r2, #12
 80086e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80086e2:	4b08      	ldr	r3, [pc, #32]	; (8008704 <MX_USART1_UART_Init+0x4c>)
 80086e4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80086e8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80086ea:	4b06      	ldr	r3, [pc, #24]	; (8008704 <MX_USART1_UART_Init+0x4c>)
 80086ec:	2200      	movs	r2, #0
 80086ee:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80086f0:	4804      	ldr	r0, [pc, #16]	; (8008704 <MX_USART1_UART_Init+0x4c>)
 80086f2:	f004 f90d 	bl	800c910 <HAL_UART_Init>
 80086f6:	4603      	mov	r3, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d001      	beq.n	8008700 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80086fc:	f7ff fa96 	bl	8007c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008700:	bf00      	nop
 8008702:	bd80      	pop	{r7, pc}
 8008704:	20000fe8 	.word	0x20000fe8
 8008708:	40011000 	.word	0x40011000

0800870c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008710:	4b11      	ldr	r3, [pc, #68]	; (8008758 <MX_USART2_UART_Init+0x4c>)
 8008712:	4a12      	ldr	r2, [pc, #72]	; (800875c <MX_USART2_UART_Init+0x50>)
 8008714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 8008716:	4b10      	ldr	r3, [pc, #64]	; (8008758 <MX_USART2_UART_Init+0x4c>)
 8008718:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 800871c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800871e:	4b0e      	ldr	r3, [pc, #56]	; (8008758 <MX_USART2_UART_Init+0x4c>)
 8008720:	2200      	movs	r2, #0
 8008722:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008724:	4b0c      	ldr	r3, [pc, #48]	; (8008758 <MX_USART2_UART_Init+0x4c>)
 8008726:	2200      	movs	r2, #0
 8008728:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800872a:	4b0b      	ldr	r3, [pc, #44]	; (8008758 <MX_USART2_UART_Init+0x4c>)
 800872c:	2200      	movs	r2, #0
 800872e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008730:	4b09      	ldr	r3, [pc, #36]	; (8008758 <MX_USART2_UART_Init+0x4c>)
 8008732:	220c      	movs	r2, #12
 8008734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008736:	4b08      	ldr	r3, [pc, #32]	; (8008758 <MX_USART2_UART_Init+0x4c>)
 8008738:	2200      	movs	r2, #0
 800873a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800873c:	4b06      	ldr	r3, [pc, #24]	; (8008758 <MX_USART2_UART_Init+0x4c>)
 800873e:	2200      	movs	r2, #0
 8008740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008742:	4805      	ldr	r0, [pc, #20]	; (8008758 <MX_USART2_UART_Init+0x4c>)
 8008744:	f004 f8e4 	bl	800c910 <HAL_UART_Init>
 8008748:	4603      	mov	r3, r0
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800874e:	f7ff fa6d 	bl	8007c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008752:	bf00      	nop
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	2000102c 	.word	0x2000102c
 800875c:	40004400 	.word	0x40004400

08008760 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b08c      	sub	sp, #48	; 0x30
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008768:	f107 031c 	add.w	r3, r7, #28
 800876c:	2200      	movs	r2, #0
 800876e:	601a      	str	r2, [r3, #0]
 8008770:	605a      	str	r2, [r3, #4]
 8008772:	609a      	str	r2, [r3, #8]
 8008774:	60da      	str	r2, [r3, #12]
 8008776:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a61      	ldr	r2, [pc, #388]	; (8008904 <HAL_UART_MspInit+0x1a4>)
 800877e:	4293      	cmp	r3, r2
 8008780:	f040 808a 	bne.w	8008898 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008784:	2300      	movs	r3, #0
 8008786:	61bb      	str	r3, [r7, #24]
 8008788:	4b5f      	ldr	r3, [pc, #380]	; (8008908 <HAL_UART_MspInit+0x1a8>)
 800878a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800878c:	4a5e      	ldr	r2, [pc, #376]	; (8008908 <HAL_UART_MspInit+0x1a8>)
 800878e:	f043 0310 	orr.w	r3, r3, #16
 8008792:	6453      	str	r3, [r2, #68]	; 0x44
 8008794:	4b5c      	ldr	r3, [pc, #368]	; (8008908 <HAL_UART_MspInit+0x1a8>)
 8008796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008798:	f003 0310 	and.w	r3, r3, #16
 800879c:	61bb      	str	r3, [r7, #24]
 800879e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80087a0:	2300      	movs	r3, #0
 80087a2:	617b      	str	r3, [r7, #20]
 80087a4:	4b58      	ldr	r3, [pc, #352]	; (8008908 <HAL_UART_MspInit+0x1a8>)
 80087a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a8:	4a57      	ldr	r2, [pc, #348]	; (8008908 <HAL_UART_MspInit+0x1a8>)
 80087aa:	f043 0301 	orr.w	r3, r3, #1
 80087ae:	6313      	str	r3, [r2, #48]	; 0x30
 80087b0:	4b55      	ldr	r3, [pc, #340]	; (8008908 <HAL_UART_MspInit+0x1a8>)
 80087b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087b4:	f003 0301 	and.w	r3, r3, #1
 80087b8:	617b      	str	r3, [r7, #20]
 80087ba:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80087bc:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80087c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087c2:	2302      	movs	r3, #2
 80087c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087c6:	2300      	movs	r3, #0
 80087c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087ca:	2303      	movs	r3, #3
 80087cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80087ce:	2307      	movs	r3, #7
 80087d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087d2:	f107 031c 	add.w	r3, r7, #28
 80087d6:	4619      	mov	r1, r3
 80087d8:	484c      	ldr	r0, [pc, #304]	; (800890c <HAL_UART_MspInit+0x1ac>)
 80087da:	f002 f819 	bl	800a810 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80087de:	4b4c      	ldr	r3, [pc, #304]	; (8008910 <HAL_UART_MspInit+0x1b0>)
 80087e0:	4a4c      	ldr	r2, [pc, #304]	; (8008914 <HAL_UART_MspInit+0x1b4>)
 80087e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80087e4:	4b4a      	ldr	r3, [pc, #296]	; (8008910 <HAL_UART_MspInit+0x1b0>)
 80087e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80087ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80087ec:	4b48      	ldr	r3, [pc, #288]	; (8008910 <HAL_UART_MspInit+0x1b0>)
 80087ee:	2240      	movs	r2, #64	; 0x40
 80087f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80087f2:	4b47      	ldr	r3, [pc, #284]	; (8008910 <HAL_UART_MspInit+0x1b0>)
 80087f4:	2200      	movs	r2, #0
 80087f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80087f8:	4b45      	ldr	r3, [pc, #276]	; (8008910 <HAL_UART_MspInit+0x1b0>)
 80087fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80087fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008800:	4b43      	ldr	r3, [pc, #268]	; (8008910 <HAL_UART_MspInit+0x1b0>)
 8008802:	2200      	movs	r2, #0
 8008804:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008806:	4b42      	ldr	r3, [pc, #264]	; (8008910 <HAL_UART_MspInit+0x1b0>)
 8008808:	2200      	movs	r2, #0
 800880a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800880c:	4b40      	ldr	r3, [pc, #256]	; (8008910 <HAL_UART_MspInit+0x1b0>)
 800880e:	2200      	movs	r2, #0
 8008810:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008812:	4b3f      	ldr	r3, [pc, #252]	; (8008910 <HAL_UART_MspInit+0x1b0>)
 8008814:	2200      	movs	r2, #0
 8008816:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008818:	4b3d      	ldr	r3, [pc, #244]	; (8008910 <HAL_UART_MspInit+0x1b0>)
 800881a:	2200      	movs	r2, #0
 800881c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800881e:	483c      	ldr	r0, [pc, #240]	; (8008910 <HAL_UART_MspInit+0x1b0>)
 8008820:	f001 fc86 	bl	800a130 <HAL_DMA_Init>
 8008824:	4603      	mov	r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	d001      	beq.n	800882e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800882a:	f7ff f9ff 	bl	8007c2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a37      	ldr	r2, [pc, #220]	; (8008910 <HAL_UART_MspInit+0x1b0>)
 8008832:	635a      	str	r2, [r3, #52]	; 0x34
 8008834:	4a36      	ldr	r2, [pc, #216]	; (8008910 <HAL_UART_MspInit+0x1b0>)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800883a:	4b37      	ldr	r3, [pc, #220]	; (8008918 <HAL_UART_MspInit+0x1b8>)
 800883c:	4a37      	ldr	r2, [pc, #220]	; (800891c <HAL_UART_MspInit+0x1bc>)
 800883e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8008840:	4b35      	ldr	r3, [pc, #212]	; (8008918 <HAL_UART_MspInit+0x1b8>)
 8008842:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008846:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008848:	4b33      	ldr	r3, [pc, #204]	; (8008918 <HAL_UART_MspInit+0x1b8>)
 800884a:	2200      	movs	r2, #0
 800884c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800884e:	4b32      	ldr	r3, [pc, #200]	; (8008918 <HAL_UART_MspInit+0x1b8>)
 8008850:	2200      	movs	r2, #0
 8008852:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008854:	4b30      	ldr	r3, [pc, #192]	; (8008918 <HAL_UART_MspInit+0x1b8>)
 8008856:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800885a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800885c:	4b2e      	ldr	r3, [pc, #184]	; (8008918 <HAL_UART_MspInit+0x1b8>)
 800885e:	2200      	movs	r2, #0
 8008860:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008862:	4b2d      	ldr	r3, [pc, #180]	; (8008918 <HAL_UART_MspInit+0x1b8>)
 8008864:	2200      	movs	r2, #0
 8008866:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8008868:	4b2b      	ldr	r3, [pc, #172]	; (8008918 <HAL_UART_MspInit+0x1b8>)
 800886a:	2200      	movs	r2, #0
 800886c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800886e:	4b2a      	ldr	r3, [pc, #168]	; (8008918 <HAL_UART_MspInit+0x1b8>)
 8008870:	2200      	movs	r2, #0
 8008872:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008874:	4b28      	ldr	r3, [pc, #160]	; (8008918 <HAL_UART_MspInit+0x1b8>)
 8008876:	2200      	movs	r2, #0
 8008878:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800887a:	4827      	ldr	r0, [pc, #156]	; (8008918 <HAL_UART_MspInit+0x1b8>)
 800887c:	f001 fc58 	bl	800a130 <HAL_DMA_Init>
 8008880:	4603      	mov	r3, r0
 8008882:	2b00      	cmp	r3, #0
 8008884:	d001      	beq.n	800888a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8008886:	f7ff f9d1 	bl	8007c2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a22      	ldr	r2, [pc, #136]	; (8008918 <HAL_UART_MspInit+0x1b8>)
 800888e:	639a      	str	r2, [r3, #56]	; 0x38
 8008890:	4a21      	ldr	r2, [pc, #132]	; (8008918 <HAL_UART_MspInit+0x1b8>)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8008896:	e030      	b.n	80088fa <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART2)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a20      	ldr	r2, [pc, #128]	; (8008920 <HAL_UART_MspInit+0x1c0>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d12b      	bne.n	80088fa <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80088a2:	2300      	movs	r3, #0
 80088a4:	613b      	str	r3, [r7, #16]
 80088a6:	4b18      	ldr	r3, [pc, #96]	; (8008908 <HAL_UART_MspInit+0x1a8>)
 80088a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088aa:	4a17      	ldr	r2, [pc, #92]	; (8008908 <HAL_UART_MspInit+0x1a8>)
 80088ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088b0:	6413      	str	r3, [r2, #64]	; 0x40
 80088b2:	4b15      	ldr	r3, [pc, #84]	; (8008908 <HAL_UART_MspInit+0x1a8>)
 80088b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ba:	613b      	str	r3, [r7, #16]
 80088bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80088be:	2300      	movs	r3, #0
 80088c0:	60fb      	str	r3, [r7, #12]
 80088c2:	4b11      	ldr	r3, [pc, #68]	; (8008908 <HAL_UART_MspInit+0x1a8>)
 80088c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c6:	4a10      	ldr	r2, [pc, #64]	; (8008908 <HAL_UART_MspInit+0x1a8>)
 80088c8:	f043 0308 	orr.w	r3, r3, #8
 80088cc:	6313      	str	r3, [r2, #48]	; 0x30
 80088ce:	4b0e      	ldr	r3, [pc, #56]	; (8008908 <HAL_UART_MspInit+0x1a8>)
 80088d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088d2:	f003 0308 	and.w	r3, r3, #8
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DBG_UART_TX_Pin|DBG_UART_RX_Pin;
 80088da:	2360      	movs	r3, #96	; 0x60
 80088dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088de:	2302      	movs	r3, #2
 80088e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088e2:	2300      	movs	r3, #0
 80088e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80088e6:	2303      	movs	r3, #3
 80088e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80088ea:	2307      	movs	r3, #7
 80088ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80088ee:	f107 031c 	add.w	r3, r7, #28
 80088f2:	4619      	mov	r1, r3
 80088f4:	480b      	ldr	r0, [pc, #44]	; (8008924 <HAL_UART_MspInit+0x1c4>)
 80088f6:	f001 ff8b 	bl	800a810 <HAL_GPIO_Init>
}
 80088fa:	bf00      	nop
 80088fc:	3730      	adds	r7, #48	; 0x30
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	40011000 	.word	0x40011000
 8008908:	40023800 	.word	0x40023800
 800890c:	40020000 	.word	0x40020000
 8008910:	20001070 	.word	0x20001070
 8008914:	400264b8 	.word	0x400264b8
 8008918:	200010d0 	.word	0x200010d0
 800891c:	40026488 	.word	0x40026488
 8008920:	40004400 	.word	0x40004400
 8008924:	40020c00 	.word	0x40020c00

08008928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008928:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008960 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800892c:	480d      	ldr	r0, [pc, #52]	; (8008964 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800892e:	490e      	ldr	r1, [pc, #56]	; (8008968 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008930:	4a0e      	ldr	r2, [pc, #56]	; (800896c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008932:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008934:	e002      	b.n	800893c <LoopCopyDataInit>

08008936 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008936:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008938:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800893a:	3304      	adds	r3, #4

0800893c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800893c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800893e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008940:	d3f9      	bcc.n	8008936 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008942:	4a0b      	ldr	r2, [pc, #44]	; (8008970 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008944:	4c0b      	ldr	r4, [pc, #44]	; (8008974 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008946:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008948:	e001      	b.n	800894e <LoopFillZerobss>

0800894a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800894a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800894c:	3204      	adds	r2, #4

0800894e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800894e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008950:	d3fb      	bcc.n	800894a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8008952:	f7ff fbbd 	bl	80080d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008956:	f00a fee7 	bl	8013728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800895a:	f7ff f8b9 	bl	8007ad0 <main>
  bx  lr    
 800895e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008960:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008968:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800896c:	0801415c 	.word	0x0801415c
  ldr r2, =_sbss
 8008970:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8008974:	2000a208 	.word	0x2000a208

08008978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008978:	e7fe      	b.n	8008978 <ADC_IRQHandler>
	...

0800897c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008980:	4b0e      	ldr	r3, [pc, #56]	; (80089bc <HAL_Init+0x40>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a0d      	ldr	r2, [pc, #52]	; (80089bc <HAL_Init+0x40>)
 8008986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800898a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800898c:	4b0b      	ldr	r3, [pc, #44]	; (80089bc <HAL_Init+0x40>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a0a      	ldr	r2, [pc, #40]	; (80089bc <HAL_Init+0x40>)
 8008992:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008996:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008998:	4b08      	ldr	r3, [pc, #32]	; (80089bc <HAL_Init+0x40>)
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a07      	ldr	r2, [pc, #28]	; (80089bc <HAL_Init+0x40>)
 800899e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80089a4:	2003      	movs	r0, #3
 80089a6:	f001 fb72 	bl	800a08e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80089aa:	2005      	movs	r0, #5
 80089ac:	f7ff fa24 	bl	8007df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80089b0:	f7ff f9f6 	bl	8007da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80089b4:	2300      	movs	r3, #0
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	40023c00 	.word	0x40023c00

080089c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80089c0:	b480      	push	{r7}
 80089c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80089c4:	4b06      	ldr	r3, [pc, #24]	; (80089e0 <HAL_IncTick+0x20>)
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	461a      	mov	r2, r3
 80089ca:	4b06      	ldr	r3, [pc, #24]	; (80089e4 <HAL_IncTick+0x24>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4413      	add	r3, r2
 80089d0:	4a04      	ldr	r2, [pc, #16]	; (80089e4 <HAL_IncTick+0x24>)
 80089d2:	6013      	str	r3, [r2, #0]
}
 80089d4:	bf00      	nop
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	20000018 	.word	0x20000018
 80089e4:	20001130 	.word	0x20001130

080089e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80089e8:	b480      	push	{r7}
 80089ea:	af00      	add	r7, sp, #0
  return uwTick;
 80089ec:	4b03      	ldr	r3, [pc, #12]	; (80089fc <HAL_GetTick+0x14>)
 80089ee:	681b      	ldr	r3, [r3, #0]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr
 80089fa:	bf00      	nop
 80089fc:	20001130 	.word	0x20001130

08008a00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008a00:	b580      	push	{r7, lr}
 8008a02:	b084      	sub	sp, #16
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d101      	bne.n	8008a16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008a12:	2301      	movs	r3, #1
 8008a14:	e033      	b.n	8008a7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d109      	bne.n	8008a32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f7fe fc0e 	bl	8007240 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a36:	f003 0310 	and.w	r3, r3, #16
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d118      	bne.n	8008a70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008a46:	f023 0302 	bic.w	r3, r3, #2
 8008a4a:	f043 0202 	orr.w	r2, r3, #2
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f000 fa54 	bl	8008f00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a62:	f023 0303 	bic.w	r3, r3, #3
 8008a66:	f043 0201 	orr.w	r2, r3, #1
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	641a      	str	r2, [r3, #64]	; 0x40
 8008a6e:	e001      	b.n	8008a74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
	...

08008a88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b086      	sub	sp, #24
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008a94:	2300      	movs	r3, #0
 8008a96:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d101      	bne.n	8008aa6 <HAL_ADC_Start_DMA+0x1e>
 8008aa2:	2302      	movs	r3, #2
 8008aa4:	e0e9      	b.n	8008c7a <HAL_ADC_Start_DMA+0x1f2>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	f003 0301 	and.w	r3, r3, #1
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d018      	beq.n	8008aee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	689a      	ldr	r2, [r3, #8]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f042 0201 	orr.w	r2, r2, #1
 8008aca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008acc:	4b6d      	ldr	r3, [pc, #436]	; (8008c84 <HAL_ADC_Start_DMA+0x1fc>)
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a6d      	ldr	r2, [pc, #436]	; (8008c88 <HAL_ADC_Start_DMA+0x200>)
 8008ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ad6:	0c9a      	lsrs	r2, r3, #18
 8008ad8:	4613      	mov	r3, r2
 8008ada:	005b      	lsls	r3, r3, #1
 8008adc:	4413      	add	r3, r2
 8008ade:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008ae0:	e002      	b.n	8008ae8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1f9      	bne.n	8008ae2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008afc:	d107      	bne.n	8008b0e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	689a      	ldr	r2, [r3, #8]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	f003 0301 	and.w	r3, r3, #1
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	f040 80a1 	bne.w	8008c60 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008b26:	f023 0301 	bic.w	r3, r3, #1
 8008b2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d007      	beq.n	8008b50 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008b48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b5c:	d106      	bne.n	8008b6c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b62:	f023 0206 	bic.w	r2, r3, #6
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	645a      	str	r2, [r3, #68]	; 0x44
 8008b6a:	e002      	b.n	8008b72 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2200      	movs	r2, #0
 8008b70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008b7a:	4b44      	ldr	r3, [pc, #272]	; (8008c8c <HAL_ADC_Start_DMA+0x204>)
 8008b7c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b82:	4a43      	ldr	r2, [pc, #268]	; (8008c90 <HAL_ADC_Start_DMA+0x208>)
 8008b84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b8a:	4a42      	ldr	r2, [pc, #264]	; (8008c94 <HAL_ADC_Start_DMA+0x20c>)
 8008b8c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b92:	4a41      	ldr	r2, [pc, #260]	; (8008c98 <HAL_ADC_Start_DMA+0x210>)
 8008b94:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008b9e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	685a      	ldr	r2, [r3, #4]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008bae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	689a      	ldr	r2, [r3, #8]
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008bbe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	334c      	adds	r3, #76	; 0x4c
 8008bca:	4619      	mov	r1, r3
 8008bcc:	68ba      	ldr	r2, [r7, #8]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f001 fb5c 	bl	800a28c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	f003 031f 	and.w	r3, r3, #31
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d12a      	bne.n	8008c36 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a2d      	ldr	r2, [pc, #180]	; (8008c9c <HAL_ADC_Start_DMA+0x214>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d015      	beq.n	8008c16 <HAL_ADC_Start_DMA+0x18e>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4a2c      	ldr	r2, [pc, #176]	; (8008ca0 <HAL_ADC_Start_DMA+0x218>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d105      	bne.n	8008c00 <HAL_ADC_Start_DMA+0x178>
 8008bf4:	4b25      	ldr	r3, [pc, #148]	; (8008c8c <HAL_ADC_Start_DMA+0x204>)
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	f003 031f 	and.w	r3, r3, #31
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d00a      	beq.n	8008c16 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a27      	ldr	r2, [pc, #156]	; (8008ca4 <HAL_ADC_Start_DMA+0x21c>)
 8008c06:	4293      	cmp	r3, r2
 8008c08:	d136      	bne.n	8008c78 <HAL_ADC_Start_DMA+0x1f0>
 8008c0a:	4b20      	ldr	r3, [pc, #128]	; (8008c8c <HAL_ADC_Start_DMA+0x204>)
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	f003 0310 	and.w	r3, r3, #16
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d130      	bne.n	8008c78 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d129      	bne.n	8008c78 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	689a      	ldr	r2, [r3, #8]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008c32:	609a      	str	r2, [r3, #8]
 8008c34:	e020      	b.n	8008c78 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a18      	ldr	r2, [pc, #96]	; (8008c9c <HAL_ADC_Start_DMA+0x214>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d11b      	bne.n	8008c78 <HAL_ADC_Start_DMA+0x1f0>
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d114      	bne.n	8008c78 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	689a      	ldr	r2, [r3, #8]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008c5c:	609a      	str	r2, [r3, #8]
 8008c5e:	e00b      	b.n	8008c78 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c64:	f043 0210 	orr.w	r2, r3, #16
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c70:	f043 0201 	orr.w	r2, r3, #1
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3718      	adds	r7, #24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}
 8008c82:	bf00      	nop
 8008c84:	20000010 	.word	0x20000010
 8008c88:	431bde83 	.word	0x431bde83
 8008c8c:	40012300 	.word	0x40012300
 8008c90:	080090f9 	.word	0x080090f9
 8008c94:	080091b3 	.word	0x080091b3
 8008c98:	080091cf 	.word	0x080091cf
 8008c9c:	40012000 	.word	0x40012000
 8008ca0:	40012100 	.word	0x40012100
 8008ca4:	40012200 	.word	0x40012200

08008ca8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008cb0:	bf00      	nop
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b085      	sub	sp, #20
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d101      	bne.n	8008cd8 <HAL_ADC_ConfigChannel+0x1c>
 8008cd4:	2302      	movs	r3, #2
 8008cd6:	e105      	b.n	8008ee4 <HAL_ADC_ConfigChannel+0x228>
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2b09      	cmp	r3, #9
 8008ce6:	d925      	bls.n	8008d34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68d9      	ldr	r1, [r3, #12]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	b29b      	uxth	r3, r3
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	4613      	mov	r3, r2
 8008cf8:	005b      	lsls	r3, r3, #1
 8008cfa:	4413      	add	r3, r2
 8008cfc:	3b1e      	subs	r3, #30
 8008cfe:	2207      	movs	r2, #7
 8008d00:	fa02 f303 	lsl.w	r3, r2, r3
 8008d04:	43da      	mvns	r2, r3
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	400a      	ands	r2, r1
 8008d0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68d9      	ldr	r1, [r3, #12]
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	689a      	ldr	r2, [r3, #8]
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	4618      	mov	r0, r3
 8008d20:	4603      	mov	r3, r0
 8008d22:	005b      	lsls	r3, r3, #1
 8008d24:	4403      	add	r3, r0
 8008d26:	3b1e      	subs	r3, #30
 8008d28:	409a      	lsls	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	430a      	orrs	r2, r1
 8008d30:	60da      	str	r2, [r3, #12]
 8008d32:	e022      	b.n	8008d7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	6919      	ldr	r1, [r3, #16]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	b29b      	uxth	r3, r3
 8008d40:	461a      	mov	r2, r3
 8008d42:	4613      	mov	r3, r2
 8008d44:	005b      	lsls	r3, r3, #1
 8008d46:	4413      	add	r3, r2
 8008d48:	2207      	movs	r2, #7
 8008d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d4e:	43da      	mvns	r2, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	400a      	ands	r2, r1
 8008d56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	6919      	ldr	r1, [r3, #16]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	689a      	ldr	r2, [r3, #8]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	b29b      	uxth	r3, r3
 8008d68:	4618      	mov	r0, r3
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	005b      	lsls	r3, r3, #1
 8008d6e:	4403      	add	r3, r0
 8008d70:	409a      	lsls	r2, r3
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	430a      	orrs	r2, r1
 8008d78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	2b06      	cmp	r3, #6
 8008d80:	d824      	bhi.n	8008dcc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008d88:	683b      	ldr	r3, [r7, #0]
 8008d8a:	685a      	ldr	r2, [r3, #4]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4413      	add	r3, r2
 8008d92:	3b05      	subs	r3, #5
 8008d94:	221f      	movs	r2, #31
 8008d96:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9a:	43da      	mvns	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	400a      	ands	r2, r1
 8008da2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	4618      	mov	r0, r3
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	685a      	ldr	r2, [r3, #4]
 8008db6:	4613      	mov	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	4413      	add	r3, r2
 8008dbc:	3b05      	subs	r3, #5
 8008dbe:	fa00 f203 	lsl.w	r2, r0, r3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	430a      	orrs	r2, r1
 8008dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8008dca:	e04c      	b.n	8008e66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	2b0c      	cmp	r3, #12
 8008dd2:	d824      	bhi.n	8008e1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	685a      	ldr	r2, [r3, #4]
 8008dde:	4613      	mov	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4413      	add	r3, r2
 8008de4:	3b23      	subs	r3, #35	; 0x23
 8008de6:	221f      	movs	r2, #31
 8008de8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dec:	43da      	mvns	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	400a      	ands	r2, r1
 8008df4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	4618      	mov	r0, r3
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	685a      	ldr	r2, [r3, #4]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	4413      	add	r3, r2
 8008e0e:	3b23      	subs	r3, #35	; 0x23
 8008e10:	fa00 f203 	lsl.w	r2, r0, r3
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	631a      	str	r2, [r3, #48]	; 0x30
 8008e1c:	e023      	b.n	8008e66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	685a      	ldr	r2, [r3, #4]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	4413      	add	r3, r2
 8008e2e:	3b41      	subs	r3, #65	; 0x41
 8008e30:	221f      	movs	r2, #31
 8008e32:	fa02 f303 	lsl.w	r3, r2, r3
 8008e36:	43da      	mvns	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	400a      	ands	r2, r1
 8008e3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	4613      	mov	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	4413      	add	r3, r2
 8008e58:	3b41      	subs	r3, #65	; 0x41
 8008e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	430a      	orrs	r2, r1
 8008e64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008e66:	4b22      	ldr	r3, [pc, #136]	; (8008ef0 <HAL_ADC_ConfigChannel+0x234>)
 8008e68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a21      	ldr	r2, [pc, #132]	; (8008ef4 <HAL_ADC_ConfigChannel+0x238>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d109      	bne.n	8008e88 <HAL_ADC_ConfigChannel+0x1cc>
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	2b12      	cmp	r3, #18
 8008e7a:	d105      	bne.n	8008e88 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a19      	ldr	r2, [pc, #100]	; (8008ef4 <HAL_ADC_ConfigChannel+0x238>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d123      	bne.n	8008eda <HAL_ADC_ConfigChannel+0x21e>
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2b10      	cmp	r3, #16
 8008e98:	d003      	beq.n	8008ea2 <HAL_ADC_ConfigChannel+0x1e6>
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b11      	cmp	r3, #17
 8008ea0:	d11b      	bne.n	8008eda <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b10      	cmp	r3, #16
 8008eb4:	d111      	bne.n	8008eda <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008eb6:	4b10      	ldr	r3, [pc, #64]	; (8008ef8 <HAL_ADC_ConfigChannel+0x23c>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a10      	ldr	r2, [pc, #64]	; (8008efc <HAL_ADC_ConfigChannel+0x240>)
 8008ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ec0:	0c9a      	lsrs	r2, r3, #18
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4413      	add	r3, r2
 8008ec8:	005b      	lsls	r3, r3, #1
 8008eca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008ecc:	e002      	b.n	8008ed4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	3b01      	subs	r3, #1
 8008ed2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1f9      	bne.n	8008ece <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3714      	adds	r7, #20
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr
 8008ef0:	40012300 	.word	0x40012300
 8008ef4:	40012000 	.word	0x40012000
 8008ef8:	20000010 	.word	0x20000010
 8008efc:	431bde83 	.word	0x431bde83

08008f00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008f08:	4b79      	ldr	r3, [pc, #484]	; (80090f0 <ADC_Init+0x1f0>)
 8008f0a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	685b      	ldr	r3, [r3, #4]
 8008f10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	685a      	ldr	r2, [r3, #4]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	431a      	orrs	r2, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	685a      	ldr	r2, [r3, #4]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	6859      	ldr	r1, [r3, #4]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	691b      	ldr	r3, [r3, #16]
 8008f40:	021a      	lsls	r2, r3, #8
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	430a      	orrs	r2, r1
 8008f48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	685a      	ldr	r2, [r3, #4]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008f58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	6859      	ldr	r1, [r3, #4]
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	689a      	ldr	r2, [r3, #8]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	430a      	orrs	r2, r1
 8008f6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	689a      	ldr	r2, [r3, #8]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008f7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	6899      	ldr	r1, [r3, #8]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	68da      	ldr	r2, [r3, #12]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	430a      	orrs	r2, r1
 8008f8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f92:	4a58      	ldr	r2, [pc, #352]	; (80090f4 <ADC_Init+0x1f4>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d022      	beq.n	8008fde <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	689a      	ldr	r2, [r3, #8]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008fa6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	6899      	ldr	r1, [r3, #8]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	430a      	orrs	r2, r1
 8008fb8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	689a      	ldr	r2, [r3, #8]
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008fc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	6899      	ldr	r1, [r3, #8]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	430a      	orrs	r2, r1
 8008fda:	609a      	str	r2, [r3, #8]
 8008fdc:	e00f      	b.n	8008ffe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	689a      	ldr	r2, [r3, #8]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008fec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	689a      	ldr	r2, [r3, #8]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008ffc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	689a      	ldr	r2, [r3, #8]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f022 0202 	bic.w	r2, r2, #2
 800900c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	6899      	ldr	r1, [r3, #8]
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	7e1b      	ldrb	r3, [r3, #24]
 8009018:	005a      	lsls	r2, r3, #1
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	430a      	orrs	r2, r1
 8009020:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d01b      	beq.n	8009064 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	685a      	ldr	r2, [r3, #4]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800903a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	685a      	ldr	r2, [r3, #4]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800904a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6859      	ldr	r1, [r3, #4]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	3b01      	subs	r3, #1
 8009058:	035a      	lsls	r2, r3, #13
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	430a      	orrs	r2, r1
 8009060:	605a      	str	r2, [r3, #4]
 8009062:	e007      	b.n	8009074 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009072:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009082:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	69db      	ldr	r3, [r3, #28]
 800908e:	3b01      	subs	r3, #1
 8009090:	051a      	lsls	r2, r3, #20
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	430a      	orrs	r2, r1
 8009098:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	689a      	ldr	r2, [r3, #8]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80090a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	6899      	ldr	r1, [r3, #8]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80090b6:	025a      	lsls	r2, r3, #9
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	430a      	orrs	r2, r1
 80090be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	689a      	ldr	r2, [r3, #8]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	6899      	ldr	r1, [r3, #8]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	695b      	ldr	r3, [r3, #20]
 80090da:	029a      	lsls	r2, r3, #10
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	430a      	orrs	r2, r1
 80090e2:	609a      	str	r2, [r3, #8]
}
 80090e4:	bf00      	nop
 80090e6:	3714      	adds	r7, #20
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr
 80090f0:	40012300 	.word	0x40012300
 80090f4:	0f000001 	.word	0x0f000001

080090f8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009104:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800910e:	2b00      	cmp	r3, #0
 8009110:	d13c      	bne.n	800918c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009116:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d12b      	bne.n	8009184 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009130:	2b00      	cmp	r3, #0
 8009132:	d127      	bne.n	8009184 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800913a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800913e:	2b00      	cmp	r3, #0
 8009140:	d006      	beq.n	8009150 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	689b      	ldr	r3, [r3, #8]
 8009148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800914c:	2b00      	cmp	r3, #0
 800914e:	d119      	bne.n	8009184 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	685a      	ldr	r2, [r3, #4]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f022 0220 	bic.w	r2, r2, #32
 800915e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009164:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d105      	bne.n	8009184 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917c:	f043 0201 	orr.w	r2, r3, #1
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f003 fea2 	bl	800cece <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800918a:	e00e      	b.n	80091aa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009190:	f003 0310 	and.w	r3, r3, #16
 8009194:	2b00      	cmp	r3, #0
 8009196:	d003      	beq.n	80091a0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009198:	68f8      	ldr	r0, [r7, #12]
 800919a:	f7ff fd85 	bl	8008ca8 <HAL_ADC_ErrorCallback>
}
 800919e:	e004      	b.n	80091aa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	4798      	blx	r3
}
 80091aa:	bf00      	nop
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b084      	sub	sp, #16
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091be:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f003 ff32 	bl	800d02a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80091c6:	bf00      	nop
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80091ce:	b580      	push	{r7, lr}
 80091d0:	b084      	sub	sp, #16
 80091d2:	af00      	add	r7, sp, #0
 80091d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091da:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2240      	movs	r2, #64	; 0x40
 80091e0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091e6:	f043 0204 	orr.w	r2, r3, #4
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80091ee:	68f8      	ldr	r0, [r7, #12]
 80091f0:	f7ff fd5a 	bl	8008ca8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80091f4:	bf00      	nop
 80091f6:	3710      	adds	r7, #16
 80091f8:	46bd      	mov	sp, r7
 80091fa:	bd80      	pop	{r7, pc}

080091fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d101      	bne.n	800920e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	e0ed      	b.n	80093ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	d102      	bne.n	8009220 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7fe f974 	bl	8007508 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f042 0201 	orr.w	r2, r2, #1
 800922e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009230:	f7ff fbda 	bl	80089e8 <HAL_GetTick>
 8009234:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009236:	e012      	b.n	800925e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009238:	f7ff fbd6 	bl	80089e8 <HAL_GetTick>
 800923c:	4602      	mov	r2, r0
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	2b0a      	cmp	r3, #10
 8009244:	d90b      	bls.n	800925e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800924a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2205      	movs	r2, #5
 8009256:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800925a:	2301      	movs	r3, #1
 800925c:	e0c5      	b.n	80093ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	f003 0301 	and.w	r3, r3, #1
 8009268:	2b00      	cmp	r3, #0
 800926a:	d0e5      	beq.n	8009238 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f022 0202 	bic.w	r2, r2, #2
 800927a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800927c:	f7ff fbb4 	bl	80089e8 <HAL_GetTick>
 8009280:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009282:	e012      	b.n	80092aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009284:	f7ff fbb0 	bl	80089e8 <HAL_GetTick>
 8009288:	4602      	mov	r2, r0
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	1ad3      	subs	r3, r2, r3
 800928e:	2b0a      	cmp	r3, #10
 8009290:	d90b      	bls.n	80092aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009296:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2205      	movs	r2, #5
 80092a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80092a6:	2301      	movs	r3, #1
 80092a8:	e09f      	b.n	80093ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	685b      	ldr	r3, [r3, #4]
 80092b0:	f003 0302 	and.w	r3, r3, #2
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d1e5      	bne.n	8009284 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	7e1b      	ldrb	r3, [r3, #24]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d108      	bne.n	80092d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80092ce:	601a      	str	r2, [r3, #0]
 80092d0:	e007      	b.n	80092e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	7e5b      	ldrb	r3, [r3, #25]
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d108      	bne.n	80092fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092f8:	601a      	str	r2, [r3, #0]
 80092fa:	e007      	b.n	800930c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800930a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	7e9b      	ldrb	r3, [r3, #26]
 8009310:	2b01      	cmp	r3, #1
 8009312:	d108      	bne.n	8009326 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f042 0220 	orr.w	r2, r2, #32
 8009322:	601a      	str	r2, [r3, #0]
 8009324:	e007      	b.n	8009336 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f022 0220 	bic.w	r2, r2, #32
 8009334:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	7edb      	ldrb	r3, [r3, #27]
 800933a:	2b01      	cmp	r3, #1
 800933c:	d108      	bne.n	8009350 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f022 0210 	bic.w	r2, r2, #16
 800934c:	601a      	str	r2, [r3, #0]
 800934e:	e007      	b.n	8009360 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f042 0210 	orr.w	r2, r2, #16
 800935e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	7f1b      	ldrb	r3, [r3, #28]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d108      	bne.n	800937a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681a      	ldr	r2, [r3, #0]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f042 0208 	orr.w	r2, r2, #8
 8009376:	601a      	str	r2, [r3, #0]
 8009378:	e007      	b.n	800938a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681a      	ldr	r2, [r3, #0]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f022 0208 	bic.w	r2, r2, #8
 8009388:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	7f5b      	ldrb	r3, [r3, #29]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d108      	bne.n	80093a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f042 0204 	orr.w	r2, r2, #4
 80093a0:	601a      	str	r2, [r3, #0]
 80093a2:	e007      	b.n	80093b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f022 0204 	bic.w	r2, r2, #4
 80093b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	689a      	ldr	r2, [r3, #8]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	431a      	orrs	r2, r3
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	431a      	orrs	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	695b      	ldr	r3, [r3, #20]
 80093c8:	ea42 0103 	orr.w	r1, r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	1e5a      	subs	r2, r3, #1
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	430a      	orrs	r2, r1
 80093d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3710      	adds	r7, #16
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}
	...

080093f4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b087      	sub	sp, #28
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f893 3020 	ldrb.w	r3, [r3, #32]
 800940a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800940c:	7cfb      	ldrb	r3, [r7, #19]
 800940e:	2b01      	cmp	r3, #1
 8009410:	d003      	beq.n	800941a <HAL_CAN_ConfigFilter+0x26>
 8009412:	7cfb      	ldrb	r3, [r7, #19]
 8009414:	2b02      	cmp	r3, #2
 8009416:	f040 80be 	bne.w	8009596 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800941a:	4b65      	ldr	r3, [pc, #404]	; (80095b0 <HAL_CAN_ConfigFilter+0x1bc>)
 800941c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009424:	f043 0201 	orr.w	r2, r3, #1
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009434:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009448:	021b      	lsls	r3, r3, #8
 800944a:	431a      	orrs	r2, r3
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	f003 031f 	and.w	r3, r3, #31
 800945a:	2201      	movs	r2, #1
 800945c:	fa02 f303 	lsl.w	r3, r2, r3
 8009460:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	43db      	mvns	r3, r3
 800946c:	401a      	ands	r2, r3
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	69db      	ldr	r3, [r3, #28]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d123      	bne.n	80094c4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	43db      	mvns	r3, r3
 8009486:	401a      	ands	r2, r3
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800949a:	683a      	ldr	r2, [r7, #0]
 800949c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800949e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	3248      	adds	r2, #72	; 0x48
 80094a4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80094b8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80094ba:	6979      	ldr	r1, [r7, #20]
 80094bc:	3348      	adds	r3, #72	; 0x48
 80094be:	00db      	lsls	r3, r3, #3
 80094c0:	440b      	add	r3, r1
 80094c2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	69db      	ldr	r3, [r3, #28]
 80094c8:	2b01      	cmp	r3, #1
 80094ca:	d122      	bne.n	8009512 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	431a      	orrs	r2, r3
 80094d6:	697b      	ldr	r3, [r7, #20]
 80094d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80094e8:	683a      	ldr	r2, [r7, #0]
 80094ea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80094ec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	3248      	adds	r2, #72	; 0x48
 80094f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009506:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009508:	6979      	ldr	r1, [r7, #20]
 800950a:	3348      	adds	r3, #72	; 0x48
 800950c:	00db      	lsls	r3, r3, #3
 800950e:	440b      	add	r3, r1
 8009510:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	699b      	ldr	r3, [r3, #24]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d109      	bne.n	800952e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	43db      	mvns	r3, r3
 8009524:	401a      	ands	r2, r3
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800952c:	e007      	b.n	800953e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800952e:	697b      	ldr	r3, [r7, #20]
 8009530:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	431a      	orrs	r2, r3
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d109      	bne.n	800955a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	43db      	mvns	r3, r3
 8009550:	401a      	ands	r2, r3
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009558:	e007      	b.n	800956a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	431a      	orrs	r2, r3
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	6a1b      	ldr	r3, [r3, #32]
 800956e:	2b01      	cmp	r3, #1
 8009570:	d107      	bne.n	8009582 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	431a      	orrs	r2, r3
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009588:	f023 0201 	bic.w	r2, r3, #1
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	e006      	b.n	80095a4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80095a2:	2301      	movs	r3, #1
  }
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	371c      	adds	r7, #28
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	40006400 	.word	0x40006400

080095b4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d12e      	bne.n	8009626 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2202      	movs	r2, #2
 80095cc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f022 0201 	bic.w	r2, r2, #1
 80095de:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80095e0:	f7ff fa02 	bl	80089e8 <HAL_GetTick>
 80095e4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80095e6:	e012      	b.n	800960e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80095e8:	f7ff f9fe 	bl	80089e8 <HAL_GetTick>
 80095ec:	4602      	mov	r2, r0
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	1ad3      	subs	r3, r2, r3
 80095f2:	2b0a      	cmp	r3, #10
 80095f4:	d90b      	bls.n	800960e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2205      	movs	r2, #5
 8009606:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e012      	b.n	8009634 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	f003 0301 	and.w	r3, r3, #1
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1e5      	bne.n	80095e8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2200      	movs	r2, #0
 8009620:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8009622:	2300      	movs	r3, #0
 8009624:	e006      	b.n	8009634 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800962a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
  }
}
 8009634:	4618      	mov	r0, r3
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800963c:	b480      	push	{r7}
 800963e:	b089      	sub	sp, #36	; 0x24
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	607a      	str	r2, [r7, #4]
 8009648:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009650:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800965a:	7ffb      	ldrb	r3, [r7, #31]
 800965c:	2b01      	cmp	r3, #1
 800965e:	d003      	beq.n	8009668 <HAL_CAN_AddTxMessage+0x2c>
 8009660:	7ffb      	ldrb	r3, [r7, #31]
 8009662:	2b02      	cmp	r3, #2
 8009664:	f040 80b8 	bne.w	80097d8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800966e:	2b00      	cmp	r3, #0
 8009670:	d10a      	bne.n	8009688 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8009678:	2b00      	cmp	r3, #0
 800967a:	d105      	bne.n	8009688 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800967c:	69bb      	ldr	r3, [r7, #24]
 800967e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009682:	2b00      	cmp	r3, #0
 8009684:	f000 80a0 	beq.w	80097c8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009688:	69bb      	ldr	r3, [r7, #24]
 800968a:	0e1b      	lsrs	r3, r3, #24
 800968c:	f003 0303 	and.w	r3, r3, #3
 8009690:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	2b02      	cmp	r3, #2
 8009696:	d907      	bls.n	80096a8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800969c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80096a4:	2301      	movs	r3, #1
 80096a6:	e09e      	b.n	80097e6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80096a8:	2201      	movs	r2, #1
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	409a      	lsls	r2, r3
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	689b      	ldr	r3, [r3, #8]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d10d      	bne.n	80096d6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80096c0:	68bb      	ldr	r3, [r7, #8]
 80096c2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80096c4:	68f9      	ldr	r1, [r7, #12]
 80096c6:	6809      	ldr	r1, [r1, #0]
 80096c8:	431a      	orrs	r2, r3
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	3318      	adds	r3, #24
 80096ce:	011b      	lsls	r3, r3, #4
 80096d0:	440b      	add	r3, r1
 80096d2:	601a      	str	r2, [r3, #0]
 80096d4:	e00f      	b.n	80096f6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80096e0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80096e6:	68f9      	ldr	r1, [r7, #12]
 80096e8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80096ea:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	3318      	adds	r3, #24
 80096f0:	011b      	lsls	r3, r3, #4
 80096f2:	440b      	add	r3, r1
 80096f4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6819      	ldr	r1, [r3, #0]
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	691a      	ldr	r2, [r3, #16]
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	3318      	adds	r3, #24
 8009702:	011b      	lsls	r3, r3, #4
 8009704:	440b      	add	r3, r1
 8009706:	3304      	adds	r3, #4
 8009708:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	7d1b      	ldrb	r3, [r3, #20]
 800970e:	2b01      	cmp	r3, #1
 8009710:	d111      	bne.n	8009736 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	3318      	adds	r3, #24
 800971a:	011b      	lsls	r3, r3, #4
 800971c:	4413      	add	r3, r2
 800971e:	3304      	adds	r3, #4
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	6811      	ldr	r1, [r2, #0]
 8009726:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	3318      	adds	r3, #24
 800972e:	011b      	lsls	r3, r3, #4
 8009730:	440b      	add	r3, r1
 8009732:	3304      	adds	r3, #4
 8009734:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	3307      	adds	r3, #7
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	061a      	lsls	r2, r3, #24
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	3306      	adds	r3, #6
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	041b      	lsls	r3, r3, #16
 8009746:	431a      	orrs	r2, r3
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	3305      	adds	r3, #5
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	021b      	lsls	r3, r3, #8
 8009750:	4313      	orrs	r3, r2
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	3204      	adds	r2, #4
 8009756:	7812      	ldrb	r2, [r2, #0]
 8009758:	4610      	mov	r0, r2
 800975a:	68fa      	ldr	r2, [r7, #12]
 800975c:	6811      	ldr	r1, [r2, #0]
 800975e:	ea43 0200 	orr.w	r2, r3, r0
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	011b      	lsls	r3, r3, #4
 8009766:	440b      	add	r3, r1
 8009768:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800976c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	3303      	adds	r3, #3
 8009772:	781b      	ldrb	r3, [r3, #0]
 8009774:	061a      	lsls	r2, r3, #24
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	3302      	adds	r3, #2
 800977a:	781b      	ldrb	r3, [r3, #0]
 800977c:	041b      	lsls	r3, r3, #16
 800977e:	431a      	orrs	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	3301      	adds	r3, #1
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	021b      	lsls	r3, r3, #8
 8009788:	4313      	orrs	r3, r2
 800978a:	687a      	ldr	r2, [r7, #4]
 800978c:	7812      	ldrb	r2, [r2, #0]
 800978e:	4610      	mov	r0, r2
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	6811      	ldr	r1, [r2, #0]
 8009794:	ea43 0200 	orr.w	r2, r3, r0
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	011b      	lsls	r3, r3, #4
 800979c:	440b      	add	r3, r1
 800979e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80097a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	697b      	ldr	r3, [r7, #20]
 80097aa:	3318      	adds	r3, #24
 80097ac:	011b      	lsls	r3, r3, #4
 80097ae:	4413      	add	r3, r2
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	6811      	ldr	r1, [r2, #0]
 80097b6:	f043 0201 	orr.w	r2, r3, #1
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	3318      	adds	r3, #24
 80097be:	011b      	lsls	r3, r3, #4
 80097c0:	440b      	add	r3, r1
 80097c2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80097c4:	2300      	movs	r3, #0
 80097c6:	e00e      	b.n	80097e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097cc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	e006      	b.n	80097e6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097dc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80097e4:	2301      	movs	r3, #1
  }
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3724      	adds	r7, #36	; 0x24
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80097f2:	b480      	push	{r7}
 80097f4:	b085      	sub	sp, #20
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80097fa:	2300      	movs	r3, #0
 80097fc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009804:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8009806:	7afb      	ldrb	r3, [r7, #11]
 8009808:	2b01      	cmp	r3, #1
 800980a:	d002      	beq.n	8009812 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800980c:	7afb      	ldrb	r3, [r7, #11]
 800980e:	2b02      	cmp	r3, #2
 8009810:	d11d      	bne.n	800984e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	689b      	ldr	r3, [r3, #8]
 8009818:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d002      	beq.n	8009826 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	3301      	adds	r3, #1
 8009824:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	689b      	ldr	r3, [r3, #8]
 800982c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009830:	2b00      	cmp	r3, #0
 8009832:	d002      	beq.n	800983a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	3301      	adds	r3, #1
 8009838:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d002      	beq.n	800984e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	3301      	adds	r3, #1
 800984c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800984e:	68fb      	ldr	r3, [r7, #12]
}
 8009850:	4618      	mov	r0, r3
 8009852:	3714      	adds	r7, #20
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800985c:	b480      	push	{r7}
 800985e:	b087      	sub	sp, #28
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	60b9      	str	r1, [r7, #8]
 8009866:	607a      	str	r2, [r7, #4]
 8009868:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009870:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009872:	7dfb      	ldrb	r3, [r7, #23]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d003      	beq.n	8009880 <HAL_CAN_GetRxMessage+0x24>
 8009878:	7dfb      	ldrb	r3, [r7, #23]
 800987a:	2b02      	cmp	r3, #2
 800987c:	f040 80f3 	bne.w	8009a66 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10e      	bne.n	80098a4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	68db      	ldr	r3, [r3, #12]
 800988c:	f003 0303 	and.w	r3, r3, #3
 8009890:	2b00      	cmp	r3, #0
 8009892:	d116      	bne.n	80098c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009898:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80098a0:	2301      	movs	r3, #1
 80098a2:	e0e7      	b.n	8009a74 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	691b      	ldr	r3, [r3, #16]
 80098aa:	f003 0303 	and.w	r3, r3, #3
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d107      	bne.n	80098c2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80098be:	2301      	movs	r3, #1
 80098c0:	e0d8      	b.n	8009a74 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	331b      	adds	r3, #27
 80098ca:	011b      	lsls	r3, r3, #4
 80098cc:	4413      	add	r3, r2
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 0204 	and.w	r2, r3, #4
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10c      	bne.n	80098fa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	331b      	adds	r3, #27
 80098e8:	011b      	lsls	r3, r3, #4
 80098ea:	4413      	add	r3, r2
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	0d5b      	lsrs	r3, r3, #21
 80098f0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	601a      	str	r2, [r3, #0]
 80098f8:	e00b      	b.n	8009912 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681a      	ldr	r2, [r3, #0]
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	331b      	adds	r3, #27
 8009902:	011b      	lsls	r3, r3, #4
 8009904:	4413      	add	r3, r2
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	08db      	lsrs	r3, r3, #3
 800990a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681a      	ldr	r2, [r3, #0]
 8009916:	68bb      	ldr	r3, [r7, #8]
 8009918:	331b      	adds	r3, #27
 800991a:	011b      	lsls	r3, r3, #4
 800991c:	4413      	add	r3, r2
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f003 0202 	and.w	r2, r3, #2
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	331b      	adds	r3, #27
 8009930:	011b      	lsls	r3, r3, #4
 8009932:	4413      	add	r3, r2
 8009934:	3304      	adds	r3, #4
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f003 020f 	and.w	r2, r3, #15
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	331b      	adds	r3, #27
 8009948:	011b      	lsls	r3, r3, #4
 800994a:	4413      	add	r3, r2
 800994c:	3304      	adds	r3, #4
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	0a1b      	lsrs	r3, r3, #8
 8009952:	b2da      	uxtb	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	331b      	adds	r3, #27
 8009960:	011b      	lsls	r3, r3, #4
 8009962:	4413      	add	r3, r2
 8009964:	3304      	adds	r3, #4
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	0c1b      	lsrs	r3, r3, #16
 800996a:	b29a      	uxth	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	011b      	lsls	r3, r3, #4
 8009978:	4413      	add	r3, r2
 800997a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	b2da      	uxtb	r2, r3
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	011b      	lsls	r3, r3, #4
 800998e:	4413      	add	r3, r2
 8009990:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	0a1a      	lsrs	r2, r3, #8
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	3301      	adds	r3, #1
 800999c:	b2d2      	uxtb	r2, r2
 800999e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	011b      	lsls	r3, r3, #4
 80099a8:	4413      	add	r3, r2
 80099aa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	0c1a      	lsrs	r2, r3, #16
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	3302      	adds	r3, #2
 80099b6:	b2d2      	uxtb	r2, r2
 80099b8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	011b      	lsls	r3, r3, #4
 80099c2:	4413      	add	r3, r2
 80099c4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	0e1a      	lsrs	r2, r3, #24
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	3303      	adds	r3, #3
 80099d0:	b2d2      	uxtb	r2, r2
 80099d2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	011b      	lsls	r3, r3, #4
 80099dc:	4413      	add	r3, r2
 80099de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	3304      	adds	r3, #4
 80099e8:	b2d2      	uxtb	r2, r2
 80099ea:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	011b      	lsls	r3, r3, #4
 80099f4:	4413      	add	r3, r2
 80099f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	0a1a      	lsrs	r2, r3, #8
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	3305      	adds	r3, #5
 8009a02:	b2d2      	uxtb	r2, r2
 8009a04:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	681a      	ldr	r2, [r3, #0]
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	011b      	lsls	r3, r3, #4
 8009a0e:	4413      	add	r3, r2
 8009a10:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	0c1a      	lsrs	r2, r3, #16
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	3306      	adds	r3, #6
 8009a1c:	b2d2      	uxtb	r2, r2
 8009a1e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	011b      	lsls	r3, r3, #4
 8009a28:	4413      	add	r3, r2
 8009a2a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	0e1a      	lsrs	r2, r3, #24
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	3307      	adds	r3, #7
 8009a36:	b2d2      	uxtb	r2, r2
 8009a38:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d108      	bne.n	8009a52 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	68da      	ldr	r2, [r3, #12]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f042 0220 	orr.w	r2, r2, #32
 8009a4e:	60da      	str	r2, [r3, #12]
 8009a50:	e007      	b.n	8009a62 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	691a      	ldr	r2, [r3, #16]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f042 0220 	orr.w	r2, r2, #32
 8009a60:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009a62:	2300      	movs	r3, #0
 8009a64:	e006      	b.n	8009a74 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a6a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
  }
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	371c      	adds	r7, #28
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a90:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009a92:	7bfb      	ldrb	r3, [r7, #15]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d002      	beq.n	8009a9e <HAL_CAN_ActivateNotification+0x1e>
 8009a98:	7bfb      	ldrb	r3, [r7, #15]
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d109      	bne.n	8009ab2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	6959      	ldr	r1, [r3, #20]
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	683a      	ldr	r2, [r7, #0]
 8009aaa:	430a      	orrs	r2, r1
 8009aac:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	e006      	b.n	8009ac0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
  }
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3714      	adds	r7, #20
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr

08009acc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b08a      	sub	sp, #40	; 0x28
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	695b      	ldr	r3, [r3, #20]
 8009ade:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	685b      	ldr	r3, [r3, #4]
 8009ae6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	699b      	ldr	r3, [r3, #24]
 8009b06:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009b08:	6a3b      	ldr	r3, [r7, #32]
 8009b0a:	f003 0301 	and.w	r3, r3, #1
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d07c      	beq.n	8009c0c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8009b12:	69bb      	ldr	r3, [r7, #24]
 8009b14:	f003 0301 	and.w	r3, r3, #1
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d023      	beq.n	8009b64 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2201      	movs	r2, #1
 8009b22:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	f003 0302 	and.w	r3, r3, #2
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d003      	beq.n	8009b36 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f7f7 ff64 	bl	80019fc <HAL_CAN_TxMailbox0CompleteCallback>
 8009b34:	e016      	b.n	8009b64 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	f003 0304 	and.w	r3, r3, #4
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d004      	beq.n	8009b4a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009b46:	627b      	str	r3, [r7, #36]	; 0x24
 8009b48:	e00c      	b.n	8009b64 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	f003 0308 	and.w	r3, r3, #8
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d004      	beq.n	8009b5e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b56:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b5c:	e002      	b.n	8009b64 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f97f 	bl	8009e62 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009b64:	69bb      	ldr	r3, [r7, #24]
 8009b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d024      	beq.n	8009bb8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b76:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d003      	beq.n	8009b8a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f959 	bl	8009e3a <HAL_CAN_TxMailbox1CompleteCallback>
 8009b88:	e016      	b.n	8009bb8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d004      	beq.n	8009b9e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b9c:	e00c      	b.n	8009bb8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8009b9e:	69bb      	ldr	r3, [r7, #24]
 8009ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d004      	beq.n	8009bb2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009bae:	627b      	str	r3, [r7, #36]	; 0x24
 8009bb0:	e002      	b.n	8009bb8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f95f 	bl	8009e76 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009bb8:	69bb      	ldr	r3, [r7, #24]
 8009bba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d024      	beq.n	8009c0c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009bca:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d003      	beq.n	8009bde <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f000 f939 	bl	8009e4e <HAL_CAN_TxMailbox2CompleteCallback>
 8009bdc:	e016      	b.n	8009c0c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d004      	beq.n	8009bf2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bee:	627b      	str	r3, [r7, #36]	; 0x24
 8009bf0:	e00c      	b.n	8009c0c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d004      	beq.n	8009c06 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c02:	627b      	str	r3, [r7, #36]	; 0x24
 8009c04:	e002      	b.n	8009c0c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f93f 	bl	8009e8a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009c0c:	6a3b      	ldr	r3, [r7, #32]
 8009c0e:	f003 0308 	and.w	r3, r3, #8
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00c      	beq.n	8009c30 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	f003 0310 	and.w	r3, r3, #16
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d007      	beq.n	8009c30 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c26:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2210      	movs	r2, #16
 8009c2e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009c30:	6a3b      	ldr	r3, [r7, #32]
 8009c32:	f003 0304 	and.w	r3, r3, #4
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d00b      	beq.n	8009c52 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	f003 0308 	and.w	r3, r3, #8
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d006      	beq.n	8009c52 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2208      	movs	r2, #8
 8009c4a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f000 f926 	bl	8009e9e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009c52:	6a3b      	ldr	r3, [r7, #32]
 8009c54:	f003 0302 	and.w	r3, r3, #2
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d009      	beq.n	8009c70 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68db      	ldr	r3, [r3, #12]
 8009c62:	f003 0303 	and.w	r3, r3, #3
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d002      	beq.n	8009c70 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009c6a:	6878      	ldr	r0, [r7, #4]
 8009c6c:	f7f7 fe2e 	bl	80018cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009c70:	6a3b      	ldr	r3, [r7, #32]
 8009c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d00c      	beq.n	8009c94 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	f003 0310 	and.w	r3, r3, #16
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d007      	beq.n	8009c94 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c8a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2210      	movs	r2, #16
 8009c92:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009c94:	6a3b      	ldr	r3, [r7, #32]
 8009c96:	f003 0320 	and.w	r3, r3, #32
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d00b      	beq.n	8009cb6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	f003 0308 	and.w	r3, r3, #8
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d006      	beq.n	8009cb6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2208      	movs	r2, #8
 8009cae:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 f8fe 	bl	8009eb2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009cb6:	6a3b      	ldr	r3, [r7, #32]
 8009cb8:	f003 0310 	and.w	r3, r3, #16
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d009      	beq.n	8009cd4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	f003 0303 	and.w	r3, r3, #3
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d002      	beq.n	8009cd4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f7f7 fe36 	bl	8001940 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009cd4:	6a3b      	ldr	r3, [r7, #32]
 8009cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00b      	beq.n	8009cf6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	f003 0310 	and.w	r3, r3, #16
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d006      	beq.n	8009cf6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	2210      	movs	r2, #16
 8009cee:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 f8e8 	bl	8009ec6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009cf6:	6a3b      	ldr	r3, [r7, #32]
 8009cf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00b      	beq.n	8009d18 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	f003 0308 	and.w	r3, r3, #8
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d006      	beq.n	8009d18 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2208      	movs	r2, #8
 8009d10:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f8e1 	bl	8009eda <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009d18:	6a3b      	ldr	r3, [r7, #32]
 8009d1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d07b      	beq.n	8009e1a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	f003 0304 	and.w	r3, r3, #4
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d072      	beq.n	8009e12 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009d2c:	6a3b      	ldr	r3, [r7, #32]
 8009d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d008      	beq.n	8009d48 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d003      	beq.n	8009d48 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	f043 0301 	orr.w	r3, r3, #1
 8009d46:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009d48:	6a3b      	ldr	r3, [r7, #32]
 8009d4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d008      	beq.n	8009d64 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d003      	beq.n	8009d64 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5e:	f043 0302 	orr.w	r3, r3, #2
 8009d62:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009d64:	6a3b      	ldr	r3, [r7, #32]
 8009d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d008      	beq.n	8009d80 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d003      	beq.n	8009d80 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	f043 0304 	orr.w	r3, r3, #4
 8009d7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009d80:	6a3b      	ldr	r3, [r7, #32]
 8009d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d043      	beq.n	8009e12 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d03e      	beq.n	8009e12 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d9a:	2b60      	cmp	r3, #96	; 0x60
 8009d9c:	d02b      	beq.n	8009df6 <HAL_CAN_IRQHandler+0x32a>
 8009d9e:	2b60      	cmp	r3, #96	; 0x60
 8009da0:	d82e      	bhi.n	8009e00 <HAL_CAN_IRQHandler+0x334>
 8009da2:	2b50      	cmp	r3, #80	; 0x50
 8009da4:	d022      	beq.n	8009dec <HAL_CAN_IRQHandler+0x320>
 8009da6:	2b50      	cmp	r3, #80	; 0x50
 8009da8:	d82a      	bhi.n	8009e00 <HAL_CAN_IRQHandler+0x334>
 8009daa:	2b40      	cmp	r3, #64	; 0x40
 8009dac:	d019      	beq.n	8009de2 <HAL_CAN_IRQHandler+0x316>
 8009dae:	2b40      	cmp	r3, #64	; 0x40
 8009db0:	d826      	bhi.n	8009e00 <HAL_CAN_IRQHandler+0x334>
 8009db2:	2b30      	cmp	r3, #48	; 0x30
 8009db4:	d010      	beq.n	8009dd8 <HAL_CAN_IRQHandler+0x30c>
 8009db6:	2b30      	cmp	r3, #48	; 0x30
 8009db8:	d822      	bhi.n	8009e00 <HAL_CAN_IRQHandler+0x334>
 8009dba:	2b10      	cmp	r3, #16
 8009dbc:	d002      	beq.n	8009dc4 <HAL_CAN_IRQHandler+0x2f8>
 8009dbe:	2b20      	cmp	r3, #32
 8009dc0:	d005      	beq.n	8009dce <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009dc2:	e01d      	b.n	8009e00 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc6:	f043 0308 	orr.w	r3, r3, #8
 8009dca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009dcc:	e019      	b.n	8009e02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd0:	f043 0310 	orr.w	r3, r3, #16
 8009dd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009dd6:	e014      	b.n	8009e02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dda:	f043 0320 	orr.w	r3, r3, #32
 8009dde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009de0:	e00f      	b.n	8009e02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8009de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009de8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009dea:	e00a      	b.n	8009e02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8009dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009df2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009df4:	e005      	b.n	8009e02 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8009df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dfc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009dfe:	e000      	b.n	8009e02 <HAL_CAN_IRQHandler+0x336>
            break;
 8009e00:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	699a      	ldr	r2, [r3, #24]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009e10:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2204      	movs	r2, #4
 8009e18:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8009e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d008      	beq.n	8009e32 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e26:	431a      	orrs	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f7f7 fdc1 	bl	80019b4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8009e32:	bf00      	nop
 8009e34:	3728      	adds	r7, #40	; 0x28
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009e3a:	b480      	push	{r7}
 8009e3c:	b083      	sub	sp, #12
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8009e42:	bf00      	nop
 8009e44:	370c      	adds	r7, #12
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr

08009e4e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009e4e:	b480      	push	{r7}
 8009e50:	b083      	sub	sp, #12
 8009e52:	af00      	add	r7, sp, #0
 8009e54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8009e56:	bf00      	nop
 8009e58:	370c      	adds	r7, #12
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009e62:	b480      	push	{r7}
 8009e64:	b083      	sub	sp, #12
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8009e6a:	bf00      	nop
 8009e6c:	370c      	adds	r7, #12
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr

08009e76 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009e76:	b480      	push	{r7}
 8009e78:	b083      	sub	sp, #12
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8009e7e:	bf00      	nop
 8009e80:	370c      	adds	r7, #12
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr

08009e8a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009e8a:	b480      	push	{r7}
 8009e8c:	b083      	sub	sp, #12
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8009e92:	bf00      	nop
 8009e94:	370c      	adds	r7, #12
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr

08009e9e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b083      	sub	sp, #12
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009ea6:	bf00      	nop
 8009ea8:	370c      	adds	r7, #12
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb0:	4770      	bx	lr

08009eb2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8009eb2:	b480      	push	{r7}
 8009eb4:	b083      	sub	sp, #12
 8009eb6:	af00      	add	r7, sp, #0
 8009eb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8009eba:	bf00      	nop
 8009ebc:	370c      	adds	r7, #12
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8009ec6:	b480      	push	{r7}
 8009ec8:	b083      	sub	sp, #12
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8009ece:	bf00      	nop
 8009ed0:	370c      	adds	r7, #12
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr

08009eda <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8009eda:	b480      	push	{r7}
 8009edc:	b083      	sub	sp, #12
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8009ee2:	bf00      	nop
 8009ee4:	370c      	adds	r7, #12
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr

08009eee <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8009eee:	b480      	push	{r7}
 8009ef0:	b085      	sub	sp, #20
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f00:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8009f02:	7bbb      	ldrb	r3, [r7, #14]
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d002      	beq.n	8009f0e <HAL_CAN_ResetError+0x20>
 8009f08:	7bbb      	ldrb	r3, [r7, #14]
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d103      	bne.n	8009f16 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	625a      	str	r2, [r3, #36]	; 0x24
 8009f14:	e007      	b.n	8009f26 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3714      	adds	r7, #20
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <__NVIC_SetPriorityGrouping>:
{
 8009f34:	b480      	push	{r7}
 8009f36:	b085      	sub	sp, #20
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f003 0307 	and.w	r3, r3, #7
 8009f42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009f44:	4b0c      	ldr	r3, [pc, #48]	; (8009f78 <__NVIC_SetPriorityGrouping+0x44>)
 8009f46:	68db      	ldr	r3, [r3, #12]
 8009f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009f50:	4013      	ands	r3, r2
 8009f52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009f66:	4a04      	ldr	r2, [pc, #16]	; (8009f78 <__NVIC_SetPriorityGrouping+0x44>)
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	60d3      	str	r3, [r2, #12]
}
 8009f6c:	bf00      	nop
 8009f6e:	3714      	adds	r7, #20
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr
 8009f78:	e000ed00 	.word	0xe000ed00

08009f7c <__NVIC_GetPriorityGrouping>:
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009f80:	4b04      	ldr	r3, [pc, #16]	; (8009f94 <__NVIC_GetPriorityGrouping+0x18>)
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	0a1b      	lsrs	r3, r3, #8
 8009f86:	f003 0307 	and.w	r3, r3, #7
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f92:	4770      	bx	lr
 8009f94:	e000ed00 	.word	0xe000ed00

08009f98 <__NVIC_EnableIRQ>:
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	db0b      	blt.n	8009fc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009faa:	79fb      	ldrb	r3, [r7, #7]
 8009fac:	f003 021f 	and.w	r2, r3, #31
 8009fb0:	4907      	ldr	r1, [pc, #28]	; (8009fd0 <__NVIC_EnableIRQ+0x38>)
 8009fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fb6:	095b      	lsrs	r3, r3, #5
 8009fb8:	2001      	movs	r0, #1
 8009fba:	fa00 f202 	lsl.w	r2, r0, r2
 8009fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009fc2:	bf00      	nop
 8009fc4:	370c      	adds	r7, #12
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	e000e100 	.word	0xe000e100

08009fd4 <__NVIC_SetPriority>:
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	4603      	mov	r3, r0
 8009fdc:	6039      	str	r1, [r7, #0]
 8009fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	db0a      	blt.n	8009ffe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	b2da      	uxtb	r2, r3
 8009fec:	490c      	ldr	r1, [pc, #48]	; (800a020 <__NVIC_SetPriority+0x4c>)
 8009fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009ff2:	0112      	lsls	r2, r2, #4
 8009ff4:	b2d2      	uxtb	r2, r2
 8009ff6:	440b      	add	r3, r1
 8009ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009ffc:	e00a      	b.n	800a014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	b2da      	uxtb	r2, r3
 800a002:	4908      	ldr	r1, [pc, #32]	; (800a024 <__NVIC_SetPriority+0x50>)
 800a004:	79fb      	ldrb	r3, [r7, #7]
 800a006:	f003 030f 	and.w	r3, r3, #15
 800a00a:	3b04      	subs	r3, #4
 800a00c:	0112      	lsls	r2, r2, #4
 800a00e:	b2d2      	uxtb	r2, r2
 800a010:	440b      	add	r3, r1
 800a012:	761a      	strb	r2, [r3, #24]
}
 800a014:	bf00      	nop
 800a016:	370c      	adds	r7, #12
 800a018:	46bd      	mov	sp, r7
 800a01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01e:	4770      	bx	lr
 800a020:	e000e100 	.word	0xe000e100
 800a024:	e000ed00 	.word	0xe000ed00

0800a028 <NVIC_EncodePriority>:
{
 800a028:	b480      	push	{r7}
 800a02a:	b089      	sub	sp, #36	; 0x24
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	60f8      	str	r0, [r7, #12]
 800a030:	60b9      	str	r1, [r7, #8]
 800a032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f003 0307 	and.w	r3, r3, #7
 800a03a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a03c:	69fb      	ldr	r3, [r7, #28]
 800a03e:	f1c3 0307 	rsb	r3, r3, #7
 800a042:	2b04      	cmp	r3, #4
 800a044:	bf28      	it	cs
 800a046:	2304      	movcs	r3, #4
 800a048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a04a:	69fb      	ldr	r3, [r7, #28]
 800a04c:	3304      	adds	r3, #4
 800a04e:	2b06      	cmp	r3, #6
 800a050:	d902      	bls.n	800a058 <NVIC_EncodePriority+0x30>
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	3b03      	subs	r3, #3
 800a056:	e000      	b.n	800a05a <NVIC_EncodePriority+0x32>
 800a058:	2300      	movs	r3, #0
 800a05a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a05c:	f04f 32ff 	mov.w	r2, #4294967295
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	fa02 f303 	lsl.w	r3, r2, r3
 800a066:	43da      	mvns	r2, r3
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	401a      	ands	r2, r3
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a070:	f04f 31ff 	mov.w	r1, #4294967295
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	fa01 f303 	lsl.w	r3, r1, r3
 800a07a:	43d9      	mvns	r1, r3
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a080:	4313      	orrs	r3, r2
}
 800a082:	4618      	mov	r0, r3
 800a084:	3724      	adds	r7, #36	; 0x24
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr

0800a08e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b082      	sub	sp, #8
 800a092:	af00      	add	r7, sp, #0
 800a094:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	f7ff ff4c 	bl	8009f34 <__NVIC_SetPriorityGrouping>
}
 800a09c:	bf00      	nop
 800a09e:	3708      	adds	r7, #8
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b086      	sub	sp, #24
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
 800a0b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a0b6:	f7ff ff61 	bl	8009f7c <__NVIC_GetPriorityGrouping>
 800a0ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	68b9      	ldr	r1, [r7, #8]
 800a0c0:	6978      	ldr	r0, [r7, #20]
 800a0c2:	f7ff ffb1 	bl	800a028 <NVIC_EncodePriority>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0cc:	4611      	mov	r1, r2
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	f7ff ff80 	bl	8009fd4 <__NVIC_SetPriority>
}
 800a0d4:	bf00      	nop
 800a0d6:	3718      	adds	r7, #24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a0e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7ff ff54 	bl	8009f98 <__NVIC_EnableIRQ>
}
 800a0f0:	bf00      	nop
 800a0f2:	3708      	adds	r7, #8
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}

0800a0f8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d101      	bne.n	800a10a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e00e      	b.n	800a128 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	795b      	ldrb	r3, [r3, #5]
 800a10e:	b2db      	uxtb	r3, r3
 800a110:	2b00      	cmp	r3, #0
 800a112:	d105      	bne.n	800a120 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2200      	movs	r2, #0
 800a118:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f7fd fad8 	bl	80076d0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2201      	movs	r2, #1
 800a124:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a126:	2300      	movs	r3, #0
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3708      	adds	r7, #8
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b086      	sub	sp, #24
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a138:	2300      	movs	r3, #0
 800a13a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a13c:	f7fe fc54 	bl	80089e8 <HAL_GetTick>
 800a140:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d101      	bne.n	800a14c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a148:	2301      	movs	r3, #1
 800a14a:	e099      	b.n	800a280 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2202      	movs	r2, #2
 800a150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f022 0201 	bic.w	r2, r2, #1
 800a16a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a16c:	e00f      	b.n	800a18e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a16e:	f7fe fc3b 	bl	80089e8 <HAL_GetTick>
 800a172:	4602      	mov	r2, r0
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	1ad3      	subs	r3, r2, r3
 800a178:	2b05      	cmp	r3, #5
 800a17a:	d908      	bls.n	800a18e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2220      	movs	r2, #32
 800a180:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2203      	movs	r2, #3
 800a186:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a18a:	2303      	movs	r3, #3
 800a18c:	e078      	b.n	800a280 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f003 0301 	and.w	r3, r3, #1
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1e8      	bne.n	800a16e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a1a4:	697a      	ldr	r2, [r7, #20]
 800a1a6:	4b38      	ldr	r3, [pc, #224]	; (800a288 <HAL_DMA_Init+0x158>)
 800a1a8:	4013      	ands	r3, r2
 800a1aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a1ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a1c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	699b      	ldr	r3, [r3, #24]
 800a1cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6a1b      	ldr	r3, [r3, #32]
 800a1d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a1da:	697a      	ldr	r2, [r7, #20]
 800a1dc:	4313      	orrs	r3, r2
 800a1de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e4:	2b04      	cmp	r3, #4
 800a1e6:	d107      	bne.n	800a1f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	697a      	ldr	r2, [r7, #20]
 800a1f4:	4313      	orrs	r3, r2
 800a1f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	697a      	ldr	r2, [r7, #20]
 800a1fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	695b      	ldr	r3, [r3, #20]
 800a206:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	f023 0307 	bic.w	r3, r3, #7
 800a20e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a214:	697a      	ldr	r2, [r7, #20]
 800a216:	4313      	orrs	r3, r2
 800a218:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21e:	2b04      	cmp	r3, #4
 800a220:	d117      	bne.n	800a252 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	4313      	orrs	r3, r2
 800a22a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a230:	2b00      	cmp	r3, #0
 800a232:	d00e      	beq.n	800a252 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f000 fa6f 	bl	800a718 <DMA_CheckFifoParam>
 800a23a:	4603      	mov	r3, r0
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d008      	beq.n	800a252 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2240      	movs	r2, #64	; 0x40
 800a244:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2201      	movs	r2, #1
 800a24a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a24e:	2301      	movs	r3, #1
 800a250:	e016      	b.n	800a280 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	697a      	ldr	r2, [r7, #20]
 800a258:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a25a:	6878      	ldr	r0, [r7, #4]
 800a25c:	f000 fa26 	bl	800a6ac <DMA_CalcBaseAndBitshift>
 800a260:	4603      	mov	r3, r0
 800a262:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a268:	223f      	movs	r2, #63	; 0x3f
 800a26a:	409a      	lsls	r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2201      	movs	r2, #1
 800a27a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3718      	adds	r7, #24
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}
 800a288:	f010803f 	.word	0xf010803f

0800a28c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b086      	sub	sp, #24
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
 800a298:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a29a:	2300      	movs	r3, #0
 800a29c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a2aa:	2b01      	cmp	r3, #1
 800a2ac:	d101      	bne.n	800a2b2 <HAL_DMA_Start_IT+0x26>
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	e040      	b.n	800a334 <HAL_DMA_Start_IT+0xa8>
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d12f      	bne.n	800a326 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2202      	movs	r2, #2
 800a2ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	68b9      	ldr	r1, [r7, #8]
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f000 f9b8 	bl	800a650 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2e4:	223f      	movs	r2, #63	; 0x3f
 800a2e6:	409a      	lsls	r2, r3
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f042 0216 	orr.w	r2, r2, #22
 800a2fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a300:	2b00      	cmp	r3, #0
 800a302:	d007      	beq.n	800a314 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f042 0208 	orr.w	r2, r2, #8
 800a312:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	681a      	ldr	r2, [r3, #0]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f042 0201 	orr.w	r2, r2, #1
 800a322:	601a      	str	r2, [r3, #0]
 800a324:	e005      	b.n	800a332 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2200      	movs	r2, #0
 800a32a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a32e:	2302      	movs	r3, #2
 800a330:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a332:	7dfb      	ldrb	r3, [r7, #23]
}
 800a334:	4618      	mov	r0, r3
 800a336:	3718      	adds	r7, #24
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}

0800a33c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a33c:	b580      	push	{r7, lr}
 800a33e:	b086      	sub	sp, #24
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a344:	2300      	movs	r3, #0
 800a346:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a348:	4b8e      	ldr	r3, [pc, #568]	; (800a584 <HAL_DMA_IRQHandler+0x248>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a8e      	ldr	r2, [pc, #568]	; (800a588 <HAL_DMA_IRQHandler+0x24c>)
 800a34e:	fba2 2303 	umull	r2, r3, r2, r3
 800a352:	0a9b      	lsrs	r3, r3, #10
 800a354:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a35a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a366:	2208      	movs	r2, #8
 800a368:	409a      	lsls	r2, r3
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	4013      	ands	r3, r2
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d01a      	beq.n	800a3a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f003 0304 	and.w	r3, r3, #4
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d013      	beq.n	800a3a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f022 0204 	bic.w	r2, r2, #4
 800a38e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a394:	2208      	movs	r2, #8
 800a396:	409a      	lsls	r2, r3
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3a0:	f043 0201 	orr.w	r2, r3, #1
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	409a      	lsls	r2, r3
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	4013      	ands	r3, r2
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d012      	beq.n	800a3de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00b      	beq.n	800a3de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	409a      	lsls	r2, r3
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3d6:	f043 0202 	orr.w	r2, r3, #2
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3e2:	2204      	movs	r2, #4
 800a3e4:	409a      	lsls	r2, r3
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d012      	beq.n	800a414 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f003 0302 	and.w	r3, r3, #2
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00b      	beq.n	800a414 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a400:	2204      	movs	r2, #4
 800a402:	409a      	lsls	r2, r3
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a40c:	f043 0204 	orr.w	r2, r3, #4
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a418:	2210      	movs	r2, #16
 800a41a:	409a      	lsls	r2, r3
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	4013      	ands	r3, r2
 800a420:	2b00      	cmp	r3, #0
 800a422:	d043      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f003 0308 	and.w	r3, r3, #8
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d03c      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a436:	2210      	movs	r2, #16
 800a438:	409a      	lsls	r2, r3
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d018      	beq.n	800a47e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a456:	2b00      	cmp	r3, #0
 800a458:	d108      	bne.n	800a46c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d024      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	4798      	blx	r3
 800a46a:	e01f      	b.n	800a4ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a470:	2b00      	cmp	r3, #0
 800a472:	d01b      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	4798      	blx	r3
 800a47c:	e016      	b.n	800a4ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d107      	bne.n	800a49c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f022 0208 	bic.w	r2, r2, #8
 800a49a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d003      	beq.n	800a4ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4b0:	2220      	movs	r2, #32
 800a4b2:	409a      	lsls	r2, r3
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f000 808f 	beq.w	800a5dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f003 0310 	and.w	r3, r3, #16
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	f000 8087 	beq.w	800a5dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4d2:	2220      	movs	r2, #32
 800a4d4:	409a      	lsls	r2, r3
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	2b05      	cmp	r3, #5
 800a4e4:	d136      	bne.n	800a554 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f022 0216 	bic.w	r2, r2, #22
 800a4f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	695a      	ldr	r2, [r3, #20]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a504:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d103      	bne.n	800a516 <HAL_DMA_IRQHandler+0x1da>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a512:	2b00      	cmp	r3, #0
 800a514:	d007      	beq.n	800a526 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	681a      	ldr	r2, [r3, #0]
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f022 0208 	bic.w	r2, r2, #8
 800a524:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a52a:	223f      	movs	r2, #63	; 0x3f
 800a52c:	409a      	lsls	r2, r3
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2201      	movs	r2, #1
 800a536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a546:	2b00      	cmp	r3, #0
 800a548:	d07e      	beq.n	800a648 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	4798      	blx	r3
        }
        return;
 800a552:	e079      	b.n	800a648 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d01d      	beq.n	800a59e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d10d      	bne.n	800a58c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a574:	2b00      	cmp	r3, #0
 800a576:	d031      	beq.n	800a5dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a57c:	6878      	ldr	r0, [r7, #4]
 800a57e:	4798      	blx	r3
 800a580:	e02c      	b.n	800a5dc <HAL_DMA_IRQHandler+0x2a0>
 800a582:	bf00      	nop
 800a584:	20000010 	.word	0x20000010
 800a588:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a590:	2b00      	cmp	r3, #0
 800a592:	d023      	beq.n	800a5dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	4798      	blx	r3
 800a59c:	e01e      	b.n	800a5dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d10f      	bne.n	800a5cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f022 0210 	bic.w	r2, r2, #16
 800a5ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2201      	movs	r2, #1
 800a5c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d003      	beq.n	800a5dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d032      	beq.n	800a64a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5e8:	f003 0301 	and.w	r3, r3, #1
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d022      	beq.n	800a636 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	2205      	movs	r2, #5
 800a5f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f022 0201 	bic.w	r2, r2, #1
 800a606:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a608:	68bb      	ldr	r3, [r7, #8]
 800a60a:	3301      	adds	r3, #1
 800a60c:	60bb      	str	r3, [r7, #8]
 800a60e:	697a      	ldr	r2, [r7, #20]
 800a610:	429a      	cmp	r2, r3
 800a612:	d307      	bcc.n	800a624 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 0301 	and.w	r3, r3, #1
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1f2      	bne.n	800a608 <HAL_DMA_IRQHandler+0x2cc>
 800a622:	e000      	b.n	800a626 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800a624:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2201      	movs	r2, #1
 800a62a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d005      	beq.n	800a64a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	4798      	blx	r3
 800a646:	e000      	b.n	800a64a <HAL_DMA_IRQHandler+0x30e>
        return;
 800a648:	bf00      	nop
    }
  }
}
 800a64a:	3718      	adds	r7, #24
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a650:	b480      	push	{r7}
 800a652:	b085      	sub	sp, #20
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]
 800a65c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681a      	ldr	r2, [r3, #0]
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a66c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	689b      	ldr	r3, [r3, #8]
 800a67a:	2b40      	cmp	r3, #64	; 0x40
 800a67c:	d108      	bne.n	800a690 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	68ba      	ldr	r2, [r7, #8]
 800a68c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a68e:	e007      	b.n	800a6a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	68ba      	ldr	r2, [r7, #8]
 800a696:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	60da      	str	r2, [r3, #12]
}
 800a6a0:	bf00      	nop
 800a6a2:	3714      	adds	r7, #20
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6aa:	4770      	bx	lr

0800a6ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	3b10      	subs	r3, #16
 800a6bc:	4a14      	ldr	r2, [pc, #80]	; (800a710 <DMA_CalcBaseAndBitshift+0x64>)
 800a6be:	fba2 2303 	umull	r2, r3, r2, r3
 800a6c2:	091b      	lsrs	r3, r3, #4
 800a6c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a6c6:	4a13      	ldr	r2, [pc, #76]	; (800a714 <DMA_CalcBaseAndBitshift+0x68>)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	781b      	ldrb	r3, [r3, #0]
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2b03      	cmp	r3, #3
 800a6d8:	d909      	bls.n	800a6ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a6e2:	f023 0303 	bic.w	r3, r3, #3
 800a6e6:	1d1a      	adds	r2, r3, #4
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	659a      	str	r2, [r3, #88]	; 0x58
 800a6ec:	e007      	b.n	800a6fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a6f6:	f023 0303 	bic.w	r3, r3, #3
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a702:	4618      	mov	r0, r3
 800a704:	3714      	adds	r7, #20
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr
 800a70e:	bf00      	nop
 800a710:	aaaaaaab 	.word	0xaaaaaaab
 800a714:	08014070 	.word	0x08014070

0800a718 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a720:	2300      	movs	r3, #0
 800a722:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a728:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	699b      	ldr	r3, [r3, #24]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d11f      	bne.n	800a772 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	2b03      	cmp	r3, #3
 800a736:	d856      	bhi.n	800a7e6 <DMA_CheckFifoParam+0xce>
 800a738:	a201      	add	r2, pc, #4	; (adr r2, 800a740 <DMA_CheckFifoParam+0x28>)
 800a73a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a73e:	bf00      	nop
 800a740:	0800a751 	.word	0x0800a751
 800a744:	0800a763 	.word	0x0800a763
 800a748:	0800a751 	.word	0x0800a751
 800a74c:	0800a7e7 	.word	0x0800a7e7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d046      	beq.n	800a7ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a75c:	2301      	movs	r3, #1
 800a75e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a760:	e043      	b.n	800a7ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a766:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a76a:	d140      	bne.n	800a7ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a76c:	2301      	movs	r3, #1
 800a76e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a770:	e03d      	b.n	800a7ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	699b      	ldr	r3, [r3, #24]
 800a776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a77a:	d121      	bne.n	800a7c0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	2b03      	cmp	r3, #3
 800a780:	d837      	bhi.n	800a7f2 <DMA_CheckFifoParam+0xda>
 800a782:	a201      	add	r2, pc, #4	; (adr r2, 800a788 <DMA_CheckFifoParam+0x70>)
 800a784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a788:	0800a799 	.word	0x0800a799
 800a78c:	0800a79f 	.word	0x0800a79f
 800a790:	0800a799 	.word	0x0800a799
 800a794:	0800a7b1 	.word	0x0800a7b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a798:	2301      	movs	r3, #1
 800a79a:	73fb      	strb	r3, [r7, #15]
      break;
 800a79c:	e030      	b.n	800a800 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d025      	beq.n	800a7f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a7ae:	e022      	b.n	800a7f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a7b8:	d11f      	bne.n	800a7fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a7be:	e01c      	b.n	800a7fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	2b02      	cmp	r3, #2
 800a7c4:	d903      	bls.n	800a7ce <DMA_CheckFifoParam+0xb6>
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	2b03      	cmp	r3, #3
 800a7ca:	d003      	beq.n	800a7d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a7cc:	e018      	b.n	800a800 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	73fb      	strb	r3, [r7, #15]
      break;
 800a7d2:	e015      	b.n	800a800 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d00e      	beq.n	800a7fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	73fb      	strb	r3, [r7, #15]
      break;
 800a7e4:	e00b      	b.n	800a7fe <DMA_CheckFifoParam+0xe6>
      break;
 800a7e6:	bf00      	nop
 800a7e8:	e00a      	b.n	800a800 <DMA_CheckFifoParam+0xe8>
      break;
 800a7ea:	bf00      	nop
 800a7ec:	e008      	b.n	800a800 <DMA_CheckFifoParam+0xe8>
      break;
 800a7ee:	bf00      	nop
 800a7f0:	e006      	b.n	800a800 <DMA_CheckFifoParam+0xe8>
      break;
 800a7f2:	bf00      	nop
 800a7f4:	e004      	b.n	800a800 <DMA_CheckFifoParam+0xe8>
      break;
 800a7f6:	bf00      	nop
 800a7f8:	e002      	b.n	800a800 <DMA_CheckFifoParam+0xe8>
      break;   
 800a7fa:	bf00      	nop
 800a7fc:	e000      	b.n	800a800 <DMA_CheckFifoParam+0xe8>
      break;
 800a7fe:	bf00      	nop
    }
  } 
  
  return status; 
 800a800:	7bfb      	ldrb	r3, [r7, #15]
}
 800a802:	4618      	mov	r0, r3
 800a804:	3714      	adds	r7, #20
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop

0800a810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a810:	b480      	push	{r7}
 800a812:	b089      	sub	sp, #36	; 0x24
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a81a:	2300      	movs	r3, #0
 800a81c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a81e:	2300      	movs	r3, #0
 800a820:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a822:	2300      	movs	r3, #0
 800a824:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a826:	2300      	movs	r3, #0
 800a828:	61fb      	str	r3, [r7, #28]
 800a82a:	e16b      	b.n	800ab04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a82c:	2201      	movs	r2, #1
 800a82e:	69fb      	ldr	r3, [r7, #28]
 800a830:	fa02 f303 	lsl.w	r3, r2, r3
 800a834:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	697a      	ldr	r2, [r7, #20]
 800a83c:	4013      	ands	r3, r2
 800a83e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	429a      	cmp	r2, r3
 800a846:	f040 815a 	bne.w	800aafe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	f003 0303 	and.w	r3, r3, #3
 800a852:	2b01      	cmp	r3, #1
 800a854:	d005      	beq.n	800a862 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a85e:	2b02      	cmp	r3, #2
 800a860:	d130      	bne.n	800a8c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	689b      	ldr	r3, [r3, #8]
 800a866:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a868:	69fb      	ldr	r3, [r7, #28]
 800a86a:	005b      	lsls	r3, r3, #1
 800a86c:	2203      	movs	r2, #3
 800a86e:	fa02 f303 	lsl.w	r3, r2, r3
 800a872:	43db      	mvns	r3, r3
 800a874:	69ba      	ldr	r2, [r7, #24]
 800a876:	4013      	ands	r3, r2
 800a878:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	68da      	ldr	r2, [r3, #12]
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	005b      	lsls	r3, r3, #1
 800a882:	fa02 f303 	lsl.w	r3, r2, r3
 800a886:	69ba      	ldr	r2, [r7, #24]
 800a888:	4313      	orrs	r3, r2
 800a88a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	69ba      	ldr	r2, [r7, #24]
 800a890:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	685b      	ldr	r3, [r3, #4]
 800a896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a898:	2201      	movs	r2, #1
 800a89a:	69fb      	ldr	r3, [r7, #28]
 800a89c:	fa02 f303 	lsl.w	r3, r2, r3
 800a8a0:	43db      	mvns	r3, r3
 800a8a2:	69ba      	ldr	r2, [r7, #24]
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	091b      	lsrs	r3, r3, #4
 800a8ae:	f003 0201 	and.w	r2, r3, #1
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a8b8:	69ba      	ldr	r2, [r7, #24]
 800a8ba:	4313      	orrs	r3, r2
 800a8bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	69ba      	ldr	r2, [r7, #24]
 800a8c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	f003 0303 	and.w	r3, r3, #3
 800a8cc:	2b03      	cmp	r3, #3
 800a8ce:	d017      	beq.n	800a900 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	005b      	lsls	r3, r3, #1
 800a8da:	2203      	movs	r2, #3
 800a8dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a8e0:	43db      	mvns	r3, r3
 800a8e2:	69ba      	ldr	r2, [r7, #24]
 800a8e4:	4013      	ands	r3, r2
 800a8e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	689a      	ldr	r2, [r3, #8]
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	005b      	lsls	r3, r3, #1
 800a8f0:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f4:	69ba      	ldr	r2, [r7, #24]
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	69ba      	ldr	r2, [r7, #24]
 800a8fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	685b      	ldr	r3, [r3, #4]
 800a904:	f003 0303 	and.w	r3, r3, #3
 800a908:	2b02      	cmp	r3, #2
 800a90a:	d123      	bne.n	800a954 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	08da      	lsrs	r2, r3, #3
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	3208      	adds	r2, #8
 800a914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a918:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a91a:	69fb      	ldr	r3, [r7, #28]
 800a91c:	f003 0307 	and.w	r3, r3, #7
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	220f      	movs	r2, #15
 800a924:	fa02 f303 	lsl.w	r3, r2, r3
 800a928:	43db      	mvns	r3, r3
 800a92a:	69ba      	ldr	r2, [r7, #24]
 800a92c:	4013      	ands	r3, r2
 800a92e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	691a      	ldr	r2, [r3, #16]
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	f003 0307 	and.w	r3, r3, #7
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	fa02 f303 	lsl.w	r3, r2, r3
 800a940:	69ba      	ldr	r2, [r7, #24]
 800a942:	4313      	orrs	r3, r2
 800a944:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	08da      	lsrs	r2, r3, #3
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	3208      	adds	r2, #8
 800a94e:	69b9      	ldr	r1, [r7, #24]
 800a950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a95a:	69fb      	ldr	r3, [r7, #28]
 800a95c:	005b      	lsls	r3, r3, #1
 800a95e:	2203      	movs	r2, #3
 800a960:	fa02 f303 	lsl.w	r3, r2, r3
 800a964:	43db      	mvns	r3, r3
 800a966:	69ba      	ldr	r2, [r7, #24]
 800a968:	4013      	ands	r3, r2
 800a96a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	f003 0203 	and.w	r2, r3, #3
 800a974:	69fb      	ldr	r3, [r7, #28]
 800a976:	005b      	lsls	r3, r3, #1
 800a978:	fa02 f303 	lsl.w	r3, r2, r3
 800a97c:	69ba      	ldr	r2, [r7, #24]
 800a97e:	4313      	orrs	r3, r2
 800a980:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	69ba      	ldr	r2, [r7, #24]
 800a986:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a990:	2b00      	cmp	r3, #0
 800a992:	f000 80b4 	beq.w	800aafe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a996:	2300      	movs	r3, #0
 800a998:	60fb      	str	r3, [r7, #12]
 800a99a:	4b60      	ldr	r3, [pc, #384]	; (800ab1c <HAL_GPIO_Init+0x30c>)
 800a99c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a99e:	4a5f      	ldr	r2, [pc, #380]	; (800ab1c <HAL_GPIO_Init+0x30c>)
 800a9a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a9a4:	6453      	str	r3, [r2, #68]	; 0x44
 800a9a6:	4b5d      	ldr	r3, [pc, #372]	; (800ab1c <HAL_GPIO_Init+0x30c>)
 800a9a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a9ae:	60fb      	str	r3, [r7, #12]
 800a9b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a9b2:	4a5b      	ldr	r2, [pc, #364]	; (800ab20 <HAL_GPIO_Init+0x310>)
 800a9b4:	69fb      	ldr	r3, [r7, #28]
 800a9b6:	089b      	lsrs	r3, r3, #2
 800a9b8:	3302      	adds	r3, #2
 800a9ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	f003 0303 	and.w	r3, r3, #3
 800a9c6:	009b      	lsls	r3, r3, #2
 800a9c8:	220f      	movs	r2, #15
 800a9ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ce:	43db      	mvns	r3, r3
 800a9d0:	69ba      	ldr	r2, [r7, #24]
 800a9d2:	4013      	ands	r3, r2
 800a9d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	4a52      	ldr	r2, [pc, #328]	; (800ab24 <HAL_GPIO_Init+0x314>)
 800a9da:	4293      	cmp	r3, r2
 800a9dc:	d02b      	beq.n	800aa36 <HAL_GPIO_Init+0x226>
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	4a51      	ldr	r2, [pc, #324]	; (800ab28 <HAL_GPIO_Init+0x318>)
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d025      	beq.n	800aa32 <HAL_GPIO_Init+0x222>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	4a50      	ldr	r2, [pc, #320]	; (800ab2c <HAL_GPIO_Init+0x31c>)
 800a9ea:	4293      	cmp	r3, r2
 800a9ec:	d01f      	beq.n	800aa2e <HAL_GPIO_Init+0x21e>
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	4a4f      	ldr	r2, [pc, #316]	; (800ab30 <HAL_GPIO_Init+0x320>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d019      	beq.n	800aa2a <HAL_GPIO_Init+0x21a>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	4a4e      	ldr	r2, [pc, #312]	; (800ab34 <HAL_GPIO_Init+0x324>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d013      	beq.n	800aa26 <HAL_GPIO_Init+0x216>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	4a4d      	ldr	r2, [pc, #308]	; (800ab38 <HAL_GPIO_Init+0x328>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d00d      	beq.n	800aa22 <HAL_GPIO_Init+0x212>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4a4c      	ldr	r2, [pc, #304]	; (800ab3c <HAL_GPIO_Init+0x32c>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d007      	beq.n	800aa1e <HAL_GPIO_Init+0x20e>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a4b      	ldr	r2, [pc, #300]	; (800ab40 <HAL_GPIO_Init+0x330>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d101      	bne.n	800aa1a <HAL_GPIO_Init+0x20a>
 800aa16:	2307      	movs	r3, #7
 800aa18:	e00e      	b.n	800aa38 <HAL_GPIO_Init+0x228>
 800aa1a:	2308      	movs	r3, #8
 800aa1c:	e00c      	b.n	800aa38 <HAL_GPIO_Init+0x228>
 800aa1e:	2306      	movs	r3, #6
 800aa20:	e00a      	b.n	800aa38 <HAL_GPIO_Init+0x228>
 800aa22:	2305      	movs	r3, #5
 800aa24:	e008      	b.n	800aa38 <HAL_GPIO_Init+0x228>
 800aa26:	2304      	movs	r3, #4
 800aa28:	e006      	b.n	800aa38 <HAL_GPIO_Init+0x228>
 800aa2a:	2303      	movs	r3, #3
 800aa2c:	e004      	b.n	800aa38 <HAL_GPIO_Init+0x228>
 800aa2e:	2302      	movs	r3, #2
 800aa30:	e002      	b.n	800aa38 <HAL_GPIO_Init+0x228>
 800aa32:	2301      	movs	r3, #1
 800aa34:	e000      	b.n	800aa38 <HAL_GPIO_Init+0x228>
 800aa36:	2300      	movs	r3, #0
 800aa38:	69fa      	ldr	r2, [r7, #28]
 800aa3a:	f002 0203 	and.w	r2, r2, #3
 800aa3e:	0092      	lsls	r2, r2, #2
 800aa40:	4093      	lsls	r3, r2
 800aa42:	69ba      	ldr	r2, [r7, #24]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800aa48:	4935      	ldr	r1, [pc, #212]	; (800ab20 <HAL_GPIO_Init+0x310>)
 800aa4a:	69fb      	ldr	r3, [r7, #28]
 800aa4c:	089b      	lsrs	r3, r3, #2
 800aa4e:	3302      	adds	r3, #2
 800aa50:	69ba      	ldr	r2, [r7, #24]
 800aa52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800aa56:	4b3b      	ldr	r3, [pc, #236]	; (800ab44 <HAL_GPIO_Init+0x334>)
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	43db      	mvns	r3, r3
 800aa60:	69ba      	ldr	r2, [r7, #24]
 800aa62:	4013      	ands	r3, r2
 800aa64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	685b      	ldr	r3, [r3, #4]
 800aa6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d003      	beq.n	800aa7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800aa72:	69ba      	ldr	r2, [r7, #24]
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	4313      	orrs	r3, r2
 800aa78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800aa7a:	4a32      	ldr	r2, [pc, #200]	; (800ab44 <HAL_GPIO_Init+0x334>)
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800aa80:	4b30      	ldr	r3, [pc, #192]	; (800ab44 <HAL_GPIO_Init+0x334>)
 800aa82:	68db      	ldr	r3, [r3, #12]
 800aa84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	43db      	mvns	r3, r3
 800aa8a:	69ba      	ldr	r2, [r7, #24]
 800aa8c:	4013      	ands	r3, r2
 800aa8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d003      	beq.n	800aaa4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800aa9c:	69ba      	ldr	r2, [r7, #24]
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800aaa4:	4a27      	ldr	r2, [pc, #156]	; (800ab44 <HAL_GPIO_Init+0x334>)
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800aaaa:	4b26      	ldr	r3, [pc, #152]	; (800ab44 <HAL_GPIO_Init+0x334>)
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	43db      	mvns	r3, r3
 800aab4:	69ba      	ldr	r2, [r7, #24]
 800aab6:	4013      	ands	r3, r2
 800aab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d003      	beq.n	800aace <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800aac6:	69ba      	ldr	r2, [r7, #24]
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	4313      	orrs	r3, r2
 800aacc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800aace:	4a1d      	ldr	r2, [pc, #116]	; (800ab44 <HAL_GPIO_Init+0x334>)
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800aad4:	4b1b      	ldr	r3, [pc, #108]	; (800ab44 <HAL_GPIO_Init+0x334>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	43db      	mvns	r3, r3
 800aade:	69ba      	ldr	r2, [r7, #24]
 800aae0:	4013      	ands	r3, r2
 800aae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d003      	beq.n	800aaf8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800aaf0:	69ba      	ldr	r2, [r7, #24]
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800aaf8:	4a12      	ldr	r2, [pc, #72]	; (800ab44 <HAL_GPIO_Init+0x334>)
 800aafa:	69bb      	ldr	r3, [r7, #24]
 800aafc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800aafe:	69fb      	ldr	r3, [r7, #28]
 800ab00:	3301      	adds	r3, #1
 800ab02:	61fb      	str	r3, [r7, #28]
 800ab04:	69fb      	ldr	r3, [r7, #28]
 800ab06:	2b0f      	cmp	r3, #15
 800ab08:	f67f ae90 	bls.w	800a82c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ab0c:	bf00      	nop
 800ab0e:	bf00      	nop
 800ab10:	3724      	adds	r7, #36	; 0x24
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	40023800 	.word	0x40023800
 800ab20:	40013800 	.word	0x40013800
 800ab24:	40020000 	.word	0x40020000
 800ab28:	40020400 	.word	0x40020400
 800ab2c:	40020800 	.word	0x40020800
 800ab30:	40020c00 	.word	0x40020c00
 800ab34:	40021000 	.word	0x40021000
 800ab38:	40021400 	.word	0x40021400
 800ab3c:	40021800 	.word	0x40021800
 800ab40:	40021c00 	.word	0x40021c00
 800ab44:	40013c00 	.word	0x40013c00

0800ab48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	460b      	mov	r3, r1
 800ab52:	807b      	strh	r3, [r7, #2]
 800ab54:	4613      	mov	r3, r2
 800ab56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ab58:	787b      	ldrb	r3, [r7, #1]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d003      	beq.n	800ab66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ab5e:	887a      	ldrh	r2, [r7, #2]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ab64:	e003      	b.n	800ab6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ab66:	887b      	ldrh	r3, [r7, #2]
 800ab68:	041a      	lsls	r2, r3, #16
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	619a      	str	r2, [r3, #24]
}
 800ab6e:	bf00      	nop
 800ab70:	370c      	adds	r7, #12
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
	...

0800ab7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	4603      	mov	r3, r0
 800ab84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800ab86:	4b08      	ldr	r3, [pc, #32]	; (800aba8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ab88:	695a      	ldr	r2, [r3, #20]
 800ab8a:	88fb      	ldrh	r3, [r7, #6]
 800ab8c:	4013      	ands	r3, r2
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d006      	beq.n	800aba0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800ab92:	4a05      	ldr	r2, [pc, #20]	; (800aba8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800ab94:	88fb      	ldrh	r3, [r7, #6]
 800ab96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800ab98:	88fb      	ldrh	r3, [r7, #6]
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f002 fae5 	bl	800d16a <HAL_GPIO_EXTI_Callback>
  }
}
 800aba0:	bf00      	nop
 800aba2:	3708      	adds	r7, #8
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}
 800aba8:	40013c00 	.word	0x40013c00

0800abac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d101      	bne.n	800abbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	e12b      	b.n	800ae16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d106      	bne.n	800abd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2200      	movs	r2, #0
 800abce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f7fc ff34 	bl	8007a40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2224      	movs	r2, #36	; 0x24
 800abdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	681a      	ldr	r2, [r3, #0]
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f022 0201 	bic.w	r2, r2, #1
 800abee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800abfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	681a      	ldr	r2, [r3, #0]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ac0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ac10:	f000 fd7e 	bl	800b710 <HAL_RCC_GetPCLK1Freq>
 800ac14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	4a81      	ldr	r2, [pc, #516]	; (800ae20 <HAL_I2C_Init+0x274>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d807      	bhi.n	800ac30 <HAL_I2C_Init+0x84>
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	4a80      	ldr	r2, [pc, #512]	; (800ae24 <HAL_I2C_Init+0x278>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	bf94      	ite	ls
 800ac28:	2301      	movls	r3, #1
 800ac2a:	2300      	movhi	r3, #0
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	e006      	b.n	800ac3e <HAL_I2C_Init+0x92>
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	4a7d      	ldr	r2, [pc, #500]	; (800ae28 <HAL_I2C_Init+0x27c>)
 800ac34:	4293      	cmp	r3, r2
 800ac36:	bf94      	ite	ls
 800ac38:	2301      	movls	r3, #1
 800ac3a:	2300      	movhi	r3, #0
 800ac3c:	b2db      	uxtb	r3, r3
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d001      	beq.n	800ac46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800ac42:	2301      	movs	r3, #1
 800ac44:	e0e7      	b.n	800ae16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	4a78      	ldr	r2, [pc, #480]	; (800ae2c <HAL_I2C_Init+0x280>)
 800ac4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac4e:	0c9b      	lsrs	r3, r3, #18
 800ac50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	430a      	orrs	r2, r1
 800ac64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	6a1b      	ldr	r3, [r3, #32]
 800ac6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	4a6a      	ldr	r2, [pc, #424]	; (800ae20 <HAL_I2C_Init+0x274>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d802      	bhi.n	800ac80 <HAL_I2C_Init+0xd4>
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	e009      	b.n	800ac94 <HAL_I2C_Init+0xe8>
 800ac80:	68bb      	ldr	r3, [r7, #8]
 800ac82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ac86:	fb02 f303 	mul.w	r3, r2, r3
 800ac8a:	4a69      	ldr	r2, [pc, #420]	; (800ae30 <HAL_I2C_Init+0x284>)
 800ac8c:	fba2 2303 	umull	r2, r3, r2, r3
 800ac90:	099b      	lsrs	r3, r3, #6
 800ac92:	3301      	adds	r3, #1
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	6812      	ldr	r2, [r2, #0]
 800ac98:	430b      	orrs	r3, r1
 800ac9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	69db      	ldr	r3, [r3, #28]
 800aca2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800aca6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	495c      	ldr	r1, [pc, #368]	; (800ae20 <HAL_I2C_Init+0x274>)
 800acb0:	428b      	cmp	r3, r1
 800acb2:	d819      	bhi.n	800ace8 <HAL_I2C_Init+0x13c>
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	1e59      	subs	r1, r3, #1
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	685b      	ldr	r3, [r3, #4]
 800acbc:	005b      	lsls	r3, r3, #1
 800acbe:	fbb1 f3f3 	udiv	r3, r1, r3
 800acc2:	1c59      	adds	r1, r3, #1
 800acc4:	f640 73fc 	movw	r3, #4092	; 0xffc
 800acc8:	400b      	ands	r3, r1
 800acca:	2b00      	cmp	r3, #0
 800accc:	d00a      	beq.n	800ace4 <HAL_I2C_Init+0x138>
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	1e59      	subs	r1, r3, #1
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	005b      	lsls	r3, r3, #1
 800acd8:	fbb1 f3f3 	udiv	r3, r1, r3
 800acdc:	3301      	adds	r3, #1
 800acde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ace2:	e051      	b.n	800ad88 <HAL_I2C_Init+0x1dc>
 800ace4:	2304      	movs	r3, #4
 800ace6:	e04f      	b.n	800ad88 <HAL_I2C_Init+0x1dc>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d111      	bne.n	800ad14 <HAL_I2C_Init+0x168>
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	1e58      	subs	r0, r3, #1
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6859      	ldr	r1, [r3, #4]
 800acf8:	460b      	mov	r3, r1
 800acfa:	005b      	lsls	r3, r3, #1
 800acfc:	440b      	add	r3, r1
 800acfe:	fbb0 f3f3 	udiv	r3, r0, r3
 800ad02:	3301      	adds	r3, #1
 800ad04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	bf0c      	ite	eq
 800ad0c:	2301      	moveq	r3, #1
 800ad0e:	2300      	movne	r3, #0
 800ad10:	b2db      	uxtb	r3, r3
 800ad12:	e012      	b.n	800ad3a <HAL_I2C_Init+0x18e>
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	1e58      	subs	r0, r3, #1
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6859      	ldr	r1, [r3, #4]
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	440b      	add	r3, r1
 800ad22:	0099      	lsls	r1, r3, #2
 800ad24:	440b      	add	r3, r1
 800ad26:	fbb0 f3f3 	udiv	r3, r0, r3
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	bf0c      	ite	eq
 800ad34:	2301      	moveq	r3, #1
 800ad36:	2300      	movne	r3, #0
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d001      	beq.n	800ad42 <HAL_I2C_Init+0x196>
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e022      	b.n	800ad88 <HAL_I2C_Init+0x1dc>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d10e      	bne.n	800ad68 <HAL_I2C_Init+0x1bc>
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	1e58      	subs	r0, r3, #1
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6859      	ldr	r1, [r3, #4]
 800ad52:	460b      	mov	r3, r1
 800ad54:	005b      	lsls	r3, r3, #1
 800ad56:	440b      	add	r3, r1
 800ad58:	fbb0 f3f3 	udiv	r3, r0, r3
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad66:	e00f      	b.n	800ad88 <HAL_I2C_Init+0x1dc>
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	1e58      	subs	r0, r3, #1
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6859      	ldr	r1, [r3, #4]
 800ad70:	460b      	mov	r3, r1
 800ad72:	009b      	lsls	r3, r3, #2
 800ad74:	440b      	add	r3, r1
 800ad76:	0099      	lsls	r1, r3, #2
 800ad78:	440b      	add	r3, r1
 800ad7a:	fbb0 f3f3 	udiv	r3, r0, r3
 800ad7e:	3301      	adds	r3, #1
 800ad80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ad88:	6879      	ldr	r1, [r7, #4]
 800ad8a:	6809      	ldr	r1, [r1, #0]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	69da      	ldr	r2, [r3, #28]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6a1b      	ldr	r3, [r3, #32]
 800ada2:	431a      	orrs	r2, r3
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	430a      	orrs	r2, r1
 800adaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	689b      	ldr	r3, [r3, #8]
 800adb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800adb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	6911      	ldr	r1, [r2, #16]
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	68d2      	ldr	r2, [r2, #12]
 800adc2:	4311      	orrs	r1, r2
 800adc4:	687a      	ldr	r2, [r7, #4]
 800adc6:	6812      	ldr	r2, [r2, #0]
 800adc8:	430b      	orrs	r3, r1
 800adca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	695a      	ldr	r2, [r3, #20]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	699b      	ldr	r3, [r3, #24]
 800adde:	431a      	orrs	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	430a      	orrs	r2, r1
 800ade6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	681a      	ldr	r2, [r3, #0]
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	f042 0201 	orr.w	r2, r2, #1
 800adf6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2200      	movs	r2, #0
 800adfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2220      	movs	r2, #32
 800ae02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	000186a0 	.word	0x000186a0
 800ae24:	001e847f 	.word	0x001e847f
 800ae28:	003d08ff 	.word	0x003d08ff
 800ae2c:	431bde83 	.word	0x431bde83
 800ae30:	10624dd3 	.word	0x10624dd3

0800ae34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b086      	sub	sp, #24
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d101      	bne.n	800ae46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ae42:	2301      	movs	r3, #1
 800ae44:	e267      	b.n	800b316 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f003 0301 	and.w	r3, r3, #1
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d075      	beq.n	800af3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ae52:	4b88      	ldr	r3, [pc, #544]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	f003 030c 	and.w	r3, r3, #12
 800ae5a:	2b04      	cmp	r3, #4
 800ae5c:	d00c      	beq.n	800ae78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ae5e:	4b85      	ldr	r3, [pc, #532]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ae66:	2b08      	cmp	r3, #8
 800ae68:	d112      	bne.n	800ae90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ae6a:	4b82      	ldr	r3, [pc, #520]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ae72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae76:	d10b      	bne.n	800ae90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae78:	4b7e      	ldr	r3, [pc, #504]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d05b      	beq.n	800af3c <HAL_RCC_OscConfig+0x108>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d157      	bne.n	800af3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	e242      	b.n	800b316 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae98:	d106      	bne.n	800aea8 <HAL_RCC_OscConfig+0x74>
 800ae9a:	4b76      	ldr	r3, [pc, #472]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	4a75      	ldr	r2, [pc, #468]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800aea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aea4:	6013      	str	r3, [r2, #0]
 800aea6:	e01d      	b.n	800aee4 <HAL_RCC_OscConfig+0xb0>
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aeb0:	d10c      	bne.n	800aecc <HAL_RCC_OscConfig+0x98>
 800aeb2:	4b70      	ldr	r3, [pc, #448]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	4a6f      	ldr	r2, [pc, #444]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800aeb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aebc:	6013      	str	r3, [r2, #0]
 800aebe:	4b6d      	ldr	r3, [pc, #436]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a6c      	ldr	r2, [pc, #432]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800aec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aec8:	6013      	str	r3, [r2, #0]
 800aeca:	e00b      	b.n	800aee4 <HAL_RCC_OscConfig+0xb0>
 800aecc:	4b69      	ldr	r3, [pc, #420]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	4a68      	ldr	r2, [pc, #416]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800aed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	4b66      	ldr	r3, [pc, #408]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4a65      	ldr	r2, [pc, #404]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800aede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800aee2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d013      	beq.n	800af14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aeec:	f7fd fd7c 	bl	80089e8 <HAL_GetTick>
 800aef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aef2:	e008      	b.n	800af06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aef4:	f7fd fd78 	bl	80089e8 <HAL_GetTick>
 800aef8:	4602      	mov	r2, r0
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	1ad3      	subs	r3, r2, r3
 800aefe:	2b64      	cmp	r3, #100	; 0x64
 800af00:	d901      	bls.n	800af06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800af02:	2303      	movs	r3, #3
 800af04:	e207      	b.n	800b316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af06:	4b5b      	ldr	r3, [pc, #364]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d0f0      	beq.n	800aef4 <HAL_RCC_OscConfig+0xc0>
 800af12:	e014      	b.n	800af3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af14:	f7fd fd68 	bl	80089e8 <HAL_GetTick>
 800af18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af1a:	e008      	b.n	800af2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800af1c:	f7fd fd64 	bl	80089e8 <HAL_GetTick>
 800af20:	4602      	mov	r2, r0
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	1ad3      	subs	r3, r2, r3
 800af26:	2b64      	cmp	r3, #100	; 0x64
 800af28:	d901      	bls.n	800af2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800af2a:	2303      	movs	r3, #3
 800af2c:	e1f3      	b.n	800b316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800af2e:	4b51      	ldr	r3, [pc, #324]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af36:	2b00      	cmp	r3, #0
 800af38:	d1f0      	bne.n	800af1c <HAL_RCC_OscConfig+0xe8>
 800af3a:	e000      	b.n	800af3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 0302 	and.w	r3, r3, #2
 800af46:	2b00      	cmp	r3, #0
 800af48:	d063      	beq.n	800b012 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800af4a:	4b4a      	ldr	r3, [pc, #296]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800af4c:	689b      	ldr	r3, [r3, #8]
 800af4e:	f003 030c 	and.w	r3, r3, #12
 800af52:	2b00      	cmp	r3, #0
 800af54:	d00b      	beq.n	800af6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800af56:	4b47      	ldr	r3, [pc, #284]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800af5e:	2b08      	cmp	r3, #8
 800af60:	d11c      	bne.n	800af9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800af62:	4b44      	ldr	r3, [pc, #272]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d116      	bne.n	800af9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800af6e:	4b41      	ldr	r3, [pc, #260]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f003 0302 	and.w	r3, r3, #2
 800af76:	2b00      	cmp	r3, #0
 800af78:	d005      	beq.n	800af86 <HAL_RCC_OscConfig+0x152>
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	68db      	ldr	r3, [r3, #12]
 800af7e:	2b01      	cmp	r3, #1
 800af80:	d001      	beq.n	800af86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800af82:	2301      	movs	r3, #1
 800af84:	e1c7      	b.n	800b316 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af86:	4b3b      	ldr	r3, [pc, #236]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	691b      	ldr	r3, [r3, #16]
 800af92:	00db      	lsls	r3, r3, #3
 800af94:	4937      	ldr	r1, [pc, #220]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800af96:	4313      	orrs	r3, r2
 800af98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800af9a:	e03a      	b.n	800b012 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d020      	beq.n	800afe6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800afa4:	4b34      	ldr	r3, [pc, #208]	; (800b078 <HAL_RCC_OscConfig+0x244>)
 800afa6:	2201      	movs	r2, #1
 800afa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afaa:	f7fd fd1d 	bl	80089e8 <HAL_GetTick>
 800afae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800afb0:	e008      	b.n	800afc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800afb2:	f7fd fd19 	bl	80089e8 <HAL_GetTick>
 800afb6:	4602      	mov	r2, r0
 800afb8:	693b      	ldr	r3, [r7, #16]
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	2b02      	cmp	r3, #2
 800afbe:	d901      	bls.n	800afc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800afc0:	2303      	movs	r3, #3
 800afc2:	e1a8      	b.n	800b316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800afc4:	4b2b      	ldr	r3, [pc, #172]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f003 0302 	and.w	r3, r3, #2
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d0f0      	beq.n	800afb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afd0:	4b28      	ldr	r3, [pc, #160]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	691b      	ldr	r3, [r3, #16]
 800afdc:	00db      	lsls	r3, r3, #3
 800afde:	4925      	ldr	r1, [pc, #148]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800afe0:	4313      	orrs	r3, r2
 800afe2:	600b      	str	r3, [r1, #0]
 800afe4:	e015      	b.n	800b012 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800afe6:	4b24      	ldr	r3, [pc, #144]	; (800b078 <HAL_RCC_OscConfig+0x244>)
 800afe8:	2200      	movs	r2, #0
 800afea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afec:	f7fd fcfc 	bl	80089e8 <HAL_GetTick>
 800aff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aff2:	e008      	b.n	800b006 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800aff4:	f7fd fcf8 	bl	80089e8 <HAL_GetTick>
 800aff8:	4602      	mov	r2, r0
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	1ad3      	subs	r3, r2, r3
 800affe:	2b02      	cmp	r3, #2
 800b000:	d901      	bls.n	800b006 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800b002:	2303      	movs	r3, #3
 800b004:	e187      	b.n	800b316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b006:	4b1b      	ldr	r3, [pc, #108]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f003 0302 	and.w	r3, r3, #2
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d1f0      	bne.n	800aff4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	f003 0308 	and.w	r3, r3, #8
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d036      	beq.n	800b08c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	695b      	ldr	r3, [r3, #20]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d016      	beq.n	800b054 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b026:	4b15      	ldr	r3, [pc, #84]	; (800b07c <HAL_RCC_OscConfig+0x248>)
 800b028:	2201      	movs	r2, #1
 800b02a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b02c:	f7fd fcdc 	bl	80089e8 <HAL_GetTick>
 800b030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b032:	e008      	b.n	800b046 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b034:	f7fd fcd8 	bl	80089e8 <HAL_GetTick>
 800b038:	4602      	mov	r2, r0
 800b03a:	693b      	ldr	r3, [r7, #16]
 800b03c:	1ad3      	subs	r3, r2, r3
 800b03e:	2b02      	cmp	r3, #2
 800b040:	d901      	bls.n	800b046 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800b042:	2303      	movs	r3, #3
 800b044:	e167      	b.n	800b316 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b046:	4b0b      	ldr	r3, [pc, #44]	; (800b074 <HAL_RCC_OscConfig+0x240>)
 800b048:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b04a:	f003 0302 	and.w	r3, r3, #2
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d0f0      	beq.n	800b034 <HAL_RCC_OscConfig+0x200>
 800b052:	e01b      	b.n	800b08c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b054:	4b09      	ldr	r3, [pc, #36]	; (800b07c <HAL_RCC_OscConfig+0x248>)
 800b056:	2200      	movs	r2, #0
 800b058:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b05a:	f7fd fcc5 	bl	80089e8 <HAL_GetTick>
 800b05e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b060:	e00e      	b.n	800b080 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b062:	f7fd fcc1 	bl	80089e8 <HAL_GetTick>
 800b066:	4602      	mov	r2, r0
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	1ad3      	subs	r3, r2, r3
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	d907      	bls.n	800b080 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800b070:	2303      	movs	r3, #3
 800b072:	e150      	b.n	800b316 <HAL_RCC_OscConfig+0x4e2>
 800b074:	40023800 	.word	0x40023800
 800b078:	42470000 	.word	0x42470000
 800b07c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b080:	4b88      	ldr	r3, [pc, #544]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b084:	f003 0302 	and.w	r3, r3, #2
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d1ea      	bne.n	800b062 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f003 0304 	and.w	r3, r3, #4
 800b094:	2b00      	cmp	r3, #0
 800b096:	f000 8097 	beq.w	800b1c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b09a:	2300      	movs	r3, #0
 800b09c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b09e:	4b81      	ldr	r3, [pc, #516]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b0a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d10f      	bne.n	800b0ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	60bb      	str	r3, [r7, #8]
 800b0ae:	4b7d      	ldr	r3, [pc, #500]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b2:	4a7c      	ldr	r2, [pc, #496]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b0b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0b8:	6413      	str	r3, [r2, #64]	; 0x40
 800b0ba:	4b7a      	ldr	r3, [pc, #488]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b0bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b0c2:	60bb      	str	r3, [r7, #8]
 800b0c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0ca:	4b77      	ldr	r3, [pc, #476]	; (800b2a8 <HAL_RCC_OscConfig+0x474>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d118      	bne.n	800b108 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b0d6:	4b74      	ldr	r3, [pc, #464]	; (800b2a8 <HAL_RCC_OscConfig+0x474>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	4a73      	ldr	r2, [pc, #460]	; (800b2a8 <HAL_RCC_OscConfig+0x474>)
 800b0dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b0e2:	f7fd fc81 	bl	80089e8 <HAL_GetTick>
 800b0e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0e8:	e008      	b.n	800b0fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0ea:	f7fd fc7d 	bl	80089e8 <HAL_GetTick>
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	1ad3      	subs	r3, r2, r3
 800b0f4:	2b02      	cmp	r3, #2
 800b0f6:	d901      	bls.n	800b0fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800b0f8:	2303      	movs	r3, #3
 800b0fa:	e10c      	b.n	800b316 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0fc:	4b6a      	ldr	r3, [pc, #424]	; (800b2a8 <HAL_RCC_OscConfig+0x474>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b104:	2b00      	cmp	r3, #0
 800b106:	d0f0      	beq.n	800b0ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	689b      	ldr	r3, [r3, #8]
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d106      	bne.n	800b11e <HAL_RCC_OscConfig+0x2ea>
 800b110:	4b64      	ldr	r3, [pc, #400]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b114:	4a63      	ldr	r2, [pc, #396]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b116:	f043 0301 	orr.w	r3, r3, #1
 800b11a:	6713      	str	r3, [r2, #112]	; 0x70
 800b11c:	e01c      	b.n	800b158 <HAL_RCC_OscConfig+0x324>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	689b      	ldr	r3, [r3, #8]
 800b122:	2b05      	cmp	r3, #5
 800b124:	d10c      	bne.n	800b140 <HAL_RCC_OscConfig+0x30c>
 800b126:	4b5f      	ldr	r3, [pc, #380]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b12a:	4a5e      	ldr	r2, [pc, #376]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b12c:	f043 0304 	orr.w	r3, r3, #4
 800b130:	6713      	str	r3, [r2, #112]	; 0x70
 800b132:	4b5c      	ldr	r3, [pc, #368]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b136:	4a5b      	ldr	r2, [pc, #364]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b138:	f043 0301 	orr.w	r3, r3, #1
 800b13c:	6713      	str	r3, [r2, #112]	; 0x70
 800b13e:	e00b      	b.n	800b158 <HAL_RCC_OscConfig+0x324>
 800b140:	4b58      	ldr	r3, [pc, #352]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b144:	4a57      	ldr	r2, [pc, #348]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b146:	f023 0301 	bic.w	r3, r3, #1
 800b14a:	6713      	str	r3, [r2, #112]	; 0x70
 800b14c:	4b55      	ldr	r3, [pc, #340]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b14e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b150:	4a54      	ldr	r2, [pc, #336]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b152:	f023 0304 	bic.w	r3, r3, #4
 800b156:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	689b      	ldr	r3, [r3, #8]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d015      	beq.n	800b18c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b160:	f7fd fc42 	bl	80089e8 <HAL_GetTick>
 800b164:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b166:	e00a      	b.n	800b17e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b168:	f7fd fc3e 	bl	80089e8 <HAL_GetTick>
 800b16c:	4602      	mov	r2, r0
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	1ad3      	subs	r3, r2, r3
 800b172:	f241 3288 	movw	r2, #5000	; 0x1388
 800b176:	4293      	cmp	r3, r2
 800b178:	d901      	bls.n	800b17e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b17a:	2303      	movs	r3, #3
 800b17c:	e0cb      	b.n	800b316 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b17e:	4b49      	ldr	r3, [pc, #292]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b182:	f003 0302 	and.w	r3, r3, #2
 800b186:	2b00      	cmp	r3, #0
 800b188:	d0ee      	beq.n	800b168 <HAL_RCC_OscConfig+0x334>
 800b18a:	e014      	b.n	800b1b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b18c:	f7fd fc2c 	bl	80089e8 <HAL_GetTick>
 800b190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b192:	e00a      	b.n	800b1aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b194:	f7fd fc28 	bl	80089e8 <HAL_GetTick>
 800b198:	4602      	mov	r2, r0
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	1ad3      	subs	r3, r2, r3
 800b19e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d901      	bls.n	800b1aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b1a6:	2303      	movs	r3, #3
 800b1a8:	e0b5      	b.n	800b316 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b1aa:	4b3e      	ldr	r3, [pc, #248]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b1ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1ae:	f003 0302 	and.w	r3, r3, #2
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d1ee      	bne.n	800b194 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b1b6:	7dfb      	ldrb	r3, [r7, #23]
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d105      	bne.n	800b1c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b1bc:	4b39      	ldr	r3, [pc, #228]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c0:	4a38      	ldr	r2, [pc, #224]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b1c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	699b      	ldr	r3, [r3, #24]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f000 80a1 	beq.w	800b314 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b1d2:	4b34      	ldr	r3, [pc, #208]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	f003 030c 	and.w	r3, r3, #12
 800b1da:	2b08      	cmp	r3, #8
 800b1dc:	d05c      	beq.n	800b298 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	699b      	ldr	r3, [r3, #24]
 800b1e2:	2b02      	cmp	r3, #2
 800b1e4:	d141      	bne.n	800b26a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b1e6:	4b31      	ldr	r3, [pc, #196]	; (800b2ac <HAL_RCC_OscConfig+0x478>)
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1ec:	f7fd fbfc 	bl	80089e8 <HAL_GetTick>
 800b1f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b1f2:	e008      	b.n	800b206 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b1f4:	f7fd fbf8 	bl	80089e8 <HAL_GetTick>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	1ad3      	subs	r3, r2, r3
 800b1fe:	2b02      	cmp	r3, #2
 800b200:	d901      	bls.n	800b206 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b202:	2303      	movs	r3, #3
 800b204:	e087      	b.n	800b316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b206:	4b27      	ldr	r3, [pc, #156]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d1f0      	bne.n	800b1f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	69da      	ldr	r2, [r3, #28]
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	6a1b      	ldr	r3, [r3, #32]
 800b21a:	431a      	orrs	r2, r3
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b220:	019b      	lsls	r3, r3, #6
 800b222:	431a      	orrs	r2, r3
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b228:	085b      	lsrs	r3, r3, #1
 800b22a:	3b01      	subs	r3, #1
 800b22c:	041b      	lsls	r3, r3, #16
 800b22e:	431a      	orrs	r2, r3
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b234:	061b      	lsls	r3, r3, #24
 800b236:	491b      	ldr	r1, [pc, #108]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b238:	4313      	orrs	r3, r2
 800b23a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b23c:	4b1b      	ldr	r3, [pc, #108]	; (800b2ac <HAL_RCC_OscConfig+0x478>)
 800b23e:	2201      	movs	r2, #1
 800b240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b242:	f7fd fbd1 	bl	80089e8 <HAL_GetTick>
 800b246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b248:	e008      	b.n	800b25c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b24a:	f7fd fbcd 	bl	80089e8 <HAL_GetTick>
 800b24e:	4602      	mov	r2, r0
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	1ad3      	subs	r3, r2, r3
 800b254:	2b02      	cmp	r3, #2
 800b256:	d901      	bls.n	800b25c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b258:	2303      	movs	r3, #3
 800b25a:	e05c      	b.n	800b316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b25c:	4b11      	ldr	r3, [pc, #68]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b264:	2b00      	cmp	r3, #0
 800b266:	d0f0      	beq.n	800b24a <HAL_RCC_OscConfig+0x416>
 800b268:	e054      	b.n	800b314 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b26a:	4b10      	ldr	r3, [pc, #64]	; (800b2ac <HAL_RCC_OscConfig+0x478>)
 800b26c:	2200      	movs	r2, #0
 800b26e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b270:	f7fd fbba 	bl	80089e8 <HAL_GetTick>
 800b274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b276:	e008      	b.n	800b28a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b278:	f7fd fbb6 	bl	80089e8 <HAL_GetTick>
 800b27c:	4602      	mov	r2, r0
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	1ad3      	subs	r3, r2, r3
 800b282:	2b02      	cmp	r3, #2
 800b284:	d901      	bls.n	800b28a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b286:	2303      	movs	r3, #3
 800b288:	e045      	b.n	800b316 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b28a:	4b06      	ldr	r3, [pc, #24]	; (800b2a4 <HAL_RCC_OscConfig+0x470>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1f0      	bne.n	800b278 <HAL_RCC_OscConfig+0x444>
 800b296:	e03d      	b.n	800b314 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	699b      	ldr	r3, [r3, #24]
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d107      	bne.n	800b2b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e038      	b.n	800b316 <HAL_RCC_OscConfig+0x4e2>
 800b2a4:	40023800 	.word	0x40023800
 800b2a8:	40007000 	.word	0x40007000
 800b2ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b2b0:	4b1b      	ldr	r3, [pc, #108]	; (800b320 <HAL_RCC_OscConfig+0x4ec>)
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	699b      	ldr	r3, [r3, #24]
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d028      	beq.n	800b310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d121      	bne.n	800b310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d11a      	bne.n	800b310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800b2e0:	4013      	ands	r3, r2
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b2e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d111      	bne.n	800b310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2f6:	085b      	lsrs	r3, r3, #1
 800b2f8:	3b01      	subs	r3, #1
 800b2fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d107      	bne.n	800b310 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b30a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d001      	beq.n	800b314 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800b310:	2301      	movs	r3, #1
 800b312:	e000      	b.n	800b316 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b314:	2300      	movs	r3, #0
}
 800b316:	4618      	mov	r0, r3
 800b318:	3718      	adds	r7, #24
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	40023800 	.word	0x40023800

0800b324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
 800b32c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d101      	bne.n	800b338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b334:	2301      	movs	r3, #1
 800b336:	e0cc      	b.n	800b4d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b338:	4b68      	ldr	r3, [pc, #416]	; (800b4dc <HAL_RCC_ClockConfig+0x1b8>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f003 0307 	and.w	r3, r3, #7
 800b340:	683a      	ldr	r2, [r7, #0]
 800b342:	429a      	cmp	r2, r3
 800b344:	d90c      	bls.n	800b360 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b346:	4b65      	ldr	r3, [pc, #404]	; (800b4dc <HAL_RCC_ClockConfig+0x1b8>)
 800b348:	683a      	ldr	r2, [r7, #0]
 800b34a:	b2d2      	uxtb	r2, r2
 800b34c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b34e:	4b63      	ldr	r3, [pc, #396]	; (800b4dc <HAL_RCC_ClockConfig+0x1b8>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f003 0307 	and.w	r3, r3, #7
 800b356:	683a      	ldr	r2, [r7, #0]
 800b358:	429a      	cmp	r2, r3
 800b35a:	d001      	beq.n	800b360 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b35c:	2301      	movs	r3, #1
 800b35e:	e0b8      	b.n	800b4d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f003 0302 	and.w	r3, r3, #2
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d020      	beq.n	800b3ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f003 0304 	and.w	r3, r3, #4
 800b374:	2b00      	cmp	r3, #0
 800b376:	d005      	beq.n	800b384 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b378:	4b59      	ldr	r3, [pc, #356]	; (800b4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	4a58      	ldr	r2, [pc, #352]	; (800b4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b37e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b382:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f003 0308 	and.w	r3, r3, #8
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d005      	beq.n	800b39c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b390:	4b53      	ldr	r3, [pc, #332]	; (800b4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b392:	689b      	ldr	r3, [r3, #8]
 800b394:	4a52      	ldr	r2, [pc, #328]	; (800b4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b396:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b39a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b39c:	4b50      	ldr	r3, [pc, #320]	; (800b4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b39e:	689b      	ldr	r3, [r3, #8]
 800b3a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	689b      	ldr	r3, [r3, #8]
 800b3a8:	494d      	ldr	r1, [pc, #308]	; (800b4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f003 0301 	and.w	r3, r3, #1
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d044      	beq.n	800b444 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	2b01      	cmp	r3, #1
 800b3c0:	d107      	bne.n	800b3d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b3c2:	4b47      	ldr	r3, [pc, #284]	; (800b4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d119      	bne.n	800b402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e07f      	b.n	800b4d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	685b      	ldr	r3, [r3, #4]
 800b3d6:	2b02      	cmp	r3, #2
 800b3d8:	d003      	beq.n	800b3e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b3de:	2b03      	cmp	r3, #3
 800b3e0:	d107      	bne.n	800b3f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b3e2:	4b3f      	ldr	r3, [pc, #252]	; (800b4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d109      	bne.n	800b402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b3ee:	2301      	movs	r3, #1
 800b3f0:	e06f      	b.n	800b4d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b3f2:	4b3b      	ldr	r3, [pc, #236]	; (800b4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	f003 0302 	and.w	r3, r3, #2
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d101      	bne.n	800b402 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b3fe:	2301      	movs	r3, #1
 800b400:	e067      	b.n	800b4d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b402:	4b37      	ldr	r3, [pc, #220]	; (800b4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b404:	689b      	ldr	r3, [r3, #8]
 800b406:	f023 0203 	bic.w	r2, r3, #3
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	4934      	ldr	r1, [pc, #208]	; (800b4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b410:	4313      	orrs	r3, r2
 800b412:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b414:	f7fd fae8 	bl	80089e8 <HAL_GetTick>
 800b418:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b41a:	e00a      	b.n	800b432 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b41c:	f7fd fae4 	bl	80089e8 <HAL_GetTick>
 800b420:	4602      	mov	r2, r0
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	1ad3      	subs	r3, r2, r3
 800b426:	f241 3288 	movw	r2, #5000	; 0x1388
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d901      	bls.n	800b432 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b42e:	2303      	movs	r3, #3
 800b430:	e04f      	b.n	800b4d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b432:	4b2b      	ldr	r3, [pc, #172]	; (800b4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	f003 020c 	and.w	r2, r3, #12
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	429a      	cmp	r2, r3
 800b442:	d1eb      	bne.n	800b41c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b444:	4b25      	ldr	r3, [pc, #148]	; (800b4dc <HAL_RCC_ClockConfig+0x1b8>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 0307 	and.w	r3, r3, #7
 800b44c:	683a      	ldr	r2, [r7, #0]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d20c      	bcs.n	800b46c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b452:	4b22      	ldr	r3, [pc, #136]	; (800b4dc <HAL_RCC_ClockConfig+0x1b8>)
 800b454:	683a      	ldr	r2, [r7, #0]
 800b456:	b2d2      	uxtb	r2, r2
 800b458:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b45a:	4b20      	ldr	r3, [pc, #128]	; (800b4dc <HAL_RCC_ClockConfig+0x1b8>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f003 0307 	and.w	r3, r3, #7
 800b462:	683a      	ldr	r2, [r7, #0]
 800b464:	429a      	cmp	r2, r3
 800b466:	d001      	beq.n	800b46c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b468:	2301      	movs	r3, #1
 800b46a:	e032      	b.n	800b4d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	f003 0304 	and.w	r3, r3, #4
 800b474:	2b00      	cmp	r3, #0
 800b476:	d008      	beq.n	800b48a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b478:	4b19      	ldr	r3, [pc, #100]	; (800b4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b47a:	689b      	ldr	r3, [r3, #8]
 800b47c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	4916      	ldr	r1, [pc, #88]	; (800b4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b486:	4313      	orrs	r3, r2
 800b488:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f003 0308 	and.w	r3, r3, #8
 800b492:	2b00      	cmp	r3, #0
 800b494:	d009      	beq.n	800b4aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b496:	4b12      	ldr	r3, [pc, #72]	; (800b4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	691b      	ldr	r3, [r3, #16]
 800b4a2:	00db      	lsls	r3, r3, #3
 800b4a4:	490e      	ldr	r1, [pc, #56]	; (800b4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b4aa:	f000 f821 	bl	800b4f0 <HAL_RCC_GetSysClockFreq>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	4b0b      	ldr	r3, [pc, #44]	; (800b4e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b4b2:	689b      	ldr	r3, [r3, #8]
 800b4b4:	091b      	lsrs	r3, r3, #4
 800b4b6:	f003 030f 	and.w	r3, r3, #15
 800b4ba:	490a      	ldr	r1, [pc, #40]	; (800b4e4 <HAL_RCC_ClockConfig+0x1c0>)
 800b4bc:	5ccb      	ldrb	r3, [r1, r3]
 800b4be:	fa22 f303 	lsr.w	r3, r2, r3
 800b4c2:	4a09      	ldr	r2, [pc, #36]	; (800b4e8 <HAL_RCC_ClockConfig+0x1c4>)
 800b4c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b4c6:	4b09      	ldr	r3, [pc, #36]	; (800b4ec <HAL_RCC_ClockConfig+0x1c8>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7fc fc94 	bl	8007df8 <HAL_InitTick>

  return HAL_OK;
 800b4d0:	2300      	movs	r3, #0
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3710      	adds	r7, #16
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
 800b4da:	bf00      	nop
 800b4dc:	40023c00 	.word	0x40023c00
 800b4e0:	40023800 	.word	0x40023800
 800b4e4:	08014058 	.word	0x08014058
 800b4e8:	20000010 	.word	0x20000010
 800b4ec:	20000014 	.word	0x20000014

0800b4f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b4f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b4f4:	b094      	sub	sp, #80	; 0x50
 800b4f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	647b      	str	r3, [r7, #68]	; 0x44
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b500:	2300      	movs	r3, #0
 800b502:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800b504:	2300      	movs	r3, #0
 800b506:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b508:	4b79      	ldr	r3, [pc, #484]	; (800b6f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	f003 030c 	and.w	r3, r3, #12
 800b510:	2b08      	cmp	r3, #8
 800b512:	d00d      	beq.n	800b530 <HAL_RCC_GetSysClockFreq+0x40>
 800b514:	2b08      	cmp	r3, #8
 800b516:	f200 80e1 	bhi.w	800b6dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d002      	beq.n	800b524 <HAL_RCC_GetSysClockFreq+0x34>
 800b51e:	2b04      	cmp	r3, #4
 800b520:	d003      	beq.n	800b52a <HAL_RCC_GetSysClockFreq+0x3a>
 800b522:	e0db      	b.n	800b6dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b524:	4b73      	ldr	r3, [pc, #460]	; (800b6f4 <HAL_RCC_GetSysClockFreq+0x204>)
 800b526:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800b528:	e0db      	b.n	800b6e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b52a:	4b72      	ldr	r3, [pc, #456]	; (800b6f4 <HAL_RCC_GetSysClockFreq+0x204>)
 800b52c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b52e:	e0d8      	b.n	800b6e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b530:	4b6f      	ldr	r3, [pc, #444]	; (800b6f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b532:	685b      	ldr	r3, [r3, #4]
 800b534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b538:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b53a:	4b6d      	ldr	r3, [pc, #436]	; (800b6f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b542:	2b00      	cmp	r3, #0
 800b544:	d063      	beq.n	800b60e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b546:	4b6a      	ldr	r3, [pc, #424]	; (800b6f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	099b      	lsrs	r3, r3, #6
 800b54c:	2200      	movs	r2, #0
 800b54e:	63bb      	str	r3, [r7, #56]	; 0x38
 800b550:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b558:	633b      	str	r3, [r7, #48]	; 0x30
 800b55a:	2300      	movs	r3, #0
 800b55c:	637b      	str	r3, [r7, #52]	; 0x34
 800b55e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b562:	4622      	mov	r2, r4
 800b564:	462b      	mov	r3, r5
 800b566:	f04f 0000 	mov.w	r0, #0
 800b56a:	f04f 0100 	mov.w	r1, #0
 800b56e:	0159      	lsls	r1, r3, #5
 800b570:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b574:	0150      	lsls	r0, r2, #5
 800b576:	4602      	mov	r2, r0
 800b578:	460b      	mov	r3, r1
 800b57a:	4621      	mov	r1, r4
 800b57c:	1a51      	subs	r1, r2, r1
 800b57e:	6139      	str	r1, [r7, #16]
 800b580:	4629      	mov	r1, r5
 800b582:	eb63 0301 	sbc.w	r3, r3, r1
 800b586:	617b      	str	r3, [r7, #20]
 800b588:	f04f 0200 	mov.w	r2, #0
 800b58c:	f04f 0300 	mov.w	r3, #0
 800b590:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b594:	4659      	mov	r1, fp
 800b596:	018b      	lsls	r3, r1, #6
 800b598:	4651      	mov	r1, sl
 800b59a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b59e:	4651      	mov	r1, sl
 800b5a0:	018a      	lsls	r2, r1, #6
 800b5a2:	4651      	mov	r1, sl
 800b5a4:	ebb2 0801 	subs.w	r8, r2, r1
 800b5a8:	4659      	mov	r1, fp
 800b5aa:	eb63 0901 	sbc.w	r9, r3, r1
 800b5ae:	f04f 0200 	mov.w	r2, #0
 800b5b2:	f04f 0300 	mov.w	r3, #0
 800b5b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b5ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b5be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b5c2:	4690      	mov	r8, r2
 800b5c4:	4699      	mov	r9, r3
 800b5c6:	4623      	mov	r3, r4
 800b5c8:	eb18 0303 	adds.w	r3, r8, r3
 800b5cc:	60bb      	str	r3, [r7, #8]
 800b5ce:	462b      	mov	r3, r5
 800b5d0:	eb49 0303 	adc.w	r3, r9, r3
 800b5d4:	60fb      	str	r3, [r7, #12]
 800b5d6:	f04f 0200 	mov.w	r2, #0
 800b5da:	f04f 0300 	mov.w	r3, #0
 800b5de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b5e2:	4629      	mov	r1, r5
 800b5e4:	028b      	lsls	r3, r1, #10
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b5ec:	4621      	mov	r1, r4
 800b5ee:	028a      	lsls	r2, r1, #10
 800b5f0:	4610      	mov	r0, r2
 800b5f2:	4619      	mov	r1, r3
 800b5f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b5fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b600:	f7f5 faea 	bl	8000bd8 <__aeabi_uldivmod>
 800b604:	4602      	mov	r2, r0
 800b606:	460b      	mov	r3, r1
 800b608:	4613      	mov	r3, r2
 800b60a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b60c:	e058      	b.n	800b6c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b60e:	4b38      	ldr	r3, [pc, #224]	; (800b6f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	099b      	lsrs	r3, r3, #6
 800b614:	2200      	movs	r2, #0
 800b616:	4618      	mov	r0, r3
 800b618:	4611      	mov	r1, r2
 800b61a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b61e:	623b      	str	r3, [r7, #32]
 800b620:	2300      	movs	r3, #0
 800b622:	627b      	str	r3, [r7, #36]	; 0x24
 800b624:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b628:	4642      	mov	r2, r8
 800b62a:	464b      	mov	r3, r9
 800b62c:	f04f 0000 	mov.w	r0, #0
 800b630:	f04f 0100 	mov.w	r1, #0
 800b634:	0159      	lsls	r1, r3, #5
 800b636:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b63a:	0150      	lsls	r0, r2, #5
 800b63c:	4602      	mov	r2, r0
 800b63e:	460b      	mov	r3, r1
 800b640:	4641      	mov	r1, r8
 800b642:	ebb2 0a01 	subs.w	sl, r2, r1
 800b646:	4649      	mov	r1, r9
 800b648:	eb63 0b01 	sbc.w	fp, r3, r1
 800b64c:	f04f 0200 	mov.w	r2, #0
 800b650:	f04f 0300 	mov.w	r3, #0
 800b654:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b658:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b65c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b660:	ebb2 040a 	subs.w	r4, r2, sl
 800b664:	eb63 050b 	sbc.w	r5, r3, fp
 800b668:	f04f 0200 	mov.w	r2, #0
 800b66c:	f04f 0300 	mov.w	r3, #0
 800b670:	00eb      	lsls	r3, r5, #3
 800b672:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b676:	00e2      	lsls	r2, r4, #3
 800b678:	4614      	mov	r4, r2
 800b67a:	461d      	mov	r5, r3
 800b67c:	4643      	mov	r3, r8
 800b67e:	18e3      	adds	r3, r4, r3
 800b680:	603b      	str	r3, [r7, #0]
 800b682:	464b      	mov	r3, r9
 800b684:	eb45 0303 	adc.w	r3, r5, r3
 800b688:	607b      	str	r3, [r7, #4]
 800b68a:	f04f 0200 	mov.w	r2, #0
 800b68e:	f04f 0300 	mov.w	r3, #0
 800b692:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b696:	4629      	mov	r1, r5
 800b698:	028b      	lsls	r3, r1, #10
 800b69a:	4621      	mov	r1, r4
 800b69c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b6a0:	4621      	mov	r1, r4
 800b6a2:	028a      	lsls	r2, r1, #10
 800b6a4:	4610      	mov	r0, r2
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6aa:	2200      	movs	r2, #0
 800b6ac:	61bb      	str	r3, [r7, #24]
 800b6ae:	61fa      	str	r2, [r7, #28]
 800b6b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b6b4:	f7f5 fa90 	bl	8000bd8 <__aeabi_uldivmod>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	4613      	mov	r3, r2
 800b6be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b6c0:	4b0b      	ldr	r3, [pc, #44]	; (800b6f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	0c1b      	lsrs	r3, r3, #16
 800b6c6:	f003 0303 	and.w	r3, r3, #3
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	005b      	lsls	r3, r3, #1
 800b6ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b6d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b6d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b6da:	e002      	b.n	800b6e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b6dc:	4b05      	ldr	r3, [pc, #20]	; (800b6f4 <HAL_RCC_GetSysClockFreq+0x204>)
 800b6de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b6e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b6e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3750      	adds	r7, #80	; 0x50
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b6ee:	bf00      	nop
 800b6f0:	40023800 	.word	0x40023800
 800b6f4:	00f42400 	.word	0x00f42400

0800b6f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b6fc:	4b03      	ldr	r3, [pc, #12]	; (800b70c <HAL_RCC_GetHCLKFreq+0x14>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
}
 800b700:	4618      	mov	r0, r3
 800b702:	46bd      	mov	sp, r7
 800b704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop
 800b70c:	20000010 	.word	0x20000010

0800b710 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b714:	f7ff fff0 	bl	800b6f8 <HAL_RCC_GetHCLKFreq>
 800b718:	4602      	mov	r2, r0
 800b71a:	4b05      	ldr	r3, [pc, #20]	; (800b730 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b71c:	689b      	ldr	r3, [r3, #8]
 800b71e:	0a9b      	lsrs	r3, r3, #10
 800b720:	f003 0307 	and.w	r3, r3, #7
 800b724:	4903      	ldr	r1, [pc, #12]	; (800b734 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b726:	5ccb      	ldrb	r3, [r1, r3]
 800b728:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	40023800 	.word	0x40023800
 800b734:	08014068 	.word	0x08014068

0800b738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b73c:	f7ff ffdc 	bl	800b6f8 <HAL_RCC_GetHCLKFreq>
 800b740:	4602      	mov	r2, r0
 800b742:	4b05      	ldr	r3, [pc, #20]	; (800b758 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	0b5b      	lsrs	r3, r3, #13
 800b748:	f003 0307 	and.w	r3, r3, #7
 800b74c:	4903      	ldr	r1, [pc, #12]	; (800b75c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b74e:	5ccb      	ldrb	r3, [r1, r3]
 800b750:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b754:	4618      	mov	r0, r3
 800b756:	bd80      	pop	{r7, pc}
 800b758:	40023800 	.word	0x40023800
 800b75c:	08014068 	.word	0x08014068

0800b760 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b760:	b480      	push	{r7}
 800b762:	b083      	sub	sp, #12
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	220f      	movs	r2, #15
 800b76e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b770:	4b12      	ldr	r3, [pc, #72]	; (800b7bc <HAL_RCC_GetClockConfig+0x5c>)
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	f003 0203 	and.w	r2, r3, #3
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b77c:	4b0f      	ldr	r3, [pc, #60]	; (800b7bc <HAL_RCC_GetClockConfig+0x5c>)
 800b77e:	689b      	ldr	r3, [r3, #8]
 800b780:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b788:	4b0c      	ldr	r3, [pc, #48]	; (800b7bc <HAL_RCC_GetClockConfig+0x5c>)
 800b78a:	689b      	ldr	r3, [r3, #8]
 800b78c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b794:	4b09      	ldr	r3, [pc, #36]	; (800b7bc <HAL_RCC_GetClockConfig+0x5c>)
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	08db      	lsrs	r3, r3, #3
 800b79a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b7a2:	4b07      	ldr	r3, [pc, #28]	; (800b7c0 <HAL_RCC_GetClockConfig+0x60>)
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f003 0207 	and.w	r2, r3, #7
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	601a      	str	r2, [r3, #0]
}
 800b7ae:	bf00      	nop
 800b7b0:	370c      	adds	r7, #12
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	40023800 	.word	0x40023800
 800b7c0:	40023c00 	.word	0x40023c00

0800b7c4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d101      	bne.n	800b7d6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800b7d2:	2301      	movs	r3, #1
 800b7d4:	e01c      	b.n	800b810 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	795b      	ldrb	r3, [r3, #5]
 800b7da:	b2db      	uxtb	r3, r3
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d105      	bne.n	800b7ec <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f7fc fa3a 	bl	8007c60 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2202      	movs	r2, #2
 800b7f0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f042 0204 	orr.w	r2, r2, #4
 800b800:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2201      	movs	r2, #1
 800b806:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2200      	movs	r2, #0
 800b80c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800b80e:	2300      	movs	r3, #0
}
 800b810:	4618      	mov	r0, r3
 800b812:	3708      	adds	r7, #8
 800b814:	46bd      	mov	sp, r7
 800b816:	bd80      	pop	{r7, pc}

0800b818 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d101      	bne.n	800b82a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b826:	2301      	movs	r3, #1
 800b828:	e07b      	b.n	800b922 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d108      	bne.n	800b844 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b83a:	d009      	beq.n	800b850 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2200      	movs	r2, #0
 800b840:	61da      	str	r2, [r3, #28]
 800b842:	e005      	b.n	800b850 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d106      	bne.n	800b870 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	2200      	movs	r2, #0
 800b866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f7fc fa50 	bl	8007d10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2202      	movs	r2, #2
 800b874:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	681a      	ldr	r2, [r3, #0]
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b886:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	689b      	ldr	r3, [r3, #8]
 800b894:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b898:	431a      	orrs	r2, r3
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	68db      	ldr	r3, [r3, #12]
 800b89e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b8a2:	431a      	orrs	r2, r3
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	691b      	ldr	r3, [r3, #16]
 800b8a8:	f003 0302 	and.w	r3, r3, #2
 800b8ac:	431a      	orrs	r2, r3
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	695b      	ldr	r3, [r3, #20]
 800b8b2:	f003 0301 	and.w	r3, r3, #1
 800b8b6:	431a      	orrs	r2, r3
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	699b      	ldr	r3, [r3, #24]
 800b8bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b8c0:	431a      	orrs	r2, r3
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	69db      	ldr	r3, [r3, #28]
 800b8c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b8ca:	431a      	orrs	r2, r3
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6a1b      	ldr	r3, [r3, #32]
 800b8d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8d4:	ea42 0103 	orr.w	r1, r2, r3
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	430a      	orrs	r2, r1
 800b8e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	699b      	ldr	r3, [r3, #24]
 800b8ec:	0c1b      	lsrs	r3, r3, #16
 800b8ee:	f003 0104 	and.w	r1, r3, #4
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8f6:	f003 0210 	and.w	r2, r3, #16
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	430a      	orrs	r2, r1
 800b900:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	69da      	ldr	r2, [r3, #28]
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b910:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2200      	movs	r2, #0
 800b916:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2201      	movs	r2, #1
 800b91c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b920:	2300      	movs	r3, #0
}
 800b922:	4618      	mov	r0, r3
 800b924:	3708      	adds	r7, #8
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}

0800b92a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b92a:	b580      	push	{r7, lr}
 800b92c:	b082      	sub	sp, #8
 800b92e:	af00      	add	r7, sp, #0
 800b930:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d101      	bne.n	800b93c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b938:	2301      	movs	r3, #1
 800b93a:	e041      	b.n	800b9c0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b942:	b2db      	uxtb	r3, r3
 800b944:	2b00      	cmp	r3, #0
 800b946:	d106      	bne.n	800b956 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2200      	movs	r2, #0
 800b94c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f7fc fda9 	bl	80084a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2202      	movs	r2, #2
 800b95a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	3304      	adds	r3, #4
 800b966:	4619      	mov	r1, r3
 800b968:	4610      	mov	r0, r2
 800b96a:	f000 fc57 	bl	800c21c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2201      	movs	r2, #1
 800b972:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2201      	movs	r2, #1
 800b97a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2201      	movs	r2, #1
 800b982:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2201      	movs	r2, #1
 800b98a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	2201      	movs	r2, #1
 800b992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2201      	movs	r2, #1
 800b99a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2201      	movs	r2, #1
 800b9aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b9be:	2300      	movs	r3, #0
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3708      	adds	r7, #8
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b085      	sub	sp, #20
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d001      	beq.n	800b9e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b9dc:	2301      	movs	r3, #1
 800b9de:	e04e      	b.n	800ba7e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2202      	movs	r2, #2
 800b9e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	68da      	ldr	r2, [r3, #12]
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	f042 0201 	orr.w	r2, r2, #1
 800b9f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	4a23      	ldr	r2, [pc, #140]	; (800ba8c <HAL_TIM_Base_Start_IT+0xc4>)
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d022      	beq.n	800ba48 <HAL_TIM_Base_Start_IT+0x80>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba0a:	d01d      	beq.n	800ba48 <HAL_TIM_Base_Start_IT+0x80>
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4a1f      	ldr	r2, [pc, #124]	; (800ba90 <HAL_TIM_Base_Start_IT+0xc8>)
 800ba12:	4293      	cmp	r3, r2
 800ba14:	d018      	beq.n	800ba48 <HAL_TIM_Base_Start_IT+0x80>
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4a1e      	ldr	r2, [pc, #120]	; (800ba94 <HAL_TIM_Base_Start_IT+0xcc>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d013      	beq.n	800ba48 <HAL_TIM_Base_Start_IT+0x80>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	4a1c      	ldr	r2, [pc, #112]	; (800ba98 <HAL_TIM_Base_Start_IT+0xd0>)
 800ba26:	4293      	cmp	r3, r2
 800ba28:	d00e      	beq.n	800ba48 <HAL_TIM_Base_Start_IT+0x80>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4a1b      	ldr	r2, [pc, #108]	; (800ba9c <HAL_TIM_Base_Start_IT+0xd4>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d009      	beq.n	800ba48 <HAL_TIM_Base_Start_IT+0x80>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4a19      	ldr	r2, [pc, #100]	; (800baa0 <HAL_TIM_Base_Start_IT+0xd8>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d004      	beq.n	800ba48 <HAL_TIM_Base_Start_IT+0x80>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4a18      	ldr	r2, [pc, #96]	; (800baa4 <HAL_TIM_Base_Start_IT+0xdc>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d111      	bne.n	800ba6c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	689b      	ldr	r3, [r3, #8]
 800ba4e:	f003 0307 	and.w	r3, r3, #7
 800ba52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2b06      	cmp	r3, #6
 800ba58:	d010      	beq.n	800ba7c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f042 0201 	orr.w	r2, r2, #1
 800ba68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba6a:	e007      	b.n	800ba7c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	681a      	ldr	r2, [r3, #0]
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	f042 0201 	orr.w	r2, r2, #1
 800ba7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ba7c:	2300      	movs	r3, #0
}
 800ba7e:	4618      	mov	r0, r3
 800ba80:	3714      	adds	r7, #20
 800ba82:	46bd      	mov	sp, r7
 800ba84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba88:	4770      	bx	lr
 800ba8a:	bf00      	nop
 800ba8c:	40010000 	.word	0x40010000
 800ba90:	40000400 	.word	0x40000400
 800ba94:	40000800 	.word	0x40000800
 800ba98:	40000c00 	.word	0x40000c00
 800ba9c:	40010400 	.word	0x40010400
 800baa0:	40014000 	.word	0x40014000
 800baa4:	40001800 	.word	0x40001800

0800baa8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d101      	bne.n	800baba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bab6:	2301      	movs	r3, #1
 800bab8:	e041      	b.n	800bb3e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d106      	bne.n	800bad4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2200      	movs	r2, #0
 800baca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 f839 	bl	800bb46 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2202      	movs	r2, #2
 800bad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	3304      	adds	r3, #4
 800bae4:	4619      	mov	r1, r3
 800bae6:	4610      	mov	r0, r2
 800bae8:	f000 fb98 	bl	800c21c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2201      	movs	r2, #1
 800baf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2201      	movs	r2, #1
 800bb00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2201      	movs	r2, #1
 800bb08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2201      	movs	r2, #1
 800bb18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2201      	movs	r2, #1
 800bb28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2201      	movs	r2, #1
 800bb38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bb3c:	2300      	movs	r3, #0
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3708      	adds	r7, #8
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bb46:	b480      	push	{r7}
 800bb48:	b083      	sub	sp, #12
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bb4e:	bf00      	nop
 800bb50:	370c      	adds	r7, #12
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr

0800bb5a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b086      	sub	sp, #24
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
 800bb62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d101      	bne.n	800bb6e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	e097      	b.n	800bc9e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d106      	bne.n	800bb88 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	f7fc fd16 	bl	80085b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2202      	movs	r2, #2
 800bb8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	689b      	ldr	r3, [r3, #8]
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	6812      	ldr	r2, [r2, #0]
 800bb9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb9e:	f023 0307 	bic.w	r3, r3, #7
 800bba2:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	3304      	adds	r3, #4
 800bbac:	4619      	mov	r1, r3
 800bbae:	4610      	mov	r0, r2
 800bbb0:	f000 fb34 	bl	800c21c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	689b      	ldr	r3, [r3, #8]
 800bbba:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	699b      	ldr	r3, [r3, #24]
 800bbc2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	6a1b      	ldr	r3, [r3, #32]
 800bbca:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	697a      	ldr	r2, [r7, #20]
 800bbd2:	4313      	orrs	r3, r2
 800bbd4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bbdc:	f023 0303 	bic.w	r3, r3, #3
 800bbe0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	689a      	ldr	r2, [r3, #8]
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	699b      	ldr	r3, [r3, #24]
 800bbea:	021b      	lsls	r3, r3, #8
 800bbec:	4313      	orrs	r3, r2
 800bbee:	693a      	ldr	r2, [r7, #16]
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800bbfa:	f023 030c 	bic.w	r3, r3, #12
 800bbfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bc06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bc0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800bc0c:	683b      	ldr	r3, [r7, #0]
 800bc0e:	68da      	ldr	r2, [r3, #12]
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	69db      	ldr	r3, [r3, #28]
 800bc14:	021b      	lsls	r3, r3, #8
 800bc16:	4313      	orrs	r3, r2
 800bc18:	693a      	ldr	r2, [r7, #16]
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	691b      	ldr	r3, [r3, #16]
 800bc22:	011a      	lsls	r2, r3, #4
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	6a1b      	ldr	r3, [r3, #32]
 800bc28:	031b      	lsls	r3, r3, #12
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	693a      	ldr	r2, [r7, #16]
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bc38:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800bc40:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	685a      	ldr	r2, [r3, #4]
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	695b      	ldr	r3, [r3, #20]
 800bc4a:	011b      	lsls	r3, r3, #4
 800bc4c:	4313      	orrs	r3, r2
 800bc4e:	68fa      	ldr	r2, [r7, #12]
 800bc50:	4313      	orrs	r3, r2
 800bc52:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	697a      	ldr	r2, [r7, #20]
 800bc5a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	693a      	ldr	r2, [r7, #16]
 800bc62:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	68fa      	ldr	r2, [r7, #12]
 800bc6a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	2201      	movs	r2, #1
 800bc70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2201      	movs	r2, #1
 800bc88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2201      	movs	r2, #1
 800bc98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3718      	adds	r7, #24
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}

0800bca6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bca6:	b580      	push	{r7, lr}
 800bca8:	b082      	sub	sp, #8
 800bcaa:	af00      	add	r7, sp, #0
 800bcac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	691b      	ldr	r3, [r3, #16]
 800bcb4:	f003 0302 	and.w	r3, r3, #2
 800bcb8:	2b02      	cmp	r3, #2
 800bcba:	d122      	bne.n	800bd02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	f003 0302 	and.w	r3, r3, #2
 800bcc6:	2b02      	cmp	r3, #2
 800bcc8:	d11b      	bne.n	800bd02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f06f 0202 	mvn.w	r2, #2
 800bcd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	699b      	ldr	r3, [r3, #24]
 800bce0:	f003 0303 	and.w	r3, r3, #3
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d003      	beq.n	800bcf0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 fa78 	bl	800c1de <HAL_TIM_IC_CaptureCallback>
 800bcee:	e005      	b.n	800bcfc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 fa6a 	bl	800c1ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 fa7b 	bl	800c1f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	2200      	movs	r2, #0
 800bd00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	691b      	ldr	r3, [r3, #16]
 800bd08:	f003 0304 	and.w	r3, r3, #4
 800bd0c:	2b04      	cmp	r3, #4
 800bd0e:	d122      	bne.n	800bd56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	68db      	ldr	r3, [r3, #12]
 800bd16:	f003 0304 	and.w	r3, r3, #4
 800bd1a:	2b04      	cmp	r3, #4
 800bd1c:	d11b      	bne.n	800bd56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f06f 0204 	mvn.w	r2, #4
 800bd26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2202      	movs	r2, #2
 800bd2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	699b      	ldr	r3, [r3, #24]
 800bd34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d003      	beq.n	800bd44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd3c:	6878      	ldr	r0, [r7, #4]
 800bd3e:	f000 fa4e 	bl	800c1de <HAL_TIM_IC_CaptureCallback>
 800bd42:	e005      	b.n	800bd50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd44:	6878      	ldr	r0, [r7, #4]
 800bd46:	f000 fa40 	bl	800c1ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd4a:	6878      	ldr	r0, [r7, #4]
 800bd4c:	f000 fa51 	bl	800c1f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2200      	movs	r2, #0
 800bd54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	691b      	ldr	r3, [r3, #16]
 800bd5c:	f003 0308 	and.w	r3, r3, #8
 800bd60:	2b08      	cmp	r3, #8
 800bd62:	d122      	bne.n	800bdaa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	68db      	ldr	r3, [r3, #12]
 800bd6a:	f003 0308 	and.w	r3, r3, #8
 800bd6e:	2b08      	cmp	r3, #8
 800bd70:	d11b      	bne.n	800bdaa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	f06f 0208 	mvn.w	r2, #8
 800bd7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2204      	movs	r2, #4
 800bd80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	69db      	ldr	r3, [r3, #28]
 800bd88:	f003 0303 	and.w	r3, r3, #3
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d003      	beq.n	800bd98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 fa24 	bl	800c1de <HAL_TIM_IC_CaptureCallback>
 800bd96:	e005      	b.n	800bda4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f000 fa16 	bl	800c1ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 fa27 	bl	800c1f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2200      	movs	r2, #0
 800bda8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	691b      	ldr	r3, [r3, #16]
 800bdb0:	f003 0310 	and.w	r3, r3, #16
 800bdb4:	2b10      	cmp	r3, #16
 800bdb6:	d122      	bne.n	800bdfe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	f003 0310 	and.w	r3, r3, #16
 800bdc2:	2b10      	cmp	r3, #16
 800bdc4:	d11b      	bne.n	800bdfe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f06f 0210 	mvn.w	r2, #16
 800bdce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2208      	movs	r2, #8
 800bdd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	69db      	ldr	r3, [r3, #28]
 800bddc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d003      	beq.n	800bdec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 f9fa 	bl	800c1de <HAL_TIM_IC_CaptureCallback>
 800bdea:	e005      	b.n	800bdf8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f000 f9ec 	bl	800c1ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 f9fd 	bl	800c1f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	691b      	ldr	r3, [r3, #16]
 800be04:	f003 0301 	and.w	r3, r3, #1
 800be08:	2b01      	cmp	r3, #1
 800be0a:	d10e      	bne.n	800be2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	68db      	ldr	r3, [r3, #12]
 800be12:	f003 0301 	and.w	r3, r3, #1
 800be16:	2b01      	cmp	r3, #1
 800be18:	d107      	bne.n	800be2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f06f 0201 	mvn.w	r2, #1
 800be22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f7fb feef 	bl	8007c08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	691b      	ldr	r3, [r3, #16]
 800be30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be34:	2b80      	cmp	r3, #128	; 0x80
 800be36:	d10e      	bne.n	800be56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be42:	2b80      	cmp	r3, #128	; 0x80
 800be44:	d107      	bne.n	800be56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800be4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fd53 	bl	800c8fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	691b      	ldr	r3, [r3, #16]
 800be5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be60:	2b40      	cmp	r3, #64	; 0x40
 800be62:	d10e      	bne.n	800be82 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	68db      	ldr	r3, [r3, #12]
 800be6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be6e:	2b40      	cmp	r3, #64	; 0x40
 800be70:	d107      	bne.n	800be82 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800be7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 f9c2 	bl	800c206 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	691b      	ldr	r3, [r3, #16]
 800be88:	f003 0320 	and.w	r3, r3, #32
 800be8c:	2b20      	cmp	r3, #32
 800be8e:	d10e      	bne.n	800beae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	68db      	ldr	r3, [r3, #12]
 800be96:	f003 0320 	and.w	r3, r3, #32
 800be9a:	2b20      	cmp	r3, #32
 800be9c:	d107      	bne.n	800beae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f06f 0220 	mvn.w	r2, #32
 800bea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 fd1d 	bl	800c8e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800beae:	bf00      	nop
 800beb0:	3708      	adds	r7, #8
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
	...

0800beb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b086      	sub	sp, #24
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	60f8      	str	r0, [r7, #12]
 800bec0:	60b9      	str	r1, [r7, #8]
 800bec2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bec4:	2300      	movs	r3, #0
 800bec6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bece:	2b01      	cmp	r3, #1
 800bed0:	d101      	bne.n	800bed6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bed2:	2302      	movs	r3, #2
 800bed4:	e0ae      	b.n	800c034 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2201      	movs	r2, #1
 800beda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2b0c      	cmp	r3, #12
 800bee2:	f200 809f 	bhi.w	800c024 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800bee6:	a201      	add	r2, pc, #4	; (adr r2, 800beec <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beec:	0800bf21 	.word	0x0800bf21
 800bef0:	0800c025 	.word	0x0800c025
 800bef4:	0800c025 	.word	0x0800c025
 800bef8:	0800c025 	.word	0x0800c025
 800befc:	0800bf61 	.word	0x0800bf61
 800bf00:	0800c025 	.word	0x0800c025
 800bf04:	0800c025 	.word	0x0800c025
 800bf08:	0800c025 	.word	0x0800c025
 800bf0c:	0800bfa3 	.word	0x0800bfa3
 800bf10:	0800c025 	.word	0x0800c025
 800bf14:	0800c025 	.word	0x0800c025
 800bf18:	0800c025 	.word	0x0800c025
 800bf1c:	0800bfe3 	.word	0x0800bfe3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	68b9      	ldr	r1, [r7, #8]
 800bf26:	4618      	mov	r0, r3
 800bf28:	f000 fa18 	bl	800c35c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	699a      	ldr	r2, [r3, #24]
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	f042 0208 	orr.w	r2, r2, #8
 800bf3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	699a      	ldr	r2, [r3, #24]
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	f022 0204 	bic.w	r2, r2, #4
 800bf4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	6999      	ldr	r1, [r3, #24]
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	691a      	ldr	r2, [r3, #16]
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	430a      	orrs	r2, r1
 800bf5c:	619a      	str	r2, [r3, #24]
      break;
 800bf5e:	e064      	b.n	800c02a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	68b9      	ldr	r1, [r7, #8]
 800bf66:	4618      	mov	r0, r3
 800bf68:	f000 fa68 	bl	800c43c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	699a      	ldr	r2, [r3, #24]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	699a      	ldr	r2, [r3, #24]
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bf8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	6999      	ldr	r1, [r3, #24]
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	691b      	ldr	r3, [r3, #16]
 800bf96:	021a      	lsls	r2, r3, #8
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	430a      	orrs	r2, r1
 800bf9e:	619a      	str	r2, [r3, #24]
      break;
 800bfa0:	e043      	b.n	800c02a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	68b9      	ldr	r1, [r7, #8]
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f000 fabd 	bl	800c528 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	69da      	ldr	r2, [r3, #28]
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f042 0208 	orr.w	r2, r2, #8
 800bfbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	69da      	ldr	r2, [r3, #28]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	f022 0204 	bic.w	r2, r2, #4
 800bfcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	69d9      	ldr	r1, [r3, #28]
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	691a      	ldr	r2, [r3, #16]
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	430a      	orrs	r2, r1
 800bfde:	61da      	str	r2, [r3, #28]
      break;
 800bfe0:	e023      	b.n	800c02a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	68b9      	ldr	r1, [r7, #8]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f000 fb11 	bl	800c610 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	69da      	ldr	r2, [r3, #28]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bffc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	69da      	ldr	r2, [r3, #28]
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c00c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	69d9      	ldr	r1, [r3, #28]
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	691b      	ldr	r3, [r3, #16]
 800c018:	021a      	lsls	r2, r3, #8
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	430a      	orrs	r2, r1
 800c020:	61da      	str	r2, [r3, #28]
      break;
 800c022:	e002      	b.n	800c02a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c024:	2301      	movs	r3, #1
 800c026:	75fb      	strb	r3, [r7, #23]
      break;
 800c028:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	2200      	movs	r2, #0
 800c02e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c032:	7dfb      	ldrb	r3, [r7, #23]
}
 800c034:	4618      	mov	r0, r3
 800c036:	3718      	adds	r7, #24
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c046:	2300      	movs	r3, #0
 800c048:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c050:	2b01      	cmp	r3, #1
 800c052:	d101      	bne.n	800c058 <HAL_TIM_ConfigClockSource+0x1c>
 800c054:	2302      	movs	r3, #2
 800c056:	e0b4      	b.n	800c1c2 <HAL_TIM_ConfigClockSource+0x186>
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2201      	movs	r2, #1
 800c05c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2202      	movs	r2, #2
 800c064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c07e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	68ba      	ldr	r2, [r7, #8]
 800c086:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c090:	d03e      	beq.n	800c110 <HAL_TIM_ConfigClockSource+0xd4>
 800c092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c096:	f200 8087 	bhi.w	800c1a8 <HAL_TIM_ConfigClockSource+0x16c>
 800c09a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c09e:	f000 8086 	beq.w	800c1ae <HAL_TIM_ConfigClockSource+0x172>
 800c0a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0a6:	d87f      	bhi.n	800c1a8 <HAL_TIM_ConfigClockSource+0x16c>
 800c0a8:	2b70      	cmp	r3, #112	; 0x70
 800c0aa:	d01a      	beq.n	800c0e2 <HAL_TIM_ConfigClockSource+0xa6>
 800c0ac:	2b70      	cmp	r3, #112	; 0x70
 800c0ae:	d87b      	bhi.n	800c1a8 <HAL_TIM_ConfigClockSource+0x16c>
 800c0b0:	2b60      	cmp	r3, #96	; 0x60
 800c0b2:	d050      	beq.n	800c156 <HAL_TIM_ConfigClockSource+0x11a>
 800c0b4:	2b60      	cmp	r3, #96	; 0x60
 800c0b6:	d877      	bhi.n	800c1a8 <HAL_TIM_ConfigClockSource+0x16c>
 800c0b8:	2b50      	cmp	r3, #80	; 0x50
 800c0ba:	d03c      	beq.n	800c136 <HAL_TIM_ConfigClockSource+0xfa>
 800c0bc:	2b50      	cmp	r3, #80	; 0x50
 800c0be:	d873      	bhi.n	800c1a8 <HAL_TIM_ConfigClockSource+0x16c>
 800c0c0:	2b40      	cmp	r3, #64	; 0x40
 800c0c2:	d058      	beq.n	800c176 <HAL_TIM_ConfigClockSource+0x13a>
 800c0c4:	2b40      	cmp	r3, #64	; 0x40
 800c0c6:	d86f      	bhi.n	800c1a8 <HAL_TIM_ConfigClockSource+0x16c>
 800c0c8:	2b30      	cmp	r3, #48	; 0x30
 800c0ca:	d064      	beq.n	800c196 <HAL_TIM_ConfigClockSource+0x15a>
 800c0cc:	2b30      	cmp	r3, #48	; 0x30
 800c0ce:	d86b      	bhi.n	800c1a8 <HAL_TIM_ConfigClockSource+0x16c>
 800c0d0:	2b20      	cmp	r3, #32
 800c0d2:	d060      	beq.n	800c196 <HAL_TIM_ConfigClockSource+0x15a>
 800c0d4:	2b20      	cmp	r3, #32
 800c0d6:	d867      	bhi.n	800c1a8 <HAL_TIM_ConfigClockSource+0x16c>
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d05c      	beq.n	800c196 <HAL_TIM_ConfigClockSource+0x15a>
 800c0dc:	2b10      	cmp	r3, #16
 800c0de:	d05a      	beq.n	800c196 <HAL_TIM_ConfigClockSource+0x15a>
 800c0e0:	e062      	b.n	800c1a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6818      	ldr	r0, [r3, #0]
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	6899      	ldr	r1, [r3, #8]
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	685a      	ldr	r2, [r3, #4]
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	68db      	ldr	r3, [r3, #12]
 800c0f2:	f000 fb5d 	bl	800c7b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	689b      	ldr	r3, [r3, #8]
 800c0fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c104:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	68ba      	ldr	r2, [r7, #8]
 800c10c:	609a      	str	r2, [r3, #8]
      break;
 800c10e:	e04f      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6818      	ldr	r0, [r3, #0]
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	6899      	ldr	r1, [r3, #8]
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	685a      	ldr	r2, [r3, #4]
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	68db      	ldr	r3, [r3, #12]
 800c120:	f000 fb46 	bl	800c7b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	689a      	ldr	r2, [r3, #8]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c132:	609a      	str	r2, [r3, #8]
      break;
 800c134:	e03c      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6818      	ldr	r0, [r3, #0]
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	6859      	ldr	r1, [r3, #4]
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	68db      	ldr	r3, [r3, #12]
 800c142:	461a      	mov	r2, r3
 800c144:	f000 faba 	bl	800c6bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2150      	movs	r1, #80	; 0x50
 800c14e:	4618      	mov	r0, r3
 800c150:	f000 fb13 	bl	800c77a <TIM_ITRx_SetConfig>
      break;
 800c154:	e02c      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6818      	ldr	r0, [r3, #0]
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	6859      	ldr	r1, [r3, #4]
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	68db      	ldr	r3, [r3, #12]
 800c162:	461a      	mov	r2, r3
 800c164:	f000 fad9 	bl	800c71a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2160      	movs	r1, #96	; 0x60
 800c16e:	4618      	mov	r0, r3
 800c170:	f000 fb03 	bl	800c77a <TIM_ITRx_SetConfig>
      break;
 800c174:	e01c      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6818      	ldr	r0, [r3, #0]
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	6859      	ldr	r1, [r3, #4]
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	68db      	ldr	r3, [r3, #12]
 800c182:	461a      	mov	r2, r3
 800c184:	f000 fa9a 	bl	800c6bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2140      	movs	r1, #64	; 0x40
 800c18e:	4618      	mov	r0, r3
 800c190:	f000 faf3 	bl	800c77a <TIM_ITRx_SetConfig>
      break;
 800c194:	e00c      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4619      	mov	r1, r3
 800c1a0:	4610      	mov	r0, r2
 800c1a2:	f000 faea 	bl	800c77a <TIM_ITRx_SetConfig>
      break;
 800c1a6:	e003      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	73fb      	strb	r3, [r7, #15]
      break;
 800c1ac:	e000      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c1ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3710      	adds	r7, #16
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}

0800c1ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1ca:	b480      	push	{r7}
 800c1cc:	b083      	sub	sp, #12
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c1d2:	bf00      	nop
 800c1d4:	370c      	adds	r7, #12
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1dc:	4770      	bx	lr

0800c1de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c1de:	b480      	push	{r7}
 800c1e0:	b083      	sub	sp, #12
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c1e6:	bf00      	nop
 800c1e8:	370c      	adds	r7, #12
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f0:	4770      	bx	lr

0800c1f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c1f2:	b480      	push	{r7}
 800c1f4:	b083      	sub	sp, #12
 800c1f6:	af00      	add	r7, sp, #0
 800c1f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c1fa:	bf00      	nop
 800c1fc:	370c      	adds	r7, #12
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr

0800c206 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c206:	b480      	push	{r7}
 800c208:	b083      	sub	sp, #12
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c20e:	bf00      	nop
 800c210:	370c      	adds	r7, #12
 800c212:	46bd      	mov	sp, r7
 800c214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c218:	4770      	bx	lr
	...

0800c21c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b085      	sub	sp, #20
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4a40      	ldr	r2, [pc, #256]	; (800c330 <TIM_Base_SetConfig+0x114>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d013      	beq.n	800c25c <TIM_Base_SetConfig+0x40>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c23a:	d00f      	beq.n	800c25c <TIM_Base_SetConfig+0x40>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4a3d      	ldr	r2, [pc, #244]	; (800c334 <TIM_Base_SetConfig+0x118>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d00b      	beq.n	800c25c <TIM_Base_SetConfig+0x40>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a3c      	ldr	r2, [pc, #240]	; (800c338 <TIM_Base_SetConfig+0x11c>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d007      	beq.n	800c25c <TIM_Base_SetConfig+0x40>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4a3b      	ldr	r2, [pc, #236]	; (800c33c <TIM_Base_SetConfig+0x120>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d003      	beq.n	800c25c <TIM_Base_SetConfig+0x40>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4a3a      	ldr	r2, [pc, #232]	; (800c340 <TIM_Base_SetConfig+0x124>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d108      	bne.n	800c26e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	4313      	orrs	r3, r2
 800c26c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	4a2f      	ldr	r2, [pc, #188]	; (800c330 <TIM_Base_SetConfig+0x114>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d02b      	beq.n	800c2ce <TIM_Base_SetConfig+0xb2>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c27c:	d027      	beq.n	800c2ce <TIM_Base_SetConfig+0xb2>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	4a2c      	ldr	r2, [pc, #176]	; (800c334 <TIM_Base_SetConfig+0x118>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d023      	beq.n	800c2ce <TIM_Base_SetConfig+0xb2>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	4a2b      	ldr	r2, [pc, #172]	; (800c338 <TIM_Base_SetConfig+0x11c>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d01f      	beq.n	800c2ce <TIM_Base_SetConfig+0xb2>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	4a2a      	ldr	r2, [pc, #168]	; (800c33c <TIM_Base_SetConfig+0x120>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d01b      	beq.n	800c2ce <TIM_Base_SetConfig+0xb2>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4a29      	ldr	r2, [pc, #164]	; (800c340 <TIM_Base_SetConfig+0x124>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d017      	beq.n	800c2ce <TIM_Base_SetConfig+0xb2>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	4a28      	ldr	r2, [pc, #160]	; (800c344 <TIM_Base_SetConfig+0x128>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d013      	beq.n	800c2ce <TIM_Base_SetConfig+0xb2>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4a27      	ldr	r2, [pc, #156]	; (800c348 <TIM_Base_SetConfig+0x12c>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d00f      	beq.n	800c2ce <TIM_Base_SetConfig+0xb2>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4a26      	ldr	r2, [pc, #152]	; (800c34c <TIM_Base_SetConfig+0x130>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d00b      	beq.n	800c2ce <TIM_Base_SetConfig+0xb2>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	4a25      	ldr	r2, [pc, #148]	; (800c350 <TIM_Base_SetConfig+0x134>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d007      	beq.n	800c2ce <TIM_Base_SetConfig+0xb2>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4a24      	ldr	r2, [pc, #144]	; (800c354 <TIM_Base_SetConfig+0x138>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d003      	beq.n	800c2ce <TIM_Base_SetConfig+0xb2>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	4a23      	ldr	r2, [pc, #140]	; (800c358 <TIM_Base_SetConfig+0x13c>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d108      	bne.n	800c2e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	68fa      	ldr	r2, [r7, #12]
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	695b      	ldr	r3, [r3, #20]
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	68fa      	ldr	r2, [r7, #12]
 800c2f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	689a      	ldr	r2, [r3, #8]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4a0a      	ldr	r2, [pc, #40]	; (800c330 <TIM_Base_SetConfig+0x114>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d003      	beq.n	800c314 <TIM_Base_SetConfig+0xf8>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	4a0c      	ldr	r2, [pc, #48]	; (800c340 <TIM_Base_SetConfig+0x124>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d103      	bne.n	800c31c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	691a      	ldr	r2, [r3, #16]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2201      	movs	r2, #1
 800c320:	615a      	str	r2, [r3, #20]
}
 800c322:	bf00      	nop
 800c324:	3714      	adds	r7, #20
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop
 800c330:	40010000 	.word	0x40010000
 800c334:	40000400 	.word	0x40000400
 800c338:	40000800 	.word	0x40000800
 800c33c:	40000c00 	.word	0x40000c00
 800c340:	40010400 	.word	0x40010400
 800c344:	40014000 	.word	0x40014000
 800c348:	40014400 	.word	0x40014400
 800c34c:	40014800 	.word	0x40014800
 800c350:	40001800 	.word	0x40001800
 800c354:	40001c00 	.word	0x40001c00
 800c358:	40002000 	.word	0x40002000

0800c35c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b087      	sub	sp, #28
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6a1b      	ldr	r3, [r3, #32]
 800c36a:	f023 0201 	bic.w	r2, r3, #1
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6a1b      	ldr	r3, [r3, #32]
 800c376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	685b      	ldr	r3, [r3, #4]
 800c37c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	699b      	ldr	r3, [r3, #24]
 800c382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c38a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f023 0303 	bic.w	r3, r3, #3
 800c392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	68fa      	ldr	r2, [r7, #12]
 800c39a:	4313      	orrs	r3, r2
 800c39c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c39e:	697b      	ldr	r3, [r7, #20]
 800c3a0:	f023 0302 	bic.w	r3, r3, #2
 800c3a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	697a      	ldr	r2, [r7, #20]
 800c3ac:	4313      	orrs	r3, r2
 800c3ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	4a20      	ldr	r2, [pc, #128]	; (800c434 <TIM_OC1_SetConfig+0xd8>)
 800c3b4:	4293      	cmp	r3, r2
 800c3b6:	d003      	beq.n	800c3c0 <TIM_OC1_SetConfig+0x64>
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	4a1f      	ldr	r2, [pc, #124]	; (800c438 <TIM_OC1_SetConfig+0xdc>)
 800c3bc:	4293      	cmp	r3, r2
 800c3be:	d10c      	bne.n	800c3da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	f023 0308 	bic.w	r3, r3, #8
 800c3c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	697a      	ldr	r2, [r7, #20]
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	f023 0304 	bic.w	r3, r3, #4
 800c3d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	4a15      	ldr	r2, [pc, #84]	; (800c434 <TIM_OC1_SetConfig+0xd8>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	d003      	beq.n	800c3ea <TIM_OC1_SetConfig+0x8e>
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	4a14      	ldr	r2, [pc, #80]	; (800c438 <TIM_OC1_SetConfig+0xdc>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d111      	bne.n	800c40e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c3f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	695b      	ldr	r3, [r3, #20]
 800c3fe:	693a      	ldr	r2, [r7, #16]
 800c400:	4313      	orrs	r3, r2
 800c402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	699b      	ldr	r3, [r3, #24]
 800c408:	693a      	ldr	r2, [r7, #16]
 800c40a:	4313      	orrs	r3, r2
 800c40c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	693a      	ldr	r2, [r7, #16]
 800c412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	68fa      	ldr	r2, [r7, #12]
 800c418:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c41a:	683b      	ldr	r3, [r7, #0]
 800c41c:	685a      	ldr	r2, [r3, #4]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	697a      	ldr	r2, [r7, #20]
 800c426:	621a      	str	r2, [r3, #32]
}
 800c428:	bf00      	nop
 800c42a:	371c      	adds	r7, #28
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr
 800c434:	40010000 	.word	0x40010000
 800c438:	40010400 	.word	0x40010400

0800c43c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b087      	sub	sp, #28
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6a1b      	ldr	r3, [r3, #32]
 800c44a:	f023 0210 	bic.w	r2, r3, #16
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	6a1b      	ldr	r3, [r3, #32]
 800c456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	699b      	ldr	r3, [r3, #24]
 800c462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c46a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c474:	683b      	ldr	r3, [r7, #0]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	021b      	lsls	r3, r3, #8
 800c47a:	68fa      	ldr	r2, [r7, #12]
 800c47c:	4313      	orrs	r3, r2
 800c47e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c480:	697b      	ldr	r3, [r7, #20]
 800c482:	f023 0320 	bic.w	r3, r3, #32
 800c486:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c488:	683b      	ldr	r3, [r7, #0]
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	011b      	lsls	r3, r3, #4
 800c48e:	697a      	ldr	r2, [r7, #20]
 800c490:	4313      	orrs	r3, r2
 800c492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	4a22      	ldr	r2, [pc, #136]	; (800c520 <TIM_OC2_SetConfig+0xe4>)
 800c498:	4293      	cmp	r3, r2
 800c49a:	d003      	beq.n	800c4a4 <TIM_OC2_SetConfig+0x68>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	4a21      	ldr	r2, [pc, #132]	; (800c524 <TIM_OC2_SetConfig+0xe8>)
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	d10d      	bne.n	800c4c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c4aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	68db      	ldr	r3, [r3, #12]
 800c4b0:	011b      	lsls	r3, r3, #4
 800c4b2:	697a      	ldr	r2, [r7, #20]
 800c4b4:	4313      	orrs	r3, r2
 800c4b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	4a17      	ldr	r2, [pc, #92]	; (800c520 <TIM_OC2_SetConfig+0xe4>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d003      	beq.n	800c4d0 <TIM_OC2_SetConfig+0x94>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	4a16      	ldr	r2, [pc, #88]	; (800c524 <TIM_OC2_SetConfig+0xe8>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d113      	bne.n	800c4f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c4d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c4de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	695b      	ldr	r3, [r3, #20]
 800c4e4:	009b      	lsls	r3, r3, #2
 800c4e6:	693a      	ldr	r2, [r7, #16]
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	699b      	ldr	r3, [r3, #24]
 800c4f0:	009b      	lsls	r3, r3, #2
 800c4f2:	693a      	ldr	r2, [r7, #16]
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	693a      	ldr	r2, [r7, #16]
 800c4fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	685a      	ldr	r2, [r3, #4]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	697a      	ldr	r2, [r7, #20]
 800c510:	621a      	str	r2, [r3, #32]
}
 800c512:	bf00      	nop
 800c514:	371c      	adds	r7, #28
 800c516:	46bd      	mov	sp, r7
 800c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51c:	4770      	bx	lr
 800c51e:	bf00      	nop
 800c520:	40010000 	.word	0x40010000
 800c524:	40010400 	.word	0x40010400

0800c528 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c528:	b480      	push	{r7}
 800c52a:	b087      	sub	sp, #28
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
 800c530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6a1b      	ldr	r3, [r3, #32]
 800c536:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6a1b      	ldr	r3, [r3, #32]
 800c542:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	685b      	ldr	r3, [r3, #4]
 800c548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	69db      	ldr	r3, [r3, #28]
 800c54e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	f023 0303 	bic.w	r3, r3, #3
 800c55e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	68fa      	ldr	r2, [r7, #12]
 800c566:	4313      	orrs	r3, r2
 800c568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	689b      	ldr	r3, [r3, #8]
 800c576:	021b      	lsls	r3, r3, #8
 800c578:	697a      	ldr	r2, [r7, #20]
 800c57a:	4313      	orrs	r3, r2
 800c57c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	4a21      	ldr	r2, [pc, #132]	; (800c608 <TIM_OC3_SetConfig+0xe0>)
 800c582:	4293      	cmp	r3, r2
 800c584:	d003      	beq.n	800c58e <TIM_OC3_SetConfig+0x66>
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	4a20      	ldr	r2, [pc, #128]	; (800c60c <TIM_OC3_SetConfig+0xe4>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d10d      	bne.n	800c5aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c594:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	021b      	lsls	r3, r3, #8
 800c59c:	697a      	ldr	r2, [r7, #20]
 800c59e:	4313      	orrs	r3, r2
 800c5a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c5a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	4a16      	ldr	r2, [pc, #88]	; (800c608 <TIM_OC3_SetConfig+0xe0>)
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d003      	beq.n	800c5ba <TIM_OC3_SetConfig+0x92>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	4a15      	ldr	r2, [pc, #84]	; (800c60c <TIM_OC3_SetConfig+0xe4>)
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d113      	bne.n	800c5e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c5c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	695b      	ldr	r3, [r3, #20]
 800c5ce:	011b      	lsls	r3, r3, #4
 800c5d0:	693a      	ldr	r2, [r7, #16]
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	699b      	ldr	r3, [r3, #24]
 800c5da:	011b      	lsls	r3, r3, #4
 800c5dc:	693a      	ldr	r2, [r7, #16]
 800c5de:	4313      	orrs	r3, r2
 800c5e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	693a      	ldr	r2, [r7, #16]
 800c5e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	68fa      	ldr	r2, [r7, #12]
 800c5ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	685a      	ldr	r2, [r3, #4]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	697a      	ldr	r2, [r7, #20]
 800c5fa:	621a      	str	r2, [r3, #32]
}
 800c5fc:	bf00      	nop
 800c5fe:	371c      	adds	r7, #28
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr
 800c608:	40010000 	.word	0x40010000
 800c60c:	40010400 	.word	0x40010400

0800c610 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c610:	b480      	push	{r7}
 800c612:	b087      	sub	sp, #28
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
 800c618:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a1b      	ldr	r3, [r3, #32]
 800c61e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6a1b      	ldr	r3, [r3, #32]
 800c62a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	685b      	ldr	r3, [r3, #4]
 800c630:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	69db      	ldr	r3, [r3, #28]
 800c636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c63e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c646:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	021b      	lsls	r3, r3, #8
 800c64e:	68fa      	ldr	r2, [r7, #12]
 800c650:	4313      	orrs	r3, r2
 800c652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c65a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	031b      	lsls	r3, r3, #12
 800c662:	693a      	ldr	r2, [r7, #16]
 800c664:	4313      	orrs	r3, r2
 800c666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	4a12      	ldr	r2, [pc, #72]	; (800c6b4 <TIM_OC4_SetConfig+0xa4>)
 800c66c:	4293      	cmp	r3, r2
 800c66e:	d003      	beq.n	800c678 <TIM_OC4_SetConfig+0x68>
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	4a11      	ldr	r2, [pc, #68]	; (800c6b8 <TIM_OC4_SetConfig+0xa8>)
 800c674:	4293      	cmp	r3, r2
 800c676:	d109      	bne.n	800c68c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c67e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	695b      	ldr	r3, [r3, #20]
 800c684:	019b      	lsls	r3, r3, #6
 800c686:	697a      	ldr	r2, [r7, #20]
 800c688:	4313      	orrs	r3, r2
 800c68a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	697a      	ldr	r2, [r7, #20]
 800c690:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	68fa      	ldr	r2, [r7, #12]
 800c696:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	685a      	ldr	r2, [r3, #4]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	693a      	ldr	r2, [r7, #16]
 800c6a4:	621a      	str	r2, [r3, #32]
}
 800c6a6:	bf00      	nop
 800c6a8:	371c      	adds	r7, #28
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b0:	4770      	bx	lr
 800c6b2:	bf00      	nop
 800c6b4:	40010000 	.word	0x40010000
 800c6b8:	40010400 	.word	0x40010400

0800c6bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b087      	sub	sp, #28
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	60f8      	str	r0, [r7, #12]
 800c6c4:	60b9      	str	r1, [r7, #8]
 800c6c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	6a1b      	ldr	r3, [r3, #32]
 800c6cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	6a1b      	ldr	r3, [r3, #32]
 800c6d2:	f023 0201 	bic.w	r2, r3, #1
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	699b      	ldr	r3, [r3, #24]
 800c6de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c6e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	011b      	lsls	r3, r3, #4
 800c6ec:	693a      	ldr	r2, [r7, #16]
 800c6ee:	4313      	orrs	r3, r2
 800c6f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c6f2:	697b      	ldr	r3, [r7, #20]
 800c6f4:	f023 030a 	bic.w	r3, r3, #10
 800c6f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c6fa:	697a      	ldr	r2, [r7, #20]
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	4313      	orrs	r3, r2
 800c700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	693a      	ldr	r2, [r7, #16]
 800c706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	697a      	ldr	r2, [r7, #20]
 800c70c:	621a      	str	r2, [r3, #32]
}
 800c70e:	bf00      	nop
 800c710:	371c      	adds	r7, #28
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr

0800c71a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c71a:	b480      	push	{r7}
 800c71c:	b087      	sub	sp, #28
 800c71e:	af00      	add	r7, sp, #0
 800c720:	60f8      	str	r0, [r7, #12]
 800c722:	60b9      	str	r1, [r7, #8]
 800c724:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	6a1b      	ldr	r3, [r3, #32]
 800c72a:	f023 0210 	bic.w	r2, r3, #16
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	699b      	ldr	r3, [r3, #24]
 800c736:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	6a1b      	ldr	r3, [r3, #32]
 800c73c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c744:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	031b      	lsls	r3, r3, #12
 800c74a:	697a      	ldr	r2, [r7, #20]
 800c74c:	4313      	orrs	r3, r2
 800c74e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c756:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	011b      	lsls	r3, r3, #4
 800c75c:	693a      	ldr	r2, [r7, #16]
 800c75e:	4313      	orrs	r3, r2
 800c760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	697a      	ldr	r2, [r7, #20]
 800c766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	693a      	ldr	r2, [r7, #16]
 800c76c:	621a      	str	r2, [r3, #32]
}
 800c76e:	bf00      	nop
 800c770:	371c      	adds	r7, #28
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr

0800c77a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c77a:	b480      	push	{r7}
 800c77c:	b085      	sub	sp, #20
 800c77e:	af00      	add	r7, sp, #0
 800c780:	6078      	str	r0, [r7, #4]
 800c782:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	689b      	ldr	r3, [r3, #8]
 800c788:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c790:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c792:	683a      	ldr	r2, [r7, #0]
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	4313      	orrs	r3, r2
 800c798:	f043 0307 	orr.w	r3, r3, #7
 800c79c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	609a      	str	r2, [r3, #8]
}
 800c7a4:	bf00      	nop
 800c7a6:	3714      	adds	r7, #20
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ae:	4770      	bx	lr

0800c7b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b087      	sub	sp, #28
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	60f8      	str	r0, [r7, #12]
 800c7b8:	60b9      	str	r1, [r7, #8]
 800c7ba:	607a      	str	r2, [r7, #4]
 800c7bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	689b      	ldr	r3, [r3, #8]
 800c7c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c7ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	021a      	lsls	r2, r3, #8
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	431a      	orrs	r2, r3
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	697a      	ldr	r2, [r7, #20]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	697a      	ldr	r2, [r7, #20]
 800c7e2:	609a      	str	r2, [r3, #8]
}
 800c7e4:	bf00      	nop
 800c7e6:	371c      	adds	r7, #28
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr

0800c7f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b085      	sub	sp, #20
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c800:	2b01      	cmp	r3, #1
 800c802:	d101      	bne.n	800c808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c804:	2302      	movs	r3, #2
 800c806:	e05a      	b.n	800c8be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2201      	movs	r2, #1
 800c80c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2202      	movs	r2, #2
 800c814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c82e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	68fa      	ldr	r2, [r7, #12]
 800c836:	4313      	orrs	r3, r2
 800c838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	68fa      	ldr	r2, [r7, #12]
 800c840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	4a21      	ldr	r2, [pc, #132]	; (800c8cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d022      	beq.n	800c892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c854:	d01d      	beq.n	800c892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4a1d      	ldr	r2, [pc, #116]	; (800c8d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c85c:	4293      	cmp	r3, r2
 800c85e:	d018      	beq.n	800c892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a1b      	ldr	r2, [pc, #108]	; (800c8d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c866:	4293      	cmp	r3, r2
 800c868:	d013      	beq.n	800c892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	4a1a      	ldr	r2, [pc, #104]	; (800c8d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c870:	4293      	cmp	r3, r2
 800c872:	d00e      	beq.n	800c892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	4a18      	ldr	r2, [pc, #96]	; (800c8dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d009      	beq.n	800c892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	4a17      	ldr	r2, [pc, #92]	; (800c8e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d004      	beq.n	800c892 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	4a15      	ldr	r2, [pc, #84]	; (800c8e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c88e:	4293      	cmp	r3, r2
 800c890:	d10c      	bne.n	800c8ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c898:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	68ba      	ldr	r2, [r7, #8]
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	68ba      	ldr	r2, [r7, #8]
 800c8aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c8bc:	2300      	movs	r3, #0
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3714      	adds	r7, #20
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr
 800c8ca:	bf00      	nop
 800c8cc:	40010000 	.word	0x40010000
 800c8d0:	40000400 	.word	0x40000400
 800c8d4:	40000800 	.word	0x40000800
 800c8d8:	40000c00 	.word	0x40000c00
 800c8dc:	40010400 	.word	0x40010400
 800c8e0:	40014000 	.word	0x40014000
 800c8e4:	40001800 	.word	0x40001800

0800c8e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b083      	sub	sp, #12
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c8f0:	bf00      	nop
 800c8f2:	370c      	adds	r7, #12
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fa:	4770      	bx	lr

0800c8fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b083      	sub	sp, #12
 800c900:	af00      	add	r7, sp, #0
 800c902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c904:	bf00      	nop
 800c906:	370c      	adds	r7, #12
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr

0800c910 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d101      	bne.n	800c922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c91e:	2301      	movs	r3, #1
 800c920:	e03f      	b.n	800c9a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c928:	b2db      	uxtb	r3, r3
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d106      	bne.n	800c93c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2200      	movs	r2, #0
 800c932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f7fb ff12 	bl	8008760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2224      	movs	r2, #36	; 0x24
 800c940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	68da      	ldr	r2, [r3, #12]
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c952:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 f829 	bl	800c9ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	691a      	ldr	r2, [r3, #16]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c968:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	695a      	ldr	r2, [r3, #20]
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c978:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	68da      	ldr	r2, [r3, #12]
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c988:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2200      	movs	r2, #0
 800c98e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2220      	movs	r2, #32
 800c994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2220      	movs	r2, #32
 800c99c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c9a0:	2300      	movs	r3, #0
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3708      	adds	r7, #8
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
	...

0800c9ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c9ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c9b0:	b0c0      	sub	sp, #256	; 0x100
 800c9b2:	af00      	add	r7, sp, #0
 800c9b4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c9b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	691b      	ldr	r3, [r3, #16]
 800c9c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c9c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9c8:	68d9      	ldr	r1, [r3, #12]
 800c9ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9ce:	681a      	ldr	r2, [r3, #0]
 800c9d0:	ea40 0301 	orr.w	r3, r0, r1
 800c9d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c9d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9da:	689a      	ldr	r2, [r3, #8]
 800c9dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9e0:	691b      	ldr	r3, [r3, #16]
 800c9e2:	431a      	orrs	r2, r3
 800c9e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9e8:	695b      	ldr	r3, [r3, #20]
 800c9ea:	431a      	orrs	r2, r3
 800c9ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9f0:	69db      	ldr	r3, [r3, #28]
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c9f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	68db      	ldr	r3, [r3, #12]
 800ca00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800ca04:	f021 010c 	bic.w	r1, r1, #12
 800ca08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca0c:	681a      	ldr	r2, [r3, #0]
 800ca0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ca12:	430b      	orrs	r3, r1
 800ca14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ca16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	695b      	ldr	r3, [r3, #20]
 800ca1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800ca22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca26:	6999      	ldr	r1, [r3, #24]
 800ca28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca2c:	681a      	ldr	r2, [r3, #0]
 800ca2e:	ea40 0301 	orr.w	r3, r0, r1
 800ca32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ca34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca38:	681a      	ldr	r2, [r3, #0]
 800ca3a:	4b8f      	ldr	r3, [pc, #572]	; (800cc78 <UART_SetConfig+0x2cc>)
 800ca3c:	429a      	cmp	r2, r3
 800ca3e:	d005      	beq.n	800ca4c <UART_SetConfig+0xa0>
 800ca40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca44:	681a      	ldr	r2, [r3, #0]
 800ca46:	4b8d      	ldr	r3, [pc, #564]	; (800cc7c <UART_SetConfig+0x2d0>)
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d104      	bne.n	800ca56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ca4c:	f7fe fe74 	bl	800b738 <HAL_RCC_GetPCLK2Freq>
 800ca50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800ca54:	e003      	b.n	800ca5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ca56:	f7fe fe5b 	bl	800b710 <HAL_RCC_GetPCLK1Freq>
 800ca5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ca5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca62:	69db      	ldr	r3, [r3, #28]
 800ca64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca68:	f040 810c 	bne.w	800cc84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800ca6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca70:	2200      	movs	r2, #0
 800ca72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ca76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800ca7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800ca7e:	4622      	mov	r2, r4
 800ca80:	462b      	mov	r3, r5
 800ca82:	1891      	adds	r1, r2, r2
 800ca84:	65b9      	str	r1, [r7, #88]	; 0x58
 800ca86:	415b      	adcs	r3, r3
 800ca88:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ca8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ca8e:	4621      	mov	r1, r4
 800ca90:	eb12 0801 	adds.w	r8, r2, r1
 800ca94:	4629      	mov	r1, r5
 800ca96:	eb43 0901 	adc.w	r9, r3, r1
 800ca9a:	f04f 0200 	mov.w	r2, #0
 800ca9e:	f04f 0300 	mov.w	r3, #0
 800caa2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800caa6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800caaa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800caae:	4690      	mov	r8, r2
 800cab0:	4699      	mov	r9, r3
 800cab2:	4623      	mov	r3, r4
 800cab4:	eb18 0303 	adds.w	r3, r8, r3
 800cab8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800cabc:	462b      	mov	r3, r5
 800cabe:	eb49 0303 	adc.w	r3, r9, r3
 800cac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800cac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800caca:	685b      	ldr	r3, [r3, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800cad2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800cad6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cada:	460b      	mov	r3, r1
 800cadc:	18db      	adds	r3, r3, r3
 800cade:	653b      	str	r3, [r7, #80]	; 0x50
 800cae0:	4613      	mov	r3, r2
 800cae2:	eb42 0303 	adc.w	r3, r2, r3
 800cae6:	657b      	str	r3, [r7, #84]	; 0x54
 800cae8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800caec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800caf0:	f7f4 f872 	bl	8000bd8 <__aeabi_uldivmod>
 800caf4:	4602      	mov	r2, r0
 800caf6:	460b      	mov	r3, r1
 800caf8:	4b61      	ldr	r3, [pc, #388]	; (800cc80 <UART_SetConfig+0x2d4>)
 800cafa:	fba3 2302 	umull	r2, r3, r3, r2
 800cafe:	095b      	lsrs	r3, r3, #5
 800cb00:	011c      	lsls	r4, r3, #4
 800cb02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cb06:	2200      	movs	r2, #0
 800cb08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cb0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cb10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cb14:	4642      	mov	r2, r8
 800cb16:	464b      	mov	r3, r9
 800cb18:	1891      	adds	r1, r2, r2
 800cb1a:	64b9      	str	r1, [r7, #72]	; 0x48
 800cb1c:	415b      	adcs	r3, r3
 800cb1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cb20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cb24:	4641      	mov	r1, r8
 800cb26:	eb12 0a01 	adds.w	sl, r2, r1
 800cb2a:	4649      	mov	r1, r9
 800cb2c:	eb43 0b01 	adc.w	fp, r3, r1
 800cb30:	f04f 0200 	mov.w	r2, #0
 800cb34:	f04f 0300 	mov.w	r3, #0
 800cb38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cb3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cb40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cb44:	4692      	mov	sl, r2
 800cb46:	469b      	mov	fp, r3
 800cb48:	4643      	mov	r3, r8
 800cb4a:	eb1a 0303 	adds.w	r3, sl, r3
 800cb4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cb52:	464b      	mov	r3, r9
 800cb54:	eb4b 0303 	adc.w	r3, fp, r3
 800cb58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cb5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	2200      	movs	r2, #0
 800cb64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cb68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cb6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cb70:	460b      	mov	r3, r1
 800cb72:	18db      	adds	r3, r3, r3
 800cb74:	643b      	str	r3, [r7, #64]	; 0x40
 800cb76:	4613      	mov	r3, r2
 800cb78:	eb42 0303 	adc.w	r3, r2, r3
 800cb7c:	647b      	str	r3, [r7, #68]	; 0x44
 800cb7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cb82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cb86:	f7f4 f827 	bl	8000bd8 <__aeabi_uldivmod>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	4611      	mov	r1, r2
 800cb90:	4b3b      	ldr	r3, [pc, #236]	; (800cc80 <UART_SetConfig+0x2d4>)
 800cb92:	fba3 2301 	umull	r2, r3, r3, r1
 800cb96:	095b      	lsrs	r3, r3, #5
 800cb98:	2264      	movs	r2, #100	; 0x64
 800cb9a:	fb02 f303 	mul.w	r3, r2, r3
 800cb9e:	1acb      	subs	r3, r1, r3
 800cba0:	00db      	lsls	r3, r3, #3
 800cba2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cba6:	4b36      	ldr	r3, [pc, #216]	; (800cc80 <UART_SetConfig+0x2d4>)
 800cba8:	fba3 2302 	umull	r2, r3, r3, r2
 800cbac:	095b      	lsrs	r3, r3, #5
 800cbae:	005b      	lsls	r3, r3, #1
 800cbb0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cbb4:	441c      	add	r4, r3
 800cbb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cbba:	2200      	movs	r2, #0
 800cbbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cbc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cbc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cbc8:	4642      	mov	r2, r8
 800cbca:	464b      	mov	r3, r9
 800cbcc:	1891      	adds	r1, r2, r2
 800cbce:	63b9      	str	r1, [r7, #56]	; 0x38
 800cbd0:	415b      	adcs	r3, r3
 800cbd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cbd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cbd8:	4641      	mov	r1, r8
 800cbda:	1851      	adds	r1, r2, r1
 800cbdc:	6339      	str	r1, [r7, #48]	; 0x30
 800cbde:	4649      	mov	r1, r9
 800cbe0:	414b      	adcs	r3, r1
 800cbe2:	637b      	str	r3, [r7, #52]	; 0x34
 800cbe4:	f04f 0200 	mov.w	r2, #0
 800cbe8:	f04f 0300 	mov.w	r3, #0
 800cbec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cbf0:	4659      	mov	r1, fp
 800cbf2:	00cb      	lsls	r3, r1, #3
 800cbf4:	4651      	mov	r1, sl
 800cbf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cbfa:	4651      	mov	r1, sl
 800cbfc:	00ca      	lsls	r2, r1, #3
 800cbfe:	4610      	mov	r0, r2
 800cc00:	4619      	mov	r1, r3
 800cc02:	4603      	mov	r3, r0
 800cc04:	4642      	mov	r2, r8
 800cc06:	189b      	adds	r3, r3, r2
 800cc08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cc0c:	464b      	mov	r3, r9
 800cc0e:	460a      	mov	r2, r1
 800cc10:	eb42 0303 	adc.w	r3, r2, r3
 800cc14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cc18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc1c:	685b      	ldr	r3, [r3, #4]
 800cc1e:	2200      	movs	r2, #0
 800cc20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800cc24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800cc28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800cc2c:	460b      	mov	r3, r1
 800cc2e:	18db      	adds	r3, r3, r3
 800cc30:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc32:	4613      	mov	r3, r2
 800cc34:	eb42 0303 	adc.w	r3, r2, r3
 800cc38:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cc3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800cc42:	f7f3 ffc9 	bl	8000bd8 <__aeabi_uldivmod>
 800cc46:	4602      	mov	r2, r0
 800cc48:	460b      	mov	r3, r1
 800cc4a:	4b0d      	ldr	r3, [pc, #52]	; (800cc80 <UART_SetConfig+0x2d4>)
 800cc4c:	fba3 1302 	umull	r1, r3, r3, r2
 800cc50:	095b      	lsrs	r3, r3, #5
 800cc52:	2164      	movs	r1, #100	; 0x64
 800cc54:	fb01 f303 	mul.w	r3, r1, r3
 800cc58:	1ad3      	subs	r3, r2, r3
 800cc5a:	00db      	lsls	r3, r3, #3
 800cc5c:	3332      	adds	r3, #50	; 0x32
 800cc5e:	4a08      	ldr	r2, [pc, #32]	; (800cc80 <UART_SetConfig+0x2d4>)
 800cc60:	fba2 2303 	umull	r2, r3, r2, r3
 800cc64:	095b      	lsrs	r3, r3, #5
 800cc66:	f003 0207 	and.w	r2, r3, #7
 800cc6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	4422      	add	r2, r4
 800cc72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800cc74:	e105      	b.n	800ce82 <UART_SetConfig+0x4d6>
 800cc76:	bf00      	nop
 800cc78:	40011000 	.word	0x40011000
 800cc7c:	40011400 	.word	0x40011400
 800cc80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cc84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc88:	2200      	movs	r2, #0
 800cc8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800cc8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800cc92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800cc96:	4642      	mov	r2, r8
 800cc98:	464b      	mov	r3, r9
 800cc9a:	1891      	adds	r1, r2, r2
 800cc9c:	6239      	str	r1, [r7, #32]
 800cc9e:	415b      	adcs	r3, r3
 800cca0:	627b      	str	r3, [r7, #36]	; 0x24
 800cca2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cca6:	4641      	mov	r1, r8
 800cca8:	1854      	adds	r4, r2, r1
 800ccaa:	4649      	mov	r1, r9
 800ccac:	eb43 0501 	adc.w	r5, r3, r1
 800ccb0:	f04f 0200 	mov.w	r2, #0
 800ccb4:	f04f 0300 	mov.w	r3, #0
 800ccb8:	00eb      	lsls	r3, r5, #3
 800ccba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ccbe:	00e2      	lsls	r2, r4, #3
 800ccc0:	4614      	mov	r4, r2
 800ccc2:	461d      	mov	r5, r3
 800ccc4:	4643      	mov	r3, r8
 800ccc6:	18e3      	adds	r3, r4, r3
 800ccc8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cccc:	464b      	mov	r3, r9
 800ccce:	eb45 0303 	adc.w	r3, r5, r3
 800ccd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ccd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cce2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800cce6:	f04f 0200 	mov.w	r2, #0
 800ccea:	f04f 0300 	mov.w	r3, #0
 800ccee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ccf2:	4629      	mov	r1, r5
 800ccf4:	008b      	lsls	r3, r1, #2
 800ccf6:	4621      	mov	r1, r4
 800ccf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ccfc:	4621      	mov	r1, r4
 800ccfe:	008a      	lsls	r2, r1, #2
 800cd00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cd04:	f7f3 ff68 	bl	8000bd8 <__aeabi_uldivmod>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	4b60      	ldr	r3, [pc, #384]	; (800ce90 <UART_SetConfig+0x4e4>)
 800cd0e:	fba3 2302 	umull	r2, r3, r3, r2
 800cd12:	095b      	lsrs	r3, r3, #5
 800cd14:	011c      	lsls	r4, r3, #4
 800cd16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cd20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cd24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cd28:	4642      	mov	r2, r8
 800cd2a:	464b      	mov	r3, r9
 800cd2c:	1891      	adds	r1, r2, r2
 800cd2e:	61b9      	str	r1, [r7, #24]
 800cd30:	415b      	adcs	r3, r3
 800cd32:	61fb      	str	r3, [r7, #28]
 800cd34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cd38:	4641      	mov	r1, r8
 800cd3a:	1851      	adds	r1, r2, r1
 800cd3c:	6139      	str	r1, [r7, #16]
 800cd3e:	4649      	mov	r1, r9
 800cd40:	414b      	adcs	r3, r1
 800cd42:	617b      	str	r3, [r7, #20]
 800cd44:	f04f 0200 	mov.w	r2, #0
 800cd48:	f04f 0300 	mov.w	r3, #0
 800cd4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cd50:	4659      	mov	r1, fp
 800cd52:	00cb      	lsls	r3, r1, #3
 800cd54:	4651      	mov	r1, sl
 800cd56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cd5a:	4651      	mov	r1, sl
 800cd5c:	00ca      	lsls	r2, r1, #3
 800cd5e:	4610      	mov	r0, r2
 800cd60:	4619      	mov	r1, r3
 800cd62:	4603      	mov	r3, r0
 800cd64:	4642      	mov	r2, r8
 800cd66:	189b      	adds	r3, r3, r2
 800cd68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cd6c:	464b      	mov	r3, r9
 800cd6e:	460a      	mov	r2, r1
 800cd70:	eb42 0303 	adc.w	r3, r2, r3
 800cd74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cd78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd7c:	685b      	ldr	r3, [r3, #4]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	67bb      	str	r3, [r7, #120]	; 0x78
 800cd82:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cd84:	f04f 0200 	mov.w	r2, #0
 800cd88:	f04f 0300 	mov.w	r3, #0
 800cd8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cd90:	4649      	mov	r1, r9
 800cd92:	008b      	lsls	r3, r1, #2
 800cd94:	4641      	mov	r1, r8
 800cd96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cd9a:	4641      	mov	r1, r8
 800cd9c:	008a      	lsls	r2, r1, #2
 800cd9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cda2:	f7f3 ff19 	bl	8000bd8 <__aeabi_uldivmod>
 800cda6:	4602      	mov	r2, r0
 800cda8:	460b      	mov	r3, r1
 800cdaa:	4b39      	ldr	r3, [pc, #228]	; (800ce90 <UART_SetConfig+0x4e4>)
 800cdac:	fba3 1302 	umull	r1, r3, r3, r2
 800cdb0:	095b      	lsrs	r3, r3, #5
 800cdb2:	2164      	movs	r1, #100	; 0x64
 800cdb4:	fb01 f303 	mul.w	r3, r1, r3
 800cdb8:	1ad3      	subs	r3, r2, r3
 800cdba:	011b      	lsls	r3, r3, #4
 800cdbc:	3332      	adds	r3, #50	; 0x32
 800cdbe:	4a34      	ldr	r2, [pc, #208]	; (800ce90 <UART_SetConfig+0x4e4>)
 800cdc0:	fba2 2303 	umull	r2, r3, r2, r3
 800cdc4:	095b      	lsrs	r3, r3, #5
 800cdc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cdca:	441c      	add	r4, r3
 800cdcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	673b      	str	r3, [r7, #112]	; 0x70
 800cdd4:	677a      	str	r2, [r7, #116]	; 0x74
 800cdd6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cdda:	4642      	mov	r2, r8
 800cddc:	464b      	mov	r3, r9
 800cdde:	1891      	adds	r1, r2, r2
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	415b      	adcs	r3, r3
 800cde4:	60fb      	str	r3, [r7, #12]
 800cde6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cdea:	4641      	mov	r1, r8
 800cdec:	1851      	adds	r1, r2, r1
 800cdee:	6039      	str	r1, [r7, #0]
 800cdf0:	4649      	mov	r1, r9
 800cdf2:	414b      	adcs	r3, r1
 800cdf4:	607b      	str	r3, [r7, #4]
 800cdf6:	f04f 0200 	mov.w	r2, #0
 800cdfa:	f04f 0300 	mov.w	r3, #0
 800cdfe:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800ce02:	4659      	mov	r1, fp
 800ce04:	00cb      	lsls	r3, r1, #3
 800ce06:	4651      	mov	r1, sl
 800ce08:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ce0c:	4651      	mov	r1, sl
 800ce0e:	00ca      	lsls	r2, r1, #3
 800ce10:	4610      	mov	r0, r2
 800ce12:	4619      	mov	r1, r3
 800ce14:	4603      	mov	r3, r0
 800ce16:	4642      	mov	r2, r8
 800ce18:	189b      	adds	r3, r3, r2
 800ce1a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ce1c:	464b      	mov	r3, r9
 800ce1e:	460a      	mov	r2, r1
 800ce20:	eb42 0303 	adc.w	r3, r2, r3
 800ce24:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ce26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce2a:	685b      	ldr	r3, [r3, #4]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	663b      	str	r3, [r7, #96]	; 0x60
 800ce30:	667a      	str	r2, [r7, #100]	; 0x64
 800ce32:	f04f 0200 	mov.w	r2, #0
 800ce36:	f04f 0300 	mov.w	r3, #0
 800ce3a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ce3e:	4649      	mov	r1, r9
 800ce40:	008b      	lsls	r3, r1, #2
 800ce42:	4641      	mov	r1, r8
 800ce44:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ce48:	4641      	mov	r1, r8
 800ce4a:	008a      	lsls	r2, r1, #2
 800ce4c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ce50:	f7f3 fec2 	bl	8000bd8 <__aeabi_uldivmod>
 800ce54:	4602      	mov	r2, r0
 800ce56:	460b      	mov	r3, r1
 800ce58:	4b0d      	ldr	r3, [pc, #52]	; (800ce90 <UART_SetConfig+0x4e4>)
 800ce5a:	fba3 1302 	umull	r1, r3, r3, r2
 800ce5e:	095b      	lsrs	r3, r3, #5
 800ce60:	2164      	movs	r1, #100	; 0x64
 800ce62:	fb01 f303 	mul.w	r3, r1, r3
 800ce66:	1ad3      	subs	r3, r2, r3
 800ce68:	011b      	lsls	r3, r3, #4
 800ce6a:	3332      	adds	r3, #50	; 0x32
 800ce6c:	4a08      	ldr	r2, [pc, #32]	; (800ce90 <UART_SetConfig+0x4e4>)
 800ce6e:	fba2 2303 	umull	r2, r3, r2, r3
 800ce72:	095b      	lsrs	r3, r3, #5
 800ce74:	f003 020f 	and.w	r2, r3, #15
 800ce78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	4422      	add	r2, r4
 800ce80:	609a      	str	r2, [r3, #8]
}
 800ce82:	bf00      	nop
 800ce84:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ce8e:	bf00      	nop
 800ce90:	51eb851f 	.word	0x51eb851f

0800ce94 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b084      	sub	sp, #16
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 800ce9e:	2300      	movs	r3, #0
 800cea0:	60fb      	str	r3, [r7, #12]
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800cea8:	68fa      	ldr	r2, [r7, #12]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d20b      	bcs.n	800cec6 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	011b      	lsls	r3, r3, #4
 800ceb2:	687a      	ldr	r2, [r7, #4]
 800ceb4:	4413      	add	r3, r2
 800ceb6:	6839      	ldr	r1, [r7, #0]
 800ceb8:	4618      	mov	r0, r3
 800ceba:	f000 f817 	bl	800ceec <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	3301      	adds	r3, #1
 800cec2:	60fb      	str	r3, [r7, #12]
 800cec4:	e7ed      	b.n	800cea2 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 800cec6:	bf00      	nop
 800cec8:	3710      	adds	r7, #16
 800ceca:	46bd      	mov	sp, r7
 800cecc:	bd80      	pop	{r7, pc}

0800cece <HAL_ADC_ConvCpltCallback>:
 */

#include "AdcConvCpltCallbackHandler.hpp"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800cece:	b580      	push	{r7, lr}
 800ced0:	b082      	sub	sp, #8
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
	AdcConvCpltCallbackHandler::getInstance().notify(hadc);
 800ced6:	f7f9 f9ab 	bl	8006230 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 800ceda:	4603      	mov	r3, r0
 800cedc:	6879      	ldr	r1, [r7, #4]
 800cede:	4618      	mov	r0, r3
 800cee0:	f7ff ffd8 	bl	800ce94 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 800cee4:	bf00      	nop
 800cee6:	3708      	adds	r7, #8
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>:
    function<_Res(_ArgTypes...)>::
 800ceec:	b5b0      	push	{r4, r5, r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
      if (_M_empty())
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7f4 fa58 	bl	80013ae <_ZNKSt14_Function_base8_M_emptyEv>
 800cefe:	4603      	mov	r3, r0
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d001      	beq.n	800cf08 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 800cf04:	f006 f9b5 	bl	8013272 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	68dc      	ldr	r4, [r3, #12]
 800cf0c:	687d      	ldr	r5, [r7, #4]
 800cf0e:	463b      	mov	r3, r7
 800cf10:	4618      	mov	r0, r3
 800cf12:	f7f9 fc8c 	bl	800682e <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800cf16:	4603      	mov	r3, r0
 800cf18:	4619      	mov	r1, r3
 800cf1a:	4628      	mov	r0, r5
 800cf1c:	47a0      	blx	r4
 800cf1e:	bf00      	nop
    }
 800cf20:	3708      	adds	r7, #8
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bdb0      	pop	{r4, r5, r7, pc}

0800cf26 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvHalfCpltCallbackHandler() = default;
 800cf26:	b5b0      	push	{r4, r5, r7, lr}
 800cf28:	b082      	sub	sp, #8
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	240f      	movs	r4, #15
 800cf32:	461d      	mov	r5, r3
 800cf34:	2c00      	cmp	r4, #0
 800cf36:	db05      	blt.n	800cf44 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0x1e>
 800cf38:	4628      	mov	r0, r5
 800cf3a:	f7f9 fb5d 	bl	80065f8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 800cf3e:	3510      	adds	r5, #16
 800cf40:	3c01      	subs	r4, #1
 800cf42:	e7f7      	b.n	800cf34 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0xe>
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2200      	movs	r2, #0
 800cf48:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3708      	adds	r7, #8
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bdb0      	pop	{r4, r5, r7, pc}

0800cf56 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>:
class AdcConvHalfCpltCallbackHandler {
 800cf56:	b590      	push	{r4, r7, lr}
 800cf58:	b083      	sub	sp, #12
 800cf5a:	af00      	add	r7, sp, #0
 800cf5c:	6078      	str	r0, [r7, #4]
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d00a      	beq.n	800cf7a <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	429c      	cmp	r4, r3
 800cf6e:	d004      	beq.n	800cf7a <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 800cf70:	3c10      	subs	r4, #16
 800cf72:	4620      	mov	r0, r4
 800cf74:	f7f9 f918 	bl	80061a8 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 800cf78:	e7f7      	b.n	800cf6a <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x14>
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	4618      	mov	r0, r3
 800cf7e:	370c      	adds	r7, #12
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd90      	pop	{r4, r7, pc}

0800cf84 <__tcf_0>:
		static AdcConvHalfCpltCallbackHandler instance;
 800cf84:	b580      	push	{r7, lr}
 800cf86:	af00      	add	r7, sp, #0
 800cf88:	4801      	ldr	r0, [pc, #4]	; (800cf90 <__tcf_0+0xc>)
 800cf8a:	f7ff ffe4 	bl	800cf56 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>
 800cf8e:	bd80      	pop	{r7, pc}
 800cf90:	20001134 	.word	0x20001134

0800cf94 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>:
	static AdcConvHalfCpltCallbackHandler& getInstance() {
 800cf94:	b580      	push	{r7, lr}
 800cf96:	af00      	add	r7, sp, #0
		static AdcConvHalfCpltCallbackHandler instance;
 800cf98:	4b12      	ldr	r3, [pc, #72]	; (800cfe4 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	f3bf 8f5b 	dmb	ish
 800cfa0:	b2db      	uxtb	r3, r3
 800cfa2:	f003 0301 	and.w	r3, r3, #1
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	bf0c      	ite	eq
 800cfaa:	2301      	moveq	r3, #1
 800cfac:	2300      	movne	r3, #0
 800cfae:	b2db      	uxtb	r3, r3
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d013      	beq.n	800cfdc <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 800cfb4:	480b      	ldr	r0, [pc, #44]	; (800cfe4 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800cfb6:	f006 f94b 	bl	8013250 <__cxa_guard_acquire>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	bf14      	ite	ne
 800cfc0:	2301      	movne	r3, #1
 800cfc2:	2300      	moveq	r3, #0
 800cfc4:	b2db      	uxtb	r3, r3
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d008      	beq.n	800cfdc <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 800cfca:	4807      	ldr	r0, [pc, #28]	; (800cfe8 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
 800cfcc:	f7ff ffab 	bl	800cf26 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>
 800cfd0:	4806      	ldr	r0, [pc, #24]	; (800cfec <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x58>)
 800cfd2:	f006 fb9c 	bl	801370e <atexit>
 800cfd6:	4803      	ldr	r0, [pc, #12]	; (800cfe4 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800cfd8:	f006 f946 	bl	8013268 <__cxa_guard_release>
		return instance;
 800cfdc:	4b02      	ldr	r3, [pc, #8]	; (800cfe8 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
	}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	bd80      	pop	{r7, pc}
 800cfe2:	bf00      	nop
 800cfe4:	20001238 	.word	0x20001238
 800cfe8:	20001134 	.word	0x20001134
 800cfec:	0800cf85 	.word	0x0800cf85

0800cff0 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b084      	sub	sp, #16
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
 800cff8:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 800cffa:	2300      	movs	r3, #0
 800cffc:	60fb      	str	r3, [r7, #12]
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800d004:	68fa      	ldr	r2, [r7, #12]
 800d006:	429a      	cmp	r2, r3
 800d008:	d20b      	bcs.n	800d022 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	011b      	lsls	r3, r3, #4
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	4413      	add	r3, r2
 800d012:	6839      	ldr	r1, [r7, #0]
 800d014:	4618      	mov	r0, r3
 800d016:	f7ff ff69 	bl	800ceec <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	3301      	adds	r3, #1
 800d01e:	60fb      	str	r3, [r7, #12]
 800d020:	e7ed      	b.n	800cffe <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 800d022:	bf00      	nop
 800d024:	3710      	adds	r7, #16
 800d026:	46bd      	mov	sp, r7
 800d028:	bd80      	pop	{r7, pc}

0800d02a <HAL_ADC_ConvHalfCpltCallback>:


#include "AdcConvHalfCpltCallbackHandler.hpp"

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800d02a:	b580      	push	{r7, lr}
 800d02c:	b082      	sub	sp, #8
 800d02e:	af00      	add	r7, sp, #0
 800d030:	6078      	str	r0, [r7, #4]
	AdcConvHalfCpltCallbackHandler::getInstance().notify(hadc);
 800d032:	f7ff ffaf 	bl	800cf94 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>
 800d036:	4603      	mov	r3, r0
 800d038:	6879      	ldr	r1, [r7, #4]
 800d03a:	4618      	mov	r0, r3
 800d03c:	f7ff ffd8 	bl	800cff0 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 800d040:	bf00      	nop
 800d042:	3708      	adds	r7, #8
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <_ZNSt8functionIFvtEED1Ev>:
    class function<_Res(_ArgTypes...)>
 800d048:	b580      	push	{r7, lr}
 800d04a:	b082      	sub	sp, #8
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	4618      	mov	r0, r3
 800d054:	f7f4 f998 	bl	8001388 <_ZNSt14_Function_baseD1Ev>
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	4618      	mov	r0, r3
 800d05c:	3708      	adds	r7, #8
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}

0800d062 <_ZN23GPIOExtiCallbackHandlerC1Ev>:
			m_listeners[i](pin);
		}
	}

private:
	GPIOExtiCallbackHandler() = default;
 800d062:	b5b0      	push	{r4, r5, r7, lr}
 800d064:	b082      	sub	sp, #8
 800d066:	af00      	add	r7, sp, #0
 800d068:	6078      	str	r0, [r7, #4]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	240f      	movs	r4, #15
 800d06e:	461d      	mov	r5, r3
 800d070:	2c00      	cmp	r4, #0
 800d072:	db05      	blt.n	800d080 <_ZN23GPIOExtiCallbackHandlerC1Ev+0x1e>
 800d074:	4628      	mov	r0, r5
 800d076:	f000 f889 	bl	800d18c <_ZNSt8functionIFvtEEC1Ev>
 800d07a:	3510      	adds	r5, #16
 800d07c:	3c01      	subs	r4, #1
 800d07e:	e7f7      	b.n	800d070 <_ZN23GPIOExtiCallbackHandlerC1Ev+0xe>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2200      	movs	r2, #0
 800d084:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	4618      	mov	r0, r3
 800d08c:	3708      	adds	r7, #8
 800d08e:	46bd      	mov	sp, r7
 800d090:	bdb0      	pop	{r4, r5, r7, pc}

0800d092 <_ZN23GPIOExtiCallbackHandlerD1Ev>:
class GPIOExtiCallbackHandler {
 800d092:	b590      	push	{r4, r7, lr}
 800d094:	b083      	sub	sp, #12
 800d096:	af00      	add	r7, sp, #0
 800d098:	6078      	str	r0, [r7, #4]
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d00a      	beq.n	800d0b6 <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	429c      	cmp	r4, r3
 800d0aa:	d004      	beq.n	800d0b6 <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 800d0ac:	3c10      	subs	r4, #16
 800d0ae:	4620      	mov	r0, r4
 800d0b0:	f7ff ffca 	bl	800d048 <_ZNSt8functionIFvtEED1Ev>
 800d0b4:	e7f7      	b.n	800d0a6 <_ZN23GPIOExtiCallbackHandlerD1Ev+0x14>
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	370c      	adds	r7, #12
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd90      	pop	{r4, r7, pc}

0800d0c0 <__tcf_0>:
		static GPIOExtiCallbackHandler instance;
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	4801      	ldr	r0, [pc, #4]	; (800d0cc <__tcf_0+0xc>)
 800d0c6:	f7ff ffe4 	bl	800d092 <_ZN23GPIOExtiCallbackHandlerD1Ev>
 800d0ca:	bd80      	pop	{r7, pc}
 800d0cc:	2000123c 	.word	0x2000123c

0800d0d0 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>:
	static GPIOExtiCallbackHandler& getInstance() {
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	af00      	add	r7, sp, #0
		static GPIOExtiCallbackHandler instance;
 800d0d4:	4b12      	ldr	r3, [pc, #72]	; (800d120 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	f3bf 8f5b 	dmb	ish
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	f003 0301 	and.w	r3, r3, #1
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	bf0c      	ite	eq
 800d0e6:	2301      	moveq	r3, #1
 800d0e8:	2300      	movne	r3, #0
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d013      	beq.n	800d118 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 800d0f0:	480b      	ldr	r0, [pc, #44]	; (800d120 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 800d0f2:	f006 f8ad 	bl	8013250 <__cxa_guard_acquire>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	bf14      	ite	ne
 800d0fc:	2301      	movne	r3, #1
 800d0fe:	2300      	moveq	r3, #0
 800d100:	b2db      	uxtb	r3, r3
 800d102:	2b00      	cmp	r3, #0
 800d104:	d008      	beq.n	800d118 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 800d106:	4807      	ldr	r0, [pc, #28]	; (800d124 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
 800d108:	f7ff ffab 	bl	800d062 <_ZN23GPIOExtiCallbackHandlerC1Ev>
 800d10c:	4806      	ldr	r0, [pc, #24]	; (800d128 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x58>)
 800d10e:	f006 fafe 	bl	801370e <atexit>
 800d112:	4803      	ldr	r0, [pc, #12]	; (800d120 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 800d114:	f006 f8a8 	bl	8013268 <__cxa_guard_release>
		return instance;
 800d118:	4b02      	ldr	r3, [pc, #8]	; (800d124 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
	}
 800d11a:	4618      	mov	r0, r3
 800d11c:	bd80      	pop	{r7, pc}
 800d11e:	bf00      	nop
 800d120:	20001340 	.word	0x20001340
 800d124:	2000123c 	.word	0x2000123c
 800d128:	0800d0c1 	.word	0x0800d0c1

0800d12c <_ZN23GPIOExtiCallbackHandler6notifyEt>:
	void notify(uint16_t pin) {
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b084      	sub	sp, #16
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	460b      	mov	r3, r1
 800d136:	807b      	strh	r3, [r7, #2]
		for (unsigned int i = 0; i < m_size; i++) {
 800d138:	2300      	movs	r3, #0
 800d13a:	60fb      	str	r3, [r7, #12]
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800d142:	68fa      	ldr	r2, [r7, #12]
 800d144:	429a      	cmp	r2, r3
 800d146:	d20c      	bcs.n	800d162 <_ZN23GPIOExtiCallbackHandler6notifyEt+0x36>
			m_listeners[i](pin);
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	011b      	lsls	r3, r3, #4
 800d14c:	687a      	ldr	r2, [r7, #4]
 800d14e:	4413      	add	r3, r2
 800d150:	887a      	ldrh	r2, [r7, #2]
 800d152:	4611      	mov	r1, r2
 800d154:	4618      	mov	r0, r3
 800d156:	f000 f826 	bl	800d1a6 <_ZNKSt8functionIFvtEEclEt>
		for (unsigned int i = 0; i < m_size; i++) {
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	3301      	adds	r3, #1
 800d15e:	60fb      	str	r3, [r7, #12]
 800d160:	e7ec      	b.n	800d13c <_ZN23GPIOExtiCallbackHandler6notifyEt+0x10>
	}
 800d162:	bf00      	nop
 800d164:	3710      	adds	r7, #16
 800d166:	46bd      	mov	sp, r7
 800d168:	bd80      	pop	{r7, pc}

0800d16a <HAL_GPIO_EXTI_Callback>:
#include "GPIOExtiCallbackHandler.hpp"




void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 800d16a:	b580      	push	{r7, lr}
 800d16c:	b082      	sub	sp, #8
 800d16e:	af00      	add	r7, sp, #0
 800d170:	4603      	mov	r3, r0
 800d172:	80fb      	strh	r3, [r7, #6]
	GPIOExtiCallbackHandler::getInstance().notify(pin);
 800d174:	f7ff ffac 	bl	800d0d0 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>
 800d178:	4602      	mov	r2, r0
 800d17a:	88fb      	ldrh	r3, [r7, #6]
 800d17c:	4619      	mov	r1, r3
 800d17e:	4610      	mov	r0, r2
 800d180:	f7ff ffd4 	bl	800d12c <_ZN23GPIOExtiCallbackHandler6notifyEt>
}
 800d184:	bf00      	nop
 800d186:	3708      	adds	r7, #8
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <_ZNSt8functionIFvtEEC1Ev>:
      function() noexcept
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	4618      	mov	r0, r3
 800d198:	f7f4 f8e8 	bl	800136c <_ZNSt14_Function_baseC1Ev>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3708      	adds	r7, #8
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}

0800d1a6 <_ZNKSt8functionIFvtEEclEt>:
    function<_Res(_ArgTypes...)>::
 800d1a6:	b5b0      	push	{r4, r5, r7, lr}
 800d1a8:	b082      	sub	sp, #8
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
 800d1ae:	460b      	mov	r3, r1
 800d1b0:	807b      	strh	r3, [r7, #2]
      if (_M_empty())
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	f7f4 f8fa 	bl	80013ae <_ZNKSt14_Function_base8_M_emptyEv>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d001      	beq.n	800d1c4 <_ZNKSt8functionIFvtEEclEt+0x1e>
	__throw_bad_function_call();
 800d1c0:	f006 f857 	bl	8013272 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	68dc      	ldr	r4, [r3, #12]
 800d1c8:	687d      	ldr	r5, [r7, #4]
 800d1ca:	1cbb      	adds	r3, r7, #2
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f000 f808 	bl	800d1e2 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	4628      	mov	r0, r5
 800d1d8:	47a0      	blx	r4
 800d1da:	bf00      	nop
    }
 800d1dc:	3708      	adds	r7, #8
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bdb0      	pop	{r4, r5, r7, pc}

0800d1e2 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800d1e2:	b480      	push	{r7}
 800d1e4:	b083      	sub	sp, #12
 800d1e6:	af00      	add	r7, sp, #0
 800d1e8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	370c      	adds	r7, #12
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f6:	4770      	bx	lr

0800d1f8 <_ZL9_out_nullcPvjj>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800d1f8:	b480      	push	{r7}
 800d1fa:	b085      	sub	sp, #20
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	60b9      	str	r1, [r7, #8]
 800d200:	607a      	str	r2, [r7, #4]
 800d202:	603b      	str	r3, [r7, #0]
 800d204:	4603      	mov	r3, r0
 800d206:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800d208:	bf00      	nop
 800d20a:	3714      	adds	r7, #20
 800d20c:	46bd      	mov	sp, r7
 800d20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d212:	4770      	bx	lr

0800d214 <_ZL9_out_charcPvjj>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800d214:	b580      	push	{r7, lr}
 800d216:	b084      	sub	sp, #16
 800d218:	af00      	add	r7, sp, #0
 800d21a:	60b9      	str	r1, [r7, #8]
 800d21c:	607a      	str	r2, [r7, #4]
 800d21e:	603b      	str	r3, [r7, #0]
 800d220:	4603      	mov	r3, r0
 800d222:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800d224:	7bfb      	ldrb	r3, [r7, #15]
 800d226:	2b00      	cmp	r3, #0
 800d228:	d003      	beq.n	800d232 <_ZL9_out_charcPvjj+0x1e>
    _putchar(character);
 800d22a:	7bfb      	ldrb	r3, [r7, #15]
 800d22c:	4618      	mov	r0, r3
 800d22e:	f001 fc6e 	bl	800eb0e <_putchar>
  }
}
 800d232:	bf00      	nop
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}

0800d23a <_ZL10_strnlen_sPKcj>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800d23a:	b480      	push	{r7}
 800d23c:	b085      	sub	sp, #20
 800d23e:	af00      	add	r7, sp, #0
 800d240:	6078      	str	r0, [r7, #4]
 800d242:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	60fb      	str	r3, [r7, #12]
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	781b      	ldrb	r3, [r3, #0]
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d006      	beq.n	800d25e <_ZL10_strnlen_sPKcj+0x24>
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	1e5a      	subs	r2, r3, #1
 800d254:	603a      	str	r2, [r7, #0]
 800d256:	2b00      	cmp	r3, #0
 800d258:	d001      	beq.n	800d25e <_ZL10_strnlen_sPKcj+0x24>
 800d25a:	2301      	movs	r3, #1
 800d25c:	e000      	b.n	800d260 <_ZL10_strnlen_sPKcj+0x26>
 800d25e:	2300      	movs	r3, #0
 800d260:	2b00      	cmp	r3, #0
 800d262:	d003      	beq.n	800d26c <_ZL10_strnlen_sPKcj+0x32>
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	3301      	adds	r3, #1
 800d268:	60fb      	str	r3, [r7, #12]
 800d26a:	e7ed      	b.n	800d248 <_ZL10_strnlen_sPKcj+0xe>
  return (unsigned int)(s - str);
 800d26c:	68fa      	ldr	r2, [r7, #12]
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	1ad3      	subs	r3, r2, r3
}
 800d272:	4618      	mov	r0, r3
 800d274:	3714      	adds	r7, #20
 800d276:	46bd      	mov	sp, r7
 800d278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27c:	4770      	bx	lr

0800d27e <_ZL9_is_digitc>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800d27e:	b480      	push	{r7}
 800d280:	b083      	sub	sp, #12
 800d282:	af00      	add	r7, sp, #0
 800d284:	4603      	mov	r3, r0
 800d286:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800d288:	79fb      	ldrb	r3, [r7, #7]
 800d28a:	2b2f      	cmp	r3, #47	; 0x2f
 800d28c:	d904      	bls.n	800d298 <_ZL9_is_digitc+0x1a>
 800d28e:	79fb      	ldrb	r3, [r7, #7]
 800d290:	2b39      	cmp	r3, #57	; 0x39
 800d292:	d801      	bhi.n	800d298 <_ZL9_is_digitc+0x1a>
 800d294:	2301      	movs	r3, #1
 800d296:	e000      	b.n	800d29a <_ZL9_is_digitc+0x1c>
 800d298:	2300      	movs	r3, #0
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	370c      	adds	r7, #12
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a4:	4770      	bx	lr

0800d2a6 <_ZL5_atoiPPKc>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800d2a6:	b580      	push	{r7, lr}
 800d2a8:	b084      	sub	sp, #16
 800d2aa:	af00      	add	r7, sp, #0
 800d2ac:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f7ff ffe0 	bl	800d27e <_ZL9_is_digitc>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d00f      	beq.n	800d2e4 <_ZL5_atoiPPKc+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800d2c4:	68fa      	ldr	r2, [r7, #12]
 800d2c6:	4613      	mov	r3, r2
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	4413      	add	r3, r2
 800d2cc:	005b      	lsls	r3, r3, #1
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	1c59      	adds	r1, r3, #1
 800d2d6:	687a      	ldr	r2, [r7, #4]
 800d2d8:	6011      	str	r1, [r2, #0]
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	4403      	add	r3, r0
 800d2de:	3b30      	subs	r3, #48	; 0x30
 800d2e0:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800d2e2:	e7e6      	b.n	800d2b2 <_ZL5_atoiPPKc+0xc>
  }
  return i;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3710      	adds	r7, #16
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}

0800d2ee <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800d2ee:	b590      	push	{r4, r7, lr}
 800d2f0:	b087      	sub	sp, #28
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	60f8      	str	r0, [r7, #12]
 800d2f6:	60b9      	str	r1, [r7, #8]
 800d2f8:	607a      	str	r2, [r7, #4]
 800d2fa:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800d300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d302:	f003 0302 	and.w	r3, r3, #2
 800d306:	2b00      	cmp	r3, #0
 800d308:	d116      	bne.n	800d338 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
 800d30a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d30c:	f003 0301 	and.w	r3, r3, #1
 800d310:	2b00      	cmp	r3, #0
 800d312:	d111      	bne.n	800d338 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
    for (size_t i = len; i < width; i++) {
 800d314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d316:	617b      	str	r3, [r7, #20]
 800d318:	697a      	ldr	r2, [r7, #20]
 800d31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d20b      	bcs.n	800d338 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
      out(' ', buffer, idx++, maxlen);
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	1c53      	adds	r3, r2, #1
 800d324:	607b      	str	r3, [r7, #4]
 800d326:	68fc      	ldr	r4, [r7, #12]
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	68b9      	ldr	r1, [r7, #8]
 800d32c:	2020      	movs	r0, #32
 800d32e:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800d330:	697b      	ldr	r3, [r7, #20]
 800d332:	3301      	adds	r3, #1
 800d334:	617b      	str	r3, [r7, #20]
 800d336:	e7ef      	b.n	800d318 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x2a>
    }
  }

  // reverse string
  while (len) {
 800d338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d00e      	beq.n	800d35c <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x6e>
    out(buf[--len], buffer, idx++, maxlen);
 800d33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d340:	3b01      	subs	r3, #1
 800d342:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d348:	4413      	add	r3, r2
 800d34a:	7818      	ldrb	r0, [r3, #0]
 800d34c:	687a      	ldr	r2, [r7, #4]
 800d34e:	1c53      	adds	r3, r2, #1
 800d350:	607b      	str	r3, [r7, #4]
 800d352:	68fc      	ldr	r4, [r7, #12]
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	68b9      	ldr	r1, [r7, #8]
 800d358:	47a0      	blx	r4
  while (len) {
 800d35a:	e7ed      	b.n	800d338 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800d35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d35e:	f003 0302 	and.w	r3, r3, #2
 800d362:	2b00      	cmp	r3, #0
 800d364:	d00e      	beq.n	800d384 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
    while (idx - start_idx < width) {
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	1ad3      	subs	r3, r2, r3
 800d36c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d36e:	429a      	cmp	r2, r3
 800d370:	d908      	bls.n	800d384 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
      out(' ', buffer, idx++, maxlen);
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	1c53      	adds	r3, r2, #1
 800d376:	607b      	str	r3, [r7, #4]
 800d378:	68fc      	ldr	r4, [r7, #12]
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	68b9      	ldr	r1, [r7, #8]
 800d37e:	2020      	movs	r0, #32
 800d380:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800d382:	e7f0      	b.n	800d366 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x78>
    }
  }

  return idx;
 800d384:	687b      	ldr	r3, [r7, #4]
}
 800d386:	4618      	mov	r0, r3
 800d388:	371c      	adds	r7, #28
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd90      	pop	{r4, r7, pc}

0800d38e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800d38e:	b580      	push	{r7, lr}
 800d390:	b088      	sub	sp, #32
 800d392:	af04      	add	r7, sp, #16
 800d394:	60f8      	str	r0, [r7, #12]
 800d396:	60b9      	str	r1, [r7, #8]
 800d398:	607a      	str	r2, [r7, #4]
 800d39a:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800d39c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d39e:	f003 0302 	and.w	r3, r3, #2
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d136      	bne.n	800d414 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800d3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d010      	beq.n	800d3ce <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 800d3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ae:	f003 0301 	and.w	r3, r3, #1
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d00b      	beq.n	800d3ce <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 800d3b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d104      	bne.n	800d3c8 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x3a>
 800d3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3c0:	f003 030c 	and.w	r3, r3, #12
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d002      	beq.n	800d3ce <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
      width--;
 800d3c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ca:	3b01      	subs	r3, #1
 800d3cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d3ce:	69fa      	ldr	r2, [r7, #28]
 800d3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d2:	429a      	cmp	r2, r3
 800d3d4:	d20a      	bcs.n	800d3ec <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
 800d3d6:	69fb      	ldr	r3, [r7, #28]
 800d3d8:	2b1f      	cmp	r3, #31
 800d3da:	d807      	bhi.n	800d3ec <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
      buf[len++] = '0';
 800d3dc:	69fb      	ldr	r3, [r7, #28]
 800d3de:	1c5a      	adds	r2, r3, #1
 800d3e0:	61fa      	str	r2, [r7, #28]
 800d3e2:	69ba      	ldr	r2, [r7, #24]
 800d3e4:	4413      	add	r3, r2
 800d3e6:	2230      	movs	r2, #48	; 0x30
 800d3e8:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d3ea:	e7f0      	b.n	800d3ce <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ee:	f003 0301 	and.w	r3, r3, #1
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d00e      	beq.n	800d414 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 800d3f6:	69fa      	ldr	r2, [r7, #28]
 800d3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d20a      	bcs.n	800d414 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 800d3fe:	69fb      	ldr	r3, [r7, #28]
 800d400:	2b1f      	cmp	r3, #31
 800d402:	d807      	bhi.n	800d414 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
      buf[len++] = '0';
 800d404:	69fb      	ldr	r3, [r7, #28]
 800d406:	1c5a      	adds	r2, r3, #1
 800d408:	61fa      	str	r2, [r7, #28]
 800d40a:	69ba      	ldr	r2, [r7, #24]
 800d40c:	4413      	add	r3, r2
 800d40e:	2230      	movs	r2, #48	; 0x30
 800d410:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d412:	e7eb      	b.n	800d3ec <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800d414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d416:	f003 0310 	and.w	r3, r3, #16
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d058      	beq.n	800d4d0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800d41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d424:	2b00      	cmp	r3, #0
 800d426:	d116      	bne.n	800d456 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800d428:	69fb      	ldr	r3, [r7, #28]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d013      	beq.n	800d456 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800d42e:	69fa      	ldr	r2, [r7, #28]
 800d430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d432:	429a      	cmp	r2, r3
 800d434:	d003      	beq.n	800d43e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xb0>
 800d436:	69fa      	ldr	r2, [r7, #28]
 800d438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43a:	429a      	cmp	r2, r3
 800d43c:	d10b      	bne.n	800d456 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
      len--;
 800d43e:	69fb      	ldr	r3, [r7, #28]
 800d440:	3b01      	subs	r3, #1
 800d442:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800d444:	69fb      	ldr	r3, [r7, #28]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d005      	beq.n	800d456 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800d44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d44c:	2b10      	cmp	r3, #16
 800d44e:	d102      	bne.n	800d456 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
        len--;
 800d450:	69fb      	ldr	r3, [r7, #28]
 800d452:	3b01      	subs	r3, #1
 800d454:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d458:	2b10      	cmp	r3, #16
 800d45a:	d10f      	bne.n	800d47c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 800d45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45e:	f003 0320 	and.w	r3, r3, #32
 800d462:	2b00      	cmp	r3, #0
 800d464:	d10a      	bne.n	800d47c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 800d466:	69fb      	ldr	r3, [r7, #28]
 800d468:	2b1f      	cmp	r3, #31
 800d46a:	d807      	bhi.n	800d47c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
      buf[len++] = 'x';
 800d46c:	69fb      	ldr	r3, [r7, #28]
 800d46e:	1c5a      	adds	r2, r3, #1
 800d470:	61fa      	str	r2, [r7, #28]
 800d472:	69ba      	ldr	r2, [r7, #24]
 800d474:	4413      	add	r3, r2
 800d476:	2278      	movs	r2, #120	; 0x78
 800d478:	701a      	strb	r2, [r3, #0]
 800d47a:	e01f      	b.n	800d4bc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47e:	2b10      	cmp	r3, #16
 800d480:	d10f      	bne.n	800d4a2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 800d482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d484:	f003 0320 	and.w	r3, r3, #32
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d00a      	beq.n	800d4a2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	2b1f      	cmp	r3, #31
 800d490:	d807      	bhi.n	800d4a2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
      buf[len++] = 'X';
 800d492:	69fb      	ldr	r3, [r7, #28]
 800d494:	1c5a      	adds	r2, r3, #1
 800d496:	61fa      	str	r2, [r7, #28]
 800d498:	69ba      	ldr	r2, [r7, #24]
 800d49a:	4413      	add	r3, r2
 800d49c:	2258      	movs	r2, #88	; 0x58
 800d49e:	701a      	strb	r2, [r3, #0]
 800d4a0:	e00c      	b.n	800d4bc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a4:	2b02      	cmp	r3, #2
 800d4a6:	d109      	bne.n	800d4bc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	2b1f      	cmp	r3, #31
 800d4ac:	d806      	bhi.n	800d4bc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
      buf[len++] = 'b';
 800d4ae:	69fb      	ldr	r3, [r7, #28]
 800d4b0:	1c5a      	adds	r2, r3, #1
 800d4b2:	61fa      	str	r2, [r7, #28]
 800d4b4:	69ba      	ldr	r2, [r7, #24]
 800d4b6:	4413      	add	r3, r2
 800d4b8:	2262      	movs	r2, #98	; 0x62
 800d4ba:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800d4bc:	69fb      	ldr	r3, [r7, #28]
 800d4be:	2b1f      	cmp	r3, #31
 800d4c0:	d806      	bhi.n	800d4d0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
      buf[len++] = '0';
 800d4c2:	69fb      	ldr	r3, [r7, #28]
 800d4c4:	1c5a      	adds	r2, r3, #1
 800d4c6:	61fa      	str	r2, [r7, #28]
 800d4c8:	69ba      	ldr	r2, [r7, #24]
 800d4ca:	4413      	add	r3, r2
 800d4cc:	2230      	movs	r2, #48	; 0x30
 800d4ce:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800d4d0:	69fb      	ldr	r3, [r7, #28]
 800d4d2:	2b1f      	cmp	r3, #31
 800d4d4:	d824      	bhi.n	800d520 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    if (negative) {
 800d4d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d007      	beq.n	800d4ee <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x160>
      buf[len++] = '-';
 800d4de:	69fb      	ldr	r3, [r7, #28]
 800d4e0:	1c5a      	adds	r2, r3, #1
 800d4e2:	61fa      	str	r2, [r7, #28]
 800d4e4:	69ba      	ldr	r2, [r7, #24]
 800d4e6:	4413      	add	r3, r2
 800d4e8:	222d      	movs	r2, #45	; 0x2d
 800d4ea:	701a      	strb	r2, [r3, #0]
 800d4ec:	e018      	b.n	800d520 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800d4ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f0:	f003 0304 	and.w	r3, r3, #4
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d007      	beq.n	800d508 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	1c5a      	adds	r2, r3, #1
 800d4fc:	61fa      	str	r2, [r7, #28]
 800d4fe:	69ba      	ldr	r2, [r7, #24]
 800d500:	4413      	add	r3, r2
 800d502:	222b      	movs	r2, #43	; 0x2b
 800d504:	701a      	strb	r2, [r3, #0]
 800d506:	e00b      	b.n	800d520 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800d508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50a:	f003 0308 	and.w	r3, r3, #8
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d006      	beq.n	800d520 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
      buf[len++] = ' ';
 800d512:	69fb      	ldr	r3, [r7, #28]
 800d514:	1c5a      	adds	r2, r3, #1
 800d516:	61fa      	str	r2, [r7, #28]
 800d518:	69ba      	ldr	r2, [r7, #24]
 800d51a:	4413      	add	r3, r2
 800d51c:	2220      	movs	r2, #32
 800d51e:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800d520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d522:	9303      	str	r3, [sp, #12]
 800d524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d526:	9302      	str	r3, [sp, #8]
 800d528:	69fb      	ldr	r3, [r7, #28]
 800d52a:	9301      	str	r3, [sp, #4]
 800d52c:	69bb      	ldr	r3, [r7, #24]
 800d52e:	9300      	str	r3, [sp, #0]
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	687a      	ldr	r2, [r7, #4]
 800d534:	68b9      	ldr	r1, [r7, #8]
 800d536:	68f8      	ldr	r0, [r7, #12]
 800d538:	f7ff fed9 	bl	800d2ee <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800d53c:	4603      	mov	r3, r0
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3710      	adds	r7, #16
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}

0800d546 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800d546:	b580      	push	{r7, lr}
 800d548:	b096      	sub	sp, #88	; 0x58
 800d54a:	af08      	add	r7, sp, #32
 800d54c:	60f8      	str	r0, [r7, #12]
 800d54e:	60b9      	str	r1, [r7, #8]
 800d550:	607a      	str	r2, [r7, #4]
 800d552:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800d554:	2300      	movs	r3, #0
 800d556:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800d558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d103      	bne.n	800d566 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x20>
    flags &= ~FLAGS_HASH;
 800d55e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d560:	f023 0310 	bic.w	r3, r3, #16
 800d564:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800d566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d002      	beq.n	800d576 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
 800d570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d572:	2b00      	cmp	r3, #0
 800d574:	d033      	beq.n	800d5de <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
      const char digit = (char)(value % base);
 800d576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d578:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d57a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d57e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d580:	fb01 f202 	mul.w	r2, r1, r2
 800d584:	1a9b      	subs	r3, r3, r2
 800d586:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800d58a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d58e:	2b09      	cmp	r3, #9
 800d590:	d804      	bhi.n	800d59c <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x56>
 800d592:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d596:	3330      	adds	r3, #48	; 0x30
 800d598:	b2da      	uxtb	r2, r3
 800d59a:	e00d      	b.n	800d5b8 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x72>
 800d59c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d59e:	f003 0320 	and.w	r3, r3, #32
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d001      	beq.n	800d5aa <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x64>
 800d5a6:	2241      	movs	r2, #65	; 0x41
 800d5a8:	e000      	b.n	800d5ac <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x66>
 800d5aa:	2261      	movs	r2, #97	; 0x61
 800d5ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d5b0:	4413      	add	r3, r2
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	3b0a      	subs	r3, #10
 800d5b6:	b2da      	uxtb	r2, r3
 800d5b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5ba:	1c59      	adds	r1, r3, #1
 800d5bc:	6379      	str	r1, [r7, #52]	; 0x34
 800d5be:	3338      	adds	r3, #56	; 0x38
 800d5c0:	443b      	add	r3, r7
 800d5c2:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800d5c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d5c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5ce:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800d5d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d003      	beq.n	800d5de <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
 800d5d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5d8:	2b1f      	cmp	r3, #31
 800d5da:	d800      	bhi.n	800d5de <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
 800d5dc:	e7cb      	b.n	800d576 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800d5de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5e0:	9306      	str	r3, [sp, #24]
 800d5e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5e4:	9305      	str	r3, [sp, #20]
 800d5e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5e8:	9304      	str	r3, [sp, #16]
 800d5ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d5ec:	9303      	str	r3, [sp, #12]
 800d5ee:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800d5f2:	9302      	str	r3, [sp, #8]
 800d5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5f6:	9301      	str	r3, [sp, #4]
 800d5f8:	f107 0310 	add.w	r3, r7, #16
 800d5fc:	9300      	str	r3, [sp, #0]
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	68b9      	ldr	r1, [r7, #8]
 800d604:	68f8      	ldr	r0, [r7, #12]
 800d606:	f7ff fec2 	bl	800d38e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 800d60a:	4603      	mov	r3, r0
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3738      	adds	r7, #56	; 0x38
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b096      	sub	sp, #88	; 0x58
 800d618:	af08      	add	r7, sp, #32
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]
 800d620:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800d622:	2300      	movs	r3, #0
 800d624:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800d626:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d62a:	4313      	orrs	r3, r2
 800d62c:	d103      	bne.n	800d636 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x22>
    flags &= ~FLAGS_HASH;
 800d62e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d630:	f023 0310 	bic.w	r3, r3, #16
 800d634:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800d636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	d003      	beq.n	800d648 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
 800d640:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d644:	4313      	orrs	r3, r2
 800d646:	d038      	beq.n	800d6ba <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
      const char digit = (char)(value % base);
 800d648:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d64c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d650:	f7f3 fac2 	bl	8000bd8 <__aeabi_uldivmod>
 800d654:	4613      	mov	r3, r2
 800d656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800d65a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d65e:	2b09      	cmp	r3, #9
 800d660:	d804      	bhi.n	800d66c <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x58>
 800d662:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d666:	3330      	adds	r3, #48	; 0x30
 800d668:	b2da      	uxtb	r2, r3
 800d66a:	e00d      	b.n	800d688 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x74>
 800d66c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d66e:	f003 0320 	and.w	r3, r3, #32
 800d672:	2b00      	cmp	r3, #0
 800d674:	d001      	beq.n	800d67a <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x66>
 800d676:	2241      	movs	r2, #65	; 0x41
 800d678:	e000      	b.n	800d67c <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x68>
 800d67a:	2261      	movs	r2, #97	; 0x61
 800d67c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d680:	4413      	add	r3, r2
 800d682:	b2db      	uxtb	r3, r3
 800d684:	3b0a      	subs	r3, #10
 800d686:	b2da      	uxtb	r2, r3
 800d688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d68a:	1c59      	adds	r1, r3, #1
 800d68c:	6379      	str	r1, [r7, #52]	; 0x34
 800d68e:	3338      	adds	r3, #56	; 0x38
 800d690:	443b      	add	r3, r7
 800d692:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800d696:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d69a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d69e:	f7f3 fa9b 	bl	8000bd8 <__aeabi_uldivmod>
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	460b      	mov	r3, r1
 800d6a6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800d6aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d6ae:	4313      	orrs	r3, r2
 800d6b0:	d003      	beq.n	800d6ba <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
 800d6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6b4:	2b1f      	cmp	r3, #31
 800d6b6:	d800      	bhi.n	800d6ba <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
 800d6b8:	e7c6      	b.n	800d648 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800d6ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d6be:	9206      	str	r2, [sp, #24]
 800d6c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d6c2:	9205      	str	r2, [sp, #20]
 800d6c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d6c6:	9204      	str	r2, [sp, #16]
 800d6c8:	9303      	str	r3, [sp, #12]
 800d6ca:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d6ce:	9302      	str	r3, [sp, #8]
 800d6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6d2:	9301      	str	r3, [sp, #4]
 800d6d4:	f107 0310 	add.w	r3, r7, #16
 800d6d8:	9300      	str	r3, [sp, #0]
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	68b9      	ldr	r1, [r7, #8]
 800d6e0:	68f8      	ldr	r0, [r7, #12]
 800d6e2:	f7ff fe54 	bl	800d38e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 800d6e6:	4603      	mov	r3, r0
}
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	3738      	adds	r7, #56	; 0x38
 800d6ec:	46bd      	mov	sp, r7
 800d6ee:	bd80      	pop	{r7, pc}

0800d6f0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800d6f0:	b590      	push	{r4, r7, lr}
 800d6f2:	b09d      	sub	sp, #116	; 0x74
 800d6f4:	af04      	add	r7, sp, #16
 800d6f6:	6178      	str	r0, [r7, #20]
 800d6f8:	6139      	str	r1, [r7, #16]
 800d6fa:	60fa      	str	r2, [r7, #12]
 800d6fc:	60bb      	str	r3, [r7, #8]
 800d6fe:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800d702:	2300      	movs	r3, #0
 800d704:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800d706:	f04f 0200 	mov.w	r2, #0
 800d70a:	f04f 0300 	mov.w	r3, #0
 800d70e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800d712:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d716:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d71a:	f7f3 f97d 	bl	8000a18 <__aeabi_dcmpeq>
 800d71e:	4603      	mov	r3, r0
 800d720:	2b00      	cmp	r3, #0
 800d722:	d10f      	bne.n	800d744 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800d724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d726:	9303      	str	r3, [sp, #12]
 800d728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d72a:	9302      	str	r3, [sp, #8]
 800d72c:	2303      	movs	r3, #3
 800d72e:	9301      	str	r3, [sp, #4]
 800d730:	4ba7      	ldr	r3, [pc, #668]	; (800d9d0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e0>)
 800d732:	9300      	str	r3, [sp, #0]
 800d734:	68bb      	ldr	r3, [r7, #8]
 800d736:	68fa      	ldr	r2, [r7, #12]
 800d738:	6939      	ldr	r1, [r7, #16]
 800d73a:	6978      	ldr	r0, [r7, #20]
 800d73c:	f7ff fdd7 	bl	800d2ee <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800d740:	4603      	mov	r3, r0
 800d742:	e230      	b.n	800dba6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value < -DBL_MAX)
 800d744:	f04f 32ff 	mov.w	r2, #4294967295
 800d748:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800d74c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d750:	f7f3 f96c 	bl	8000a2c <__aeabi_dcmplt>
 800d754:	4603      	mov	r3, r0
 800d756:	2b00      	cmp	r3, #0
 800d758:	d00f      	beq.n	800d77a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800d75a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d75c:	9303      	str	r3, [sp, #12]
 800d75e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d760:	9302      	str	r3, [sp, #8]
 800d762:	2304      	movs	r3, #4
 800d764:	9301      	str	r3, [sp, #4]
 800d766:	4b9b      	ldr	r3, [pc, #620]	; (800d9d4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e4>)
 800d768:	9300      	str	r3, [sp, #0]
 800d76a:	68bb      	ldr	r3, [r7, #8]
 800d76c:	68fa      	ldr	r2, [r7, #12]
 800d76e:	6939      	ldr	r1, [r7, #16]
 800d770:	6978      	ldr	r0, [r7, #20]
 800d772:	f7ff fdbc 	bl	800d2ee <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800d776:	4603      	mov	r3, r0
 800d778:	e215      	b.n	800dba6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value > DBL_MAX)
 800d77a:	f04f 32ff 	mov.w	r2, #4294967295
 800d77e:	4b96      	ldr	r3, [pc, #600]	; (800d9d8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e8>)
 800d780:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d784:	f7f3 f970 	bl	8000a68 <__aeabi_dcmpgt>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d01d      	beq.n	800d7ca <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800d78e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d790:	f003 0304 	and.w	r3, r3, #4
 800d794:	2b00      	cmp	r3, #0
 800d796:	d001      	beq.n	800d79c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xac>
 800d798:	4b90      	ldr	r3, [pc, #576]	; (800d9dc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ec>)
 800d79a:	e000      	b.n	800d79e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xae>
 800d79c:	4b90      	ldr	r3, [pc, #576]	; (800d9e0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f0>)
 800d79e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d7a0:	f002 0204 	and.w	r2, r2, #4
 800d7a4:	2a00      	cmp	r2, #0
 800d7a6:	d001      	beq.n	800d7ac <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbc>
 800d7a8:	2204      	movs	r2, #4
 800d7aa:	e000      	b.n	800d7ae <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbe>
 800d7ac:	2203      	movs	r2, #3
 800d7ae:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d7b0:	9103      	str	r1, [sp, #12]
 800d7b2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d7b4:	9102      	str	r1, [sp, #8]
 800d7b6:	9201      	str	r2, [sp, #4]
 800d7b8:	9300      	str	r3, [sp, #0]
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	68fa      	ldr	r2, [r7, #12]
 800d7be:	6939      	ldr	r1, [r7, #16]
 800d7c0:	6978      	ldr	r0, [r7, #20]
 800d7c2:	f7ff fd94 	bl	800d2ee <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	e1ed      	b.n	800dba6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800d7ca:	a37d      	add	r3, pc, #500	; (adr r3, 800d9c0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d0>)
 800d7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d7d4:	f7f3 f948 	bl	8000a68 <__aeabi_dcmpgt>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d109      	bne.n	800d7f2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x102>
 800d7de:	a37a      	add	r3, pc, #488	; (adr r3, 800d9c8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d8>)
 800d7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d7e8:	f7f3 f920 	bl	8000a2c <__aeabi_dcmplt>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d00f      	beq.n	800d812 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800d7f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7f4:	9302      	str	r3, [sp, #8]
 800d7f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7f8:	9301      	str	r3, [sp, #4]
 800d7fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d7fc:	9300      	str	r3, [sp, #0]
 800d7fe:	ed97 0b00 	vldr	d0, [r7]
 800d802:	68bb      	ldr	r3, [r7, #8]
 800d804:	68fa      	ldr	r2, [r7, #12]
 800d806:	6939      	ldr	r1, [r7, #16]
 800d808:	6978      	ldr	r0, [r7, #20]
 800d80a:	f000 f9d5 	bl	800dbb8 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 800d80e:	4603      	mov	r3, r0
 800d810:	e1c9      	b.n	800dba6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800d812:	2300      	movs	r3, #0
 800d814:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800d818:	f04f 0200 	mov.w	r2, #0
 800d81c:	f04f 0300 	mov.w	r3, #0
 800d820:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d824:	f7f3 f902 	bl	8000a2c <__aeabi_dcmplt>
 800d828:	4603      	mov	r3, r0
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d00e      	beq.n	800d84c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x15c>
    negative = true;
 800d82e:	2301      	movs	r3, #1
 800d830:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800d834:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d838:	f04f 0000 	mov.w	r0, #0
 800d83c:	f04f 0100 	mov.w	r1, #0
 800d840:	f7f2 fcca 	bl	80001d8 <__aeabi_dsub>
 800d844:	4602      	mov	r2, r0
 800d846:	460b      	mov	r3, r1
 800d848:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800d84c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d84e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d852:	2b00      	cmp	r3, #0
 800d854:	d101      	bne.n	800d85a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800d856:	2306      	movs	r3, #6
 800d858:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800d85a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d85c:	2b1f      	cmp	r3, #31
 800d85e:	d80e      	bhi.n	800d87e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
 800d860:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d862:	2b09      	cmp	r3, #9
 800d864:	d90b      	bls.n	800d87e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
    buf[len++] = '0';
 800d866:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d868:	1c5a      	adds	r2, r3, #1
 800d86a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d86c:	3360      	adds	r3, #96	; 0x60
 800d86e:	443b      	add	r3, r7
 800d870:	2230      	movs	r2, #48	; 0x30
 800d872:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800d876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d878:	3b01      	subs	r3, #1
 800d87a:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800d87c:	e7ed      	b.n	800d85a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
  }

  int whole = (int)value;
 800d87e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d882:	f7f3 f911 	bl	8000aa8 <__aeabi_d2iz>
 800d886:	4603      	mov	r3, r0
 800d888:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800d88a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d88c:	f7f2 fdf2 	bl	8000474 <__aeabi_i2d>
 800d890:	4602      	mov	r2, r0
 800d892:	460b      	mov	r3, r1
 800d894:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d898:	f7f2 fc9e 	bl	80001d8 <__aeabi_dsub>
 800d89c:	4602      	mov	r2, r0
 800d89e:	460b      	mov	r3, r1
 800d8a0:	4610      	mov	r0, r2
 800d8a2:	4619      	mov	r1, r3
 800d8a4:	4a4f      	ldr	r2, [pc, #316]	; (800d9e4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 800d8a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d8a8:	00db      	lsls	r3, r3, #3
 800d8aa:	4413      	add	r3, r2
 800d8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b0:	f7f2 fe4a 	bl	8000548 <__aeabi_dmul>
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	460b      	mov	r3, r1
 800d8b8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800d8bc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d8c0:	f7f3 f91a 	bl	8000af8 <__aeabi_d2uiz>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800d8c8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d8ca:	f7f2 fdc3 	bl	8000454 <__aeabi_ui2d>
 800d8ce:	4602      	mov	r2, r0
 800d8d0:	460b      	mov	r3, r1
 800d8d2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d8d6:	f7f2 fc7f 	bl	80001d8 <__aeabi_dsub>
 800d8da:	4602      	mov	r2, r0
 800d8dc:	460b      	mov	r3, r1
 800d8de:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800d8e2:	f04f 0200 	mov.w	r2, #0
 800d8e6:	4b40      	ldr	r3, [pc, #256]	; (800d9e8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800d8e8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d8ec:	f7f3 f8bc 	bl	8000a68 <__aeabi_dcmpgt>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d016      	beq.n	800d924 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x234>
    ++frac;
 800d8f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800d8fc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d8fe:	f7f2 fda9 	bl	8000454 <__aeabi_ui2d>
 800d902:	4a38      	ldr	r2, [pc, #224]	; (800d9e4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 800d904:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d906:	00db      	lsls	r3, r3, #3
 800d908:	4413      	add	r3, r2
 800d90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90e:	f7f3 f8a1 	bl	8000a54 <__aeabi_dcmpge>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	d01a      	beq.n	800d94e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
      frac = 0;
 800d918:	2300      	movs	r3, #0
 800d91a:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800d91c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d91e:	3301      	adds	r3, #1
 800d920:	657b      	str	r3, [r7, #84]	; 0x54
 800d922:	e014      	b.n	800d94e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    }
  }
  else if (diff < 0.5) {
 800d924:	f04f 0200 	mov.w	r2, #0
 800d928:	4b2f      	ldr	r3, [pc, #188]	; (800d9e8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800d92a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d92e:	f7f3 f87d 	bl	8000a2c <__aeabi_dcmplt>
 800d932:	4603      	mov	r3, r0
 800d934:	2b00      	cmp	r3, #0
 800d936:	d10a      	bne.n	800d94e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800d938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d004      	beq.n	800d948 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x258>
 800d93e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d940:	f003 0301 	and.w	r3, r3, #1
 800d944:	2b00      	cmp	r3, #0
 800d946:	d002      	beq.n	800d94e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800d948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d94a:	3301      	adds	r3, #1
 800d94c:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800d94e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d950:	2b00      	cmp	r3, #0
 800d952:	d14b      	bne.n	800d9ec <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2fc>
    diff = value - (double)whole;
 800d954:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d956:	f7f2 fd8d 	bl	8000474 <__aeabi_i2d>
 800d95a:	4602      	mov	r2, r0
 800d95c:	460b      	mov	r3, r1
 800d95e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d962:	f7f2 fc39 	bl	80001d8 <__aeabi_dsub>
 800d966:	4602      	mov	r2, r0
 800d968:	460b      	mov	r3, r1
 800d96a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800d96e:	2301      	movs	r3, #1
 800d970:	461c      	mov	r4, r3
 800d972:	f04f 0200 	mov.w	r2, #0
 800d976:	4b1c      	ldr	r3, [pc, #112]	; (800d9e8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800d978:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d97c:	f7f3 f856 	bl	8000a2c <__aeabi_dcmplt>
 800d980:	4603      	mov	r3, r0
 800d982:	2b00      	cmp	r3, #0
 800d984:	d101      	bne.n	800d98a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x29a>
 800d986:	2300      	movs	r3, #0
 800d988:	461c      	mov	r4, r3
 800d98a:	b2e3      	uxtb	r3, r4
 800d98c:	f083 0301 	eor.w	r3, r3, #1
 800d990:	b2db      	uxtb	r3, r3
 800d992:	2b00      	cmp	r3, #0
 800d994:	d109      	bne.n	800d9aa <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ba>
 800d996:	f04f 0200 	mov.w	r2, #0
 800d99a:	4b13      	ldr	r3, [pc, #76]	; (800d9e8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800d99c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d9a0:	f7f3 f862 	bl	8000a68 <__aeabi_dcmpgt>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d06d      	beq.n	800da86 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 800d9aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9ac:	f003 0301 	and.w	r3, r3, #1
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d068      	beq.n	800da86 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800d9b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	657b      	str	r3, [r7, #84]	; 0x54
 800d9ba:	e064      	b.n	800da86 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 800d9bc:	f3af 8000 	nop.w
 800d9c0:	00000000 	.word	0x00000000
 800d9c4:	41cdcd65 	.word	0x41cdcd65
 800d9c8:	00000000 	.word	0x00000000
 800d9cc:	c1cdcd65 	.word	0xc1cdcd65
 800d9d0:	08013e38 	.word	0x08013e38
 800d9d4:	08013e3c 	.word	0x08013e3c
 800d9d8:	7fefffff 	.word	0x7fefffff
 800d9dc:	08013e44 	.word	0x08013e44
 800d9e0:	08013e4c 	.word	0x08013e4c
 800d9e4:	08014078 	.word	0x08014078
 800d9e8:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 800d9ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d9ee:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d9f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9f2:	2b1f      	cmp	r3, #31
 800d9f4:	d826      	bhi.n	800da44 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
      --count;
 800d9f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9f8:	3b01      	subs	r3, #1
 800d9fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800d9fc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d9fe:	4b6c      	ldr	r3, [pc, #432]	; (800dbb0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 800da00:	fba3 2301 	umull	r2, r3, r3, r1
 800da04:	08da      	lsrs	r2, r3, #3
 800da06:	4613      	mov	r3, r2
 800da08:	009b      	lsls	r3, r3, #2
 800da0a:	4413      	add	r3, r2
 800da0c:	005b      	lsls	r3, r3, #1
 800da0e:	1aca      	subs	r2, r1, r3
 800da10:	b2d2      	uxtb	r2, r2
 800da12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da14:	1c59      	adds	r1, r3, #1
 800da16:	65f9      	str	r1, [r7, #92]	; 0x5c
 800da18:	3230      	adds	r2, #48	; 0x30
 800da1a:	b2d2      	uxtb	r2, r2
 800da1c:	3360      	adds	r3, #96	; 0x60
 800da1e:	443b      	add	r3, r7
 800da20:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800da24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da26:	4a62      	ldr	r2, [pc, #392]	; (800dbb0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 800da28:	fba2 2303 	umull	r2, r3, r2, r3
 800da2c:	08db      	lsrs	r3, r3, #3
 800da2e:	653b      	str	r3, [r7, #80]	; 0x50
 800da30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da32:	2b00      	cmp	r3, #0
 800da34:	bf0c      	ite	eq
 800da36:	2301      	moveq	r3, #1
 800da38:	2300      	movne	r3, #0
 800da3a:	b2db      	uxtb	r3, r3
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d100      	bne.n	800da42 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x352>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800da40:	e7d6      	b.n	800d9f0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x300>
        break;
 800da42:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800da44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da46:	2b1f      	cmp	r3, #31
 800da48:	d806      	bhi.n	800da58 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 800da4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da4c:	1e5a      	subs	r2, r3, #1
 800da4e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800da50:	2b00      	cmp	r3, #0
 800da52:	d001      	beq.n	800da58 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 800da54:	2301      	movs	r3, #1
 800da56:	e000      	b.n	800da5a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x36a>
 800da58:	2300      	movs	r3, #0
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d008      	beq.n	800da70 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x380>
      buf[len++] = '0';
 800da5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da60:	1c5a      	adds	r2, r3, #1
 800da62:	65fa      	str	r2, [r7, #92]	; 0x5c
 800da64:	3360      	adds	r3, #96	; 0x60
 800da66:	443b      	add	r3, r7
 800da68:	2230      	movs	r2, #48	; 0x30
 800da6a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800da6e:	e7e9      	b.n	800da44 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800da70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da72:	2b1f      	cmp	r3, #31
 800da74:	d807      	bhi.n	800da86 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // add decimal
      buf[len++] = '.';
 800da76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da78:	1c5a      	adds	r2, r3, #1
 800da7a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800da7c:	3360      	adds	r3, #96	; 0x60
 800da7e:	443b      	add	r3, r7
 800da80:	222e      	movs	r2, #46	; 0x2e
 800da82:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800da86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da88:	2b1f      	cmp	r3, #31
 800da8a:	d827      	bhi.n	800dadc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ec>
    buf[len++] = (char)(48 + (whole % 10));
 800da8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800da8e:	4b49      	ldr	r3, [pc, #292]	; (800dbb4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 800da90:	fb83 1302 	smull	r1, r3, r3, r2
 800da94:	1099      	asrs	r1, r3, #2
 800da96:	17d3      	asrs	r3, r2, #31
 800da98:	1ac9      	subs	r1, r1, r3
 800da9a:	460b      	mov	r3, r1
 800da9c:	009b      	lsls	r3, r3, #2
 800da9e:	440b      	add	r3, r1
 800daa0:	005b      	lsls	r3, r3, #1
 800daa2:	1ad1      	subs	r1, r2, r3
 800daa4:	b2ca      	uxtb	r2, r1
 800daa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800daa8:	1c59      	adds	r1, r3, #1
 800daaa:	65f9      	str	r1, [r7, #92]	; 0x5c
 800daac:	3230      	adds	r2, #48	; 0x30
 800daae:	b2d2      	uxtb	r2, r2
 800dab0:	3360      	adds	r3, #96	; 0x60
 800dab2:	443b      	add	r3, r7
 800dab4:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800dab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800daba:	4a3e      	ldr	r2, [pc, #248]	; (800dbb4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 800dabc:	fb82 1203 	smull	r1, r2, r2, r3
 800dac0:	1092      	asrs	r2, r2, #2
 800dac2:	17db      	asrs	r3, r3, #31
 800dac4:	1ad3      	subs	r3, r2, r3
 800dac6:	657b      	str	r3, [r7, #84]	; 0x54
 800dac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800daca:	2b00      	cmp	r3, #0
 800dacc:	bf0c      	ite	eq
 800dace:	2301      	moveq	r3, #1
 800dad0:	2300      	movne	r3, #0
 800dad2:	b2db      	uxtb	r3, r3
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d100      	bne.n	800dada <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ea>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800dad8:	e7d5      	b.n	800da86 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      break;
 800dada:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800dadc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dade:	f003 0302 	and.w	r3, r3, #2
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d123      	bne.n	800db2e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 800dae6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800dae8:	f003 0301 	and.w	r3, r3, #1
 800daec:	2b00      	cmp	r3, #0
 800daee:	d01e      	beq.n	800db2e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800daf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d00b      	beq.n	800db0e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
 800daf6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d104      	bne.n	800db08 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x418>
 800dafe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db00:	f003 030c 	and.w	r3, r3, #12
 800db04:	2b00      	cmp	r3, #0
 800db06:	d002      	beq.n	800db0e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
      width--;
 800db08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db0a:	3b01      	subs	r3, #1
 800db0c:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800db0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800db10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db12:	429a      	cmp	r2, r3
 800db14:	d20b      	bcs.n	800db2e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 800db16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db18:	2b1f      	cmp	r3, #31
 800db1a:	d808      	bhi.n	800db2e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
      buf[len++] = '0';
 800db1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db1e:	1c5a      	adds	r2, r3, #1
 800db20:	65fa      	str	r2, [r7, #92]	; 0x5c
 800db22:	3360      	adds	r3, #96	; 0x60
 800db24:	443b      	add	r3, r7
 800db26:	2230      	movs	r2, #48	; 0x30
 800db28:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800db2c:	e7ef      	b.n	800db0e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800db2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db30:	2b1f      	cmp	r3, #31
 800db32:	d827      	bhi.n	800db84 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    if (negative) {
 800db34:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d008      	beq.n	800db4e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x45e>
      buf[len++] = '-';
 800db3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db3e:	1c5a      	adds	r2, r3, #1
 800db40:	65fa      	str	r2, [r7, #92]	; 0x5c
 800db42:	3360      	adds	r3, #96	; 0x60
 800db44:	443b      	add	r3, r7
 800db46:	222d      	movs	r2, #45	; 0x2d
 800db48:	f803 2c48 	strb.w	r2, [r3, #-72]
 800db4c:	e01a      	b.n	800db84 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_PLUS) {
 800db4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db50:	f003 0304 	and.w	r3, r3, #4
 800db54:	2b00      	cmp	r3, #0
 800db56:	d008      	beq.n	800db6a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x47a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800db58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db5a:	1c5a      	adds	r2, r3, #1
 800db5c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800db5e:	3360      	adds	r3, #96	; 0x60
 800db60:	443b      	add	r3, r7
 800db62:	222b      	movs	r2, #43	; 0x2b
 800db64:	f803 2c48 	strb.w	r2, [r3, #-72]
 800db68:	e00c      	b.n	800db84 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_SPACE) {
 800db6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db6c:	f003 0308 	and.w	r3, r3, #8
 800db70:	2b00      	cmp	r3, #0
 800db72:	d007      	beq.n	800db84 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
      buf[len++] = ' ';
 800db74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db76:	1c5a      	adds	r2, r3, #1
 800db78:	65fa      	str	r2, [r7, #92]	; 0x5c
 800db7a:	3360      	adds	r3, #96	; 0x60
 800db7c:	443b      	add	r3, r7
 800db7e:	2220      	movs	r2, #32
 800db80:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800db84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800db86:	9303      	str	r3, [sp, #12]
 800db88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800db8a:	9302      	str	r3, [sp, #8]
 800db8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db8e:	9301      	str	r3, [sp, #4]
 800db90:	f107 0318 	add.w	r3, r7, #24
 800db94:	9300      	str	r3, [sp, #0]
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	68fa      	ldr	r2, [r7, #12]
 800db9a:	6939      	ldr	r1, [r7, #16]
 800db9c:	6978      	ldr	r0, [r7, #20]
 800db9e:	f7ff fba6 	bl	800d2ee <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800dba2:	4603      	mov	r3, r0
 800dba4:	bf00      	nop
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3764      	adds	r7, #100	; 0x64
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd90      	pop	{r4, r7, pc}
 800dbae:	bf00      	nop
 800dbb0:	cccccccd 	.word	0xcccccccd
 800dbb4:	66666667 	.word	0x66666667

0800dbb8 <_ZL5_etoaPFvcPvjjEPcjjdjjj>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800dbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbbc:	b09f      	sub	sp, #124	; 0x7c
 800dbbe:	af06      	add	r7, sp, #24
 800dbc0:	6278      	str	r0, [r7, #36]	; 0x24
 800dbc2:	6239      	str	r1, [r7, #32]
 800dbc4:	61fa      	str	r2, [r7, #28]
 800dbc6:	61bb      	str	r3, [r7, #24]
 800dbc8:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800dbcc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800dbd0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800dbd4:	f7f2 ff20 	bl	8000a18 <__aeabi_dcmpeq>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d014      	beq.n	800dc08 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 800dbde:	f04f 32ff 	mov.w	r2, #4294967295
 800dbe2:	4bc1      	ldr	r3, [pc, #772]	; (800dee8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x330>)
 800dbe4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800dbe8:	f7f2 ff3e 	bl	8000a68 <__aeabi_dcmpgt>
 800dbec:	4603      	mov	r3, r0
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d10a      	bne.n	800dc08 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 800dbf2:	f04f 32ff 	mov.w	r2, #4294967295
 800dbf6:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800dbfa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800dbfe:	f7f2 ff15 	bl	8000a2c <__aeabi_dcmplt>
 800dc02:	4603      	mov	r3, r0
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d012      	beq.n	800dc2e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800dc08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dc0c:	9302      	str	r3, [sp, #8]
 800dc0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc12:	9301      	str	r3, [sp, #4]
 800dc14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dc18:	9300      	str	r3, [sp, #0]
 800dc1a:	ed97 0b04 	vldr	d0, [r7, #16]
 800dc1e:	69bb      	ldr	r3, [r7, #24]
 800dc20:	69fa      	ldr	r2, [r7, #28]
 800dc22:	6a39      	ldr	r1, [r7, #32]
 800dc24:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc26:	f7ff fd63 	bl	800d6f0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	e23f      	b.n	800e0ae <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800dc2e:	2301      	movs	r3, #1
 800dc30:	461e      	mov	r6, r3
 800dc32:	f04f 0200 	mov.w	r2, #0
 800dc36:	f04f 0300 	mov.w	r3, #0
 800dc3a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800dc3e:	f7f2 fef5 	bl	8000a2c <__aeabi_dcmplt>
 800dc42:	4603      	mov	r3, r0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d101      	bne.n	800dc4c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x94>
 800dc48:	2300      	movs	r3, #0
 800dc4a:	461e      	mov	r6, r3
 800dc4c:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 800dc50:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d009      	beq.n	800dc6c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xb4>
    value = -value;
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	603b      	str	r3, [r7, #0]
 800dc5c:	697b      	ldr	r3, [r7, #20]
 800dc5e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800dc62:	607b      	str	r3, [r7, #4]
 800dc64:	ed97 7b00 	vldr	d7, [r7]
 800dc68:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800dc6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dc70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d102      	bne.n	800dc7e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800dc78:	2306      	movs	r3, #6
 800dc7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800dc7e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800dc82:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800dc86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dc8a:	f04f 0200 	mov.w	r2, #0
 800dc8e:	f04f 0300 	mov.w	r3, #0
 800dc92:	0d0a      	lsrs	r2, r1, #20
 800dc94:	2300      	movs	r3, #0
 800dc96:	4613      	mov	r3, r2
 800dc98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800dc9c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800dca0:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800dca2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800dca6:	4690      	mov	r8, r2
 800dca8:	f3c3 0913 	ubfx	r9, r3, #0, #20
 800dcac:	4644      	mov	r4, r8
 800dcae:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 800dcb2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800dcb6:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800dcba:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dcbc:	f7f2 fbda 	bl	8000474 <__aeabi_i2d>
 800dcc0:	a37d      	add	r3, pc, #500	; (adr r3, 800deb8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x300>)
 800dcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc6:	f7f2 fc3f 	bl	8000548 <__aeabi_dmul>
 800dcca:	4602      	mov	r2, r0
 800dccc:	460b      	mov	r3, r1
 800dcce:	4610      	mov	r0, r2
 800dcd0:	4619      	mov	r1, r3
 800dcd2:	a37b      	add	r3, pc, #492	; (adr r3, 800dec0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x308>)
 800dcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd8:	f7f2 fa80 	bl	80001dc <__adddf3>
 800dcdc:	4602      	mov	r2, r0
 800dcde:	460b      	mov	r3, r1
 800dce0:	4614      	mov	r4, r2
 800dce2:	461d      	mov	r5, r3
 800dce4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800dce8:	f04f 0200 	mov.w	r2, #0
 800dcec:	4b7f      	ldr	r3, [pc, #508]	; (800deec <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x334>)
 800dcee:	f7f2 fa73 	bl	80001d8 <__aeabi_dsub>
 800dcf2:	4602      	mov	r2, r0
 800dcf4:	460b      	mov	r3, r1
 800dcf6:	4610      	mov	r0, r2
 800dcf8:	4619      	mov	r1, r3
 800dcfa:	a373      	add	r3, pc, #460	; (adr r3, 800dec8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x310>)
 800dcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd00:	f7f2 fc22 	bl	8000548 <__aeabi_dmul>
 800dd04:	4602      	mov	r2, r0
 800dd06:	460b      	mov	r3, r1
 800dd08:	4620      	mov	r0, r4
 800dd0a:	4629      	mov	r1, r5
 800dd0c:	f7f2 fa66 	bl	80001dc <__adddf3>
 800dd10:	4602      	mov	r2, r0
 800dd12:	460b      	mov	r3, r1
 800dd14:	4610      	mov	r0, r2
 800dd16:	4619      	mov	r1, r3
 800dd18:	f7f2 fec6 	bl	8000aa8 <__aeabi_d2iz>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800dd20:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800dd22:	f7f2 fba7 	bl	8000474 <__aeabi_i2d>
 800dd26:	a36a      	add	r3, pc, #424	; (adr r3, 800ded0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x318>)
 800dd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2c:	f7f2 fc0c 	bl	8000548 <__aeabi_dmul>
 800dd30:	4602      	mov	r2, r0
 800dd32:	460b      	mov	r3, r1
 800dd34:	4610      	mov	r0, r2
 800dd36:	4619      	mov	r1, r3
 800dd38:	f04f 0200 	mov.w	r2, #0
 800dd3c:	4b6c      	ldr	r3, [pc, #432]	; (800def0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x338>)
 800dd3e:	f7f2 fa4d 	bl	80001dc <__adddf3>
 800dd42:	4602      	mov	r2, r0
 800dd44:	460b      	mov	r3, r1
 800dd46:	4610      	mov	r0, r2
 800dd48:	4619      	mov	r1, r3
 800dd4a:	f7f2 fead 	bl	8000aa8 <__aeabi_d2iz>
 800dd4e:	4603      	mov	r3, r0
 800dd50:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800dd52:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800dd54:	f7f2 fb8e 	bl	8000474 <__aeabi_i2d>
 800dd58:	a35f      	add	r3, pc, #380	; (adr r3, 800ded8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x320>)
 800dd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5e:	f7f2 fbf3 	bl	8000548 <__aeabi_dmul>
 800dd62:	4602      	mov	r2, r0
 800dd64:	460b      	mov	r3, r1
 800dd66:	4614      	mov	r4, r2
 800dd68:	461d      	mov	r5, r3
 800dd6a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800dd6c:	f7f2 fb82 	bl	8000474 <__aeabi_i2d>
 800dd70:	a35b      	add	r3, pc, #364	; (adr r3, 800dee0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x328>)
 800dd72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd76:	f7f2 fbe7 	bl	8000548 <__aeabi_dmul>
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	4620      	mov	r0, r4
 800dd80:	4629      	mov	r1, r5
 800dd82:	f7f2 fa29 	bl	80001d8 <__aeabi_dsub>
 800dd86:	4602      	mov	r2, r0
 800dd88:	460b      	mov	r3, r1
 800dd8a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 800dd8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dd92:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800dd96:	f7f2 fbd7 	bl	8000548 <__aeabi_dmul>
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	460b      	mov	r3, r1
 800dd9e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800dda2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dda4:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800dda8:	17da      	asrs	r2, r3, #31
 800ddaa:	469a      	mov	sl, r3
 800ddac:	4693      	mov	fp, r2
 800ddae:	f04f 0200 	mov.w	r2, #0
 800ddb2:	f04f 0300 	mov.w	r3, #0
 800ddb6:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800ddba:	2200      	movs	r2, #0
 800ddbc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800ddc0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800ddc4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ddc8:	4602      	mov	r2, r0
 800ddca:	460b      	mov	r3, r1
 800ddcc:	f7f2 fa06 	bl	80001dc <__adddf3>
 800ddd0:	4602      	mov	r2, r0
 800ddd2:	460b      	mov	r3, r1
 800ddd4:	4690      	mov	r8, r2
 800ddd6:	4699      	mov	r9, r3
 800ddd8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dddc:	f04f 0000 	mov.w	r0, #0
 800dde0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800dde4:	f7f2 f9f8 	bl	80001d8 <__aeabi_dsub>
 800dde8:	4602      	mov	r2, r0
 800ddea:	460b      	mov	r3, r1
 800ddec:	4692      	mov	sl, r2
 800ddee:	469b      	mov	fp, r3
 800ddf0:	f04f 0200 	mov.w	r2, #0
 800ddf4:	4b3f      	ldr	r3, [pc, #252]	; (800def4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x33c>)
 800ddf6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800ddfa:	f7f2 fccf 	bl	800079c <__aeabi_ddiv>
 800ddfe:	4602      	mov	r2, r0
 800de00:	460b      	mov	r3, r1
 800de02:	4610      	mov	r0, r2
 800de04:	4619      	mov	r1, r3
 800de06:	f04f 0200 	mov.w	r2, #0
 800de0a:	4b3b      	ldr	r3, [pc, #236]	; (800def8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 800de0c:	f7f2 f9e6 	bl	80001dc <__adddf3>
 800de10:	4602      	mov	r2, r0
 800de12:	460b      	mov	r3, r1
 800de14:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800de18:	f7f2 fcc0 	bl	800079c <__aeabi_ddiv>
 800de1c:	4602      	mov	r2, r0
 800de1e:	460b      	mov	r3, r1
 800de20:	4610      	mov	r0, r2
 800de22:	4619      	mov	r1, r3
 800de24:	f04f 0200 	mov.w	r2, #0
 800de28:	4b34      	ldr	r3, [pc, #208]	; (800defc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x344>)
 800de2a:	f7f2 f9d7 	bl	80001dc <__adddf3>
 800de2e:	4602      	mov	r2, r0
 800de30:	460b      	mov	r3, r1
 800de32:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800de36:	f7f2 fcb1 	bl	800079c <__aeabi_ddiv>
 800de3a:	4602      	mov	r2, r0
 800de3c:	460b      	mov	r3, r1
 800de3e:	4650      	mov	r0, sl
 800de40:	4659      	mov	r1, fp
 800de42:	f7f2 f9cb 	bl	80001dc <__adddf3>
 800de46:	4602      	mov	r2, r0
 800de48:	460b      	mov	r3, r1
 800de4a:	4640      	mov	r0, r8
 800de4c:	4649      	mov	r1, r9
 800de4e:	f7f2 fca5 	bl	800079c <__aeabi_ddiv>
 800de52:	4602      	mov	r2, r0
 800de54:	460b      	mov	r3, r1
 800de56:	4610      	mov	r0, r2
 800de58:	4619      	mov	r1, r3
 800de5a:	f04f 0200 	mov.w	r2, #0
 800de5e:	4b28      	ldr	r3, [pc, #160]	; (800df00 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x348>)
 800de60:	f7f2 f9bc 	bl	80001dc <__adddf3>
 800de64:	4602      	mov	r2, r0
 800de66:	460b      	mov	r3, r1
 800de68:	4620      	mov	r0, r4
 800de6a:	4629      	mov	r1, r5
 800de6c:	f7f2 fb6c 	bl	8000548 <__aeabi_dmul>
 800de70:	4602      	mov	r2, r0
 800de72:	460b      	mov	r3, r1
 800de74:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 800de78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800de7c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800de80:	f7f2 fdd4 	bl	8000a2c <__aeabi_dcmplt>
 800de84:	4603      	mov	r3, r0
 800de86:	2b00      	cmp	r3, #0
 800de88:	d00d      	beq.n	800dea6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x2ee>
    expval--;
 800de8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de8c:	3b01      	subs	r3, #1
 800de8e:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 800de90:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800de94:	f04f 0200 	mov.w	r2, #0
 800de98:	4b17      	ldr	r3, [pc, #92]	; (800def8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 800de9a:	f7f2 fc7f 	bl	800079c <__aeabi_ddiv>
 800de9e:	4602      	mov	r2, r0
 800dea0:	460b      	mov	r3, r1
 800dea2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800dea6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dea8:	2b63      	cmp	r3, #99	; 0x63
 800deaa:	dc2b      	bgt.n	800df04 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 800deac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800deae:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800deb2:	db27      	blt.n	800df04 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 800deb4:	2304      	movs	r3, #4
 800deb6:	e026      	b.n	800df06 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34e>
 800deb8:	509f79fb 	.word	0x509f79fb
 800debc:	3fd34413 	.word	0x3fd34413
 800dec0:	8b60c8b3 	.word	0x8b60c8b3
 800dec4:	3fc68a28 	.word	0x3fc68a28
 800dec8:	636f4361 	.word	0x636f4361
 800decc:	3fd287a7 	.word	0x3fd287a7
 800ded0:	0979a371 	.word	0x0979a371
 800ded4:	400a934f 	.word	0x400a934f
 800ded8:	bbb55516 	.word	0xbbb55516
 800dedc:	40026bb1 	.word	0x40026bb1
 800dee0:	fefa39ef 	.word	0xfefa39ef
 800dee4:	3fe62e42 	.word	0x3fe62e42
 800dee8:	7fefffff 	.word	0x7fefffff
 800deec:	3ff80000 	.word	0x3ff80000
 800def0:	3fe00000 	.word	0x3fe00000
 800def4:	402c0000 	.word	0x402c0000
 800def8:	40240000 	.word	0x40240000
 800defc:	40180000 	.word	0x40180000
 800df00:	3ff00000 	.word	0x3ff00000
 800df04:	2305      	movs	r3, #5
 800df06:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800df08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800df0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800df10:	2b00      	cmp	r3, #0
 800df12:	d03d      	beq.n	800df90 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800df14:	a368      	add	r3, pc, #416	; (adr r3, 800e0b8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x500>)
 800df16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800df1e:	f7f2 fd99 	bl	8000a54 <__aeabi_dcmpge>
 800df22:	4603      	mov	r3, r0
 800df24:	2b00      	cmp	r3, #0
 800df26:	d024      	beq.n	800df72 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
 800df28:	a365      	add	r3, pc, #404	; (adr r3, 800e0c0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x508>)
 800df2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df2e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800df32:	f7f2 fd7b 	bl	8000a2c <__aeabi_dcmplt>
 800df36:	4603      	mov	r3, r0
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d01a      	beq.n	800df72 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
      if ((int)prec > expval) {
 800df3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800df40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800df42:	429a      	cmp	r2, r3
 800df44:	da07      	bge.n	800df56 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 800df46:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800df4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800df4c:	1ad3      	subs	r3, r2, r3
 800df4e:	3b01      	subs	r3, #1
 800df50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800df54:	e002      	b.n	800df5c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3a4>
      }
      else {
        prec = 0;
 800df56:	2300      	movs	r3, #0
 800df58:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800df5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800df60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800df64:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 800df68:	2300      	movs	r3, #0
 800df6a:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 800df6c:	2300      	movs	r3, #0
 800df6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df70:	e00e      	b.n	800df90 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800df72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800df76:	2b00      	cmp	r3, #0
 800df78:	d00a      	beq.n	800df90 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
 800df7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800df7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800df82:	2b00      	cmp	r3, #0
 800df84:	d004      	beq.n	800df90 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
        --prec;
 800df86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800df8a:	3b01      	subs	r3, #1
 800df8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800df90:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800df94:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 800df96:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800df9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d904      	bls.n	800dfaa <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800dfa0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dfa2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dfa4:	1ad3      	subs	r3, r2, r3
 800dfa6:	657b      	str	r3, [r7, #84]	; 0x54
 800dfa8:	e001      	b.n	800dfae <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800dfae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dfb2:	f003 0302 	and.w	r3, r3, #2
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d004      	beq.n	800dfc4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
 800dfba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d001      	beq.n	800dfc4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 800dfc4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d009      	beq.n	800dfde <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x426>
    value /= conv.F;
 800dfca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800dfce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800dfd2:	f7f2 fbe3 	bl	800079c <__aeabi_ddiv>
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	460b      	mov	r3, r1
 800dfda:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 800dfde:	69fb      	ldr	r3, [r7, #28]
 800dfe0:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800dfe2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d006      	beq.n	800dff8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x440>
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	60bb      	str	r3, [r7, #8]
 800dfee:	697b      	ldr	r3, [r7, #20]
 800dff0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800dff4:	60fb      	str	r3, [r7, #12]
 800dff6:	e003      	b.n	800e000 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x448>
 800dff8:	ed97 7b04 	vldr	d7, [r7, #16]
 800dffc:	ed87 7b02 	vstr	d7, [r7, #8]
 800e000:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e004:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e008:	9302      	str	r3, [sp, #8]
 800e00a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e00c:	9301      	str	r3, [sp, #4]
 800e00e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e012:	9300      	str	r3, [sp, #0]
 800e014:	ed97 0b02 	vldr	d0, [r7, #8]
 800e018:	69bb      	ldr	r3, [r7, #24]
 800e01a:	69fa      	ldr	r2, [r7, #28]
 800e01c:	6a39      	ldr	r1, [r7, #32]
 800e01e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e020:	f7ff fb66 	bl	800d6f0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800e024:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 800e026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d03f      	beq.n	800e0ac <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800e02c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e030:	f003 0320 	and.w	r3, r3, #32
 800e034:	2b00      	cmp	r3, #0
 800e036:	d001      	beq.n	800e03c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x484>
 800e038:	2045      	movs	r0, #69	; 0x45
 800e03a:	e000      	b.n	800e03e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x486>
 800e03c:	2065      	movs	r0, #101	; 0x65
 800e03e:	69fa      	ldr	r2, [r7, #28]
 800e040:	1c53      	adds	r3, r2, #1
 800e042:	61fb      	str	r3, [r7, #28]
 800e044:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800e046:	69bb      	ldr	r3, [r7, #24]
 800e048:	6a39      	ldr	r1, [r7, #32]
 800e04a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800e04c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e04e:	2b00      	cmp	r3, #0
 800e050:	bfb8      	it	lt
 800e052:	425b      	neglt	r3, r3
 800e054:	4618      	mov	r0, r3
 800e056:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e058:	0fdb      	lsrs	r3, r3, #31
 800e05a:	b2db      	uxtb	r3, r3
 800e05c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e05e:	3a01      	subs	r2, #1
 800e060:	2105      	movs	r1, #5
 800e062:	9105      	str	r1, [sp, #20]
 800e064:	9204      	str	r2, [sp, #16]
 800e066:	2200      	movs	r2, #0
 800e068:	9203      	str	r2, [sp, #12]
 800e06a:	220a      	movs	r2, #10
 800e06c:	9202      	str	r2, [sp, #8]
 800e06e:	9301      	str	r3, [sp, #4]
 800e070:	9000      	str	r0, [sp, #0]
 800e072:	69bb      	ldr	r3, [r7, #24]
 800e074:	69fa      	ldr	r2, [r7, #28]
 800e076:	6a39      	ldr	r1, [r7, #32]
 800e078:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e07a:	f7ff fa64 	bl	800d546 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800e07e:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800e080:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800e084:	f003 0302 	and.w	r3, r3, #2
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d00f      	beq.n	800e0ac <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800e08c:	69fa      	ldr	r2, [r7, #28]
 800e08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e090:	1ad3      	subs	r3, r2, r3
 800e092:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800e096:	429a      	cmp	r2, r3
 800e098:	d908      	bls.n	800e0ac <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
 800e09a:	69fa      	ldr	r2, [r7, #28]
 800e09c:	1c53      	adds	r3, r2, #1
 800e09e:	61fb      	str	r3, [r7, #28]
 800e0a0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800e0a2:	69bb      	ldr	r3, [r7, #24]
 800e0a4:	6a39      	ldr	r1, [r7, #32]
 800e0a6:	2020      	movs	r0, #32
 800e0a8:	47a0      	blx	r4
 800e0aa:	e7ef      	b.n	800e08c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4d4>
    }
  }
  return idx;
 800e0ac:	69fb      	ldr	r3, [r7, #28]
}
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	3764      	adds	r7, #100	; 0x64
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e0b8:	eb1c432d 	.word	0xeb1c432d
 800e0bc:	3f1a36e2 	.word	0x3f1a36e2
 800e0c0:	00000000 	.word	0x00000000
 800e0c4:	412e8480 	.word	0x412e8480

0800e0c8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800e0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0cc:	b0a1      	sub	sp, #132	; 0x84
 800e0ce:	af0a      	add	r7, sp, #40	; 0x28
 800e0d0:	60f8      	str	r0, [r7, #12]
 800e0d2:	60b9      	str	r1, [r7, #8]
 800e0d4:	607a      	str	r2, [r7, #4]
 800e0d6:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d101      	bne.n	800e0e6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    // use null output function
    out = _out_null;
 800e0e2:	4ba5      	ldr	r3, [pc, #660]	; (800e378 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b0>)
 800e0e4:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	f000 84ae 	beq.w	800ea4c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x984>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	2b25      	cmp	r3, #37	; 0x25
 800e0f6:	d00d      	beq.n	800e114 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	7818      	ldrb	r0, [r3, #0]
 800e0fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e0fe:	1c53      	adds	r3, r2, #1
 800e100:	647b      	str	r3, [r7, #68]	; 0x44
 800e102:	68fe      	ldr	r6, [r7, #12]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	68b9      	ldr	r1, [r7, #8]
 800e108:	47b0      	blx	r6
      format++;
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	3301      	adds	r3, #1
 800e10e:	603b      	str	r3, [r7, #0]
      continue;
 800e110:	f000 bc9a 	b.w	800ea48 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
    }
    else {
      // yes, evaluate it
      format++;
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	3301      	adds	r3, #1
 800e118:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800e11a:	2300      	movs	r3, #0
 800e11c:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	781b      	ldrb	r3, [r3, #0]
 800e122:	3b20      	subs	r3, #32
 800e124:	2b10      	cmp	r3, #16
 800e126:	d857      	bhi.n	800e1d8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x110>
 800e128:	a201      	add	r2, pc, #4	; (adr r2, 800e130 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x68>)
 800e12a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e12e:	bf00      	nop
 800e130:	0800e1b1 	.word	0x0800e1b1
 800e134:	0800e1d9 	.word	0x0800e1d9
 800e138:	0800e1d9 	.word	0x0800e1d9
 800e13c:	0800e1c5 	.word	0x0800e1c5
 800e140:	0800e1d9 	.word	0x0800e1d9
 800e144:	0800e1d9 	.word	0x0800e1d9
 800e148:	0800e1d9 	.word	0x0800e1d9
 800e14c:	0800e1d9 	.word	0x0800e1d9
 800e150:	0800e1d9 	.word	0x0800e1d9
 800e154:	0800e1d9 	.word	0x0800e1d9
 800e158:	0800e1d9 	.word	0x0800e1d9
 800e15c:	0800e19d 	.word	0x0800e19d
 800e160:	0800e1d9 	.word	0x0800e1d9
 800e164:	0800e189 	.word	0x0800e189
 800e168:	0800e1d9 	.word	0x0800e1d9
 800e16c:	0800e1d9 	.word	0x0800e1d9
 800e170:	0800e175 	.word	0x0800e175
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800e174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e176:	f043 0301 	orr.w	r3, r3, #1
 800e17a:	657b      	str	r3, [r7, #84]	; 0x54
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	3301      	adds	r3, #1
 800e180:	603b      	str	r3, [r7, #0]
 800e182:	2301      	movs	r3, #1
 800e184:	64bb      	str	r3, [r7, #72]	; 0x48
 800e186:	e02a      	b.n	800e1de <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800e188:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e18a:	f043 0302 	orr.w	r3, r3, #2
 800e18e:	657b      	str	r3, [r7, #84]	; 0x54
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	3301      	adds	r3, #1
 800e194:	603b      	str	r3, [r7, #0]
 800e196:	2301      	movs	r3, #1
 800e198:	64bb      	str	r3, [r7, #72]	; 0x48
 800e19a:	e020      	b.n	800e1de <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800e19c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e19e:	f043 0304 	orr.w	r3, r3, #4
 800e1a2:	657b      	str	r3, [r7, #84]	; 0x54
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	3301      	adds	r3, #1
 800e1a8:	603b      	str	r3, [r7, #0]
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800e1ae:	e016      	b.n	800e1de <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800e1b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1b2:	f043 0308 	orr.w	r3, r3, #8
 800e1b6:	657b      	str	r3, [r7, #84]	; 0x54
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	603b      	str	r3, [r7, #0]
 800e1be:	2301      	movs	r3, #1
 800e1c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800e1c2:	e00c      	b.n	800e1de <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800e1c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1c6:	f043 0310 	orr.w	r3, r3, #16
 800e1ca:	657b      	str	r3, [r7, #84]	; 0x54
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	3301      	adds	r3, #1
 800e1d0:	603b      	str	r3, [r7, #0]
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e1d6:	e002      	b.n	800e1de <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        default :                                   n = 0U; break;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	64bb      	str	r3, [r7, #72]	; 0x48
 800e1dc:	bf00      	nop
      }
    } while (n);
 800e1de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d000      	beq.n	800e1e6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x11e>
    do {
 800e1e4:	e79b      	b.n	800e11e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x56>

    // evaluate width field
    width = 0U;
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	781b      	ldrb	r3, [r3, #0]
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7ff f845 	bl	800d27e <_ZL9_is_digitc>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d005      	beq.n	800e206 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x13e>
      width = _atoi(&format);
 800e1fa:	463b      	mov	r3, r7
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f7ff f852 	bl	800d2a6 <_ZL5_atoiPPKc>
 800e202:	6538      	str	r0, [r7, #80]	; 0x50
 800e204:	e01a      	b.n	800e23c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
    }
    else if (*format == '*') {
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	2b2a      	cmp	r3, #42	; 0x2a
 800e20c:	d116      	bne.n	800e23c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
      const int w = va_arg(va, int);
 800e20e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e212:	1d1a      	adds	r2, r3, #4
 800e214:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800e21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e21e:	2b00      	cmp	r3, #0
 800e220:	da07      	bge.n	800e232 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16a>
        flags |= FLAGS_LEFT;    // reverse padding
 800e222:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e224:	f043 0302 	orr.w	r3, r3, #2
 800e228:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800e22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e22c:	425b      	negs	r3, r3
 800e22e:	653b      	str	r3, [r7, #80]	; 0x50
 800e230:	e001      	b.n	800e236 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16e>
      }
      else {
        width = (unsigned int)w;
 800e232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e234:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	3301      	adds	r3, #1
 800e23a:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800e23c:	2300      	movs	r3, #0
 800e23e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	781b      	ldrb	r3, [r3, #0]
 800e244:	2b2e      	cmp	r3, #46	; 0x2e
 800e246:	d126      	bne.n	800e296 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      flags |= FLAGS_PRECISION;
 800e248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e24a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e24e:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	3301      	adds	r3, #1
 800e254:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800e256:	683b      	ldr	r3, [r7, #0]
 800e258:	781b      	ldrb	r3, [r3, #0]
 800e25a:	4618      	mov	r0, r3
 800e25c:	f7ff f80f 	bl	800d27e <_ZL9_is_digitc>
 800e260:	4603      	mov	r3, r0
 800e262:	2b00      	cmp	r3, #0
 800e264:	d005      	beq.n	800e272 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1aa>
        precision = _atoi(&format);
 800e266:	463b      	mov	r3, r7
 800e268:	4618      	mov	r0, r3
 800e26a:	f7ff f81c 	bl	800d2a6 <_ZL5_atoiPPKc>
 800e26e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e270:	e011      	b.n	800e296 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      }
      else if (*format == '*') {
 800e272:	683b      	ldr	r3, [r7, #0]
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	2b2a      	cmp	r3, #42	; 0x2a
 800e278:	d10d      	bne.n	800e296 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
        const int prec = (int)va_arg(va, int);
 800e27a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e27e:	1d1a      	adds	r2, r3, #4
 800e280:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800e288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e28a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e28e:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800e290:	683b      	ldr	r3, [r7, #0]
 800e292:	3301      	adds	r3, #1
 800e294:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	781b      	ldrb	r3, [r3, #0]
 800e29a:	3b68      	subs	r3, #104	; 0x68
 800e29c:	2b12      	cmp	r3, #18
 800e29e:	d867      	bhi.n	800e370 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2a8>
 800e2a0:	a201      	add	r2, pc, #4	; (adr r2, 800e2a8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e0>)
 800e2a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2a6:	bf00      	nop
 800e2a8:	0800e31b 	.word	0x0800e31b
 800e2ac:	0800e371 	.word	0x0800e371
 800e2b0:	0800e351 	.word	0x0800e351
 800e2b4:	0800e371 	.word	0x0800e371
 800e2b8:	0800e2f5 	.word	0x0800e2f5
 800e2bc:	0800e371 	.word	0x0800e371
 800e2c0:	0800e371 	.word	0x0800e371
 800e2c4:	0800e371 	.word	0x0800e371
 800e2c8:	0800e371 	.word	0x0800e371
 800e2cc:	0800e371 	.word	0x0800e371
 800e2d0:	0800e371 	.word	0x0800e371
 800e2d4:	0800e371 	.word	0x0800e371
 800e2d8:	0800e341 	.word	0x0800e341
 800e2dc:	0800e371 	.word	0x0800e371
 800e2e0:	0800e371 	.word	0x0800e371
 800e2e4:	0800e371 	.word	0x0800e371
 800e2e8:	0800e371 	.word	0x0800e371
 800e2ec:	0800e371 	.word	0x0800e371
 800e2f0:	0800e361 	.word	0x0800e361
      case 'l' :
        flags |= FLAGS_LONG;
 800e2f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e2fa:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800e2fc:	683b      	ldr	r3, [r7, #0]
 800e2fe:	3301      	adds	r3, #1
 800e300:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800e302:	683b      	ldr	r3, [r7, #0]
 800e304:	781b      	ldrb	r3, [r3, #0]
 800e306:	2b6c      	cmp	r3, #108	; 0x6c
 800e308:	d134      	bne.n	800e374 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
          flags |= FLAGS_LONG_LONG;
 800e30a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e30c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e310:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	3301      	adds	r3, #1
 800e316:	603b      	str	r3, [r7, #0]
        }
        break;
 800e318:	e02c      	b.n	800e374 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
 800e31a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e31c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e320:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	3301      	adds	r3, #1
 800e326:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	781b      	ldrb	r3, [r3, #0]
 800e32c:	2b68      	cmp	r3, #104	; 0x68
 800e32e:	d125      	bne.n	800e37c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
          flags |= FLAGS_CHAR;
 800e330:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e332:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e336:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800e338:	683b      	ldr	r3, [r7, #0]
 800e33a:	3301      	adds	r3, #1
 800e33c:	603b      	str	r3, [r7, #0]
        }
        break;
 800e33e:	e01d      	b.n	800e37c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800e340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e346:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	3301      	adds	r3, #1
 800e34c:	603b      	str	r3, [r7, #0]
        break;
 800e34e:	e016      	b.n	800e37e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800e350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e356:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	3301      	adds	r3, #1
 800e35c:	603b      	str	r3, [r7, #0]
        break;
 800e35e:	e00e      	b.n	800e37e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800e360:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e366:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800e368:	683b      	ldr	r3, [r7, #0]
 800e36a:	3301      	adds	r3, #1
 800e36c:	603b      	str	r3, [r7, #0]
        break;
 800e36e:	e006      	b.n	800e37e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      default :
        break;
 800e370:	bf00      	nop
 800e372:	e004      	b.n	800e37e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
        break;
 800e374:	bf00      	nop
 800e376:	e002      	b.n	800e37e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
 800e378:	0800d1f9 	.word	0x0800d1f9
        break;
 800e37c:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	781b      	ldrb	r3, [r3, #0]
 800e382:	3b25      	subs	r3, #37	; 0x25
 800e384:	2b53      	cmp	r3, #83	; 0x53
 800e386:	f200 8352 	bhi.w	800ea2e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x966>
 800e38a:	a201      	add	r2, pc, #4	; (adr r2, 800e390 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2c8>)
 800e38c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e390:	0800ea17 	.word	0x0800ea17
 800e394:	0800ea2f 	.word	0x0800ea2f
 800e398:	0800ea2f 	.word	0x0800ea2f
 800e39c:	0800ea2f 	.word	0x0800ea2f
 800e3a0:	0800ea2f 	.word	0x0800ea2f
 800e3a4:	0800ea2f 	.word	0x0800ea2f
 800e3a8:	0800ea2f 	.word	0x0800ea2f
 800e3ac:	0800ea2f 	.word	0x0800ea2f
 800e3b0:	0800ea2f 	.word	0x0800ea2f
 800e3b4:	0800ea2f 	.word	0x0800ea2f
 800e3b8:	0800ea2f 	.word	0x0800ea2f
 800e3bc:	0800ea2f 	.word	0x0800ea2f
 800e3c0:	0800ea2f 	.word	0x0800ea2f
 800e3c4:	0800ea2f 	.word	0x0800ea2f
 800e3c8:	0800ea2f 	.word	0x0800ea2f
 800e3cc:	0800ea2f 	.word	0x0800ea2f
 800e3d0:	0800ea2f 	.word	0x0800ea2f
 800e3d4:	0800ea2f 	.word	0x0800ea2f
 800e3d8:	0800ea2f 	.word	0x0800ea2f
 800e3dc:	0800ea2f 	.word	0x0800ea2f
 800e3e0:	0800ea2f 	.word	0x0800ea2f
 800e3e4:	0800ea2f 	.word	0x0800ea2f
 800e3e8:	0800ea2f 	.word	0x0800ea2f
 800e3ec:	0800ea2f 	.word	0x0800ea2f
 800e3f0:	0800ea2f 	.word	0x0800ea2f
 800e3f4:	0800ea2f 	.word	0x0800ea2f
 800e3f8:	0800ea2f 	.word	0x0800ea2f
 800e3fc:	0800ea2f 	.word	0x0800ea2f
 800e400:	0800ea2f 	.word	0x0800ea2f
 800e404:	0800ea2f 	.word	0x0800ea2f
 800e408:	0800ea2f 	.word	0x0800ea2f
 800e40c:	0800ea2f 	.word	0x0800ea2f
 800e410:	0800e7e5 	.word	0x0800e7e5
 800e414:	0800e795 	.word	0x0800e795
 800e418:	0800e7e5 	.word	0x0800e7e5
 800e41c:	0800ea2f 	.word	0x0800ea2f
 800e420:	0800ea2f 	.word	0x0800ea2f
 800e424:	0800ea2f 	.word	0x0800ea2f
 800e428:	0800ea2f 	.word	0x0800ea2f
 800e42c:	0800ea2f 	.word	0x0800ea2f
 800e430:	0800ea2f 	.word	0x0800ea2f
 800e434:	0800ea2f 	.word	0x0800ea2f
 800e438:	0800ea2f 	.word	0x0800ea2f
 800e43c:	0800ea2f 	.word	0x0800ea2f
 800e440:	0800ea2f 	.word	0x0800ea2f
 800e444:	0800ea2f 	.word	0x0800ea2f
 800e448:	0800ea2f 	.word	0x0800ea2f
 800e44c:	0800ea2f 	.word	0x0800ea2f
 800e450:	0800ea2f 	.word	0x0800ea2f
 800e454:	0800ea2f 	.word	0x0800ea2f
 800e458:	0800ea2f 	.word	0x0800ea2f
 800e45c:	0800e4e1 	.word	0x0800e4e1
 800e460:	0800ea2f 	.word	0x0800ea2f
 800e464:	0800ea2f 	.word	0x0800ea2f
 800e468:	0800ea2f 	.word	0x0800ea2f
 800e46c:	0800ea2f 	.word	0x0800ea2f
 800e470:	0800ea2f 	.word	0x0800ea2f
 800e474:	0800ea2f 	.word	0x0800ea2f
 800e478:	0800ea2f 	.word	0x0800ea2f
 800e47c:	0800ea2f 	.word	0x0800ea2f
 800e480:	0800ea2f 	.word	0x0800ea2f
 800e484:	0800e4e1 	.word	0x0800e4e1
 800e488:	0800e855 	.word	0x0800e855
 800e48c:	0800e4e1 	.word	0x0800e4e1
 800e490:	0800e7e5 	.word	0x0800e7e5
 800e494:	0800e795 	.word	0x0800e795
 800e498:	0800e7e5 	.word	0x0800e7e5
 800e49c:	0800ea2f 	.word	0x0800ea2f
 800e4a0:	0800e4e1 	.word	0x0800e4e1
 800e4a4:	0800ea2f 	.word	0x0800ea2f
 800e4a8:	0800ea2f 	.word	0x0800ea2f
 800e4ac:	0800ea2f 	.word	0x0800ea2f
 800e4b0:	0800ea2f 	.word	0x0800ea2f
 800e4b4:	0800ea2f 	.word	0x0800ea2f
 800e4b8:	0800e4e1 	.word	0x0800e4e1
 800e4bc:	0800e9cb 	.word	0x0800e9cb
 800e4c0:	0800ea2f 	.word	0x0800ea2f
 800e4c4:	0800ea2f 	.word	0x0800ea2f
 800e4c8:	0800e8e1 	.word	0x0800e8e1
 800e4cc:	0800ea2f 	.word	0x0800ea2f
 800e4d0:	0800e4e1 	.word	0x0800e4e1
 800e4d4:	0800ea2f 	.word	0x0800ea2f
 800e4d8:	0800ea2f 	.word	0x0800ea2f
 800e4dc:	0800e4e1 	.word	0x0800e4e1
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	2b78      	cmp	r3, #120	; 0x78
 800e4e6:	d003      	beq.n	800e4f0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x428>
 800e4e8:	683b      	ldr	r3, [r7, #0]
 800e4ea:	781b      	ldrb	r3, [r3, #0]
 800e4ec:	2b58      	cmp	r3, #88	; 0x58
 800e4ee:	d102      	bne.n	800e4f6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x42e>
          base = 16U;
 800e4f0:	2310      	movs	r3, #16
 800e4f2:	643b      	str	r3, [r7, #64]	; 0x40
 800e4f4:	e013      	b.n	800e51e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'o') {
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	781b      	ldrb	r3, [r3, #0]
 800e4fa:	2b6f      	cmp	r3, #111	; 0x6f
 800e4fc:	d102      	bne.n	800e504 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x43c>
          base =  8U;
 800e4fe:	2308      	movs	r3, #8
 800e500:	643b      	str	r3, [r7, #64]	; 0x40
 800e502:	e00c      	b.n	800e51e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'b') {
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	781b      	ldrb	r3, [r3, #0]
 800e508:	2b62      	cmp	r3, #98	; 0x62
 800e50a:	d102      	bne.n	800e512 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x44a>
          base =  2U;
 800e50c:	2302      	movs	r3, #2
 800e50e:	643b      	str	r3, [r7, #64]	; 0x40
 800e510:	e005      	b.n	800e51e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else {
          base = 10U;
 800e512:	230a      	movs	r3, #10
 800e514:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800e516:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e518:	f023 0310 	bic.w	r3, r3, #16
 800e51c:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	2b58      	cmp	r3, #88	; 0x58
 800e524:	d103      	bne.n	800e52e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x466>
          flags |= FLAGS_UPPERCASE;
 800e526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e528:	f043 0320 	orr.w	r3, r3, #32
 800e52c:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800e52e:	683b      	ldr	r3, [r7, #0]
 800e530:	781b      	ldrb	r3, [r3, #0]
 800e532:	2b69      	cmp	r3, #105	; 0x69
 800e534:	d007      	beq.n	800e546 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	781b      	ldrb	r3, [r3, #0]
 800e53a:	2b64      	cmp	r3, #100	; 0x64
 800e53c:	d003      	beq.n	800e546 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800e53e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e540:	f023 030c 	bic.w	r3, r3, #12
 800e544:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800e546:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d003      	beq.n	800e558 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x490>
          flags &= ~FLAGS_ZEROPAD;
 800e550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e552:	f023 0301 	bic.w	r3, r3, #1
 800e556:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	781b      	ldrb	r3, [r3, #0]
 800e55c:	2b69      	cmp	r3, #105	; 0x69
 800e55e:	d004      	beq.n	800e56a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4a2>
 800e560:	683b      	ldr	r3, [r7, #0]
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	2b64      	cmp	r3, #100	; 0x64
 800e566:	f040 8097 	bne.w	800e698 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x5d0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800e56a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e56c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e570:	2b00      	cmp	r3, #0
 800e572:	d030      	beq.n	800e5d6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800e574:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e578:	3307      	adds	r3, #7
 800e57a:	f023 0307 	bic.w	r3, r3, #7
 800e57e:	f103 0208 	add.w	r2, r3, #8
 800e582:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e58a:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800e58e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e592:	2b00      	cmp	r3, #0
 800e594:	da05      	bge.n	800e5a2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4da>
 800e596:	2100      	movs	r1, #0
 800e598:	4254      	negs	r4, r2
 800e59a:	eb61 0503 	sbc.w	r5, r1, r3
 800e59e:	4622      	mov	r2, r4
 800e5a0:	462b      	mov	r3, r5
 800e5a2:	6979      	ldr	r1, [r7, #20]
 800e5a4:	0fc9      	lsrs	r1, r1, #31
 800e5a6:	b2c9      	uxtb	r1, r1
 800e5a8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e5aa:	2600      	movs	r6, #0
 800e5ac:	4680      	mov	r8, r0
 800e5ae:	46b1      	mov	r9, r6
 800e5b0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e5b2:	9008      	str	r0, [sp, #32]
 800e5b4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e5b6:	9007      	str	r0, [sp, #28]
 800e5b8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e5ba:	9006      	str	r0, [sp, #24]
 800e5bc:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800e5c0:	9102      	str	r1, [sp, #8]
 800e5c2:	e9cd 2300 	strd	r2, r3, [sp]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5ca:	68b9      	ldr	r1, [r7, #8]
 800e5cc:	68f8      	ldr	r0, [r7, #12]
 800e5ce:	f7ff f821 	bl	800d614 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 800e5d2:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
 800e5d4:	e0da      	b.n	800e78c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          else if (flags & FLAGS_LONG) {
 800e5d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d020      	beq.n	800e622 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x55a>
            const long value = va_arg(va, long);
 800e5e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e5e4:	1d1a      	adds	r2, r3, #4
 800e5e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800e5ee:	69fb      	ldr	r3, [r7, #28]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	bfb8      	it	lt
 800e5f4:	425b      	neglt	r3, r3
 800e5f6:	4619      	mov	r1, r3
 800e5f8:	69fb      	ldr	r3, [r7, #28]
 800e5fa:	0fdb      	lsrs	r3, r3, #31
 800e5fc:	b2db      	uxtb	r3, r3
 800e5fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e600:	9205      	str	r2, [sp, #20]
 800e602:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e604:	9204      	str	r2, [sp, #16]
 800e606:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e608:	9203      	str	r2, [sp, #12]
 800e60a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e60c:	9202      	str	r2, [sp, #8]
 800e60e:	9301      	str	r3, [sp, #4]
 800e610:	9100      	str	r1, [sp, #0]
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e616:	68b9      	ldr	r1, [r7, #8]
 800e618:	68f8      	ldr	r0, [r7, #12]
 800e61a:	f7fe ff94 	bl	800d546 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800e61e:	6478      	str	r0, [r7, #68]	; 0x44
          }
 800e620:	e0b4      	b.n	800e78c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800e622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d007      	beq.n	800e63c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x574>
 800e62c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e630:	1d1a      	adds	r2, r3, #4
 800e632:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	b2db      	uxtb	r3, r3
 800e63a:	e012      	b.n	800e662 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 800e63c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e63e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e642:	2b00      	cmp	r3, #0
 800e644:	d007      	beq.n	800e656 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x58e>
 800e646:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e64a:	1d1a      	adds	r2, r3, #4
 800e64c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	b21b      	sxth	r3, r3
 800e654:	e005      	b.n	800e662 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 800e656:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e65a:	1d1a      	adds	r2, r3, #4
 800e65c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800e664:	6a3b      	ldr	r3, [r7, #32]
 800e666:	2b00      	cmp	r3, #0
 800e668:	bfb8      	it	lt
 800e66a:	425b      	neglt	r3, r3
 800e66c:	4619      	mov	r1, r3
 800e66e:	6a3b      	ldr	r3, [r7, #32]
 800e670:	0fdb      	lsrs	r3, r3, #31
 800e672:	b2db      	uxtb	r3, r3
 800e674:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e676:	9205      	str	r2, [sp, #20]
 800e678:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e67a:	9204      	str	r2, [sp, #16]
 800e67c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e67e:	9203      	str	r2, [sp, #12]
 800e680:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e682:	9202      	str	r2, [sp, #8]
 800e684:	9301      	str	r3, [sp, #4]
 800e686:	9100      	str	r1, [sp, #0]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e68c:	68b9      	ldr	r1, [r7, #8]
 800e68e:	68f8      	ldr	r0, [r7, #12]
 800e690:	f7fe ff59 	bl	800d546 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800e694:	6478      	str	r0, [r7, #68]	; 0x44
          }
 800e696:	e079      	b.n	800e78c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800e698:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e69a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d022      	beq.n	800e6e8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x620>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800e6a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e6a6:	3307      	adds	r3, #7
 800e6a8:	f023 0307 	bic.w	r3, r3, #7
 800e6ac:	f103 0208 	add.w	r2, r3, #8
 800e6b0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e6ba:	2000      	movs	r0, #0
 800e6bc:	468a      	mov	sl, r1
 800e6be:	4683      	mov	fp, r0
 800e6c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e6c2:	9108      	str	r1, [sp, #32]
 800e6c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e6c6:	9107      	str	r1, [sp, #28]
 800e6c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e6ca:	9106      	str	r1, [sp, #24]
 800e6cc:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800e6d0:	2100      	movs	r1, #0
 800e6d2:	9102      	str	r1, [sp, #8]
 800e6d4:	e9cd 2300 	strd	r2, r3, [sp]
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6dc:	68b9      	ldr	r1, [r7, #8]
 800e6de:	68f8      	ldr	r0, [r7, #12]
 800e6e0:	f7fe ff98 	bl	800d614 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 800e6e4:	6478      	str	r0, [r7, #68]	; 0x44
 800e6e6:	e051      	b.n	800e78c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800e6e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e6ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d018      	beq.n	800e724 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x65c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800e6f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e6f6:	1d1a      	adds	r2, r3, #4
 800e6f8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e700:	9205      	str	r2, [sp, #20]
 800e702:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e704:	9204      	str	r2, [sp, #16]
 800e706:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e708:	9203      	str	r2, [sp, #12]
 800e70a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e70c:	9202      	str	r2, [sp, #8]
 800e70e:	2200      	movs	r2, #0
 800e710:	9201      	str	r2, [sp, #4]
 800e712:	9300      	str	r3, [sp, #0]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e718:	68b9      	ldr	r1, [r7, #8]
 800e71a:	68f8      	ldr	r0, [r7, #12]
 800e71c:	f7fe ff13 	bl	800d546 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800e720:	6478      	str	r0, [r7, #68]	; 0x44
 800e722:	e033      	b.n	800e78c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800e724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d007      	beq.n	800e73e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x676>
 800e72e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e732:	1d1a      	adds	r2, r3, #4
 800e734:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	b2db      	uxtb	r3, r3
 800e73c:	e012      	b.n	800e764 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 800e73e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e744:	2b00      	cmp	r3, #0
 800e746:	d007      	beq.n	800e758 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x690>
 800e748:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e74c:	1d1a      	adds	r2, r3, #4
 800e74e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	b29b      	uxth	r3, r3
 800e756:	e005      	b.n	800e764 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 800e758:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e75c:	1d1a      	adds	r2, r3, #4
 800e75e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800e766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e768:	9305      	str	r3, [sp, #20]
 800e76a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e76c:	9304      	str	r3, [sp, #16]
 800e76e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e770:	9303      	str	r3, [sp, #12]
 800e772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e774:	9302      	str	r3, [sp, #8]
 800e776:	2300      	movs	r3, #0
 800e778:	9301      	str	r3, [sp, #4]
 800e77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77c:	9300      	str	r3, [sp, #0]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e782:	68b9      	ldr	r1, [r7, #8]
 800e784:	68f8      	ldr	r0, [r7, #12]
 800e786:	f7fe fede 	bl	800d546 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800e78a:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	3301      	adds	r3, #1
 800e790:	603b      	str	r3, [r7, #0]
        break;
 800e792:	e159      	b.n	800ea48 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	781b      	ldrb	r3, [r3, #0]
 800e798:	2b46      	cmp	r3, #70	; 0x46
 800e79a:	d103      	bne.n	800e7a4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6dc>
 800e79c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e79e:	f043 0320 	orr.w	r3, r3, #32
 800e7a2:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800e7a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e7a8:	3307      	adds	r3, #7
 800e7aa:	f023 0307 	bic.w	r3, r3, #7
 800e7ae:	f103 0208 	add.w	r2, r3, #8
 800e7b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e7b6:	ed93 7b00 	vldr	d7, [r3]
 800e7ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7bc:	9302      	str	r3, [sp, #8]
 800e7be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7c0:	9301      	str	r3, [sp, #4]
 800e7c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e7c4:	9300      	str	r3, [sp, #0]
 800e7c6:	eeb0 0a47 	vmov.f32	s0, s14
 800e7ca:	eef0 0a67 	vmov.f32	s1, s15
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e7d2:	68b9      	ldr	r1, [r7, #8]
 800e7d4:	68f8      	ldr	r0, [r7, #12]
 800e7d6:	f7fe ff8b 	bl	800d6f0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800e7da:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800e7dc:	683b      	ldr	r3, [r7, #0]
 800e7de:	3301      	adds	r3, #1
 800e7e0:	603b      	str	r3, [r7, #0]
        break;
 800e7e2:	e131      	b.n	800ea48 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	781b      	ldrb	r3, [r3, #0]
 800e7e8:	2b67      	cmp	r3, #103	; 0x67
 800e7ea:	d003      	beq.n	800e7f4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x72c>
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	781b      	ldrb	r3, [r3, #0]
 800e7f0:	2b47      	cmp	r3, #71	; 0x47
 800e7f2:	d103      	bne.n	800e7fc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x734>
 800e7f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e7fa:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	781b      	ldrb	r3, [r3, #0]
 800e800:	2b45      	cmp	r3, #69	; 0x45
 800e802:	d003      	beq.n	800e80c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x744>
 800e804:	683b      	ldr	r3, [r7, #0]
 800e806:	781b      	ldrb	r3, [r3, #0]
 800e808:	2b47      	cmp	r3, #71	; 0x47
 800e80a:	d103      	bne.n	800e814 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x74c>
 800e80c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e80e:	f043 0320 	orr.w	r3, r3, #32
 800e812:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800e814:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e818:	3307      	adds	r3, #7
 800e81a:	f023 0307 	bic.w	r3, r3, #7
 800e81e:	f103 0208 	add.w	r2, r3, #8
 800e822:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e826:	ed93 7b00 	vldr	d7, [r3]
 800e82a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e82c:	9302      	str	r3, [sp, #8]
 800e82e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e830:	9301      	str	r3, [sp, #4]
 800e832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e834:	9300      	str	r3, [sp, #0]
 800e836:	eeb0 0a47 	vmov.f32	s0, s14
 800e83a:	eef0 0a67 	vmov.f32	s1, s15
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e842:	68b9      	ldr	r1, [r7, #8]
 800e844:	68f8      	ldr	r0, [r7, #12]
 800e846:	f7ff f9b7 	bl	800dbb8 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 800e84a:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	3301      	adds	r3, #1
 800e850:	603b      	str	r3, [r7, #0]
        break;
 800e852:	e0f9      	b.n	800ea48 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800e854:	2301      	movs	r3, #1
 800e856:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800e858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e85a:	f003 0302 	and.w	r3, r3, #2
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d113      	bne.n	800e88a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
          while (l++ < width) {
 800e862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e864:	1c5a      	adds	r2, r3, #1
 800e866:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e868:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e86a:	429a      	cmp	r2, r3
 800e86c:	bf8c      	ite	hi
 800e86e:	2301      	movhi	r3, #1
 800e870:	2300      	movls	r3, #0
 800e872:	b2db      	uxtb	r3, r3
 800e874:	2b00      	cmp	r3, #0
 800e876:	d008      	beq.n	800e88a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
            out(' ', buffer, idx++, maxlen);
 800e878:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e87a:	1c53      	adds	r3, r2, #1
 800e87c:	647b      	str	r3, [r7, #68]	; 0x44
 800e87e:	68fe      	ldr	r6, [r7, #12]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	68b9      	ldr	r1, [r7, #8]
 800e884:	2020      	movs	r0, #32
 800e886:	47b0      	blx	r6
          while (l++ < width) {
 800e888:	e7eb      	b.n	800e862 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800e88a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e88e:	1d1a      	adds	r2, r3, #4
 800e890:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	b2d8      	uxtb	r0, r3
 800e898:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e89a:	1c53      	adds	r3, r2, #1
 800e89c:	647b      	str	r3, [r7, #68]	; 0x44
 800e89e:	68fe      	ldr	r6, [r7, #12]
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	68b9      	ldr	r1, [r7, #8]
 800e8a4:	47b0      	blx	r6
        // post padding
        if (flags & FLAGS_LEFT) {
 800e8a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e8a8:	f003 0302 	and.w	r3, r3, #2
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d013      	beq.n	800e8d8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
          while (l++ < width) {
 800e8b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8b2:	1c5a      	adds	r2, r3, #1
 800e8b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e8b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e8b8:	429a      	cmp	r2, r3
 800e8ba:	bf8c      	ite	hi
 800e8bc:	2301      	movhi	r3, #1
 800e8be:	2300      	movls	r3, #0
 800e8c0:	b2db      	uxtb	r3, r3
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d008      	beq.n	800e8d8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
            out(' ', buffer, idx++, maxlen);
 800e8c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e8c8:	1c53      	adds	r3, r2, #1
 800e8ca:	647b      	str	r3, [r7, #68]	; 0x44
 800e8cc:	68fe      	ldr	r6, [r7, #12]
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	68b9      	ldr	r1, [r7, #8]
 800e8d2:	2020      	movs	r0, #32
 800e8d4:	47b0      	blx	r6
          while (l++ < width) {
 800e8d6:	e7eb      	b.n	800e8b0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7e8>
          }
        }
        format++;
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	3301      	adds	r3, #1
 800e8dc:	603b      	str	r3, [r7, #0]
        break;
 800e8de:	e0b3      	b.n	800ea48 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800e8e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e8e4:	1d1a      	adds	r2, r3, #4
 800e8e6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800e8ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d001      	beq.n	800e8f8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x830>
 800e8f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8f6:	e001      	b.n	800e8fc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x834>
 800e8f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e900:	f7fe fc9b 	bl	800d23a <_ZL10_strnlen_sPKcj>
 800e904:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800e906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d007      	beq.n	800e920 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x858>
          l = (l < precision ? l : precision);
 800e910:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e914:	429a      	cmp	r2, r3
 800e916:	d201      	bcs.n	800e91c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x854>
 800e918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e91a:	e000      	b.n	800e91e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x856>
 800e91c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e91e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 800e920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e922:	f003 0302 	and.w	r3, r3, #2
 800e926:	2b00      	cmp	r3, #0
 800e928:	d113      	bne.n	800e952 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
          while (l++ < width) {
 800e92a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e92c:	1c5a      	adds	r2, r3, #1
 800e92e:	637a      	str	r2, [r7, #52]	; 0x34
 800e930:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e932:	429a      	cmp	r2, r3
 800e934:	bf8c      	ite	hi
 800e936:	2301      	movhi	r3, #1
 800e938:	2300      	movls	r3, #0
 800e93a:	b2db      	uxtb	r3, r3
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d008      	beq.n	800e952 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
            out(' ', buffer, idx++, maxlen);
 800e940:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e942:	1c53      	adds	r3, r2, #1
 800e944:	647b      	str	r3, [r7, #68]	; 0x44
 800e946:	68fe      	ldr	r6, [r7, #12]
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	68b9      	ldr	r1, [r7, #8]
 800e94c:	2020      	movs	r0, #32
 800e94e:	47b0      	blx	r6
          while (l++ < width) {
 800e950:	e7eb      	b.n	800e92a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x862>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800e952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e954:	781b      	ldrb	r3, [r3, #0]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d00b      	beq.n	800e972 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 800e95a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e95c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e960:	2b00      	cmp	r3, #0
 800e962:	d004      	beq.n	800e96e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8a6>
 800e964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e966:	1e5a      	subs	r2, r3, #1
 800e968:	64fa      	str	r2, [r7, #76]	; 0x4c
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d001      	beq.n	800e972 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 800e96e:	2301      	movs	r3, #1
 800e970:	e000      	b.n	800e974 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8ac>
 800e972:	2300      	movs	r3, #0
 800e974:	2b00      	cmp	r3, #0
 800e976:	d00b      	beq.n	800e990 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8c8>
          out(*(p++), buffer, idx++, maxlen);
 800e978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e97a:	1c5a      	adds	r2, r3, #1
 800e97c:	63ba      	str	r2, [r7, #56]	; 0x38
 800e97e:	7818      	ldrb	r0, [r3, #0]
 800e980:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e982:	1c53      	adds	r3, r2, #1
 800e984:	647b      	str	r3, [r7, #68]	; 0x44
 800e986:	68fe      	ldr	r6, [r7, #12]
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	68b9      	ldr	r1, [r7, #8]
 800e98c:	47b0      	blx	r6
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800e98e:	e7e0      	b.n	800e952 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800e990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e992:	f003 0302 	and.w	r3, r3, #2
 800e996:	2b00      	cmp	r3, #0
 800e998:	d013      	beq.n	800e9c2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
          while (l++ < width) {
 800e99a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e99c:	1c5a      	adds	r2, r3, #1
 800e99e:	637a      	str	r2, [r7, #52]	; 0x34
 800e9a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	bf8c      	ite	hi
 800e9a6:	2301      	movhi	r3, #1
 800e9a8:	2300      	movls	r3, #0
 800e9aa:	b2db      	uxtb	r3, r3
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d008      	beq.n	800e9c2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
            out(' ', buffer, idx++, maxlen);
 800e9b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e9b2:	1c53      	adds	r3, r2, #1
 800e9b4:	647b      	str	r3, [r7, #68]	; 0x44
 800e9b6:	68fe      	ldr	r6, [r7, #12]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	68b9      	ldr	r1, [r7, #8]
 800e9bc:	2020      	movs	r0, #32
 800e9be:	47b0      	blx	r6
          while (l++ < width) {
 800e9c0:	e7eb      	b.n	800e99a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8d2>
          }
        }
        format++;
 800e9c2:	683b      	ldr	r3, [r7, #0]
 800e9c4:	3301      	adds	r3, #1
 800e9c6:	603b      	str	r3, [r7, #0]
        break;
 800e9c8:	e03e      	b.n	800ea48 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800e9ca:	2308      	movs	r3, #8
 800e9cc:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800e9ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9d0:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800e9d4:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800e9dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e9e0:	1d1a      	adds	r2, r3, #4
 800e9e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	461a      	mov	r2, r3
 800e9ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e9ec:	9305      	str	r3, [sp, #20]
 800e9ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e9f0:	9304      	str	r3, [sp, #16]
 800e9f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e9f4:	9303      	str	r3, [sp, #12]
 800e9f6:	2310      	movs	r3, #16
 800e9f8:	9302      	str	r3, [sp, #8]
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	9301      	str	r3, [sp, #4]
 800e9fe:	9200      	str	r2, [sp, #0]
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea04:	68b9      	ldr	r1, [r7, #8]
 800ea06:	68f8      	ldr	r0, [r7, #12]
 800ea08:	f7fe fd9d 	bl	800d546 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800ea0c:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	3301      	adds	r3, #1
 800ea12:	603b      	str	r3, [r7, #0]
        break;
 800ea14:	e018      	b.n	800ea48 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800ea16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea18:	1c53      	adds	r3, r2, #1
 800ea1a:	647b      	str	r3, [r7, #68]	; 0x44
 800ea1c:	68fe      	ldr	r6, [r7, #12]
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	68b9      	ldr	r1, [r7, #8]
 800ea22:	2025      	movs	r0, #37	; 0x25
 800ea24:	47b0      	blx	r6
        format++;
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	3301      	adds	r3, #1
 800ea2a:	603b      	str	r3, [r7, #0]
        break;
 800ea2c:	e00c      	b.n	800ea48 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>

      default :
        out(*format, buffer, idx++, maxlen);
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	7818      	ldrb	r0, [r3, #0]
 800ea32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea34:	1c53      	adds	r3, r2, #1
 800ea36:	647b      	str	r3, [r7, #68]	; 0x44
 800ea38:	68fe      	ldr	r6, [r7, #12]
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	68b9      	ldr	r1, [r7, #8]
 800ea3e:	47b0      	blx	r6
        format++;
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	3301      	adds	r3, #1
 800ea44:	603b      	str	r3, [r7, #0]
        break;
 800ea46:	bf00      	nop
  while (*format)
 800ea48:	f7ff bb4d 	b.w	800e0e6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800ea4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d302      	bcc.n	800ea5a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x992>
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	1e5a      	subs	r2, r3, #1
 800ea58:	e000      	b.n	800ea5c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x994>
 800ea5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea5c:	68fc      	ldr	r4, [r7, #12]
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	68b9      	ldr	r1, [r7, #8]
 800ea62:	2000      	movs	r0, #0
 800ea64:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800ea66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	375c      	adds	r7, #92	; 0x5c
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea72:	bf00      	nop

0800ea74 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 800ea74:	b40f      	push	{r0, r1, r2, r3}
 800ea76:	b580      	push	{r7, lr}
 800ea78:	b086      	sub	sp, #24
 800ea7a:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 800ea7c:	f107 031c 	add.w	r3, r7, #28
 800ea80:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800ea82:	1d39      	adds	r1, r7, #4
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	9300      	str	r3, [sp, #0]
 800ea88:	69bb      	ldr	r3, [r7, #24]
 800ea8a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea8e:	4806      	ldr	r0, [pc, #24]	; (800eaa8 <printf_+0x34>)
 800ea90:	f7ff fb1a 	bl	800e0c8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>
 800ea94:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800ea96:	68fb      	ldr	r3, [r7, #12]
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3710      	adds	r7, #16
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800eaa2:	b004      	add	sp, #16
 800eaa4:	4770      	bx	lr
 800eaa6:	bf00      	nop
 800eaa8:	0800d215 	.word	0x0800d215

0800eaac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800eaac:	b480      	push	{r7}
 800eaae:	b083      	sub	sp, #12
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800eab4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800eab8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800eabc:	f003 0301 	and.w	r3, r3, #1
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d009      	beq.n	800ead8 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800eac4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800eac8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800eacc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d001      	beq.n	800ead8 <ITM_SendChar+0x2c>
 800ead4:	2301      	movs	r3, #1
 800ead6:	e000      	b.n	800eada <ITM_SendChar+0x2e>
 800ead8:	2300      	movs	r3, #0
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d010      	beq.n	800eb00 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800eade:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	bf0c      	ite	eq
 800eae8:	2301      	moveq	r3, #1
 800eaea:	2300      	movne	r3, #0
 800eaec:	b2db      	uxtb	r3, r3
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d001      	beq.n	800eaf6 <ITM_SendChar+0x4a>
    {
      __NOP();
 800eaf2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800eaf4:	e7f3      	b.n	800eade <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800eaf6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800eafa:	687a      	ldr	r2, [r7, #4]
 800eafc:	b2d2      	uxtb	r2, r2
 800eafe:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800eb00:	687b      	ldr	r3, [r7, #4]
}
 800eb02:	4618      	mov	r0, r3
 800eb04:	370c      	adds	r7, #12
 800eb06:	46bd      	mov	sp, r7
 800eb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0c:	4770      	bx	lr

0800eb0e <_putchar>:
 */

#include "estdio.hpp"
#include "main.h"

void _putchar(char character) {
 800eb0e:	b580      	push	{r7, lr}
 800eb10:	b082      	sub	sp, #8
 800eb12:	af00      	add	r7, sp, #0
 800eb14:	4603      	mov	r3, r0
 800eb16:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(character);
 800eb18:	79fb      	ldrb	r3, [r7, #7]
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	f7ff ffc6 	bl	800eaac <ITM_SendChar>
}
 800eb20:	bf00      	nop
 800eb22:	3708      	adds	r7, #8
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <__NVIC_SetPriority>:
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b083      	sub	sp, #12
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	4603      	mov	r3, r0
 800eb30:	6039      	str	r1, [r7, #0]
 800eb32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800eb34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	db0a      	blt.n	800eb52 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eb3c:	683b      	ldr	r3, [r7, #0]
 800eb3e:	b2da      	uxtb	r2, r3
 800eb40:	490c      	ldr	r1, [pc, #48]	; (800eb74 <__NVIC_SetPriority+0x4c>)
 800eb42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eb46:	0112      	lsls	r2, r2, #4
 800eb48:	b2d2      	uxtb	r2, r2
 800eb4a:	440b      	add	r3, r1
 800eb4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800eb50:	e00a      	b.n	800eb68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	b2da      	uxtb	r2, r3
 800eb56:	4908      	ldr	r1, [pc, #32]	; (800eb78 <__NVIC_SetPriority+0x50>)
 800eb58:	79fb      	ldrb	r3, [r7, #7]
 800eb5a:	f003 030f 	and.w	r3, r3, #15
 800eb5e:	3b04      	subs	r3, #4
 800eb60:	0112      	lsls	r2, r2, #4
 800eb62:	b2d2      	uxtb	r2, r2
 800eb64:	440b      	add	r3, r1
 800eb66:	761a      	strb	r2, [r3, #24]
}
 800eb68:	bf00      	nop
 800eb6a:	370c      	adds	r7, #12
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr
 800eb74:	e000e100 	.word	0xe000e100
 800eb78:	e000ed00 	.word	0xe000ed00

0800eb7c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800eb80:	4b05      	ldr	r3, [pc, #20]	; (800eb98 <SysTick_Handler+0x1c>)
 800eb82:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800eb84:	f003 f8a8 	bl	8011cd8 <xTaskGetSchedulerState>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	2b01      	cmp	r3, #1
 800eb8c:	d001      	beq.n	800eb92 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800eb8e:	f004 f8d3 	bl	8012d38 <xPortSysTickHandler>
  }
}
 800eb92:	bf00      	nop
 800eb94:	bd80      	pop	{r7, pc}
 800eb96:	bf00      	nop
 800eb98:	e000e010 	.word	0xe000e010

0800eb9c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800eba0:	2100      	movs	r1, #0
 800eba2:	f06f 0004 	mvn.w	r0, #4
 800eba6:	f7ff ffbf 	bl	800eb28 <__NVIC_SetPriority>
#endif
}
 800ebaa:	bf00      	nop
 800ebac:	bd80      	pop	{r7, pc}
	...

0800ebb0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ebb0:	b480      	push	{r7}
 800ebb2:	b083      	sub	sp, #12
 800ebb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebb6:	f3ef 8305 	mrs	r3, IPSR
 800ebba:	603b      	str	r3, [r7, #0]
  return(result);
 800ebbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d003      	beq.n	800ebca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ebc2:	f06f 0305 	mvn.w	r3, #5
 800ebc6:	607b      	str	r3, [r7, #4]
 800ebc8:	e00c      	b.n	800ebe4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ebca:	4b0a      	ldr	r3, [pc, #40]	; (800ebf4 <osKernelInitialize+0x44>)
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d105      	bne.n	800ebde <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ebd2:	4b08      	ldr	r3, [pc, #32]	; (800ebf4 <osKernelInitialize+0x44>)
 800ebd4:	2201      	movs	r2, #1
 800ebd6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ebd8:	2300      	movs	r3, #0
 800ebda:	607b      	str	r3, [r7, #4]
 800ebdc:	e002      	b.n	800ebe4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ebde:	f04f 33ff 	mov.w	r3, #4294967295
 800ebe2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ebe4:	687b      	ldr	r3, [r7, #4]
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	370c      	adds	r7, #12
 800ebea:	46bd      	mov	sp, r7
 800ebec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf0:	4770      	bx	lr
 800ebf2:	bf00      	nop
 800ebf4:	20001344 	.word	0x20001344

0800ebf8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b082      	sub	sp, #8
 800ebfc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ebfe:	f3ef 8305 	mrs	r3, IPSR
 800ec02:	603b      	str	r3, [r7, #0]
  return(result);
 800ec04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d003      	beq.n	800ec12 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ec0a:	f06f 0305 	mvn.w	r3, #5
 800ec0e:	607b      	str	r3, [r7, #4]
 800ec10:	e010      	b.n	800ec34 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ec12:	4b0b      	ldr	r3, [pc, #44]	; (800ec40 <osKernelStart+0x48>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	2b01      	cmp	r3, #1
 800ec18:	d109      	bne.n	800ec2e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ec1a:	f7ff ffbf 	bl	800eb9c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ec1e:	4b08      	ldr	r3, [pc, #32]	; (800ec40 <osKernelStart+0x48>)
 800ec20:	2202      	movs	r2, #2
 800ec22:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ec24:	f002 fb98 	bl	8011358 <vTaskStartScheduler>
      stat = osOK;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	607b      	str	r3, [r7, #4]
 800ec2c:	e002      	b.n	800ec34 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ec2e:	f04f 33ff 	mov.w	r3, #4294967295
 800ec32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ec34:	687b      	ldr	r3, [r7, #4]
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3708      	adds	r7, #8
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	20001344 	.word	0x20001344

0800ec44 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b08e      	sub	sp, #56	; 0x38
 800ec48:	af04      	add	r7, sp, #16
 800ec4a:	60f8      	str	r0, [r7, #12]
 800ec4c:	60b9      	str	r1, [r7, #8]
 800ec4e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ec50:	2300      	movs	r3, #0
 800ec52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec54:	f3ef 8305 	mrs	r3, IPSR
 800ec58:	617b      	str	r3, [r7, #20]
  return(result);
 800ec5a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d17e      	bne.n	800ed5e <osThreadNew+0x11a>
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d07b      	beq.n	800ed5e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ec66:	2380      	movs	r3, #128	; 0x80
 800ec68:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800ec6a:	2318      	movs	r3, #24
 800ec6c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800ec72:	f04f 33ff 	mov.w	r3, #4294967295
 800ec76:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d045      	beq.n	800ed0a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d002      	beq.n	800ec8c <osThreadNew+0x48>
        name = attr->name;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	699b      	ldr	r3, [r3, #24]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d002      	beq.n	800ec9a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	699b      	ldr	r3, [r3, #24]
 800ec98:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800ec9a:	69fb      	ldr	r3, [r7, #28]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d008      	beq.n	800ecb2 <osThreadNew+0x6e>
 800eca0:	69fb      	ldr	r3, [r7, #28]
 800eca2:	2b38      	cmp	r3, #56	; 0x38
 800eca4:	d805      	bhi.n	800ecb2 <osThreadNew+0x6e>
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	685b      	ldr	r3, [r3, #4]
 800ecaa:	f003 0301 	and.w	r3, r3, #1
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d001      	beq.n	800ecb6 <osThreadNew+0x72>
        return (NULL);
 800ecb2:	2300      	movs	r3, #0
 800ecb4:	e054      	b.n	800ed60 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	695b      	ldr	r3, [r3, #20]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d003      	beq.n	800ecc6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	695b      	ldr	r3, [r3, #20]
 800ecc2:	089b      	lsrs	r3, r3, #2
 800ecc4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	689b      	ldr	r3, [r3, #8]
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d00e      	beq.n	800ecec <osThreadNew+0xa8>
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	68db      	ldr	r3, [r3, #12]
 800ecd2:	2bbf      	cmp	r3, #191	; 0xbf
 800ecd4:	d90a      	bls.n	800ecec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d006      	beq.n	800ecec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	695b      	ldr	r3, [r3, #20]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d002      	beq.n	800ecec <osThreadNew+0xa8>
        mem = 1;
 800ece6:	2301      	movs	r3, #1
 800ece8:	61bb      	str	r3, [r7, #24]
 800ecea:	e010      	b.n	800ed0e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	689b      	ldr	r3, [r3, #8]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d10c      	bne.n	800ed0e <osThreadNew+0xca>
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	68db      	ldr	r3, [r3, #12]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d108      	bne.n	800ed0e <osThreadNew+0xca>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	691b      	ldr	r3, [r3, #16]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d104      	bne.n	800ed0e <osThreadNew+0xca>
          mem = 0;
 800ed04:	2300      	movs	r3, #0
 800ed06:	61bb      	str	r3, [r7, #24]
 800ed08:	e001      	b.n	800ed0e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ed0e:	69bb      	ldr	r3, [r7, #24]
 800ed10:	2b01      	cmp	r3, #1
 800ed12:	d110      	bne.n	800ed36 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800ed18:	687a      	ldr	r2, [r7, #4]
 800ed1a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ed1c:	9202      	str	r2, [sp, #8]
 800ed1e:	9301      	str	r3, [sp, #4]
 800ed20:	69fb      	ldr	r3, [r7, #28]
 800ed22:	9300      	str	r3, [sp, #0]
 800ed24:	68bb      	ldr	r3, [r7, #8]
 800ed26:	6a3a      	ldr	r2, [r7, #32]
 800ed28:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ed2a:	68f8      	ldr	r0, [r7, #12]
 800ed2c:	f002 f924 	bl	8010f78 <xTaskCreateStatic>
 800ed30:	4603      	mov	r3, r0
 800ed32:	613b      	str	r3, [r7, #16]
 800ed34:	e013      	b.n	800ed5e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800ed36:	69bb      	ldr	r3, [r7, #24]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d110      	bne.n	800ed5e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ed3c:	6a3b      	ldr	r3, [r7, #32]
 800ed3e:	b29a      	uxth	r2, r3
 800ed40:	f107 0310 	add.w	r3, r7, #16
 800ed44:	9301      	str	r3, [sp, #4]
 800ed46:	69fb      	ldr	r3, [r7, #28]
 800ed48:	9300      	str	r3, [sp, #0]
 800ed4a:	68bb      	ldr	r3, [r7, #8]
 800ed4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ed4e:	68f8      	ldr	r0, [r7, #12]
 800ed50:	f002 f96f 	bl	8011032 <xTaskCreate>
 800ed54:	4603      	mov	r3, r0
 800ed56:	2b01      	cmp	r3, #1
 800ed58:	d001      	beq.n	800ed5e <osThreadNew+0x11a>
            hTask = NULL;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ed5e:	693b      	ldr	r3, [r7, #16]
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3728      	adds	r7, #40	; 0x28
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd80      	pop	{r7, pc}

0800ed68 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b084      	sub	sp, #16
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed70:	f3ef 8305 	mrs	r3, IPSR
 800ed74:	60bb      	str	r3, [r7, #8]
  return(result);
 800ed76:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d003      	beq.n	800ed84 <osDelay+0x1c>
    stat = osErrorISR;
 800ed7c:	f06f 0305 	mvn.w	r3, #5
 800ed80:	60fb      	str	r3, [r7, #12]
 800ed82:	e007      	b.n	800ed94 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ed84:	2300      	movs	r3, #0
 800ed86:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d002      	beq.n	800ed94 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f002 faae 	bl	80112f0 <vTaskDelay>
    }
  }

  return (stat);
 800ed94:	68fb      	ldr	r3, [r7, #12]
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3710      	adds	r7, #16
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}

0800ed9e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ed9e:	b580      	push	{r7, lr}
 800eda0:	b088      	sub	sp, #32
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800eda6:	2300      	movs	r3, #0
 800eda8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800edaa:	f3ef 8305 	mrs	r3, IPSR
 800edae:	60bb      	str	r3, [r7, #8]
  return(result);
 800edb0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d174      	bne.n	800eea0 <osMutexNew+0x102>
    if (attr != NULL) {
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d003      	beq.n	800edc4 <osMutexNew+0x26>
      type = attr->attr_bits;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	61bb      	str	r3, [r7, #24]
 800edc2:	e001      	b.n	800edc8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800edc4:	2300      	movs	r3, #0
 800edc6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800edc8:	69bb      	ldr	r3, [r7, #24]
 800edca:	f003 0301 	and.w	r3, r3, #1
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d002      	beq.n	800edd8 <osMutexNew+0x3a>
      rmtx = 1U;
 800edd2:	2301      	movs	r3, #1
 800edd4:	617b      	str	r3, [r7, #20]
 800edd6:	e001      	b.n	800eddc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800edd8:	2300      	movs	r3, #0
 800edda:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800eddc:	69bb      	ldr	r3, [r7, #24]
 800edde:	f003 0308 	and.w	r3, r3, #8
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d15c      	bne.n	800eea0 <osMutexNew+0x102>
      mem = -1;
 800ede6:	f04f 33ff 	mov.w	r3, #4294967295
 800edea:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d015      	beq.n	800ee1e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	689b      	ldr	r3, [r3, #8]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d006      	beq.n	800ee08 <osMutexNew+0x6a>
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	68db      	ldr	r3, [r3, #12]
 800edfe:	2b4f      	cmp	r3, #79	; 0x4f
 800ee00:	d902      	bls.n	800ee08 <osMutexNew+0x6a>
          mem = 1;
 800ee02:	2301      	movs	r3, #1
 800ee04:	613b      	str	r3, [r7, #16]
 800ee06:	e00c      	b.n	800ee22 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	689b      	ldr	r3, [r3, #8]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d108      	bne.n	800ee22 <osMutexNew+0x84>
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	68db      	ldr	r3, [r3, #12]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d104      	bne.n	800ee22 <osMutexNew+0x84>
            mem = 0;
 800ee18:	2300      	movs	r3, #0
 800ee1a:	613b      	str	r3, [r7, #16]
 800ee1c:	e001      	b.n	800ee22 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800ee1e:	2300      	movs	r3, #0
 800ee20:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800ee22:	693b      	ldr	r3, [r7, #16]
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	d112      	bne.n	800ee4e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800ee28:	697b      	ldr	r3, [r7, #20]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d007      	beq.n	800ee3e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	689b      	ldr	r3, [r3, #8]
 800ee32:	4619      	mov	r1, r3
 800ee34:	2004      	movs	r0, #4
 800ee36:	f000 fd88 	bl	800f94a <xQueueCreateMutexStatic>
 800ee3a:	61f8      	str	r0, [r7, #28]
 800ee3c:	e016      	b.n	800ee6c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	689b      	ldr	r3, [r3, #8]
 800ee42:	4619      	mov	r1, r3
 800ee44:	2001      	movs	r0, #1
 800ee46:	f000 fd80 	bl	800f94a <xQueueCreateMutexStatic>
 800ee4a:	61f8      	str	r0, [r7, #28]
 800ee4c:	e00e      	b.n	800ee6c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800ee4e:	693b      	ldr	r3, [r7, #16]
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d10b      	bne.n	800ee6c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800ee54:	697b      	ldr	r3, [r7, #20]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d004      	beq.n	800ee64 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800ee5a:	2004      	movs	r0, #4
 800ee5c:	f000 fd5d 	bl	800f91a <xQueueCreateMutex>
 800ee60:	61f8      	str	r0, [r7, #28]
 800ee62:	e003      	b.n	800ee6c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800ee64:	2001      	movs	r0, #1
 800ee66:	f000 fd58 	bl	800f91a <xQueueCreateMutex>
 800ee6a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800ee6c:	69fb      	ldr	r3, [r7, #28]
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d00c      	beq.n	800ee8c <osMutexNew+0xee>
        if (attr != NULL) {
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d003      	beq.n	800ee80 <osMutexNew+0xe2>
          name = attr->name;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	60fb      	str	r3, [r7, #12]
 800ee7e:	e001      	b.n	800ee84 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800ee80:	2300      	movs	r3, #0
 800ee82:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800ee84:	68f9      	ldr	r1, [r7, #12]
 800ee86:	69f8      	ldr	r0, [r7, #28]
 800ee88:	f001 fc68 	bl	801075c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800ee8c:	69fb      	ldr	r3, [r7, #28]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d006      	beq.n	800eea0 <osMutexNew+0x102>
 800ee92:	697b      	ldr	r3, [r7, #20]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d003      	beq.n	800eea0 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800ee98:	69fb      	ldr	r3, [r7, #28]
 800ee9a:	f043 0301 	orr.w	r3, r3, #1
 800ee9e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800eea0:	69fb      	ldr	r3, [r7, #28]
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	3720      	adds	r7, #32
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}

0800eeaa <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800eeaa:	b580      	push	{r7, lr}
 800eeac:	b086      	sub	sp, #24
 800eeae:	af00      	add	r7, sp, #0
 800eeb0:	6078      	str	r0, [r7, #4]
 800eeb2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f023 0301 	bic.w	r3, r3, #1
 800eeba:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f003 0301 	and.w	r3, r3, #1
 800eec2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800eec4:	2300      	movs	r3, #0
 800eec6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eec8:	f3ef 8305 	mrs	r3, IPSR
 800eecc:	60bb      	str	r3, [r7, #8]
  return(result);
 800eece:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d003      	beq.n	800eedc <osMutexAcquire+0x32>
    stat = osErrorISR;
 800eed4:	f06f 0305 	mvn.w	r3, #5
 800eed8:	617b      	str	r3, [r7, #20]
 800eeda:	e02c      	b.n	800ef36 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800eedc:	693b      	ldr	r3, [r7, #16]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d103      	bne.n	800eeea <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800eee2:	f06f 0303 	mvn.w	r3, #3
 800eee6:	617b      	str	r3, [r7, #20]
 800eee8:	e025      	b.n	800ef36 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d011      	beq.n	800ef14 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800eef0:	6839      	ldr	r1, [r7, #0]
 800eef2:	6938      	ldr	r0, [r7, #16]
 800eef4:	f000 fd78 	bl	800f9e8 <xQueueTakeMutexRecursive>
 800eef8:	4603      	mov	r3, r0
 800eefa:	2b01      	cmp	r3, #1
 800eefc:	d01b      	beq.n	800ef36 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d003      	beq.n	800ef0c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800ef04:	f06f 0301 	mvn.w	r3, #1
 800ef08:	617b      	str	r3, [r7, #20]
 800ef0a:	e014      	b.n	800ef36 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ef0c:	f06f 0302 	mvn.w	r3, #2
 800ef10:	617b      	str	r3, [r7, #20]
 800ef12:	e010      	b.n	800ef36 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ef14:	6839      	ldr	r1, [r7, #0]
 800ef16:	6938      	ldr	r0, [r7, #16]
 800ef18:	f001 f90c 	bl	8010134 <xQueueSemaphoreTake>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b01      	cmp	r3, #1
 800ef20:	d009      	beq.n	800ef36 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d003      	beq.n	800ef30 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800ef28:	f06f 0301 	mvn.w	r3, #1
 800ef2c:	617b      	str	r3, [r7, #20]
 800ef2e:	e002      	b.n	800ef36 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ef30:	f06f 0302 	mvn.w	r3, #2
 800ef34:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800ef36:	697b      	ldr	r3, [r7, #20]
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3718      	adds	r7, #24
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b086      	sub	sp, #24
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f023 0301 	bic.w	r3, r3, #1
 800ef4e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f003 0301 	and.w	r3, r3, #1
 800ef56:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ef5c:	f3ef 8305 	mrs	r3, IPSR
 800ef60:	60bb      	str	r3, [r7, #8]
  return(result);
 800ef62:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d003      	beq.n	800ef70 <osMutexRelease+0x30>
    stat = osErrorISR;
 800ef68:	f06f 0305 	mvn.w	r3, #5
 800ef6c:	617b      	str	r3, [r7, #20]
 800ef6e:	e01f      	b.n	800efb0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800ef70:	693b      	ldr	r3, [r7, #16]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d103      	bne.n	800ef7e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800ef76:	f06f 0303 	mvn.w	r3, #3
 800ef7a:	617b      	str	r3, [r7, #20]
 800ef7c:	e018      	b.n	800efb0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d009      	beq.n	800ef98 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ef84:	6938      	ldr	r0, [r7, #16]
 800ef86:	f000 fcfb 	bl	800f980 <xQueueGiveMutexRecursive>
 800ef8a:	4603      	mov	r3, r0
 800ef8c:	2b01      	cmp	r3, #1
 800ef8e:	d00f      	beq.n	800efb0 <osMutexRelease+0x70>
        stat = osErrorResource;
 800ef90:	f06f 0302 	mvn.w	r3, #2
 800ef94:	617b      	str	r3, [r7, #20]
 800ef96:	e00b      	b.n	800efb0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ef98:	2300      	movs	r3, #0
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	2100      	movs	r1, #0
 800ef9e:	6938      	ldr	r0, [r7, #16]
 800efa0:	f000 fdc2 	bl	800fb28 <xQueueGenericSend>
 800efa4:	4603      	mov	r3, r0
 800efa6:	2b01      	cmp	r3, #1
 800efa8:	d002      	beq.n	800efb0 <osMutexRelease+0x70>
        stat = osErrorResource;
 800efaa:	f06f 0302 	mvn.w	r3, #2
 800efae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800efb0:	697b      	ldr	r3, [r7, #20]
}
 800efb2:	4618      	mov	r0, r3
 800efb4:	3718      	adds	r7, #24
 800efb6:	46bd      	mov	sp, r7
 800efb8:	bd80      	pop	{r7, pc}

0800efba <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800efba:	b580      	push	{r7, lr}
 800efbc:	b08a      	sub	sp, #40	; 0x28
 800efbe:	af02      	add	r7, sp, #8
 800efc0:	60f8      	str	r0, [r7, #12]
 800efc2:	60b9      	str	r1, [r7, #8]
 800efc4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800efc6:	2300      	movs	r3, #0
 800efc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efca:	f3ef 8305 	mrs	r3, IPSR
 800efce:	613b      	str	r3, [r7, #16]
  return(result);
 800efd0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d175      	bne.n	800f0c2 <osSemaphoreNew+0x108>
 800efd6:	68fb      	ldr	r3, [r7, #12]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d072      	beq.n	800f0c2 <osSemaphoreNew+0x108>
 800efdc:	68ba      	ldr	r2, [r7, #8]
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	429a      	cmp	r2, r3
 800efe2:	d86e      	bhi.n	800f0c2 <osSemaphoreNew+0x108>
    mem = -1;
 800efe4:	f04f 33ff 	mov.w	r3, #4294967295
 800efe8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d015      	beq.n	800f01c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	689b      	ldr	r3, [r3, #8]
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d006      	beq.n	800f006 <osSemaphoreNew+0x4c>
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	2b4f      	cmp	r3, #79	; 0x4f
 800effe:	d902      	bls.n	800f006 <osSemaphoreNew+0x4c>
        mem = 1;
 800f000:	2301      	movs	r3, #1
 800f002:	61bb      	str	r3, [r7, #24]
 800f004:	e00c      	b.n	800f020 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	689b      	ldr	r3, [r3, #8]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d108      	bne.n	800f020 <osSemaphoreNew+0x66>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	68db      	ldr	r3, [r3, #12]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d104      	bne.n	800f020 <osSemaphoreNew+0x66>
          mem = 0;
 800f016:	2300      	movs	r3, #0
 800f018:	61bb      	str	r3, [r7, #24]
 800f01a:	e001      	b.n	800f020 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800f01c:	2300      	movs	r3, #0
 800f01e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800f020:	69bb      	ldr	r3, [r7, #24]
 800f022:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f026:	d04c      	beq.n	800f0c2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	2b01      	cmp	r3, #1
 800f02c:	d128      	bne.n	800f080 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800f02e:	69bb      	ldr	r3, [r7, #24]
 800f030:	2b01      	cmp	r3, #1
 800f032:	d10a      	bne.n	800f04a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	689b      	ldr	r3, [r3, #8]
 800f038:	2203      	movs	r2, #3
 800f03a:	9200      	str	r2, [sp, #0]
 800f03c:	2200      	movs	r2, #0
 800f03e:	2100      	movs	r1, #0
 800f040:	2001      	movs	r0, #1
 800f042:	f000 fb7b 	bl	800f73c <xQueueGenericCreateStatic>
 800f046:	61f8      	str	r0, [r7, #28]
 800f048:	e005      	b.n	800f056 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800f04a:	2203      	movs	r2, #3
 800f04c:	2100      	movs	r1, #0
 800f04e:	2001      	movs	r0, #1
 800f050:	f000 fbec 	bl	800f82c <xQueueGenericCreate>
 800f054:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f056:	69fb      	ldr	r3, [r7, #28]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d022      	beq.n	800f0a2 <osSemaphoreNew+0xe8>
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d01f      	beq.n	800f0a2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f062:	2300      	movs	r3, #0
 800f064:	2200      	movs	r2, #0
 800f066:	2100      	movs	r1, #0
 800f068:	69f8      	ldr	r0, [r7, #28]
 800f06a:	f000 fd5d 	bl	800fb28 <xQueueGenericSend>
 800f06e:	4603      	mov	r3, r0
 800f070:	2b01      	cmp	r3, #1
 800f072:	d016      	beq.n	800f0a2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800f074:	69f8      	ldr	r0, [r7, #28]
 800f076:	f001 fa25 	bl	80104c4 <vQueueDelete>
            hSemaphore = NULL;
 800f07a:	2300      	movs	r3, #0
 800f07c:	61fb      	str	r3, [r7, #28]
 800f07e:	e010      	b.n	800f0a2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800f080:	69bb      	ldr	r3, [r7, #24]
 800f082:	2b01      	cmp	r3, #1
 800f084:	d108      	bne.n	800f098 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	689b      	ldr	r3, [r3, #8]
 800f08a:	461a      	mov	r2, r3
 800f08c:	68b9      	ldr	r1, [r7, #8]
 800f08e:	68f8      	ldr	r0, [r7, #12]
 800f090:	f000 fce0 	bl	800fa54 <xQueueCreateCountingSemaphoreStatic>
 800f094:	61f8      	str	r0, [r7, #28]
 800f096:	e004      	b.n	800f0a2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f098:	68b9      	ldr	r1, [r7, #8]
 800f09a:	68f8      	ldr	r0, [r7, #12]
 800f09c:	f000 fd11 	bl	800fac2 <xQueueCreateCountingSemaphore>
 800f0a0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f0a2:	69fb      	ldr	r3, [r7, #28]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d00c      	beq.n	800f0c2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d003      	beq.n	800f0b6 <osSemaphoreNew+0xfc>
          name = attr->name;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	617b      	str	r3, [r7, #20]
 800f0b4:	e001      	b.n	800f0ba <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f0ba:	6979      	ldr	r1, [r7, #20]
 800f0bc:	69f8      	ldr	r0, [r7, #28]
 800f0be:	f001 fb4d 	bl	801075c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f0c2:	69fb      	ldr	r3, [r7, #28]
}
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	3720      	adds	r7, #32
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}

0800f0cc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b086      	sub	sp, #24
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
 800f0d4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f0da:	2300      	movs	r3, #0
 800f0dc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f0de:	693b      	ldr	r3, [r7, #16]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d103      	bne.n	800f0ec <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f0e4:	f06f 0303 	mvn.w	r3, #3
 800f0e8:	617b      	str	r3, [r7, #20]
 800f0ea:	e039      	b.n	800f160 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f0ec:	f3ef 8305 	mrs	r3, IPSR
 800f0f0:	60fb      	str	r3, [r7, #12]
  return(result);
 800f0f2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d022      	beq.n	800f13e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d003      	beq.n	800f106 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800f0fe:	f06f 0303 	mvn.w	r3, #3
 800f102:	617b      	str	r3, [r7, #20]
 800f104:	e02c      	b.n	800f160 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800f106:	2300      	movs	r3, #0
 800f108:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f10a:	f107 0308 	add.w	r3, r7, #8
 800f10e:	461a      	mov	r2, r3
 800f110:	2100      	movs	r1, #0
 800f112:	6938      	ldr	r0, [r7, #16]
 800f114:	f001 f91a 	bl	801034c <xQueueReceiveFromISR>
 800f118:	4603      	mov	r3, r0
 800f11a:	2b01      	cmp	r3, #1
 800f11c:	d003      	beq.n	800f126 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800f11e:	f06f 0302 	mvn.w	r3, #2
 800f122:	617b      	str	r3, [r7, #20]
 800f124:	e01c      	b.n	800f160 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800f126:	68bb      	ldr	r3, [r7, #8]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d019      	beq.n	800f160 <osSemaphoreAcquire+0x94>
 800f12c:	4b0f      	ldr	r3, [pc, #60]	; (800f16c <osSemaphoreAcquire+0xa0>)
 800f12e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f132:	601a      	str	r2, [r3, #0]
 800f134:	f3bf 8f4f 	dsb	sy
 800f138:	f3bf 8f6f 	isb	sy
 800f13c:	e010      	b.n	800f160 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f13e:	6839      	ldr	r1, [r7, #0]
 800f140:	6938      	ldr	r0, [r7, #16]
 800f142:	f000 fff7 	bl	8010134 <xQueueSemaphoreTake>
 800f146:	4603      	mov	r3, r0
 800f148:	2b01      	cmp	r3, #1
 800f14a:	d009      	beq.n	800f160 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d003      	beq.n	800f15a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800f152:	f06f 0301 	mvn.w	r3, #1
 800f156:	617b      	str	r3, [r7, #20]
 800f158:	e002      	b.n	800f160 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800f15a:	f06f 0302 	mvn.w	r3, #2
 800f15e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f160:	697b      	ldr	r3, [r7, #20]
}
 800f162:	4618      	mov	r0, r3
 800f164:	3718      	adds	r7, #24
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
 800f16a:	bf00      	nop
 800f16c:	e000ed04 	.word	0xe000ed04

0800f170 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f170:	b580      	push	{r7, lr}
 800f172:	b086      	sub	sp, #24
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f17c:	2300      	movs	r3, #0
 800f17e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f180:	693b      	ldr	r3, [r7, #16]
 800f182:	2b00      	cmp	r3, #0
 800f184:	d103      	bne.n	800f18e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f186:	f06f 0303 	mvn.w	r3, #3
 800f18a:	617b      	str	r3, [r7, #20]
 800f18c:	e02c      	b.n	800f1e8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f18e:	f3ef 8305 	mrs	r3, IPSR
 800f192:	60fb      	str	r3, [r7, #12]
  return(result);
 800f194:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f196:	2b00      	cmp	r3, #0
 800f198:	d01a      	beq.n	800f1d0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800f19a:	2300      	movs	r3, #0
 800f19c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f19e:	f107 0308 	add.w	r3, r7, #8
 800f1a2:	4619      	mov	r1, r3
 800f1a4:	6938      	ldr	r0, [r7, #16]
 800f1a6:	f000 fe58 	bl	800fe5a <xQueueGiveFromISR>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	2b01      	cmp	r3, #1
 800f1ae:	d003      	beq.n	800f1b8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800f1b0:	f06f 0302 	mvn.w	r3, #2
 800f1b4:	617b      	str	r3, [r7, #20]
 800f1b6:	e017      	b.n	800f1e8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800f1b8:	68bb      	ldr	r3, [r7, #8]
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d014      	beq.n	800f1e8 <osSemaphoreRelease+0x78>
 800f1be:	4b0d      	ldr	r3, [pc, #52]	; (800f1f4 <osSemaphoreRelease+0x84>)
 800f1c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f1c4:	601a      	str	r2, [r3, #0]
 800f1c6:	f3bf 8f4f 	dsb	sy
 800f1ca:	f3bf 8f6f 	isb	sy
 800f1ce:	e00b      	b.n	800f1e8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	2100      	movs	r1, #0
 800f1d6:	6938      	ldr	r0, [r7, #16]
 800f1d8:	f000 fca6 	bl	800fb28 <xQueueGenericSend>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	2b01      	cmp	r3, #1
 800f1e0:	d002      	beq.n	800f1e8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800f1e2:	f06f 0302 	mvn.w	r3, #2
 800f1e6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f1e8:	697b      	ldr	r3, [r7, #20]
}
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	3718      	adds	r7, #24
 800f1ee:	46bd      	mov	sp, r7
 800f1f0:	bd80      	pop	{r7, pc}
 800f1f2:	bf00      	nop
 800f1f4:	e000ed04 	.word	0xe000ed04

0800f1f8 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b086      	sub	sp, #24
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	2b00      	cmp	r3, #0
 800f208:	d102      	bne.n	800f210 <osSemaphoreGetCount+0x18>
    count = 0U;
 800f20a:	2300      	movs	r3, #0
 800f20c:	617b      	str	r3, [r7, #20]
 800f20e:	e00e      	b.n	800f22e <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f210:	f3ef 8305 	mrs	r3, IPSR
 800f214:	60fb      	str	r3, [r7, #12]
  return(result);
 800f216:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d004      	beq.n	800f226 <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 800f21c:	6938      	ldr	r0, [r7, #16]
 800f21e:	f001 f933 	bl	8010488 <uxQueueMessagesWaitingFromISR>
 800f222:	6178      	str	r0, [r7, #20]
 800f224:	e003      	b.n	800f22e <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800f226:	6938      	ldr	r0, [r7, #16]
 800f228:	f001 f910 	bl	801044c <uxQueueMessagesWaiting>
 800f22c:	6178      	str	r0, [r7, #20]
  }

  return (count);
 800f22e:	697b      	ldr	r3, [r7, #20]
}
 800f230:	4618      	mov	r0, r3
 800f232:	3718      	adds	r7, #24
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}

0800f238 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f238:	b580      	push	{r7, lr}
 800f23a:	b08a      	sub	sp, #40	; 0x28
 800f23c:	af02      	add	r7, sp, #8
 800f23e:	60f8      	str	r0, [r7, #12]
 800f240:	60b9      	str	r1, [r7, #8]
 800f242:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f244:	2300      	movs	r3, #0
 800f246:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f248:	f3ef 8305 	mrs	r3, IPSR
 800f24c:	613b      	str	r3, [r7, #16]
  return(result);
 800f24e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f250:	2b00      	cmp	r3, #0
 800f252:	d15f      	bne.n	800f314 <osMessageQueueNew+0xdc>
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d05c      	beq.n	800f314 <osMessageQueueNew+0xdc>
 800f25a:	68bb      	ldr	r3, [r7, #8]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d059      	beq.n	800f314 <osMessageQueueNew+0xdc>
    mem = -1;
 800f260:	f04f 33ff 	mov.w	r3, #4294967295
 800f264:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d029      	beq.n	800f2c0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	689b      	ldr	r3, [r3, #8]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d012      	beq.n	800f29a <osMessageQueueNew+0x62>
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	68db      	ldr	r3, [r3, #12]
 800f278:	2b4f      	cmp	r3, #79	; 0x4f
 800f27a:	d90e      	bls.n	800f29a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f280:	2b00      	cmp	r3, #0
 800f282:	d00a      	beq.n	800f29a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	695a      	ldr	r2, [r3, #20]
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	68b9      	ldr	r1, [r7, #8]
 800f28c:	fb01 f303 	mul.w	r3, r1, r3
 800f290:	429a      	cmp	r2, r3
 800f292:	d302      	bcc.n	800f29a <osMessageQueueNew+0x62>
        mem = 1;
 800f294:	2301      	movs	r3, #1
 800f296:	61bb      	str	r3, [r7, #24]
 800f298:	e014      	b.n	800f2c4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	689b      	ldr	r3, [r3, #8]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d110      	bne.n	800f2c4 <osMessageQueueNew+0x8c>
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	68db      	ldr	r3, [r3, #12]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d10c      	bne.n	800f2c4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d108      	bne.n	800f2c4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	695b      	ldr	r3, [r3, #20]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d104      	bne.n	800f2c4 <osMessageQueueNew+0x8c>
          mem = 0;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	61bb      	str	r3, [r7, #24]
 800f2be:	e001      	b.n	800f2c4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f2c4:	69bb      	ldr	r3, [r7, #24]
 800f2c6:	2b01      	cmp	r3, #1
 800f2c8:	d10b      	bne.n	800f2e2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	691a      	ldr	r2, [r3, #16]
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	689b      	ldr	r3, [r3, #8]
 800f2d2:	2100      	movs	r1, #0
 800f2d4:	9100      	str	r1, [sp, #0]
 800f2d6:	68b9      	ldr	r1, [r7, #8]
 800f2d8:	68f8      	ldr	r0, [r7, #12]
 800f2da:	f000 fa2f 	bl	800f73c <xQueueGenericCreateStatic>
 800f2de:	61f8      	str	r0, [r7, #28]
 800f2e0:	e008      	b.n	800f2f4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800f2e2:	69bb      	ldr	r3, [r7, #24]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	d105      	bne.n	800f2f4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	68b9      	ldr	r1, [r7, #8]
 800f2ec:	68f8      	ldr	r0, [r7, #12]
 800f2ee:	f000 fa9d 	bl	800f82c <xQueueGenericCreate>
 800f2f2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f2f4:	69fb      	ldr	r3, [r7, #28]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d00c      	beq.n	800f314 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d003      	beq.n	800f308 <osMessageQueueNew+0xd0>
        name = attr->name;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	617b      	str	r3, [r7, #20]
 800f306:	e001      	b.n	800f30c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800f308:	2300      	movs	r3, #0
 800f30a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800f30c:	6979      	ldr	r1, [r7, #20]
 800f30e:	69f8      	ldr	r0, [r7, #28]
 800f310:	f001 fa24 	bl	801075c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f314:	69fb      	ldr	r3, [r7, #28]
}
 800f316:	4618      	mov	r0, r3
 800f318:	3720      	adds	r7, #32
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}
	...

0800f320 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f320:	b580      	push	{r7, lr}
 800f322:	b088      	sub	sp, #32
 800f324:	af00      	add	r7, sp, #0
 800f326:	60f8      	str	r0, [r7, #12]
 800f328:	60b9      	str	r1, [r7, #8]
 800f32a:	603b      	str	r3, [r7, #0]
 800f32c:	4613      	mov	r3, r2
 800f32e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f334:	2300      	movs	r3, #0
 800f336:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f338:	f3ef 8305 	mrs	r3, IPSR
 800f33c:	617b      	str	r3, [r7, #20]
  return(result);
 800f33e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f340:	2b00      	cmp	r3, #0
 800f342:	d028      	beq.n	800f396 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f344:	69bb      	ldr	r3, [r7, #24]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d005      	beq.n	800f356 <osMessageQueuePut+0x36>
 800f34a:	68bb      	ldr	r3, [r7, #8]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d002      	beq.n	800f356 <osMessageQueuePut+0x36>
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d003      	beq.n	800f35e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f356:	f06f 0303 	mvn.w	r3, #3
 800f35a:	61fb      	str	r3, [r7, #28]
 800f35c:	e038      	b.n	800f3d0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800f35e:	2300      	movs	r3, #0
 800f360:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f362:	f107 0210 	add.w	r2, r7, #16
 800f366:	2300      	movs	r3, #0
 800f368:	68b9      	ldr	r1, [r7, #8]
 800f36a:	69b8      	ldr	r0, [r7, #24]
 800f36c:	f000 fcda 	bl	800fd24 <xQueueGenericSendFromISR>
 800f370:	4603      	mov	r3, r0
 800f372:	2b01      	cmp	r3, #1
 800f374:	d003      	beq.n	800f37e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800f376:	f06f 0302 	mvn.w	r3, #2
 800f37a:	61fb      	str	r3, [r7, #28]
 800f37c:	e028      	b.n	800f3d0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	2b00      	cmp	r3, #0
 800f382:	d025      	beq.n	800f3d0 <osMessageQueuePut+0xb0>
 800f384:	4b15      	ldr	r3, [pc, #84]	; (800f3dc <osMessageQueuePut+0xbc>)
 800f386:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f38a:	601a      	str	r2, [r3, #0]
 800f38c:	f3bf 8f4f 	dsb	sy
 800f390:	f3bf 8f6f 	isb	sy
 800f394:	e01c      	b.n	800f3d0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f396:	69bb      	ldr	r3, [r7, #24]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d002      	beq.n	800f3a2 <osMessageQueuePut+0x82>
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d103      	bne.n	800f3aa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800f3a2:	f06f 0303 	mvn.w	r3, #3
 800f3a6:	61fb      	str	r3, [r7, #28]
 800f3a8:	e012      	b.n	800f3d0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	683a      	ldr	r2, [r7, #0]
 800f3ae:	68b9      	ldr	r1, [r7, #8]
 800f3b0:	69b8      	ldr	r0, [r7, #24]
 800f3b2:	f000 fbb9 	bl	800fb28 <xQueueGenericSend>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	2b01      	cmp	r3, #1
 800f3ba:	d009      	beq.n	800f3d0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d003      	beq.n	800f3ca <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800f3c2:	f06f 0301 	mvn.w	r3, #1
 800f3c6:	61fb      	str	r3, [r7, #28]
 800f3c8:	e002      	b.n	800f3d0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800f3ca:	f06f 0302 	mvn.w	r3, #2
 800f3ce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f3d0:	69fb      	ldr	r3, [r7, #28]
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	3720      	adds	r7, #32
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}
 800f3da:	bf00      	nop
 800f3dc:	e000ed04 	.word	0xe000ed04

0800f3e0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b088      	sub	sp, #32
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	60f8      	str	r0, [r7, #12]
 800f3e8:	60b9      	str	r1, [r7, #8]
 800f3ea:	607a      	str	r2, [r7, #4]
 800f3ec:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f3f6:	f3ef 8305 	mrs	r3, IPSR
 800f3fa:	617b      	str	r3, [r7, #20]
  return(result);
 800f3fc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d028      	beq.n	800f454 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f402:	69bb      	ldr	r3, [r7, #24]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d005      	beq.n	800f414 <osMessageQueueGet+0x34>
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d002      	beq.n	800f414 <osMessageQueueGet+0x34>
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d003      	beq.n	800f41c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800f414:	f06f 0303 	mvn.w	r3, #3
 800f418:	61fb      	str	r3, [r7, #28]
 800f41a:	e037      	b.n	800f48c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800f41c:	2300      	movs	r3, #0
 800f41e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f420:	f107 0310 	add.w	r3, r7, #16
 800f424:	461a      	mov	r2, r3
 800f426:	68b9      	ldr	r1, [r7, #8]
 800f428:	69b8      	ldr	r0, [r7, #24]
 800f42a:	f000 ff8f 	bl	801034c <xQueueReceiveFromISR>
 800f42e:	4603      	mov	r3, r0
 800f430:	2b01      	cmp	r3, #1
 800f432:	d003      	beq.n	800f43c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800f434:	f06f 0302 	mvn.w	r3, #2
 800f438:	61fb      	str	r3, [r7, #28]
 800f43a:	e027      	b.n	800f48c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800f43c:	693b      	ldr	r3, [r7, #16]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d024      	beq.n	800f48c <osMessageQueueGet+0xac>
 800f442:	4b15      	ldr	r3, [pc, #84]	; (800f498 <osMessageQueueGet+0xb8>)
 800f444:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f448:	601a      	str	r2, [r3, #0]
 800f44a:	f3bf 8f4f 	dsb	sy
 800f44e:	f3bf 8f6f 	isb	sy
 800f452:	e01b      	b.n	800f48c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f454:	69bb      	ldr	r3, [r7, #24]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d002      	beq.n	800f460 <osMessageQueueGet+0x80>
 800f45a:	68bb      	ldr	r3, [r7, #8]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d103      	bne.n	800f468 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800f460:	f06f 0303 	mvn.w	r3, #3
 800f464:	61fb      	str	r3, [r7, #28]
 800f466:	e011      	b.n	800f48c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f468:	683a      	ldr	r2, [r7, #0]
 800f46a:	68b9      	ldr	r1, [r7, #8]
 800f46c:	69b8      	ldr	r0, [r7, #24]
 800f46e:	f000 fd81 	bl	800ff74 <xQueueReceive>
 800f472:	4603      	mov	r3, r0
 800f474:	2b01      	cmp	r3, #1
 800f476:	d009      	beq.n	800f48c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800f478:	683b      	ldr	r3, [r7, #0]
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d003      	beq.n	800f486 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800f47e:	f06f 0301 	mvn.w	r3, #1
 800f482:	61fb      	str	r3, [r7, #28]
 800f484:	e002      	b.n	800f48c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800f486:	f06f 0302 	mvn.w	r3, #2
 800f48a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f48c:	69fb      	ldr	r3, [r7, #28]
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3720      	adds	r7, #32
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
 800f496:	bf00      	nop
 800f498:	e000ed04 	.word	0xe000ed04

0800f49c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f49c:	b480      	push	{r7}
 800f49e:	b085      	sub	sp, #20
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	60f8      	str	r0, [r7, #12]
 800f4a4:	60b9      	str	r1, [r7, #8]
 800f4a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	4a07      	ldr	r2, [pc, #28]	; (800f4c8 <vApplicationGetIdleTaskMemory+0x2c>)
 800f4ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f4ae:	68bb      	ldr	r3, [r7, #8]
 800f4b0:	4a06      	ldr	r2, [pc, #24]	; (800f4cc <vApplicationGetIdleTaskMemory+0x30>)
 800f4b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2280      	movs	r2, #128	; 0x80
 800f4b8:	601a      	str	r2, [r3, #0]
}
 800f4ba:	bf00      	nop
 800f4bc:	3714      	adds	r7, #20
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c4:	4770      	bx	lr
 800f4c6:	bf00      	nop
 800f4c8:	20001348 	.word	0x20001348
 800f4cc:	20001408 	.word	0x20001408

0800f4d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f4d0:	b480      	push	{r7}
 800f4d2:	b085      	sub	sp, #20
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	60f8      	str	r0, [r7, #12]
 800f4d8:	60b9      	str	r1, [r7, #8]
 800f4da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	4a07      	ldr	r2, [pc, #28]	; (800f4fc <vApplicationGetTimerTaskMemory+0x2c>)
 800f4e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	4a06      	ldr	r2, [pc, #24]	; (800f500 <vApplicationGetTimerTaskMemory+0x30>)
 800f4e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f4ee:	601a      	str	r2, [r3, #0]
}
 800f4f0:	bf00      	nop
 800f4f2:	3714      	adds	r7, #20
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr
 800f4fc:	20001608 	.word	0x20001608
 800f500:	200016c8 	.word	0x200016c8

0800f504 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f504:	b480      	push	{r7}
 800f506:	b083      	sub	sp, #12
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f103 0208 	add.w	r2, r3, #8
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	f04f 32ff 	mov.w	r2, #4294967295
 800f51c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f103 0208 	add.w	r2, r3, #8
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f103 0208 	add.w	r2, r3, #8
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2200      	movs	r2, #0
 800f536:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f538:	bf00      	nop
 800f53a:	370c      	adds	r7, #12
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr

0800f544 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f544:	b480      	push	{r7}
 800f546:	b083      	sub	sp, #12
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2200      	movs	r2, #0
 800f550:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f552:	bf00      	nop
 800f554:	370c      	adds	r7, #12
 800f556:	46bd      	mov	sp, r7
 800f558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55c:	4770      	bx	lr

0800f55e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f55e:	b480      	push	{r7}
 800f560:	b085      	sub	sp, #20
 800f562:	af00      	add	r7, sp, #0
 800f564:	6078      	str	r0, [r7, #4]
 800f566:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	685b      	ldr	r3, [r3, #4]
 800f56c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	68fa      	ldr	r2, [r7, #12]
 800f572:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	689a      	ldr	r2, [r3, #8]
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	689b      	ldr	r3, [r3, #8]
 800f580:	683a      	ldr	r2, [r7, #0]
 800f582:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	683a      	ldr	r2, [r7, #0]
 800f588:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	687a      	ldr	r2, [r7, #4]
 800f58e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	681b      	ldr	r3, [r3, #0]
 800f594:	1c5a      	adds	r2, r3, #1
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	601a      	str	r2, [r3, #0]
}
 800f59a:	bf00      	nop
 800f59c:	3714      	adds	r7, #20
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a4:	4770      	bx	lr

0800f5a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f5a6:	b480      	push	{r7}
 800f5a8:	b085      	sub	sp, #20
 800f5aa:	af00      	add	r7, sp, #0
 800f5ac:	6078      	str	r0, [r7, #4]
 800f5ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f5b0:	683b      	ldr	r3, [r7, #0]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f5b6:	68bb      	ldr	r3, [r7, #8]
 800f5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5bc:	d103      	bne.n	800f5c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	691b      	ldr	r3, [r3, #16]
 800f5c2:	60fb      	str	r3, [r7, #12]
 800f5c4:	e00c      	b.n	800f5e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	3308      	adds	r3, #8
 800f5ca:	60fb      	str	r3, [r7, #12]
 800f5cc:	e002      	b.n	800f5d4 <vListInsert+0x2e>
 800f5ce:	68fb      	ldr	r3, [r7, #12]
 800f5d0:	685b      	ldr	r3, [r3, #4]
 800f5d2:	60fb      	str	r3, [r7, #12]
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	685b      	ldr	r3, [r3, #4]
 800f5d8:	681b      	ldr	r3, [r3, #0]
 800f5da:	68ba      	ldr	r2, [r7, #8]
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	d2f6      	bcs.n	800f5ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	685a      	ldr	r2, [r3, #4]
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f5e8:	683b      	ldr	r3, [r7, #0]
 800f5ea:	685b      	ldr	r3, [r3, #4]
 800f5ec:	683a      	ldr	r2, [r7, #0]
 800f5ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	68fa      	ldr	r2, [r7, #12]
 800f5f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	683a      	ldr	r2, [r7, #0]
 800f5fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	1c5a      	adds	r2, r3, #1
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	601a      	str	r2, [r3, #0]
}
 800f60c:	bf00      	nop
 800f60e:	3714      	adds	r7, #20
 800f610:	46bd      	mov	sp, r7
 800f612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f616:	4770      	bx	lr

0800f618 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f618:	b480      	push	{r7}
 800f61a:	b085      	sub	sp, #20
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	691b      	ldr	r3, [r3, #16]
 800f624:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	685b      	ldr	r3, [r3, #4]
 800f62a:	687a      	ldr	r2, [r7, #4]
 800f62c:	6892      	ldr	r2, [r2, #8]
 800f62e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	689b      	ldr	r3, [r3, #8]
 800f634:	687a      	ldr	r2, [r7, #4]
 800f636:	6852      	ldr	r2, [r2, #4]
 800f638:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	685b      	ldr	r3, [r3, #4]
 800f63e:	687a      	ldr	r2, [r7, #4]
 800f640:	429a      	cmp	r2, r3
 800f642:	d103      	bne.n	800f64c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	689a      	ldr	r2, [r3, #8]
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2200      	movs	r2, #0
 800f650:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	1e5a      	subs	r2, r3, #1
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	681b      	ldr	r3, [r3, #0]
}
 800f660:	4618      	mov	r0, r3
 800f662:	3714      	adds	r7, #20
 800f664:	46bd      	mov	sp, r7
 800f666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66a:	4770      	bx	lr

0800f66c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b084      	sub	sp, #16
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d10a      	bne.n	800f696 <xQueueGenericReset+0x2a>
	__asm volatile
 800f680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f684:	f383 8811 	msr	BASEPRI, r3
 800f688:	f3bf 8f6f 	isb	sy
 800f68c:	f3bf 8f4f 	dsb	sy
 800f690:	60bb      	str	r3, [r7, #8]
}
 800f692:	bf00      	nop
 800f694:	e7fe      	b.n	800f694 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f696:	f003 fabd 	bl	8012c14 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	681a      	ldr	r2, [r3, #0]
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6a2:	68f9      	ldr	r1, [r7, #12]
 800f6a4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f6a6:	fb01 f303 	mul.w	r3, r1, r3
 800f6aa:	441a      	add	r2, r3
 800f6ac:	68fb      	ldr	r3, [r7, #12]
 800f6ae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	681a      	ldr	r2, [r3, #0]
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	681a      	ldr	r2, [r3, #0]
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6c6:	3b01      	subs	r3, #1
 800f6c8:	68f9      	ldr	r1, [r7, #12]
 800f6ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f6cc:	fb01 f303 	mul.w	r3, r1, r3
 800f6d0:	441a      	add	r2, r3
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	22ff      	movs	r2, #255	; 0xff
 800f6da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	22ff      	movs	r2, #255	; 0xff
 800f6e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f6e6:	683b      	ldr	r3, [r7, #0]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d114      	bne.n	800f716 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	691b      	ldr	r3, [r3, #16]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d01a      	beq.n	800f72a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	3310      	adds	r3, #16
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f002 f8f5 	bl	80118e8 <xTaskRemoveFromEventList>
 800f6fe:	4603      	mov	r3, r0
 800f700:	2b00      	cmp	r3, #0
 800f702:	d012      	beq.n	800f72a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f704:	4b0c      	ldr	r3, [pc, #48]	; (800f738 <xQueueGenericReset+0xcc>)
 800f706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f70a:	601a      	str	r2, [r3, #0]
 800f70c:	f3bf 8f4f 	dsb	sy
 800f710:	f3bf 8f6f 	isb	sy
 800f714:	e009      	b.n	800f72a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	3310      	adds	r3, #16
 800f71a:	4618      	mov	r0, r3
 800f71c:	f7ff fef2 	bl	800f504 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	3324      	adds	r3, #36	; 0x24
 800f724:	4618      	mov	r0, r3
 800f726:	f7ff feed 	bl	800f504 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f72a:	f003 faa3 	bl	8012c74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f72e:	2301      	movs	r3, #1
}
 800f730:	4618      	mov	r0, r3
 800f732:	3710      	adds	r7, #16
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}
 800f738:	e000ed04 	.word	0xe000ed04

0800f73c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b08e      	sub	sp, #56	; 0x38
 800f740:	af02      	add	r7, sp, #8
 800f742:	60f8      	str	r0, [r7, #12]
 800f744:	60b9      	str	r1, [r7, #8]
 800f746:	607a      	str	r2, [r7, #4]
 800f748:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d10a      	bne.n	800f766 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f754:	f383 8811 	msr	BASEPRI, r3
 800f758:	f3bf 8f6f 	isb	sy
 800f75c:	f3bf 8f4f 	dsb	sy
 800f760:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f762:	bf00      	nop
 800f764:	e7fe      	b.n	800f764 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d10a      	bne.n	800f782 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f770:	f383 8811 	msr	BASEPRI, r3
 800f774:	f3bf 8f6f 	isb	sy
 800f778:	f3bf 8f4f 	dsb	sy
 800f77c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f77e:	bf00      	nop
 800f780:	e7fe      	b.n	800f780 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	2b00      	cmp	r3, #0
 800f786:	d002      	beq.n	800f78e <xQueueGenericCreateStatic+0x52>
 800f788:	68bb      	ldr	r3, [r7, #8]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d001      	beq.n	800f792 <xQueueGenericCreateStatic+0x56>
 800f78e:	2301      	movs	r3, #1
 800f790:	e000      	b.n	800f794 <xQueueGenericCreateStatic+0x58>
 800f792:	2300      	movs	r3, #0
 800f794:	2b00      	cmp	r3, #0
 800f796:	d10a      	bne.n	800f7ae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f79c:	f383 8811 	msr	BASEPRI, r3
 800f7a0:	f3bf 8f6f 	isb	sy
 800f7a4:	f3bf 8f4f 	dsb	sy
 800f7a8:	623b      	str	r3, [r7, #32]
}
 800f7aa:	bf00      	nop
 800f7ac:	e7fe      	b.n	800f7ac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d102      	bne.n	800f7ba <xQueueGenericCreateStatic+0x7e>
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d101      	bne.n	800f7be <xQueueGenericCreateStatic+0x82>
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	e000      	b.n	800f7c0 <xQueueGenericCreateStatic+0x84>
 800f7be:	2300      	movs	r3, #0
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d10a      	bne.n	800f7da <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7c8:	f383 8811 	msr	BASEPRI, r3
 800f7cc:	f3bf 8f6f 	isb	sy
 800f7d0:	f3bf 8f4f 	dsb	sy
 800f7d4:	61fb      	str	r3, [r7, #28]
}
 800f7d6:	bf00      	nop
 800f7d8:	e7fe      	b.n	800f7d8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f7da:	2350      	movs	r3, #80	; 0x50
 800f7dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f7de:	697b      	ldr	r3, [r7, #20]
 800f7e0:	2b50      	cmp	r3, #80	; 0x50
 800f7e2:	d00a      	beq.n	800f7fa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7e8:	f383 8811 	msr	BASEPRI, r3
 800f7ec:	f3bf 8f6f 	isb	sy
 800f7f0:	f3bf 8f4f 	dsb	sy
 800f7f4:	61bb      	str	r3, [r7, #24]
}
 800f7f6:	bf00      	nop
 800f7f8:	e7fe      	b.n	800f7f8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f7fa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f802:	2b00      	cmp	r3, #0
 800f804:	d00d      	beq.n	800f822 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f808:	2201      	movs	r2, #1
 800f80a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f80e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f814:	9300      	str	r3, [sp, #0]
 800f816:	4613      	mov	r3, r2
 800f818:	687a      	ldr	r2, [r7, #4]
 800f81a:	68b9      	ldr	r1, [r7, #8]
 800f81c:	68f8      	ldr	r0, [r7, #12]
 800f81e:	f000 f83f 	bl	800f8a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f824:	4618      	mov	r0, r3
 800f826:	3730      	adds	r7, #48	; 0x30
 800f828:	46bd      	mov	sp, r7
 800f82a:	bd80      	pop	{r7, pc}

0800f82c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f82c:	b580      	push	{r7, lr}
 800f82e:	b08a      	sub	sp, #40	; 0x28
 800f830:	af02      	add	r7, sp, #8
 800f832:	60f8      	str	r0, [r7, #12]
 800f834:	60b9      	str	r1, [r7, #8]
 800f836:	4613      	mov	r3, r2
 800f838:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d10a      	bne.n	800f856 <xQueueGenericCreate+0x2a>
	__asm volatile
 800f840:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f844:	f383 8811 	msr	BASEPRI, r3
 800f848:	f3bf 8f6f 	isb	sy
 800f84c:	f3bf 8f4f 	dsb	sy
 800f850:	613b      	str	r3, [r7, #16]
}
 800f852:	bf00      	nop
 800f854:	e7fe      	b.n	800f854 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	68ba      	ldr	r2, [r7, #8]
 800f85a:	fb02 f303 	mul.w	r3, r2, r3
 800f85e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f860:	69fb      	ldr	r3, [r7, #28]
 800f862:	3350      	adds	r3, #80	; 0x50
 800f864:	4618      	mov	r0, r3
 800f866:	f003 faf7 	bl	8012e58 <pvPortMalloc>
 800f86a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f86c:	69bb      	ldr	r3, [r7, #24]
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d011      	beq.n	800f896 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f872:	69bb      	ldr	r3, [r7, #24]
 800f874:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f876:	697b      	ldr	r3, [r7, #20]
 800f878:	3350      	adds	r3, #80	; 0x50
 800f87a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f87c:	69bb      	ldr	r3, [r7, #24]
 800f87e:	2200      	movs	r2, #0
 800f880:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f884:	79fa      	ldrb	r2, [r7, #7]
 800f886:	69bb      	ldr	r3, [r7, #24]
 800f888:	9300      	str	r3, [sp, #0]
 800f88a:	4613      	mov	r3, r2
 800f88c:	697a      	ldr	r2, [r7, #20]
 800f88e:	68b9      	ldr	r1, [r7, #8]
 800f890:	68f8      	ldr	r0, [r7, #12]
 800f892:	f000 f805 	bl	800f8a0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f896:	69bb      	ldr	r3, [r7, #24]
	}
 800f898:	4618      	mov	r0, r3
 800f89a:	3720      	adds	r7, #32
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}

0800f8a0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b084      	sub	sp, #16
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	60f8      	str	r0, [r7, #12]
 800f8a8:	60b9      	str	r1, [r7, #8]
 800f8aa:	607a      	str	r2, [r7, #4]
 800f8ac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d103      	bne.n	800f8bc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f8b4:	69bb      	ldr	r3, [r7, #24]
 800f8b6:	69ba      	ldr	r2, [r7, #24]
 800f8b8:	601a      	str	r2, [r3, #0]
 800f8ba:	e002      	b.n	800f8c2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f8bc:	69bb      	ldr	r3, [r7, #24]
 800f8be:	687a      	ldr	r2, [r7, #4]
 800f8c0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f8c2:	69bb      	ldr	r3, [r7, #24]
 800f8c4:	68fa      	ldr	r2, [r7, #12]
 800f8c6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f8c8:	69bb      	ldr	r3, [r7, #24]
 800f8ca:	68ba      	ldr	r2, [r7, #8]
 800f8cc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f8ce:	2101      	movs	r1, #1
 800f8d0:	69b8      	ldr	r0, [r7, #24]
 800f8d2:	f7ff fecb 	bl	800f66c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f8d6:	69bb      	ldr	r3, [r7, #24]
 800f8d8:	78fa      	ldrb	r2, [r7, #3]
 800f8da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f8de:	bf00      	nop
 800f8e0:	3710      	adds	r7, #16
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	bd80      	pop	{r7, pc}

0800f8e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f8e6:	b580      	push	{r7, lr}
 800f8e8:	b082      	sub	sp, #8
 800f8ea:	af00      	add	r7, sp, #0
 800f8ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d00e      	beq.n	800f912 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2200      	movs	r2, #0
 800f904:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f906:	2300      	movs	r3, #0
 800f908:	2200      	movs	r2, #0
 800f90a:	2100      	movs	r1, #0
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f000 f90b 	bl	800fb28 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f912:	bf00      	nop
 800f914:	3708      	adds	r7, #8
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}

0800f91a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f91a:	b580      	push	{r7, lr}
 800f91c:	b086      	sub	sp, #24
 800f91e:	af00      	add	r7, sp, #0
 800f920:	4603      	mov	r3, r0
 800f922:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f924:	2301      	movs	r3, #1
 800f926:	617b      	str	r3, [r7, #20]
 800f928:	2300      	movs	r3, #0
 800f92a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f92c:	79fb      	ldrb	r3, [r7, #7]
 800f92e:	461a      	mov	r2, r3
 800f930:	6939      	ldr	r1, [r7, #16]
 800f932:	6978      	ldr	r0, [r7, #20]
 800f934:	f7ff ff7a 	bl	800f82c <xQueueGenericCreate>
 800f938:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f93a:	68f8      	ldr	r0, [r7, #12]
 800f93c:	f7ff ffd3 	bl	800f8e6 <prvInitialiseMutex>

		return xNewQueue;
 800f940:	68fb      	ldr	r3, [r7, #12]
	}
 800f942:	4618      	mov	r0, r3
 800f944:	3718      	adds	r7, #24
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}

0800f94a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f94a:	b580      	push	{r7, lr}
 800f94c:	b088      	sub	sp, #32
 800f94e:	af02      	add	r7, sp, #8
 800f950:	4603      	mov	r3, r0
 800f952:	6039      	str	r1, [r7, #0]
 800f954:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f956:	2301      	movs	r3, #1
 800f958:	617b      	str	r3, [r7, #20]
 800f95a:	2300      	movs	r3, #0
 800f95c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f95e:	79fb      	ldrb	r3, [r7, #7]
 800f960:	9300      	str	r3, [sp, #0]
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	2200      	movs	r2, #0
 800f966:	6939      	ldr	r1, [r7, #16]
 800f968:	6978      	ldr	r0, [r7, #20]
 800f96a:	f7ff fee7 	bl	800f73c <xQueueGenericCreateStatic>
 800f96e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f970:	68f8      	ldr	r0, [r7, #12]
 800f972:	f7ff ffb8 	bl	800f8e6 <prvInitialiseMutex>

		return xNewQueue;
 800f976:	68fb      	ldr	r3, [r7, #12]
	}
 800f978:	4618      	mov	r0, r3
 800f97a:	3718      	adds	r7, #24
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}

0800f980 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800f980:	b590      	push	{r4, r7, lr}
 800f982:	b087      	sub	sp, #28
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d10a      	bne.n	800f9a8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800f992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f996:	f383 8811 	msr	BASEPRI, r3
 800f99a:	f3bf 8f6f 	isb	sy
 800f99e:	f3bf 8f4f 	dsb	sy
 800f9a2:	60fb      	str	r3, [r7, #12]
}
 800f9a4:	bf00      	nop
 800f9a6:	e7fe      	b.n	800f9a6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	689c      	ldr	r4, [r3, #8]
 800f9ac:	f002 f984 	bl	8011cb8 <xTaskGetCurrentTaskHandle>
 800f9b0:	4603      	mov	r3, r0
 800f9b2:	429c      	cmp	r4, r3
 800f9b4:	d111      	bne.n	800f9da <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	68db      	ldr	r3, [r3, #12]
 800f9ba:	1e5a      	subs	r2, r3, #1
 800f9bc:	693b      	ldr	r3, [r7, #16]
 800f9be:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800f9c0:	693b      	ldr	r3, [r7, #16]
 800f9c2:	68db      	ldr	r3, [r3, #12]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d105      	bne.n	800f9d4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	2100      	movs	r1, #0
 800f9ce:	6938      	ldr	r0, [r7, #16]
 800f9d0:	f000 f8aa 	bl	800fb28 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800f9d4:	2301      	movs	r3, #1
 800f9d6:	617b      	str	r3, [r7, #20]
 800f9d8:	e001      	b.n	800f9de <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800f9da:	2300      	movs	r3, #0
 800f9dc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800f9de:	697b      	ldr	r3, [r7, #20]
	}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	371c      	adds	r7, #28
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd90      	pop	{r4, r7, pc}

0800f9e8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800f9e8:	b590      	push	{r4, r7, lr}
 800f9ea:	b087      	sub	sp, #28
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f9f6:	693b      	ldr	r3, [r7, #16]
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d10a      	bne.n	800fa12 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800f9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa00:	f383 8811 	msr	BASEPRI, r3
 800fa04:	f3bf 8f6f 	isb	sy
 800fa08:	f3bf 8f4f 	dsb	sy
 800fa0c:	60fb      	str	r3, [r7, #12]
}
 800fa0e:	bf00      	nop
 800fa10:	e7fe      	b.n	800fa10 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800fa12:	693b      	ldr	r3, [r7, #16]
 800fa14:	689c      	ldr	r4, [r3, #8]
 800fa16:	f002 f94f 	bl	8011cb8 <xTaskGetCurrentTaskHandle>
 800fa1a:	4603      	mov	r3, r0
 800fa1c:	429c      	cmp	r4, r3
 800fa1e:	d107      	bne.n	800fa30 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	68db      	ldr	r3, [r3, #12]
 800fa24:	1c5a      	adds	r2, r3, #1
 800fa26:	693b      	ldr	r3, [r7, #16]
 800fa28:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	617b      	str	r3, [r7, #20]
 800fa2e:	e00c      	b.n	800fa4a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800fa30:	6839      	ldr	r1, [r7, #0]
 800fa32:	6938      	ldr	r0, [r7, #16]
 800fa34:	f000 fb7e 	bl	8010134 <xQueueSemaphoreTake>
 800fa38:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800fa3a:	697b      	ldr	r3, [r7, #20]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d004      	beq.n	800fa4a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800fa40:	693b      	ldr	r3, [r7, #16]
 800fa42:	68db      	ldr	r3, [r3, #12]
 800fa44:	1c5a      	adds	r2, r3, #1
 800fa46:	693b      	ldr	r3, [r7, #16]
 800fa48:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800fa4a:	697b      	ldr	r3, [r7, #20]
	}
 800fa4c:	4618      	mov	r0, r3
 800fa4e:	371c      	adds	r7, #28
 800fa50:	46bd      	mov	sp, r7
 800fa52:	bd90      	pop	{r4, r7, pc}

0800fa54 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b08a      	sub	sp, #40	; 0x28
 800fa58:	af02      	add	r7, sp, #8
 800fa5a:	60f8      	str	r0, [r7, #12]
 800fa5c:	60b9      	str	r1, [r7, #8]
 800fa5e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d10a      	bne.n	800fa7c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800fa66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa6a:	f383 8811 	msr	BASEPRI, r3
 800fa6e:	f3bf 8f6f 	isb	sy
 800fa72:	f3bf 8f4f 	dsb	sy
 800fa76:	61bb      	str	r3, [r7, #24]
}
 800fa78:	bf00      	nop
 800fa7a:	e7fe      	b.n	800fa7a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fa7c:	68ba      	ldr	r2, [r7, #8]
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	429a      	cmp	r2, r3
 800fa82:	d90a      	bls.n	800fa9a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800fa84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa88:	f383 8811 	msr	BASEPRI, r3
 800fa8c:	f3bf 8f6f 	isb	sy
 800fa90:	f3bf 8f4f 	dsb	sy
 800fa94:	617b      	str	r3, [r7, #20]
}
 800fa96:	bf00      	nop
 800fa98:	e7fe      	b.n	800fa98 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fa9a:	2302      	movs	r3, #2
 800fa9c:	9300      	str	r3, [sp, #0]
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2200      	movs	r2, #0
 800faa2:	2100      	movs	r1, #0
 800faa4:	68f8      	ldr	r0, [r7, #12]
 800faa6:	f7ff fe49 	bl	800f73c <xQueueGenericCreateStatic>
 800faaa:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800faac:	69fb      	ldr	r3, [r7, #28]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d002      	beq.n	800fab8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fab2:	69fb      	ldr	r3, [r7, #28]
 800fab4:	68ba      	ldr	r2, [r7, #8]
 800fab6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fab8:	69fb      	ldr	r3, [r7, #28]
	}
 800faba:	4618      	mov	r0, r3
 800fabc:	3720      	adds	r7, #32
 800fabe:	46bd      	mov	sp, r7
 800fac0:	bd80      	pop	{r7, pc}

0800fac2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800fac2:	b580      	push	{r7, lr}
 800fac4:	b086      	sub	sp, #24
 800fac6:	af00      	add	r7, sp, #0
 800fac8:	6078      	str	r0, [r7, #4]
 800faca:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d10a      	bne.n	800fae8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800fad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fad6:	f383 8811 	msr	BASEPRI, r3
 800fada:	f3bf 8f6f 	isb	sy
 800fade:	f3bf 8f4f 	dsb	sy
 800fae2:	613b      	str	r3, [r7, #16]
}
 800fae4:	bf00      	nop
 800fae6:	e7fe      	b.n	800fae6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800fae8:	683a      	ldr	r2, [r7, #0]
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	429a      	cmp	r2, r3
 800faee:	d90a      	bls.n	800fb06 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800faf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faf4:	f383 8811 	msr	BASEPRI, r3
 800faf8:	f3bf 8f6f 	isb	sy
 800fafc:	f3bf 8f4f 	dsb	sy
 800fb00:	60fb      	str	r3, [r7, #12]
}
 800fb02:	bf00      	nop
 800fb04:	e7fe      	b.n	800fb04 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800fb06:	2202      	movs	r2, #2
 800fb08:	2100      	movs	r1, #0
 800fb0a:	6878      	ldr	r0, [r7, #4]
 800fb0c:	f7ff fe8e 	bl	800f82c <xQueueGenericCreate>
 800fb10:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d002      	beq.n	800fb1e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fb18:	697b      	ldr	r3, [r7, #20]
 800fb1a:	683a      	ldr	r2, [r7, #0]
 800fb1c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800fb1e:	697b      	ldr	r3, [r7, #20]
	}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3718      	adds	r7, #24
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b08e      	sub	sp, #56	; 0x38
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	60f8      	str	r0, [r7, #12]
 800fb30:	60b9      	str	r1, [r7, #8]
 800fb32:	607a      	str	r2, [r7, #4]
 800fb34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fb36:	2300      	movs	r3, #0
 800fb38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d10a      	bne.n	800fb5a <xQueueGenericSend+0x32>
	__asm volatile
 800fb44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb48:	f383 8811 	msr	BASEPRI, r3
 800fb4c:	f3bf 8f6f 	isb	sy
 800fb50:	f3bf 8f4f 	dsb	sy
 800fb54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fb56:	bf00      	nop
 800fb58:	e7fe      	b.n	800fb58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fb5a:	68bb      	ldr	r3, [r7, #8]
 800fb5c:	2b00      	cmp	r3, #0
 800fb5e:	d103      	bne.n	800fb68 <xQueueGenericSend+0x40>
 800fb60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d101      	bne.n	800fb6c <xQueueGenericSend+0x44>
 800fb68:	2301      	movs	r3, #1
 800fb6a:	e000      	b.n	800fb6e <xQueueGenericSend+0x46>
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d10a      	bne.n	800fb88 <xQueueGenericSend+0x60>
	__asm volatile
 800fb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb76:	f383 8811 	msr	BASEPRI, r3
 800fb7a:	f3bf 8f6f 	isb	sy
 800fb7e:	f3bf 8f4f 	dsb	sy
 800fb82:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fb84:	bf00      	nop
 800fb86:	e7fe      	b.n	800fb86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	2b02      	cmp	r3, #2
 800fb8c:	d103      	bne.n	800fb96 <xQueueGenericSend+0x6e>
 800fb8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fb92:	2b01      	cmp	r3, #1
 800fb94:	d101      	bne.n	800fb9a <xQueueGenericSend+0x72>
 800fb96:	2301      	movs	r3, #1
 800fb98:	e000      	b.n	800fb9c <xQueueGenericSend+0x74>
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d10a      	bne.n	800fbb6 <xQueueGenericSend+0x8e>
	__asm volatile
 800fba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fba4:	f383 8811 	msr	BASEPRI, r3
 800fba8:	f3bf 8f6f 	isb	sy
 800fbac:	f3bf 8f4f 	dsb	sy
 800fbb0:	623b      	str	r3, [r7, #32]
}
 800fbb2:	bf00      	nop
 800fbb4:	e7fe      	b.n	800fbb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fbb6:	f002 f88f 	bl	8011cd8 <xTaskGetSchedulerState>
 800fbba:	4603      	mov	r3, r0
 800fbbc:	2b00      	cmp	r3, #0
 800fbbe:	d102      	bne.n	800fbc6 <xQueueGenericSend+0x9e>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d101      	bne.n	800fbca <xQueueGenericSend+0xa2>
 800fbc6:	2301      	movs	r3, #1
 800fbc8:	e000      	b.n	800fbcc <xQueueGenericSend+0xa4>
 800fbca:	2300      	movs	r3, #0
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d10a      	bne.n	800fbe6 <xQueueGenericSend+0xbe>
	__asm volatile
 800fbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd4:	f383 8811 	msr	BASEPRI, r3
 800fbd8:	f3bf 8f6f 	isb	sy
 800fbdc:	f3bf 8f4f 	dsb	sy
 800fbe0:	61fb      	str	r3, [r7, #28]
}
 800fbe2:	bf00      	nop
 800fbe4:	e7fe      	b.n	800fbe4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fbe6:	f003 f815 	bl	8012c14 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fbea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fbee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d302      	bcc.n	800fbfc <xQueueGenericSend+0xd4>
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	2b02      	cmp	r3, #2
 800fbfa:	d129      	bne.n	800fc50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fbfc:	683a      	ldr	r2, [r7, #0]
 800fbfe:	68b9      	ldr	r1, [r7, #8]
 800fc00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc02:	f000 fc9a 	bl	801053a <prvCopyDataToQueue>
 800fc06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d010      	beq.n	800fc32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fc10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc12:	3324      	adds	r3, #36	; 0x24
 800fc14:	4618      	mov	r0, r3
 800fc16:	f001 fe67 	bl	80118e8 <xTaskRemoveFromEventList>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d013      	beq.n	800fc48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fc20:	4b3f      	ldr	r3, [pc, #252]	; (800fd20 <xQueueGenericSend+0x1f8>)
 800fc22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc26:	601a      	str	r2, [r3, #0]
 800fc28:	f3bf 8f4f 	dsb	sy
 800fc2c:	f3bf 8f6f 	isb	sy
 800fc30:	e00a      	b.n	800fc48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d007      	beq.n	800fc48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fc38:	4b39      	ldr	r3, [pc, #228]	; (800fd20 <xQueueGenericSend+0x1f8>)
 800fc3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc3e:	601a      	str	r2, [r3, #0]
 800fc40:	f3bf 8f4f 	dsb	sy
 800fc44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fc48:	f003 f814 	bl	8012c74 <vPortExitCritical>
				return pdPASS;
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	e063      	b.n	800fd18 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d103      	bne.n	800fc5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fc56:	f003 f80d 	bl	8012c74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	e05c      	b.n	800fd18 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fc5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d106      	bne.n	800fc72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fc64:	f107 0314 	add.w	r3, r7, #20
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f001 fec7 	bl	80119fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fc6e:	2301      	movs	r3, #1
 800fc70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fc72:	f002 ffff 	bl	8012c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fc76:	f001 fbe1 	bl	801143c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fc7a:	f002 ffcb 	bl	8012c14 <vPortEnterCritical>
 800fc7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fc84:	b25b      	sxtb	r3, r3
 800fc86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc8a:	d103      	bne.n	800fc94 <xQueueGenericSend+0x16c>
 800fc8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc8e:	2200      	movs	r2, #0
 800fc90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fc9a:	b25b      	sxtb	r3, r3
 800fc9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fca0:	d103      	bne.n	800fcaa <xQueueGenericSend+0x182>
 800fca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fca4:	2200      	movs	r2, #0
 800fca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fcaa:	f002 ffe3 	bl	8012c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fcae:	1d3a      	adds	r2, r7, #4
 800fcb0:	f107 0314 	add.w	r3, r7, #20
 800fcb4:	4611      	mov	r1, r2
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	f001 feb6 	bl	8011a28 <xTaskCheckForTimeOut>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d124      	bne.n	800fd0c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fcc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fcc4:	f000 fd31 	bl	801072a <prvIsQueueFull>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	d018      	beq.n	800fd00 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fcce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd0:	3310      	adds	r3, #16
 800fcd2:	687a      	ldr	r2, [r7, #4]
 800fcd4:	4611      	mov	r1, r2
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f001 fdb6 	bl	8011848 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fcdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fcde:	f000 fcbc 	bl	801065a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fce2:	f001 fbb9 	bl	8011458 <xTaskResumeAll>
 800fce6:	4603      	mov	r3, r0
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	f47f af7c 	bne.w	800fbe6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800fcee:	4b0c      	ldr	r3, [pc, #48]	; (800fd20 <xQueueGenericSend+0x1f8>)
 800fcf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcf4:	601a      	str	r2, [r3, #0]
 800fcf6:	f3bf 8f4f 	dsb	sy
 800fcfa:	f3bf 8f6f 	isb	sy
 800fcfe:	e772      	b.n	800fbe6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fd00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd02:	f000 fcaa 	bl	801065a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fd06:	f001 fba7 	bl	8011458 <xTaskResumeAll>
 800fd0a:	e76c      	b.n	800fbe6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fd0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd0e:	f000 fca4 	bl	801065a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fd12:	f001 fba1 	bl	8011458 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fd16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fd18:	4618      	mov	r0, r3
 800fd1a:	3738      	adds	r7, #56	; 0x38
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bd80      	pop	{r7, pc}
 800fd20:	e000ed04 	.word	0xe000ed04

0800fd24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b090      	sub	sp, #64	; 0x40
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	60f8      	str	r0, [r7, #12]
 800fd2c:	60b9      	str	r1, [r7, #8]
 800fd2e:	607a      	str	r2, [r7, #4]
 800fd30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800fd36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d10a      	bne.n	800fd52 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800fd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd40:	f383 8811 	msr	BASEPRI, r3
 800fd44:	f3bf 8f6f 	isb	sy
 800fd48:	f3bf 8f4f 	dsb	sy
 800fd4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fd4e:	bf00      	nop
 800fd50:	e7fe      	b.n	800fd50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d103      	bne.n	800fd60 <xQueueGenericSendFromISR+0x3c>
 800fd58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d101      	bne.n	800fd64 <xQueueGenericSendFromISR+0x40>
 800fd60:	2301      	movs	r3, #1
 800fd62:	e000      	b.n	800fd66 <xQueueGenericSendFromISR+0x42>
 800fd64:	2300      	movs	r3, #0
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d10a      	bne.n	800fd80 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800fd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd6e:	f383 8811 	msr	BASEPRI, r3
 800fd72:	f3bf 8f6f 	isb	sy
 800fd76:	f3bf 8f4f 	dsb	sy
 800fd7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fd7c:	bf00      	nop
 800fd7e:	e7fe      	b.n	800fd7e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	2b02      	cmp	r3, #2
 800fd84:	d103      	bne.n	800fd8e <xQueueGenericSendFromISR+0x6a>
 800fd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fd8a:	2b01      	cmp	r3, #1
 800fd8c:	d101      	bne.n	800fd92 <xQueueGenericSendFromISR+0x6e>
 800fd8e:	2301      	movs	r3, #1
 800fd90:	e000      	b.n	800fd94 <xQueueGenericSendFromISR+0x70>
 800fd92:	2300      	movs	r3, #0
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d10a      	bne.n	800fdae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800fd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd9c:	f383 8811 	msr	BASEPRI, r3
 800fda0:	f3bf 8f6f 	isb	sy
 800fda4:	f3bf 8f4f 	dsb	sy
 800fda8:	623b      	str	r3, [r7, #32]
}
 800fdaa:	bf00      	nop
 800fdac:	e7fe      	b.n	800fdac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fdae:	f003 f813 	bl	8012dd8 <vPortValidateInterruptPriority>
	__asm volatile
 800fdb2:	f3ef 8211 	mrs	r2, BASEPRI
 800fdb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdba:	f383 8811 	msr	BASEPRI, r3
 800fdbe:	f3bf 8f6f 	isb	sy
 800fdc2:	f3bf 8f4f 	dsb	sy
 800fdc6:	61fa      	str	r2, [r7, #28]
 800fdc8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800fdca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fdcc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdd6:	429a      	cmp	r2, r3
 800fdd8:	d302      	bcc.n	800fde0 <xQueueGenericSendFromISR+0xbc>
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	2b02      	cmp	r3, #2
 800fdde:	d12f      	bne.n	800fe40 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fde6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fdea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fdf0:	683a      	ldr	r2, [r7, #0]
 800fdf2:	68b9      	ldr	r1, [r7, #8]
 800fdf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fdf6:	f000 fba0 	bl	801053a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fdfa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800fdfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe02:	d112      	bne.n	800fe2a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d016      	beq.n	800fe3a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0e:	3324      	adds	r3, #36	; 0x24
 800fe10:	4618      	mov	r0, r3
 800fe12:	f001 fd69 	bl	80118e8 <xTaskRemoveFromEventList>
 800fe16:	4603      	mov	r3, r0
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d00e      	beq.n	800fe3a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d00b      	beq.n	800fe3a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	2201      	movs	r2, #1
 800fe26:	601a      	str	r2, [r3, #0]
 800fe28:	e007      	b.n	800fe3a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fe2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fe2e:	3301      	adds	r3, #1
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	b25a      	sxtb	r2, r3
 800fe34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800fe3e:	e001      	b.n	800fe44 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fe40:	2300      	movs	r3, #0
 800fe42:	63fb      	str	r3, [r7, #60]	; 0x3c
 800fe44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe46:	617b      	str	r3, [r7, #20]
	__asm volatile
 800fe48:	697b      	ldr	r3, [r7, #20]
 800fe4a:	f383 8811 	msr	BASEPRI, r3
}
 800fe4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fe50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3740      	adds	r7, #64	; 0x40
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}

0800fe5a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fe5a:	b580      	push	{r7, lr}
 800fe5c:	b08e      	sub	sp, #56	; 0x38
 800fe5e:	af00      	add	r7, sp, #0
 800fe60:	6078      	str	r0, [r7, #4]
 800fe62:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fe68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d10a      	bne.n	800fe84 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800fe6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe72:	f383 8811 	msr	BASEPRI, r3
 800fe76:	f3bf 8f6f 	isb	sy
 800fe7a:	f3bf 8f4f 	dsb	sy
 800fe7e:	623b      	str	r3, [r7, #32]
}
 800fe80:	bf00      	nop
 800fe82:	e7fe      	b.n	800fe82 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fe84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d00a      	beq.n	800fea2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800fe8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe90:	f383 8811 	msr	BASEPRI, r3
 800fe94:	f3bf 8f6f 	isb	sy
 800fe98:	f3bf 8f4f 	dsb	sy
 800fe9c:	61fb      	str	r3, [r7, #28]
}
 800fe9e:	bf00      	nop
 800fea0:	e7fe      	b.n	800fea0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d103      	bne.n	800feb2 <xQueueGiveFromISR+0x58>
 800feaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feac:	689b      	ldr	r3, [r3, #8]
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d101      	bne.n	800feb6 <xQueueGiveFromISR+0x5c>
 800feb2:	2301      	movs	r3, #1
 800feb4:	e000      	b.n	800feb8 <xQueueGiveFromISR+0x5e>
 800feb6:	2300      	movs	r3, #0
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d10a      	bne.n	800fed2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800febc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fec0:	f383 8811 	msr	BASEPRI, r3
 800fec4:	f3bf 8f6f 	isb	sy
 800fec8:	f3bf 8f4f 	dsb	sy
 800fecc:	61bb      	str	r3, [r7, #24]
}
 800fece:	bf00      	nop
 800fed0:	e7fe      	b.n	800fed0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fed2:	f002 ff81 	bl	8012dd8 <vPortValidateInterruptPriority>
	__asm volatile
 800fed6:	f3ef 8211 	mrs	r2, BASEPRI
 800feda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fede:	f383 8811 	msr	BASEPRI, r3
 800fee2:	f3bf 8f6f 	isb	sy
 800fee6:	f3bf 8f4f 	dsb	sy
 800feea:	617a      	str	r2, [r7, #20]
 800feec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800feee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fef0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fef6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fefa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fefc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fefe:	429a      	cmp	r2, r3
 800ff00:	d22b      	bcs.n	800ff5a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ff02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ff0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff0e:	1c5a      	adds	r2, r3, #1
 800ff10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff12:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ff14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ff18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff1c:	d112      	bne.n	800ff44 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ff1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d016      	beq.n	800ff54 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ff26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff28:	3324      	adds	r3, #36	; 0x24
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	f001 fcdc 	bl	80118e8 <xTaskRemoveFromEventList>
 800ff30:	4603      	mov	r3, r0
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d00e      	beq.n	800ff54 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d00b      	beq.n	800ff54 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	2201      	movs	r2, #1
 800ff40:	601a      	str	r2, [r3, #0]
 800ff42:	e007      	b.n	800ff54 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ff44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff48:	3301      	adds	r3, #1
 800ff4a:	b2db      	uxtb	r3, r3
 800ff4c:	b25a      	sxtb	r2, r3
 800ff4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ff54:	2301      	movs	r3, #1
 800ff56:	637b      	str	r3, [r7, #52]	; 0x34
 800ff58:	e001      	b.n	800ff5e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ff5a:	2300      	movs	r3, #0
 800ff5c:	637b      	str	r3, [r7, #52]	; 0x34
 800ff5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff60:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	f383 8811 	msr	BASEPRI, r3
}
 800ff68:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ff6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	3738      	adds	r7, #56	; 0x38
 800ff70:	46bd      	mov	sp, r7
 800ff72:	bd80      	pop	{r7, pc}

0800ff74 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b08c      	sub	sp, #48	; 0x30
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	60f8      	str	r0, [r7, #12]
 800ff7c:	60b9      	str	r1, [r7, #8]
 800ff7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ff80:	2300      	movs	r3, #0
 800ff82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ff88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d10a      	bne.n	800ffa4 <xQueueReceive+0x30>
	__asm volatile
 800ff8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff92:	f383 8811 	msr	BASEPRI, r3
 800ff96:	f3bf 8f6f 	isb	sy
 800ff9a:	f3bf 8f4f 	dsb	sy
 800ff9e:	623b      	str	r3, [r7, #32]
}
 800ffa0:	bf00      	nop
 800ffa2:	e7fe      	b.n	800ffa2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ffa4:	68bb      	ldr	r3, [r7, #8]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d103      	bne.n	800ffb2 <xQueueReceive+0x3e>
 800ffaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d101      	bne.n	800ffb6 <xQueueReceive+0x42>
 800ffb2:	2301      	movs	r3, #1
 800ffb4:	e000      	b.n	800ffb8 <xQueueReceive+0x44>
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d10a      	bne.n	800ffd2 <xQueueReceive+0x5e>
	__asm volatile
 800ffbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffc0:	f383 8811 	msr	BASEPRI, r3
 800ffc4:	f3bf 8f6f 	isb	sy
 800ffc8:	f3bf 8f4f 	dsb	sy
 800ffcc:	61fb      	str	r3, [r7, #28]
}
 800ffce:	bf00      	nop
 800ffd0:	e7fe      	b.n	800ffd0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ffd2:	f001 fe81 	bl	8011cd8 <xTaskGetSchedulerState>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d102      	bne.n	800ffe2 <xQueueReceive+0x6e>
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d101      	bne.n	800ffe6 <xQueueReceive+0x72>
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	e000      	b.n	800ffe8 <xQueueReceive+0x74>
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d10a      	bne.n	8010002 <xQueueReceive+0x8e>
	__asm volatile
 800ffec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fff0:	f383 8811 	msr	BASEPRI, r3
 800fff4:	f3bf 8f6f 	isb	sy
 800fff8:	f3bf 8f4f 	dsb	sy
 800fffc:	61bb      	str	r3, [r7, #24]
}
 800fffe:	bf00      	nop
 8010000:	e7fe      	b.n	8010000 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010002:	f002 fe07 	bl	8012c14 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801000a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801000c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801000e:	2b00      	cmp	r3, #0
 8010010:	d01f      	beq.n	8010052 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010012:	68b9      	ldr	r1, [r7, #8]
 8010014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010016:	f000 fafa 	bl	801060e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801001a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801001c:	1e5a      	subs	r2, r3, #1
 801001e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010020:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010024:	691b      	ldr	r3, [r3, #16]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d00f      	beq.n	801004a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801002a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801002c:	3310      	adds	r3, #16
 801002e:	4618      	mov	r0, r3
 8010030:	f001 fc5a 	bl	80118e8 <xTaskRemoveFromEventList>
 8010034:	4603      	mov	r3, r0
 8010036:	2b00      	cmp	r3, #0
 8010038:	d007      	beq.n	801004a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801003a:	4b3d      	ldr	r3, [pc, #244]	; (8010130 <xQueueReceive+0x1bc>)
 801003c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010040:	601a      	str	r2, [r3, #0]
 8010042:	f3bf 8f4f 	dsb	sy
 8010046:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801004a:	f002 fe13 	bl	8012c74 <vPortExitCritical>
				return pdPASS;
 801004e:	2301      	movs	r3, #1
 8010050:	e069      	b.n	8010126 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d103      	bne.n	8010060 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010058:	f002 fe0c 	bl	8012c74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801005c:	2300      	movs	r3, #0
 801005e:	e062      	b.n	8010126 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010062:	2b00      	cmp	r3, #0
 8010064:	d106      	bne.n	8010074 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010066:	f107 0310 	add.w	r3, r7, #16
 801006a:	4618      	mov	r0, r3
 801006c:	f001 fcc6 	bl	80119fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010070:	2301      	movs	r3, #1
 8010072:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010074:	f002 fdfe 	bl	8012c74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010078:	f001 f9e0 	bl	801143c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801007c:	f002 fdca 	bl	8012c14 <vPortEnterCritical>
 8010080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010082:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010086:	b25b      	sxtb	r3, r3
 8010088:	f1b3 3fff 	cmp.w	r3, #4294967295
 801008c:	d103      	bne.n	8010096 <xQueueReceive+0x122>
 801008e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010090:	2200      	movs	r2, #0
 8010092:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010098:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801009c:	b25b      	sxtb	r3, r3
 801009e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100a2:	d103      	bne.n	80100ac <xQueueReceive+0x138>
 80100a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100a6:	2200      	movs	r2, #0
 80100a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80100ac:	f002 fde2 	bl	8012c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80100b0:	1d3a      	adds	r2, r7, #4
 80100b2:	f107 0310 	add.w	r3, r7, #16
 80100b6:	4611      	mov	r1, r2
 80100b8:	4618      	mov	r0, r3
 80100ba:	f001 fcb5 	bl	8011a28 <xTaskCheckForTimeOut>
 80100be:	4603      	mov	r3, r0
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d123      	bne.n	801010c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80100c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100c6:	f000 fb1a 	bl	80106fe <prvIsQueueEmpty>
 80100ca:	4603      	mov	r3, r0
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d017      	beq.n	8010100 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80100d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100d2:	3324      	adds	r3, #36	; 0x24
 80100d4:	687a      	ldr	r2, [r7, #4]
 80100d6:	4611      	mov	r1, r2
 80100d8:	4618      	mov	r0, r3
 80100da:	f001 fbb5 	bl	8011848 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80100de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100e0:	f000 fabb 	bl	801065a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80100e4:	f001 f9b8 	bl	8011458 <xTaskResumeAll>
 80100e8:	4603      	mov	r3, r0
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d189      	bne.n	8010002 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80100ee:	4b10      	ldr	r3, [pc, #64]	; (8010130 <xQueueReceive+0x1bc>)
 80100f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100f4:	601a      	str	r2, [r3, #0]
 80100f6:	f3bf 8f4f 	dsb	sy
 80100fa:	f3bf 8f6f 	isb	sy
 80100fe:	e780      	b.n	8010002 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8010100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010102:	f000 faaa 	bl	801065a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8010106:	f001 f9a7 	bl	8011458 <xTaskResumeAll>
 801010a:	e77a      	b.n	8010002 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 801010c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801010e:	f000 faa4 	bl	801065a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010112:	f001 f9a1 	bl	8011458 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010118:	f000 faf1 	bl	80106fe <prvIsQueueEmpty>
 801011c:	4603      	mov	r3, r0
 801011e:	2b00      	cmp	r3, #0
 8010120:	f43f af6f 	beq.w	8010002 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010124:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010126:	4618      	mov	r0, r3
 8010128:	3730      	adds	r7, #48	; 0x30
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}
 801012e:	bf00      	nop
 8010130:	e000ed04 	.word	0xe000ed04

08010134 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b08e      	sub	sp, #56	; 0x38
 8010138:	af00      	add	r7, sp, #0
 801013a:	6078      	str	r0, [r7, #4]
 801013c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801013e:	2300      	movs	r3, #0
 8010140:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010146:	2300      	movs	r3, #0
 8010148:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801014a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801014c:	2b00      	cmp	r3, #0
 801014e:	d10a      	bne.n	8010166 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010154:	f383 8811 	msr	BASEPRI, r3
 8010158:	f3bf 8f6f 	isb	sy
 801015c:	f3bf 8f4f 	dsb	sy
 8010160:	623b      	str	r3, [r7, #32]
}
 8010162:	bf00      	nop
 8010164:	e7fe      	b.n	8010164 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801016a:	2b00      	cmp	r3, #0
 801016c:	d00a      	beq.n	8010184 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801016e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010172:	f383 8811 	msr	BASEPRI, r3
 8010176:	f3bf 8f6f 	isb	sy
 801017a:	f3bf 8f4f 	dsb	sy
 801017e:	61fb      	str	r3, [r7, #28]
}
 8010180:	bf00      	nop
 8010182:	e7fe      	b.n	8010182 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010184:	f001 fda8 	bl	8011cd8 <xTaskGetSchedulerState>
 8010188:	4603      	mov	r3, r0
 801018a:	2b00      	cmp	r3, #0
 801018c:	d102      	bne.n	8010194 <xQueueSemaphoreTake+0x60>
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d101      	bne.n	8010198 <xQueueSemaphoreTake+0x64>
 8010194:	2301      	movs	r3, #1
 8010196:	e000      	b.n	801019a <xQueueSemaphoreTake+0x66>
 8010198:	2300      	movs	r3, #0
 801019a:	2b00      	cmp	r3, #0
 801019c:	d10a      	bne.n	80101b4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801019e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101a2:	f383 8811 	msr	BASEPRI, r3
 80101a6:	f3bf 8f6f 	isb	sy
 80101aa:	f3bf 8f4f 	dsb	sy
 80101ae:	61bb      	str	r3, [r7, #24]
}
 80101b0:	bf00      	nop
 80101b2:	e7fe      	b.n	80101b2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80101b4:	f002 fd2e 	bl	8012c14 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80101b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101bc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80101be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d024      	beq.n	801020e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80101c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101c6:	1e5a      	subs	r2, r3, #1
 80101c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80101cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d104      	bne.n	80101de <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80101d4:	f001 fef6 	bl	8011fc4 <pvTaskIncrementMutexHeldCount>
 80101d8:	4602      	mov	r2, r0
 80101da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101dc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80101de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e0:	691b      	ldr	r3, [r3, #16]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d00f      	beq.n	8010206 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80101e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e8:	3310      	adds	r3, #16
 80101ea:	4618      	mov	r0, r3
 80101ec:	f001 fb7c 	bl	80118e8 <xTaskRemoveFromEventList>
 80101f0:	4603      	mov	r3, r0
 80101f2:	2b00      	cmp	r3, #0
 80101f4:	d007      	beq.n	8010206 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80101f6:	4b54      	ldr	r3, [pc, #336]	; (8010348 <xQueueSemaphoreTake+0x214>)
 80101f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101fc:	601a      	str	r2, [r3, #0]
 80101fe:	f3bf 8f4f 	dsb	sy
 8010202:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010206:	f002 fd35 	bl	8012c74 <vPortExitCritical>
				return pdPASS;
 801020a:	2301      	movs	r3, #1
 801020c:	e097      	b.n	801033e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801020e:	683b      	ldr	r3, [r7, #0]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d111      	bne.n	8010238 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8010214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010216:	2b00      	cmp	r3, #0
 8010218:	d00a      	beq.n	8010230 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801021a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801021e:	f383 8811 	msr	BASEPRI, r3
 8010222:	f3bf 8f6f 	isb	sy
 8010226:	f3bf 8f4f 	dsb	sy
 801022a:	617b      	str	r3, [r7, #20]
}
 801022c:	bf00      	nop
 801022e:	e7fe      	b.n	801022e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010230:	f002 fd20 	bl	8012c74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010234:	2300      	movs	r3, #0
 8010236:	e082      	b.n	801033e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801023a:	2b00      	cmp	r3, #0
 801023c:	d106      	bne.n	801024c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801023e:	f107 030c 	add.w	r3, r7, #12
 8010242:	4618      	mov	r0, r3
 8010244:	f001 fbda 	bl	80119fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010248:	2301      	movs	r3, #1
 801024a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801024c:	f002 fd12 	bl	8012c74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010250:	f001 f8f4 	bl	801143c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010254:	f002 fcde 	bl	8012c14 <vPortEnterCritical>
 8010258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801025a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801025e:	b25b      	sxtb	r3, r3
 8010260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010264:	d103      	bne.n	801026e <xQueueSemaphoreTake+0x13a>
 8010266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010268:	2200      	movs	r2, #0
 801026a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801026e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010270:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010274:	b25b      	sxtb	r3, r3
 8010276:	f1b3 3fff 	cmp.w	r3, #4294967295
 801027a:	d103      	bne.n	8010284 <xQueueSemaphoreTake+0x150>
 801027c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801027e:	2200      	movs	r2, #0
 8010280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010284:	f002 fcf6 	bl	8012c74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010288:	463a      	mov	r2, r7
 801028a:	f107 030c 	add.w	r3, r7, #12
 801028e:	4611      	mov	r1, r2
 8010290:	4618      	mov	r0, r3
 8010292:	f001 fbc9 	bl	8011a28 <xTaskCheckForTimeOut>
 8010296:	4603      	mov	r3, r0
 8010298:	2b00      	cmp	r3, #0
 801029a:	d132      	bne.n	8010302 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801029c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801029e:	f000 fa2e 	bl	80106fe <prvIsQueueEmpty>
 80102a2:	4603      	mov	r3, r0
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d026      	beq.n	80102f6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80102a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d109      	bne.n	80102c4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80102b0:	f002 fcb0 	bl	8012c14 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80102b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102b6:	689b      	ldr	r3, [r3, #8]
 80102b8:	4618      	mov	r0, r3
 80102ba:	f001 fd2b 	bl	8011d14 <xTaskPriorityInherit>
 80102be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80102c0:	f002 fcd8 	bl	8012c74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80102c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102c6:	3324      	adds	r3, #36	; 0x24
 80102c8:	683a      	ldr	r2, [r7, #0]
 80102ca:	4611      	mov	r1, r2
 80102cc:	4618      	mov	r0, r3
 80102ce:	f001 fabb 	bl	8011848 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80102d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102d4:	f000 f9c1 	bl	801065a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80102d8:	f001 f8be 	bl	8011458 <xTaskResumeAll>
 80102dc:	4603      	mov	r3, r0
 80102de:	2b00      	cmp	r3, #0
 80102e0:	f47f af68 	bne.w	80101b4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80102e4:	4b18      	ldr	r3, [pc, #96]	; (8010348 <xQueueSemaphoreTake+0x214>)
 80102e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102ea:	601a      	str	r2, [r3, #0]
 80102ec:	f3bf 8f4f 	dsb	sy
 80102f0:	f3bf 8f6f 	isb	sy
 80102f4:	e75e      	b.n	80101b4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80102f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80102f8:	f000 f9af 	bl	801065a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80102fc:	f001 f8ac 	bl	8011458 <xTaskResumeAll>
 8010300:	e758      	b.n	80101b4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8010302:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010304:	f000 f9a9 	bl	801065a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8010308:	f001 f8a6 	bl	8011458 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801030c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801030e:	f000 f9f6 	bl	80106fe <prvIsQueueEmpty>
 8010312:	4603      	mov	r3, r0
 8010314:	2b00      	cmp	r3, #0
 8010316:	f43f af4d 	beq.w	80101b4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801031a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801031c:	2b00      	cmp	r3, #0
 801031e:	d00d      	beq.n	801033c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010320:	f002 fc78 	bl	8012c14 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010324:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010326:	f000 f8f0 	bl	801050a <prvGetDisinheritPriorityAfterTimeout>
 801032a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801032c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801032e:	689b      	ldr	r3, [r3, #8]
 8010330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010332:	4618      	mov	r0, r3
 8010334:	f001 fdc4 	bl	8011ec0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010338:	f002 fc9c 	bl	8012c74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801033c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801033e:	4618      	mov	r0, r3
 8010340:	3738      	adds	r7, #56	; 0x38
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}
 8010346:	bf00      	nop
 8010348:	e000ed04 	.word	0xe000ed04

0801034c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801034c:	b580      	push	{r7, lr}
 801034e:	b08e      	sub	sp, #56	; 0x38
 8010350:	af00      	add	r7, sp, #0
 8010352:	60f8      	str	r0, [r7, #12]
 8010354:	60b9      	str	r1, [r7, #8]
 8010356:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801035c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801035e:	2b00      	cmp	r3, #0
 8010360:	d10a      	bne.n	8010378 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010366:	f383 8811 	msr	BASEPRI, r3
 801036a:	f3bf 8f6f 	isb	sy
 801036e:	f3bf 8f4f 	dsb	sy
 8010372:	623b      	str	r3, [r7, #32]
}
 8010374:	bf00      	nop
 8010376:	e7fe      	b.n	8010376 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010378:	68bb      	ldr	r3, [r7, #8]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d103      	bne.n	8010386 <xQueueReceiveFromISR+0x3a>
 801037e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010382:	2b00      	cmp	r3, #0
 8010384:	d101      	bne.n	801038a <xQueueReceiveFromISR+0x3e>
 8010386:	2301      	movs	r3, #1
 8010388:	e000      	b.n	801038c <xQueueReceiveFromISR+0x40>
 801038a:	2300      	movs	r3, #0
 801038c:	2b00      	cmp	r3, #0
 801038e:	d10a      	bne.n	80103a6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010394:	f383 8811 	msr	BASEPRI, r3
 8010398:	f3bf 8f6f 	isb	sy
 801039c:	f3bf 8f4f 	dsb	sy
 80103a0:	61fb      	str	r3, [r7, #28]
}
 80103a2:	bf00      	nop
 80103a4:	e7fe      	b.n	80103a4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80103a6:	f002 fd17 	bl	8012dd8 <vPortValidateInterruptPriority>
	__asm volatile
 80103aa:	f3ef 8211 	mrs	r2, BASEPRI
 80103ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103b2:	f383 8811 	msr	BASEPRI, r3
 80103b6:	f3bf 8f6f 	isb	sy
 80103ba:	f3bf 8f4f 	dsb	sy
 80103be:	61ba      	str	r2, [r7, #24]
 80103c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80103c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80103c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80103c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80103cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d02f      	beq.n	8010432 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80103d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80103d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80103dc:	68b9      	ldr	r1, [r7, #8]
 80103de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103e0:	f000 f915 	bl	801060e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80103e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103e6:	1e5a      	subs	r2, r3, #1
 80103e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80103ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80103f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103f4:	d112      	bne.n	801041c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80103f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f8:	691b      	ldr	r3, [r3, #16]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d016      	beq.n	801042c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80103fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010400:	3310      	adds	r3, #16
 8010402:	4618      	mov	r0, r3
 8010404:	f001 fa70 	bl	80118e8 <xTaskRemoveFromEventList>
 8010408:	4603      	mov	r3, r0
 801040a:	2b00      	cmp	r3, #0
 801040c:	d00e      	beq.n	801042c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	2b00      	cmp	r3, #0
 8010412:	d00b      	beq.n	801042c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	2201      	movs	r2, #1
 8010418:	601a      	str	r2, [r3, #0]
 801041a:	e007      	b.n	801042c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801041c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010420:	3301      	adds	r3, #1
 8010422:	b2db      	uxtb	r3, r3
 8010424:	b25a      	sxtb	r2, r3
 8010426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801042c:	2301      	movs	r3, #1
 801042e:	637b      	str	r3, [r7, #52]	; 0x34
 8010430:	e001      	b.n	8010436 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010432:	2300      	movs	r3, #0
 8010434:	637b      	str	r3, [r7, #52]	; 0x34
 8010436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010438:	613b      	str	r3, [r7, #16]
	__asm volatile
 801043a:	693b      	ldr	r3, [r7, #16]
 801043c:	f383 8811 	msr	BASEPRI, r3
}
 8010440:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010444:	4618      	mov	r0, r3
 8010446:	3738      	adds	r7, #56	; 0x38
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}

0801044c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b084      	sub	sp, #16
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d10a      	bne.n	8010470 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 801045a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801045e:	f383 8811 	msr	BASEPRI, r3
 8010462:	f3bf 8f6f 	isb	sy
 8010466:	f3bf 8f4f 	dsb	sy
 801046a:	60bb      	str	r3, [r7, #8]
}
 801046c:	bf00      	nop
 801046e:	e7fe      	b.n	801046e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8010470:	f002 fbd0 	bl	8012c14 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010478:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 801047a:	f002 fbfb 	bl	8012c74 <vPortExitCritical>

	return uxReturn;
 801047e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010480:	4618      	mov	r0, r3
 8010482:	3710      	adds	r7, #16
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8010488:	b480      	push	{r7}
 801048a:	b087      	sub	sp, #28
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8010494:	697b      	ldr	r3, [r7, #20]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d10a      	bne.n	80104b0 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 801049a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801049e:	f383 8811 	msr	BASEPRI, r3
 80104a2:	f3bf 8f6f 	isb	sy
 80104a6:	f3bf 8f4f 	dsb	sy
 80104aa:	60fb      	str	r3, [r7, #12]
}
 80104ac:	bf00      	nop
 80104ae:	e7fe      	b.n	80104ae <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80104b0:	697b      	ldr	r3, [r7, #20]
 80104b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104b4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80104b6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80104b8:	4618      	mov	r0, r3
 80104ba:	371c      	adds	r7, #28
 80104bc:	46bd      	mov	sp, r7
 80104be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c2:	4770      	bx	lr

080104c4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b084      	sub	sp, #16
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d10a      	bne.n	80104ec <vQueueDelete+0x28>
	__asm volatile
 80104d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104da:	f383 8811 	msr	BASEPRI, r3
 80104de:	f3bf 8f6f 	isb	sy
 80104e2:	f3bf 8f4f 	dsb	sy
 80104e6:	60bb      	str	r3, [r7, #8]
}
 80104e8:	bf00      	nop
 80104ea:	e7fe      	b.n	80104ea <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80104ec:	68f8      	ldr	r0, [r7, #12]
 80104ee:	f000 f95f 	bl	80107b0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d102      	bne.n	8010502 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80104fc:	68f8      	ldr	r0, [r7, #12]
 80104fe:	f002 fd7b 	bl	8012ff8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8010502:	bf00      	nop
 8010504:	3710      	adds	r7, #16
 8010506:	46bd      	mov	sp, r7
 8010508:	bd80      	pop	{r7, pc}

0801050a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801050a:	b480      	push	{r7}
 801050c:	b085      	sub	sp, #20
 801050e:	af00      	add	r7, sp, #0
 8010510:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010516:	2b00      	cmp	r3, #0
 8010518:	d006      	beq.n	8010528 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8010524:	60fb      	str	r3, [r7, #12]
 8010526:	e001      	b.n	801052c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010528:	2300      	movs	r3, #0
 801052a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801052c:	68fb      	ldr	r3, [r7, #12]
	}
 801052e:	4618      	mov	r0, r3
 8010530:	3714      	adds	r7, #20
 8010532:	46bd      	mov	sp, r7
 8010534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010538:	4770      	bx	lr

0801053a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801053a:	b580      	push	{r7, lr}
 801053c:	b086      	sub	sp, #24
 801053e:	af00      	add	r7, sp, #0
 8010540:	60f8      	str	r0, [r7, #12]
 8010542:	60b9      	str	r1, [r7, #8]
 8010544:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010546:	2300      	movs	r3, #0
 8010548:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801054e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010554:	2b00      	cmp	r3, #0
 8010556:	d10d      	bne.n	8010574 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d14d      	bne.n	80105fc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	689b      	ldr	r3, [r3, #8]
 8010564:	4618      	mov	r0, r3
 8010566:	f001 fc3d 	bl	8011de4 <xTaskPriorityDisinherit>
 801056a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	2200      	movs	r2, #0
 8010570:	609a      	str	r2, [r3, #8]
 8010572:	e043      	b.n	80105fc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d119      	bne.n	80105ae <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	6858      	ldr	r0, [r3, #4]
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010582:	461a      	mov	r2, r3
 8010584:	68b9      	ldr	r1, [r7, #8]
 8010586:	f003 f907 	bl	8013798 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	685a      	ldr	r2, [r3, #4]
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010592:	441a      	add	r2, r3
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	685a      	ldr	r2, [r3, #4]
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	689b      	ldr	r3, [r3, #8]
 80105a0:	429a      	cmp	r2, r3
 80105a2:	d32b      	bcc.n	80105fc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	681a      	ldr	r2, [r3, #0]
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	605a      	str	r2, [r3, #4]
 80105ac:	e026      	b.n	80105fc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	68d8      	ldr	r0, [r3, #12]
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105b6:	461a      	mov	r2, r3
 80105b8:	68b9      	ldr	r1, [r7, #8]
 80105ba:	f003 f8ed 	bl	8013798 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	68da      	ldr	r2, [r3, #12]
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105c6:	425b      	negs	r3, r3
 80105c8:	441a      	add	r2, r3
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	68da      	ldr	r2, [r3, #12]
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	429a      	cmp	r2, r3
 80105d8:	d207      	bcs.n	80105ea <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	689a      	ldr	r2, [r3, #8]
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105e2:	425b      	negs	r3, r3
 80105e4:	441a      	add	r2, r3
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2b02      	cmp	r3, #2
 80105ee:	d105      	bne.n	80105fc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d002      	beq.n	80105fc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80105f6:	693b      	ldr	r3, [r7, #16]
 80105f8:	3b01      	subs	r3, #1
 80105fa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80105fc:	693b      	ldr	r3, [r7, #16]
 80105fe:	1c5a      	adds	r2, r3, #1
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010604:	697b      	ldr	r3, [r7, #20]
}
 8010606:	4618      	mov	r0, r3
 8010608:	3718      	adds	r7, #24
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}

0801060e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801060e:	b580      	push	{r7, lr}
 8010610:	b082      	sub	sp, #8
 8010612:	af00      	add	r7, sp, #0
 8010614:	6078      	str	r0, [r7, #4]
 8010616:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801061c:	2b00      	cmp	r3, #0
 801061e:	d018      	beq.n	8010652 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	68da      	ldr	r2, [r3, #12]
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010628:	441a      	add	r2, r3
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	68da      	ldr	r2, [r3, #12]
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	689b      	ldr	r3, [r3, #8]
 8010636:	429a      	cmp	r2, r3
 8010638:	d303      	bcc.n	8010642 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	681a      	ldr	r2, [r3, #0]
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	68d9      	ldr	r1, [r3, #12]
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801064a:	461a      	mov	r2, r3
 801064c:	6838      	ldr	r0, [r7, #0]
 801064e:	f003 f8a3 	bl	8013798 <memcpy>
	}
}
 8010652:	bf00      	nop
 8010654:	3708      	adds	r7, #8
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}

0801065a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801065a:	b580      	push	{r7, lr}
 801065c:	b084      	sub	sp, #16
 801065e:	af00      	add	r7, sp, #0
 8010660:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010662:	f002 fad7 	bl	8012c14 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801066c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801066e:	e011      	b.n	8010694 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010674:	2b00      	cmp	r3, #0
 8010676:	d012      	beq.n	801069e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	3324      	adds	r3, #36	; 0x24
 801067c:	4618      	mov	r0, r3
 801067e:	f001 f933 	bl	80118e8 <xTaskRemoveFromEventList>
 8010682:	4603      	mov	r3, r0
 8010684:	2b00      	cmp	r3, #0
 8010686:	d001      	beq.n	801068c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010688:	f001 fa30 	bl	8011aec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801068c:	7bfb      	ldrb	r3, [r7, #15]
 801068e:	3b01      	subs	r3, #1
 8010690:	b2db      	uxtb	r3, r3
 8010692:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010698:	2b00      	cmp	r3, #0
 801069a:	dce9      	bgt.n	8010670 <prvUnlockQueue+0x16>
 801069c:	e000      	b.n	80106a0 <prvUnlockQueue+0x46>
					break;
 801069e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	22ff      	movs	r2, #255	; 0xff
 80106a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80106a8:	f002 fae4 	bl	8012c74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80106ac:	f002 fab2 	bl	8012c14 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80106b6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80106b8:	e011      	b.n	80106de <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	691b      	ldr	r3, [r3, #16]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d012      	beq.n	80106e8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	3310      	adds	r3, #16
 80106c6:	4618      	mov	r0, r3
 80106c8:	f001 f90e 	bl	80118e8 <xTaskRemoveFromEventList>
 80106cc:	4603      	mov	r3, r0
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d001      	beq.n	80106d6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80106d2:	f001 fa0b 	bl	8011aec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80106d6:	7bbb      	ldrb	r3, [r7, #14]
 80106d8:	3b01      	subs	r3, #1
 80106da:	b2db      	uxtb	r3, r3
 80106dc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80106de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	dce9      	bgt.n	80106ba <prvUnlockQueue+0x60>
 80106e6:	e000      	b.n	80106ea <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80106e8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	22ff      	movs	r2, #255	; 0xff
 80106ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80106f2:	f002 fabf 	bl	8012c74 <vPortExitCritical>
}
 80106f6:	bf00      	nop
 80106f8:	3710      	adds	r7, #16
 80106fa:	46bd      	mov	sp, r7
 80106fc:	bd80      	pop	{r7, pc}

080106fe <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80106fe:	b580      	push	{r7, lr}
 8010700:	b084      	sub	sp, #16
 8010702:	af00      	add	r7, sp, #0
 8010704:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010706:	f002 fa85 	bl	8012c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801070e:	2b00      	cmp	r3, #0
 8010710:	d102      	bne.n	8010718 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010712:	2301      	movs	r3, #1
 8010714:	60fb      	str	r3, [r7, #12]
 8010716:	e001      	b.n	801071c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010718:	2300      	movs	r3, #0
 801071a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801071c:	f002 faaa 	bl	8012c74 <vPortExitCritical>

	return xReturn;
 8010720:	68fb      	ldr	r3, [r7, #12]
}
 8010722:	4618      	mov	r0, r3
 8010724:	3710      	adds	r7, #16
 8010726:	46bd      	mov	sp, r7
 8010728:	bd80      	pop	{r7, pc}

0801072a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801072a:	b580      	push	{r7, lr}
 801072c:	b084      	sub	sp, #16
 801072e:	af00      	add	r7, sp, #0
 8010730:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010732:	f002 fa6f 	bl	8012c14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801073e:	429a      	cmp	r2, r3
 8010740:	d102      	bne.n	8010748 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010742:	2301      	movs	r3, #1
 8010744:	60fb      	str	r3, [r7, #12]
 8010746:	e001      	b.n	801074c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010748:	2300      	movs	r3, #0
 801074a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801074c:	f002 fa92 	bl	8012c74 <vPortExitCritical>

	return xReturn;
 8010750:	68fb      	ldr	r3, [r7, #12]
}
 8010752:	4618      	mov	r0, r3
 8010754:	3710      	adds	r7, #16
 8010756:	46bd      	mov	sp, r7
 8010758:	bd80      	pop	{r7, pc}
	...

0801075c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801075c:	b480      	push	{r7}
 801075e:	b085      	sub	sp, #20
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010766:	2300      	movs	r3, #0
 8010768:	60fb      	str	r3, [r7, #12]
 801076a:	e014      	b.n	8010796 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801076c:	4a0f      	ldr	r2, [pc, #60]	; (80107ac <vQueueAddToRegistry+0x50>)
 801076e:	68fb      	ldr	r3, [r7, #12]
 8010770:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d10b      	bne.n	8010790 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010778:	490c      	ldr	r1, [pc, #48]	; (80107ac <vQueueAddToRegistry+0x50>)
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	683a      	ldr	r2, [r7, #0]
 801077e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010782:	4a0a      	ldr	r2, [pc, #40]	; (80107ac <vQueueAddToRegistry+0x50>)
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	00db      	lsls	r3, r3, #3
 8010788:	4413      	add	r3, r2
 801078a:	687a      	ldr	r2, [r7, #4]
 801078c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801078e:	e006      	b.n	801079e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	3301      	adds	r3, #1
 8010794:	60fb      	str	r3, [r7, #12]
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	2b07      	cmp	r3, #7
 801079a:	d9e7      	bls.n	801076c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801079c:	bf00      	nop
 801079e:	bf00      	nop
 80107a0:	3714      	adds	r7, #20
 80107a2:	46bd      	mov	sp, r7
 80107a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a8:	4770      	bx	lr
 80107aa:	bf00      	nop
 80107ac:	20001ac8 	.word	0x20001ac8

080107b0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80107b0:	b480      	push	{r7}
 80107b2:	b085      	sub	sp, #20
 80107b4:	af00      	add	r7, sp, #0
 80107b6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80107b8:	2300      	movs	r3, #0
 80107ba:	60fb      	str	r3, [r7, #12]
 80107bc:	e016      	b.n	80107ec <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80107be:	4a10      	ldr	r2, [pc, #64]	; (8010800 <vQueueUnregisterQueue+0x50>)
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	00db      	lsls	r3, r3, #3
 80107c4:	4413      	add	r3, r2
 80107c6:	685b      	ldr	r3, [r3, #4]
 80107c8:	687a      	ldr	r2, [r7, #4]
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d10b      	bne.n	80107e6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80107ce:	4a0c      	ldr	r2, [pc, #48]	; (8010800 <vQueueUnregisterQueue+0x50>)
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	2100      	movs	r1, #0
 80107d4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80107d8:	4a09      	ldr	r2, [pc, #36]	; (8010800 <vQueueUnregisterQueue+0x50>)
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	00db      	lsls	r3, r3, #3
 80107de:	4413      	add	r3, r2
 80107e0:	2200      	movs	r2, #0
 80107e2:	605a      	str	r2, [r3, #4]
				break;
 80107e4:	e006      	b.n	80107f4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	3301      	adds	r3, #1
 80107ea:	60fb      	str	r3, [r7, #12]
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	2b07      	cmp	r3, #7
 80107f0:	d9e5      	bls.n	80107be <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80107f2:	bf00      	nop
 80107f4:	bf00      	nop
 80107f6:	3714      	adds	r7, #20
 80107f8:	46bd      	mov	sp, r7
 80107fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fe:	4770      	bx	lr
 8010800:	20001ac8 	.word	0x20001ac8

08010804 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010804:	b580      	push	{r7, lr}
 8010806:	b086      	sub	sp, #24
 8010808:	af00      	add	r7, sp, #0
 801080a:	60f8      	str	r0, [r7, #12]
 801080c:	60b9      	str	r1, [r7, #8]
 801080e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010814:	f002 f9fe 	bl	8012c14 <vPortEnterCritical>
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801081e:	b25b      	sxtb	r3, r3
 8010820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010824:	d103      	bne.n	801082e <vQueueWaitForMessageRestricted+0x2a>
 8010826:	697b      	ldr	r3, [r7, #20]
 8010828:	2200      	movs	r2, #0
 801082a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010834:	b25b      	sxtb	r3, r3
 8010836:	f1b3 3fff 	cmp.w	r3, #4294967295
 801083a:	d103      	bne.n	8010844 <vQueueWaitForMessageRestricted+0x40>
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	2200      	movs	r2, #0
 8010840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010844:	f002 fa16 	bl	8012c74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010848:	697b      	ldr	r3, [r7, #20]
 801084a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801084c:	2b00      	cmp	r3, #0
 801084e:	d106      	bne.n	801085e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	3324      	adds	r3, #36	; 0x24
 8010854:	687a      	ldr	r2, [r7, #4]
 8010856:	68b9      	ldr	r1, [r7, #8]
 8010858:	4618      	mov	r0, r3
 801085a:	f001 f819 	bl	8011890 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801085e:	6978      	ldr	r0, [r7, #20]
 8010860:	f7ff fefb 	bl	801065a <prvUnlockQueue>
	}
 8010864:	bf00      	nop
 8010866:	3718      	adds	r7, #24
 8010868:	46bd      	mov	sp, r7
 801086a:	bd80      	pop	{r7, pc}

0801086c <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 801086c:	b580      	push	{r7, lr}
 801086e:	b08c      	sub	sp, #48	; 0x30
 8010870:	af02      	add	r7, sp, #8
 8010872:	60f8      	str	r0, [r7, #12]
 8010874:	60b9      	str	r1, [r7, #8]
 8010876:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2b01      	cmp	r3, #1
 801087c:	d110      	bne.n	80108a0 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 801087e:	2301      	movs	r3, #1
 8010880:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	2b04      	cmp	r3, #4
 8010888:	d81b      	bhi.n	80108c2 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 801088a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801088e:	f383 8811 	msr	BASEPRI, r3
 8010892:	f3bf 8f6f 	isb	sy
 8010896:	f3bf 8f4f 	dsb	sy
 801089a:	61fb      	str	r3, [r7, #28]
}
 801089c:	bf00      	nop
 801089e:	e7fe      	b.n	801089e <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 80108a0:	2300      	movs	r3, #0
 80108a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d10a      	bne.n	80108c2 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 80108ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108b0:	f383 8811 	msr	BASEPRI, r3
 80108b4:	f3bf 8f6f 	isb	sy
 80108b8:	f3bf 8f4f 	dsb	sy
 80108bc:	61bb      	str	r3, [r7, #24]
}
 80108be:	bf00      	nop
 80108c0:	e7fe      	b.n	80108c0 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 80108c2:	68ba      	ldr	r2, [r7, #8]
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	429a      	cmp	r2, r3
 80108c8:	d90a      	bls.n	80108e0 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 80108ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ce:	f383 8811 	msr	BASEPRI, r3
 80108d2:	f3bf 8f6f 	isb	sy
 80108d6:	f3bf 8f4f 	dsb	sy
 80108da:	617b      	str	r3, [r7, #20]
}
 80108dc:	bf00      	nop
 80108de:	e7fe      	b.n	80108de <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d101      	bne.n	80108ea <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 80108e6:	2301      	movs	r3, #1
 80108e8:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	3301      	adds	r3, #1
 80108ee:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	3324      	adds	r3, #36	; 0x24
 80108f4:	4618      	mov	r0, r3
 80108f6:	f002 faaf 	bl	8012e58 <pvPortMalloc>
 80108fa:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 80108fc:	6a3b      	ldr	r3, [r7, #32]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d00a      	beq.n	8010918 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8010902:	6a3b      	ldr	r3, [r7, #32]
 8010904:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8010908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801090c:	9300      	str	r3, [sp, #0]
 801090e:	68bb      	ldr	r3, [r7, #8]
 8010910:	68fa      	ldr	r2, [r7, #12]
 8010912:	6a38      	ldr	r0, [r7, #32]
 8010914:	f000 fafd 	bl	8010f12 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8010918:	6a3b      	ldr	r3, [r7, #32]
	}
 801091a:	4618      	mov	r0, r3
 801091c:	3728      	adds	r7, #40	; 0x28
 801091e:	46bd      	mov	sp, r7
 8010920:	bd80      	pop	{r7, pc}

08010922 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8010922:	b480      	push	{r7}
 8010924:	b087      	sub	sp, #28
 8010926:	af00      	add	r7, sp, #0
 8010928:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d10a      	bne.n	801094a <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 8010934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010938:	f383 8811 	msr	BASEPRI, r3
 801093c:	f3bf 8f6f 	isb	sy
 8010940:	f3bf 8f4f 	dsb	sy
 8010944:	60fb      	str	r3, [r7, #12]
}
 8010946:	bf00      	nop
 8010948:	e7fe      	b.n	8010948 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 801094a:	693b      	ldr	r3, [r7, #16]
 801094c:	689a      	ldr	r2, [r3, #8]
 801094e:	693b      	ldr	r3, [r7, #16]
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	4413      	add	r3, r2
 8010954:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8010956:	693b      	ldr	r3, [r7, #16]
 8010958:	685b      	ldr	r3, [r3, #4]
 801095a:	697a      	ldr	r2, [r7, #20]
 801095c:	1ad3      	subs	r3, r2, r3
 801095e:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	3b01      	subs	r3, #1
 8010964:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8010966:	693b      	ldr	r3, [r7, #16]
 8010968:	689b      	ldr	r3, [r3, #8]
 801096a:	697a      	ldr	r2, [r7, #20]
 801096c:	429a      	cmp	r2, r3
 801096e:	d304      	bcc.n	801097a <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8010970:	693b      	ldr	r3, [r7, #16]
 8010972:	689b      	ldr	r3, [r3, #8]
 8010974:	697a      	ldr	r2, [r7, #20]
 8010976:	1ad3      	subs	r3, r2, r3
 8010978:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 801097a:	697b      	ldr	r3, [r7, #20]
}
 801097c:	4618      	mov	r0, r3
 801097e:	371c      	adds	r7, #28
 8010980:	46bd      	mov	sp, r7
 8010982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010986:	4770      	bx	lr

08010988 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b090      	sub	sp, #64	; 0x40
 801098c:	af02      	add	r7, sp, #8
 801098e:	60f8      	str	r0, [r7, #12]
 8010990:	60b9      	str	r1, [r7, #8]
 8010992:	607a      	str	r2, [r7, #4]
 8010994:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 801099a:	2300      	movs	r3, #0
 801099c:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 80109a2:	68bb      	ldr	r3, [r7, #8]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d10a      	bne.n	80109be <xStreamBufferSend+0x36>
	__asm volatile
 80109a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109ac:	f383 8811 	msr	BASEPRI, r3
 80109b0:	f3bf 8f6f 	isb	sy
 80109b4:	f3bf 8f4f 	dsb	sy
 80109b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80109ba:	bf00      	nop
 80109bc:	e7fe      	b.n	80109bc <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 80109be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d10a      	bne.n	80109da <xStreamBufferSend+0x52>
	__asm volatile
 80109c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109c8:	f383 8811 	msr	BASEPRI, r3
 80109cc:	f3bf 8f6f 	isb	sy
 80109d0:	f3bf 8f4f 	dsb	sy
 80109d4:	623b      	str	r3, [r7, #32]
}
 80109d6:	bf00      	nop
 80109d8:	e7fe      	b.n	80109d8 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80109da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109dc:	7f1b      	ldrb	r3, [r3, #28]
 80109de:	f003 0301 	and.w	r3, r3, #1
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d011      	beq.n	8010a0a <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80109e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109e8:	3304      	adds	r3, #4
 80109ea:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 80109ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	429a      	cmp	r2, r3
 80109f2:	d80a      	bhi.n	8010a0a <xStreamBufferSend+0x82>
	__asm volatile
 80109f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109f8:	f383 8811 	msr	BASEPRI, r3
 80109fc:	f3bf 8f6f 	isb	sy
 8010a00:	f3bf 8f4f 	dsb	sy
 8010a04:	61fb      	str	r3, [r7, #28]
}
 8010a06:	bf00      	nop
 8010a08:	e7fe      	b.n	8010a08 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d03e      	beq.n	8010a8e <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 8010a10:	f107 0310 	add.w	r3, r7, #16
 8010a14:	4618      	mov	r0, r3
 8010a16:	f000 ffcb 	bl	80119b0 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 8010a1a:	f002 f8fb 	bl	8012c14 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8010a1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a20:	f7ff ff7f 	bl	8010922 <xStreamBufferSpacesAvailable>
 8010a24:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 8010a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a2a:	429a      	cmp	r2, r3
 8010a2c:	d217      	bcs.n	8010a5e <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 8010a2e:	2000      	movs	r0, #0
 8010a30:	f001 fbfa 	bl	8012228 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8010a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a36:	695b      	ldr	r3, [r3, #20]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d00a      	beq.n	8010a52 <xStreamBufferSend+0xca>
	__asm volatile
 8010a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a40:	f383 8811 	msr	BASEPRI, r3
 8010a44:	f3bf 8f6f 	isb	sy
 8010a48:	f3bf 8f4f 	dsb	sy
 8010a4c:	61bb      	str	r3, [r7, #24]
}
 8010a4e:	bf00      	nop
 8010a50:	e7fe      	b.n	8010a50 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8010a52:	f001 f931 	bl	8011cb8 <xTaskGetCurrentTaskHandle>
 8010a56:	4602      	mov	r2, r0
 8010a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a5a:	615a      	str	r2, [r3, #20]
 8010a5c:	e002      	b.n	8010a64 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 8010a5e:	f002 f909 	bl	8012c74 <vPortExitCritical>
					break;
 8010a62:	e014      	b.n	8010a8e <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 8010a64:	f002 f906 	bl	8012c74 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	2200      	movs	r2, #0
 8010a6c:	2100      	movs	r1, #0
 8010a6e:	2000      	movs	r0, #0
 8010a70:	f001 fabc 	bl	8011fec <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8010a74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a76:	2200      	movs	r2, #0
 8010a78:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8010a7a:	463a      	mov	r2, r7
 8010a7c:	f107 0310 	add.w	r3, r7, #16
 8010a80:	4611      	mov	r1, r2
 8010a82:	4618      	mov	r0, r3
 8010a84:	f000 ffd0 	bl	8011a28 <xTaskCheckForTimeOut>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d0c5      	beq.n	8010a1a <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 8010a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d103      	bne.n	8010a9c <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8010a94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a96:	f7ff ff44 	bl	8010922 <xStreamBufferSpacesAvailable>
 8010a9a:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 8010a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a9e:	9300      	str	r3, [sp, #0]
 8010aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010aa2:	687a      	ldr	r2, [r7, #4]
 8010aa4:	68b9      	ldr	r1, [r7, #8]
 8010aa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010aa8:	f000 f823 	bl	8010af2 <prvWriteMessageToBuffer>
 8010aac:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 8010aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d019      	beq.n	8010ae8 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8010ab4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ab6:	f000 fa0c 	bl	8010ed2 <prvBytesInBuffer>
 8010aba:	4602      	mov	r2, r0
 8010abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010abe:	68db      	ldr	r3, [r3, #12]
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d311      	bcc.n	8010ae8 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8010ac4:	f000 fcba 	bl	801143c <vTaskSuspendAll>
 8010ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aca:	691b      	ldr	r3, [r3, #16]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d009      	beq.n	8010ae4 <xStreamBufferSend+0x15c>
 8010ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ad2:	6918      	ldr	r0, [r3, #16]
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	2200      	movs	r2, #0
 8010ad8:	2100      	movs	r1, #0
 8010ada:	f001 fae7 	bl	80120ac <xTaskGenericNotify>
 8010ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ae0:	2200      	movs	r2, #0
 8010ae2:	611a      	str	r2, [r3, #16]
 8010ae4:	f000 fcb8 	bl	8011458 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8010ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8010aea:	4618      	mov	r0, r3
 8010aec:	3738      	adds	r7, #56	; 0x38
 8010aee:	46bd      	mov	sp, r7
 8010af0:	bd80      	pop	{r7, pc}

08010af2 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8010af2:	b580      	push	{r7, lr}
 8010af4:	b086      	sub	sp, #24
 8010af6:	af00      	add	r7, sp, #0
 8010af8:	60f8      	str	r0, [r7, #12]
 8010afa:	60b9      	str	r1, [r7, #8]
 8010afc:	607a      	str	r2, [r7, #4]
 8010afe:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8010b00:	683b      	ldr	r3, [r7, #0]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d102      	bne.n	8010b0c <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8010b06:	2300      	movs	r3, #0
 8010b08:	617b      	str	r3, [r7, #20]
 8010b0a:	e01d      	b.n	8010b48 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	7f1b      	ldrb	r3, [r3, #28]
 8010b10:	f003 0301 	and.w	r3, r3, #1
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d108      	bne.n	8010b2a <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 8010b18:	2301      	movs	r3, #1
 8010b1a:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8010b1c:	687a      	ldr	r2, [r7, #4]
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	4293      	cmp	r3, r2
 8010b22:	bf28      	it	cs
 8010b24:	4613      	movcs	r3, r2
 8010b26:	607b      	str	r3, [r7, #4]
 8010b28:	e00e      	b.n	8010b48 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8010b2a:	683a      	ldr	r2, [r7, #0]
 8010b2c:	6a3b      	ldr	r3, [r7, #32]
 8010b2e:	429a      	cmp	r2, r3
 8010b30:	d308      	bcc.n	8010b44 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8010b32:	2301      	movs	r3, #1
 8010b34:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8010b36:	1d3b      	adds	r3, r7, #4
 8010b38:	2204      	movs	r2, #4
 8010b3a:	4619      	mov	r1, r3
 8010b3c:	68f8      	ldr	r0, [r7, #12]
 8010b3e:	f000 f8dc 	bl	8010cfa <prvWriteBytesToBuffer>
 8010b42:	e001      	b.n	8010b48 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 8010b44:	2300      	movs	r3, #0
 8010b46:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 8010b48:	697b      	ldr	r3, [r7, #20]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d007      	beq.n	8010b5e <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	461a      	mov	r2, r3
 8010b52:	68b9      	ldr	r1, [r7, #8]
 8010b54:	68f8      	ldr	r0, [r7, #12]
 8010b56:	f000 f8d0 	bl	8010cfa <prvWriteBytesToBuffer>
 8010b5a:	6138      	str	r0, [r7, #16]
 8010b5c:	e001      	b.n	8010b62 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8010b62:	693b      	ldr	r3, [r7, #16]
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3718      	adds	r7, #24
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	bd80      	pop	{r7, pc}

08010b6c <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b08e      	sub	sp, #56	; 0x38
 8010b70:	af02      	add	r7, sp, #8
 8010b72:	60f8      	str	r0, [r7, #12]
 8010b74:	60b9      	str	r1, [r7, #8]
 8010b76:	607a      	str	r2, [r7, #4]
 8010b78:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d10a      	bne.n	8010b9e <xStreamBufferReceive+0x32>
	__asm volatile
 8010b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b8c:	f383 8811 	msr	BASEPRI, r3
 8010b90:	f3bf 8f6f 	isb	sy
 8010b94:	f3bf 8f4f 	dsb	sy
 8010b98:	61fb      	str	r3, [r7, #28]
}
 8010b9a:	bf00      	nop
 8010b9c:	e7fe      	b.n	8010b9c <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8010b9e:	6a3b      	ldr	r3, [r7, #32]
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	d10a      	bne.n	8010bba <xStreamBufferReceive+0x4e>
	__asm volatile
 8010ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ba8:	f383 8811 	msr	BASEPRI, r3
 8010bac:	f3bf 8f6f 	isb	sy
 8010bb0:	f3bf 8f4f 	dsb	sy
 8010bb4:	61bb      	str	r3, [r7, #24]
}
 8010bb6:	bf00      	nop
 8010bb8:	e7fe      	b.n	8010bb8 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8010bba:	6a3b      	ldr	r3, [r7, #32]
 8010bbc:	7f1b      	ldrb	r3, [r3, #28]
 8010bbe:	f003 0301 	and.w	r3, r3, #1
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d002      	beq.n	8010bcc <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8010bc6:	2304      	movs	r3, #4
 8010bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8010bca:	e001      	b.n	8010bd0 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8010bcc:	2300      	movs	r3, #0
 8010bce:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8010bd0:	683b      	ldr	r3, [r7, #0]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d034      	beq.n	8010c40 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8010bd6:	f002 f81d 	bl	8012c14 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8010bda:	6a38      	ldr	r0, [r7, #32]
 8010bdc:	f000 f979 	bl	8010ed2 <prvBytesInBuffer>
 8010be0:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8010be2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010be6:	429a      	cmp	r2, r3
 8010be8:	d816      	bhi.n	8010c18 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8010bea:	2000      	movs	r0, #0
 8010bec:	f001 fb1c 	bl	8012228 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8010bf0:	6a3b      	ldr	r3, [r7, #32]
 8010bf2:	691b      	ldr	r3, [r3, #16]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d00a      	beq.n	8010c0e <xStreamBufferReceive+0xa2>
	__asm volatile
 8010bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bfc:	f383 8811 	msr	BASEPRI, r3
 8010c00:	f3bf 8f6f 	isb	sy
 8010c04:	f3bf 8f4f 	dsb	sy
 8010c08:	617b      	str	r3, [r7, #20]
}
 8010c0a:	bf00      	nop
 8010c0c:	e7fe      	b.n	8010c0c <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8010c0e:	f001 f853 	bl	8011cb8 <xTaskGetCurrentTaskHandle>
 8010c12:	4602      	mov	r2, r0
 8010c14:	6a3b      	ldr	r3, [r7, #32]
 8010c16:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8010c18:	f002 f82c 	bl	8012c74 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8010c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c20:	429a      	cmp	r2, r3
 8010c22:	d811      	bhi.n	8010c48 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	2200      	movs	r2, #0
 8010c28:	2100      	movs	r1, #0
 8010c2a:	2000      	movs	r0, #0
 8010c2c:	f001 f9de 	bl	8011fec <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8010c30:	6a3b      	ldr	r3, [r7, #32]
 8010c32:	2200      	movs	r2, #0
 8010c34:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8010c36:	6a38      	ldr	r0, [r7, #32]
 8010c38:	f000 f94b 	bl	8010ed2 <prvBytesInBuffer>
 8010c3c:	62b8      	str	r0, [r7, #40]	; 0x28
 8010c3e:	e003      	b.n	8010c48 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8010c40:	6a38      	ldr	r0, [r7, #32]
 8010c42:	f000 f946 	bl	8010ed2 <prvBytesInBuffer>
 8010c46:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8010c48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	d91d      	bls.n	8010c8c <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8010c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c52:	9300      	str	r3, [sp, #0]
 8010c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	68b9      	ldr	r1, [r7, #8]
 8010c5a:	6a38      	ldr	r0, [r7, #32]
 8010c5c:	f000 f81b 	bl	8010c96 <prvReadMessageFromBuffer>
 8010c60:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8010c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d011      	beq.n	8010c8c <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8010c68:	f000 fbe8 	bl	801143c <vTaskSuspendAll>
 8010c6c:	6a3b      	ldr	r3, [r7, #32]
 8010c6e:	695b      	ldr	r3, [r3, #20]
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d009      	beq.n	8010c88 <xStreamBufferReceive+0x11c>
 8010c74:	6a3b      	ldr	r3, [r7, #32]
 8010c76:	6958      	ldr	r0, [r3, #20]
 8010c78:	2300      	movs	r3, #0
 8010c7a:	2200      	movs	r2, #0
 8010c7c:	2100      	movs	r1, #0
 8010c7e:	f001 fa15 	bl	80120ac <xTaskGenericNotify>
 8010c82:	6a3b      	ldr	r3, [r7, #32]
 8010c84:	2200      	movs	r2, #0
 8010c86:	615a      	str	r2, [r3, #20]
 8010c88:	f000 fbe6 	bl	8011458 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8010c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3730      	adds	r7, #48	; 0x30
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}

08010c96 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8010c96:	b580      	push	{r7, lr}
 8010c98:	b088      	sub	sp, #32
 8010c9a:	af00      	add	r7, sp, #0
 8010c9c:	60f8      	str	r0, [r7, #12]
 8010c9e:	60b9      	str	r1, [r7, #8]
 8010ca0:	607a      	str	r2, [r7, #4]
 8010ca2:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8010ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d019      	beq.n	8010cde <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8010cb0:	f107 0110 	add.w	r1, r7, #16
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010cb8:	68f8      	ldr	r0, [r7, #12]
 8010cba:	f000 f890 	bl	8010dde <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8010cc2:	683a      	ldr	r2, [r7, #0]
 8010cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cc6:	1ad3      	subs	r3, r2, r3
 8010cc8:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8010cca:	69fa      	ldr	r2, [r7, #28]
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	429a      	cmp	r2, r3
 8010cd0:	d907      	bls.n	8010ce2 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8010cd2:	68fb      	ldr	r3, [r7, #12]
 8010cd4:	69ba      	ldr	r2, [r7, #24]
 8010cd6:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8010cd8:	2300      	movs	r3, #0
 8010cda:	61fb      	str	r3, [r7, #28]
 8010cdc:	e001      	b.n	8010ce2 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8010ce2:	683b      	ldr	r3, [r7, #0]
 8010ce4:	69fa      	ldr	r2, [r7, #28]
 8010ce6:	68b9      	ldr	r1, [r7, #8]
 8010ce8:	68f8      	ldr	r0, [r7, #12]
 8010cea:	f000 f878 	bl	8010dde <prvReadBytesFromBuffer>
 8010cee:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8010cf0:	697b      	ldr	r3, [r7, #20]
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3720      	adds	r7, #32
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}

08010cfa <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8010cfa:	b580      	push	{r7, lr}
 8010cfc:	b08a      	sub	sp, #40	; 0x28
 8010cfe:	af00      	add	r7, sp, #0
 8010d00:	60f8      	str	r0, [r7, #12]
 8010d02:	60b9      	str	r1, [r7, #8]
 8010d04:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d10a      	bne.n	8010d22 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 8010d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d10:	f383 8811 	msr	BASEPRI, r3
 8010d14:	f3bf 8f6f 	isb	sy
 8010d18:	f3bf 8f4f 	dsb	sy
 8010d1c:	61fb      	str	r3, [r7, #28]
}
 8010d1e:	bf00      	nop
 8010d20:	e7fe      	b.n	8010d20 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	685b      	ldr	r3, [r3, #4]
 8010d26:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	689a      	ldr	r2, [r3, #8]
 8010d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d2e:	1ad3      	subs	r3, r2, r3
 8010d30:	687a      	ldr	r2, [r7, #4]
 8010d32:	4293      	cmp	r3, r2
 8010d34:	bf28      	it	cs
 8010d36:	4613      	movcs	r3, r2
 8010d38:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8010d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d3c:	6a3b      	ldr	r3, [r7, #32]
 8010d3e:	441a      	add	r2, r3
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	689b      	ldr	r3, [r3, #8]
 8010d44:	429a      	cmp	r2, r3
 8010d46:	d90a      	bls.n	8010d5e <prvWriteBytesToBuffer+0x64>
	__asm volatile
 8010d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d4c:	f383 8811 	msr	BASEPRI, r3
 8010d50:	f3bf 8f6f 	isb	sy
 8010d54:	f3bf 8f4f 	dsb	sy
 8010d58:	61bb      	str	r3, [r7, #24]
}
 8010d5a:	bf00      	nop
 8010d5c:	e7fe      	b.n	8010d5c <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	699a      	ldr	r2, [r3, #24]
 8010d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d64:	4413      	add	r3, r2
 8010d66:	6a3a      	ldr	r2, [r7, #32]
 8010d68:	68b9      	ldr	r1, [r7, #8]
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f002 fd14 	bl	8013798 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8010d70:	687a      	ldr	r2, [r7, #4]
 8010d72:	6a3b      	ldr	r3, [r7, #32]
 8010d74:	429a      	cmp	r2, r3
 8010d76:	d91c      	bls.n	8010db2 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8010d78:	687a      	ldr	r2, [r7, #4]
 8010d7a:	6a3b      	ldr	r3, [r7, #32]
 8010d7c:	1ad2      	subs	r2, r2, r3
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	689b      	ldr	r3, [r3, #8]
 8010d82:	429a      	cmp	r2, r3
 8010d84:	d90a      	bls.n	8010d9c <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 8010d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d8a:	f383 8811 	msr	BASEPRI, r3
 8010d8e:	f3bf 8f6f 	isb	sy
 8010d92:	f3bf 8f4f 	dsb	sy
 8010d96:	617b      	str	r3, [r7, #20]
}
 8010d98:	bf00      	nop
 8010d9a:	e7fe      	b.n	8010d9a <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	6998      	ldr	r0, [r3, #24]
 8010da0:	68ba      	ldr	r2, [r7, #8]
 8010da2:	6a3b      	ldr	r3, [r7, #32]
 8010da4:	18d1      	adds	r1, r2, r3
 8010da6:	687a      	ldr	r2, [r7, #4]
 8010da8:	6a3b      	ldr	r3, [r7, #32]
 8010daa:	1ad3      	subs	r3, r2, r3
 8010dac:	461a      	mov	r2, r3
 8010dae:	f002 fcf3 	bl	8013798 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8010db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	4413      	add	r3, r2
 8010db8:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	689b      	ldr	r3, [r3, #8]
 8010dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dc0:	429a      	cmp	r2, r3
 8010dc2:	d304      	bcc.n	8010dce <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	689b      	ldr	r3, [r3, #8]
 8010dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dca:	1ad3      	subs	r3, r2, r3
 8010dcc:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dd2:	605a      	str	r2, [r3, #4]

	return xCount;
 8010dd4:	687b      	ldr	r3, [r7, #4]
}
 8010dd6:	4618      	mov	r0, r3
 8010dd8:	3728      	adds	r7, #40	; 0x28
 8010dda:	46bd      	mov	sp, r7
 8010ddc:	bd80      	pop	{r7, pc}

08010dde <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8010dde:	b580      	push	{r7, lr}
 8010de0:	b08a      	sub	sp, #40	; 0x28
 8010de2:	af00      	add	r7, sp, #0
 8010de4:	60f8      	str	r0, [r7, #12]
 8010de6:	60b9      	str	r1, [r7, #8]
 8010de8:	607a      	str	r2, [r7, #4]
 8010dea:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8010dec:	687a      	ldr	r2, [r7, #4]
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	4293      	cmp	r3, r2
 8010df2:	bf28      	it	cs
 8010df4:	4613      	movcs	r3, r2
 8010df6:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8010df8:	6a3b      	ldr	r3, [r7, #32]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d064      	beq.n	8010ec8 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	689a      	ldr	r2, [r3, #8]
 8010e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e0a:	1ad3      	subs	r3, r2, r3
 8010e0c:	6a3a      	ldr	r2, [r7, #32]
 8010e0e:	4293      	cmp	r3, r2
 8010e10:	bf28      	it	cs
 8010e12:	4613      	movcs	r3, r2
 8010e14:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8010e16:	69fa      	ldr	r2, [r7, #28]
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	429a      	cmp	r2, r3
 8010e1c:	d90a      	bls.n	8010e34 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 8010e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e22:	f383 8811 	msr	BASEPRI, r3
 8010e26:	f3bf 8f6f 	isb	sy
 8010e2a:	f3bf 8f4f 	dsb	sy
 8010e2e:	61bb      	str	r3, [r7, #24]
}
 8010e30:	bf00      	nop
 8010e32:	e7fe      	b.n	8010e32 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8010e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e36:	69fb      	ldr	r3, [r7, #28]
 8010e38:	441a      	add	r2, r3
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	689b      	ldr	r3, [r3, #8]
 8010e3e:	429a      	cmp	r2, r3
 8010e40:	d90a      	bls.n	8010e58 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 8010e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e46:	f383 8811 	msr	BASEPRI, r3
 8010e4a:	f3bf 8f6f 	isb	sy
 8010e4e:	f3bf 8f4f 	dsb	sy
 8010e52:	617b      	str	r3, [r7, #20]
}
 8010e54:	bf00      	nop
 8010e56:	e7fe      	b.n	8010e56 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	699a      	ldr	r2, [r3, #24]
 8010e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e5e:	4413      	add	r3, r2
 8010e60:	69fa      	ldr	r2, [r7, #28]
 8010e62:	4619      	mov	r1, r3
 8010e64:	68b8      	ldr	r0, [r7, #8]
 8010e66:	f002 fc97 	bl	8013798 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8010e6a:	6a3a      	ldr	r2, [r7, #32]
 8010e6c:	69fb      	ldr	r3, [r7, #28]
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d919      	bls.n	8010ea6 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8010e72:	6a3a      	ldr	r2, [r7, #32]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	429a      	cmp	r2, r3
 8010e78:	d90a      	bls.n	8010e90 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 8010e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e7e:	f383 8811 	msr	BASEPRI, r3
 8010e82:	f3bf 8f6f 	isb	sy
 8010e86:	f3bf 8f4f 	dsb	sy
 8010e8a:	613b      	str	r3, [r7, #16]
}
 8010e8c:	bf00      	nop
 8010e8e:	e7fe      	b.n	8010e8e <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8010e90:	68ba      	ldr	r2, [r7, #8]
 8010e92:	69fb      	ldr	r3, [r7, #28]
 8010e94:	18d0      	adds	r0, r2, r3
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	6999      	ldr	r1, [r3, #24]
 8010e9a:	6a3a      	ldr	r2, [r7, #32]
 8010e9c:	69fb      	ldr	r3, [r7, #28]
 8010e9e:	1ad3      	subs	r3, r2, r3
 8010ea0:	461a      	mov	r2, r3
 8010ea2:	f002 fc79 	bl	8013798 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8010ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ea8:	6a3b      	ldr	r3, [r7, #32]
 8010eaa:	4413      	add	r3, r2
 8010eac:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	689b      	ldr	r3, [r3, #8]
 8010eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010eb4:	429a      	cmp	r2, r3
 8010eb6:	d304      	bcc.n	8010ec2 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	689b      	ldr	r3, [r3, #8]
 8010ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ebe:	1ad3      	subs	r3, r2, r3
 8010ec0:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ec6:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8010ec8:	6a3b      	ldr	r3, [r7, #32]
}
 8010eca:	4618      	mov	r0, r3
 8010ecc:	3728      	adds	r7, #40	; 0x28
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd80      	pop	{r7, pc}

08010ed2 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8010ed2:	b480      	push	{r7}
 8010ed4:	b085      	sub	sp, #20
 8010ed6:	af00      	add	r7, sp, #0
 8010ed8:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	689a      	ldr	r2, [r3, #8]
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	685b      	ldr	r3, [r3, #4]
 8010ee2:	4413      	add	r3, r2
 8010ee4:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	68fa      	ldr	r2, [r7, #12]
 8010eec:	1ad3      	subs	r3, r2, r3
 8010eee:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	689b      	ldr	r3, [r3, #8]
 8010ef4:	68fa      	ldr	r2, [r7, #12]
 8010ef6:	429a      	cmp	r2, r3
 8010ef8:	d304      	bcc.n	8010f04 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	689b      	ldr	r3, [r3, #8]
 8010efe:	68fa      	ldr	r2, [r7, #12]
 8010f00:	1ad3      	subs	r3, r2, r3
 8010f02:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8010f04:	68fb      	ldr	r3, [r7, #12]
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3714      	adds	r7, #20
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f10:	4770      	bx	lr

08010f12 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8010f12:	b580      	push	{r7, lr}
 8010f14:	b086      	sub	sp, #24
 8010f16:	af00      	add	r7, sp, #0
 8010f18:	60f8      	str	r0, [r7, #12]
 8010f1a:	60b9      	str	r1, [r7, #8]
 8010f1c:	607a      	str	r2, [r7, #4]
 8010f1e:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8010f20:	2355      	movs	r3, #85	; 0x55
 8010f22:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8010f24:	687a      	ldr	r2, [r7, #4]
 8010f26:	6979      	ldr	r1, [r7, #20]
 8010f28:	68b8      	ldr	r0, [r7, #8]
 8010f2a:	f002 fc43 	bl	80137b4 <memset>
 8010f2e:	4602      	mov	r2, r0
 8010f30:	68bb      	ldr	r3, [r7, #8]
 8010f32:	4293      	cmp	r3, r2
 8010f34:	d00a      	beq.n	8010f4c <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 8010f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f3a:	f383 8811 	msr	BASEPRI, r3
 8010f3e:	f3bf 8f6f 	isb	sy
 8010f42:	f3bf 8f4f 	dsb	sy
 8010f46:	613b      	str	r3, [r7, #16]
}
 8010f48:	bf00      	nop
 8010f4a:	e7fe      	b.n	8010f4a <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8010f4c:	2224      	movs	r2, #36	; 0x24
 8010f4e:	2100      	movs	r1, #0
 8010f50:	68f8      	ldr	r0, [r7, #12]
 8010f52:	f002 fc2f 	bl	80137b4 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	68ba      	ldr	r2, [r7, #8]
 8010f5a:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	687a      	ldr	r2, [r7, #4]
 8010f60:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	683a      	ldr	r2, [r7, #0]
 8010f66:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8010f6e:	771a      	strb	r2, [r3, #28]
}
 8010f70:	bf00      	nop
 8010f72:	3718      	adds	r7, #24
 8010f74:	46bd      	mov	sp, r7
 8010f76:	bd80      	pop	{r7, pc}

08010f78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b08e      	sub	sp, #56	; 0x38
 8010f7c:	af04      	add	r7, sp, #16
 8010f7e:	60f8      	str	r0, [r7, #12]
 8010f80:	60b9      	str	r1, [r7, #8]
 8010f82:	607a      	str	r2, [r7, #4]
 8010f84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d10a      	bne.n	8010fa2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8010f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f90:	f383 8811 	msr	BASEPRI, r3
 8010f94:	f3bf 8f6f 	isb	sy
 8010f98:	f3bf 8f4f 	dsb	sy
 8010f9c:	623b      	str	r3, [r7, #32]
}
 8010f9e:	bf00      	nop
 8010fa0:	e7fe      	b.n	8010fa0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d10a      	bne.n	8010fbe <xTaskCreateStatic+0x46>
	__asm volatile
 8010fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fac:	f383 8811 	msr	BASEPRI, r3
 8010fb0:	f3bf 8f6f 	isb	sy
 8010fb4:	f3bf 8f4f 	dsb	sy
 8010fb8:	61fb      	str	r3, [r7, #28]
}
 8010fba:	bf00      	nop
 8010fbc:	e7fe      	b.n	8010fbc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010fbe:	23c0      	movs	r3, #192	; 0xc0
 8010fc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010fc2:	693b      	ldr	r3, [r7, #16]
 8010fc4:	2bc0      	cmp	r3, #192	; 0xc0
 8010fc6:	d00a      	beq.n	8010fde <xTaskCreateStatic+0x66>
	__asm volatile
 8010fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fcc:	f383 8811 	msr	BASEPRI, r3
 8010fd0:	f3bf 8f6f 	isb	sy
 8010fd4:	f3bf 8f4f 	dsb	sy
 8010fd8:	61bb      	str	r3, [r7, #24]
}
 8010fda:	bf00      	nop
 8010fdc:	e7fe      	b.n	8010fdc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010fde:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fe2:	2b00      	cmp	r3, #0
 8010fe4:	d01e      	beq.n	8011024 <xTaskCreateStatic+0xac>
 8010fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d01b      	beq.n	8011024 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ff4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ff8:	2202      	movs	r2, #2
 8010ffa:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010ffe:	2300      	movs	r3, #0
 8011000:	9303      	str	r3, [sp, #12]
 8011002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011004:	9302      	str	r3, [sp, #8]
 8011006:	f107 0314 	add.w	r3, r7, #20
 801100a:	9301      	str	r3, [sp, #4]
 801100c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801100e:	9300      	str	r3, [sp, #0]
 8011010:	683b      	ldr	r3, [r7, #0]
 8011012:	687a      	ldr	r2, [r7, #4]
 8011014:	68b9      	ldr	r1, [r7, #8]
 8011016:	68f8      	ldr	r0, [r7, #12]
 8011018:	f000 f850 	bl	80110bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801101c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801101e:	f000 f8f7 	bl	8011210 <prvAddNewTaskToReadyList>
 8011022:	e001      	b.n	8011028 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8011024:	2300      	movs	r3, #0
 8011026:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011028:	697b      	ldr	r3, [r7, #20]
	}
 801102a:	4618      	mov	r0, r3
 801102c:	3728      	adds	r7, #40	; 0x28
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}

08011032 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011032:	b580      	push	{r7, lr}
 8011034:	b08c      	sub	sp, #48	; 0x30
 8011036:	af04      	add	r7, sp, #16
 8011038:	60f8      	str	r0, [r7, #12]
 801103a:	60b9      	str	r1, [r7, #8]
 801103c:	603b      	str	r3, [r7, #0]
 801103e:	4613      	mov	r3, r2
 8011040:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011042:	88fb      	ldrh	r3, [r7, #6]
 8011044:	009b      	lsls	r3, r3, #2
 8011046:	4618      	mov	r0, r3
 8011048:	f001 ff06 	bl	8012e58 <pvPortMalloc>
 801104c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801104e:	697b      	ldr	r3, [r7, #20]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d00e      	beq.n	8011072 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011054:	20c0      	movs	r0, #192	; 0xc0
 8011056:	f001 feff 	bl	8012e58 <pvPortMalloc>
 801105a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801105c:	69fb      	ldr	r3, [r7, #28]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d003      	beq.n	801106a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011062:	69fb      	ldr	r3, [r7, #28]
 8011064:	697a      	ldr	r2, [r7, #20]
 8011066:	631a      	str	r2, [r3, #48]	; 0x30
 8011068:	e005      	b.n	8011076 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801106a:	6978      	ldr	r0, [r7, #20]
 801106c:	f001 ffc4 	bl	8012ff8 <vPortFree>
 8011070:	e001      	b.n	8011076 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011072:	2300      	movs	r3, #0
 8011074:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011076:	69fb      	ldr	r3, [r7, #28]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d017      	beq.n	80110ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801107c:	69fb      	ldr	r3, [r7, #28]
 801107e:	2200      	movs	r2, #0
 8011080:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011084:	88fa      	ldrh	r2, [r7, #6]
 8011086:	2300      	movs	r3, #0
 8011088:	9303      	str	r3, [sp, #12]
 801108a:	69fb      	ldr	r3, [r7, #28]
 801108c:	9302      	str	r3, [sp, #8]
 801108e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011090:	9301      	str	r3, [sp, #4]
 8011092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011094:	9300      	str	r3, [sp, #0]
 8011096:	683b      	ldr	r3, [r7, #0]
 8011098:	68b9      	ldr	r1, [r7, #8]
 801109a:	68f8      	ldr	r0, [r7, #12]
 801109c:	f000 f80e 	bl	80110bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80110a0:	69f8      	ldr	r0, [r7, #28]
 80110a2:	f000 f8b5 	bl	8011210 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80110a6:	2301      	movs	r3, #1
 80110a8:	61bb      	str	r3, [r7, #24]
 80110aa:	e002      	b.n	80110b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80110ac:	f04f 33ff 	mov.w	r3, #4294967295
 80110b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80110b2:	69bb      	ldr	r3, [r7, #24]
	}
 80110b4:	4618      	mov	r0, r3
 80110b6:	3720      	adds	r7, #32
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bd80      	pop	{r7, pc}

080110bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b088      	sub	sp, #32
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	60f8      	str	r0, [r7, #12]
 80110c4:	60b9      	str	r1, [r7, #8]
 80110c6:	607a      	str	r2, [r7, #4]
 80110c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80110ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	009b      	lsls	r3, r3, #2
 80110d2:	461a      	mov	r2, r3
 80110d4:	21a5      	movs	r1, #165	; 0xa5
 80110d6:	f002 fb6d 	bl	80137b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80110da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80110e4:	3b01      	subs	r3, #1
 80110e6:	009b      	lsls	r3, r3, #2
 80110e8:	4413      	add	r3, r2
 80110ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80110ec:	69bb      	ldr	r3, [r7, #24]
 80110ee:	f023 0307 	bic.w	r3, r3, #7
 80110f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80110f4:	69bb      	ldr	r3, [r7, #24]
 80110f6:	f003 0307 	and.w	r3, r3, #7
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d00a      	beq.n	8011114 <prvInitialiseNewTask+0x58>
	__asm volatile
 80110fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011102:	f383 8811 	msr	BASEPRI, r3
 8011106:	f3bf 8f6f 	isb	sy
 801110a:	f3bf 8f4f 	dsb	sy
 801110e:	617b      	str	r3, [r7, #20]
}
 8011110:	bf00      	nop
 8011112:	e7fe      	b.n	8011112 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d01f      	beq.n	801115a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801111a:	2300      	movs	r3, #0
 801111c:	61fb      	str	r3, [r7, #28]
 801111e:	e012      	b.n	8011146 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011120:	68ba      	ldr	r2, [r7, #8]
 8011122:	69fb      	ldr	r3, [r7, #28]
 8011124:	4413      	add	r3, r2
 8011126:	7819      	ldrb	r1, [r3, #0]
 8011128:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801112a:	69fb      	ldr	r3, [r7, #28]
 801112c:	4413      	add	r3, r2
 801112e:	3334      	adds	r3, #52	; 0x34
 8011130:	460a      	mov	r2, r1
 8011132:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011134:	68ba      	ldr	r2, [r7, #8]
 8011136:	69fb      	ldr	r3, [r7, #28]
 8011138:	4413      	add	r3, r2
 801113a:	781b      	ldrb	r3, [r3, #0]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d006      	beq.n	801114e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011140:	69fb      	ldr	r3, [r7, #28]
 8011142:	3301      	adds	r3, #1
 8011144:	61fb      	str	r3, [r7, #28]
 8011146:	69fb      	ldr	r3, [r7, #28]
 8011148:	2b0f      	cmp	r3, #15
 801114a:	d9e9      	bls.n	8011120 <prvInitialiseNewTask+0x64>
 801114c:	e000      	b.n	8011150 <prvInitialiseNewTask+0x94>
			{
				break;
 801114e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011152:	2200      	movs	r2, #0
 8011154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011158:	e003      	b.n	8011162 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801115a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801115c:	2200      	movs	r2, #0
 801115e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011164:	2b37      	cmp	r3, #55	; 0x37
 8011166:	d901      	bls.n	801116c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011168:	2337      	movs	r3, #55	; 0x37
 801116a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801116c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801116e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011170:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011176:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8011178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801117a:	2200      	movs	r2, #0
 801117c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801117e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011180:	3304      	adds	r3, #4
 8011182:	4618      	mov	r0, r3
 8011184:	f7fe f9de 	bl	800f544 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801118a:	3318      	adds	r3, #24
 801118c:	4618      	mov	r0, r3
 801118e:	f7fe f9d9 	bl	800f544 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011194:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011196:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801119a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801119e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80111a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80111a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111aa:	2200      	movs	r2, #0
 80111ac:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80111ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b0:	2200      	movs	r2, #0
 80111b2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80111b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111b8:	2200      	movs	r2, #0
 80111ba:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80111be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c0:	3358      	adds	r3, #88	; 0x58
 80111c2:	2260      	movs	r2, #96	; 0x60
 80111c4:	2100      	movs	r1, #0
 80111c6:	4618      	mov	r0, r3
 80111c8:	f002 faf4 	bl	80137b4 <memset>
 80111cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ce:	4a0d      	ldr	r2, [pc, #52]	; (8011204 <prvInitialiseNewTask+0x148>)
 80111d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80111d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d4:	4a0c      	ldr	r2, [pc, #48]	; (8011208 <prvInitialiseNewTask+0x14c>)
 80111d6:	661a      	str	r2, [r3, #96]	; 0x60
 80111d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111da:	4a0c      	ldr	r2, [pc, #48]	; (801120c <prvInitialiseNewTask+0x150>)
 80111dc:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80111de:	683a      	ldr	r2, [r7, #0]
 80111e0:	68f9      	ldr	r1, [r7, #12]
 80111e2:	69b8      	ldr	r0, [r7, #24]
 80111e4:	f001 fbe8 	bl	80129b8 <pxPortInitialiseStack>
 80111e8:	4602      	mov	r2, r0
 80111ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80111ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d002      	beq.n	80111fa <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80111f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80111f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80111fa:	bf00      	nop
 80111fc:	3720      	adds	r7, #32
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}
 8011202:	bf00      	nop
 8011204:	080140ec 	.word	0x080140ec
 8011208:	0801410c 	.word	0x0801410c
 801120c:	080140cc 	.word	0x080140cc

08011210 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011210:	b580      	push	{r7, lr}
 8011212:	b082      	sub	sp, #8
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011218:	f001 fcfc 	bl	8012c14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801121c:	4b2d      	ldr	r3, [pc, #180]	; (80112d4 <prvAddNewTaskToReadyList+0xc4>)
 801121e:	681b      	ldr	r3, [r3, #0]
 8011220:	3301      	adds	r3, #1
 8011222:	4a2c      	ldr	r2, [pc, #176]	; (80112d4 <prvAddNewTaskToReadyList+0xc4>)
 8011224:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011226:	4b2c      	ldr	r3, [pc, #176]	; (80112d8 <prvAddNewTaskToReadyList+0xc8>)
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d109      	bne.n	8011242 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801122e:	4a2a      	ldr	r2, [pc, #168]	; (80112d8 <prvAddNewTaskToReadyList+0xc8>)
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011234:	4b27      	ldr	r3, [pc, #156]	; (80112d4 <prvAddNewTaskToReadyList+0xc4>)
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	2b01      	cmp	r3, #1
 801123a:	d110      	bne.n	801125e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801123c:	f000 fc7a 	bl	8011b34 <prvInitialiseTaskLists>
 8011240:	e00d      	b.n	801125e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011242:	4b26      	ldr	r3, [pc, #152]	; (80112dc <prvAddNewTaskToReadyList+0xcc>)
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d109      	bne.n	801125e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801124a:	4b23      	ldr	r3, [pc, #140]	; (80112d8 <prvAddNewTaskToReadyList+0xc8>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011254:	429a      	cmp	r2, r3
 8011256:	d802      	bhi.n	801125e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011258:	4a1f      	ldr	r2, [pc, #124]	; (80112d8 <prvAddNewTaskToReadyList+0xc8>)
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801125e:	4b20      	ldr	r3, [pc, #128]	; (80112e0 <prvAddNewTaskToReadyList+0xd0>)
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	3301      	adds	r3, #1
 8011264:	4a1e      	ldr	r2, [pc, #120]	; (80112e0 <prvAddNewTaskToReadyList+0xd0>)
 8011266:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8011268:	4b1d      	ldr	r3, [pc, #116]	; (80112e0 <prvAddNewTaskToReadyList+0xd0>)
 801126a:	681a      	ldr	r2, [r3, #0]
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011274:	4b1b      	ldr	r3, [pc, #108]	; (80112e4 <prvAddNewTaskToReadyList+0xd4>)
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	429a      	cmp	r2, r3
 801127a:	d903      	bls.n	8011284 <prvAddNewTaskToReadyList+0x74>
 801127c:	687b      	ldr	r3, [r7, #4]
 801127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011280:	4a18      	ldr	r2, [pc, #96]	; (80112e4 <prvAddNewTaskToReadyList+0xd4>)
 8011282:	6013      	str	r3, [r2, #0]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011288:	4613      	mov	r3, r2
 801128a:	009b      	lsls	r3, r3, #2
 801128c:	4413      	add	r3, r2
 801128e:	009b      	lsls	r3, r3, #2
 8011290:	4a15      	ldr	r2, [pc, #84]	; (80112e8 <prvAddNewTaskToReadyList+0xd8>)
 8011292:	441a      	add	r2, r3
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	3304      	adds	r3, #4
 8011298:	4619      	mov	r1, r3
 801129a:	4610      	mov	r0, r2
 801129c:	f7fe f95f 	bl	800f55e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80112a0:	f001 fce8 	bl	8012c74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80112a4:	4b0d      	ldr	r3, [pc, #52]	; (80112dc <prvAddNewTaskToReadyList+0xcc>)
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d00e      	beq.n	80112ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80112ac:	4b0a      	ldr	r3, [pc, #40]	; (80112d8 <prvAddNewTaskToReadyList+0xc8>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80112b2:	687b      	ldr	r3, [r7, #4]
 80112b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80112b6:	429a      	cmp	r2, r3
 80112b8:	d207      	bcs.n	80112ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80112ba:	4b0c      	ldr	r3, [pc, #48]	; (80112ec <prvAddNewTaskToReadyList+0xdc>)
 80112bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112c0:	601a      	str	r2, [r3, #0]
 80112c2:	f3bf 8f4f 	dsb	sy
 80112c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80112ca:	bf00      	nop
 80112cc:	3708      	adds	r7, #8
 80112ce:	46bd      	mov	sp, r7
 80112d0:	bd80      	pop	{r7, pc}
 80112d2:	bf00      	nop
 80112d4:	20001fdc 	.word	0x20001fdc
 80112d8:	20001b08 	.word	0x20001b08
 80112dc:	20001fe8 	.word	0x20001fe8
 80112e0:	20001ff8 	.word	0x20001ff8
 80112e4:	20001fe4 	.word	0x20001fe4
 80112e8:	20001b0c 	.word	0x20001b0c
 80112ec:	e000ed04 	.word	0xe000ed04

080112f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80112f0:	b580      	push	{r7, lr}
 80112f2:	b084      	sub	sp, #16
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80112f8:	2300      	movs	r3, #0
 80112fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d017      	beq.n	8011332 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011302:	4b13      	ldr	r3, [pc, #76]	; (8011350 <vTaskDelay+0x60>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d00a      	beq.n	8011320 <vTaskDelay+0x30>
	__asm volatile
 801130a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801130e:	f383 8811 	msr	BASEPRI, r3
 8011312:	f3bf 8f6f 	isb	sy
 8011316:	f3bf 8f4f 	dsb	sy
 801131a:	60bb      	str	r3, [r7, #8]
}
 801131c:	bf00      	nop
 801131e:	e7fe      	b.n	801131e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011320:	f000 f88c 	bl	801143c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011324:	2100      	movs	r1, #0
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	f000 ffa4 	bl	8012274 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801132c:	f000 f894 	bl	8011458 <xTaskResumeAll>
 8011330:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d107      	bne.n	8011348 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8011338:	4b06      	ldr	r3, [pc, #24]	; (8011354 <vTaskDelay+0x64>)
 801133a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801133e:	601a      	str	r2, [r3, #0]
 8011340:	f3bf 8f4f 	dsb	sy
 8011344:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011348:	bf00      	nop
 801134a:	3710      	adds	r7, #16
 801134c:	46bd      	mov	sp, r7
 801134e:	bd80      	pop	{r7, pc}
 8011350:	20002004 	.word	0x20002004
 8011354:	e000ed04 	.word	0xe000ed04

08011358 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011358:	b580      	push	{r7, lr}
 801135a:	b08a      	sub	sp, #40	; 0x28
 801135c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801135e:	2300      	movs	r3, #0
 8011360:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011362:	2300      	movs	r3, #0
 8011364:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011366:	463a      	mov	r2, r7
 8011368:	1d39      	adds	r1, r7, #4
 801136a:	f107 0308 	add.w	r3, r7, #8
 801136e:	4618      	mov	r0, r3
 8011370:	f7fe f894 	bl	800f49c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011374:	6839      	ldr	r1, [r7, #0]
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	68ba      	ldr	r2, [r7, #8]
 801137a:	9202      	str	r2, [sp, #8]
 801137c:	9301      	str	r3, [sp, #4]
 801137e:	2300      	movs	r3, #0
 8011380:	9300      	str	r3, [sp, #0]
 8011382:	2300      	movs	r3, #0
 8011384:	460a      	mov	r2, r1
 8011386:	4925      	ldr	r1, [pc, #148]	; (801141c <vTaskStartScheduler+0xc4>)
 8011388:	4825      	ldr	r0, [pc, #148]	; (8011420 <vTaskStartScheduler+0xc8>)
 801138a:	f7ff fdf5 	bl	8010f78 <xTaskCreateStatic>
 801138e:	4603      	mov	r3, r0
 8011390:	4a24      	ldr	r2, [pc, #144]	; (8011424 <vTaskStartScheduler+0xcc>)
 8011392:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011394:	4b23      	ldr	r3, [pc, #140]	; (8011424 <vTaskStartScheduler+0xcc>)
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d002      	beq.n	80113a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801139c:	2301      	movs	r3, #1
 801139e:	617b      	str	r3, [r7, #20]
 80113a0:	e001      	b.n	80113a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80113a2:	2300      	movs	r3, #0
 80113a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80113a6:	697b      	ldr	r3, [r7, #20]
 80113a8:	2b01      	cmp	r3, #1
 80113aa:	d102      	bne.n	80113b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80113ac:	f000 ffb6 	bl	801231c <xTimerCreateTimerTask>
 80113b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80113b2:	697b      	ldr	r3, [r7, #20]
 80113b4:	2b01      	cmp	r3, #1
 80113b6:	d11d      	bne.n	80113f4 <vTaskStartScheduler+0x9c>
	__asm volatile
 80113b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113bc:	f383 8811 	msr	BASEPRI, r3
 80113c0:	f3bf 8f6f 	isb	sy
 80113c4:	f3bf 8f4f 	dsb	sy
 80113c8:	613b      	str	r3, [r7, #16]
}
 80113ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80113cc:	4b16      	ldr	r3, [pc, #88]	; (8011428 <vTaskStartScheduler+0xd0>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	3358      	adds	r3, #88	; 0x58
 80113d2:	4a16      	ldr	r2, [pc, #88]	; (801142c <vTaskStartScheduler+0xd4>)
 80113d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80113d6:	4b16      	ldr	r3, [pc, #88]	; (8011430 <vTaskStartScheduler+0xd8>)
 80113d8:	f04f 32ff 	mov.w	r2, #4294967295
 80113dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80113de:	4b15      	ldr	r3, [pc, #84]	; (8011434 <vTaskStartScheduler+0xdc>)
 80113e0:	2201      	movs	r2, #1
 80113e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80113e4:	4b14      	ldr	r3, [pc, #80]	; (8011438 <vTaskStartScheduler+0xe0>)
 80113e6:	2200      	movs	r2, #0
 80113e8:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80113ea:	f7f6 f9cb 	bl	8007784 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80113ee:	f001 fb6f 	bl	8012ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80113f2:	e00e      	b.n	8011412 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113fa:	d10a      	bne.n	8011412 <vTaskStartScheduler+0xba>
	__asm volatile
 80113fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011400:	f383 8811 	msr	BASEPRI, r3
 8011404:	f3bf 8f6f 	isb	sy
 8011408:	f3bf 8f4f 	dsb	sy
 801140c:	60fb      	str	r3, [r7, #12]
}
 801140e:	bf00      	nop
 8011410:	e7fe      	b.n	8011410 <vTaskStartScheduler+0xb8>
}
 8011412:	bf00      	nop
 8011414:	3718      	adds	r7, #24
 8011416:	46bd      	mov	sp, r7
 8011418:	bd80      	pop	{r7, pc}
 801141a:	bf00      	nop
 801141c:	08013e50 	.word	0x08013e50
 8011420:	08011b05 	.word	0x08011b05
 8011424:	20002000 	.word	0x20002000
 8011428:	20001b08 	.word	0x20001b08
 801142c:	20000020 	.word	0x20000020
 8011430:	20001ffc 	.word	0x20001ffc
 8011434:	20001fe8 	.word	0x20001fe8
 8011438:	20001fe0 	.word	0x20001fe0

0801143c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801143c:	b480      	push	{r7}
 801143e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8011440:	4b04      	ldr	r3, [pc, #16]	; (8011454 <vTaskSuspendAll+0x18>)
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	3301      	adds	r3, #1
 8011446:	4a03      	ldr	r2, [pc, #12]	; (8011454 <vTaskSuspendAll+0x18>)
 8011448:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801144a:	bf00      	nop
 801144c:	46bd      	mov	sp, r7
 801144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011452:	4770      	bx	lr
 8011454:	20002004 	.word	0x20002004

08011458 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011458:	b580      	push	{r7, lr}
 801145a:	b084      	sub	sp, #16
 801145c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801145e:	2300      	movs	r3, #0
 8011460:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011462:	2300      	movs	r3, #0
 8011464:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011466:	4b42      	ldr	r3, [pc, #264]	; (8011570 <xTaskResumeAll+0x118>)
 8011468:	681b      	ldr	r3, [r3, #0]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d10a      	bne.n	8011484 <xTaskResumeAll+0x2c>
	__asm volatile
 801146e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011472:	f383 8811 	msr	BASEPRI, r3
 8011476:	f3bf 8f6f 	isb	sy
 801147a:	f3bf 8f4f 	dsb	sy
 801147e:	603b      	str	r3, [r7, #0]
}
 8011480:	bf00      	nop
 8011482:	e7fe      	b.n	8011482 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011484:	f001 fbc6 	bl	8012c14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011488:	4b39      	ldr	r3, [pc, #228]	; (8011570 <xTaskResumeAll+0x118>)
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	3b01      	subs	r3, #1
 801148e:	4a38      	ldr	r2, [pc, #224]	; (8011570 <xTaskResumeAll+0x118>)
 8011490:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011492:	4b37      	ldr	r3, [pc, #220]	; (8011570 <xTaskResumeAll+0x118>)
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d162      	bne.n	8011560 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801149a:	4b36      	ldr	r3, [pc, #216]	; (8011574 <xTaskResumeAll+0x11c>)
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d05e      	beq.n	8011560 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80114a2:	e02f      	b.n	8011504 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114a4:	4b34      	ldr	r3, [pc, #208]	; (8011578 <xTaskResumeAll+0x120>)
 80114a6:	68db      	ldr	r3, [r3, #12]
 80114a8:	68db      	ldr	r3, [r3, #12]
 80114aa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	3318      	adds	r3, #24
 80114b0:	4618      	mov	r0, r3
 80114b2:	f7fe f8b1 	bl	800f618 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80114b6:	68fb      	ldr	r3, [r7, #12]
 80114b8:	3304      	adds	r3, #4
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7fe f8ac 	bl	800f618 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80114c0:	68fb      	ldr	r3, [r7, #12]
 80114c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114c4:	4b2d      	ldr	r3, [pc, #180]	; (801157c <xTaskResumeAll+0x124>)
 80114c6:	681b      	ldr	r3, [r3, #0]
 80114c8:	429a      	cmp	r2, r3
 80114ca:	d903      	bls.n	80114d4 <xTaskResumeAll+0x7c>
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114d0:	4a2a      	ldr	r2, [pc, #168]	; (801157c <xTaskResumeAll+0x124>)
 80114d2:	6013      	str	r3, [r2, #0]
 80114d4:	68fb      	ldr	r3, [r7, #12]
 80114d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114d8:	4613      	mov	r3, r2
 80114da:	009b      	lsls	r3, r3, #2
 80114dc:	4413      	add	r3, r2
 80114de:	009b      	lsls	r3, r3, #2
 80114e0:	4a27      	ldr	r2, [pc, #156]	; (8011580 <xTaskResumeAll+0x128>)
 80114e2:	441a      	add	r2, r3
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	3304      	adds	r3, #4
 80114e8:	4619      	mov	r1, r3
 80114ea:	4610      	mov	r0, r2
 80114ec:	f7fe f837 	bl	800f55e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80114f4:	4b23      	ldr	r3, [pc, #140]	; (8011584 <xTaskResumeAll+0x12c>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80114fa:	429a      	cmp	r2, r3
 80114fc:	d302      	bcc.n	8011504 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80114fe:	4b22      	ldr	r3, [pc, #136]	; (8011588 <xTaskResumeAll+0x130>)
 8011500:	2201      	movs	r2, #1
 8011502:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011504:	4b1c      	ldr	r3, [pc, #112]	; (8011578 <xTaskResumeAll+0x120>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d1cb      	bne.n	80114a4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d001      	beq.n	8011516 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011512:	f000 fbb1 	bl	8011c78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8011516:	4b1d      	ldr	r3, [pc, #116]	; (801158c <xTaskResumeAll+0x134>)
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d010      	beq.n	8011544 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011522:	f000 f847 	bl	80115b4 <xTaskIncrementTick>
 8011526:	4603      	mov	r3, r0
 8011528:	2b00      	cmp	r3, #0
 801152a:	d002      	beq.n	8011532 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801152c:	4b16      	ldr	r3, [pc, #88]	; (8011588 <xTaskResumeAll+0x130>)
 801152e:	2201      	movs	r2, #1
 8011530:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	3b01      	subs	r3, #1
 8011536:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d1f1      	bne.n	8011522 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801153e:	4b13      	ldr	r3, [pc, #76]	; (801158c <xTaskResumeAll+0x134>)
 8011540:	2200      	movs	r2, #0
 8011542:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011544:	4b10      	ldr	r3, [pc, #64]	; (8011588 <xTaskResumeAll+0x130>)
 8011546:	681b      	ldr	r3, [r3, #0]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d009      	beq.n	8011560 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801154c:	2301      	movs	r3, #1
 801154e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011550:	4b0f      	ldr	r3, [pc, #60]	; (8011590 <xTaskResumeAll+0x138>)
 8011552:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011556:	601a      	str	r2, [r3, #0]
 8011558:	f3bf 8f4f 	dsb	sy
 801155c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011560:	f001 fb88 	bl	8012c74 <vPortExitCritical>

	return xAlreadyYielded;
 8011564:	68bb      	ldr	r3, [r7, #8]
}
 8011566:	4618      	mov	r0, r3
 8011568:	3710      	adds	r7, #16
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}
 801156e:	bf00      	nop
 8011570:	20002004 	.word	0x20002004
 8011574:	20001fdc 	.word	0x20001fdc
 8011578:	20001f9c 	.word	0x20001f9c
 801157c:	20001fe4 	.word	0x20001fe4
 8011580:	20001b0c 	.word	0x20001b0c
 8011584:	20001b08 	.word	0x20001b08
 8011588:	20001ff0 	.word	0x20001ff0
 801158c:	20001fec 	.word	0x20001fec
 8011590:	e000ed04 	.word	0xe000ed04

08011594 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011594:	b480      	push	{r7}
 8011596:	b083      	sub	sp, #12
 8011598:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801159a:	4b05      	ldr	r3, [pc, #20]	; (80115b0 <xTaskGetTickCount+0x1c>)
 801159c:	681b      	ldr	r3, [r3, #0]
 801159e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80115a0:	687b      	ldr	r3, [r7, #4]
}
 80115a2:	4618      	mov	r0, r3
 80115a4:	370c      	adds	r7, #12
 80115a6:	46bd      	mov	sp, r7
 80115a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ac:	4770      	bx	lr
 80115ae:	bf00      	nop
 80115b0:	20001fe0 	.word	0x20001fe0

080115b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b086      	sub	sp, #24
 80115b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80115ba:	2300      	movs	r3, #0
 80115bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80115be:	4b4f      	ldr	r3, [pc, #316]	; (80116fc <xTaskIncrementTick+0x148>)
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	f040 808f 	bne.w	80116e6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80115c8:	4b4d      	ldr	r3, [pc, #308]	; (8011700 <xTaskIncrementTick+0x14c>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	3301      	adds	r3, #1
 80115ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80115d0:	4a4b      	ldr	r2, [pc, #300]	; (8011700 <xTaskIncrementTick+0x14c>)
 80115d2:	693b      	ldr	r3, [r7, #16]
 80115d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80115d6:	693b      	ldr	r3, [r7, #16]
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d120      	bne.n	801161e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80115dc:	4b49      	ldr	r3, [pc, #292]	; (8011704 <xTaskIncrementTick+0x150>)
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d00a      	beq.n	80115fc <xTaskIncrementTick+0x48>
	__asm volatile
 80115e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115ea:	f383 8811 	msr	BASEPRI, r3
 80115ee:	f3bf 8f6f 	isb	sy
 80115f2:	f3bf 8f4f 	dsb	sy
 80115f6:	603b      	str	r3, [r7, #0]
}
 80115f8:	bf00      	nop
 80115fa:	e7fe      	b.n	80115fa <xTaskIncrementTick+0x46>
 80115fc:	4b41      	ldr	r3, [pc, #260]	; (8011704 <xTaskIncrementTick+0x150>)
 80115fe:	681b      	ldr	r3, [r3, #0]
 8011600:	60fb      	str	r3, [r7, #12]
 8011602:	4b41      	ldr	r3, [pc, #260]	; (8011708 <xTaskIncrementTick+0x154>)
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	4a3f      	ldr	r2, [pc, #252]	; (8011704 <xTaskIncrementTick+0x150>)
 8011608:	6013      	str	r3, [r2, #0]
 801160a:	4a3f      	ldr	r2, [pc, #252]	; (8011708 <xTaskIncrementTick+0x154>)
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	6013      	str	r3, [r2, #0]
 8011610:	4b3e      	ldr	r3, [pc, #248]	; (801170c <xTaskIncrementTick+0x158>)
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	3301      	adds	r3, #1
 8011616:	4a3d      	ldr	r2, [pc, #244]	; (801170c <xTaskIncrementTick+0x158>)
 8011618:	6013      	str	r3, [r2, #0]
 801161a:	f000 fb2d 	bl	8011c78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801161e:	4b3c      	ldr	r3, [pc, #240]	; (8011710 <xTaskIncrementTick+0x15c>)
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	693a      	ldr	r2, [r7, #16]
 8011624:	429a      	cmp	r2, r3
 8011626:	d349      	bcc.n	80116bc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011628:	4b36      	ldr	r3, [pc, #216]	; (8011704 <xTaskIncrementTick+0x150>)
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	2b00      	cmp	r3, #0
 8011630:	d104      	bne.n	801163c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011632:	4b37      	ldr	r3, [pc, #220]	; (8011710 <xTaskIncrementTick+0x15c>)
 8011634:	f04f 32ff 	mov.w	r2, #4294967295
 8011638:	601a      	str	r2, [r3, #0]
					break;
 801163a:	e03f      	b.n	80116bc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801163c:	4b31      	ldr	r3, [pc, #196]	; (8011704 <xTaskIncrementTick+0x150>)
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	68db      	ldr	r3, [r3, #12]
 8011642:	68db      	ldr	r3, [r3, #12]
 8011644:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011646:	68bb      	ldr	r3, [r7, #8]
 8011648:	685b      	ldr	r3, [r3, #4]
 801164a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801164c:	693a      	ldr	r2, [r7, #16]
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	429a      	cmp	r2, r3
 8011652:	d203      	bcs.n	801165c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011654:	4a2e      	ldr	r2, [pc, #184]	; (8011710 <xTaskIncrementTick+0x15c>)
 8011656:	687b      	ldr	r3, [r7, #4]
 8011658:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801165a:	e02f      	b.n	80116bc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801165c:	68bb      	ldr	r3, [r7, #8]
 801165e:	3304      	adds	r3, #4
 8011660:	4618      	mov	r0, r3
 8011662:	f7fd ffd9 	bl	800f618 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011666:	68bb      	ldr	r3, [r7, #8]
 8011668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801166a:	2b00      	cmp	r3, #0
 801166c:	d004      	beq.n	8011678 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801166e:	68bb      	ldr	r3, [r7, #8]
 8011670:	3318      	adds	r3, #24
 8011672:	4618      	mov	r0, r3
 8011674:	f7fd ffd0 	bl	800f618 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011678:	68bb      	ldr	r3, [r7, #8]
 801167a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801167c:	4b25      	ldr	r3, [pc, #148]	; (8011714 <xTaskIncrementTick+0x160>)
 801167e:	681b      	ldr	r3, [r3, #0]
 8011680:	429a      	cmp	r2, r3
 8011682:	d903      	bls.n	801168c <xTaskIncrementTick+0xd8>
 8011684:	68bb      	ldr	r3, [r7, #8]
 8011686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011688:	4a22      	ldr	r2, [pc, #136]	; (8011714 <xTaskIncrementTick+0x160>)
 801168a:	6013      	str	r3, [r2, #0]
 801168c:	68bb      	ldr	r3, [r7, #8]
 801168e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011690:	4613      	mov	r3, r2
 8011692:	009b      	lsls	r3, r3, #2
 8011694:	4413      	add	r3, r2
 8011696:	009b      	lsls	r3, r3, #2
 8011698:	4a1f      	ldr	r2, [pc, #124]	; (8011718 <xTaskIncrementTick+0x164>)
 801169a:	441a      	add	r2, r3
 801169c:	68bb      	ldr	r3, [r7, #8]
 801169e:	3304      	adds	r3, #4
 80116a0:	4619      	mov	r1, r3
 80116a2:	4610      	mov	r0, r2
 80116a4:	f7fd ff5b 	bl	800f55e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80116a8:	68bb      	ldr	r3, [r7, #8]
 80116aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116ac:	4b1b      	ldr	r3, [pc, #108]	; (801171c <xTaskIncrementTick+0x168>)
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116b2:	429a      	cmp	r2, r3
 80116b4:	d3b8      	bcc.n	8011628 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80116b6:	2301      	movs	r3, #1
 80116b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80116ba:	e7b5      	b.n	8011628 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80116bc:	4b17      	ldr	r3, [pc, #92]	; (801171c <xTaskIncrementTick+0x168>)
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116c2:	4915      	ldr	r1, [pc, #84]	; (8011718 <xTaskIncrementTick+0x164>)
 80116c4:	4613      	mov	r3, r2
 80116c6:	009b      	lsls	r3, r3, #2
 80116c8:	4413      	add	r3, r2
 80116ca:	009b      	lsls	r3, r3, #2
 80116cc:	440b      	add	r3, r1
 80116ce:	681b      	ldr	r3, [r3, #0]
 80116d0:	2b01      	cmp	r3, #1
 80116d2:	d901      	bls.n	80116d8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80116d4:	2301      	movs	r3, #1
 80116d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80116d8:	4b11      	ldr	r3, [pc, #68]	; (8011720 <xTaskIncrementTick+0x16c>)
 80116da:	681b      	ldr	r3, [r3, #0]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d007      	beq.n	80116f0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80116e0:	2301      	movs	r3, #1
 80116e2:	617b      	str	r3, [r7, #20]
 80116e4:	e004      	b.n	80116f0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80116e6:	4b0f      	ldr	r3, [pc, #60]	; (8011724 <xTaskIncrementTick+0x170>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	3301      	adds	r3, #1
 80116ec:	4a0d      	ldr	r2, [pc, #52]	; (8011724 <xTaskIncrementTick+0x170>)
 80116ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80116f0:	697b      	ldr	r3, [r7, #20]
}
 80116f2:	4618      	mov	r0, r3
 80116f4:	3718      	adds	r7, #24
 80116f6:	46bd      	mov	sp, r7
 80116f8:	bd80      	pop	{r7, pc}
 80116fa:	bf00      	nop
 80116fc:	20002004 	.word	0x20002004
 8011700:	20001fe0 	.word	0x20001fe0
 8011704:	20001f94 	.word	0x20001f94
 8011708:	20001f98 	.word	0x20001f98
 801170c:	20001ff4 	.word	0x20001ff4
 8011710:	20001ffc 	.word	0x20001ffc
 8011714:	20001fe4 	.word	0x20001fe4
 8011718:	20001b0c 	.word	0x20001b0c
 801171c:	20001b08 	.word	0x20001b08
 8011720:	20001ff0 	.word	0x20001ff0
 8011724:	20001fec 	.word	0x20001fec

08011728 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b084      	sub	sp, #16
 801172c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801172e:	4b3e      	ldr	r3, [pc, #248]	; (8011828 <vTaskSwitchContext+0x100>)
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d003      	beq.n	801173e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011736:	4b3d      	ldr	r3, [pc, #244]	; (801182c <vTaskSwitchContext+0x104>)
 8011738:	2201      	movs	r2, #1
 801173a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801173c:	e070      	b.n	8011820 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 801173e:	4b3b      	ldr	r3, [pc, #236]	; (801182c <vTaskSwitchContext+0x104>)
 8011740:	2200      	movs	r2, #0
 8011742:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8011744:	f7f6 f825 	bl	8007792 <getRunTimeCounterValue>
 8011748:	4603      	mov	r3, r0
 801174a:	4a39      	ldr	r2, [pc, #228]	; (8011830 <vTaskSwitchContext+0x108>)
 801174c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 801174e:	4b38      	ldr	r3, [pc, #224]	; (8011830 <vTaskSwitchContext+0x108>)
 8011750:	681a      	ldr	r2, [r3, #0]
 8011752:	4b38      	ldr	r3, [pc, #224]	; (8011834 <vTaskSwitchContext+0x10c>)
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	429a      	cmp	r2, r3
 8011758:	d909      	bls.n	801176e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 801175a:	4b37      	ldr	r3, [pc, #220]	; (8011838 <vTaskSwitchContext+0x110>)
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011760:	4a33      	ldr	r2, [pc, #204]	; (8011830 <vTaskSwitchContext+0x108>)
 8011762:	6810      	ldr	r0, [r2, #0]
 8011764:	4a33      	ldr	r2, [pc, #204]	; (8011834 <vTaskSwitchContext+0x10c>)
 8011766:	6812      	ldr	r2, [r2, #0]
 8011768:	1a82      	subs	r2, r0, r2
 801176a:	440a      	add	r2, r1
 801176c:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 801176e:	4b30      	ldr	r3, [pc, #192]	; (8011830 <vTaskSwitchContext+0x108>)
 8011770:	681b      	ldr	r3, [r3, #0]
 8011772:	4a30      	ldr	r2, [pc, #192]	; (8011834 <vTaskSwitchContext+0x10c>)
 8011774:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8011776:	4b30      	ldr	r3, [pc, #192]	; (8011838 <vTaskSwitchContext+0x110>)
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	681a      	ldr	r2, [r3, #0]
 801177c:	4b2e      	ldr	r3, [pc, #184]	; (8011838 <vTaskSwitchContext+0x110>)
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011782:	429a      	cmp	r2, r3
 8011784:	d808      	bhi.n	8011798 <vTaskSwitchContext+0x70>
 8011786:	4b2c      	ldr	r3, [pc, #176]	; (8011838 <vTaskSwitchContext+0x110>)
 8011788:	681a      	ldr	r2, [r3, #0]
 801178a:	4b2b      	ldr	r3, [pc, #172]	; (8011838 <vTaskSwitchContext+0x110>)
 801178c:	681b      	ldr	r3, [r3, #0]
 801178e:	3334      	adds	r3, #52	; 0x34
 8011790:	4619      	mov	r1, r3
 8011792:	4610      	mov	r0, r2
 8011794:	f7f6 f805 	bl	80077a2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011798:	4b28      	ldr	r3, [pc, #160]	; (801183c <vTaskSwitchContext+0x114>)
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	60fb      	str	r3, [r7, #12]
 801179e:	e010      	b.n	80117c2 <vTaskSwitchContext+0x9a>
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d10a      	bne.n	80117bc <vTaskSwitchContext+0x94>
	__asm volatile
 80117a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117aa:	f383 8811 	msr	BASEPRI, r3
 80117ae:	f3bf 8f6f 	isb	sy
 80117b2:	f3bf 8f4f 	dsb	sy
 80117b6:	607b      	str	r3, [r7, #4]
}
 80117b8:	bf00      	nop
 80117ba:	e7fe      	b.n	80117ba <vTaskSwitchContext+0x92>
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	3b01      	subs	r3, #1
 80117c0:	60fb      	str	r3, [r7, #12]
 80117c2:	491f      	ldr	r1, [pc, #124]	; (8011840 <vTaskSwitchContext+0x118>)
 80117c4:	68fa      	ldr	r2, [r7, #12]
 80117c6:	4613      	mov	r3, r2
 80117c8:	009b      	lsls	r3, r3, #2
 80117ca:	4413      	add	r3, r2
 80117cc:	009b      	lsls	r3, r3, #2
 80117ce:	440b      	add	r3, r1
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d0e4      	beq.n	80117a0 <vTaskSwitchContext+0x78>
 80117d6:	68fa      	ldr	r2, [r7, #12]
 80117d8:	4613      	mov	r3, r2
 80117da:	009b      	lsls	r3, r3, #2
 80117dc:	4413      	add	r3, r2
 80117de:	009b      	lsls	r3, r3, #2
 80117e0:	4a17      	ldr	r2, [pc, #92]	; (8011840 <vTaskSwitchContext+0x118>)
 80117e2:	4413      	add	r3, r2
 80117e4:	60bb      	str	r3, [r7, #8]
 80117e6:	68bb      	ldr	r3, [r7, #8]
 80117e8:	685b      	ldr	r3, [r3, #4]
 80117ea:	685a      	ldr	r2, [r3, #4]
 80117ec:	68bb      	ldr	r3, [r7, #8]
 80117ee:	605a      	str	r2, [r3, #4]
 80117f0:	68bb      	ldr	r3, [r7, #8]
 80117f2:	685a      	ldr	r2, [r3, #4]
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	3308      	adds	r3, #8
 80117f8:	429a      	cmp	r2, r3
 80117fa:	d104      	bne.n	8011806 <vTaskSwitchContext+0xde>
 80117fc:	68bb      	ldr	r3, [r7, #8]
 80117fe:	685b      	ldr	r3, [r3, #4]
 8011800:	685a      	ldr	r2, [r3, #4]
 8011802:	68bb      	ldr	r3, [r7, #8]
 8011804:	605a      	str	r2, [r3, #4]
 8011806:	68bb      	ldr	r3, [r7, #8]
 8011808:	685b      	ldr	r3, [r3, #4]
 801180a:	68db      	ldr	r3, [r3, #12]
 801180c:	4a0a      	ldr	r2, [pc, #40]	; (8011838 <vTaskSwitchContext+0x110>)
 801180e:	6013      	str	r3, [r2, #0]
 8011810:	4a0a      	ldr	r2, [pc, #40]	; (801183c <vTaskSwitchContext+0x114>)
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011816:	4b08      	ldr	r3, [pc, #32]	; (8011838 <vTaskSwitchContext+0x110>)
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	3358      	adds	r3, #88	; 0x58
 801181c:	4a09      	ldr	r2, [pc, #36]	; (8011844 <vTaskSwitchContext+0x11c>)
 801181e:	6013      	str	r3, [r2, #0]
}
 8011820:	bf00      	nop
 8011822:	3710      	adds	r7, #16
 8011824:	46bd      	mov	sp, r7
 8011826:	bd80      	pop	{r7, pc}
 8011828:	20002004 	.word	0x20002004
 801182c:	20001ff0 	.word	0x20001ff0
 8011830:	2000200c 	.word	0x2000200c
 8011834:	20002008 	.word	0x20002008
 8011838:	20001b08 	.word	0x20001b08
 801183c:	20001fe4 	.word	0x20001fe4
 8011840:	20001b0c 	.word	0x20001b0c
 8011844:	20000020 	.word	0x20000020

08011848 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b084      	sub	sp, #16
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
 8011850:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d10a      	bne.n	801186e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011858:	f04f 0350 	mov.w	r3, #80	; 0x50
 801185c:	f383 8811 	msr	BASEPRI, r3
 8011860:	f3bf 8f6f 	isb	sy
 8011864:	f3bf 8f4f 	dsb	sy
 8011868:	60fb      	str	r3, [r7, #12]
}
 801186a:	bf00      	nop
 801186c:	e7fe      	b.n	801186c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801186e:	4b07      	ldr	r3, [pc, #28]	; (801188c <vTaskPlaceOnEventList+0x44>)
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	3318      	adds	r3, #24
 8011874:	4619      	mov	r1, r3
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f7fd fe95 	bl	800f5a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801187c:	2101      	movs	r1, #1
 801187e:	6838      	ldr	r0, [r7, #0]
 8011880:	f000 fcf8 	bl	8012274 <prvAddCurrentTaskToDelayedList>
}
 8011884:	bf00      	nop
 8011886:	3710      	adds	r7, #16
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}
 801188c:	20001b08 	.word	0x20001b08

08011890 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011890:	b580      	push	{r7, lr}
 8011892:	b086      	sub	sp, #24
 8011894:	af00      	add	r7, sp, #0
 8011896:	60f8      	str	r0, [r7, #12]
 8011898:	60b9      	str	r1, [r7, #8]
 801189a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d10a      	bne.n	80118b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80118a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118a6:	f383 8811 	msr	BASEPRI, r3
 80118aa:	f3bf 8f6f 	isb	sy
 80118ae:	f3bf 8f4f 	dsb	sy
 80118b2:	617b      	str	r3, [r7, #20]
}
 80118b4:	bf00      	nop
 80118b6:	e7fe      	b.n	80118b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80118b8:	4b0a      	ldr	r3, [pc, #40]	; (80118e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	3318      	adds	r3, #24
 80118be:	4619      	mov	r1, r3
 80118c0:	68f8      	ldr	r0, [r7, #12]
 80118c2:	f7fd fe4c 	bl	800f55e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d002      	beq.n	80118d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80118cc:	f04f 33ff 	mov.w	r3, #4294967295
 80118d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80118d2:	6879      	ldr	r1, [r7, #4]
 80118d4:	68b8      	ldr	r0, [r7, #8]
 80118d6:	f000 fccd 	bl	8012274 <prvAddCurrentTaskToDelayedList>
	}
 80118da:	bf00      	nop
 80118dc:	3718      	adds	r7, #24
 80118de:	46bd      	mov	sp, r7
 80118e0:	bd80      	pop	{r7, pc}
 80118e2:	bf00      	nop
 80118e4:	20001b08 	.word	0x20001b08

080118e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80118e8:	b580      	push	{r7, lr}
 80118ea:	b086      	sub	sp, #24
 80118ec:	af00      	add	r7, sp, #0
 80118ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	68db      	ldr	r3, [r3, #12]
 80118f4:	68db      	ldr	r3, [r3, #12]
 80118f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80118f8:	693b      	ldr	r3, [r7, #16]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d10a      	bne.n	8011914 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80118fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011902:	f383 8811 	msr	BASEPRI, r3
 8011906:	f3bf 8f6f 	isb	sy
 801190a:	f3bf 8f4f 	dsb	sy
 801190e:	60fb      	str	r3, [r7, #12]
}
 8011910:	bf00      	nop
 8011912:	e7fe      	b.n	8011912 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011914:	693b      	ldr	r3, [r7, #16]
 8011916:	3318      	adds	r3, #24
 8011918:	4618      	mov	r0, r3
 801191a:	f7fd fe7d 	bl	800f618 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801191e:	4b1e      	ldr	r3, [pc, #120]	; (8011998 <xTaskRemoveFromEventList+0xb0>)
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d11d      	bne.n	8011962 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8011926:	693b      	ldr	r3, [r7, #16]
 8011928:	3304      	adds	r3, #4
 801192a:	4618      	mov	r0, r3
 801192c:	f7fd fe74 	bl	800f618 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011930:	693b      	ldr	r3, [r7, #16]
 8011932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011934:	4b19      	ldr	r3, [pc, #100]	; (801199c <xTaskRemoveFromEventList+0xb4>)
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	429a      	cmp	r2, r3
 801193a:	d903      	bls.n	8011944 <xTaskRemoveFromEventList+0x5c>
 801193c:	693b      	ldr	r3, [r7, #16]
 801193e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011940:	4a16      	ldr	r2, [pc, #88]	; (801199c <xTaskRemoveFromEventList+0xb4>)
 8011942:	6013      	str	r3, [r2, #0]
 8011944:	693b      	ldr	r3, [r7, #16]
 8011946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011948:	4613      	mov	r3, r2
 801194a:	009b      	lsls	r3, r3, #2
 801194c:	4413      	add	r3, r2
 801194e:	009b      	lsls	r3, r3, #2
 8011950:	4a13      	ldr	r2, [pc, #76]	; (80119a0 <xTaskRemoveFromEventList+0xb8>)
 8011952:	441a      	add	r2, r3
 8011954:	693b      	ldr	r3, [r7, #16]
 8011956:	3304      	adds	r3, #4
 8011958:	4619      	mov	r1, r3
 801195a:	4610      	mov	r0, r2
 801195c:	f7fd fdff 	bl	800f55e <vListInsertEnd>
 8011960:	e005      	b.n	801196e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011962:	693b      	ldr	r3, [r7, #16]
 8011964:	3318      	adds	r3, #24
 8011966:	4619      	mov	r1, r3
 8011968:	480e      	ldr	r0, [pc, #56]	; (80119a4 <xTaskRemoveFromEventList+0xbc>)
 801196a:	f7fd fdf8 	bl	800f55e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801196e:	693b      	ldr	r3, [r7, #16]
 8011970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011972:	4b0d      	ldr	r3, [pc, #52]	; (80119a8 <xTaskRemoveFromEventList+0xc0>)
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011978:	429a      	cmp	r2, r3
 801197a:	d905      	bls.n	8011988 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801197c:	2301      	movs	r3, #1
 801197e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011980:	4b0a      	ldr	r3, [pc, #40]	; (80119ac <xTaskRemoveFromEventList+0xc4>)
 8011982:	2201      	movs	r2, #1
 8011984:	601a      	str	r2, [r3, #0]
 8011986:	e001      	b.n	801198c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011988:	2300      	movs	r3, #0
 801198a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801198c:	697b      	ldr	r3, [r7, #20]
}
 801198e:	4618      	mov	r0, r3
 8011990:	3718      	adds	r7, #24
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
 8011996:	bf00      	nop
 8011998:	20002004 	.word	0x20002004
 801199c:	20001fe4 	.word	0x20001fe4
 80119a0:	20001b0c 	.word	0x20001b0c
 80119a4:	20001f9c 	.word	0x20001f9c
 80119a8:	20001b08 	.word	0x20001b08
 80119ac:	20001ff0 	.word	0x20001ff0

080119b0 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b084      	sub	sp, #16
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d10a      	bne.n	80119d4 <vTaskSetTimeOutState+0x24>
	__asm volatile
 80119be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119c2:	f383 8811 	msr	BASEPRI, r3
 80119c6:	f3bf 8f6f 	isb	sy
 80119ca:	f3bf 8f4f 	dsb	sy
 80119ce:	60fb      	str	r3, [r7, #12]
}
 80119d0:	bf00      	nop
 80119d2:	e7fe      	b.n	80119d2 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 80119d4:	f001 f91e 	bl	8012c14 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80119d8:	4b06      	ldr	r3, [pc, #24]	; (80119f4 <vTaskSetTimeOutState+0x44>)
 80119da:	681a      	ldr	r2, [r3, #0]
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80119e0:	4b05      	ldr	r3, [pc, #20]	; (80119f8 <vTaskSetTimeOutState+0x48>)
 80119e2:	681a      	ldr	r2, [r3, #0]
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 80119e8:	f001 f944 	bl	8012c74 <vPortExitCritical>
}
 80119ec:	bf00      	nop
 80119ee:	3710      	adds	r7, #16
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}
 80119f4:	20001ff4 	.word	0x20001ff4
 80119f8:	20001fe0 	.word	0x20001fe0

080119fc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80119fc:	b480      	push	{r7}
 80119fe:	b083      	sub	sp, #12
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011a04:	4b06      	ldr	r3, [pc, #24]	; (8011a20 <vTaskInternalSetTimeOutState+0x24>)
 8011a06:	681a      	ldr	r2, [r3, #0]
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011a0c:	4b05      	ldr	r3, [pc, #20]	; (8011a24 <vTaskInternalSetTimeOutState+0x28>)
 8011a0e:	681a      	ldr	r2, [r3, #0]
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	605a      	str	r2, [r3, #4]
}
 8011a14:	bf00      	nop
 8011a16:	370c      	adds	r7, #12
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1e:	4770      	bx	lr
 8011a20:	20001ff4 	.word	0x20001ff4
 8011a24:	20001fe0 	.word	0x20001fe0

08011a28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b088      	sub	sp, #32
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
 8011a30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d10a      	bne.n	8011a4e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8011a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a3c:	f383 8811 	msr	BASEPRI, r3
 8011a40:	f3bf 8f6f 	isb	sy
 8011a44:	f3bf 8f4f 	dsb	sy
 8011a48:	613b      	str	r3, [r7, #16]
}
 8011a4a:	bf00      	nop
 8011a4c:	e7fe      	b.n	8011a4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011a4e:	683b      	ldr	r3, [r7, #0]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d10a      	bne.n	8011a6a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a58:	f383 8811 	msr	BASEPRI, r3
 8011a5c:	f3bf 8f6f 	isb	sy
 8011a60:	f3bf 8f4f 	dsb	sy
 8011a64:	60fb      	str	r3, [r7, #12]
}
 8011a66:	bf00      	nop
 8011a68:	e7fe      	b.n	8011a68 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011a6a:	f001 f8d3 	bl	8012c14 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8011a6e:	4b1d      	ldr	r3, [pc, #116]	; (8011ae4 <xTaskCheckForTimeOut+0xbc>)
 8011a70:	681b      	ldr	r3, [r3, #0]
 8011a72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	685b      	ldr	r3, [r3, #4]
 8011a78:	69ba      	ldr	r2, [r7, #24]
 8011a7a:	1ad3      	subs	r3, r2, r3
 8011a7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a86:	d102      	bne.n	8011a8e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011a88:	2300      	movs	r3, #0
 8011a8a:	61fb      	str	r3, [r7, #28]
 8011a8c:	e023      	b.n	8011ad6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681a      	ldr	r2, [r3, #0]
 8011a92:	4b15      	ldr	r3, [pc, #84]	; (8011ae8 <xTaskCheckForTimeOut+0xc0>)
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	429a      	cmp	r2, r3
 8011a98:	d007      	beq.n	8011aaa <xTaskCheckForTimeOut+0x82>
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	685b      	ldr	r3, [r3, #4]
 8011a9e:	69ba      	ldr	r2, [r7, #24]
 8011aa0:	429a      	cmp	r2, r3
 8011aa2:	d302      	bcc.n	8011aaa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	61fb      	str	r3, [r7, #28]
 8011aa8:	e015      	b.n	8011ad6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	697a      	ldr	r2, [r7, #20]
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d20b      	bcs.n	8011acc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	681a      	ldr	r2, [r3, #0]
 8011ab8:	697b      	ldr	r3, [r7, #20]
 8011aba:	1ad2      	subs	r2, r2, r3
 8011abc:	683b      	ldr	r3, [r7, #0]
 8011abe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011ac0:	6878      	ldr	r0, [r7, #4]
 8011ac2:	f7ff ff9b 	bl	80119fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	61fb      	str	r3, [r7, #28]
 8011aca:	e004      	b.n	8011ad6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011acc:	683b      	ldr	r3, [r7, #0]
 8011ace:	2200      	movs	r2, #0
 8011ad0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011ad2:	2301      	movs	r3, #1
 8011ad4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011ad6:	f001 f8cd 	bl	8012c74 <vPortExitCritical>

	return xReturn;
 8011ada:	69fb      	ldr	r3, [r7, #28]
}
 8011adc:	4618      	mov	r0, r3
 8011ade:	3720      	adds	r7, #32
 8011ae0:	46bd      	mov	sp, r7
 8011ae2:	bd80      	pop	{r7, pc}
 8011ae4:	20001fe0 	.word	0x20001fe0
 8011ae8:	20001ff4 	.word	0x20001ff4

08011aec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011aec:	b480      	push	{r7}
 8011aee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8011af0:	4b03      	ldr	r3, [pc, #12]	; (8011b00 <vTaskMissedYield+0x14>)
 8011af2:	2201      	movs	r2, #1
 8011af4:	601a      	str	r2, [r3, #0]
}
 8011af6:	bf00      	nop
 8011af8:	46bd      	mov	sp, r7
 8011afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afe:	4770      	bx	lr
 8011b00:	20001ff0 	.word	0x20001ff0

08011b04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011b04:	b580      	push	{r7, lr}
 8011b06:	b082      	sub	sp, #8
 8011b08:	af00      	add	r7, sp, #0
 8011b0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011b0c:	f000 f852 	bl	8011bb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8011b10:	4b06      	ldr	r3, [pc, #24]	; (8011b2c <prvIdleTask+0x28>)
 8011b12:	681b      	ldr	r3, [r3, #0]
 8011b14:	2b01      	cmp	r3, #1
 8011b16:	d9f9      	bls.n	8011b0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8011b18:	4b05      	ldr	r3, [pc, #20]	; (8011b30 <prvIdleTask+0x2c>)
 8011b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b1e:	601a      	str	r2, [r3, #0]
 8011b20:	f3bf 8f4f 	dsb	sy
 8011b24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011b28:	e7f0      	b.n	8011b0c <prvIdleTask+0x8>
 8011b2a:	bf00      	nop
 8011b2c:	20001b0c 	.word	0x20001b0c
 8011b30:	e000ed04 	.word	0xe000ed04

08011b34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b082      	sub	sp, #8
 8011b38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	607b      	str	r3, [r7, #4]
 8011b3e:	e00c      	b.n	8011b5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8011b40:	687a      	ldr	r2, [r7, #4]
 8011b42:	4613      	mov	r3, r2
 8011b44:	009b      	lsls	r3, r3, #2
 8011b46:	4413      	add	r3, r2
 8011b48:	009b      	lsls	r3, r3, #2
 8011b4a:	4a12      	ldr	r2, [pc, #72]	; (8011b94 <prvInitialiseTaskLists+0x60>)
 8011b4c:	4413      	add	r3, r2
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7fd fcd8 	bl	800f504 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	3301      	adds	r3, #1
 8011b58:	607b      	str	r3, [r7, #4]
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	2b37      	cmp	r3, #55	; 0x37
 8011b5e:	d9ef      	bls.n	8011b40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011b60:	480d      	ldr	r0, [pc, #52]	; (8011b98 <prvInitialiseTaskLists+0x64>)
 8011b62:	f7fd fccf 	bl	800f504 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011b66:	480d      	ldr	r0, [pc, #52]	; (8011b9c <prvInitialiseTaskLists+0x68>)
 8011b68:	f7fd fccc 	bl	800f504 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011b6c:	480c      	ldr	r0, [pc, #48]	; (8011ba0 <prvInitialiseTaskLists+0x6c>)
 8011b6e:	f7fd fcc9 	bl	800f504 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011b72:	480c      	ldr	r0, [pc, #48]	; (8011ba4 <prvInitialiseTaskLists+0x70>)
 8011b74:	f7fd fcc6 	bl	800f504 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011b78:	480b      	ldr	r0, [pc, #44]	; (8011ba8 <prvInitialiseTaskLists+0x74>)
 8011b7a:	f7fd fcc3 	bl	800f504 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8011b7e:	4b0b      	ldr	r3, [pc, #44]	; (8011bac <prvInitialiseTaskLists+0x78>)
 8011b80:	4a05      	ldr	r2, [pc, #20]	; (8011b98 <prvInitialiseTaskLists+0x64>)
 8011b82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011b84:	4b0a      	ldr	r3, [pc, #40]	; (8011bb0 <prvInitialiseTaskLists+0x7c>)
 8011b86:	4a05      	ldr	r2, [pc, #20]	; (8011b9c <prvInitialiseTaskLists+0x68>)
 8011b88:	601a      	str	r2, [r3, #0]
}
 8011b8a:	bf00      	nop
 8011b8c:	3708      	adds	r7, #8
 8011b8e:	46bd      	mov	sp, r7
 8011b90:	bd80      	pop	{r7, pc}
 8011b92:	bf00      	nop
 8011b94:	20001b0c 	.word	0x20001b0c
 8011b98:	20001f6c 	.word	0x20001f6c
 8011b9c:	20001f80 	.word	0x20001f80
 8011ba0:	20001f9c 	.word	0x20001f9c
 8011ba4:	20001fb0 	.word	0x20001fb0
 8011ba8:	20001fc8 	.word	0x20001fc8
 8011bac:	20001f94 	.word	0x20001f94
 8011bb0:	20001f98 	.word	0x20001f98

08011bb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b082      	sub	sp, #8
 8011bb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011bba:	e019      	b.n	8011bf0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011bbc:	f001 f82a 	bl	8012c14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011bc0:	4b10      	ldr	r3, [pc, #64]	; (8011c04 <prvCheckTasksWaitingTermination+0x50>)
 8011bc2:	68db      	ldr	r3, [r3, #12]
 8011bc4:	68db      	ldr	r3, [r3, #12]
 8011bc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	3304      	adds	r3, #4
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f7fd fd23 	bl	800f618 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011bd2:	4b0d      	ldr	r3, [pc, #52]	; (8011c08 <prvCheckTasksWaitingTermination+0x54>)
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	3b01      	subs	r3, #1
 8011bd8:	4a0b      	ldr	r2, [pc, #44]	; (8011c08 <prvCheckTasksWaitingTermination+0x54>)
 8011bda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011bdc:	4b0b      	ldr	r3, [pc, #44]	; (8011c0c <prvCheckTasksWaitingTermination+0x58>)
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	3b01      	subs	r3, #1
 8011be2:	4a0a      	ldr	r2, [pc, #40]	; (8011c0c <prvCheckTasksWaitingTermination+0x58>)
 8011be4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011be6:	f001 f845 	bl	8012c74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011bea:	6878      	ldr	r0, [r7, #4]
 8011bec:	f000 f810 	bl	8011c10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011bf0:	4b06      	ldr	r3, [pc, #24]	; (8011c0c <prvCheckTasksWaitingTermination+0x58>)
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d1e1      	bne.n	8011bbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011bf8:	bf00      	nop
 8011bfa:	bf00      	nop
 8011bfc:	3708      	adds	r7, #8
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}
 8011c02:	bf00      	nop
 8011c04:	20001fb0 	.word	0x20001fb0
 8011c08:	20001fdc 	.word	0x20001fdc
 8011c0c:	20001fc4 	.word	0x20001fc4

08011c10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b084      	sub	sp, #16
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	3358      	adds	r3, #88	; 0x58
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f001 febf 	bl	80139a0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d108      	bne.n	8011c3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c30:	4618      	mov	r0, r3
 8011c32:	f001 f9e1 	bl	8012ff8 <vPortFree>
				vPortFree( pxTCB );
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f001 f9de 	bl	8012ff8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011c3c:	e018      	b.n	8011c70 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8011c44:	2b01      	cmp	r3, #1
 8011c46:	d103      	bne.n	8011c50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f001 f9d5 	bl	8012ff8 <vPortFree>
	}
 8011c4e:	e00f      	b.n	8011c70 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8011c56:	2b02      	cmp	r3, #2
 8011c58:	d00a      	beq.n	8011c70 <prvDeleteTCB+0x60>
	__asm volatile
 8011c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c5e:	f383 8811 	msr	BASEPRI, r3
 8011c62:	f3bf 8f6f 	isb	sy
 8011c66:	f3bf 8f4f 	dsb	sy
 8011c6a:	60fb      	str	r3, [r7, #12]
}
 8011c6c:	bf00      	nop
 8011c6e:	e7fe      	b.n	8011c6e <prvDeleteTCB+0x5e>
	}
 8011c70:	bf00      	nop
 8011c72:	3710      	adds	r7, #16
 8011c74:	46bd      	mov	sp, r7
 8011c76:	bd80      	pop	{r7, pc}

08011c78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011c78:	b480      	push	{r7}
 8011c7a:	b083      	sub	sp, #12
 8011c7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011c7e:	4b0c      	ldr	r3, [pc, #48]	; (8011cb0 <prvResetNextTaskUnblockTime+0x38>)
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d104      	bne.n	8011c92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011c88:	4b0a      	ldr	r3, [pc, #40]	; (8011cb4 <prvResetNextTaskUnblockTime+0x3c>)
 8011c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8011c8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011c90:	e008      	b.n	8011ca4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011c92:	4b07      	ldr	r3, [pc, #28]	; (8011cb0 <prvResetNextTaskUnblockTime+0x38>)
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	68db      	ldr	r3, [r3, #12]
 8011c98:	68db      	ldr	r3, [r3, #12]
 8011c9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	685b      	ldr	r3, [r3, #4]
 8011ca0:	4a04      	ldr	r2, [pc, #16]	; (8011cb4 <prvResetNextTaskUnblockTime+0x3c>)
 8011ca2:	6013      	str	r3, [r2, #0]
}
 8011ca4:	bf00      	nop
 8011ca6:	370c      	adds	r7, #12
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cae:	4770      	bx	lr
 8011cb0:	20001f94 	.word	0x20001f94
 8011cb4:	20001ffc 	.word	0x20001ffc

08011cb8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8011cb8:	b480      	push	{r7}
 8011cba:	b083      	sub	sp, #12
 8011cbc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8011cbe:	4b05      	ldr	r3, [pc, #20]	; (8011cd4 <xTaskGetCurrentTaskHandle+0x1c>)
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8011cc4:	687b      	ldr	r3, [r7, #4]
	}
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	370c      	adds	r7, #12
 8011cca:	46bd      	mov	sp, r7
 8011ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd0:	4770      	bx	lr
 8011cd2:	bf00      	nop
 8011cd4:	20001b08 	.word	0x20001b08

08011cd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011cd8:	b480      	push	{r7}
 8011cda:	b083      	sub	sp, #12
 8011cdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8011cde:	4b0b      	ldr	r3, [pc, #44]	; (8011d0c <xTaskGetSchedulerState+0x34>)
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d102      	bne.n	8011cec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011ce6:	2301      	movs	r3, #1
 8011ce8:	607b      	str	r3, [r7, #4]
 8011cea:	e008      	b.n	8011cfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011cec:	4b08      	ldr	r3, [pc, #32]	; (8011d10 <xTaskGetSchedulerState+0x38>)
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d102      	bne.n	8011cfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011cf4:	2302      	movs	r3, #2
 8011cf6:	607b      	str	r3, [r7, #4]
 8011cf8:	e001      	b.n	8011cfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8011cfe:	687b      	ldr	r3, [r7, #4]
	}
 8011d00:	4618      	mov	r0, r3
 8011d02:	370c      	adds	r7, #12
 8011d04:	46bd      	mov	sp, r7
 8011d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0a:	4770      	bx	lr
 8011d0c:	20001fe8 	.word	0x20001fe8
 8011d10:	20002004 	.word	0x20002004

08011d14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b084      	sub	sp, #16
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011d20:	2300      	movs	r3, #0
 8011d22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d051      	beq.n	8011dce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8011d2a:	68bb      	ldr	r3, [r7, #8]
 8011d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d2e:	4b2a      	ldr	r3, [pc, #168]	; (8011dd8 <xTaskPriorityInherit+0xc4>)
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d34:	429a      	cmp	r2, r3
 8011d36:	d241      	bcs.n	8011dbc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011d38:	68bb      	ldr	r3, [r7, #8]
 8011d3a:	699b      	ldr	r3, [r3, #24]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	db06      	blt.n	8011d4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d40:	4b25      	ldr	r3, [pc, #148]	; (8011dd8 <xTaskPriorityInherit+0xc4>)
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011d4a:	68bb      	ldr	r3, [r7, #8]
 8011d4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011d4e:	68bb      	ldr	r3, [r7, #8]
 8011d50:	6959      	ldr	r1, [r3, #20]
 8011d52:	68bb      	ldr	r3, [r7, #8]
 8011d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d56:	4613      	mov	r3, r2
 8011d58:	009b      	lsls	r3, r3, #2
 8011d5a:	4413      	add	r3, r2
 8011d5c:	009b      	lsls	r3, r3, #2
 8011d5e:	4a1f      	ldr	r2, [pc, #124]	; (8011ddc <xTaskPriorityInherit+0xc8>)
 8011d60:	4413      	add	r3, r2
 8011d62:	4299      	cmp	r1, r3
 8011d64:	d122      	bne.n	8011dac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	3304      	adds	r3, #4
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	f7fd fc54 	bl	800f618 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011d70:	4b19      	ldr	r3, [pc, #100]	; (8011dd8 <xTaskPriorityInherit+0xc4>)
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d76:	68bb      	ldr	r3, [r7, #8]
 8011d78:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d7e:	4b18      	ldr	r3, [pc, #96]	; (8011de0 <xTaskPriorityInherit+0xcc>)
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	429a      	cmp	r2, r3
 8011d84:	d903      	bls.n	8011d8e <xTaskPriorityInherit+0x7a>
 8011d86:	68bb      	ldr	r3, [r7, #8]
 8011d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d8a:	4a15      	ldr	r2, [pc, #84]	; (8011de0 <xTaskPriorityInherit+0xcc>)
 8011d8c:	6013      	str	r3, [r2, #0]
 8011d8e:	68bb      	ldr	r3, [r7, #8]
 8011d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d92:	4613      	mov	r3, r2
 8011d94:	009b      	lsls	r3, r3, #2
 8011d96:	4413      	add	r3, r2
 8011d98:	009b      	lsls	r3, r3, #2
 8011d9a:	4a10      	ldr	r2, [pc, #64]	; (8011ddc <xTaskPriorityInherit+0xc8>)
 8011d9c:	441a      	add	r2, r3
 8011d9e:	68bb      	ldr	r3, [r7, #8]
 8011da0:	3304      	adds	r3, #4
 8011da2:	4619      	mov	r1, r3
 8011da4:	4610      	mov	r0, r2
 8011da6:	f7fd fbda 	bl	800f55e <vListInsertEnd>
 8011daa:	e004      	b.n	8011db6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011dac:	4b0a      	ldr	r3, [pc, #40]	; (8011dd8 <xTaskPriorityInherit+0xc4>)
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011db2:	68bb      	ldr	r3, [r7, #8]
 8011db4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011db6:	2301      	movs	r3, #1
 8011db8:	60fb      	str	r3, [r7, #12]
 8011dba:	e008      	b.n	8011dce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011dc0:	4b05      	ldr	r3, [pc, #20]	; (8011dd8 <xTaskPriorityInherit+0xc4>)
 8011dc2:	681b      	ldr	r3, [r3, #0]
 8011dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	d201      	bcs.n	8011dce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011dca:	2301      	movs	r3, #1
 8011dcc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011dce:	68fb      	ldr	r3, [r7, #12]
	}
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	3710      	adds	r7, #16
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bd80      	pop	{r7, pc}
 8011dd8:	20001b08 	.word	0x20001b08
 8011ddc:	20001b0c 	.word	0x20001b0c
 8011de0:	20001fe4 	.word	0x20001fe4

08011de4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b086      	sub	sp, #24
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011df0:	2300      	movs	r3, #0
 8011df2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d056      	beq.n	8011ea8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011dfa:	4b2e      	ldr	r3, [pc, #184]	; (8011eb4 <xTaskPriorityDisinherit+0xd0>)
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	693a      	ldr	r2, [r7, #16]
 8011e00:	429a      	cmp	r2, r3
 8011e02:	d00a      	beq.n	8011e1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e08:	f383 8811 	msr	BASEPRI, r3
 8011e0c:	f3bf 8f6f 	isb	sy
 8011e10:	f3bf 8f4f 	dsb	sy
 8011e14:	60fb      	str	r3, [r7, #12]
}
 8011e16:	bf00      	nop
 8011e18:	e7fe      	b.n	8011e18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011e1a:	693b      	ldr	r3, [r7, #16]
 8011e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d10a      	bne.n	8011e38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e26:	f383 8811 	msr	BASEPRI, r3
 8011e2a:	f3bf 8f6f 	isb	sy
 8011e2e:	f3bf 8f4f 	dsb	sy
 8011e32:	60bb      	str	r3, [r7, #8]
}
 8011e34:	bf00      	nop
 8011e36:	e7fe      	b.n	8011e36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011e38:	693b      	ldr	r3, [r7, #16]
 8011e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e3c:	1e5a      	subs	r2, r3, #1
 8011e3e:	693b      	ldr	r3, [r7, #16]
 8011e40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011e42:	693b      	ldr	r3, [r7, #16]
 8011e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e46:	693b      	ldr	r3, [r7, #16]
 8011e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011e4a:	429a      	cmp	r2, r3
 8011e4c:	d02c      	beq.n	8011ea8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011e4e:	693b      	ldr	r3, [r7, #16]
 8011e50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d128      	bne.n	8011ea8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011e56:	693b      	ldr	r3, [r7, #16]
 8011e58:	3304      	adds	r3, #4
 8011e5a:	4618      	mov	r0, r3
 8011e5c:	f7fd fbdc 	bl	800f618 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011e60:	693b      	ldr	r3, [r7, #16]
 8011e62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011e64:	693b      	ldr	r3, [r7, #16]
 8011e66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011e68:	693b      	ldr	r3, [r7, #16]
 8011e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011e70:	693b      	ldr	r3, [r7, #16]
 8011e72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011e74:	693b      	ldr	r3, [r7, #16]
 8011e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e78:	4b0f      	ldr	r3, [pc, #60]	; (8011eb8 <xTaskPriorityDisinherit+0xd4>)
 8011e7a:	681b      	ldr	r3, [r3, #0]
 8011e7c:	429a      	cmp	r2, r3
 8011e7e:	d903      	bls.n	8011e88 <xTaskPriorityDisinherit+0xa4>
 8011e80:	693b      	ldr	r3, [r7, #16]
 8011e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e84:	4a0c      	ldr	r2, [pc, #48]	; (8011eb8 <xTaskPriorityDisinherit+0xd4>)
 8011e86:	6013      	str	r3, [r2, #0]
 8011e88:	693b      	ldr	r3, [r7, #16]
 8011e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e8c:	4613      	mov	r3, r2
 8011e8e:	009b      	lsls	r3, r3, #2
 8011e90:	4413      	add	r3, r2
 8011e92:	009b      	lsls	r3, r3, #2
 8011e94:	4a09      	ldr	r2, [pc, #36]	; (8011ebc <xTaskPriorityDisinherit+0xd8>)
 8011e96:	441a      	add	r2, r3
 8011e98:	693b      	ldr	r3, [r7, #16]
 8011e9a:	3304      	adds	r3, #4
 8011e9c:	4619      	mov	r1, r3
 8011e9e:	4610      	mov	r0, r2
 8011ea0:	f7fd fb5d 	bl	800f55e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011ea4:	2301      	movs	r3, #1
 8011ea6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011ea8:	697b      	ldr	r3, [r7, #20]
	}
 8011eaa:	4618      	mov	r0, r3
 8011eac:	3718      	adds	r7, #24
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	bd80      	pop	{r7, pc}
 8011eb2:	bf00      	nop
 8011eb4:	20001b08 	.word	0x20001b08
 8011eb8:	20001fe4 	.word	0x20001fe4
 8011ebc:	20001b0c 	.word	0x20001b0c

08011ec0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b088      	sub	sp, #32
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
 8011ec8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011ece:	2301      	movs	r3, #1
 8011ed0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d06a      	beq.n	8011fae <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011ed8:	69bb      	ldr	r3, [r7, #24]
 8011eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d10a      	bne.n	8011ef6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ee4:	f383 8811 	msr	BASEPRI, r3
 8011ee8:	f3bf 8f6f 	isb	sy
 8011eec:	f3bf 8f4f 	dsb	sy
 8011ef0:	60fb      	str	r3, [r7, #12]
}
 8011ef2:	bf00      	nop
 8011ef4:	e7fe      	b.n	8011ef4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011ef6:	69bb      	ldr	r3, [r7, #24]
 8011ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011efa:	683a      	ldr	r2, [r7, #0]
 8011efc:	429a      	cmp	r2, r3
 8011efe:	d902      	bls.n	8011f06 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011f00:	683b      	ldr	r3, [r7, #0]
 8011f02:	61fb      	str	r3, [r7, #28]
 8011f04:	e002      	b.n	8011f0c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011f06:	69bb      	ldr	r3, [r7, #24]
 8011f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011f0a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011f0c:	69bb      	ldr	r3, [r7, #24]
 8011f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f10:	69fa      	ldr	r2, [r7, #28]
 8011f12:	429a      	cmp	r2, r3
 8011f14:	d04b      	beq.n	8011fae <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011f16:	69bb      	ldr	r3, [r7, #24]
 8011f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f1a:	697a      	ldr	r2, [r7, #20]
 8011f1c:	429a      	cmp	r2, r3
 8011f1e:	d146      	bne.n	8011fae <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011f20:	4b25      	ldr	r3, [pc, #148]	; (8011fb8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	69ba      	ldr	r2, [r7, #24]
 8011f26:	429a      	cmp	r2, r3
 8011f28:	d10a      	bne.n	8011f40 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f2e:	f383 8811 	msr	BASEPRI, r3
 8011f32:	f3bf 8f6f 	isb	sy
 8011f36:	f3bf 8f4f 	dsb	sy
 8011f3a:	60bb      	str	r3, [r7, #8]
}
 8011f3c:	bf00      	nop
 8011f3e:	e7fe      	b.n	8011f3e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011f40:	69bb      	ldr	r3, [r7, #24]
 8011f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f44:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011f46:	69bb      	ldr	r3, [r7, #24]
 8011f48:	69fa      	ldr	r2, [r7, #28]
 8011f4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011f4c:	69bb      	ldr	r3, [r7, #24]
 8011f4e:	699b      	ldr	r3, [r3, #24]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	db04      	blt.n	8011f5e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011f54:	69fb      	ldr	r3, [r7, #28]
 8011f56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011f5a:	69bb      	ldr	r3, [r7, #24]
 8011f5c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011f5e:	69bb      	ldr	r3, [r7, #24]
 8011f60:	6959      	ldr	r1, [r3, #20]
 8011f62:	693a      	ldr	r2, [r7, #16]
 8011f64:	4613      	mov	r3, r2
 8011f66:	009b      	lsls	r3, r3, #2
 8011f68:	4413      	add	r3, r2
 8011f6a:	009b      	lsls	r3, r3, #2
 8011f6c:	4a13      	ldr	r2, [pc, #76]	; (8011fbc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011f6e:	4413      	add	r3, r2
 8011f70:	4299      	cmp	r1, r3
 8011f72:	d11c      	bne.n	8011fae <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f74:	69bb      	ldr	r3, [r7, #24]
 8011f76:	3304      	adds	r3, #4
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f7fd fb4d 	bl	800f618 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011f7e:	69bb      	ldr	r3, [r7, #24]
 8011f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f82:	4b0f      	ldr	r3, [pc, #60]	; (8011fc0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	429a      	cmp	r2, r3
 8011f88:	d903      	bls.n	8011f92 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8011f8a:	69bb      	ldr	r3, [r7, #24]
 8011f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f8e:	4a0c      	ldr	r2, [pc, #48]	; (8011fc0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011f90:	6013      	str	r3, [r2, #0]
 8011f92:	69bb      	ldr	r3, [r7, #24]
 8011f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011f96:	4613      	mov	r3, r2
 8011f98:	009b      	lsls	r3, r3, #2
 8011f9a:	4413      	add	r3, r2
 8011f9c:	009b      	lsls	r3, r3, #2
 8011f9e:	4a07      	ldr	r2, [pc, #28]	; (8011fbc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011fa0:	441a      	add	r2, r3
 8011fa2:	69bb      	ldr	r3, [r7, #24]
 8011fa4:	3304      	adds	r3, #4
 8011fa6:	4619      	mov	r1, r3
 8011fa8:	4610      	mov	r0, r2
 8011faa:	f7fd fad8 	bl	800f55e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011fae:	bf00      	nop
 8011fb0:	3720      	adds	r7, #32
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	bd80      	pop	{r7, pc}
 8011fb6:	bf00      	nop
 8011fb8:	20001b08 	.word	0x20001b08
 8011fbc:	20001b0c 	.word	0x20001b0c
 8011fc0:	20001fe4 	.word	0x20001fe4

08011fc4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011fc4:	b480      	push	{r7}
 8011fc6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011fc8:	4b07      	ldr	r3, [pc, #28]	; (8011fe8 <pvTaskIncrementMutexHeldCount+0x24>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d004      	beq.n	8011fda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011fd0:	4b05      	ldr	r3, [pc, #20]	; (8011fe8 <pvTaskIncrementMutexHeldCount+0x24>)
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011fd6:	3201      	adds	r2, #1
 8011fd8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8011fda:	4b03      	ldr	r3, [pc, #12]	; (8011fe8 <pvTaskIncrementMutexHeldCount+0x24>)
 8011fdc:	681b      	ldr	r3, [r3, #0]
	}
 8011fde:	4618      	mov	r0, r3
 8011fe0:	46bd      	mov	sp, r7
 8011fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe6:	4770      	bx	lr
 8011fe8:	20001b08 	.word	0x20001b08

08011fec <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b086      	sub	sp, #24
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	60f8      	str	r0, [r7, #12]
 8011ff4:	60b9      	str	r1, [r7, #8]
 8011ff6:	607a      	str	r2, [r7, #4]
 8011ff8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8011ffa:	f000 fe0b 	bl	8012c14 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011ffe:	4b29      	ldr	r3, [pc, #164]	; (80120a4 <xTaskNotifyWait+0xb8>)
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8012006:	b2db      	uxtb	r3, r3
 8012008:	2b02      	cmp	r3, #2
 801200a:	d01c      	beq.n	8012046 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 801200c:	4b25      	ldr	r3, [pc, #148]	; (80120a4 <xTaskNotifyWait+0xb8>)
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8012014:	68fa      	ldr	r2, [r7, #12]
 8012016:	43d2      	mvns	r2, r2
 8012018:	400a      	ands	r2, r1
 801201a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 801201e:	4b21      	ldr	r3, [pc, #132]	; (80120a4 <xTaskNotifyWait+0xb8>)
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	2201      	movs	r2, #1
 8012024:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 8012028:	683b      	ldr	r3, [r7, #0]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d00b      	beq.n	8012046 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801202e:	2101      	movs	r1, #1
 8012030:	6838      	ldr	r0, [r7, #0]
 8012032:	f000 f91f 	bl	8012274 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8012036:	4b1c      	ldr	r3, [pc, #112]	; (80120a8 <xTaskNotifyWait+0xbc>)
 8012038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801203c:	601a      	str	r2, [r3, #0]
 801203e:	f3bf 8f4f 	dsb	sy
 8012042:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8012046:	f000 fe15 	bl	8012c74 <vPortExitCritical>

		taskENTER_CRITICAL();
 801204a:	f000 fde3 	bl	8012c14 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d005      	beq.n	8012060 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8012054:	4b13      	ldr	r3, [pc, #76]	; (80120a4 <xTaskNotifyWait+0xb8>)
 8012056:	681b      	ldr	r3, [r3, #0]
 8012058:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8012060:	4b10      	ldr	r3, [pc, #64]	; (80120a4 <xTaskNotifyWait+0xb8>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8012068:	b2db      	uxtb	r3, r3
 801206a:	2b02      	cmp	r3, #2
 801206c:	d002      	beq.n	8012074 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 801206e:	2300      	movs	r3, #0
 8012070:	617b      	str	r3, [r7, #20]
 8012072:	e00a      	b.n	801208a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8012074:	4b0b      	ldr	r3, [pc, #44]	; (80120a4 <xTaskNotifyWait+0xb8>)
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 801207c:	68ba      	ldr	r2, [r7, #8]
 801207e:	43d2      	mvns	r2, r2
 8012080:	400a      	ands	r2, r1
 8012082:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 8012086:	2301      	movs	r3, #1
 8012088:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801208a:	4b06      	ldr	r3, [pc, #24]	; (80120a4 <xTaskNotifyWait+0xb8>)
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	2200      	movs	r2, #0
 8012090:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 8012094:	f000 fdee 	bl	8012c74 <vPortExitCritical>

		return xReturn;
 8012098:	697b      	ldr	r3, [r7, #20]
	}
 801209a:	4618      	mov	r0, r3
 801209c:	3718      	adds	r7, #24
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}
 80120a2:	bf00      	nop
 80120a4:	20001b08 	.word	0x20001b08
 80120a8:	e000ed04 	.word	0xe000ed04

080120ac <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b08a      	sub	sp, #40	; 0x28
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	60f8      	str	r0, [r7, #12]
 80120b4:	60b9      	str	r1, [r7, #8]
 80120b6:	603b      	str	r3, [r7, #0]
 80120b8:	4613      	mov	r3, r2
 80120ba:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80120bc:	2301      	movs	r3, #1
 80120be:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80120c0:	68fb      	ldr	r3, [r7, #12]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d10a      	bne.n	80120dc <xTaskGenericNotify+0x30>
	__asm volatile
 80120c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120ca:	f383 8811 	msr	BASEPRI, r3
 80120ce:	f3bf 8f6f 	isb	sy
 80120d2:	f3bf 8f4f 	dsb	sy
 80120d6:	61bb      	str	r3, [r7, #24]
}
 80120d8:	bf00      	nop
 80120da:	e7fe      	b.n	80120da <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80120e0:	f000 fd98 	bl	8012c14 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80120e4:	683b      	ldr	r3, [r7, #0]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d004      	beq.n	80120f4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80120ea:	6a3b      	ldr	r3, [r7, #32]
 80120ec:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80120f0:	683b      	ldr	r3, [r7, #0]
 80120f2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80120f4:	6a3b      	ldr	r3, [r7, #32]
 80120f6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80120fa:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80120fc:	6a3b      	ldr	r3, [r7, #32]
 80120fe:	2202      	movs	r2, #2
 8012100:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 8012104:	79fb      	ldrb	r3, [r7, #7]
 8012106:	2b04      	cmp	r3, #4
 8012108:	d82d      	bhi.n	8012166 <xTaskGenericNotify+0xba>
 801210a:	a201      	add	r2, pc, #4	; (adr r2, 8012110 <xTaskGenericNotify+0x64>)
 801210c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012110:	08012189 	.word	0x08012189
 8012114:	08012125 	.word	0x08012125
 8012118:	08012137 	.word	0x08012137
 801211c:	08012147 	.word	0x08012147
 8012120:	08012151 	.word	0x08012151
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8012124:	6a3b      	ldr	r3, [r7, #32]
 8012126:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801212a:	68bb      	ldr	r3, [r7, #8]
 801212c:	431a      	orrs	r2, r3
 801212e:	6a3b      	ldr	r3, [r7, #32]
 8012130:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8012134:	e02b      	b.n	801218e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8012136:	6a3b      	ldr	r3, [r7, #32]
 8012138:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801213c:	1c5a      	adds	r2, r3, #1
 801213e:	6a3b      	ldr	r3, [r7, #32]
 8012140:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8012144:	e023      	b.n	801218e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8012146:	6a3b      	ldr	r3, [r7, #32]
 8012148:	68ba      	ldr	r2, [r7, #8]
 801214a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 801214e:	e01e      	b.n	801218e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8012150:	7ffb      	ldrb	r3, [r7, #31]
 8012152:	2b02      	cmp	r3, #2
 8012154:	d004      	beq.n	8012160 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8012156:	6a3b      	ldr	r3, [r7, #32]
 8012158:	68ba      	ldr	r2, [r7, #8]
 801215a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801215e:	e016      	b.n	801218e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8012160:	2300      	movs	r3, #0
 8012162:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8012164:	e013      	b.n	801218e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8012166:	6a3b      	ldr	r3, [r7, #32]
 8012168:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801216c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012170:	d00c      	beq.n	801218c <xTaskGenericNotify+0xe0>
	__asm volatile
 8012172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012176:	f383 8811 	msr	BASEPRI, r3
 801217a:	f3bf 8f6f 	isb	sy
 801217e:	f3bf 8f4f 	dsb	sy
 8012182:	617b      	str	r3, [r7, #20]
}
 8012184:	bf00      	nop
 8012186:	e7fe      	b.n	8012186 <xTaskGenericNotify+0xda>
					break;
 8012188:	bf00      	nop
 801218a:	e000      	b.n	801218e <xTaskGenericNotify+0xe2>

					break;
 801218c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801218e:	7ffb      	ldrb	r3, [r7, #31]
 8012190:	2b01      	cmp	r3, #1
 8012192:	d13a      	bne.n	801220a <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012194:	6a3b      	ldr	r3, [r7, #32]
 8012196:	3304      	adds	r3, #4
 8012198:	4618      	mov	r0, r3
 801219a:	f7fd fa3d 	bl	800f618 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 801219e:	6a3b      	ldr	r3, [r7, #32]
 80121a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121a2:	4b1d      	ldr	r3, [pc, #116]	; (8012218 <xTaskGenericNotify+0x16c>)
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	429a      	cmp	r2, r3
 80121a8:	d903      	bls.n	80121b2 <xTaskGenericNotify+0x106>
 80121aa:	6a3b      	ldr	r3, [r7, #32]
 80121ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121ae:	4a1a      	ldr	r2, [pc, #104]	; (8012218 <xTaskGenericNotify+0x16c>)
 80121b0:	6013      	str	r3, [r2, #0]
 80121b2:	6a3b      	ldr	r3, [r7, #32]
 80121b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121b6:	4613      	mov	r3, r2
 80121b8:	009b      	lsls	r3, r3, #2
 80121ba:	4413      	add	r3, r2
 80121bc:	009b      	lsls	r3, r3, #2
 80121be:	4a17      	ldr	r2, [pc, #92]	; (801221c <xTaskGenericNotify+0x170>)
 80121c0:	441a      	add	r2, r3
 80121c2:	6a3b      	ldr	r3, [r7, #32]
 80121c4:	3304      	adds	r3, #4
 80121c6:	4619      	mov	r1, r3
 80121c8:	4610      	mov	r0, r2
 80121ca:	f7fd f9c8 	bl	800f55e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80121ce:	6a3b      	ldr	r3, [r7, #32]
 80121d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d00a      	beq.n	80121ec <xTaskGenericNotify+0x140>
	__asm volatile
 80121d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121da:	f383 8811 	msr	BASEPRI, r3
 80121de:	f3bf 8f6f 	isb	sy
 80121e2:	f3bf 8f4f 	dsb	sy
 80121e6:	613b      	str	r3, [r7, #16]
}
 80121e8:	bf00      	nop
 80121ea:	e7fe      	b.n	80121ea <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80121ec:	6a3b      	ldr	r3, [r7, #32]
 80121ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121f0:	4b0b      	ldr	r3, [pc, #44]	; (8012220 <xTaskGenericNotify+0x174>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121f6:	429a      	cmp	r2, r3
 80121f8:	d907      	bls.n	801220a <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80121fa:	4b0a      	ldr	r3, [pc, #40]	; (8012224 <xTaskGenericNotify+0x178>)
 80121fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012200:	601a      	str	r2, [r3, #0]
 8012202:	f3bf 8f4f 	dsb	sy
 8012206:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 801220a:	f000 fd33 	bl	8012c74 <vPortExitCritical>

		return xReturn;
 801220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8012210:	4618      	mov	r0, r3
 8012212:	3728      	adds	r7, #40	; 0x28
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}
 8012218:	20001fe4 	.word	0x20001fe4
 801221c:	20001b0c 	.word	0x20001b0c
 8012220:	20001b08 	.word	0x20001b08
 8012224:	e000ed04 	.word	0xe000ed04

08012228 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8012228:	b580      	push	{r7, lr}
 801222a:	b084      	sub	sp, #16
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d102      	bne.n	801223c <xTaskNotifyStateClear+0x14>
 8012236:	4b0e      	ldr	r3, [pc, #56]	; (8012270 <xTaskNotifyStateClear+0x48>)
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	e000      	b.n	801223e <xTaskNotifyStateClear+0x16>
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8012240:	f000 fce8 	bl	8012c14 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801224a:	b2db      	uxtb	r3, r3
 801224c:	2b02      	cmp	r3, #2
 801224e:	d106      	bne.n	801225e <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012250:	68bb      	ldr	r3, [r7, #8]
 8012252:	2200      	movs	r2, #0
 8012254:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				xReturn = pdPASS;
 8012258:	2301      	movs	r3, #1
 801225a:	60fb      	str	r3, [r7, #12]
 801225c:	e001      	b.n	8012262 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 801225e:	2300      	movs	r3, #0
 8012260:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8012262:	f000 fd07 	bl	8012c74 <vPortExitCritical>

		return xReturn;
 8012266:	68fb      	ldr	r3, [r7, #12]
	}
 8012268:	4618      	mov	r0, r3
 801226a:	3710      	adds	r7, #16
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}
 8012270:	20001b08 	.word	0x20001b08

08012274 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b084      	sub	sp, #16
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
 801227c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801227e:	4b21      	ldr	r3, [pc, #132]	; (8012304 <prvAddCurrentTaskToDelayedList+0x90>)
 8012280:	681b      	ldr	r3, [r3, #0]
 8012282:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012284:	4b20      	ldr	r3, [pc, #128]	; (8012308 <prvAddCurrentTaskToDelayedList+0x94>)
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	3304      	adds	r3, #4
 801228a:	4618      	mov	r0, r3
 801228c:	f7fd f9c4 	bl	800f618 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012296:	d10a      	bne.n	80122ae <prvAddCurrentTaskToDelayedList+0x3a>
 8012298:	683b      	ldr	r3, [r7, #0]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d007      	beq.n	80122ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801229e:	4b1a      	ldr	r3, [pc, #104]	; (8012308 <prvAddCurrentTaskToDelayedList+0x94>)
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	3304      	adds	r3, #4
 80122a4:	4619      	mov	r1, r3
 80122a6:	4819      	ldr	r0, [pc, #100]	; (801230c <prvAddCurrentTaskToDelayedList+0x98>)
 80122a8:	f7fd f959 	bl	800f55e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80122ac:	e026      	b.n	80122fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80122ae:	68fa      	ldr	r2, [r7, #12]
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	4413      	add	r3, r2
 80122b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80122b6:	4b14      	ldr	r3, [pc, #80]	; (8012308 <prvAddCurrentTaskToDelayedList+0x94>)
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	68ba      	ldr	r2, [r7, #8]
 80122bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80122be:	68ba      	ldr	r2, [r7, #8]
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	429a      	cmp	r2, r3
 80122c4:	d209      	bcs.n	80122da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80122c6:	4b12      	ldr	r3, [pc, #72]	; (8012310 <prvAddCurrentTaskToDelayedList+0x9c>)
 80122c8:	681a      	ldr	r2, [r3, #0]
 80122ca:	4b0f      	ldr	r3, [pc, #60]	; (8012308 <prvAddCurrentTaskToDelayedList+0x94>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	3304      	adds	r3, #4
 80122d0:	4619      	mov	r1, r3
 80122d2:	4610      	mov	r0, r2
 80122d4:	f7fd f967 	bl	800f5a6 <vListInsert>
}
 80122d8:	e010      	b.n	80122fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80122da:	4b0e      	ldr	r3, [pc, #56]	; (8012314 <prvAddCurrentTaskToDelayedList+0xa0>)
 80122dc:	681a      	ldr	r2, [r3, #0]
 80122de:	4b0a      	ldr	r3, [pc, #40]	; (8012308 <prvAddCurrentTaskToDelayedList+0x94>)
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	3304      	adds	r3, #4
 80122e4:	4619      	mov	r1, r3
 80122e6:	4610      	mov	r0, r2
 80122e8:	f7fd f95d 	bl	800f5a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80122ec:	4b0a      	ldr	r3, [pc, #40]	; (8012318 <prvAddCurrentTaskToDelayedList+0xa4>)
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	68ba      	ldr	r2, [r7, #8]
 80122f2:	429a      	cmp	r2, r3
 80122f4:	d202      	bcs.n	80122fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80122f6:	4a08      	ldr	r2, [pc, #32]	; (8012318 <prvAddCurrentTaskToDelayedList+0xa4>)
 80122f8:	68bb      	ldr	r3, [r7, #8]
 80122fa:	6013      	str	r3, [r2, #0]
}
 80122fc:	bf00      	nop
 80122fe:	3710      	adds	r7, #16
 8012300:	46bd      	mov	sp, r7
 8012302:	bd80      	pop	{r7, pc}
 8012304:	20001fe0 	.word	0x20001fe0
 8012308:	20001b08 	.word	0x20001b08
 801230c:	20001fc8 	.word	0x20001fc8
 8012310:	20001f98 	.word	0x20001f98
 8012314:	20001f94 	.word	0x20001f94
 8012318:	20001ffc 	.word	0x20001ffc

0801231c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801231c:	b580      	push	{r7, lr}
 801231e:	b08a      	sub	sp, #40	; 0x28
 8012320:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8012322:	2300      	movs	r3, #0
 8012324:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8012326:	f000 fb07 	bl	8012938 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801232a:	4b1c      	ldr	r3, [pc, #112]	; (801239c <xTimerCreateTimerTask+0x80>)
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d021      	beq.n	8012376 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8012332:	2300      	movs	r3, #0
 8012334:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8012336:	2300      	movs	r3, #0
 8012338:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801233a:	1d3a      	adds	r2, r7, #4
 801233c:	f107 0108 	add.w	r1, r7, #8
 8012340:	f107 030c 	add.w	r3, r7, #12
 8012344:	4618      	mov	r0, r3
 8012346:	f7fd f8c3 	bl	800f4d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801234a:	6879      	ldr	r1, [r7, #4]
 801234c:	68bb      	ldr	r3, [r7, #8]
 801234e:	68fa      	ldr	r2, [r7, #12]
 8012350:	9202      	str	r2, [sp, #8]
 8012352:	9301      	str	r3, [sp, #4]
 8012354:	2302      	movs	r3, #2
 8012356:	9300      	str	r3, [sp, #0]
 8012358:	2300      	movs	r3, #0
 801235a:	460a      	mov	r2, r1
 801235c:	4910      	ldr	r1, [pc, #64]	; (80123a0 <xTimerCreateTimerTask+0x84>)
 801235e:	4811      	ldr	r0, [pc, #68]	; (80123a4 <xTimerCreateTimerTask+0x88>)
 8012360:	f7fe fe0a 	bl	8010f78 <xTaskCreateStatic>
 8012364:	4603      	mov	r3, r0
 8012366:	4a10      	ldr	r2, [pc, #64]	; (80123a8 <xTimerCreateTimerTask+0x8c>)
 8012368:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801236a:	4b0f      	ldr	r3, [pc, #60]	; (80123a8 <xTimerCreateTimerTask+0x8c>)
 801236c:	681b      	ldr	r3, [r3, #0]
 801236e:	2b00      	cmp	r3, #0
 8012370:	d001      	beq.n	8012376 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012372:	2301      	movs	r3, #1
 8012374:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012376:	697b      	ldr	r3, [r7, #20]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d10a      	bne.n	8012392 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801237c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012380:	f383 8811 	msr	BASEPRI, r3
 8012384:	f3bf 8f6f 	isb	sy
 8012388:	f3bf 8f4f 	dsb	sy
 801238c:	613b      	str	r3, [r7, #16]
}
 801238e:	bf00      	nop
 8012390:	e7fe      	b.n	8012390 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012392:	697b      	ldr	r3, [r7, #20]
}
 8012394:	4618      	mov	r0, r3
 8012396:	3718      	adds	r7, #24
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}
 801239c:	20002040 	.word	0x20002040
 80123a0:	08013e80 	.word	0x08013e80
 80123a4:	080124e1 	.word	0x080124e1
 80123a8:	20002044 	.word	0x20002044

080123ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b08a      	sub	sp, #40	; 0x28
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	60f8      	str	r0, [r7, #12]
 80123b4:	60b9      	str	r1, [r7, #8]
 80123b6:	607a      	str	r2, [r7, #4]
 80123b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80123ba:	2300      	movs	r3, #0
 80123bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d10a      	bne.n	80123da <xTimerGenericCommand+0x2e>
	__asm volatile
 80123c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123c8:	f383 8811 	msr	BASEPRI, r3
 80123cc:	f3bf 8f6f 	isb	sy
 80123d0:	f3bf 8f4f 	dsb	sy
 80123d4:	623b      	str	r3, [r7, #32]
}
 80123d6:	bf00      	nop
 80123d8:	e7fe      	b.n	80123d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80123da:	4b1a      	ldr	r3, [pc, #104]	; (8012444 <xTimerGenericCommand+0x98>)
 80123dc:	681b      	ldr	r3, [r3, #0]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d02a      	beq.n	8012438 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80123e2:	68bb      	ldr	r3, [r7, #8]
 80123e4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	2b05      	cmp	r3, #5
 80123f2:	dc18      	bgt.n	8012426 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80123f4:	f7ff fc70 	bl	8011cd8 <xTaskGetSchedulerState>
 80123f8:	4603      	mov	r3, r0
 80123fa:	2b02      	cmp	r3, #2
 80123fc:	d109      	bne.n	8012412 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80123fe:	4b11      	ldr	r3, [pc, #68]	; (8012444 <xTimerGenericCommand+0x98>)
 8012400:	6818      	ldr	r0, [r3, #0]
 8012402:	f107 0110 	add.w	r1, r7, #16
 8012406:	2300      	movs	r3, #0
 8012408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801240a:	f7fd fb8d 	bl	800fb28 <xQueueGenericSend>
 801240e:	6278      	str	r0, [r7, #36]	; 0x24
 8012410:	e012      	b.n	8012438 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8012412:	4b0c      	ldr	r3, [pc, #48]	; (8012444 <xTimerGenericCommand+0x98>)
 8012414:	6818      	ldr	r0, [r3, #0]
 8012416:	f107 0110 	add.w	r1, r7, #16
 801241a:	2300      	movs	r3, #0
 801241c:	2200      	movs	r2, #0
 801241e:	f7fd fb83 	bl	800fb28 <xQueueGenericSend>
 8012422:	6278      	str	r0, [r7, #36]	; 0x24
 8012424:	e008      	b.n	8012438 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8012426:	4b07      	ldr	r3, [pc, #28]	; (8012444 <xTimerGenericCommand+0x98>)
 8012428:	6818      	ldr	r0, [r3, #0]
 801242a:	f107 0110 	add.w	r1, r7, #16
 801242e:	2300      	movs	r3, #0
 8012430:	683a      	ldr	r2, [r7, #0]
 8012432:	f7fd fc77 	bl	800fd24 <xQueueGenericSendFromISR>
 8012436:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8012438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801243a:	4618      	mov	r0, r3
 801243c:	3728      	adds	r7, #40	; 0x28
 801243e:	46bd      	mov	sp, r7
 8012440:	bd80      	pop	{r7, pc}
 8012442:	bf00      	nop
 8012444:	20002040 	.word	0x20002040

08012448 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b088      	sub	sp, #32
 801244c:	af02      	add	r7, sp, #8
 801244e:	6078      	str	r0, [r7, #4]
 8012450:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012452:	4b22      	ldr	r3, [pc, #136]	; (80124dc <prvProcessExpiredTimer+0x94>)
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	68db      	ldr	r3, [r3, #12]
 8012458:	68db      	ldr	r3, [r3, #12]
 801245a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801245c:	697b      	ldr	r3, [r7, #20]
 801245e:	3304      	adds	r3, #4
 8012460:	4618      	mov	r0, r3
 8012462:	f7fd f8d9 	bl	800f618 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012466:	697b      	ldr	r3, [r7, #20]
 8012468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801246c:	f003 0304 	and.w	r3, r3, #4
 8012470:	2b00      	cmp	r3, #0
 8012472:	d022      	beq.n	80124ba <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012474:	697b      	ldr	r3, [r7, #20]
 8012476:	699a      	ldr	r2, [r3, #24]
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	18d1      	adds	r1, r2, r3
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	683a      	ldr	r2, [r7, #0]
 8012480:	6978      	ldr	r0, [r7, #20]
 8012482:	f000 f8d1 	bl	8012628 <prvInsertTimerInActiveList>
 8012486:	4603      	mov	r3, r0
 8012488:	2b00      	cmp	r3, #0
 801248a:	d01f      	beq.n	80124cc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801248c:	2300      	movs	r3, #0
 801248e:	9300      	str	r3, [sp, #0]
 8012490:	2300      	movs	r3, #0
 8012492:	687a      	ldr	r2, [r7, #4]
 8012494:	2100      	movs	r1, #0
 8012496:	6978      	ldr	r0, [r7, #20]
 8012498:	f7ff ff88 	bl	80123ac <xTimerGenericCommand>
 801249c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801249e:	693b      	ldr	r3, [r7, #16]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d113      	bne.n	80124cc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80124a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124a8:	f383 8811 	msr	BASEPRI, r3
 80124ac:	f3bf 8f6f 	isb	sy
 80124b0:	f3bf 8f4f 	dsb	sy
 80124b4:	60fb      	str	r3, [r7, #12]
}
 80124b6:	bf00      	nop
 80124b8:	e7fe      	b.n	80124b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80124ba:	697b      	ldr	r3, [r7, #20]
 80124bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124c0:	f023 0301 	bic.w	r3, r3, #1
 80124c4:	b2da      	uxtb	r2, r3
 80124c6:	697b      	ldr	r3, [r7, #20]
 80124c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80124cc:	697b      	ldr	r3, [r7, #20]
 80124ce:	6a1b      	ldr	r3, [r3, #32]
 80124d0:	6978      	ldr	r0, [r7, #20]
 80124d2:	4798      	blx	r3
}
 80124d4:	bf00      	nop
 80124d6:	3718      	adds	r7, #24
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}
 80124dc:	20002038 	.word	0x20002038

080124e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b084      	sub	sp, #16
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80124e8:	f107 0308 	add.w	r3, r7, #8
 80124ec:	4618      	mov	r0, r3
 80124ee:	f000 f857 	bl	80125a0 <prvGetNextExpireTime>
 80124f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80124f4:	68bb      	ldr	r3, [r7, #8]
 80124f6:	4619      	mov	r1, r3
 80124f8:	68f8      	ldr	r0, [r7, #12]
 80124fa:	f000 f803 	bl	8012504 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80124fe:	f000 f8d5 	bl	80126ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012502:	e7f1      	b.n	80124e8 <prvTimerTask+0x8>

08012504 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8012504:	b580      	push	{r7, lr}
 8012506:	b084      	sub	sp, #16
 8012508:	af00      	add	r7, sp, #0
 801250a:	6078      	str	r0, [r7, #4]
 801250c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801250e:	f7fe ff95 	bl	801143c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8012512:	f107 0308 	add.w	r3, r7, #8
 8012516:	4618      	mov	r0, r3
 8012518:	f000 f866 	bl	80125e8 <prvSampleTimeNow>
 801251c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801251e:	68bb      	ldr	r3, [r7, #8]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d130      	bne.n	8012586 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8012524:	683b      	ldr	r3, [r7, #0]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d10a      	bne.n	8012540 <prvProcessTimerOrBlockTask+0x3c>
 801252a:	687a      	ldr	r2, [r7, #4]
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	429a      	cmp	r2, r3
 8012530:	d806      	bhi.n	8012540 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8012532:	f7fe ff91 	bl	8011458 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8012536:	68f9      	ldr	r1, [r7, #12]
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f7ff ff85 	bl	8012448 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801253e:	e024      	b.n	801258a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8012540:	683b      	ldr	r3, [r7, #0]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d008      	beq.n	8012558 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8012546:	4b13      	ldr	r3, [pc, #76]	; (8012594 <prvProcessTimerOrBlockTask+0x90>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d101      	bne.n	8012554 <prvProcessTimerOrBlockTask+0x50>
 8012550:	2301      	movs	r3, #1
 8012552:	e000      	b.n	8012556 <prvProcessTimerOrBlockTask+0x52>
 8012554:	2300      	movs	r3, #0
 8012556:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012558:	4b0f      	ldr	r3, [pc, #60]	; (8012598 <prvProcessTimerOrBlockTask+0x94>)
 801255a:	6818      	ldr	r0, [r3, #0]
 801255c:	687a      	ldr	r2, [r7, #4]
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	1ad3      	subs	r3, r2, r3
 8012562:	683a      	ldr	r2, [r7, #0]
 8012564:	4619      	mov	r1, r3
 8012566:	f7fe f94d 	bl	8010804 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801256a:	f7fe ff75 	bl	8011458 <xTaskResumeAll>
 801256e:	4603      	mov	r3, r0
 8012570:	2b00      	cmp	r3, #0
 8012572:	d10a      	bne.n	801258a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012574:	4b09      	ldr	r3, [pc, #36]	; (801259c <prvProcessTimerOrBlockTask+0x98>)
 8012576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801257a:	601a      	str	r2, [r3, #0]
 801257c:	f3bf 8f4f 	dsb	sy
 8012580:	f3bf 8f6f 	isb	sy
}
 8012584:	e001      	b.n	801258a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012586:	f7fe ff67 	bl	8011458 <xTaskResumeAll>
}
 801258a:	bf00      	nop
 801258c:	3710      	adds	r7, #16
 801258e:	46bd      	mov	sp, r7
 8012590:	bd80      	pop	{r7, pc}
 8012592:	bf00      	nop
 8012594:	2000203c 	.word	0x2000203c
 8012598:	20002040 	.word	0x20002040
 801259c:	e000ed04 	.word	0xe000ed04

080125a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80125a0:	b480      	push	{r7}
 80125a2:	b085      	sub	sp, #20
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80125a8:	4b0e      	ldr	r3, [pc, #56]	; (80125e4 <prvGetNextExpireTime+0x44>)
 80125aa:	681b      	ldr	r3, [r3, #0]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d101      	bne.n	80125b6 <prvGetNextExpireTime+0x16>
 80125b2:	2201      	movs	r2, #1
 80125b4:	e000      	b.n	80125b8 <prvGetNextExpireTime+0x18>
 80125b6:	2200      	movs	r2, #0
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d105      	bne.n	80125d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80125c4:	4b07      	ldr	r3, [pc, #28]	; (80125e4 <prvGetNextExpireTime+0x44>)
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	68db      	ldr	r3, [r3, #12]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	60fb      	str	r3, [r7, #12]
 80125ce:	e001      	b.n	80125d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80125d0:	2300      	movs	r3, #0
 80125d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80125d4:	68fb      	ldr	r3, [r7, #12]
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	3714      	adds	r7, #20
 80125da:	46bd      	mov	sp, r7
 80125dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e0:	4770      	bx	lr
 80125e2:	bf00      	nop
 80125e4:	20002038 	.word	0x20002038

080125e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b084      	sub	sp, #16
 80125ec:	af00      	add	r7, sp, #0
 80125ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80125f0:	f7fe ffd0 	bl	8011594 <xTaskGetTickCount>
 80125f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80125f6:	4b0b      	ldr	r3, [pc, #44]	; (8012624 <prvSampleTimeNow+0x3c>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	68fa      	ldr	r2, [r7, #12]
 80125fc:	429a      	cmp	r2, r3
 80125fe:	d205      	bcs.n	801260c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012600:	f000 f936 	bl	8012870 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	2201      	movs	r2, #1
 8012608:	601a      	str	r2, [r3, #0]
 801260a:	e002      	b.n	8012612 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	2200      	movs	r2, #0
 8012610:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012612:	4a04      	ldr	r2, [pc, #16]	; (8012624 <prvSampleTimeNow+0x3c>)
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8012618:	68fb      	ldr	r3, [r7, #12]
}
 801261a:	4618      	mov	r0, r3
 801261c:	3710      	adds	r7, #16
 801261e:	46bd      	mov	sp, r7
 8012620:	bd80      	pop	{r7, pc}
 8012622:	bf00      	nop
 8012624:	20002048 	.word	0x20002048

08012628 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b086      	sub	sp, #24
 801262c:	af00      	add	r7, sp, #0
 801262e:	60f8      	str	r0, [r7, #12]
 8012630:	60b9      	str	r1, [r7, #8]
 8012632:	607a      	str	r2, [r7, #4]
 8012634:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8012636:	2300      	movs	r3, #0
 8012638:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	68ba      	ldr	r2, [r7, #8]
 801263e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	68fa      	ldr	r2, [r7, #12]
 8012644:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8012646:	68ba      	ldr	r2, [r7, #8]
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	429a      	cmp	r2, r3
 801264c:	d812      	bhi.n	8012674 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801264e:	687a      	ldr	r2, [r7, #4]
 8012650:	683b      	ldr	r3, [r7, #0]
 8012652:	1ad2      	subs	r2, r2, r3
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	699b      	ldr	r3, [r3, #24]
 8012658:	429a      	cmp	r2, r3
 801265a:	d302      	bcc.n	8012662 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801265c:	2301      	movs	r3, #1
 801265e:	617b      	str	r3, [r7, #20]
 8012660:	e01b      	b.n	801269a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012662:	4b10      	ldr	r3, [pc, #64]	; (80126a4 <prvInsertTimerInActiveList+0x7c>)
 8012664:	681a      	ldr	r2, [r3, #0]
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	3304      	adds	r3, #4
 801266a:	4619      	mov	r1, r3
 801266c:	4610      	mov	r0, r2
 801266e:	f7fc ff9a 	bl	800f5a6 <vListInsert>
 8012672:	e012      	b.n	801269a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012674:	687a      	ldr	r2, [r7, #4]
 8012676:	683b      	ldr	r3, [r7, #0]
 8012678:	429a      	cmp	r2, r3
 801267a:	d206      	bcs.n	801268a <prvInsertTimerInActiveList+0x62>
 801267c:	68ba      	ldr	r2, [r7, #8]
 801267e:	683b      	ldr	r3, [r7, #0]
 8012680:	429a      	cmp	r2, r3
 8012682:	d302      	bcc.n	801268a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012684:	2301      	movs	r3, #1
 8012686:	617b      	str	r3, [r7, #20]
 8012688:	e007      	b.n	801269a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801268a:	4b07      	ldr	r3, [pc, #28]	; (80126a8 <prvInsertTimerInActiveList+0x80>)
 801268c:	681a      	ldr	r2, [r3, #0]
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	3304      	adds	r3, #4
 8012692:	4619      	mov	r1, r3
 8012694:	4610      	mov	r0, r2
 8012696:	f7fc ff86 	bl	800f5a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801269a:	697b      	ldr	r3, [r7, #20]
}
 801269c:	4618      	mov	r0, r3
 801269e:	3718      	adds	r7, #24
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}
 80126a4:	2000203c 	.word	0x2000203c
 80126a8:	20002038 	.word	0x20002038

080126ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80126ac:	b580      	push	{r7, lr}
 80126ae:	b08e      	sub	sp, #56	; 0x38
 80126b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80126b2:	e0ca      	b.n	801284a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2b00      	cmp	r3, #0
 80126b8:	da18      	bge.n	80126ec <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80126ba:	1d3b      	adds	r3, r7, #4
 80126bc:	3304      	adds	r3, #4
 80126be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80126c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d10a      	bne.n	80126dc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80126c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ca:	f383 8811 	msr	BASEPRI, r3
 80126ce:	f3bf 8f6f 	isb	sy
 80126d2:	f3bf 8f4f 	dsb	sy
 80126d6:	61fb      	str	r3, [r7, #28]
}
 80126d8:	bf00      	nop
 80126da:	e7fe      	b.n	80126da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80126dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126e2:	6850      	ldr	r0, [r2, #4]
 80126e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80126e6:	6892      	ldr	r2, [r2, #8]
 80126e8:	4611      	mov	r1, r2
 80126ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	f2c0 80aa 	blt.w	8012848 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80126f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126fa:	695b      	ldr	r3, [r3, #20]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d004      	beq.n	801270a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012702:	3304      	adds	r3, #4
 8012704:	4618      	mov	r0, r3
 8012706:	f7fc ff87 	bl	800f618 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801270a:	463b      	mov	r3, r7
 801270c:	4618      	mov	r0, r3
 801270e:	f7ff ff6b 	bl	80125e8 <prvSampleTimeNow>
 8012712:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	2b09      	cmp	r3, #9
 8012718:	f200 8097 	bhi.w	801284a <prvProcessReceivedCommands+0x19e>
 801271c:	a201      	add	r2, pc, #4	; (adr r2, 8012724 <prvProcessReceivedCommands+0x78>)
 801271e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012722:	bf00      	nop
 8012724:	0801274d 	.word	0x0801274d
 8012728:	0801274d 	.word	0x0801274d
 801272c:	0801274d 	.word	0x0801274d
 8012730:	080127c1 	.word	0x080127c1
 8012734:	080127d5 	.word	0x080127d5
 8012738:	0801281f 	.word	0x0801281f
 801273c:	0801274d 	.word	0x0801274d
 8012740:	0801274d 	.word	0x0801274d
 8012744:	080127c1 	.word	0x080127c1
 8012748:	080127d5 	.word	0x080127d5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801274c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801274e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012752:	f043 0301 	orr.w	r3, r3, #1
 8012756:	b2da      	uxtb	r2, r3
 8012758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801275a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801275e:	68ba      	ldr	r2, [r7, #8]
 8012760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012762:	699b      	ldr	r3, [r3, #24]
 8012764:	18d1      	adds	r1, r2, r3
 8012766:	68bb      	ldr	r3, [r7, #8]
 8012768:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801276a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801276c:	f7ff ff5c 	bl	8012628 <prvInsertTimerInActiveList>
 8012770:	4603      	mov	r3, r0
 8012772:	2b00      	cmp	r3, #0
 8012774:	d069      	beq.n	801284a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012778:	6a1b      	ldr	r3, [r3, #32]
 801277a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801277c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801277e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012784:	f003 0304 	and.w	r3, r3, #4
 8012788:	2b00      	cmp	r3, #0
 801278a:	d05e      	beq.n	801284a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801278c:	68ba      	ldr	r2, [r7, #8]
 801278e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012790:	699b      	ldr	r3, [r3, #24]
 8012792:	441a      	add	r2, r3
 8012794:	2300      	movs	r3, #0
 8012796:	9300      	str	r3, [sp, #0]
 8012798:	2300      	movs	r3, #0
 801279a:	2100      	movs	r1, #0
 801279c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801279e:	f7ff fe05 	bl	80123ac <xTimerGenericCommand>
 80127a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80127a4:	6a3b      	ldr	r3, [r7, #32]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d14f      	bne.n	801284a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80127aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ae:	f383 8811 	msr	BASEPRI, r3
 80127b2:	f3bf 8f6f 	isb	sy
 80127b6:	f3bf 8f4f 	dsb	sy
 80127ba:	61bb      	str	r3, [r7, #24]
}
 80127bc:	bf00      	nop
 80127be:	e7fe      	b.n	80127be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80127c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80127c6:	f023 0301 	bic.w	r3, r3, #1
 80127ca:	b2da      	uxtb	r2, r3
 80127cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80127d2:	e03a      	b.n	801284a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80127d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80127da:	f043 0301 	orr.w	r3, r3, #1
 80127de:	b2da      	uxtb	r2, r3
 80127e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80127e6:	68ba      	ldr	r2, [r7, #8]
 80127e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ea:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80127ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127ee:	699b      	ldr	r3, [r3, #24]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d10a      	bne.n	801280a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80127f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127f8:	f383 8811 	msr	BASEPRI, r3
 80127fc:	f3bf 8f6f 	isb	sy
 8012800:	f3bf 8f4f 	dsb	sy
 8012804:	617b      	str	r3, [r7, #20]
}
 8012806:	bf00      	nop
 8012808:	e7fe      	b.n	8012808 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801280a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801280c:	699a      	ldr	r2, [r3, #24]
 801280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012810:	18d1      	adds	r1, r2, r3
 8012812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012818:	f7ff ff06 	bl	8012628 <prvInsertTimerInActiveList>
					break;
 801281c:	e015      	b.n	801284a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801281e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012820:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012824:	f003 0302 	and.w	r3, r3, #2
 8012828:	2b00      	cmp	r3, #0
 801282a:	d103      	bne.n	8012834 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801282c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801282e:	f000 fbe3 	bl	8012ff8 <vPortFree>
 8012832:	e00a      	b.n	801284a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012836:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801283a:	f023 0301 	bic.w	r3, r3, #1
 801283e:	b2da      	uxtb	r2, r3
 8012840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012842:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8012846:	e000      	b.n	801284a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8012848:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801284a:	4b08      	ldr	r3, [pc, #32]	; (801286c <prvProcessReceivedCommands+0x1c0>)
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	1d39      	adds	r1, r7, #4
 8012850:	2200      	movs	r2, #0
 8012852:	4618      	mov	r0, r3
 8012854:	f7fd fb8e 	bl	800ff74 <xQueueReceive>
 8012858:	4603      	mov	r3, r0
 801285a:	2b00      	cmp	r3, #0
 801285c:	f47f af2a 	bne.w	80126b4 <prvProcessReceivedCommands+0x8>
	}
}
 8012860:	bf00      	nop
 8012862:	bf00      	nop
 8012864:	3730      	adds	r7, #48	; 0x30
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}
 801286a:	bf00      	nop
 801286c:	20002040 	.word	0x20002040

08012870 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b088      	sub	sp, #32
 8012874:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012876:	e048      	b.n	801290a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012878:	4b2d      	ldr	r3, [pc, #180]	; (8012930 <prvSwitchTimerLists+0xc0>)
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	68db      	ldr	r3, [r3, #12]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012882:	4b2b      	ldr	r3, [pc, #172]	; (8012930 <prvSwitchTimerLists+0xc0>)
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	68db      	ldr	r3, [r3, #12]
 8012888:	68db      	ldr	r3, [r3, #12]
 801288a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	3304      	adds	r3, #4
 8012890:	4618      	mov	r0, r3
 8012892:	f7fc fec1 	bl	800f618 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	6a1b      	ldr	r3, [r3, #32]
 801289a:	68f8      	ldr	r0, [r7, #12]
 801289c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80128a4:	f003 0304 	and.w	r3, r3, #4
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d02e      	beq.n	801290a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	699b      	ldr	r3, [r3, #24]
 80128b0:	693a      	ldr	r2, [r7, #16]
 80128b2:	4413      	add	r3, r2
 80128b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80128b6:	68ba      	ldr	r2, [r7, #8]
 80128b8:	693b      	ldr	r3, [r7, #16]
 80128ba:	429a      	cmp	r2, r3
 80128bc:	d90e      	bls.n	80128dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	68ba      	ldr	r2, [r7, #8]
 80128c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	68fa      	ldr	r2, [r7, #12]
 80128c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80128ca:	4b19      	ldr	r3, [pc, #100]	; (8012930 <prvSwitchTimerLists+0xc0>)
 80128cc:	681a      	ldr	r2, [r3, #0]
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	3304      	adds	r3, #4
 80128d2:	4619      	mov	r1, r3
 80128d4:	4610      	mov	r0, r2
 80128d6:	f7fc fe66 	bl	800f5a6 <vListInsert>
 80128da:	e016      	b.n	801290a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80128dc:	2300      	movs	r3, #0
 80128de:	9300      	str	r3, [sp, #0]
 80128e0:	2300      	movs	r3, #0
 80128e2:	693a      	ldr	r2, [r7, #16]
 80128e4:	2100      	movs	r1, #0
 80128e6:	68f8      	ldr	r0, [r7, #12]
 80128e8:	f7ff fd60 	bl	80123ac <xTimerGenericCommand>
 80128ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d10a      	bne.n	801290a <prvSwitchTimerLists+0x9a>
	__asm volatile
 80128f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128f8:	f383 8811 	msr	BASEPRI, r3
 80128fc:	f3bf 8f6f 	isb	sy
 8012900:	f3bf 8f4f 	dsb	sy
 8012904:	603b      	str	r3, [r7, #0]
}
 8012906:	bf00      	nop
 8012908:	e7fe      	b.n	8012908 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801290a:	4b09      	ldr	r3, [pc, #36]	; (8012930 <prvSwitchTimerLists+0xc0>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d1b1      	bne.n	8012878 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012914:	4b06      	ldr	r3, [pc, #24]	; (8012930 <prvSwitchTimerLists+0xc0>)
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801291a:	4b06      	ldr	r3, [pc, #24]	; (8012934 <prvSwitchTimerLists+0xc4>)
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	4a04      	ldr	r2, [pc, #16]	; (8012930 <prvSwitchTimerLists+0xc0>)
 8012920:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012922:	4a04      	ldr	r2, [pc, #16]	; (8012934 <prvSwitchTimerLists+0xc4>)
 8012924:	697b      	ldr	r3, [r7, #20]
 8012926:	6013      	str	r3, [r2, #0]
}
 8012928:	bf00      	nop
 801292a:	3718      	adds	r7, #24
 801292c:	46bd      	mov	sp, r7
 801292e:	bd80      	pop	{r7, pc}
 8012930:	20002038 	.word	0x20002038
 8012934:	2000203c 	.word	0x2000203c

08012938 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b082      	sub	sp, #8
 801293c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801293e:	f000 f969 	bl	8012c14 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012942:	4b15      	ldr	r3, [pc, #84]	; (8012998 <prvCheckForValidListAndQueue+0x60>)
 8012944:	681b      	ldr	r3, [r3, #0]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d120      	bne.n	801298c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801294a:	4814      	ldr	r0, [pc, #80]	; (801299c <prvCheckForValidListAndQueue+0x64>)
 801294c:	f7fc fdda 	bl	800f504 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012950:	4813      	ldr	r0, [pc, #76]	; (80129a0 <prvCheckForValidListAndQueue+0x68>)
 8012952:	f7fc fdd7 	bl	800f504 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012956:	4b13      	ldr	r3, [pc, #76]	; (80129a4 <prvCheckForValidListAndQueue+0x6c>)
 8012958:	4a10      	ldr	r2, [pc, #64]	; (801299c <prvCheckForValidListAndQueue+0x64>)
 801295a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801295c:	4b12      	ldr	r3, [pc, #72]	; (80129a8 <prvCheckForValidListAndQueue+0x70>)
 801295e:	4a10      	ldr	r2, [pc, #64]	; (80129a0 <prvCheckForValidListAndQueue+0x68>)
 8012960:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012962:	2300      	movs	r3, #0
 8012964:	9300      	str	r3, [sp, #0]
 8012966:	4b11      	ldr	r3, [pc, #68]	; (80129ac <prvCheckForValidListAndQueue+0x74>)
 8012968:	4a11      	ldr	r2, [pc, #68]	; (80129b0 <prvCheckForValidListAndQueue+0x78>)
 801296a:	2110      	movs	r1, #16
 801296c:	200a      	movs	r0, #10
 801296e:	f7fc fee5 	bl	800f73c <xQueueGenericCreateStatic>
 8012972:	4603      	mov	r3, r0
 8012974:	4a08      	ldr	r2, [pc, #32]	; (8012998 <prvCheckForValidListAndQueue+0x60>)
 8012976:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012978:	4b07      	ldr	r3, [pc, #28]	; (8012998 <prvCheckForValidListAndQueue+0x60>)
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d005      	beq.n	801298c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012980:	4b05      	ldr	r3, [pc, #20]	; (8012998 <prvCheckForValidListAndQueue+0x60>)
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	490b      	ldr	r1, [pc, #44]	; (80129b4 <prvCheckForValidListAndQueue+0x7c>)
 8012986:	4618      	mov	r0, r3
 8012988:	f7fd fee8 	bl	801075c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801298c:	f000 f972 	bl	8012c74 <vPortExitCritical>
}
 8012990:	bf00      	nop
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}
 8012996:	bf00      	nop
 8012998:	20002040 	.word	0x20002040
 801299c:	20002010 	.word	0x20002010
 80129a0:	20002024 	.word	0x20002024
 80129a4:	20002038 	.word	0x20002038
 80129a8:	2000203c 	.word	0x2000203c
 80129ac:	200020ec 	.word	0x200020ec
 80129b0:	2000204c 	.word	0x2000204c
 80129b4:	08013e88 	.word	0x08013e88

080129b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80129b8:	b480      	push	{r7}
 80129ba:	b085      	sub	sp, #20
 80129bc:	af00      	add	r7, sp, #0
 80129be:	60f8      	str	r0, [r7, #12]
 80129c0:	60b9      	str	r1, [r7, #8]
 80129c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80129c4:	68fb      	ldr	r3, [r7, #12]
 80129c6:	3b04      	subs	r3, #4
 80129c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80129d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	3b04      	subs	r3, #4
 80129d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80129d8:	68bb      	ldr	r3, [r7, #8]
 80129da:	f023 0201 	bic.w	r2, r3, #1
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80129e2:	68fb      	ldr	r3, [r7, #12]
 80129e4:	3b04      	subs	r3, #4
 80129e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80129e8:	4a0c      	ldr	r2, [pc, #48]	; (8012a1c <pxPortInitialiseStack+0x64>)
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	3b14      	subs	r3, #20
 80129f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80129f4:	687a      	ldr	r2, [r7, #4]
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	3b04      	subs	r3, #4
 80129fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	f06f 0202 	mvn.w	r2, #2
 8012a06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012a08:	68fb      	ldr	r3, [r7, #12]
 8012a0a:	3b20      	subs	r3, #32
 8012a0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012a0e:	68fb      	ldr	r3, [r7, #12]
}
 8012a10:	4618      	mov	r0, r3
 8012a12:	3714      	adds	r7, #20
 8012a14:	46bd      	mov	sp, r7
 8012a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1a:	4770      	bx	lr
 8012a1c:	08012a21 	.word	0x08012a21

08012a20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012a20:	b480      	push	{r7}
 8012a22:	b085      	sub	sp, #20
 8012a24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012a26:	2300      	movs	r3, #0
 8012a28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012a2a:	4b12      	ldr	r3, [pc, #72]	; (8012a74 <prvTaskExitError+0x54>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a32:	d00a      	beq.n	8012a4a <prvTaskExitError+0x2a>
	__asm volatile
 8012a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a38:	f383 8811 	msr	BASEPRI, r3
 8012a3c:	f3bf 8f6f 	isb	sy
 8012a40:	f3bf 8f4f 	dsb	sy
 8012a44:	60fb      	str	r3, [r7, #12]
}
 8012a46:	bf00      	nop
 8012a48:	e7fe      	b.n	8012a48 <prvTaskExitError+0x28>
	__asm volatile
 8012a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a4e:	f383 8811 	msr	BASEPRI, r3
 8012a52:	f3bf 8f6f 	isb	sy
 8012a56:	f3bf 8f4f 	dsb	sy
 8012a5a:	60bb      	str	r3, [r7, #8]
}
 8012a5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012a5e:	bf00      	nop
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	d0fc      	beq.n	8012a60 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012a66:	bf00      	nop
 8012a68:	bf00      	nop
 8012a6a:	3714      	adds	r7, #20
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a72:	4770      	bx	lr
 8012a74:	2000001c 	.word	0x2000001c
	...

08012a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012a80:	4b07      	ldr	r3, [pc, #28]	; (8012aa0 <pxCurrentTCBConst2>)
 8012a82:	6819      	ldr	r1, [r3, #0]
 8012a84:	6808      	ldr	r0, [r1, #0]
 8012a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a8a:	f380 8809 	msr	PSP, r0
 8012a8e:	f3bf 8f6f 	isb	sy
 8012a92:	f04f 0000 	mov.w	r0, #0
 8012a96:	f380 8811 	msr	BASEPRI, r0
 8012a9a:	4770      	bx	lr
 8012a9c:	f3af 8000 	nop.w

08012aa0 <pxCurrentTCBConst2>:
 8012aa0:	20001b08 	.word	0x20001b08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012aa4:	bf00      	nop
 8012aa6:	bf00      	nop

08012aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012aa8:	4808      	ldr	r0, [pc, #32]	; (8012acc <prvPortStartFirstTask+0x24>)
 8012aaa:	6800      	ldr	r0, [r0, #0]
 8012aac:	6800      	ldr	r0, [r0, #0]
 8012aae:	f380 8808 	msr	MSP, r0
 8012ab2:	f04f 0000 	mov.w	r0, #0
 8012ab6:	f380 8814 	msr	CONTROL, r0
 8012aba:	b662      	cpsie	i
 8012abc:	b661      	cpsie	f
 8012abe:	f3bf 8f4f 	dsb	sy
 8012ac2:	f3bf 8f6f 	isb	sy
 8012ac6:	df00      	svc	0
 8012ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012aca:	bf00      	nop
 8012acc:	e000ed08 	.word	0xe000ed08

08012ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b086      	sub	sp, #24
 8012ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012ad6:	4b46      	ldr	r3, [pc, #280]	; (8012bf0 <xPortStartScheduler+0x120>)
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	4a46      	ldr	r2, [pc, #280]	; (8012bf4 <xPortStartScheduler+0x124>)
 8012adc:	4293      	cmp	r3, r2
 8012ade:	d10a      	bne.n	8012af6 <xPortStartScheduler+0x26>
	__asm volatile
 8012ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae4:	f383 8811 	msr	BASEPRI, r3
 8012ae8:	f3bf 8f6f 	isb	sy
 8012aec:	f3bf 8f4f 	dsb	sy
 8012af0:	613b      	str	r3, [r7, #16]
}
 8012af2:	bf00      	nop
 8012af4:	e7fe      	b.n	8012af4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012af6:	4b3e      	ldr	r3, [pc, #248]	; (8012bf0 <xPortStartScheduler+0x120>)
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	4a3f      	ldr	r2, [pc, #252]	; (8012bf8 <xPortStartScheduler+0x128>)
 8012afc:	4293      	cmp	r3, r2
 8012afe:	d10a      	bne.n	8012b16 <xPortStartScheduler+0x46>
	__asm volatile
 8012b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b04:	f383 8811 	msr	BASEPRI, r3
 8012b08:	f3bf 8f6f 	isb	sy
 8012b0c:	f3bf 8f4f 	dsb	sy
 8012b10:	60fb      	str	r3, [r7, #12]
}
 8012b12:	bf00      	nop
 8012b14:	e7fe      	b.n	8012b14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012b16:	4b39      	ldr	r3, [pc, #228]	; (8012bfc <xPortStartScheduler+0x12c>)
 8012b18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012b1a:	697b      	ldr	r3, [r7, #20]
 8012b1c:	781b      	ldrb	r3, [r3, #0]
 8012b1e:	b2db      	uxtb	r3, r3
 8012b20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012b22:	697b      	ldr	r3, [r7, #20]
 8012b24:	22ff      	movs	r2, #255	; 0xff
 8012b26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012b28:	697b      	ldr	r3, [r7, #20]
 8012b2a:	781b      	ldrb	r3, [r3, #0]
 8012b2c:	b2db      	uxtb	r3, r3
 8012b2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012b30:	78fb      	ldrb	r3, [r7, #3]
 8012b32:	b2db      	uxtb	r3, r3
 8012b34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012b38:	b2da      	uxtb	r2, r3
 8012b3a:	4b31      	ldr	r3, [pc, #196]	; (8012c00 <xPortStartScheduler+0x130>)
 8012b3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012b3e:	4b31      	ldr	r3, [pc, #196]	; (8012c04 <xPortStartScheduler+0x134>)
 8012b40:	2207      	movs	r2, #7
 8012b42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012b44:	e009      	b.n	8012b5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012b46:	4b2f      	ldr	r3, [pc, #188]	; (8012c04 <xPortStartScheduler+0x134>)
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	3b01      	subs	r3, #1
 8012b4c:	4a2d      	ldr	r2, [pc, #180]	; (8012c04 <xPortStartScheduler+0x134>)
 8012b4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012b50:	78fb      	ldrb	r3, [r7, #3]
 8012b52:	b2db      	uxtb	r3, r3
 8012b54:	005b      	lsls	r3, r3, #1
 8012b56:	b2db      	uxtb	r3, r3
 8012b58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012b5a:	78fb      	ldrb	r3, [r7, #3]
 8012b5c:	b2db      	uxtb	r3, r3
 8012b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012b62:	2b80      	cmp	r3, #128	; 0x80
 8012b64:	d0ef      	beq.n	8012b46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012b66:	4b27      	ldr	r3, [pc, #156]	; (8012c04 <xPortStartScheduler+0x134>)
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	f1c3 0307 	rsb	r3, r3, #7
 8012b6e:	2b04      	cmp	r3, #4
 8012b70:	d00a      	beq.n	8012b88 <xPortStartScheduler+0xb8>
	__asm volatile
 8012b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b76:	f383 8811 	msr	BASEPRI, r3
 8012b7a:	f3bf 8f6f 	isb	sy
 8012b7e:	f3bf 8f4f 	dsb	sy
 8012b82:	60bb      	str	r3, [r7, #8]
}
 8012b84:	bf00      	nop
 8012b86:	e7fe      	b.n	8012b86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012b88:	4b1e      	ldr	r3, [pc, #120]	; (8012c04 <xPortStartScheduler+0x134>)
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	021b      	lsls	r3, r3, #8
 8012b8e:	4a1d      	ldr	r2, [pc, #116]	; (8012c04 <xPortStartScheduler+0x134>)
 8012b90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012b92:	4b1c      	ldr	r3, [pc, #112]	; (8012c04 <xPortStartScheduler+0x134>)
 8012b94:	681b      	ldr	r3, [r3, #0]
 8012b96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012b9a:	4a1a      	ldr	r2, [pc, #104]	; (8012c04 <xPortStartScheduler+0x134>)
 8012b9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	b2da      	uxtb	r2, r3
 8012ba2:	697b      	ldr	r3, [r7, #20]
 8012ba4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012ba6:	4b18      	ldr	r3, [pc, #96]	; (8012c08 <xPortStartScheduler+0x138>)
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	4a17      	ldr	r2, [pc, #92]	; (8012c08 <xPortStartScheduler+0x138>)
 8012bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012bb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012bb2:	4b15      	ldr	r3, [pc, #84]	; (8012c08 <xPortStartScheduler+0x138>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	4a14      	ldr	r2, [pc, #80]	; (8012c08 <xPortStartScheduler+0x138>)
 8012bb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012bbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012bbe:	f000 f8dd 	bl	8012d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012bc2:	4b12      	ldr	r3, [pc, #72]	; (8012c0c <xPortStartScheduler+0x13c>)
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012bc8:	f000 f8fc 	bl	8012dc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012bcc:	4b10      	ldr	r3, [pc, #64]	; (8012c10 <xPortStartScheduler+0x140>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	4a0f      	ldr	r2, [pc, #60]	; (8012c10 <xPortStartScheduler+0x140>)
 8012bd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012bd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012bd8:	f7ff ff66 	bl	8012aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012bdc:	f7fe fda4 	bl	8011728 <vTaskSwitchContext>
	prvTaskExitError();
 8012be0:	f7ff ff1e 	bl	8012a20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012be4:	2300      	movs	r3, #0
}
 8012be6:	4618      	mov	r0, r3
 8012be8:	3718      	adds	r7, #24
 8012bea:	46bd      	mov	sp, r7
 8012bec:	bd80      	pop	{r7, pc}
 8012bee:	bf00      	nop
 8012bf0:	e000ed00 	.word	0xe000ed00
 8012bf4:	410fc271 	.word	0x410fc271
 8012bf8:	410fc270 	.word	0x410fc270
 8012bfc:	e000e400 	.word	0xe000e400
 8012c00:	2000213c 	.word	0x2000213c
 8012c04:	20002140 	.word	0x20002140
 8012c08:	e000ed20 	.word	0xe000ed20
 8012c0c:	2000001c 	.word	0x2000001c
 8012c10:	e000ef34 	.word	0xe000ef34

08012c14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012c14:	b480      	push	{r7}
 8012c16:	b083      	sub	sp, #12
 8012c18:	af00      	add	r7, sp, #0
	__asm volatile
 8012c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c1e:	f383 8811 	msr	BASEPRI, r3
 8012c22:	f3bf 8f6f 	isb	sy
 8012c26:	f3bf 8f4f 	dsb	sy
 8012c2a:	607b      	str	r3, [r7, #4]
}
 8012c2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012c2e:	4b0f      	ldr	r3, [pc, #60]	; (8012c6c <vPortEnterCritical+0x58>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	3301      	adds	r3, #1
 8012c34:	4a0d      	ldr	r2, [pc, #52]	; (8012c6c <vPortEnterCritical+0x58>)
 8012c36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012c38:	4b0c      	ldr	r3, [pc, #48]	; (8012c6c <vPortEnterCritical+0x58>)
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	2b01      	cmp	r3, #1
 8012c3e:	d10f      	bne.n	8012c60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012c40:	4b0b      	ldr	r3, [pc, #44]	; (8012c70 <vPortEnterCritical+0x5c>)
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	b2db      	uxtb	r3, r3
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d00a      	beq.n	8012c60 <vPortEnterCritical+0x4c>
	__asm volatile
 8012c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c4e:	f383 8811 	msr	BASEPRI, r3
 8012c52:	f3bf 8f6f 	isb	sy
 8012c56:	f3bf 8f4f 	dsb	sy
 8012c5a:	603b      	str	r3, [r7, #0]
}
 8012c5c:	bf00      	nop
 8012c5e:	e7fe      	b.n	8012c5e <vPortEnterCritical+0x4a>
	}
}
 8012c60:	bf00      	nop
 8012c62:	370c      	adds	r7, #12
 8012c64:	46bd      	mov	sp, r7
 8012c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c6a:	4770      	bx	lr
 8012c6c:	2000001c 	.word	0x2000001c
 8012c70:	e000ed04 	.word	0xe000ed04

08012c74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012c74:	b480      	push	{r7}
 8012c76:	b083      	sub	sp, #12
 8012c78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012c7a:	4b12      	ldr	r3, [pc, #72]	; (8012cc4 <vPortExitCritical+0x50>)
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d10a      	bne.n	8012c98 <vPortExitCritical+0x24>
	__asm volatile
 8012c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c86:	f383 8811 	msr	BASEPRI, r3
 8012c8a:	f3bf 8f6f 	isb	sy
 8012c8e:	f3bf 8f4f 	dsb	sy
 8012c92:	607b      	str	r3, [r7, #4]
}
 8012c94:	bf00      	nop
 8012c96:	e7fe      	b.n	8012c96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012c98:	4b0a      	ldr	r3, [pc, #40]	; (8012cc4 <vPortExitCritical+0x50>)
 8012c9a:	681b      	ldr	r3, [r3, #0]
 8012c9c:	3b01      	subs	r3, #1
 8012c9e:	4a09      	ldr	r2, [pc, #36]	; (8012cc4 <vPortExitCritical+0x50>)
 8012ca0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012ca2:	4b08      	ldr	r3, [pc, #32]	; (8012cc4 <vPortExitCritical+0x50>)
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d105      	bne.n	8012cb6 <vPortExitCritical+0x42>
 8012caa:	2300      	movs	r3, #0
 8012cac:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012cae:	683b      	ldr	r3, [r7, #0]
 8012cb0:	f383 8811 	msr	BASEPRI, r3
}
 8012cb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012cb6:	bf00      	nop
 8012cb8:	370c      	adds	r7, #12
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc0:	4770      	bx	lr
 8012cc2:	bf00      	nop
 8012cc4:	2000001c 	.word	0x2000001c
	...

08012cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012cd0:	f3ef 8009 	mrs	r0, PSP
 8012cd4:	f3bf 8f6f 	isb	sy
 8012cd8:	4b15      	ldr	r3, [pc, #84]	; (8012d30 <pxCurrentTCBConst>)
 8012cda:	681a      	ldr	r2, [r3, #0]
 8012cdc:	f01e 0f10 	tst.w	lr, #16
 8012ce0:	bf08      	it	eq
 8012ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cea:	6010      	str	r0, [r2, #0]
 8012cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012cf4:	f380 8811 	msr	BASEPRI, r0
 8012cf8:	f3bf 8f4f 	dsb	sy
 8012cfc:	f3bf 8f6f 	isb	sy
 8012d00:	f7fe fd12 	bl	8011728 <vTaskSwitchContext>
 8012d04:	f04f 0000 	mov.w	r0, #0
 8012d08:	f380 8811 	msr	BASEPRI, r0
 8012d0c:	bc09      	pop	{r0, r3}
 8012d0e:	6819      	ldr	r1, [r3, #0]
 8012d10:	6808      	ldr	r0, [r1, #0]
 8012d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d16:	f01e 0f10 	tst.w	lr, #16
 8012d1a:	bf08      	it	eq
 8012d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012d20:	f380 8809 	msr	PSP, r0
 8012d24:	f3bf 8f6f 	isb	sy
 8012d28:	4770      	bx	lr
 8012d2a:	bf00      	nop
 8012d2c:	f3af 8000 	nop.w

08012d30 <pxCurrentTCBConst>:
 8012d30:	20001b08 	.word	0x20001b08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012d34:	bf00      	nop
 8012d36:	bf00      	nop

08012d38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b082      	sub	sp, #8
 8012d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8012d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d42:	f383 8811 	msr	BASEPRI, r3
 8012d46:	f3bf 8f6f 	isb	sy
 8012d4a:	f3bf 8f4f 	dsb	sy
 8012d4e:	607b      	str	r3, [r7, #4]
}
 8012d50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012d52:	f7fe fc2f 	bl	80115b4 <xTaskIncrementTick>
 8012d56:	4603      	mov	r3, r0
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d003      	beq.n	8012d64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012d5c:	4b06      	ldr	r3, [pc, #24]	; (8012d78 <xPortSysTickHandler+0x40>)
 8012d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d62:	601a      	str	r2, [r3, #0]
 8012d64:	2300      	movs	r3, #0
 8012d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012d68:	683b      	ldr	r3, [r7, #0]
 8012d6a:	f383 8811 	msr	BASEPRI, r3
}
 8012d6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012d70:	bf00      	nop
 8012d72:	3708      	adds	r7, #8
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}
 8012d78:	e000ed04 	.word	0xe000ed04

08012d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012d7c:	b480      	push	{r7}
 8012d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012d80:	4b0b      	ldr	r3, [pc, #44]	; (8012db0 <vPortSetupTimerInterrupt+0x34>)
 8012d82:	2200      	movs	r2, #0
 8012d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012d86:	4b0b      	ldr	r3, [pc, #44]	; (8012db4 <vPortSetupTimerInterrupt+0x38>)
 8012d88:	2200      	movs	r2, #0
 8012d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012d8c:	4b0a      	ldr	r3, [pc, #40]	; (8012db8 <vPortSetupTimerInterrupt+0x3c>)
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	4a0a      	ldr	r2, [pc, #40]	; (8012dbc <vPortSetupTimerInterrupt+0x40>)
 8012d92:	fba2 2303 	umull	r2, r3, r2, r3
 8012d96:	099b      	lsrs	r3, r3, #6
 8012d98:	4a09      	ldr	r2, [pc, #36]	; (8012dc0 <vPortSetupTimerInterrupt+0x44>)
 8012d9a:	3b01      	subs	r3, #1
 8012d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012d9e:	4b04      	ldr	r3, [pc, #16]	; (8012db0 <vPortSetupTimerInterrupt+0x34>)
 8012da0:	2207      	movs	r2, #7
 8012da2:	601a      	str	r2, [r3, #0]
}
 8012da4:	bf00      	nop
 8012da6:	46bd      	mov	sp, r7
 8012da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dac:	4770      	bx	lr
 8012dae:	bf00      	nop
 8012db0:	e000e010 	.word	0xe000e010
 8012db4:	e000e018 	.word	0xe000e018
 8012db8:	20000010 	.word	0x20000010
 8012dbc:	10624dd3 	.word	0x10624dd3
 8012dc0:	e000e014 	.word	0xe000e014

08012dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012dd4 <vPortEnableVFP+0x10>
 8012dc8:	6801      	ldr	r1, [r0, #0]
 8012dca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012dce:	6001      	str	r1, [r0, #0]
 8012dd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012dd2:	bf00      	nop
 8012dd4:	e000ed88 	.word	0xe000ed88

08012dd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012dd8:	b480      	push	{r7}
 8012dda:	b085      	sub	sp, #20
 8012ddc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012dde:	f3ef 8305 	mrs	r3, IPSR
 8012de2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	2b0f      	cmp	r3, #15
 8012de8:	d914      	bls.n	8012e14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012dea:	4a17      	ldr	r2, [pc, #92]	; (8012e48 <vPortValidateInterruptPriority+0x70>)
 8012dec:	68fb      	ldr	r3, [r7, #12]
 8012dee:	4413      	add	r3, r2
 8012df0:	781b      	ldrb	r3, [r3, #0]
 8012df2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012df4:	4b15      	ldr	r3, [pc, #84]	; (8012e4c <vPortValidateInterruptPriority+0x74>)
 8012df6:	781b      	ldrb	r3, [r3, #0]
 8012df8:	7afa      	ldrb	r2, [r7, #11]
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d20a      	bcs.n	8012e14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e02:	f383 8811 	msr	BASEPRI, r3
 8012e06:	f3bf 8f6f 	isb	sy
 8012e0a:	f3bf 8f4f 	dsb	sy
 8012e0e:	607b      	str	r3, [r7, #4]
}
 8012e10:	bf00      	nop
 8012e12:	e7fe      	b.n	8012e12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012e14:	4b0e      	ldr	r3, [pc, #56]	; (8012e50 <vPortValidateInterruptPriority+0x78>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012e1c:	4b0d      	ldr	r3, [pc, #52]	; (8012e54 <vPortValidateInterruptPriority+0x7c>)
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	429a      	cmp	r2, r3
 8012e22:	d90a      	bls.n	8012e3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e28:	f383 8811 	msr	BASEPRI, r3
 8012e2c:	f3bf 8f6f 	isb	sy
 8012e30:	f3bf 8f4f 	dsb	sy
 8012e34:	603b      	str	r3, [r7, #0]
}
 8012e36:	bf00      	nop
 8012e38:	e7fe      	b.n	8012e38 <vPortValidateInterruptPriority+0x60>
	}
 8012e3a:	bf00      	nop
 8012e3c:	3714      	adds	r7, #20
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e44:	4770      	bx	lr
 8012e46:	bf00      	nop
 8012e48:	e000e3f0 	.word	0xe000e3f0
 8012e4c:	2000213c 	.word	0x2000213c
 8012e50:	e000ed0c 	.word	0xe000ed0c
 8012e54:	20002140 	.word	0x20002140

08012e58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b08a      	sub	sp, #40	; 0x28
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012e60:	2300      	movs	r3, #0
 8012e62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012e64:	f7fe faea 	bl	801143c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012e68:	4b5d      	ldr	r3, [pc, #372]	; (8012fe0 <pvPortMalloc+0x188>)
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d101      	bne.n	8012e74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012e70:	f000 f930 	bl	80130d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012e74:	4b5b      	ldr	r3, [pc, #364]	; (8012fe4 <pvPortMalloc+0x18c>)
 8012e76:	681a      	ldr	r2, [r3, #0]
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	4013      	ands	r3, r2
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	f040 8093 	bne.w	8012fa8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012e82:	687b      	ldr	r3, [r7, #4]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d01d      	beq.n	8012ec4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012e88:	2208      	movs	r2, #8
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	4413      	add	r3, r2
 8012e8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	f003 0307 	and.w	r3, r3, #7
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d014      	beq.n	8012ec4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	f023 0307 	bic.w	r3, r3, #7
 8012ea0:	3308      	adds	r3, #8
 8012ea2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	f003 0307 	and.w	r3, r3, #7
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d00a      	beq.n	8012ec4 <pvPortMalloc+0x6c>
	__asm volatile
 8012eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eb2:	f383 8811 	msr	BASEPRI, r3
 8012eb6:	f3bf 8f6f 	isb	sy
 8012eba:	f3bf 8f4f 	dsb	sy
 8012ebe:	617b      	str	r3, [r7, #20]
}
 8012ec0:	bf00      	nop
 8012ec2:	e7fe      	b.n	8012ec2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d06e      	beq.n	8012fa8 <pvPortMalloc+0x150>
 8012eca:	4b47      	ldr	r3, [pc, #284]	; (8012fe8 <pvPortMalloc+0x190>)
 8012ecc:	681b      	ldr	r3, [r3, #0]
 8012ece:	687a      	ldr	r2, [r7, #4]
 8012ed0:	429a      	cmp	r2, r3
 8012ed2:	d869      	bhi.n	8012fa8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012ed4:	4b45      	ldr	r3, [pc, #276]	; (8012fec <pvPortMalloc+0x194>)
 8012ed6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012ed8:	4b44      	ldr	r3, [pc, #272]	; (8012fec <pvPortMalloc+0x194>)
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012ede:	e004      	b.n	8012eea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ee2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012eec:	685b      	ldr	r3, [r3, #4]
 8012eee:	687a      	ldr	r2, [r7, #4]
 8012ef0:	429a      	cmp	r2, r3
 8012ef2:	d903      	bls.n	8012efc <pvPortMalloc+0xa4>
 8012ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d1f1      	bne.n	8012ee0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012efc:	4b38      	ldr	r3, [pc, #224]	; (8012fe0 <pvPortMalloc+0x188>)
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f02:	429a      	cmp	r2, r3
 8012f04:	d050      	beq.n	8012fa8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012f06:	6a3b      	ldr	r3, [r7, #32]
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	2208      	movs	r2, #8
 8012f0c:	4413      	add	r3, r2
 8012f0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f12:	681a      	ldr	r2, [r3, #0]
 8012f14:	6a3b      	ldr	r3, [r7, #32]
 8012f16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f1a:	685a      	ldr	r2, [r3, #4]
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	1ad2      	subs	r2, r2, r3
 8012f20:	2308      	movs	r3, #8
 8012f22:	005b      	lsls	r3, r3, #1
 8012f24:	429a      	cmp	r2, r3
 8012f26:	d91f      	bls.n	8012f68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	4413      	add	r3, r2
 8012f2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012f30:	69bb      	ldr	r3, [r7, #24]
 8012f32:	f003 0307 	and.w	r3, r3, #7
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d00a      	beq.n	8012f50 <pvPortMalloc+0xf8>
	__asm volatile
 8012f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f3e:	f383 8811 	msr	BASEPRI, r3
 8012f42:	f3bf 8f6f 	isb	sy
 8012f46:	f3bf 8f4f 	dsb	sy
 8012f4a:	613b      	str	r3, [r7, #16]
}
 8012f4c:	bf00      	nop
 8012f4e:	e7fe      	b.n	8012f4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f52:	685a      	ldr	r2, [r3, #4]
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	1ad2      	subs	r2, r2, r3
 8012f58:	69bb      	ldr	r3, [r7, #24]
 8012f5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f5e:	687a      	ldr	r2, [r7, #4]
 8012f60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012f62:	69b8      	ldr	r0, [r7, #24]
 8012f64:	f000 f918 	bl	8013198 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012f68:	4b1f      	ldr	r3, [pc, #124]	; (8012fe8 <pvPortMalloc+0x190>)
 8012f6a:	681a      	ldr	r2, [r3, #0]
 8012f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f6e:	685b      	ldr	r3, [r3, #4]
 8012f70:	1ad3      	subs	r3, r2, r3
 8012f72:	4a1d      	ldr	r2, [pc, #116]	; (8012fe8 <pvPortMalloc+0x190>)
 8012f74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012f76:	4b1c      	ldr	r3, [pc, #112]	; (8012fe8 <pvPortMalloc+0x190>)
 8012f78:	681a      	ldr	r2, [r3, #0]
 8012f7a:	4b1d      	ldr	r3, [pc, #116]	; (8012ff0 <pvPortMalloc+0x198>)
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	429a      	cmp	r2, r3
 8012f80:	d203      	bcs.n	8012f8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012f82:	4b19      	ldr	r3, [pc, #100]	; (8012fe8 <pvPortMalloc+0x190>)
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	4a1a      	ldr	r2, [pc, #104]	; (8012ff0 <pvPortMalloc+0x198>)
 8012f88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f8c:	685a      	ldr	r2, [r3, #4]
 8012f8e:	4b15      	ldr	r3, [pc, #84]	; (8012fe4 <pvPortMalloc+0x18c>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	431a      	orrs	r2, r3
 8012f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012f9e:	4b15      	ldr	r3, [pc, #84]	; (8012ff4 <pvPortMalloc+0x19c>)
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	3301      	adds	r3, #1
 8012fa4:	4a13      	ldr	r2, [pc, #76]	; (8012ff4 <pvPortMalloc+0x19c>)
 8012fa6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012fa8:	f7fe fa56 	bl	8011458 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8012fac:	69fb      	ldr	r3, [r7, #28]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	d101      	bne.n	8012fb6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8012fb2:	f7f4 fc01 	bl	80077b8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012fb6:	69fb      	ldr	r3, [r7, #28]
 8012fb8:	f003 0307 	and.w	r3, r3, #7
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d00a      	beq.n	8012fd6 <pvPortMalloc+0x17e>
	__asm volatile
 8012fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fc4:	f383 8811 	msr	BASEPRI, r3
 8012fc8:	f3bf 8f6f 	isb	sy
 8012fcc:	f3bf 8f4f 	dsb	sy
 8012fd0:	60fb      	str	r3, [r7, #12]
}
 8012fd2:	bf00      	nop
 8012fd4:	e7fe      	b.n	8012fd4 <pvPortMalloc+0x17c>
	return pvReturn;
 8012fd6:	69fb      	ldr	r3, [r7, #28]
}
 8012fd8:	4618      	mov	r0, r3
 8012fda:	3728      	adds	r7, #40	; 0x28
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bd80      	pop	{r7, pc}
 8012fe0:	2000a14c 	.word	0x2000a14c
 8012fe4:	2000a160 	.word	0x2000a160
 8012fe8:	2000a150 	.word	0x2000a150
 8012fec:	2000a144 	.word	0x2000a144
 8012ff0:	2000a154 	.word	0x2000a154
 8012ff4:	2000a158 	.word	0x2000a158

08012ff8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b086      	sub	sp, #24
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d04d      	beq.n	80130a6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801300a:	2308      	movs	r3, #8
 801300c:	425b      	negs	r3, r3
 801300e:	697a      	ldr	r2, [r7, #20]
 8013010:	4413      	add	r3, r2
 8013012:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013014:	697b      	ldr	r3, [r7, #20]
 8013016:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013018:	693b      	ldr	r3, [r7, #16]
 801301a:	685a      	ldr	r2, [r3, #4]
 801301c:	4b24      	ldr	r3, [pc, #144]	; (80130b0 <vPortFree+0xb8>)
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	4013      	ands	r3, r2
 8013022:	2b00      	cmp	r3, #0
 8013024:	d10a      	bne.n	801303c <vPortFree+0x44>
	__asm volatile
 8013026:	f04f 0350 	mov.w	r3, #80	; 0x50
 801302a:	f383 8811 	msr	BASEPRI, r3
 801302e:	f3bf 8f6f 	isb	sy
 8013032:	f3bf 8f4f 	dsb	sy
 8013036:	60fb      	str	r3, [r7, #12]
}
 8013038:	bf00      	nop
 801303a:	e7fe      	b.n	801303a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801303c:	693b      	ldr	r3, [r7, #16]
 801303e:	681b      	ldr	r3, [r3, #0]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d00a      	beq.n	801305a <vPortFree+0x62>
	__asm volatile
 8013044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013048:	f383 8811 	msr	BASEPRI, r3
 801304c:	f3bf 8f6f 	isb	sy
 8013050:	f3bf 8f4f 	dsb	sy
 8013054:	60bb      	str	r3, [r7, #8]
}
 8013056:	bf00      	nop
 8013058:	e7fe      	b.n	8013058 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801305a:	693b      	ldr	r3, [r7, #16]
 801305c:	685a      	ldr	r2, [r3, #4]
 801305e:	4b14      	ldr	r3, [pc, #80]	; (80130b0 <vPortFree+0xb8>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	4013      	ands	r3, r2
 8013064:	2b00      	cmp	r3, #0
 8013066:	d01e      	beq.n	80130a6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013068:	693b      	ldr	r3, [r7, #16]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	2b00      	cmp	r3, #0
 801306e:	d11a      	bne.n	80130a6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013070:	693b      	ldr	r3, [r7, #16]
 8013072:	685a      	ldr	r2, [r3, #4]
 8013074:	4b0e      	ldr	r3, [pc, #56]	; (80130b0 <vPortFree+0xb8>)
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	43db      	mvns	r3, r3
 801307a:	401a      	ands	r2, r3
 801307c:	693b      	ldr	r3, [r7, #16]
 801307e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013080:	f7fe f9dc 	bl	801143c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013084:	693b      	ldr	r3, [r7, #16]
 8013086:	685a      	ldr	r2, [r3, #4]
 8013088:	4b0a      	ldr	r3, [pc, #40]	; (80130b4 <vPortFree+0xbc>)
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	4413      	add	r3, r2
 801308e:	4a09      	ldr	r2, [pc, #36]	; (80130b4 <vPortFree+0xbc>)
 8013090:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013092:	6938      	ldr	r0, [r7, #16]
 8013094:	f000 f880 	bl	8013198 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8013098:	4b07      	ldr	r3, [pc, #28]	; (80130b8 <vPortFree+0xc0>)
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	3301      	adds	r3, #1
 801309e:	4a06      	ldr	r2, [pc, #24]	; (80130b8 <vPortFree+0xc0>)
 80130a0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80130a2:	f7fe f9d9 	bl	8011458 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80130a6:	bf00      	nop
 80130a8:	3718      	adds	r7, #24
 80130aa:	46bd      	mov	sp, r7
 80130ac:	bd80      	pop	{r7, pc}
 80130ae:	bf00      	nop
 80130b0:	2000a160 	.word	0x2000a160
 80130b4:	2000a150 	.word	0x2000a150
 80130b8:	2000a15c 	.word	0x2000a15c

080130bc <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 80130bc:	b480      	push	{r7}
 80130be:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 80130c0:	4b03      	ldr	r3, [pc, #12]	; (80130d0 <xPortGetFreeHeapSize+0x14>)
 80130c2:	681b      	ldr	r3, [r3, #0]
}
 80130c4:	4618      	mov	r0, r3
 80130c6:	46bd      	mov	sp, r7
 80130c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130cc:	4770      	bx	lr
 80130ce:	bf00      	nop
 80130d0:	2000a150 	.word	0x2000a150

080130d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80130d4:	b480      	push	{r7}
 80130d6:	b085      	sub	sp, #20
 80130d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80130da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80130de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80130e0:	4b27      	ldr	r3, [pc, #156]	; (8013180 <prvHeapInit+0xac>)
 80130e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	f003 0307 	and.w	r3, r3, #7
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d00c      	beq.n	8013108 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	3307      	adds	r3, #7
 80130f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	f023 0307 	bic.w	r3, r3, #7
 80130fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80130fc:	68ba      	ldr	r2, [r7, #8]
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	1ad3      	subs	r3, r2, r3
 8013102:	4a1f      	ldr	r2, [pc, #124]	; (8013180 <prvHeapInit+0xac>)
 8013104:	4413      	add	r3, r2
 8013106:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801310c:	4a1d      	ldr	r2, [pc, #116]	; (8013184 <prvHeapInit+0xb0>)
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013112:	4b1c      	ldr	r3, [pc, #112]	; (8013184 <prvHeapInit+0xb0>)
 8013114:	2200      	movs	r2, #0
 8013116:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	68ba      	ldr	r2, [r7, #8]
 801311c:	4413      	add	r3, r2
 801311e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013120:	2208      	movs	r2, #8
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	1a9b      	subs	r3, r3, r2
 8013126:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013128:	68fb      	ldr	r3, [r7, #12]
 801312a:	f023 0307 	bic.w	r3, r3, #7
 801312e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	4a15      	ldr	r2, [pc, #84]	; (8013188 <prvHeapInit+0xb4>)
 8013134:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013136:	4b14      	ldr	r3, [pc, #80]	; (8013188 <prvHeapInit+0xb4>)
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	2200      	movs	r2, #0
 801313c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801313e:	4b12      	ldr	r3, [pc, #72]	; (8013188 <prvHeapInit+0xb4>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	2200      	movs	r2, #0
 8013144:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801314a:	683b      	ldr	r3, [r7, #0]
 801314c:	68fa      	ldr	r2, [r7, #12]
 801314e:	1ad2      	subs	r2, r2, r3
 8013150:	683b      	ldr	r3, [r7, #0]
 8013152:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013154:	4b0c      	ldr	r3, [pc, #48]	; (8013188 <prvHeapInit+0xb4>)
 8013156:	681a      	ldr	r2, [r3, #0]
 8013158:	683b      	ldr	r3, [r7, #0]
 801315a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801315c:	683b      	ldr	r3, [r7, #0]
 801315e:	685b      	ldr	r3, [r3, #4]
 8013160:	4a0a      	ldr	r2, [pc, #40]	; (801318c <prvHeapInit+0xb8>)
 8013162:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	685b      	ldr	r3, [r3, #4]
 8013168:	4a09      	ldr	r2, [pc, #36]	; (8013190 <prvHeapInit+0xbc>)
 801316a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801316c:	4b09      	ldr	r3, [pc, #36]	; (8013194 <prvHeapInit+0xc0>)
 801316e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013172:	601a      	str	r2, [r3, #0]
}
 8013174:	bf00      	nop
 8013176:	3714      	adds	r7, #20
 8013178:	46bd      	mov	sp, r7
 801317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801317e:	4770      	bx	lr
 8013180:	20002144 	.word	0x20002144
 8013184:	2000a144 	.word	0x2000a144
 8013188:	2000a14c 	.word	0x2000a14c
 801318c:	2000a154 	.word	0x2000a154
 8013190:	2000a150 	.word	0x2000a150
 8013194:	2000a160 	.word	0x2000a160

08013198 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013198:	b480      	push	{r7}
 801319a:	b085      	sub	sp, #20
 801319c:	af00      	add	r7, sp, #0
 801319e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80131a0:	4b28      	ldr	r3, [pc, #160]	; (8013244 <prvInsertBlockIntoFreeList+0xac>)
 80131a2:	60fb      	str	r3, [r7, #12]
 80131a4:	e002      	b.n	80131ac <prvInsertBlockIntoFreeList+0x14>
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	60fb      	str	r3, [r7, #12]
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	687a      	ldr	r2, [r7, #4]
 80131b2:	429a      	cmp	r2, r3
 80131b4:	d8f7      	bhi.n	80131a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	685b      	ldr	r3, [r3, #4]
 80131be:	68ba      	ldr	r2, [r7, #8]
 80131c0:	4413      	add	r3, r2
 80131c2:	687a      	ldr	r2, [r7, #4]
 80131c4:	429a      	cmp	r2, r3
 80131c6:	d108      	bne.n	80131da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	685a      	ldr	r2, [r3, #4]
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	685b      	ldr	r3, [r3, #4]
 80131d0:	441a      	add	r2, r3
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	685b      	ldr	r3, [r3, #4]
 80131e2:	68ba      	ldr	r2, [r7, #8]
 80131e4:	441a      	add	r2, r3
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	429a      	cmp	r2, r3
 80131ec:	d118      	bne.n	8013220 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	681a      	ldr	r2, [r3, #0]
 80131f2:	4b15      	ldr	r3, [pc, #84]	; (8013248 <prvInsertBlockIntoFreeList+0xb0>)
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	429a      	cmp	r2, r3
 80131f8:	d00d      	beq.n	8013216 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	685a      	ldr	r2, [r3, #4]
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	685b      	ldr	r3, [r3, #4]
 8013204:	441a      	add	r2, r3
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	681b      	ldr	r3, [r3, #0]
 801320e:	681a      	ldr	r2, [r3, #0]
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	601a      	str	r2, [r3, #0]
 8013214:	e008      	b.n	8013228 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013216:	4b0c      	ldr	r3, [pc, #48]	; (8013248 <prvInsertBlockIntoFreeList+0xb0>)
 8013218:	681a      	ldr	r2, [r3, #0]
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	601a      	str	r2, [r3, #0]
 801321e:	e003      	b.n	8013228 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	681a      	ldr	r2, [r3, #0]
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013228:	68fa      	ldr	r2, [r7, #12]
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	429a      	cmp	r2, r3
 801322e:	d002      	beq.n	8013236 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	687a      	ldr	r2, [r7, #4]
 8013234:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013236:	bf00      	nop
 8013238:	3714      	adds	r7, #20
 801323a:	46bd      	mov	sp, r7
 801323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013240:	4770      	bx	lr
 8013242:	bf00      	nop
 8013244:	2000a144 	.word	0x2000a144
 8013248:	2000a14c 	.word	0x2000a14c

0801324c <_ZdaPv>:
 801324c:	f000 b814 	b.w	8013278 <_ZdlPv>

08013250 <__cxa_guard_acquire>:
 8013250:	6803      	ldr	r3, [r0, #0]
 8013252:	07db      	lsls	r3, r3, #31
 8013254:	d406      	bmi.n	8013264 <__cxa_guard_acquire+0x14>
 8013256:	7843      	ldrb	r3, [r0, #1]
 8013258:	b103      	cbz	r3, 801325c <__cxa_guard_acquire+0xc>
 801325a:	deff      	udf	#255	; 0xff
 801325c:	2301      	movs	r3, #1
 801325e:	7043      	strb	r3, [r0, #1]
 8013260:	4618      	mov	r0, r3
 8013262:	4770      	bx	lr
 8013264:	2000      	movs	r0, #0
 8013266:	4770      	bx	lr

08013268 <__cxa_guard_release>:
 8013268:	2301      	movs	r3, #1
 801326a:	6003      	str	r3, [r0, #0]
 801326c:	4770      	bx	lr

0801326e <_Znaj>:
 801326e:	f000 b805 	b.w	801327c <_Znwj>

08013272 <_ZSt25__throw_bad_function_callv>:
 8013272:	b508      	push	{r3, lr}
 8013274:	f000 fa44 	bl	8013700 <abort>

08013278 <_ZdlPv>:
 8013278:	f000 ba86 	b.w	8013788 <free>

0801327c <_Znwj>:
 801327c:	2801      	cmp	r0, #1
 801327e:	bf38      	it	cc
 8013280:	2001      	movcc	r0, #1
 8013282:	b510      	push	{r4, lr}
 8013284:	4604      	mov	r4, r0
 8013286:	4620      	mov	r0, r4
 8013288:	f000 fa76 	bl	8013778 <malloc>
 801328c:	b930      	cbnz	r0, 801329c <_Znwj+0x20>
 801328e:	f000 f807 	bl	80132a0 <_ZSt15get_new_handlerv>
 8013292:	b908      	cbnz	r0, 8013298 <_Znwj+0x1c>
 8013294:	f000 fa34 	bl	8013700 <abort>
 8013298:	4780      	blx	r0
 801329a:	e7f4      	b.n	8013286 <_Znwj+0xa>
 801329c:	bd10      	pop	{r4, pc}
	...

080132a0 <_ZSt15get_new_handlerv>:
 80132a0:	4b02      	ldr	r3, [pc, #8]	; (80132ac <_ZSt15get_new_handlerv+0xc>)
 80132a2:	6818      	ldr	r0, [r3, #0]
 80132a4:	f3bf 8f5b 	dmb	ish
 80132a8:	4770      	bx	lr
 80132aa:	bf00      	nop
 80132ac:	2000a164 	.word	0x2000a164

080132b0 <roundf>:
 80132b0:	ee10 0a10 	vmov	r0, s0
 80132b4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80132b8:	3a7f      	subs	r2, #127	; 0x7f
 80132ba:	2a16      	cmp	r2, #22
 80132bc:	dc15      	bgt.n	80132ea <roundf+0x3a>
 80132be:	2a00      	cmp	r2, #0
 80132c0:	da08      	bge.n	80132d4 <roundf+0x24>
 80132c2:	3201      	adds	r2, #1
 80132c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80132c8:	d101      	bne.n	80132ce <roundf+0x1e>
 80132ca:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80132ce:	ee00 3a10 	vmov	s0, r3
 80132d2:	4770      	bx	lr
 80132d4:	4907      	ldr	r1, [pc, #28]	; (80132f4 <roundf+0x44>)
 80132d6:	4111      	asrs	r1, r2
 80132d8:	4208      	tst	r0, r1
 80132da:	d0fa      	beq.n	80132d2 <roundf+0x22>
 80132dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80132e0:	4113      	asrs	r3, r2
 80132e2:	4403      	add	r3, r0
 80132e4:	ea23 0301 	bic.w	r3, r3, r1
 80132e8:	e7f1      	b.n	80132ce <roundf+0x1e>
 80132ea:	2a80      	cmp	r2, #128	; 0x80
 80132ec:	d1f1      	bne.n	80132d2 <roundf+0x22>
 80132ee:	ee30 0a00 	vadd.f32	s0, s0, s0
 80132f2:	4770      	bx	lr
 80132f4:	007fffff 	.word	0x007fffff

080132f8 <log>:
 80132f8:	b538      	push	{r3, r4, r5, lr}
 80132fa:	ed2d 8b02 	vpush	{d8}
 80132fe:	ec55 4b10 	vmov	r4, r5, d0
 8013302:	f000 f839 	bl	8013378 <__ieee754_log>
 8013306:	4622      	mov	r2, r4
 8013308:	462b      	mov	r3, r5
 801330a:	4620      	mov	r0, r4
 801330c:	4629      	mov	r1, r5
 801330e:	eeb0 8a40 	vmov.f32	s16, s0
 8013312:	eef0 8a60 	vmov.f32	s17, s1
 8013316:	f7ed fbb1 	bl	8000a7c <__aeabi_dcmpun>
 801331a:	b998      	cbnz	r0, 8013344 <log+0x4c>
 801331c:	2200      	movs	r2, #0
 801331e:	2300      	movs	r3, #0
 8013320:	4620      	mov	r0, r4
 8013322:	4629      	mov	r1, r5
 8013324:	f7ed fba0 	bl	8000a68 <__aeabi_dcmpgt>
 8013328:	b960      	cbnz	r0, 8013344 <log+0x4c>
 801332a:	2200      	movs	r2, #0
 801332c:	2300      	movs	r3, #0
 801332e:	4620      	mov	r0, r4
 8013330:	4629      	mov	r1, r5
 8013332:	f7ed fb71 	bl	8000a18 <__aeabi_dcmpeq>
 8013336:	b160      	cbz	r0, 8013352 <log+0x5a>
 8013338:	f000 f9f0 	bl	801371c <__errno>
 801333c:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8013368 <log+0x70>
 8013340:	2322      	movs	r3, #34	; 0x22
 8013342:	6003      	str	r3, [r0, #0]
 8013344:	eeb0 0a48 	vmov.f32	s0, s16
 8013348:	eef0 0a68 	vmov.f32	s1, s17
 801334c:	ecbd 8b02 	vpop	{d8}
 8013350:	bd38      	pop	{r3, r4, r5, pc}
 8013352:	f000 f9e3 	bl	801371c <__errno>
 8013356:	ecbd 8b02 	vpop	{d8}
 801335a:	2321      	movs	r3, #33	; 0x21
 801335c:	6003      	str	r3, [r0, #0]
 801335e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013362:	4803      	ldr	r0, [pc, #12]	; (8013370 <log+0x78>)
 8013364:	f000 b9c4 	b.w	80136f0 <nan>
 8013368:	00000000 	.word	0x00000000
 801336c:	fff00000 	.word	0xfff00000
 8013370:	080140c8 	.word	0x080140c8
 8013374:	00000000 	.word	0x00000000

08013378 <__ieee754_log>:
 8013378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801337c:	ec51 0b10 	vmov	r0, r1, d0
 8013380:	ed2d 8b04 	vpush	{d8-d9}
 8013384:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8013388:	b083      	sub	sp, #12
 801338a:	460d      	mov	r5, r1
 801338c:	da29      	bge.n	80133e2 <__ieee754_log+0x6a>
 801338e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013392:	4303      	orrs	r3, r0
 8013394:	ee10 2a10 	vmov	r2, s0
 8013398:	d10c      	bne.n	80133b4 <__ieee754_log+0x3c>
 801339a:	49cf      	ldr	r1, [pc, #828]	; (80136d8 <__ieee754_log+0x360>)
 801339c:	2200      	movs	r2, #0
 801339e:	2300      	movs	r3, #0
 80133a0:	2000      	movs	r0, #0
 80133a2:	f7ed f9fb 	bl	800079c <__aeabi_ddiv>
 80133a6:	ec41 0b10 	vmov	d0, r0, r1
 80133aa:	b003      	add	sp, #12
 80133ac:	ecbd 8b04 	vpop	{d8-d9}
 80133b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133b4:	2900      	cmp	r1, #0
 80133b6:	da05      	bge.n	80133c4 <__ieee754_log+0x4c>
 80133b8:	460b      	mov	r3, r1
 80133ba:	f7ec ff0d 	bl	80001d8 <__aeabi_dsub>
 80133be:	2200      	movs	r2, #0
 80133c0:	2300      	movs	r3, #0
 80133c2:	e7ee      	b.n	80133a2 <__ieee754_log+0x2a>
 80133c4:	4bc5      	ldr	r3, [pc, #788]	; (80136dc <__ieee754_log+0x364>)
 80133c6:	2200      	movs	r2, #0
 80133c8:	f7ed f8be 	bl	8000548 <__aeabi_dmul>
 80133cc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80133d0:	460d      	mov	r5, r1
 80133d2:	4ac3      	ldr	r2, [pc, #780]	; (80136e0 <__ieee754_log+0x368>)
 80133d4:	4295      	cmp	r5, r2
 80133d6:	dd06      	ble.n	80133e6 <__ieee754_log+0x6e>
 80133d8:	4602      	mov	r2, r0
 80133da:	460b      	mov	r3, r1
 80133dc:	f7ec fefe 	bl	80001dc <__adddf3>
 80133e0:	e7e1      	b.n	80133a6 <__ieee754_log+0x2e>
 80133e2:	2300      	movs	r3, #0
 80133e4:	e7f5      	b.n	80133d2 <__ieee754_log+0x5a>
 80133e6:	152c      	asrs	r4, r5, #20
 80133e8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80133ec:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80133f0:	441c      	add	r4, r3
 80133f2:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80133f6:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80133fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80133fe:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8013402:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8013406:	ea42 0105 	orr.w	r1, r2, r5
 801340a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 801340e:	2200      	movs	r2, #0
 8013410:	4bb4      	ldr	r3, [pc, #720]	; (80136e4 <__ieee754_log+0x36c>)
 8013412:	f7ec fee1 	bl	80001d8 <__aeabi_dsub>
 8013416:	1cab      	adds	r3, r5, #2
 8013418:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801341c:	2b02      	cmp	r3, #2
 801341e:	4682      	mov	sl, r0
 8013420:	468b      	mov	fp, r1
 8013422:	f04f 0200 	mov.w	r2, #0
 8013426:	dc53      	bgt.n	80134d0 <__ieee754_log+0x158>
 8013428:	2300      	movs	r3, #0
 801342a:	f7ed faf5 	bl	8000a18 <__aeabi_dcmpeq>
 801342e:	b1d0      	cbz	r0, 8013466 <__ieee754_log+0xee>
 8013430:	2c00      	cmp	r4, #0
 8013432:	f000 8122 	beq.w	801367a <__ieee754_log+0x302>
 8013436:	4620      	mov	r0, r4
 8013438:	f7ed f81c 	bl	8000474 <__aeabi_i2d>
 801343c:	a390      	add	r3, pc, #576	; (adr r3, 8013680 <__ieee754_log+0x308>)
 801343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013442:	4606      	mov	r6, r0
 8013444:	460f      	mov	r7, r1
 8013446:	f7ed f87f 	bl	8000548 <__aeabi_dmul>
 801344a:	a38f      	add	r3, pc, #572	; (adr r3, 8013688 <__ieee754_log+0x310>)
 801344c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013450:	4604      	mov	r4, r0
 8013452:	460d      	mov	r5, r1
 8013454:	4630      	mov	r0, r6
 8013456:	4639      	mov	r1, r7
 8013458:	f7ed f876 	bl	8000548 <__aeabi_dmul>
 801345c:	4602      	mov	r2, r0
 801345e:	460b      	mov	r3, r1
 8013460:	4620      	mov	r0, r4
 8013462:	4629      	mov	r1, r5
 8013464:	e7ba      	b.n	80133dc <__ieee754_log+0x64>
 8013466:	a38a      	add	r3, pc, #552	; (adr r3, 8013690 <__ieee754_log+0x318>)
 8013468:	e9d3 2300 	ldrd	r2, r3, [r3]
 801346c:	4650      	mov	r0, sl
 801346e:	4659      	mov	r1, fp
 8013470:	f7ed f86a 	bl	8000548 <__aeabi_dmul>
 8013474:	4602      	mov	r2, r0
 8013476:	460b      	mov	r3, r1
 8013478:	2000      	movs	r0, #0
 801347a:	499b      	ldr	r1, [pc, #620]	; (80136e8 <__ieee754_log+0x370>)
 801347c:	f7ec feac 	bl	80001d8 <__aeabi_dsub>
 8013480:	4652      	mov	r2, sl
 8013482:	4606      	mov	r6, r0
 8013484:	460f      	mov	r7, r1
 8013486:	465b      	mov	r3, fp
 8013488:	4650      	mov	r0, sl
 801348a:	4659      	mov	r1, fp
 801348c:	f7ed f85c 	bl	8000548 <__aeabi_dmul>
 8013490:	4602      	mov	r2, r0
 8013492:	460b      	mov	r3, r1
 8013494:	4630      	mov	r0, r6
 8013496:	4639      	mov	r1, r7
 8013498:	f7ed f856 	bl	8000548 <__aeabi_dmul>
 801349c:	4606      	mov	r6, r0
 801349e:	460f      	mov	r7, r1
 80134a0:	b914      	cbnz	r4, 80134a8 <__ieee754_log+0x130>
 80134a2:	4632      	mov	r2, r6
 80134a4:	463b      	mov	r3, r7
 80134a6:	e0a2      	b.n	80135ee <__ieee754_log+0x276>
 80134a8:	4620      	mov	r0, r4
 80134aa:	f7ec ffe3 	bl	8000474 <__aeabi_i2d>
 80134ae:	a374      	add	r3, pc, #464	; (adr r3, 8013680 <__ieee754_log+0x308>)
 80134b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134b4:	4680      	mov	r8, r0
 80134b6:	4689      	mov	r9, r1
 80134b8:	f7ed f846 	bl	8000548 <__aeabi_dmul>
 80134bc:	a372      	add	r3, pc, #456	; (adr r3, 8013688 <__ieee754_log+0x310>)
 80134be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134c2:	4604      	mov	r4, r0
 80134c4:	460d      	mov	r5, r1
 80134c6:	4640      	mov	r0, r8
 80134c8:	4649      	mov	r1, r9
 80134ca:	f7ed f83d 	bl	8000548 <__aeabi_dmul>
 80134ce:	e0a7      	b.n	8013620 <__ieee754_log+0x2a8>
 80134d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80134d4:	f7ec fe82 	bl	80001dc <__adddf3>
 80134d8:	4602      	mov	r2, r0
 80134da:	460b      	mov	r3, r1
 80134dc:	4650      	mov	r0, sl
 80134de:	4659      	mov	r1, fp
 80134e0:	f7ed f95c 	bl	800079c <__aeabi_ddiv>
 80134e4:	ec41 0b18 	vmov	d8, r0, r1
 80134e8:	4620      	mov	r0, r4
 80134ea:	f7ec ffc3 	bl	8000474 <__aeabi_i2d>
 80134ee:	ec53 2b18 	vmov	r2, r3, d8
 80134f2:	ec41 0b19 	vmov	d9, r0, r1
 80134f6:	ec51 0b18 	vmov	r0, r1, d8
 80134fa:	f7ed f825 	bl	8000548 <__aeabi_dmul>
 80134fe:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8013502:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8013506:	9301      	str	r3, [sp, #4]
 8013508:	4602      	mov	r2, r0
 801350a:	460b      	mov	r3, r1
 801350c:	4680      	mov	r8, r0
 801350e:	4689      	mov	r9, r1
 8013510:	f7ed f81a 	bl	8000548 <__aeabi_dmul>
 8013514:	a360      	add	r3, pc, #384	; (adr r3, 8013698 <__ieee754_log+0x320>)
 8013516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801351a:	4606      	mov	r6, r0
 801351c:	460f      	mov	r7, r1
 801351e:	f7ed f813 	bl	8000548 <__aeabi_dmul>
 8013522:	a35f      	add	r3, pc, #380	; (adr r3, 80136a0 <__ieee754_log+0x328>)
 8013524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013528:	f7ec fe58 	bl	80001dc <__adddf3>
 801352c:	4632      	mov	r2, r6
 801352e:	463b      	mov	r3, r7
 8013530:	f7ed f80a 	bl	8000548 <__aeabi_dmul>
 8013534:	a35c      	add	r3, pc, #368	; (adr r3, 80136a8 <__ieee754_log+0x330>)
 8013536:	e9d3 2300 	ldrd	r2, r3, [r3]
 801353a:	f7ec fe4f 	bl	80001dc <__adddf3>
 801353e:	4632      	mov	r2, r6
 8013540:	463b      	mov	r3, r7
 8013542:	f7ed f801 	bl	8000548 <__aeabi_dmul>
 8013546:	a35a      	add	r3, pc, #360	; (adr r3, 80136b0 <__ieee754_log+0x338>)
 8013548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801354c:	f7ec fe46 	bl	80001dc <__adddf3>
 8013550:	4642      	mov	r2, r8
 8013552:	464b      	mov	r3, r9
 8013554:	f7ec fff8 	bl	8000548 <__aeabi_dmul>
 8013558:	a357      	add	r3, pc, #348	; (adr r3, 80136b8 <__ieee754_log+0x340>)
 801355a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801355e:	4680      	mov	r8, r0
 8013560:	4689      	mov	r9, r1
 8013562:	4630      	mov	r0, r6
 8013564:	4639      	mov	r1, r7
 8013566:	f7ec ffef 	bl	8000548 <__aeabi_dmul>
 801356a:	a355      	add	r3, pc, #340	; (adr r3, 80136c0 <__ieee754_log+0x348>)
 801356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013570:	f7ec fe34 	bl	80001dc <__adddf3>
 8013574:	4632      	mov	r2, r6
 8013576:	463b      	mov	r3, r7
 8013578:	f7ec ffe6 	bl	8000548 <__aeabi_dmul>
 801357c:	a352      	add	r3, pc, #328	; (adr r3, 80136c8 <__ieee754_log+0x350>)
 801357e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013582:	f7ec fe2b 	bl	80001dc <__adddf3>
 8013586:	4632      	mov	r2, r6
 8013588:	463b      	mov	r3, r7
 801358a:	f7ec ffdd 	bl	8000548 <__aeabi_dmul>
 801358e:	460b      	mov	r3, r1
 8013590:	4602      	mov	r2, r0
 8013592:	4649      	mov	r1, r9
 8013594:	4640      	mov	r0, r8
 8013596:	f7ec fe21 	bl	80001dc <__adddf3>
 801359a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 801359e:	9b01      	ldr	r3, [sp, #4]
 80135a0:	3551      	adds	r5, #81	; 0x51
 80135a2:	431d      	orrs	r5, r3
 80135a4:	2d00      	cmp	r5, #0
 80135a6:	4680      	mov	r8, r0
 80135a8:	4689      	mov	r9, r1
 80135aa:	dd48      	ble.n	801363e <__ieee754_log+0x2c6>
 80135ac:	4b4e      	ldr	r3, [pc, #312]	; (80136e8 <__ieee754_log+0x370>)
 80135ae:	2200      	movs	r2, #0
 80135b0:	4650      	mov	r0, sl
 80135b2:	4659      	mov	r1, fp
 80135b4:	f7ec ffc8 	bl	8000548 <__aeabi_dmul>
 80135b8:	4652      	mov	r2, sl
 80135ba:	465b      	mov	r3, fp
 80135bc:	f7ec ffc4 	bl	8000548 <__aeabi_dmul>
 80135c0:	4602      	mov	r2, r0
 80135c2:	460b      	mov	r3, r1
 80135c4:	4606      	mov	r6, r0
 80135c6:	460f      	mov	r7, r1
 80135c8:	4640      	mov	r0, r8
 80135ca:	4649      	mov	r1, r9
 80135cc:	f7ec fe06 	bl	80001dc <__adddf3>
 80135d0:	ec53 2b18 	vmov	r2, r3, d8
 80135d4:	f7ec ffb8 	bl	8000548 <__aeabi_dmul>
 80135d8:	4680      	mov	r8, r0
 80135da:	4689      	mov	r9, r1
 80135dc:	b964      	cbnz	r4, 80135f8 <__ieee754_log+0x280>
 80135de:	4602      	mov	r2, r0
 80135e0:	460b      	mov	r3, r1
 80135e2:	4630      	mov	r0, r6
 80135e4:	4639      	mov	r1, r7
 80135e6:	f7ec fdf7 	bl	80001d8 <__aeabi_dsub>
 80135ea:	4602      	mov	r2, r0
 80135ec:	460b      	mov	r3, r1
 80135ee:	4650      	mov	r0, sl
 80135f0:	4659      	mov	r1, fp
 80135f2:	f7ec fdf1 	bl	80001d8 <__aeabi_dsub>
 80135f6:	e6d6      	b.n	80133a6 <__ieee754_log+0x2e>
 80135f8:	a321      	add	r3, pc, #132	; (adr r3, 8013680 <__ieee754_log+0x308>)
 80135fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135fe:	ec51 0b19 	vmov	r0, r1, d9
 8013602:	f7ec ffa1 	bl	8000548 <__aeabi_dmul>
 8013606:	a320      	add	r3, pc, #128	; (adr r3, 8013688 <__ieee754_log+0x310>)
 8013608:	e9d3 2300 	ldrd	r2, r3, [r3]
 801360c:	4604      	mov	r4, r0
 801360e:	460d      	mov	r5, r1
 8013610:	ec51 0b19 	vmov	r0, r1, d9
 8013614:	f7ec ff98 	bl	8000548 <__aeabi_dmul>
 8013618:	4642      	mov	r2, r8
 801361a:	464b      	mov	r3, r9
 801361c:	f7ec fdde 	bl	80001dc <__adddf3>
 8013620:	4602      	mov	r2, r0
 8013622:	460b      	mov	r3, r1
 8013624:	4630      	mov	r0, r6
 8013626:	4639      	mov	r1, r7
 8013628:	f7ec fdd6 	bl	80001d8 <__aeabi_dsub>
 801362c:	4652      	mov	r2, sl
 801362e:	465b      	mov	r3, fp
 8013630:	f7ec fdd2 	bl	80001d8 <__aeabi_dsub>
 8013634:	4602      	mov	r2, r0
 8013636:	460b      	mov	r3, r1
 8013638:	4620      	mov	r0, r4
 801363a:	4629      	mov	r1, r5
 801363c:	e7d9      	b.n	80135f2 <__ieee754_log+0x27a>
 801363e:	4602      	mov	r2, r0
 8013640:	460b      	mov	r3, r1
 8013642:	4650      	mov	r0, sl
 8013644:	4659      	mov	r1, fp
 8013646:	f7ec fdc7 	bl	80001d8 <__aeabi_dsub>
 801364a:	ec53 2b18 	vmov	r2, r3, d8
 801364e:	f7ec ff7b 	bl	8000548 <__aeabi_dmul>
 8013652:	4606      	mov	r6, r0
 8013654:	460f      	mov	r7, r1
 8013656:	2c00      	cmp	r4, #0
 8013658:	f43f af23 	beq.w	80134a2 <__ieee754_log+0x12a>
 801365c:	a308      	add	r3, pc, #32	; (adr r3, 8013680 <__ieee754_log+0x308>)
 801365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013662:	ec51 0b19 	vmov	r0, r1, d9
 8013666:	f7ec ff6f 	bl	8000548 <__aeabi_dmul>
 801366a:	a307      	add	r3, pc, #28	; (adr r3, 8013688 <__ieee754_log+0x310>)
 801366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013670:	4604      	mov	r4, r0
 8013672:	460d      	mov	r5, r1
 8013674:	ec51 0b19 	vmov	r0, r1, d9
 8013678:	e727      	b.n	80134ca <__ieee754_log+0x152>
 801367a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80136d0 <__ieee754_log+0x358>
 801367e:	e694      	b.n	80133aa <__ieee754_log+0x32>
 8013680:	fee00000 	.word	0xfee00000
 8013684:	3fe62e42 	.word	0x3fe62e42
 8013688:	35793c76 	.word	0x35793c76
 801368c:	3dea39ef 	.word	0x3dea39ef
 8013690:	55555555 	.word	0x55555555
 8013694:	3fd55555 	.word	0x3fd55555
 8013698:	df3e5244 	.word	0xdf3e5244
 801369c:	3fc2f112 	.word	0x3fc2f112
 80136a0:	96cb03de 	.word	0x96cb03de
 80136a4:	3fc74664 	.word	0x3fc74664
 80136a8:	94229359 	.word	0x94229359
 80136ac:	3fd24924 	.word	0x3fd24924
 80136b0:	55555593 	.word	0x55555593
 80136b4:	3fe55555 	.word	0x3fe55555
 80136b8:	d078c69f 	.word	0xd078c69f
 80136bc:	3fc39a09 	.word	0x3fc39a09
 80136c0:	1d8e78af 	.word	0x1d8e78af
 80136c4:	3fcc71c5 	.word	0x3fcc71c5
 80136c8:	9997fa04 	.word	0x9997fa04
 80136cc:	3fd99999 	.word	0x3fd99999
	...
 80136d8:	c3500000 	.word	0xc3500000
 80136dc:	43500000 	.word	0x43500000
 80136e0:	7fefffff 	.word	0x7fefffff
 80136e4:	3ff00000 	.word	0x3ff00000
 80136e8:	3fe00000 	.word	0x3fe00000
 80136ec:	00000000 	.word	0x00000000

080136f0 <nan>:
 80136f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80136f8 <nan+0x8>
 80136f4:	4770      	bx	lr
 80136f6:	bf00      	nop
 80136f8:	00000000 	.word	0x00000000
 80136fc:	7ff80000 	.word	0x7ff80000

08013700 <abort>:
 8013700:	b508      	push	{r3, lr}
 8013702:	2006      	movs	r0, #6
 8013704:	f000 f9e0 	bl	8013ac8 <raise>
 8013708:	2001      	movs	r0, #1
 801370a:	f7f4 fca1 	bl	8008050 <_exit>

0801370e <atexit>:
 801370e:	2300      	movs	r3, #0
 8013710:	4601      	mov	r1, r0
 8013712:	461a      	mov	r2, r3
 8013714:	4618      	mov	r0, r3
 8013716:	f000 b9f3 	b.w	8013b00 <__register_exitproc>
	...

0801371c <__errno>:
 801371c:	4b01      	ldr	r3, [pc, #4]	; (8013724 <__errno+0x8>)
 801371e:	6818      	ldr	r0, [r3, #0]
 8013720:	4770      	bx	lr
 8013722:	bf00      	nop
 8013724:	20000020 	.word	0x20000020

08013728 <__libc_init_array>:
 8013728:	b570      	push	{r4, r5, r6, lr}
 801372a:	4d0d      	ldr	r5, [pc, #52]	; (8013760 <__libc_init_array+0x38>)
 801372c:	4c0d      	ldr	r4, [pc, #52]	; (8013764 <__libc_init_array+0x3c>)
 801372e:	1b64      	subs	r4, r4, r5
 8013730:	10a4      	asrs	r4, r4, #2
 8013732:	2600      	movs	r6, #0
 8013734:	42a6      	cmp	r6, r4
 8013736:	d109      	bne.n	801374c <__libc_init_array+0x24>
 8013738:	4d0b      	ldr	r5, [pc, #44]	; (8013768 <__libc_init_array+0x40>)
 801373a:	4c0c      	ldr	r4, [pc, #48]	; (801376c <__libc_init_array+0x44>)
 801373c:	f000 fa4e 	bl	8013bdc <_init>
 8013740:	1b64      	subs	r4, r4, r5
 8013742:	10a4      	asrs	r4, r4, #2
 8013744:	2600      	movs	r6, #0
 8013746:	42a6      	cmp	r6, r4
 8013748:	d105      	bne.n	8013756 <__libc_init_array+0x2e>
 801374a:	bd70      	pop	{r4, r5, r6, pc}
 801374c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013750:	4798      	blx	r3
 8013752:	3601      	adds	r6, #1
 8013754:	e7ee      	b.n	8013734 <__libc_init_array+0xc>
 8013756:	f855 3b04 	ldr.w	r3, [r5], #4
 801375a:	4798      	blx	r3
 801375c:	3601      	adds	r6, #1
 801375e:	e7f2      	b.n	8013746 <__libc_init_array+0x1e>
 8013760:	08014134 	.word	0x08014134
 8013764:	08014134 	.word	0x08014134
 8013768:	08014134 	.word	0x08014134
 801376c:	08014154 	.word	0x08014154

08013770 <__retarget_lock_acquire_recursive>:
 8013770:	4770      	bx	lr

08013772 <__retarget_lock_release>:
 8013772:	4770      	bx	lr

08013774 <__retarget_lock_release_recursive>:
 8013774:	4770      	bx	lr
	...

08013778 <malloc>:
 8013778:	4b02      	ldr	r3, [pc, #8]	; (8013784 <malloc+0xc>)
 801377a:	4601      	mov	r1, r0
 801377c:	6818      	ldr	r0, [r3, #0]
 801377e:	f000 b88d 	b.w	801389c <_malloc_r>
 8013782:	bf00      	nop
 8013784:	20000020 	.word	0x20000020

08013788 <free>:
 8013788:	4b02      	ldr	r3, [pc, #8]	; (8013794 <free+0xc>)
 801378a:	4601      	mov	r1, r0
 801378c:	6818      	ldr	r0, [r3, #0]
 801378e:	f000 b819 	b.w	80137c4 <_free_r>
 8013792:	bf00      	nop
 8013794:	20000020 	.word	0x20000020

08013798 <memcpy>:
 8013798:	440a      	add	r2, r1
 801379a:	4291      	cmp	r1, r2
 801379c:	f100 33ff 	add.w	r3, r0, #4294967295
 80137a0:	d100      	bne.n	80137a4 <memcpy+0xc>
 80137a2:	4770      	bx	lr
 80137a4:	b510      	push	{r4, lr}
 80137a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80137aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80137ae:	4291      	cmp	r1, r2
 80137b0:	d1f9      	bne.n	80137a6 <memcpy+0xe>
 80137b2:	bd10      	pop	{r4, pc}

080137b4 <memset>:
 80137b4:	4402      	add	r2, r0
 80137b6:	4603      	mov	r3, r0
 80137b8:	4293      	cmp	r3, r2
 80137ba:	d100      	bne.n	80137be <memset+0xa>
 80137bc:	4770      	bx	lr
 80137be:	f803 1b01 	strb.w	r1, [r3], #1
 80137c2:	e7f9      	b.n	80137b8 <memset+0x4>

080137c4 <_free_r>:
 80137c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80137c6:	2900      	cmp	r1, #0
 80137c8:	d044      	beq.n	8013854 <_free_r+0x90>
 80137ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80137ce:	9001      	str	r0, [sp, #4]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	f1a1 0404 	sub.w	r4, r1, #4
 80137d6:	bfb8      	it	lt
 80137d8:	18e4      	addlt	r4, r4, r3
 80137da:	f000 f9f3 	bl	8013bc4 <__malloc_lock>
 80137de:	4a1e      	ldr	r2, [pc, #120]	; (8013858 <_free_r+0x94>)
 80137e0:	9801      	ldr	r0, [sp, #4]
 80137e2:	6813      	ldr	r3, [r2, #0]
 80137e4:	b933      	cbnz	r3, 80137f4 <_free_r+0x30>
 80137e6:	6063      	str	r3, [r4, #4]
 80137e8:	6014      	str	r4, [r2, #0]
 80137ea:	b003      	add	sp, #12
 80137ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80137f0:	f000 b9ee 	b.w	8013bd0 <__malloc_unlock>
 80137f4:	42a3      	cmp	r3, r4
 80137f6:	d908      	bls.n	801380a <_free_r+0x46>
 80137f8:	6825      	ldr	r5, [r4, #0]
 80137fa:	1961      	adds	r1, r4, r5
 80137fc:	428b      	cmp	r3, r1
 80137fe:	bf01      	itttt	eq
 8013800:	6819      	ldreq	r1, [r3, #0]
 8013802:	685b      	ldreq	r3, [r3, #4]
 8013804:	1949      	addeq	r1, r1, r5
 8013806:	6021      	streq	r1, [r4, #0]
 8013808:	e7ed      	b.n	80137e6 <_free_r+0x22>
 801380a:	461a      	mov	r2, r3
 801380c:	685b      	ldr	r3, [r3, #4]
 801380e:	b10b      	cbz	r3, 8013814 <_free_r+0x50>
 8013810:	42a3      	cmp	r3, r4
 8013812:	d9fa      	bls.n	801380a <_free_r+0x46>
 8013814:	6811      	ldr	r1, [r2, #0]
 8013816:	1855      	adds	r5, r2, r1
 8013818:	42a5      	cmp	r5, r4
 801381a:	d10b      	bne.n	8013834 <_free_r+0x70>
 801381c:	6824      	ldr	r4, [r4, #0]
 801381e:	4421      	add	r1, r4
 8013820:	1854      	adds	r4, r2, r1
 8013822:	42a3      	cmp	r3, r4
 8013824:	6011      	str	r1, [r2, #0]
 8013826:	d1e0      	bne.n	80137ea <_free_r+0x26>
 8013828:	681c      	ldr	r4, [r3, #0]
 801382a:	685b      	ldr	r3, [r3, #4]
 801382c:	6053      	str	r3, [r2, #4]
 801382e:	4421      	add	r1, r4
 8013830:	6011      	str	r1, [r2, #0]
 8013832:	e7da      	b.n	80137ea <_free_r+0x26>
 8013834:	d902      	bls.n	801383c <_free_r+0x78>
 8013836:	230c      	movs	r3, #12
 8013838:	6003      	str	r3, [r0, #0]
 801383a:	e7d6      	b.n	80137ea <_free_r+0x26>
 801383c:	6825      	ldr	r5, [r4, #0]
 801383e:	1961      	adds	r1, r4, r5
 8013840:	428b      	cmp	r3, r1
 8013842:	bf04      	itt	eq
 8013844:	6819      	ldreq	r1, [r3, #0]
 8013846:	685b      	ldreq	r3, [r3, #4]
 8013848:	6063      	str	r3, [r4, #4]
 801384a:	bf04      	itt	eq
 801384c:	1949      	addeq	r1, r1, r5
 801384e:	6021      	streq	r1, [r4, #0]
 8013850:	6054      	str	r4, [r2, #4]
 8013852:	e7ca      	b.n	80137ea <_free_r+0x26>
 8013854:	b003      	add	sp, #12
 8013856:	bd30      	pop	{r4, r5, pc}
 8013858:	2000a16c 	.word	0x2000a16c

0801385c <sbrk_aligned>:
 801385c:	b570      	push	{r4, r5, r6, lr}
 801385e:	4e0e      	ldr	r6, [pc, #56]	; (8013898 <sbrk_aligned+0x3c>)
 8013860:	460c      	mov	r4, r1
 8013862:	6831      	ldr	r1, [r6, #0]
 8013864:	4605      	mov	r5, r0
 8013866:	b911      	cbnz	r1, 801386e <sbrk_aligned+0x12>
 8013868:	f000 f8f6 	bl	8013a58 <_sbrk_r>
 801386c:	6030      	str	r0, [r6, #0]
 801386e:	4621      	mov	r1, r4
 8013870:	4628      	mov	r0, r5
 8013872:	f000 f8f1 	bl	8013a58 <_sbrk_r>
 8013876:	1c43      	adds	r3, r0, #1
 8013878:	d00a      	beq.n	8013890 <sbrk_aligned+0x34>
 801387a:	1cc4      	adds	r4, r0, #3
 801387c:	f024 0403 	bic.w	r4, r4, #3
 8013880:	42a0      	cmp	r0, r4
 8013882:	d007      	beq.n	8013894 <sbrk_aligned+0x38>
 8013884:	1a21      	subs	r1, r4, r0
 8013886:	4628      	mov	r0, r5
 8013888:	f000 f8e6 	bl	8013a58 <_sbrk_r>
 801388c:	3001      	adds	r0, #1
 801388e:	d101      	bne.n	8013894 <sbrk_aligned+0x38>
 8013890:	f04f 34ff 	mov.w	r4, #4294967295
 8013894:	4620      	mov	r0, r4
 8013896:	bd70      	pop	{r4, r5, r6, pc}
 8013898:	2000a170 	.word	0x2000a170

0801389c <_malloc_r>:
 801389c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138a0:	1ccd      	adds	r5, r1, #3
 80138a2:	f025 0503 	bic.w	r5, r5, #3
 80138a6:	3508      	adds	r5, #8
 80138a8:	2d0c      	cmp	r5, #12
 80138aa:	bf38      	it	cc
 80138ac:	250c      	movcc	r5, #12
 80138ae:	2d00      	cmp	r5, #0
 80138b0:	4607      	mov	r7, r0
 80138b2:	db01      	blt.n	80138b8 <_malloc_r+0x1c>
 80138b4:	42a9      	cmp	r1, r5
 80138b6:	d905      	bls.n	80138c4 <_malloc_r+0x28>
 80138b8:	230c      	movs	r3, #12
 80138ba:	603b      	str	r3, [r7, #0]
 80138bc:	2600      	movs	r6, #0
 80138be:	4630      	mov	r0, r6
 80138c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138c4:	4e2e      	ldr	r6, [pc, #184]	; (8013980 <_malloc_r+0xe4>)
 80138c6:	f000 f97d 	bl	8013bc4 <__malloc_lock>
 80138ca:	6833      	ldr	r3, [r6, #0]
 80138cc:	461c      	mov	r4, r3
 80138ce:	bb34      	cbnz	r4, 801391e <_malloc_r+0x82>
 80138d0:	4629      	mov	r1, r5
 80138d2:	4638      	mov	r0, r7
 80138d4:	f7ff ffc2 	bl	801385c <sbrk_aligned>
 80138d8:	1c43      	adds	r3, r0, #1
 80138da:	4604      	mov	r4, r0
 80138dc:	d14d      	bne.n	801397a <_malloc_r+0xde>
 80138de:	6834      	ldr	r4, [r6, #0]
 80138e0:	4626      	mov	r6, r4
 80138e2:	2e00      	cmp	r6, #0
 80138e4:	d140      	bne.n	8013968 <_malloc_r+0xcc>
 80138e6:	6823      	ldr	r3, [r4, #0]
 80138e8:	4631      	mov	r1, r6
 80138ea:	4638      	mov	r0, r7
 80138ec:	eb04 0803 	add.w	r8, r4, r3
 80138f0:	f000 f8b2 	bl	8013a58 <_sbrk_r>
 80138f4:	4580      	cmp	r8, r0
 80138f6:	d13a      	bne.n	801396e <_malloc_r+0xd2>
 80138f8:	6821      	ldr	r1, [r4, #0]
 80138fa:	3503      	adds	r5, #3
 80138fc:	1a6d      	subs	r5, r5, r1
 80138fe:	f025 0503 	bic.w	r5, r5, #3
 8013902:	3508      	adds	r5, #8
 8013904:	2d0c      	cmp	r5, #12
 8013906:	bf38      	it	cc
 8013908:	250c      	movcc	r5, #12
 801390a:	4629      	mov	r1, r5
 801390c:	4638      	mov	r0, r7
 801390e:	f7ff ffa5 	bl	801385c <sbrk_aligned>
 8013912:	3001      	adds	r0, #1
 8013914:	d02b      	beq.n	801396e <_malloc_r+0xd2>
 8013916:	6823      	ldr	r3, [r4, #0]
 8013918:	442b      	add	r3, r5
 801391a:	6023      	str	r3, [r4, #0]
 801391c:	e00e      	b.n	801393c <_malloc_r+0xa0>
 801391e:	6822      	ldr	r2, [r4, #0]
 8013920:	1b52      	subs	r2, r2, r5
 8013922:	d41e      	bmi.n	8013962 <_malloc_r+0xc6>
 8013924:	2a0b      	cmp	r2, #11
 8013926:	d916      	bls.n	8013956 <_malloc_r+0xba>
 8013928:	1961      	adds	r1, r4, r5
 801392a:	42a3      	cmp	r3, r4
 801392c:	6025      	str	r5, [r4, #0]
 801392e:	bf18      	it	ne
 8013930:	6059      	strne	r1, [r3, #4]
 8013932:	6863      	ldr	r3, [r4, #4]
 8013934:	bf08      	it	eq
 8013936:	6031      	streq	r1, [r6, #0]
 8013938:	5162      	str	r2, [r4, r5]
 801393a:	604b      	str	r3, [r1, #4]
 801393c:	4638      	mov	r0, r7
 801393e:	f104 060b 	add.w	r6, r4, #11
 8013942:	f000 f945 	bl	8013bd0 <__malloc_unlock>
 8013946:	f026 0607 	bic.w	r6, r6, #7
 801394a:	1d23      	adds	r3, r4, #4
 801394c:	1af2      	subs	r2, r6, r3
 801394e:	d0b6      	beq.n	80138be <_malloc_r+0x22>
 8013950:	1b9b      	subs	r3, r3, r6
 8013952:	50a3      	str	r3, [r4, r2]
 8013954:	e7b3      	b.n	80138be <_malloc_r+0x22>
 8013956:	6862      	ldr	r2, [r4, #4]
 8013958:	42a3      	cmp	r3, r4
 801395a:	bf0c      	ite	eq
 801395c:	6032      	streq	r2, [r6, #0]
 801395e:	605a      	strne	r2, [r3, #4]
 8013960:	e7ec      	b.n	801393c <_malloc_r+0xa0>
 8013962:	4623      	mov	r3, r4
 8013964:	6864      	ldr	r4, [r4, #4]
 8013966:	e7b2      	b.n	80138ce <_malloc_r+0x32>
 8013968:	4634      	mov	r4, r6
 801396a:	6876      	ldr	r6, [r6, #4]
 801396c:	e7b9      	b.n	80138e2 <_malloc_r+0x46>
 801396e:	230c      	movs	r3, #12
 8013970:	603b      	str	r3, [r7, #0]
 8013972:	4638      	mov	r0, r7
 8013974:	f000 f92c 	bl	8013bd0 <__malloc_unlock>
 8013978:	e7a1      	b.n	80138be <_malloc_r+0x22>
 801397a:	6025      	str	r5, [r4, #0]
 801397c:	e7de      	b.n	801393c <_malloc_r+0xa0>
 801397e:	bf00      	nop
 8013980:	2000a16c 	.word	0x2000a16c

08013984 <cleanup_glue>:
 8013984:	b538      	push	{r3, r4, r5, lr}
 8013986:	460c      	mov	r4, r1
 8013988:	6809      	ldr	r1, [r1, #0]
 801398a:	4605      	mov	r5, r0
 801398c:	b109      	cbz	r1, 8013992 <cleanup_glue+0xe>
 801398e:	f7ff fff9 	bl	8013984 <cleanup_glue>
 8013992:	4621      	mov	r1, r4
 8013994:	4628      	mov	r0, r5
 8013996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801399a:	f7ff bf13 	b.w	80137c4 <_free_r>
	...

080139a0 <_reclaim_reent>:
 80139a0:	4b2c      	ldr	r3, [pc, #176]	; (8013a54 <_reclaim_reent+0xb4>)
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	4283      	cmp	r3, r0
 80139a6:	b570      	push	{r4, r5, r6, lr}
 80139a8:	4604      	mov	r4, r0
 80139aa:	d051      	beq.n	8013a50 <_reclaim_reent+0xb0>
 80139ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80139ae:	b143      	cbz	r3, 80139c2 <_reclaim_reent+0x22>
 80139b0:	68db      	ldr	r3, [r3, #12]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d14a      	bne.n	8013a4c <_reclaim_reent+0xac>
 80139b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80139b8:	6819      	ldr	r1, [r3, #0]
 80139ba:	b111      	cbz	r1, 80139c2 <_reclaim_reent+0x22>
 80139bc:	4620      	mov	r0, r4
 80139be:	f7ff ff01 	bl	80137c4 <_free_r>
 80139c2:	6961      	ldr	r1, [r4, #20]
 80139c4:	b111      	cbz	r1, 80139cc <_reclaim_reent+0x2c>
 80139c6:	4620      	mov	r0, r4
 80139c8:	f7ff fefc 	bl	80137c4 <_free_r>
 80139cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80139ce:	b111      	cbz	r1, 80139d6 <_reclaim_reent+0x36>
 80139d0:	4620      	mov	r0, r4
 80139d2:	f7ff fef7 	bl	80137c4 <_free_r>
 80139d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80139d8:	b111      	cbz	r1, 80139e0 <_reclaim_reent+0x40>
 80139da:	4620      	mov	r0, r4
 80139dc:	f7ff fef2 	bl	80137c4 <_free_r>
 80139e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80139e2:	b111      	cbz	r1, 80139ea <_reclaim_reent+0x4a>
 80139e4:	4620      	mov	r0, r4
 80139e6:	f7ff feed 	bl	80137c4 <_free_r>
 80139ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80139ec:	b111      	cbz	r1, 80139f4 <_reclaim_reent+0x54>
 80139ee:	4620      	mov	r0, r4
 80139f0:	f7ff fee8 	bl	80137c4 <_free_r>
 80139f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80139f6:	b111      	cbz	r1, 80139fe <_reclaim_reent+0x5e>
 80139f8:	4620      	mov	r0, r4
 80139fa:	f7ff fee3 	bl	80137c4 <_free_r>
 80139fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8013a00:	b111      	cbz	r1, 8013a08 <_reclaim_reent+0x68>
 8013a02:	4620      	mov	r0, r4
 8013a04:	f7ff fede 	bl	80137c4 <_free_r>
 8013a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013a0a:	b111      	cbz	r1, 8013a12 <_reclaim_reent+0x72>
 8013a0c:	4620      	mov	r0, r4
 8013a0e:	f7ff fed9 	bl	80137c4 <_free_r>
 8013a12:	69a3      	ldr	r3, [r4, #24]
 8013a14:	b1e3      	cbz	r3, 8013a50 <_reclaim_reent+0xb0>
 8013a16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013a18:	4620      	mov	r0, r4
 8013a1a:	4798      	blx	r3
 8013a1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8013a1e:	b1b9      	cbz	r1, 8013a50 <_reclaim_reent+0xb0>
 8013a20:	4620      	mov	r0, r4
 8013a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013a26:	f7ff bfad 	b.w	8013984 <cleanup_glue>
 8013a2a:	5949      	ldr	r1, [r1, r5]
 8013a2c:	b941      	cbnz	r1, 8013a40 <_reclaim_reent+0xa0>
 8013a2e:	3504      	adds	r5, #4
 8013a30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013a32:	2d80      	cmp	r5, #128	; 0x80
 8013a34:	68d9      	ldr	r1, [r3, #12]
 8013a36:	d1f8      	bne.n	8013a2a <_reclaim_reent+0x8a>
 8013a38:	4620      	mov	r0, r4
 8013a3a:	f7ff fec3 	bl	80137c4 <_free_r>
 8013a3e:	e7ba      	b.n	80139b6 <_reclaim_reent+0x16>
 8013a40:	680e      	ldr	r6, [r1, #0]
 8013a42:	4620      	mov	r0, r4
 8013a44:	f7ff febe 	bl	80137c4 <_free_r>
 8013a48:	4631      	mov	r1, r6
 8013a4a:	e7ef      	b.n	8013a2c <_reclaim_reent+0x8c>
 8013a4c:	2500      	movs	r5, #0
 8013a4e:	e7ef      	b.n	8013a30 <_reclaim_reent+0x90>
 8013a50:	bd70      	pop	{r4, r5, r6, pc}
 8013a52:	bf00      	nop
 8013a54:	20000020 	.word	0x20000020

08013a58 <_sbrk_r>:
 8013a58:	b538      	push	{r3, r4, r5, lr}
 8013a5a:	4d06      	ldr	r5, [pc, #24]	; (8013a74 <_sbrk_r+0x1c>)
 8013a5c:	2300      	movs	r3, #0
 8013a5e:	4604      	mov	r4, r0
 8013a60:	4608      	mov	r0, r1
 8013a62:	602b      	str	r3, [r5, #0]
 8013a64:	f7f4 fafe 	bl	8008064 <_sbrk>
 8013a68:	1c43      	adds	r3, r0, #1
 8013a6a:	d102      	bne.n	8013a72 <_sbrk_r+0x1a>
 8013a6c:	682b      	ldr	r3, [r5, #0]
 8013a6e:	b103      	cbz	r3, 8013a72 <_sbrk_r+0x1a>
 8013a70:	6023      	str	r3, [r4, #0]
 8013a72:	bd38      	pop	{r3, r4, r5, pc}
 8013a74:	2000a174 	.word	0x2000a174

08013a78 <_raise_r>:
 8013a78:	291f      	cmp	r1, #31
 8013a7a:	b538      	push	{r3, r4, r5, lr}
 8013a7c:	4604      	mov	r4, r0
 8013a7e:	460d      	mov	r5, r1
 8013a80:	d904      	bls.n	8013a8c <_raise_r+0x14>
 8013a82:	2316      	movs	r3, #22
 8013a84:	6003      	str	r3, [r0, #0]
 8013a86:	f04f 30ff 	mov.w	r0, #4294967295
 8013a8a:	bd38      	pop	{r3, r4, r5, pc}
 8013a8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8013a8e:	b112      	cbz	r2, 8013a96 <_raise_r+0x1e>
 8013a90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013a94:	b94b      	cbnz	r3, 8013aaa <_raise_r+0x32>
 8013a96:	4620      	mov	r0, r4
 8013a98:	f000 f830 	bl	8013afc <_getpid_r>
 8013a9c:	462a      	mov	r2, r5
 8013a9e:	4601      	mov	r1, r0
 8013aa0:	4620      	mov	r0, r4
 8013aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013aa6:	f000 b817 	b.w	8013ad8 <_kill_r>
 8013aaa:	2b01      	cmp	r3, #1
 8013aac:	d00a      	beq.n	8013ac4 <_raise_r+0x4c>
 8013aae:	1c59      	adds	r1, r3, #1
 8013ab0:	d103      	bne.n	8013aba <_raise_r+0x42>
 8013ab2:	2316      	movs	r3, #22
 8013ab4:	6003      	str	r3, [r0, #0]
 8013ab6:	2001      	movs	r0, #1
 8013ab8:	e7e7      	b.n	8013a8a <_raise_r+0x12>
 8013aba:	2400      	movs	r4, #0
 8013abc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8013ac0:	4628      	mov	r0, r5
 8013ac2:	4798      	blx	r3
 8013ac4:	2000      	movs	r0, #0
 8013ac6:	e7e0      	b.n	8013a8a <_raise_r+0x12>

08013ac8 <raise>:
 8013ac8:	4b02      	ldr	r3, [pc, #8]	; (8013ad4 <raise+0xc>)
 8013aca:	4601      	mov	r1, r0
 8013acc:	6818      	ldr	r0, [r3, #0]
 8013ace:	f7ff bfd3 	b.w	8013a78 <_raise_r>
 8013ad2:	bf00      	nop
 8013ad4:	20000020 	.word	0x20000020

08013ad8 <_kill_r>:
 8013ad8:	b538      	push	{r3, r4, r5, lr}
 8013ada:	4d07      	ldr	r5, [pc, #28]	; (8013af8 <_kill_r+0x20>)
 8013adc:	2300      	movs	r3, #0
 8013ade:	4604      	mov	r4, r0
 8013ae0:	4608      	mov	r0, r1
 8013ae2:	4611      	mov	r1, r2
 8013ae4:	602b      	str	r3, [r5, #0]
 8013ae6:	f7f4 faa3 	bl	8008030 <_kill>
 8013aea:	1c43      	adds	r3, r0, #1
 8013aec:	d102      	bne.n	8013af4 <_kill_r+0x1c>
 8013aee:	682b      	ldr	r3, [r5, #0]
 8013af0:	b103      	cbz	r3, 8013af4 <_kill_r+0x1c>
 8013af2:	6023      	str	r3, [r4, #0]
 8013af4:	bd38      	pop	{r3, r4, r5, pc}
 8013af6:	bf00      	nop
 8013af8:	2000a174 	.word	0x2000a174

08013afc <_getpid_r>:
 8013afc:	f7f4 ba90 	b.w	8008020 <_getpid>

08013b00 <__register_exitproc>:
 8013b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b04:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8013bc0 <__register_exitproc+0xc0>
 8013b08:	4606      	mov	r6, r0
 8013b0a:	f8d8 0000 	ldr.w	r0, [r8]
 8013b0e:	461f      	mov	r7, r3
 8013b10:	460d      	mov	r5, r1
 8013b12:	4691      	mov	r9, r2
 8013b14:	f7ff fe2c 	bl	8013770 <__retarget_lock_acquire_recursive>
 8013b18:	4b25      	ldr	r3, [pc, #148]	; (8013bb0 <__register_exitproc+0xb0>)
 8013b1a:	681c      	ldr	r4, [r3, #0]
 8013b1c:	b934      	cbnz	r4, 8013b2c <__register_exitproc+0x2c>
 8013b1e:	4c25      	ldr	r4, [pc, #148]	; (8013bb4 <__register_exitproc+0xb4>)
 8013b20:	601c      	str	r4, [r3, #0]
 8013b22:	4b25      	ldr	r3, [pc, #148]	; (8013bb8 <__register_exitproc+0xb8>)
 8013b24:	b113      	cbz	r3, 8013b2c <__register_exitproc+0x2c>
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8013b2c:	6863      	ldr	r3, [r4, #4]
 8013b2e:	2b1f      	cmp	r3, #31
 8013b30:	dd07      	ble.n	8013b42 <__register_exitproc+0x42>
 8013b32:	f8d8 0000 	ldr.w	r0, [r8]
 8013b36:	f7ff fe1d 	bl	8013774 <__retarget_lock_release_recursive>
 8013b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8013b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b42:	b34e      	cbz	r6, 8013b98 <__register_exitproc+0x98>
 8013b44:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8013b48:	b988      	cbnz	r0, 8013b6e <__register_exitproc+0x6e>
 8013b4a:	4b1c      	ldr	r3, [pc, #112]	; (8013bbc <__register_exitproc+0xbc>)
 8013b4c:	b923      	cbnz	r3, 8013b58 <__register_exitproc+0x58>
 8013b4e:	f8d8 0000 	ldr.w	r0, [r8]
 8013b52:	f7ff fe0e 	bl	8013772 <__retarget_lock_release>
 8013b56:	e7f0      	b.n	8013b3a <__register_exitproc+0x3a>
 8013b58:	f44f 7084 	mov.w	r0, #264	; 0x108
 8013b5c:	f7ff fe0c 	bl	8013778 <malloc>
 8013b60:	2800      	cmp	r0, #0
 8013b62:	d0f4      	beq.n	8013b4e <__register_exitproc+0x4e>
 8013b64:	2300      	movs	r3, #0
 8013b66:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8013b6a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8013b6e:	6863      	ldr	r3, [r4, #4]
 8013b70:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8013b74:	2201      	movs	r2, #1
 8013b76:	409a      	lsls	r2, r3
 8013b78:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8013b7c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8013b80:	4313      	orrs	r3, r2
 8013b82:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8013b86:	2e02      	cmp	r6, #2
 8013b88:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8013b8c:	bf02      	ittt	eq
 8013b8e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8013b92:	4313      	orreq	r3, r2
 8013b94:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8013b98:	6863      	ldr	r3, [r4, #4]
 8013b9a:	f8d8 0000 	ldr.w	r0, [r8]
 8013b9e:	1c5a      	adds	r2, r3, #1
 8013ba0:	3302      	adds	r3, #2
 8013ba2:	6062      	str	r2, [r4, #4]
 8013ba4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8013ba8:	f7ff fde4 	bl	8013774 <__retarget_lock_release_recursive>
 8013bac:	2000      	movs	r0, #0
 8013bae:	e7c6      	b.n	8013b3e <__register_exitproc+0x3e>
 8013bb0:	2000a204 	.word	0x2000a204
 8013bb4:	2000a178 	.word	0x2000a178
 8013bb8:	00000000 	.word	0x00000000
 8013bbc:	08013779 	.word	0x08013779
 8013bc0:	20000084 	.word	0x20000084

08013bc4 <__malloc_lock>:
 8013bc4:	4801      	ldr	r0, [pc, #4]	; (8013bcc <__malloc_lock+0x8>)
 8013bc6:	f7ff bdd3 	b.w	8013770 <__retarget_lock_acquire_recursive>
 8013bca:	bf00      	nop
 8013bcc:	2000a169 	.word	0x2000a169

08013bd0 <__malloc_unlock>:
 8013bd0:	4801      	ldr	r0, [pc, #4]	; (8013bd8 <__malloc_unlock+0x8>)
 8013bd2:	f7ff bdcf 	b.w	8013774 <__retarget_lock_release_recursive>
 8013bd6:	bf00      	nop
 8013bd8:	2000a169 	.word	0x2000a169

08013bdc <_init>:
 8013bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bde:	bf00      	nop
 8013be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013be2:	bc08      	pop	{r3}
 8013be4:	469e      	mov	lr, r3
 8013be6:	4770      	bx	lr

08013be8 <_fini>:
 8013be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bea:	bf00      	nop
 8013bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013bee:	bc08      	pop	{r3}
 8013bf0:	469e      	mov	lr, r3
 8013bf2:	4770      	bx	lr
