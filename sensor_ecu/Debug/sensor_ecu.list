
sensor_ecu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015e68  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d4  08015ff8  08015ff8  00025ff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080168cc  080168cc  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  080168cc  080168cc  000268cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080168d4  080168d4  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000020  080168d4  080168d4  000268d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080168f4  080168f4  000268f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  080168fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f4  2**0
                  CONTENTS
 10 .bss          0000a250  200001f8  200001f8  000301f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  2000a448  2000a448  000301f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00049864  00000000  00000000  00030224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000c381  00000000  00000000  00079a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003448  00000000  00000000  00085e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000030b8  00000000  00000000  00089258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003252e  00000000  00000000  0008c310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004353c  00000000  00000000  000be83e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001001e9  00000000  00000000  00101d7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00201f63  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000f0b0  00000000  00000000  00201fb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015fe0 	.word	0x08015fe0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08015fe0 	.word	0x08015fe0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <_ZN3can11MessageBaseC1Emhb>:
        uint8_t dlc;
        const bool isExtendedId;
        uint64_t intel;
        uint64_t motorola;

        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt) : id{_id}, dlc{_dlc}, isExtendedId{_isExt}, intel{0}, motorola{0} {}
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	60b9      	str	r1, [r7, #8]
 8000f96:	4611      	mov	r1, r2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	71bb      	strb	r3, [r7, #6]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	79fa      	ldrb	r2, [r7, #7]
 8000fac:	711a      	strb	r2, [r3, #4]
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	79ba      	ldrb	r2, [r7, #6]
 8000fb2:	715a      	strb	r2, [r3, #5]
 8000fb4:	68f9      	ldr	r1, [r7, #12]
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000fc2:	68f9      	ldr	r1, [r7, #12]
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	f04f 0300 	mov.w	r3, #0
 8000fcc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3714      	adds	r7, #20
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>:
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
        }


        // Convert message to STM32 CAN_TxHeaderTypeDef and txBuf
        void toBuf(CAN_TxHeaderTypeDef& txHeader, uint8_t txBuf[8], CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8000fde:	b490      	push	{r4, r7}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	603b      	str	r3, [r7, #0]
            if(isExtendedId) {
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	795b      	ldrb	r3, [r3, #5]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00a      	beq.n	800100a <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x2c>
                txHeader.StdId = 0;
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = id;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_EXT;
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2204      	movs	r2, #4
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	e009      	b.n	800101e <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x40>
            } else {
                txHeader.StdId = id;
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = 0;
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	2200      	movs	r2, #0
 8001016:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_STD;
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
            }
            txHeader.RTR = bus + CAN_RTR_DATA; // Upper 16-bit contain bus. Lower 16-bit contain RTR
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	60da      	str	r2, [r3, #12]
            txHeader.DLC = dlc;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	791b      	ldrb	r3, [r3, #4]
 8001028:	461a      	mov	r2, r3
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	611a      	str	r2, [r3, #16]
            txHeader.TransmitGlobalTime = DISABLE;
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	2200      	movs	r2, #0
 8001032:	751a      	strb	r2, [r3, #20]
            txBuf[0] = (intel & 0xFF) | ((motorola >> 56) & 0xFF);
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800103a:	b2d4      	uxtb	r4, r2
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	0e0a      	lsrs	r2, r1, #24
 800104c:	2300      	movs	r3, #0
 800104e:	b2d3      	uxtb	r3, r2
 8001050:	4323      	orrs	r3, r4
 8001052:	b2da      	uxtb	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	701a      	strb	r2, [r3, #0]
            txBuf[1] = ((intel >> 8) & 0xFF) | ((motorola >> 48) & 0xFF);
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	f04f 0300 	mov.w	r3, #0
 8001066:	0a02      	lsrs	r2, r0, #8
 8001068:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800106c:	0a0b      	lsrs	r3, r1, #8
 800106e:	b2d4      	uxtb	r4, r2
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	f04f 0300 	mov.w	r3, #0
 800107e:	0c0a      	lsrs	r2, r1, #16
 8001080:	2300      	movs	r3, #0
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3301      	adds	r3, #1
 8001088:	4322      	orrs	r2, r4
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]
            txBuf[2] = ((intel >> 16) & 0xFF) | ((motorola >> 40) & 0xFF);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001094:	f04f 0200 	mov.w	r2, #0
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	0c02      	lsrs	r2, r0, #16
 800109e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010a2:	0c0b      	lsrs	r3, r1, #16
 80010a4:	b2d4      	uxtb	r4, r2
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	f04f 0300 	mov.w	r3, #0
 80010b4:	0a0a      	lsrs	r2, r1, #8
 80010b6:	2300      	movs	r3, #0
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3302      	adds	r3, #2
 80010be:	4322      	orrs	r2, r4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	701a      	strb	r2, [r3, #0]
            txBuf[3] = ((intel >> 24) & 0xFF) | ((motorola >> 32) & 0xFF);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	0e02      	lsrs	r2, r0, #24
 80010d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80010d8:	0e0b      	lsrs	r3, r1, #24
 80010da:	b2d4      	uxtb	r4, r2
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010e2:	f04f 0200 	mov.w	r2, #0
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	000a      	movs	r2, r1
 80010ec:	2300      	movs	r3, #0
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3303      	adds	r3, #3
 80010f4:	4322      	orrs	r2, r4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	701a      	strb	r2, [r3, #0]
            txBuf[4] = ((intel >> 32) & 0xFF) | ((motorola >> 24) & 0xFF);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	f04f 0300 	mov.w	r3, #0
 8001108:	000a      	movs	r2, r1
 800110a:	2300      	movs	r3, #0
 800110c:	b2d4      	uxtb	r4, r2
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001114:	f04f 0200 	mov.w	r2, #0
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	0e02      	lsrs	r2, r0, #24
 800111e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001122:	0e0b      	lsrs	r3, r1, #24
 8001124:	b2d2      	uxtb	r2, r2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3304      	adds	r3, #4
 800112a:	4322      	orrs	r2, r4
 800112c:	b2d2      	uxtb	r2, r2
 800112e:	701a      	strb	r2, [r3, #0]
            txBuf[5] = ((intel >> 40) & 0xFF) | ((motorola >> 16) & 0xFF);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	0a0a      	lsrs	r2, r1, #8
 8001140:	2300      	movs	r3, #0
 8001142:	b2d4      	uxtb	r4, r2
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800114a:	f04f 0200 	mov.w	r2, #0
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	0c02      	lsrs	r2, r0, #16
 8001154:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001158:	0c0b      	lsrs	r3, r1, #16
 800115a:	b2d2      	uxtb	r2, r2
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3305      	adds	r3, #5
 8001160:	4322      	orrs	r2, r4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	701a      	strb	r2, [r3, #0]
            txBuf[6] = ((intel >> 48) & 0xFF) | ((motorola >> 8) & 0xFF);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800116c:	f04f 0200 	mov.w	r2, #0
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	0c0a      	lsrs	r2, r1, #16
 8001176:	2300      	movs	r3, #0
 8001178:	b2d4      	uxtb	r4, r2
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	0a02      	lsrs	r2, r0, #8
 800118a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800118e:	0a0b      	lsrs	r3, r1, #8
 8001190:	b2d2      	uxtb	r2, r2
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3306      	adds	r3, #6
 8001196:	4322      	orrs	r2, r4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	701a      	strb	r2, [r3, #0]
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	f04f 0300 	mov.w	r3, #0
 80011aa:	0e0a      	lsrs	r2, r1, #24
 80011ac:	2300      	movs	r3, #0
 80011ae:	b2d1      	uxtb	r1, r2
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3307      	adds	r3, #7
 80011bc:	430a      	orrs	r2, r1
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]
        }
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc90      	pop	{r4, r7}
 80011ca:	4770      	bx	lr

080011cc <_ZN9TxMessageC1Ev>:
struct RxMessage {
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxBuf[8];
};

struct TxMessage {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	461a      	mov	r2, r3
 80011d8:	2300      	movs	r3, #0
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	6053      	str	r3, [r2, #4]
 80011de:	6093      	str	r3, [r2, #8]
 80011e0:	60d3      	str	r3, [r2, #12]
 80011e2:	6113      	str	r3, [r2, #16]
 80011e4:	6153      	str	r3, [r2, #20]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <_ZNK3can11MessageBase12getTxMessageEm>:
        void toBuf(TxMessage& txMsg, CAN_BusTypeDef bus = buses::ANY) const noexcept {
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
        }

        // Convert message to CANzero TxMessage and return created struct
        TxMessage getTxMessage(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
            TxMessage txMsg;
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f7ff ffe3 	bl	80011cc <_ZN9TxMessageC1Ev>
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	f103 0218 	add.w	r2, r3, #24
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68f9      	ldr	r1, [r7, #12]
 8001210:	68b8      	ldr	r0, [r7, #8]
 8001212:	f7ff fee4 	bl	8000fde <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>
            return txMsg;
 8001216:	bf00      	nop
        }
 8001218:	68f8      	ldr	r0, [r7, #12]
 800121a:	3710      	adds	r7, #16
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <_ZNK3can11MessageBase4sendEm>:

        // Use this function to send a message over the queue to the CAN bus
        void send(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
            TxMessage sendTxMessage = getTxMessage(bus);
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ffde 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
            if(osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0) != osOK) {
 8001238:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <_ZNK3can11MessageBase4sendEm+0x54>)
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	f107 0108 	add.w	r1, r7, #8
 8001240:	2300      	movs	r3, #0
 8001242:	2200      	movs	r2, #0
 8001244:	f00d fec4 	bl	800efd0 <osMessageQueuePut>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	bf14      	ite	ne
 800124e:	2301      	movne	r3, #1
 8001250:	2300      	moveq	r3, #0
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d008      	beq.n	800126a <_ZNK3can11MessageBase4sendEm+0x4a>
                printDebug("Failed sending message %lu because queue is full!\n", sendTxMessage.txHeader.StdId);
 8001258:	f011 fb34 	bl	80128c4 <vPortEnterCritical>
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	; (8001278 <_ZNK3can11MessageBase4sendEm+0x58>)
 8001262:	f00d fa5f 	bl	800e724 <printf_>
 8001266:	f011 fb5d 	bl	8012924 <vPortExitCritical>
            }
        }
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	2000079c 	.word	0x2000079c
 8001278:	08015ff8 	.word	0x08015ff8

0800127c <_ZN3can7MessageINS_8messages11SENSOR_EMCYEEC1Ev>:
    public:

        ~Message() noexcept = default;

        // Constructor for sending a message
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	2300      	movs	r3, #0
 8001288:	2204      	movs	r2, #4
 800128a:	2181      	movs	r1, #129	; 0x81
 800128c:	f7ff fe7e 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <_ZN7canzero9emergency14consumer_entryEPv>:
#include <cinttypes>
#include "FreeRTOS.h"
#include "task.h"


void canzero::emergency::consumer_entry(void* argv){
 800129a:	b5b0      	push	{r4, r5, r7, lr}
 800129c:	b08c      	sub	sp, #48	; 0x30
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
	// Timeout for waiting for an emergency notification
	constexpr uint32_t EMERGENCY_WAIT_TIMEOUT_MS = 500;
 80012a2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28

	can::Message<can::messages::CANZERO_EMCY> emcyMessage;
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ffe5 	bl	800127c <_ZN3can7MessageINS_8messages11SENSOR_EMCYEEC1Ev>

	uint32_t emergencyBuffer = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
	uint32_t lastEmergencyBuffer = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (true) {
		// Wait for notifications with a timeout without clearing flags
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 80012ba:	f107 020c 	add.w	r2, r7, #12
 80012be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80012c2:	2100      	movs	r1, #0
 80012c4:	2000      	movs	r0, #0
 80012c6:	f010 fce9 	bl	8011c9c <xTaskNotifyWait>

		// When there was a change, call the user handler function
		if (emergencyBuffer != lastEmergencyBuffer) {
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d001      	beq.n	80012d6 <_ZN7canzero9emergency14consumer_entryEPv+0x3c>
			//TODO: pass warning parameter.
			canzero::handle_emergency_warning();
 80012d2:	f000 ff6f 	bl	80021b4 <_ZN7canzero24handle_emergency_warningEv>
			//canzero::handle_emergency_warning(emergencyBuffer, lastEmergencyBuffer);
		}

		// Send CAN message when there was a change or when there is an error / warning present
		if (emergencyBuffer != 0 || emergencyBuffer != lastEmergencyBuffer) {
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d103      	bne.n	80012e4 <_ZN7canzero9emergency14consumer_entryEPv+0x4a>
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d00b      	beq.n	80012fc <_ZN7canzero9emergency14consumer_entryEPv+0x62>
			emcyMessage.intel = emergencyBuffer;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2200      	movs	r2, #0
 80012e8:	461c      	mov	r4, r3
 80012ea:	4615      	mov	r5, r2
 80012ec:	e9c7 4506 	strd	r4, r5, [r7, #24]
			emcyMessage.send();
 80012f0:	f107 0310 	add.w	r3, r7, #16
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff ff92 	bl	8001220 <_ZNK3can11MessageBase4sendEm>
		}

		lastEmergencyBuffer = emergencyBuffer;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	62fb      	str	r3, [r7, #44]	; 0x2c
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 8001300:	e7db      	b.n	80012ba <_ZN7canzero9emergency14consumer_entryEPv+0x20>
	...

08001304 <_ZN7canzero9heartbeat14producer_entryEPv>:
static constexpr size_t MSG_BUFFER_NUM_MESSAGES = 5;	// Number of messages to store in the message buffer
static constexpr size_t MSG_BUFFER_SIZE = MSG_BUFFER_NUM_MESSAGES * (sizeof(RxMessage) + 4); 	// 4 bytes overhead to store the size_t

static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);

void canzero::heartbeat::producer_entry(void* argv){
 8001304:	b580      	push	{r7, lr}
 8001306:	b08c      	sub	sp, #48	; 0x30
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	//TODO setup callback logic for processRx.

	TxMessage hbTxMessage;
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff5b 	bl	80011cc <_ZN9TxMessageC1Ev>
	hbTxMessage.txHeader.StdId = can::messages::CANZERO_Heartbeat::id;
 8001316:	f240 7301 	movw	r3, #1793	; 0x701
 800131a:	60fb      	str	r3, [r7, #12]
	hbTxMessage.txHeader.DLC = can::messages::CANZERO_Heartbeat::dlc;
 800131c:	2301      	movs	r3, #1
 800131e:	61fb      	str	r3, [r7, #28]
	unsigned int frame = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 8001324:	f000 fe50 	bl	8001fc8 <_ZN7canzero9getStatusEv>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		osMessageQueuePut(czSendQueue, &hbTxMessage, 0, 0);
 800132e:	4b0d      	ldr	r3, [pc, #52]	; (8001364 <_ZN7canzero9heartbeat14producer_entryEPv+0x60>)
 8001330:	6818      	ldr	r0, [r3, #0]
 8001332:	f107 010c 	add.w	r1, r7, #12
 8001336:	2300      	movs	r3, #0
 8001338:	2200      	movs	r2, #0
 800133a:	f00d fe49 	bl	800efd0 <osMessageQueuePut>
		osDelay(pdMS_TO_TICKS(canzero::heartbeat::getInterval()));
 800133e:	f000 f841 	bl	80013c4 <_ZN7canzero9heartbeat11getIntervalEv>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134a:	fb02 f303 	mul.w	r3, r2, r3
 800134e:	4a06      	ldr	r2, [pc, #24]	; (8001368 <_ZN7canzero9heartbeat14producer_entryEPv+0x64>)
 8001350:	fba2 2303 	umull	r2, r3, r2, r3
 8001354:	099b      	lsrs	r3, r3, #6
 8001356:	4618      	mov	r0, r3
 8001358:	f00d fb5e 	bl	800ea18 <osDelay>
		frame ++;
 800135c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800135e:	3301      	adds	r3, #1
 8001360:	62fb      	str	r3, [r7, #44]	; 0x2c
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 8001362:	e7df      	b.n	8001324 <_ZN7canzero9heartbeat14producer_entryEPv+0x20>
 8001364:	2000079c 	.word	0x2000079c
 8001368:	10624dd3 	.word	0x10624dd3

0800136c <_ZN7canzero9heartbeat14consumer_entryEPv>:
	}
}

void canzero::heartbeat::consumer_entry(void* argv){
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b08d      	sub	sp, #52	; 0x34
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (true) {
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <_ZN7canzero9heartbeat14consumer_entryEPv+0x50>)
 8001376:	681c      	ldr	r4, [r3, #0]
 8001378:	f000 f824 	bl	80013c4 <_ZN7canzero9heartbeat11getIntervalEv>
 800137c:	4603      	mov	r3, r0
 800137e:	3305      	adds	r3, #5
 8001380:	461a      	mov	r2, r3
 8001382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001386:	fb02 f303 	mul.w	r3, r2, r3
 800138a:	4a0d      	ldr	r2, [pc, #52]	; (80013c0 <_ZN7canzero9heartbeat14consumer_entryEPv+0x54>)
 800138c:	fba2 2303 	umull	r2, r3, r2, r3
 8001390:	099b      	lsrs	r3, r3, #6
 8001392:	f107 010c 	add.w	r1, r7, #12
 8001396:	2224      	movs	r2, #36	; 0x24
 8001398:	4620      	mov	r0, r4
 800139a:	f00f fa3f 	bl	801081c <xStreamBufferReceive>
 800139e:	4603      	mov	r3, r0
				pdMS_TO_TICKS(canzero::heartbeat::getInterval() + 5)) != 0) {
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf14      	ite	ne
 80013a4:	2301      	movne	r3, #1
 80013a6:	2300      	moveq	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0e2      	beq.n	8001374 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
			canzero::setStatus((cz_status)message.rxBuf[0]);
 80013ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 fdec 	bl	8001f90 <_ZN7canzero9setStatusE9cz_status>
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80013b8:	e7dc      	b.n	8001374 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
 80013ba:	bf00      	nop
 80013bc:	20000214 	.word	0x20000214
 80013c0:	10624dd3 	.word	0x10624dd3

080013c4 <_ZN7canzero9heartbeat11getIntervalEv>:

void canzero::heartbeat::setInterval(uint16_t value){
	OD_HeartbeatInterval_set(value);
}

uint16_t canzero::heartbeat::getInterval(){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	return OD_HeartbeatInterval_get();
 80013c8:	f003 fa0e 	bl	80047e8 <_Z24OD_HeartbeatInterval_getv>
 80013cc:	4603      	mov	r3, r0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <_Z41__static_initialization_and_destruction_0ii>:
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	d10c      	bne.n	80013fe <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d107      	bne.n	80013fe <_Z41__static_initialization_and_destruction_0ii+0x2a>
static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 80013ee:	2201      	movs	r2, #1
 80013f0:	2100      	movs	r1, #0
 80013f2:	20c8      	movs	r0, #200	; 0xc8
 80013f4:	f00f f892 	bl	801051c <xStreamBufferGenericCreate>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4a03      	ldr	r2, [pc, #12]	; (8001408 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80013fc:	6013      	str	r3, [r2, #0]
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	20000214 	.word	0x20000214

0800140c <_GLOBAL__sub_I__ZN7canzero9heartbeat14producer_entryEPv>:
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
 8001410:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001414:	2001      	movs	r0, #1
 8001416:	f7ff ffdd 	bl	80013d4 <_Z41__static_initialization_and_destruction_0ii>
 800141a:	bd80      	pop	{r7, pc}

0800141c <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	689b      	ldr	r3, [r3, #8]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d005      	beq.n	8001454 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	2203      	movs	r2, #3
 8001452:	4798      	blx	r3
    }
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	bf0c      	ite	eq
 800146e:	2301      	moveq	r3, #1
 8001470:	2300      	movne	r3, #0
 8001472:	b2db      	uxtb	r3, r3
 8001474:	4618      	mov	r0, r3
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <_ZNSt8functionIFvR9RxMessageEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ffd4 	bl	8001438 <_ZNSt14_Function_baseD1Ev>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <_ZN7canzero10receiver_tC1Ev>:

namespace canzero {

static unsigned int receiverIdAcc = 0;

struct receiver_t {
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f000 f887 	bl	80015b8 <_ZNSt8functionIFvR9RxMessageEEC1Ev>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4618      	mov	r0, r3
 80014ae:	3708      	adds	r7, #8
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_ZN7canzero10receiver_tD1Ev>:
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff ffde 	bl	8001480 <_ZNSt8functionIFvR9RxMessageEED1Ev>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <_ZN7canzero24processRxMessageReceiverER9RxMessage>:
	g_receivers[g_size++] = recv;
	taskEXIT_CRITICAL();
	return id;
}

bool processRxMessageReceiver(RxMessage& message){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
	bool foundReceiver = false;
 80014d8:	2300      	movs	r3, #0
 80014da:	75fb      	strb	r3, [r7, #23]
	if(message.rxHeader.IDE == CAN_ID_STD){
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d12f      	bne.n	8001544 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x74>
		for(uint32_t i = 0;i<g_size;i++){
 80014e4:	2300      	movs	r3, #0
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	429a      	cmp	r2, r3
 80014f0:	d258      	bcs.n	80015a4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == false) && (message.rxHeader.StdId == g_receivers[i].m_id)){
 80014f2:	4930      	ldr	r1, [pc, #192]	; (80015b4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4613      	mov	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	1a9b      	subs	r3, r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	440b      	add	r3, r1
 8001500:	3314      	adds	r3, #20
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d119      	bne.n	800153c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6819      	ldr	r1, [r3, #0]
 800150c:	4829      	ldr	r0, [pc, #164]	; (80015b4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4613      	mov	r3, r2
 8001512:	00db      	lsls	r3, r3, #3
 8001514:	1a9b      	subs	r3, r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4403      	add	r3, r0
 800151a:	3310      	adds	r3, #16
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4299      	cmp	r1, r3
 8001520:	d10c      	bne.n	800153c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
				g_receivers[i].m_callback(message);
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4613      	mov	r3, r2
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	1a9b      	subs	r3, r3, r2
 800152a:	009b      	lsls	r3, r3, #2
 800152c:	4a21      	ldr	r2, [pc, #132]	; (80015b4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 800152e:	4413      	add	r3, r2
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f84d 	bl	80015d2 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 8001538:	2301      	movs	r3, #1
 800153a:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	3301      	adds	r3, #1
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	e7d1      	b.n	80014e8 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x18>
			}
		}
	}else{
		for(uint32_t i = 0;i<g_size;i++){
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	4b19      	ldr	r3, [pc, #100]	; (80015b0 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	68fa      	ldr	r2, [r7, #12]
 800154e:	429a      	cmp	r2, r3
 8001550:	d228      	bcs.n	80015a4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == true) && (message.rxHeader.ExtId == g_receivers[i].m_id)){
 8001552:	4918      	ldr	r1, [pc, #96]	; (80015b4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4613      	mov	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	1a9b      	subs	r3, r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	3314      	adds	r3, #20
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d119      	bne.n	800159c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6859      	ldr	r1, [r3, #4]
 800156c:	4811      	ldr	r0, [pc, #68]	; (80015b4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	4613      	mov	r3, r2
 8001572:	00db      	lsls	r3, r3, #3
 8001574:	1a9b      	subs	r3, r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4403      	add	r3, r0
 800157a:	3310      	adds	r3, #16
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4299      	cmp	r1, r3
 8001580:	d10c      	bne.n	800159c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
				g_receivers[i].m_callback(message);
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	4613      	mov	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	1a9b      	subs	r3, r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4a09      	ldr	r2, [pc, #36]	; (80015b4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 800158e:	4413      	add	r3, r2
 8001590:	6879      	ldr	r1, [r7, #4]
 8001592:	4618      	mov	r0, r3
 8001594:	f000 f81d 	bl	80015d2 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 8001598:	2301      	movs	r3, #1
 800159a:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	3301      	adds	r3, #1
 80015a0:	60fb      	str	r3, [r7, #12]
 80015a2:	e7d1      	b.n	8001548 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x78>
			}
		}
	}
	return foundReceiver;
 80015a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000790 	.word	0x20000790
 80015b4:	20000218 	.word	0x20000218

080015b8 <_ZNSt8functionIFvR9RxMessageEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ff2a 	bl	800141c <_ZNSt14_Function_baseC1Ev>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <_ZNKSt8functionIFvR9RxMessageEEclES1_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80015d2:	b5b0      	push	{r4, r5, r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
 80015da:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ff3d 	bl	800145e <_ZNKSt14_Function_base8_M_emptyEv>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <_ZNKSt8functionIFvR9RxMessageEEclES1_+0x1c>
	__throw_bad_function_call();
 80015ea:	f011 fc8e 	bl	8012f0a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68dc      	ldr	r4, [r3, #12]
 80015f2:	687d      	ldr	r5, [r7, #4]
 80015f4:	6838      	ldr	r0, [r7, #0]
 80015f6:	f000 f808 	bl	800160a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 80015fa:	4603      	mov	r3, r0
 80015fc:	4619      	mov	r1, r3
 80015fe:	4628      	mov	r0, r5
 8001600:	47a0      	blx	r4
 8001602:	bf00      	nop
    }
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bdb0      	pop	{r4, r5, r7, pc}

0800160a <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4618      	mov	r0, r3
 800162c:	370c      	adds	r7, #12
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 8001636:	b580      	push	{r7, lr}
 8001638:	b084      	sub	sp, #16
 800163a:	af00      	add	r7, sp, #0
 800163c:	6078      	str	r0, [r7, #4]
 800163e:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ffed 	bl	8001620 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001646:	4602      	mov	r2, r0
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001650:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8001654:	6838      	ldr	r0, [r7, #0]
 8001656:	f7ff ffe3 	bl	8001620 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800165a:	4602      	mov	r2, r0
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001662:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8001666:	f107 0308 	add.w	r3, r7, #8
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff ffd8 	bl	8001620 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001670:	4602      	mov	r2, r0
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001678:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800167c:	bf00      	nop
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4618      	mov	r0, r3
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr

0800169a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 800169a:	b580      	push	{r7, lr}
 800169c:	b084      	sub	sp, #16
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
 80016a2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f7ff ffed 	bl	8001684 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80016aa:	4603      	mov	r3, r0
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80016b0:	6838      	ldr	r0, [r7, #0]
 80016b2:	f7ff ffe7 	bl	8001684 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80016b6:	4603      	mov	r3, r0
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ffde 	bl	8001684 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80016c8:	4603      	mov	r3, r0
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	601a      	str	r2, [r3, #0]
    }
 80016d0:	bf00      	nop
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
	taskEXIT_CRITICAL();
}

}
 80016d8:	b5b0      	push	{r4, r5, r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d10f      	bne.n	8001708 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10a      	bne.n	8001708 <_Z41__static_initialization_and_destruction_0ii+0x30>
static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80016f4:	2431      	movs	r4, #49	; 0x31
 80016f6:	461d      	mov	r5, r3
 80016f8:	2c00      	cmp	r4, #0
 80016fa:	db05      	blt.n	8001708 <_Z41__static_initialization_and_destruction_0ii+0x30>
 80016fc:	4628      	mov	r0, r5
 80016fe:	f7ff fecc 	bl	800149a <_ZN7canzero10receiver_tC1Ev>
 8001702:	351c      	adds	r5, #28
 8001704:	3c01      	subs	r4, #1
 8001706:	e7f7      	b.n	80016f8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d10d      	bne.n	800172a <_Z41__static_initialization_and_destruction_0ii+0x52>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001714:	4293      	cmp	r3, r2
 8001716:	d108      	bne.n	800172a <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001718:	4c07      	ldr	r4, [pc, #28]	; (8001738 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800171c:	429c      	cmp	r4, r3
 800171e:	d004      	beq.n	800172a <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001720:	3c1c      	subs	r4, #28
 8001722:	4620      	mov	r0, r4
 8001724:	f7ff fec6 	bl	80014b4 <_ZN7canzero10receiver_tD1Ev>
 8001728:	e7f7      	b.n	800171a <_Z41__static_initialization_and_destruction_0ii+0x42>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bdb0      	pop	{r4, r5, r7, pc}
 8001732:	bf00      	nop
 8001734:	20000218 	.word	0x20000218
 8001738:	20000790 	.word	0x20000790

0800173c <_GLOBAL__sub_I__ZN7canzero6g_sizeE>:
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
 8001740:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001744:	2001      	movs	r0, #1
 8001746:	f7ff ffc7 	bl	80016d8 <_Z41__static_initialization_and_destruction_0ii>
 800174a:	bd80      	pop	{r7, pc}

0800174c <_GLOBAL__sub_D__ZN7canzero6g_sizeE>:
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
 8001750:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001754:	2000      	movs	r0, #0
 8001756:	f7ff ffbf 	bl	80016d8 <_Z41__static_initialization_and_destruction_0ii>
 800175a:	bd80      	pop	{r7, pc}

0800175c <_Z9processRX9RxMessage>:
/**
 * @brief function that process all node specific messages
 *
 * @param message
 */
void processRX(RxMessage message) {
 800175c:	b084      	sub	sp, #16
 800175e:	b580      	push	{r7, lr}
 8001760:	af00      	add	r7, sp, #0
 8001762:	f107 0c08 	add.w	ip, r7, #8
 8001766:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (can::checkRxMessage<can::messages::CANZERO_RX_PDO1>(message)) {
 800176a:	f107 0008 	add.w	r0, r7, #8
 800176e:	f000 f835 	bl	80017dc <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d008      	beq.n	800178a <_Z9processRX9RxMessage+0x2e>
		xMessageBufferSend(handlePDO1MessageBuffer, &message, sizeof(message),
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <_Z9processRX9RxMessage+0x74>)
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	230a      	movs	r3, #10
 800177e:	2224      	movs	r2, #36	; 0x24
 8001780:	f107 0108 	add.w	r1, r7, #8
 8001784:	f00e ff58 	bl	8010638 <xStreamBufferSend>
	 else {
	 printDebug("unknown/unhandled CAN Ext-ID: %lu\n", message.rxHeader.ExtId);
	 }
	 }
	 */
}
 8001788:	e01c      	b.n	80017c4 <_Z9processRX9RxMessage+0x68>
	} else if (canzero::processRxMessageReceiver(message)) {
 800178a:	f107 0008 	add.w	r0, r7, #8
 800178e:	f7ff fe9f 	bl	80014d0 <_ZN7canzero24processRxMessageReceiverER9RxMessage>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d115      	bne.n	80017c4 <_Z9processRX9RxMessage+0x68>
		if (message.rxHeader.IDE == CAN_ID_STD) {
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d109      	bne.n	80017b2 <_Z9processRX9RxMessage+0x56>
			printDebug("unknown/unhandled CAN Std-ID: %lu\n",
 800179e:	f011 f891 	bl	80128c4 <vPortEnterCritical>
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	4619      	mov	r1, r3
 80017a6:	480b      	ldr	r0, [pc, #44]	; (80017d4 <_Z9processRX9RxMessage+0x78>)
 80017a8:	f00c ffbc 	bl	800e724 <printf_>
 80017ac:	f011 f8ba 	bl	8012924 <vPortExitCritical>
}
 80017b0:	e008      	b.n	80017c4 <_Z9processRX9RxMessage+0x68>
			printDebug("unknown/unhandled CAN Ext-ID: %lu\n",
 80017b2:	f011 f887 	bl	80128c4 <vPortEnterCritical>
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4619      	mov	r1, r3
 80017ba:	4807      	ldr	r0, [pc, #28]	; (80017d8 <_Z9processRX9RxMessage+0x7c>)
 80017bc:	f00c ffb2 	bl	800e724 <printf_>
 80017c0:	f011 f8b0 	bl	8012924 <vPortExitCritical>
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017cc:	b004      	add	sp, #16
 80017ce:	4770      	bx	lr
 80017d0:	20000794 	.word	0x20000794
 80017d4:	0801602c 	.word	0x0801602c
 80017d8:	08016050 	.word	0x08016050

080017dc <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d109      	bne.n	8001800 <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f240 12c1 	movw	r2, #449	; 0x1c1
 80017f4:	4293      	cmp	r3, r2
 80017f6:	bf0c      	ite	eq
 80017f8:	2301      	moveq	r3, #1
 80017fa:	2300      	movne	r3, #0
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	e000      	b.n	8001802 <_ZN3can14checkRxMessageINS_8messages14SENSOR_RX_PDO1EEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001800:	2300      	movs	r3, #0
    }
 8001802:	4618      	mov	r0, r3
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <_Z41__static_initialization_and_destruction_0ii>:
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d10c      	bne.n	800183a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001826:	4293      	cmp	r3, r2
 8001828:	d107      	bne.n	800183a <_Z41__static_initialization_and_destruction_0ii+0x2a>
MessageBufferHandle_t handlePDO1MessageBuffer = xMessageBufferCreate(
 800182a:	2201      	movs	r2, #1
 800182c:	2100      	movs	r1, #0
 800182e:	20c8      	movs	r0, #200	; 0xc8
 8001830:	f00e fe74 	bl	801051c <xStreamBufferGenericCreate>
 8001834:	4603      	mov	r3, r0
 8001836:	4a03      	ldr	r2, [pc, #12]	; (8001844 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001838:	6013      	str	r3, [r2, #0]
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000794 	.word	0x20000794

08001848 <_GLOBAL__sub_I_handlePDO1MessageBuffer>:
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
 800184c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001850:	2001      	movs	r0, #1
 8001852:	f7ff ffdd 	bl	8001810 <_Z41__static_initialization_and_destruction_0ii>
 8001856:	bd80      	pop	{r7, pc}

08001858 <_Z41__static_initialization_and_destruction_0ii>:
 */
#include "cz_receive_queue.hpp"
#include "cz_typedefinitions.hpp"

static const osMessageQueueAttr_t czReceiveQueueAttr = {"czReceiveQueue",0,NULL,0,NULL,0};
osMessageQueueId_t czReceiveQueue = osMessageQueueNew(16, sizeof(RxMessage), &czReceiveQueueAttr);
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d10c      	bne.n	8001882 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800186e:	4293      	cmp	r3, r2
 8001870:	d107      	bne.n	8001882 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001872:	4a06      	ldr	r2, [pc, #24]	; (800188c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001874:	2124      	movs	r1, #36	; 0x24
 8001876:	2010      	movs	r0, #16
 8001878:	f00d fb36 	bl	800eee8 <osMessageQueueNew>
 800187c:	4603      	mov	r3, r0
 800187e:	4a04      	ldr	r2, [pc, #16]	; (8001890 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	080162a4 	.word	0x080162a4
 8001890:	20000798 	.word	0x20000798

08001894 <_GLOBAL__sub_I_czReceiveQueue>:
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
 8001898:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800189c:	2001      	movs	r0, #1
 800189e:	f7ff ffdb 	bl	8001858 <_Z41__static_initialization_and_destruction_0ii>
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018a8:	f3bf 8f4f 	dsb	sy
}
 80018ac:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80018ae:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <__NVIC_SystemReset+0x24>)
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80018b6:	4904      	ldr	r1, [pc, #16]	; (80018c8 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <__NVIC_SystemReset+0x28>)
 80018ba:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80018bc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80018be:	f3bf 8f4f 	dsb	sy
}
 80018c2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80018c4:	bf00      	nop
 80018c6:	e7fd      	b.n	80018c4 <__NVIC_SystemReset+0x20>
 80018c8:	e000ed00 	.word	0xe000ed00
 80018cc:	05fa0004 	.word	0x05fa0004

080018d0 <_Z15cz_receive_taskPv>:

#include "FreeRTOS.h"
#include "message_buffer.h"


void cz_receive_task(void* argv) {
 80018d0:	b5b0      	push	{r4, r5, r7, lr}
 80018d2:	b092      	sub	sp, #72	; 0x48
 80018d4:	af06      	add	r7, sp, #24
 80018d6:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (1) {
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 80018d8:	4b26      	ldr	r3, [pc, #152]	; (8001974 <_Z15cz_receive_taskPv+0xa4>)
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	f107 010c 	add.w	r1, r7, #12
 80018e0:	f04f 33ff 	mov.w	r3, #4294967295
 80018e4:	2200      	movs	r2, #0
 80018e6:	f00d fbd3 	bl	800f090 <osMessageQueueGet>

		if (message.rxHeader.RTR == CAN_RTR_DATA) {
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d136      	bne.n	800195e <_Z15cz_receive_taskPv+0x8e>
 			if(can::checkRxMessage<can::messages::CANZERO_BTL_RX>(message)) {
 80018f0:	f107 030c 	add.w	r3, r7, #12
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 f8e3 	bl	8001ac0 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <_Z15cz_receive_taskPv+0x3c>
				if(message.rxBuf[0]==0xff) {
 8001900:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001904:	2bff      	cmp	r3, #255	; 0xff
 8001906:	d1e7      	bne.n	80018d8 <_Z15cz_receive_taskPv+0x8>
					NVIC_SystemReset();
 8001908:	f7ff ffcc 	bl	80018a4 <__NVIC_SystemReset>
				}
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Up>(message)) {
 800190c:	f107 030c 	add.w	r3, r7, #12
 8001910:	4618      	mov	r0, r3
 8001912:	f000 f8ee 	bl	8001af2 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <_Z15cz_receive_taskPv+0x58>
				handleSDORequestUpload(message);
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	4618      	mov	r0, r3
 8001922:	f002 fb07 	bl	8003f34 <_Z22handleSDORequestUploadRK9RxMessage>
 8001926:	e7d7      	b.n	80018d8 <_Z15cz_receive_taskPv+0x8>
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Down>(message)) {
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	4618      	mov	r0, r3
 800192e:	f000 f8f9 	bl	8001b24 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <_Z15cz_receive_taskPv+0x74>
				handleSDORequestDownload(message);
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	4618      	mov	r0, r3
 800193e:	f001 ff5a 	bl	80037f6 <_Z24handleSDORequestDownloadRK9RxMessage>
 8001942:	e7c9      	b.n	80018d8 <_Z15cz_receive_taskPv+0x8>
			} else {
				processRX(message);
 8001944:	466d      	mov	r5, sp
 8001946:	f107 041c 	add.w	r4, r7, #28
 800194a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800194c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	602b      	str	r3, [r5, #0]
 8001952:	f107 030c 	add.w	r3, r7, #12
 8001956:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001958:	f7ff ff00 	bl	800175c <_Z9processRX9RxMessage>
 800195c:	e7bc      	b.n	80018d8 <_Z15cz_receive_taskPv+0x8>
			}
		}
		else if (message.rxHeader.RTR == CAN_RTR_REMOTE) {
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d1b9      	bne.n	80018d8 <_Z15cz_receive_taskPv+0x8>
			printDebug("RTR must not be used!\n");
 8001964:	f010 ffae 	bl	80128c4 <vPortEnterCritical>
 8001968:	4803      	ldr	r0, [pc, #12]	; (8001978 <_Z15cz_receive_taskPv+0xa8>)
 800196a:	f00c fedb 	bl	800e724 <printf_>
 800196e:	f010 ffd9 	bl	8012924 <vPortExitCritical>
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8001972:	e7b1      	b.n	80018d8 <_Z15cz_receive_taskPv+0x8>
 8001974:	20000798 	.word	0x20000798
 8001978:	08016084 	.word	0x08016084

0800197c <HAL_CAN_RxFifo0MsgPendingCallback>:
		}
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800197c:	b5b0      	push	{r4, r5, r7, lr}
 800197e:	b096      	sub	sp, #88	; 0x58
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001984:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001988:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800198c:	2100      	movs	r1, #0
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f007 fda4 	bl	80094dc <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001994:	f107 040c 	add.w	r4, r7, #12
 8001998:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800199c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800199e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	657b      	str	r3, [r7, #84]	; 0x54
 80019ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ae:	2b07      	cmp	r3, #7
 80019b0:	dc0e      	bgt.n	80019d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 80019b2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80019b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019b8:	4413      	add	r3, r2
 80019ba:	7819      	ldrb	r1, [r3, #0]
 80019bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c2:	4413      	add	r3, r2
 80019c4:	460a      	mov	r2, r1
 80019c6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 80019c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019ca:	3301      	adds	r3, #1
 80019cc:	657b      	str	r3, [r7, #84]	; 0x54
 80019ce:	e7ed      	b.n	80019ac <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80019d2:	6818      	ldr	r0, [r3, #0]
 80019d4:	f107 010c 	add.w	r1, r7, #12
 80019d8:	2300      	movs	r3, #0
 80019da:	2200      	movs	r2, #0
 80019dc:	f00d faf8 	bl	800efd0 <osMessageQueuePut>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0

	}
}
 80019e4:	bf00      	nop
 80019e6:	3758      	adds	r7, #88	; 0x58
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bdb0      	pop	{r4, r5, r7, pc}
 80019ec:	20000798 	.word	0x20000798

080019f0 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80019f0:	b5b0      	push	{r4, r5, r7, lr}
 80019f2:	b096      	sub	sp, #88	; 0x58
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 80019f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80019fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001a00:	2101      	movs	r1, #1
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f007 fd6a 	bl	80094dc <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001a08:	f107 040c 	add.w	r4, r7, #12
 8001a0c:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	657b      	str	r3, [r7, #84]	; 0x54
 8001a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a22:	2b07      	cmp	r3, #7
 8001a24:	dc0e      	bgt.n	8001a44 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001a26:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001a2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a2c:	4413      	add	r3, r2
 8001a2e:	7819      	ldrb	r1, [r3, #0]
 8001a30:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a36:	4413      	add	r3, r2
 8001a38:	460a      	mov	r2, r1
 8001a3a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001a3e:	3301      	adds	r3, #1
 8001a40:	657b      	str	r3, [r7, #84]	; 0x54
 8001a42:	e7ed      	b.n	8001a20 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	f107 010c 	add.w	r1, r7, #12
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f00d fabe 	bl	800efd0 <osMessageQueuePut>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0

	}
}
 8001a58:	bf00      	nop
 8001a5a:	3758      	adds	r7, #88	; 0x58
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a60:	20000798 	.word	0x20000798

08001a64 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
	HAL_CAN_ResetError(hcan);
 8001a6c:	6878      	ldr	r0, [r7, #4]
 8001a6e:	f008 f87e 	bl	8009b6e <HAL_CAN_ResetError>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001a72:	f3ef 8211 	mrs	r2, BASEPRI
 8001a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a7a:	f383 8811 	msr	BASEPRI, r3
 8001a7e:	f3bf 8f6f 	isb	sy
 8001a82:	f3bf 8f4f 	dsb	sy
 8001a86:	60fa      	str	r2, [r7, #12]
 8001a88:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
	printDebugISR("CAN Errors got reseted!\n");
 8001a8c:	617b      	str	r3, [r7, #20]
 8001a8e:	4806      	ldr	r0, [pc, #24]	; (8001aa8 <HAL_CAN_ErrorCallback+0x44>)
 8001a90:	f00c fe48 	bl	800e724 <printf_>
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001a9e:	bf00      	nop
}
 8001aa0:	bf00      	nop
 8001aa2:	3718      	adds	r7, #24
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	0801609c 	.word	0x0801609c

08001aac <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	//LED_RGB_Write(100, 0, 0);
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d109      	bne.n	8001ae4 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f240 7281 	movw	r2, #1921	; 0x781
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	e000      	b.n	8001ae6 <_ZN3can14checkRxMessageINS_8messages13SENSOR_BTL_RXEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001ae4:	2300      	movs	r3, #0
    }
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d109      	bne.n	8001b16 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	bf0c      	ite	eq
 8001b0e:	2301      	moveq	r3, #1
 8001b10:	2300      	movne	r3, #0
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	e000      	b.n	8001b18 <_ZN3can14checkRxMessageINS_8messages17SENSOR_SDO_Req_UpEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001b16:	2300      	movs	r3, #0
    }
 8001b18:	4618      	mov	r0, r3
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d109      	bne.n	8001b48 <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f240 6201 	movw	r2, #1537	; 0x601
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	bf0c      	ite	eq
 8001b40:	2301      	moveq	r3, #1
 8001b42:	2300      	movne	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	e000      	b.n	8001b4a <_ZN3can14checkRxMessageINS_8messages19SENSOR_SDO_Req_DownEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001b48:	2300      	movs	r3, #0
    }
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <_Z41__static_initialization_and_destruction_0ii>:
#include "cz_typedefinitions.hpp"


static const osMessageQueueAttr_t czSendQueueAttr = {"czSendQueue",0,NULL,0,NULL,0};

osMessageQueueId_t czSendQueue = osMessageQueueNew(16, sizeof(TxMessage), &czSendQueueAttr);
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d10c      	bne.n	8001b82 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d107      	bne.n	8001b82 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001b72:	4a06      	ldr	r2, [pc, #24]	; (8001b8c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001b74:	2120      	movs	r1, #32
 8001b76:	2010      	movs	r0, #16
 8001b78:	f00d f9b6 	bl	800eee8 <osMessageQueueNew>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	080162bc 	.word	0x080162bc
 8001b90:	2000079c 	.word	0x2000079c

08001b94 <_GLOBAL__sub_I_czSendQueue>:
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	f7ff ffdb 	bl	8001b58 <_Z41__static_initialization_and_destruction_0ii>
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <_Z13cz_send_entryPv>:
#include "FreeRTOS.h"
#include "message_buffer.h"
#include "cmsis_os.h"


void cz_send_entry(void* argv){
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08e      	sub	sp, #56	; 0x38
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	TxMessage sendMessage;
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fb0b 	bl	80011cc <_ZN9TxMessageC1Ev>
	uint32_t TxMailbox;
	CAN_HandleTypeDef* hcanModule;

	unsigned int frame = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	633b      	str	r3, [r7, #48]	; 0x30
	while(true){
		if(osMessageQueueGet(czSendQueue,&sendMessage,NULL,osWaitForever) != osOK){
 8001bba:	4b5a      	ldr	r3, [pc, #360]	; (8001d24 <_Z13cz_send_entryPv+0x180>)
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	f107 010c 	add.w	r1, r7, #12
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f00d fa62 	bl	800f090 <osMessageQueueGet>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bf14      	ite	ne
 8001bd2:	2301      	movne	r3, #1
 8001bd4:	2300      	moveq	r3, #0
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <_Z13cz_send_entryPv+0x3c>
			Error_Handler();
 8001bdc:	f005 fdf2 	bl	80077c4 <Error_Handler>
		}
		if(sendMessage.txHeader.DLC>8){
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	2b08      	cmp	r3, #8
 8001be4:	d901      	bls.n	8001bea <_Z13cz_send_entryPv+0x46>
			Error_Handler();
 8001be6:	f005 fded 	bl	80077c4 <Error_Handler>
		}

		// Extract the bus flag from the RTR field and then clear the flag bits
		can::CAN_BusTypeDef canBus = sendMessage.txHeader.RTR & can::buses::mask;
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	0c1b      	lsrs	r3, r3, #16
 8001bee:	041b      	lsls	r3, r3, #16
 8001bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
		sendMessage.txHeader.RTR &= ~(can::buses::mask);
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	61bb      	str	r3, [r7, #24]

		if(canBus == can::buses::BUS1) {
 8001bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfe:	d102      	bne.n	8001c06 <_Z13cz_send_entryPv+0x62>
			hcanModule = &hcan1;
 8001c00:	4b49      	ldr	r3, [pc, #292]	; (8001d28 <_Z13cz_send_entryPv+0x184>)
 8001c02:	637b      	str	r3, [r7, #52]	; 0x34
 8001c04:	e010      	b.n	8001c28 <_Z13cz_send_entryPv+0x84>
		} else if(canBus == can::buses::BUS2) {
 8001c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001c0c:	d102      	bne.n	8001c14 <_Z13cz_send_entryPv+0x70>
			hcanModule = &hcan2;
 8001c0e:	4b47      	ldr	r3, [pc, #284]	; (8001d2c <_Z13cz_send_entryPv+0x188>)
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
 8001c12:	e009      	b.n	8001c28 <_Z13cz_send_entryPv+0x84>
		} else {
			// Decide on the ID
			if (sendMessage.txHeader.StdId % 2 == 0){
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d102      	bne.n	8001c24 <_Z13cz_send_entryPv+0x80>
				hcanModule = &hcan1;
 8001c1e:	4b42      	ldr	r3, [pc, #264]	; (8001d28 <_Z13cz_send_entryPv+0x184>)
 8001c20:	637b      	str	r3, [r7, #52]	; 0x34
 8001c22:	e001      	b.n	8001c28 <_Z13cz_send_entryPv+0x84>
			} else{
				hcanModule = &hcan2;
 8001c24:	4b41      	ldr	r3, [pc, #260]	; (8001d2c <_Z13cz_send_entryPv+0x188>)
 8001c26:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}

		// If there is a mailbox free on the requested CAN, just send the message
		if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001c28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c2a:	f007 fc22 	bl	8009472 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	bf14      	ite	ne
 8001c34:	2301      	movne	r3, #1
 8001c36:	2300      	moveq	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d016      	beq.n	8001c6c <_Z13cz_send_entryPv+0xc8>
			if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001c3e:	f107 0008 	add.w	r0, r7, #8
 8001c42:	f107 030c 	add.w	r3, r7, #12
 8001c46:	f103 0218 	add.w	r2, r3, #24
 8001c4a:	f107 010c 	add.w	r1, r7, #12
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c52:	f007 fb33 	bl	80092bc <HAL_CAN_AddTxMessage>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bf14      	ite	ne
 8001c5c:	2301      	movne	r3, #1
 8001c5e:	2300      	moveq	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d059      	beq.n	8001d1a <_Z13cz_send_entryPv+0x176>
				/* Transmission request Error */
				Error_Handler();
 8001c66:	f005 fdad 	bl	80077c4 <Error_Handler>
 8001c6a:	e056      	b.n	8001d1a <_Z13cz_send_entryPv+0x176>
			}
		} else {	// No mailbox free on requested CAN bus
			// Count delayed messages
			if(hcanModule == &hcan1) {
 8001c6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6e:	4a2e      	ldr	r2, [pc, #184]	; (8001d28 <_Z13cz_send_entryPv+0x184>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d10c      	bne.n	8001c8e <_Z13cz_send_entryPv+0xea>
				OD_CAN1_DelayedTxMessages++;
 8001c74:	4b2e      	ldr	r3, [pc, #184]	; (8001d30 <_Z13cz_send_entryPv+0x18c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	4a2d      	ldr	r2, [pc, #180]	; (8001d30 <_Z13cz_send_entryPv+0x18c>)
 8001c7c:	6013      	str	r3, [r2, #0]
				printDebug("WARNING :: can1 tx mailbox overflow.\n")
 8001c7e:	f010 fe21 	bl	80128c4 <vPortEnterCritical>
 8001c82:	482c      	ldr	r0, [pc, #176]	; (8001d34 <_Z13cz_send_entryPv+0x190>)
 8001c84:	f00c fd4e 	bl	800e724 <printf_>
 8001c88:	f010 fe4c 	bl	8012924 <vPortExitCritical>
 8001c8c:	e00b      	b.n	8001ca6 <_Z13cz_send_entryPv+0x102>
			} else {
				OD_CAN2_DelayedTxMessages++;
 8001c8e:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <_Z13cz_send_entryPv+0x194>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	3301      	adds	r3, #1
 8001c94:	4a28      	ldr	r2, [pc, #160]	; (8001d38 <_Z13cz_send_entryPv+0x194>)
 8001c96:	6013      	str	r3, [r2, #0]
				printDebug("WARNING :: can2 tx mailbox overflow.\n")
 8001c98:	f010 fe14 	bl	80128c4 <vPortEnterCritical>
 8001c9c:	4827      	ldr	r0, [pc, #156]	; (8001d3c <_Z13cz_send_entryPv+0x198>)
 8001c9e:	f00c fd41 	bl	800e724 <printf_>
 8001ca2:	f010 fe3f 	bl	8012924 <vPortExitCritical>
			}

			osDelay(1);		// Use smallest delay possible
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f00c feb6 	bl	800ea18 <osDelay>

			// Try again
			if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001cac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001cae:	f007 fbe0 	bl	8009472 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	bf14      	ite	ne
 8001cb8:	2301      	movne	r3, #1
 8001cba:	2300      	moveq	r3, #0
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d016      	beq.n	8001cf0 <_Z13cz_send_entryPv+0x14c>
				if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001cc2:	f107 0008 	add.w	r0, r7, #8
 8001cc6:	f107 030c 	add.w	r3, r7, #12
 8001cca:	f103 0218 	add.w	r2, r3, #24
 8001cce:	f107 010c 	add.w	r1, r7, #12
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001cd6:	f007 faf1 	bl	80092bc <HAL_CAN_AddTxMessage>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	bf14      	ite	ne
 8001ce0:	2301      	movne	r3, #1
 8001ce2:	2300      	moveq	r3, #0
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d017      	beq.n	8001d1a <_Z13cz_send_entryPv+0x176>
					/* Transmission request Error */
					canzero::handle_trasmission_request_error();
 8001cea:	f000 fa74 	bl	80021d6 <_ZN7canzero32handle_trasmission_request_errorEv>
 8001cee:	e014      	b.n	8001d1a <_Z13cz_send_entryPv+0x176>
				}
			} else {
				// Discard message
				if(hcanModule == &hcan1) {
 8001cf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf2:	4a0d      	ldr	r2, [pc, #52]	; (8001d28 <_Z13cz_send_entryPv+0x184>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d108      	bne.n	8001d0a <_Z13cz_send_entryPv+0x166>
					OD_CAN1_DiscardedTxMessages++;
 8001cf8:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <_Z13cz_send_entryPv+0x19c>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	4a10      	ldr	r2, [pc, #64]	; (8001d40 <_Z13cz_send_entryPv+0x19c>)
 8001d00:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan1);
 8001d02:	4809      	ldr	r0, [pc, #36]	; (8001d28 <_Z13cz_send_entryPv+0x184>)
 8001d04:	f000 fa5d 	bl	80021c2 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
 8001d08:	e007      	b.n	8001d1a <_Z13cz_send_entryPv+0x176>
				} else {
					OD_CAN2_DiscardedTxMessages++;
 8001d0a:	4b0e      	ldr	r3, [pc, #56]	; (8001d44 <_Z13cz_send_entryPv+0x1a0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	3301      	adds	r3, #1
 8001d10:	4a0c      	ldr	r2, [pc, #48]	; (8001d44 <_Z13cz_send_entryPv+0x1a0>)
 8001d12:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan2);
 8001d14:	4805      	ldr	r0, [pc, #20]	; (8001d2c <_Z13cz_send_entryPv+0x188>)
 8001d16:	f000 fa54 	bl	80021c2 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
				}
			}
		}
		frame ++;
 8001d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	633b      	str	r3, [r7, #48]	; 0x30
	}
 8001d20:	e74b      	b.n	8001bba <_Z13cz_send_entryPv+0x16>
 8001d22:	bf00      	nop
 8001d24:	2000079c 	.word	0x2000079c
 8001d28:	20000d4c 	.word	0x20000d4c
 8001d2c:	20000d74 	.word	0x20000d74
 8001d30:	200007f4 	.word	0x200007f4
 8001d34:	080160c4 	.word	0x080160c4
 8001d38:	2000080c 	.word	0x2000080c
 8001d3c:	080160ec 	.word	0x080160ec
 8001d40:	200007ec 	.word	0x200007ec
 8001d44:	20000804 	.word	0x20000804

08001d48 <_ZN7canzero4initEv>:
static const osMutexAttr_t nodeStateMutexAttr = {"nodeStateMutex",(osMutexPrioInherit|osMutexRobust),NULL,0,};
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);

static cz_status nodeStatus;

void canzero::init(){
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08c      	sub	sp, #48	; 0x30
 8001d4c:	af00      	add	r7, sp, #0
	setStatus(cz_status::reset);
 8001d4e:	2080      	movs	r0, #128	; 0x80
 8001d50:	f000 f91e 	bl	8001f90 <_ZN7canzero9setStatusE9cz_status>
	static_assert(can::filters::num_std <= 28, "Number of CAN Std-ID filter generated by dbc2cpp exceeds 28!");
	static_assert(can::filters::num_ext * 2 + can::filters::num_std <= 28, "Too many CAN filters configured by dbc2cpp!");
	static_assert(can::filters::num_ext != 0 || can::filters::num_std != 0, "No CAN filters were generated by dbc2cpp!");

	// Configure filters in 32-bit mode to receive Extended IDs (29-bit)
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001d54:	2300      	movs	r3, #0
 8001d56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	da4f      	bge.n	8001dfe <_ZN7canzero4initEv+0xb6>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001d62:	2301      	movs	r3, #1
 8001d64:	61fb      	str	r3, [r7, #28]

		// A 29-bit ID consists of the 11-bit Base-ID (MSB) and 18-bit Sub-ID (LSB)
		// So STID[10:0] == EXID[28:18]

		// ID high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: id_ext[28:13]
		sFilterConfig.FilterIdHigh = ((can::filters::id_ext[i] & 0x1FFFE000ul) >> 13);
 8001d66:	2300      	movs	r3, #0
 8001d68:	0b5b      	lsrs	r3, r3, #13
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	603b      	str	r3, [r7, #0]

		// ID low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: id[23:11] 1 0 0
		sFilterConfig.FilterIdLow = ((can::filters::id_ext[i] & 0x1FFF) << 3) | 4;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	b29b      	uxth	r3, r3
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	607b      	str	r3, [r7, #4]

		// Mask high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: mask_ext[28:13]
		sFilterConfig.FilterMaskIdHigh = ((can::filters::mask_ext[i] & 0x1FFFE000ul) >> 13);
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	0b5b      	lsrs	r3, r3, #13
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	60bb      	str	r3, [r7, #8]

		// Mask low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: mask[23:11] 1 1 0
		sFilterConfig.FilterMaskIdLow = ((can::filters::mask_ext[i] & 0x1FFF) << 3) | 6;
 8001d82:	2300      	movs	r3, #0
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	f043 0306 	orr.w	r3, r3, #6
 8001d8c:	60fb      	str	r3, [r7, #12]


		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8001d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d90:	0fda      	lsrs	r2, r3, #31
 8001d92:	4413      	add	r3, r2
 8001d94:	105b      	asrs	r3, r3, #1
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d102      	bne.n	8001da4 <_ZN7canzero4initEv+0x5c>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	613b      	str	r3, [r7, #16]
 8001da2:	e001      	b.n	8001da8 <_ZN7canzero4initEv+0x60>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001da4:	2301      	movs	r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8001da8:	2301      	movs	r3, #1
 8001daa:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8001dac:	230e      	movs	r3, #14
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		sFilterConfig.FilterBank = i;
 8001db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db2:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001db4:	463b      	mov	r3, r7
 8001db6:	4619      	mov	r1, r3
 8001db8:	4871      	ldr	r0, [pc, #452]	; (8001f80 <_ZN7canzero4initEv+0x238>)
 8001dba:	f007 f95b 	bl	8009074 <HAL_CAN_ConfigFilter>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf14      	ite	ne
 8001dc4:	2301      	movne	r3, #1
 8001dc6:	2300      	moveq	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <_ZN7canzero4initEv+0x8a>
			Error_Handler(); /* Filter configuration Error */
 8001dce:	f005 fcf9 	bl	80077c4 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + i;
 8001dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd4:	330e      	adds	r3, #14
 8001dd6:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001dd8:	463b      	mov	r3, r7
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4869      	ldr	r0, [pc, #420]	; (8001f84 <_ZN7canzero4initEv+0x23c>)
 8001dde:	f007 f949 	bl	8009074 <HAL_CAN_ConfigFilter>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	bf14      	ite	ne
 8001de8:	2301      	movne	r3, #1
 8001dea:	2300      	moveq	r3, #0
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <_ZN7canzero4initEv+0xae>
			Error_Handler(); /* Filter configuration Error */
 8001df2:	f005 fce7 	bl	80077c4 <Error_Handler>
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001df8:	3301      	adds	r3, #1
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dfc:	e7ac      	b.n	8001d58 <_ZN7canzero4initEv+0x10>
		}
	}


	// Configure filters in 16-bit mode to receive Standard IDs (11-bit)
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8001dfe:	2300      	movs	r3, #0
 8001e00:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e04:	2b09      	cmp	r3, #9
 8001e06:	dc69      	bgt.n	8001edc <_ZN7canzero4initEv+0x194>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterBank = can::filters::num_ext + i / 2;	// Each STM32 filterbank has two filters in 16-bit mode, so divide by 2.
 8001e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e0a:	0fda      	lsrs	r2, r3, #31
 8001e0c:	4413      	add	r3, r2
 8001e0e:	105b      	asrs	r3, r3, #1
 8001e10:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61bb      	str	r3, [r7, #24]

		// All values are shifted by 5 bits, because the internal layout is: STDID[10:0], RTR, IDE, EXID[17:15] for a 16-bit filter.
		sFilterConfig.FilterIdHigh = can::filters::id_std[i] << 5;
 8001e16:	4a5c      	ldr	r2, [pc, #368]	; (8001f88 <_ZN7canzero4initEv+0x240>)
 8001e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e1e:	015b      	lsls	r3, r3, #5
 8001e20:	603b      	str	r3, [r7, #0]
		sFilterConfig.FilterMaskIdHigh = (can::filters::mask_std[i] << 5) | 0x18;  // Set bit 3 and 4, so no remote frame and 11-bit ID.
 8001e22:	4a5a      	ldr	r2, [pc, #360]	; (8001f8c <_ZN7canzero4initEv+0x244>)
 8001e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2a:	015b      	lsls	r3, r3, #5
 8001e2c:	f043 0318 	orr.w	r3, r3, #24
 8001e30:	60bb      	str	r3, [r7, #8]

		// If number of filters is odd, configure last filter in 32-bit mode.
		if (i == can::filters::num_std - 1) {
 8001e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e34:	2b09      	cmp	r3, #9
 8001e36:	d106      	bne.n	8001e46 <_ZN7canzero4initEv+0xfe>
			// Odd number of filters and last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = 0x6; // Set bit 1 and 2, so ignore remote frames and only receive standard-ID frames
 8001e40:	2306      	movs	r3, #6
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	e011      	b.n	8001e6a <_ZN7canzero4initEv+0x122>
		} else {
			// Even number of filters or odd number and not last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = can::filters::id_std[i+1] << 5;
 8001e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4c:	3301      	adds	r3, #1
 8001e4e:	4a4e      	ldr	r2, [pc, #312]	; (8001f88 <_ZN7canzero4initEv+0x240>)
 8001e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e54:	015b      	lsls	r3, r3, #5
 8001e56:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = (can::filters::mask_std[i+1] << 5) | 0x18;  // Set bit 3 and 4, so only receive standard-ID frames and ignore remote frames
 8001e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	4a4b      	ldr	r2, [pc, #300]	; (8001f8c <_ZN7canzero4initEv+0x244>)
 8001e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e62:	015b      	lsls	r3, r3, #5
 8001e64:	f043 0318 	orr.w	r3, r3, #24
 8001e68:	60fb      	str	r3, [r7, #12]
		}

		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8001e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e6c:	0fda      	lsrs	r2, r3, #31
 8001e6e:	4413      	add	r3, r2
 8001e70:	105b      	asrs	r3, r3, #1
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d102      	bne.n	8001e80 <_ZN7canzero4initEv+0x138>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	e001      	b.n	8001e84 <_ZN7canzero4initEv+0x13c>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001e80:	2301      	movs	r3, #1
 8001e82:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8001e84:	2301      	movs	r3, #1
 8001e86:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8001e88:	230e      	movs	r3, #14
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001e8c:	463b      	mov	r3, r7
 8001e8e:	4619      	mov	r1, r3
 8001e90:	483b      	ldr	r0, [pc, #236]	; (8001f80 <_ZN7canzero4initEv+0x238>)
 8001e92:	f007 f8ef 	bl	8009074 <HAL_CAN_ConfigFilter>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf14      	ite	ne
 8001e9c:	2301      	movne	r3, #1
 8001e9e:	2300      	moveq	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <_ZN7canzero4initEv+0x162>
			Error_Handler(); /* Filter configuration Error */
 8001ea6:	f005 fc8d 	bl	80077c4 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + can::filters::num_ext + i / 2;
 8001eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eac:	0fda      	lsrs	r2, r3, #31
 8001eae:	4413      	add	r3, r2
 8001eb0:	105b      	asrs	r3, r3, #1
 8001eb2:	330e      	adds	r3, #14
 8001eb4:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001eb6:	463b      	mov	r3, r7
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4832      	ldr	r0, [pc, #200]	; (8001f84 <_ZN7canzero4initEv+0x23c>)
 8001ebc:	f007 f8da 	bl	8009074 <HAL_CAN_ConfigFilter>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	bf14      	ite	ne
 8001ec6:	2301      	movne	r3, #1
 8001ec8:	2300      	moveq	r3, #0
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <_ZN7canzero4initEv+0x18c>
			Error_Handler(); /* Filter configuration Error */
 8001ed0:	f005 fc78 	bl	80077c4 <Error_Handler>
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8001ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001eda:	e792      	b.n	8001e02 <_ZN7canzero4initEv+0xba>
		}
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK || HAL_CAN_Start(&hcan2) != HAL_OK) {
 8001edc:	4828      	ldr	r0, [pc, #160]	; (8001f80 <_ZN7canzero4initEv+0x238>)
 8001ede:	f007 f9a9 	bl	8009234 <HAL_CAN_Start>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d105      	bne.n	8001ef4 <_ZN7canzero4initEv+0x1ac>
 8001ee8:	4826      	ldr	r0, [pc, #152]	; (8001f84 <_ZN7canzero4initEv+0x23c>)
 8001eea:	f007 f9a3 	bl	8009234 <HAL_CAN_Start>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <_ZN7canzero4initEv+0x1b0>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e000      	b.n	8001efa <_ZN7canzero4initEv+0x1b2>
 8001ef8:	2300      	movs	r3, #0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <_ZN7canzero4initEv+0x1ba>
		Error_Handler(); /* Start Error */
 8001efe:	f005 fc61 	bl	80077c4 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001f02:	2102      	movs	r1, #2
 8001f04:	481e      	ldr	r0, [pc, #120]	; (8001f80 <_ZN7canzero4initEv+0x238>)
 8001f06:	f007 fbfb 	bl	8009700 <HAL_CAN_ActivateNotification>
 8001f0a:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10e      	bne.n	8001f2e <_ZN7canzero4initEv+0x1e6>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 8001f10:	2110      	movs	r1, #16
 8001f12:	481b      	ldr	r0, [pc, #108]	; (8001f80 <_ZN7canzero4initEv+0x238>)
 8001f14:	f007 fbf4 	bl	8009700 <HAL_CAN_ActivateNotification>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d107      	bne.n	8001f2e <_ZN7canzero4initEv+0x1e6>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001f1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f22:	4817      	ldr	r0, [pc, #92]	; (8001f80 <_ZN7canzero4initEv+0x238>)
 8001f24:	f007 fbec 	bl	8009700 <HAL_CAN_ActivateNotification>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <_ZN7canzero4initEv+0x1ea>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <_ZN7canzero4initEv+0x1ec>
 8001f32:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <_ZN7canzero4initEv+0x1f4>
		Error_Handler();
 8001f38:	f005 fc44 	bl	80077c4 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001f3c:	2102      	movs	r1, #2
 8001f3e:	4811      	ldr	r0, [pc, #68]	; (8001f84 <_ZN7canzero4initEv+0x23c>)
 8001f40:	f007 fbde 	bl	8009700 <HAL_CAN_ActivateNotification>
 8001f44:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10e      	bne.n	8001f68 <_ZN7canzero4initEv+0x220>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 8001f4a:	2110      	movs	r1, #16
 8001f4c:	480d      	ldr	r0, [pc, #52]	; (8001f84 <_ZN7canzero4initEv+0x23c>)
 8001f4e:	f007 fbd7 	bl	8009700 <HAL_CAN_ActivateNotification>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d107      	bne.n	8001f68 <_ZN7canzero4initEv+0x220>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8001f58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f5c:	4809      	ldr	r0, [pc, #36]	; (8001f84 <_ZN7canzero4initEv+0x23c>)
 8001f5e:	f007 fbcf 	bl	8009700 <HAL_CAN_ActivateNotification>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <_ZN7canzero4initEv+0x224>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <_ZN7canzero4initEv+0x226>
 8001f6c:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <_ZN7canzero4initEv+0x22e>
		Error_Handler();
 8001f72:	f005 fc27 	bl	80077c4 <Error_Handler>
	}
}
 8001f76:	bf00      	nop
 8001f78:	3730      	adds	r7, #48	; 0x30
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000d4c 	.word	0x20000d4c
 8001f84:	20000d74 	.word	0x20000d74
 8001f88:	080162fc 	.word	0x080162fc
 8001f8c:	080162d4 	.word	0x080162d4

08001f90 <_ZN7canzero9setStatusE9cz_status>:

void canzero::setStatus(cz_status new_status){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	4603      	mov	r3, r0
 8001f98:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(nodeStateMutex, osWaitForever);
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <_ZN7canzero9setStatusE9cz_status+0x30>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f00c fdd9 	bl	800eb5a <osMutexAcquire>
	nodeStatus = new_status;
 8001fa8:	4a06      	ldr	r2, [pc, #24]	; (8001fc4 <_ZN7canzero9setStatusE9cz_status+0x34>)
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	7013      	strb	r3, [r2, #0]
	osMutexRelease(nodeStateMutex);
 8001fae:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <_ZN7canzero9setStatusE9cz_status+0x30>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f00c fe1c 	bl	800ebf0 <osMutexRelease>
}
 8001fb8:	bf00      	nop
 8001fba:	3708      	adds	r7, #8
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	200007a0 	.word	0x200007a0
 8001fc4:	200007a4 	.word	0x200007a4

08001fc8 <_ZN7canzero9getStatusEv>:


cz_status canzero::getStatus(){
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
	osMutexAcquire(nodeStateMutex, osWaitForever);
 8001fce:	4b0a      	ldr	r3, [pc, #40]	; (8001ff8 <_ZN7canzero9getStatusEv+0x30>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f00c fdbf 	bl	800eb5a <osMutexAcquire>
	cz_status returnValue = (cz_status) nodeStatus;
 8001fdc:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <_ZN7canzero9getStatusEv+0x34>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	71fb      	strb	r3, [r7, #7]
	osMutexRelease(nodeStateMutex);
 8001fe2:	4b05      	ldr	r3, [pc, #20]	; (8001ff8 <_ZN7canzero9getStatusEv+0x30>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f00c fe02 	bl	800ebf0 <osMutexRelease>
	return returnValue;
 8001fec:	79fb      	ldrb	r3, [r7, #7]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200007a0 	.word	0x200007a0
 8001ffc:	200007a4 	.word	0x200007a4

08002000 <_Z41__static_initialization_and_destruction_0ii>:
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d10a      	bne.n	8002026 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002016:	4293      	cmp	r3, r2
 8002018:	d105      	bne.n	8002026 <_Z41__static_initialization_and_destruction_0ii+0x26>
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);
 800201a:	4805      	ldr	r0, [pc, #20]	; (8002030 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800201c:	f00c fd17 	bl	800ea4e <osMutexNew>
 8002020:	4603      	mov	r3, r0
 8002022:	4a04      	ldr	r2, [pc, #16]	; (8002034 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002024:	6013      	str	r3, [r2, #0]
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	08016324 	.word	0x08016324
 8002034:	200007a0 	.word	0x200007a0

08002038 <_GLOBAL__sub_I__ZN7canzero4initEv>:
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
 800203c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002040:	2001      	movs	r0, #1
 8002042:	f7ff ffdd 	bl	8002000 <_Z41__static_initialization_and_destruction_0ii>
 8002046:	bd80      	pop	{r7, pc}

08002048 <canzero_start>:

#ifdef __cplusplus
extern "C" {
#endif

void canzero_start(void *argv) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b090      	sub	sp, #64	; 0x40
 800204c:	af02      	add	r7, sp, #8
 800204e:	6078      	str	r0, [r7, #4]
	canzero::init();
 8002050:	f7ff fe7a 	bl	8001d48 <_ZN7canzero4initEv>

	TaskHandle_t sendTaskHandle = nullptr;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
	BaseType_t sendStatus = xTaskCreate(cz_send_entry, "cz_send", 256, NULL,
 8002058:	f107 031c 	add.w	r3, r7, #28
 800205c:	9301      	str	r3, [sp, #4]
 800205e:	2318      	movs	r3, #24
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	2300      	movs	r3, #0
 8002064:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002068:	4942      	ldr	r1, [pc, #264]	; (8002174 <canzero_start+0x12c>)
 800206a:	4843      	ldr	r0, [pc, #268]	; (8002178 <canzero_start+0x130>)
 800206c:	f00e fe39 	bl	8010ce2 <xTaskCreate>
 8002070:	6378      	str	r0, [r7, #52]	; 0x34
			osPriorityNormal, &sendTaskHandle);
	if (sendStatus != pdPASS) {
 8002072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002074:	2b01      	cmp	r3, #1
 8002076:	d006      	beq.n	8002086 <canzero_start+0x3e>
		printDebug("Failed to start canzero send task");
 8002078:	f010 fc24 	bl	80128c4 <vPortEnterCritical>
 800207c:	483f      	ldr	r0, [pc, #252]	; (800217c <canzero_start+0x134>)
 800207e:	f00c fb51 	bl	800e724 <printf_>
 8002082:	f010 fc4f 	bl	8012924 <vPortExitCritical>
	}

	TaskHandle_t recvTaskHandle = nullptr;
 8002086:	2300      	movs	r3, #0
 8002088:	61bb      	str	r3, [r7, #24]
	BaseType_t recvStatus = xTaskCreate(cz_receive_task, "cz_receive", 256, NULL,
 800208a:	f107 0318 	add.w	r3, r7, #24
 800208e:	9301      	str	r3, [sp, #4]
 8002090:	2318      	movs	r3, #24
 8002092:	9300      	str	r3, [sp, #0]
 8002094:	2300      	movs	r3, #0
 8002096:	f44f 7280 	mov.w	r2, #256	; 0x100
 800209a:	4939      	ldr	r1, [pc, #228]	; (8002180 <canzero_start+0x138>)
 800209c:	4839      	ldr	r0, [pc, #228]	; (8002184 <canzero_start+0x13c>)
 800209e:	f00e fe20 	bl	8010ce2 <xTaskCreate>
 80020a2:	6338      	str	r0, [r7, #48]	; 0x30
			osPriorityNormal, &recvTaskHandle);
	if (recvStatus != pdPASS) {
 80020a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d006      	beq.n	80020b8 <canzero_start+0x70>
		printDebug("Failed to start canzero receive task");
 80020aa:	f010 fc0b 	bl	80128c4 <vPortEnterCritical>
 80020ae:	4836      	ldr	r0, [pc, #216]	; (8002188 <canzero_start+0x140>)
 80020b0:	f00c fb38 	bl	800e724 <printf_>
 80020b4:	f010 fc36 	bl	8012924 <vPortExitCritical>
	}
	TaskHandle_t heartbeatConsumerTaskHandle = nullptr;
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]
	BaseType_t heartbeatConsumerStatus = xTaskCreate(
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	2318      	movs	r3, #24
 80020c4:	9300      	str	r3, [sp, #0]
 80020c6:	2300      	movs	r3, #0
 80020c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020cc:	492f      	ldr	r1, [pc, #188]	; (800218c <canzero_start+0x144>)
 80020ce:	4830      	ldr	r0, [pc, #192]	; (8002190 <canzero_start+0x148>)
 80020d0:	f00e fe07 	bl	8010ce2 <xTaskCreate>
 80020d4:	62f8      	str	r0, [r7, #44]	; 0x2c
			canzero::heartbeat::consumer_entry, "cz_ht_con", 256, NULL,
			osPriorityNormal, &heartbeatConsumerTaskHandle);
	if(heartbeatConsumerStatus != pdPASS){
 80020d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d006      	beq.n	80020ea <canzero_start+0xa2>
		printDebug("Failed to start canzero heartbeat consumer task");
 80020dc:	f010 fbf2 	bl	80128c4 <vPortEnterCritical>
 80020e0:	482c      	ldr	r0, [pc, #176]	; (8002194 <canzero_start+0x14c>)
 80020e2:	f00c fb1f 	bl	800e724 <printf_>
 80020e6:	f010 fc1d 	bl	8012924 <vPortExitCritical>
	}

	TaskHandle_t heartbeatProducerTaskHandle = nullptr;
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
	BaseType_t heartbeatProducerStatus = xTaskCreate(
 80020ee:	f107 0310 	add.w	r3, r7, #16
 80020f2:	9301      	str	r3, [sp, #4]
 80020f4:	2318      	movs	r3, #24
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	2300      	movs	r3, #0
 80020fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020fe:	4926      	ldr	r1, [pc, #152]	; (8002198 <canzero_start+0x150>)
 8002100:	4826      	ldr	r0, [pc, #152]	; (800219c <canzero_start+0x154>)
 8002102:	f00e fdee 	bl	8010ce2 <xTaskCreate>
 8002106:	62b8      	str	r0, [r7, #40]	; 0x28
			canzero::heartbeat::producer_entry, "cz_ht_pro", 256, NULL,
			osPriorityNormal, &heartbeatProducerTaskHandle
			);
	if(heartbeatProducerStatus != pdPASS){
 8002108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800210a:	2b01      	cmp	r3, #1
 800210c:	d006      	beq.n	800211c <canzero_start+0xd4>
		printDebug("Failed to start canzero heartbeat producer task");
 800210e:	f010 fbd9 	bl	80128c4 <vPortEnterCritical>
 8002112:	4823      	ldr	r0, [pc, #140]	; (80021a0 <canzero_start+0x158>)
 8002114:	f00c fb06 	bl	800e724 <printf_>
 8002118:	f010 fc04 	bl	8012924 <vPortExitCritical>
	}

	TaskHandle_t emcyTaskHandle = nullptr;
 800211c:	2300      	movs	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
	BaseType_t emcyStatus = xTaskCreate(canzero::emergency::consumer_entry, "cz_emcy", 256, NULL,
 8002120:	f107 030c 	add.w	r3, r7, #12
 8002124:	9301      	str	r3, [sp, #4]
 8002126:	2328      	movs	r3, #40	; 0x28
 8002128:	9300      	str	r3, [sp, #0]
 800212a:	2300      	movs	r3, #0
 800212c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002130:	491c      	ldr	r1, [pc, #112]	; (80021a4 <canzero_start+0x15c>)
 8002132:	481d      	ldr	r0, [pc, #116]	; (80021a8 <canzero_start+0x160>)
 8002134:	f00e fdd5 	bl	8010ce2 <xTaskCreate>
 8002138:	6278      	str	r0, [r7, #36]	; 0x24
			osPriorityHigh, &emcyTaskHandle);
	if(emcyStatus != pdPASS){
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	2b01      	cmp	r3, #1
 800213e:	d001      	beq.n	8002144 <canzero_start+0xfc>
		Error_Handler();
 8002140:	f005 fb40 	bl	80077c4 <Error_Handler>
	}

	TaskHandle_t sendOdEntriesHandle = nullptr;
 8002144:	2300      	movs	r3, #0
 8002146:	60bb      	str	r3, [r7, #8]
	BaseType_t sendOdEntriesStatus = xTaskCreate(sendOdEntriesTask, "cz_sendod", 128, NULL,
 8002148:	f107 0308 	add.w	r3, r7, #8
 800214c:	9301      	str	r3, [sp, #4]
 800214e:	2317      	movs	r3, #23
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2300      	movs	r3, #0
 8002154:	2280      	movs	r2, #128	; 0x80
 8002156:	4915      	ldr	r1, [pc, #84]	; (80021ac <canzero_start+0x164>)
 8002158:	4815      	ldr	r0, [pc, #84]	; (80021b0 <canzero_start+0x168>)
 800215a:	f00e fdc2 	bl	8010ce2 <xTaskCreate>
 800215e:	6238      	str	r0, [r7, #32]
			osPriorityBelowNormal7, &sendOdEntriesHandle);
	if(sendOdEntriesStatus != pdPASS){
 8002160:	6a3b      	ldr	r3, [r7, #32]
 8002162:	2b01      	cmp	r3, #1
 8002164:	d001      	beq.n	800216a <canzero_start+0x122>
		Error_Handler();
 8002166:	f005 fb2d 	bl	80077c4 <Error_Handler>
	}


	while (true) {
		osDelay(osWaitForever);
 800216a:	f04f 30ff 	mov.w	r0, #4294967295
 800216e:	f00c fc53 	bl	800ea18 <osDelay>
 8002172:	e7fa      	b.n	800216a <canzero_start+0x122>
 8002174:	08016124 	.word	0x08016124
 8002178:	08001ba5 	.word	0x08001ba5
 800217c:	0801612c 	.word	0x0801612c
 8002180:	08016150 	.word	0x08016150
 8002184:	080018d1 	.word	0x080018d1
 8002188:	0801615c 	.word	0x0801615c
 800218c:	08016184 	.word	0x08016184
 8002190:	0800136d 	.word	0x0800136d
 8002194:	08016190 	.word	0x08016190
 8002198:	080161c0 	.word	0x080161c0
 800219c:	08001305 	.word	0x08001305
 80021a0:	080161cc 	.word	0x080161cc
 80021a4:	080161fc 	.word	0x080161fc
 80021a8:	0800129b 	.word	0x0800129b
 80021ac:	08016204 	.word	0x08016204
 80021b0:	080050fd 	.word	0x080050fd

080021b4 <_ZN7canzero24handle_emergency_warningEv>:
#define CANZERO_STATIC_SRC_CZ_WEAK_CPP_

#include "cz_weak.hpp"


void __attribute__((weak)) canzero::handle_emergency_warning(){
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>:

void __attribute__((weak)) canzero::handle_heartbeat_miss(){
	//TODO missing default implementation.
}

void __attribute__((weak)) canzero::handle_txmailbox_overflow(CAN_HandleTypeDef* hcan){
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
	//TODO missing default implementation.
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <_ZN7canzero32handle_trasmission_request_errorEv>:

void __attribute__((weak)) canzero::handle_trasmission_request_error(){
 80021d6:	b480      	push	{r7}
 80021d8:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 80021da:	bf00      	nop
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80021ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80021f2:	f010 fea9 	bl	8012f48 <roundf>
 80021f6:	eef0 7a40 	vmov.f32	s15, s0
 80021fa:	eeb0 0a67 	vmov.f32	s0, s15
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_ZN3can11MessageBaseC1EmhbPKh>:
        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt, const uint8_t rxBuf[8]) noexcept : id{_id}, dlc{_dlc}, isExtendedId{_isExt} {
 8002204:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002208:	b0a2      	sub	sp, #136	; 0x88
 800220a:	af00      	add	r7, sp, #0
 800220c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8002210:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8002214:	4619      	mov	r1, r3
 8002216:	4613      	mov	r3, r2
 8002218:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800221c:	460b      	mov	r3, r1
 800221e:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002222:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002226:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002230:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8002234:	7113      	strb	r3, [r2, #4]
 8002236:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800223a:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 800223e:	7153      	strb	r3, [r2, #5]
            intel = static_cast<uint32_t>(rxBuf[0]) + (static_cast<uint32_t>(rxBuf[1]) << 8) + (static_cast<uint32_t>(rxBuf[2]) << 16) + (static_cast<uint32_t>(rxBuf[3]) << 24);
 8002240:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800224c:	3301      	adds	r3, #1
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	441a      	add	r2, r3
 8002254:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002258:	3302      	adds	r3, #2
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	041b      	lsls	r3, r3, #16
 800225e:	441a      	add	r2, r3
 8002260:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002264:	3303      	adds	r3, #3
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	061b      	lsls	r3, r3, #24
 800226a:	4413      	add	r3, r2
 800226c:	2200      	movs	r2, #0
 800226e:	461c      	mov	r4, r3
 8002270:	4615      	mov	r5, r2
 8002272:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002276:	e9c3 4502 	strd	r4, r5, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[4]) << 32) + (static_cast<uint64_t>(rxBuf[5]) << 40);
 800227a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800227e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8002282:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002286:	3304      	adds	r3, #4
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2200      	movs	r2, #0
 800228e:	673b      	str	r3, [r7, #112]	; 0x70
 8002290:	677a      	str	r2, [r7, #116]	; 0x74
 8002292:	f04f 0000 	mov.w	r0, #0
 8002296:	f04f 0100 	mov.w	r1, #0
 800229a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800229c:	0019      	movs	r1, r3
 800229e:	2000      	movs	r0, #0
 80022a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022a4:	3305      	adds	r3, #5
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2200      	movs	r2, #0
 80022ac:	66bb      	str	r3, [r7, #104]	; 0x68
 80022ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 80022ba:	0233      	lsls	r3, r6, #8
 80022bc:	2200      	movs	r2, #0
 80022be:	eb10 0802 	adds.w	r8, r0, r2
 80022c2:	eb41 0903 	adc.w	r9, r1, r3
 80022c6:	eb14 0308 	adds.w	r3, r4, r8
 80022ca:	663b      	str	r3, [r7, #96]	; 0x60
 80022cc:	eb45 0309 	adc.w	r3, r5, r9
 80022d0:	667b      	str	r3, [r7, #100]	; 0x64
 80022d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022d6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80022da:	e9c3 1202 	strd	r1, r2, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[6]) << 48) + (static_cast<uint64_t>(rxBuf[7]) << 56);
 80022de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022e2:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80022e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022ea:	3306      	adds	r3, #6
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2200      	movs	r2, #0
 80022f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80022f4:	65fa      	str	r2, [r7, #92]	; 0x5c
 80022f6:	f04f 0000 	mov.w	r0, #0
 80022fa:	f04f 0100 	mov.w	r1, #0
 80022fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002300:	0419      	lsls	r1, r3, #16
 8002302:	2000      	movs	r0, #0
 8002304:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002308:	3307      	adds	r3, #7
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2200      	movs	r2, #0
 8002310:	653b      	str	r3, [r7, #80]	; 0x50
 8002312:	657a      	str	r2, [r7, #84]	; 0x54
 8002314:	f04f 0200 	mov.w	r2, #0
 8002318:	f04f 0300 	mov.w	r3, #0
 800231c:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 800231e:	0633      	lsls	r3, r6, #24
 8002320:	2200      	movs	r2, #0
 8002322:	eb10 0a02 	adds.w	sl, r0, r2
 8002326:	eb41 0b03 	adc.w	fp, r1, r3
 800232a:	eb14 030a 	adds.w	r3, r4, sl
 800232e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002330:	eb45 030b 	adc.w	r3, r5, fp
 8002334:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002336:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800233a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800233e:	e9c3 1202 	strd	r1, r2, [r3, #8]
            motorola = static_cast<uint32_t>(rxBuf[7]) + (static_cast<uint32_t>(rxBuf[6]) << 8) + (static_cast<uint32_t>(rxBuf[5]) << 16) + (static_cast<uint32_t>(rxBuf[4]) << 24);
 8002342:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002346:	3307      	adds	r3, #7
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002350:	3306      	adds	r3, #6
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	441a      	add	r2, r3
 8002358:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800235c:	3305      	adds	r3, #5
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	041b      	lsls	r3, r3, #16
 8002362:	441a      	add	r2, r3
 8002364:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002368:	3304      	adds	r3, #4
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	061b      	lsls	r3, r3, #24
 800236e:	4413      	add	r3, r2
 8002370:	2200      	movs	r2, #0
 8002372:	643b      	str	r3, [r7, #64]	; 0x40
 8002374:	647a      	str	r2, [r7, #68]	; 0x44
 8002376:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800237a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800237e:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[3]) << 32) + (static_cast<uint64_t>(rxBuf[2]) << 40);
 8002382:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002386:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800238a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800238e:	3303      	adds	r3, #3
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	2200      	movs	r2, #0
 8002396:	63bb      	str	r3, [r7, #56]	; 0x38
 8002398:	63fa      	str	r2, [r7, #60]	; 0x3c
 800239a:	f04f 0000 	mov.w	r0, #0
 800239e:	f04f 0100 	mov.w	r1, #0
 80023a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a4:	0019      	movs	r1, r3
 80023a6:	2000      	movs	r0, #0
 80023a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023ac:	3302      	adds	r3, #2
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2200      	movs	r2, #0
 80023b4:	633b      	str	r3, [r7, #48]	; 0x30
 80023b6:	637a      	str	r2, [r7, #52]	; 0x34
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	f04f 0300 	mov.w	r3, #0
 80023c0:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80023c2:	0233      	lsls	r3, r6, #8
 80023c4:	2200      	movs	r2, #0
 80023c6:	1886      	adds	r6, r0, r2
 80023c8:	62be      	str	r6, [r7, #40]	; 0x28
 80023ca:	eb41 0303 	adc.w	r3, r1, r3
 80023ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023d0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80023d4:	460b      	mov	r3, r1
 80023d6:	18e3      	adds	r3, r4, r3
 80023d8:	623b      	str	r3, [r7, #32]
 80023da:	4613      	mov	r3, r2
 80023dc:	eb45 0303 	adc.w	r3, r5, r3
 80023e0:	627b      	str	r3, [r7, #36]	; 0x24
 80023e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023e6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80023ea:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[1]) << 48) + (static_cast<uint64_t>(rxBuf[0]) << 56);
 80023ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023f2:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80023f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023fa:	3301      	adds	r3, #1
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2200      	movs	r2, #0
 8002402:	61bb      	str	r3, [r7, #24]
 8002404:	61fa      	str	r2, [r7, #28]
 8002406:	f04f 0000 	mov.w	r0, #0
 800240a:	f04f 0100 	mov.w	r1, #0
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	0419      	lsls	r1, r3, #16
 8002412:	2000      	movs	r0, #0
 8002414:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2200      	movs	r2, #0
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	617a      	str	r2, [r7, #20]
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	693e      	ldr	r6, [r7, #16]
 800242c:	0633      	lsls	r3, r6, #24
 800242e:	2200      	movs	r2, #0
 8002430:	1886      	adds	r6, r0, r2
 8002432:	60be      	str	r6, [r7, #8]
 8002434:	eb41 0303 	adc.w	r3, r1, r3
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800243e:	460b      	mov	r3, r1
 8002440:	18e3      	adds	r3, r4, r3
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	4613      	mov	r3, r2
 8002446:	eb45 0303 	adc.w	r3, r5, r3
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002450:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002454:	e9c3 1204 	strd	r1, r2, [r3, #16]
        };
 8002458:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800245c:	4618      	mov	r0, r3
 800245e:	3788      	adds	r7, #136	; 0x88
 8002460:	46bd      	mov	sp, r7
 8002462:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002466:	4770      	bx	lr

08002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 3;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1, 0x601 };
            constexpr static uint16_t min = static_cast<uint16_t>(0);
            constexpr static uint16_t max = static_cast<uint16_t>(4095);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002468:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800246c:	b087      	sub	sp, #28
 800246e:	af00      	add	r7, sp, #0
 8002470:	60f8      	str	r0, [r7, #12]
 8002472:	60b9      	str	r1, [r7, #8]
 8002474:	607a      	str	r2, [r7, #4]
 8002476:	807b      	strh	r3, [r7, #2]
                if (value > max) {
 8002478:	887b      	ldrh	r3, [r7, #2]
 800247a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800247e:	d302      	bcc.n	8002486 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht+0x1e>
                    value = max;
 8002480:	f640 73ff 	movw	r3, #4095	; 0xfff
 8002484:	807b      	strh	r3, [r7, #2]
                }
                if (value < min) {
                    value = min;
                }
                uint16_t rawValue = (value);
 8002486:	887b      	ldrh	r3, [r7, #2]
 8002488:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002490:	8af9      	ldrh	r1, [r7, #22]
 8002492:	2000      	movs	r0, #0
 8002494:	468a      	mov	sl, r1
 8002496:	4683      	mov	fp, r0
 8002498:	f3ca 040b 	ubfx	r4, sl, #0, #12
 800249c:	2500      	movs	r5, #0
 800249e:	ea42 0804 	orr.w	r8, r2, r4
 80024a2:	ea43 0905 	orr.w	r9, r3, r5
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	e9c3 8900 	strd	r8, r9, [r3]
            }
 80024ac:	bf00      	nop
 80024ae:	371c      	adds	r7, #28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80024b6:	4770      	bx	lr

080024b8 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80024b8:	b480      	push	{r7}
 80024ba:	b085      	sub	sp, #20
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	b293      	uxth	r3, r2
 80024ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ce:	81fb      	strh	r3, [r7, #14]
                return value;
 80024d0:	89fb      	ldrh	r3, [r7, #14]
            }
 80024d2:	4618      	mov	r0, r3
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr

080024de <_ZN3can7signals19SENSOR_SDO_RespCode3setERyS2_Rhh>:
        class SENSOR_SDO_RespCode {
            public:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x581 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80024de:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80024e2:	b087      	sub	sp, #28
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	607a      	str	r2, [r7, #4]
 80024ec:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xF000ull;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	2200      	movs	r2, #0
 80024fc:	4698      	mov	r8, r3
 80024fe:	4691      	mov	r9, r2
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	ea4f 3309 	mov.w	r3, r9, lsl #12
 800250c:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 8002510:	ea4f 3208 	mov.w	r2, r8, lsl #12
 8002514:	b294      	uxth	r4, r2
 8002516:	2500      	movs	r5, #0
 8002518:	ea40 0a04 	orr.w	sl, r0, r4
 800251c:	ea41 0b05 	orr.w	fp, r1, r5
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 8002526:	bf00      	nop
 8002528:	371c      	adds	r7, #28
 800252a:	46bd      	mov	sp, r7
 800252c:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002530:	4770      	bx	lr

08002532 <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002532:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002536:	b088      	sub	sp, #32
 8002538:	af00      	add	r7, sp, #0
 800253a:	6178      	str	r0, [r7, #20]
 800253c:	6139      	str	r1, [r7, #16]
 800253e:	60fa      	str	r2, [r7, #12]
 8002540:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002548:	d302      	bcc.n	8002550 <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 800254a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800254e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1129);
 8002550:	f240 4369 	movw	r3, #1129	; 0x469
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	6939      	ldr	r1, [r7, #16]
 8002558:	6978      	ldr	r0, [r7, #20]
 800255a:	f7ff ff85 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002568:	69f9      	ldr	r1, [r7, #28]
 800256a:	2000      	movs	r0, #0
 800256c:	468a      	mov	sl, r1
 800256e:	4683      	mov	fp, r0
 8002570:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002574:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002578:	ea4f 4418 	mov.w	r4, r8, lsr #16
 800257c:	0424      	lsls	r4, r4, #16
 800257e:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002582:	ea42 0104 	orr.w	r1, r2, r4
 8002586:	6039      	str	r1, [r7, #0]
 8002588:	432b      	orrs	r3, r5
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002592:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2205      	movs	r2, #5
 800259a:	701a      	strb	r2, [r3, #0]
            }
 800259c:	bf00      	nop
 800259e:	3720      	adds	r7, #32
 80025a0:	46bd      	mov	sp, r7
 80025a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080025a6 <_ZN3can7signals26SENSOR_OD_CAN2_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1128            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80025a6:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025aa:	b086      	sub	sp, #24
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
 80025b4:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1128);
 80025b6:	f44f 638d 	mov.w	r3, #1128	; 0x468
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f7ff ff52 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80025c4:	78fb      	ldrb	r3, [r7, #3]
 80025c6:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025ce:	7dfb      	ldrb	r3, [r7, #23]
 80025d0:	2200      	movs	r2, #0
 80025d2:	4698      	mov	r8, r3
 80025d4:	4691      	mov	r9, r2
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80025e2:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80025e6:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80025ea:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80025ee:	2500      	movs	r5, #0
 80025f0:	ea40 0a04 	orr.w	sl, r0, r4
 80025f4:	ea41 0b05 	orr.w	fp, r1, r5
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2203      	movs	r2, #3
 8002602:	701a      	strb	r2, [r3, #0]
            }
 8002604:	bf00      	nop
 8002606:	3718      	adds	r7, #24
 8002608:	46bd      	mov	sp, r7
 800260a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800260e <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 800260e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	6178      	str	r0, [r7, #20]
 8002618:	6139      	str	r1, [r7, #16]
 800261a:	60fa      	str	r2, [r7, #12]
 800261c:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002624:	d302      	bcc.n	800262c <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8002626:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800262a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1127);
 800262c:	f240 4367 	movw	r3, #1127	; 0x467
 8002630:	68fa      	ldr	r2, [r7, #12]
 8002632:	6939      	ldr	r1, [r7, #16]
 8002634:	6978      	ldr	r0, [r7, #20]
 8002636:	f7ff ff17 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002644:	69f9      	ldr	r1, [r7, #28]
 8002646:	2000      	movs	r0, #0
 8002648:	468a      	mov	sl, r1
 800264a:	4683      	mov	fp, r0
 800264c:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002650:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002654:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8002658:	0424      	lsls	r4, r4, #16
 800265a:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 800265e:	ea42 0104 	orr.w	r1, r2, r4
 8002662:	6039      	str	r1, [r7, #0]
 8002664:	432b      	orrs	r3, r5
 8002666:	607b      	str	r3, [r7, #4]
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800266e:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2205      	movs	r2, #5
 8002676:	701a      	strb	r2, [r3, #0]
            }
 8002678:	bf00      	nop
 800267a:	3720      	adds	r7, #32
 800267c:	46bd      	mov	sp, r7
 800267e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002682 <_ZN3can7signals21SENSOR_OD_CAN2_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1126            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002682:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1126);
 8002692:	f240 4366 	movw	r3, #1126	; 0x466
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f7ff fee4 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80026a0:	78fb      	ldrb	r3, [r7, #3]
 80026a2:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026aa:	7dfb      	ldrb	r3, [r7, #23]
 80026ac:	2200      	movs	r2, #0
 80026ae:	4698      	mov	r8, r3
 80026b0:	4691      	mov	r9, r2
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80026be:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80026c2:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80026c6:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80026ca:	2500      	movs	r5, #0
 80026cc:	ea40 0a04 	orr.w	sl, r0, r4
 80026d0:	ea41 0b05 	orr.w	fp, r1, r5
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2203      	movs	r2, #3
 80026de:	701a      	strb	r2, [r3, #0]
            }
 80026e0:	bf00      	nop
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080026ea <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80026ea:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6178      	str	r0, [r7, #20]
 80026f4:	6139      	str	r1, [r7, #16]
 80026f6:	60fa      	str	r2, [r7, #12]
 80026f8:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 80026fa:	897b      	ldrh	r3, [r7, #10]
 80026fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002700:	d902      	bls.n	8002708 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8002702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002706:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8002708:	897b      	ldrh	r3, [r7, #10]
 800270a:	2b7c      	cmp	r3, #124	; 0x7c
 800270c:	d801      	bhi.n	8002712 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 800270e:	237d      	movs	r3, #125	; 0x7d
 8002710:	817b      	strh	r3, [r7, #10]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1124);
 8002712:	f240 4364 	movw	r3, #1124	; 0x464
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	6939      	ldr	r1, [r7, #16]
 800271a:	6978      	ldr	r0, [r7, #20]
 800271c:	f7ff fea4 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002720:	897b      	ldrh	r3, [r7, #10]
 8002722:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272a:	8bf9      	ldrh	r1, [r7, #30]
 800272c:	2000      	movs	r0, #0
 800272e:	4688      	mov	r8, r1
 8002730:	4681      	mov	r9, r0
 8002732:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002736:	6079      	str	r1, [r7, #4]
 8002738:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800273c:	6039      	str	r1, [r7, #0]
 800273e:	683c      	ldr	r4, [r7, #0]
 8002740:	2500      	movs	r5, #0
 8002742:	ea42 0a04 	orr.w	sl, r2, r4
 8002746:	ea43 0b05 	orr.w	fp, r3, r5
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2204      	movs	r2, #4
 8002754:	701a      	strb	r2, [r3, #0]
            }
 8002756:	bf00      	nop
 8002758:	3720      	adds	r7, #32
 800275a:	46bd      	mov	sp, r7
 800275c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002760 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1124) {
 800276a:	6839      	ldr	r1, [r7, #0]
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff fea3 	bl	80024b8 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002772:	4603      	mov	r3, r0
 8002774:	461a      	mov	r2, r3
 8002776:	f240 4364 	movw	r3, #1124	; 0x464
 800277a:	429a      	cmp	r2, r3
 800277c:	bf14      	ite	ne
 800277e:	2301      	movne	r3, #1
 8002780:	2300      	moveq	r3, #0
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d000      	beq.n	800278a <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_+0x2a>
                    while(1);
 8002788:	e7fe      	b.n	8002788 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	0c02      	lsrs	r2, r0, #16
 800279a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800279e:	0c0b      	lsrs	r3, r1, #16
 80027a0:	4613      	mov	r3, r2
 80027a2:	81fb      	strh	r3, [r7, #14]
                return value;
 80027a4:	89fb      	ldrh	r3, [r7, #14]
            }
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1123            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80027ae:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
 80027bc:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1123);
 80027be:	f240 4363 	movw	r3, #1123	; 0x463
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68b9      	ldr	r1, [r7, #8]
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f7ff fe4e 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80027cc:	78fb      	ldrb	r3, [r7, #3]
 80027ce:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027d6:	7dfb      	ldrb	r3, [r7, #23]
 80027d8:	2200      	movs	r2, #0
 80027da:	4698      	mov	r8, r3
 80027dc:	4691      	mov	r9, r2
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f04f 0300 	mov.w	r3, #0
 80027e6:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80027ea:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80027ee:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80027f2:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80027f6:	2500      	movs	r5, #0
 80027f8:	ea40 0a04 	orr.w	sl, r0, r4
 80027fc:	ea41 0b05 	orr.w	fp, r1, r5
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2203      	movs	r2, #3
 800280a:	701a      	strb	r2, [r3, #0]
            }
 800280c:	bf00      	nop
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002816 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002816:	b580      	push	{r7, lr}
 8002818:	b084      	sub	sp, #16
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1123) {
 8002820:	6839      	ldr	r1, [r7, #0]
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff fe48 	bl	80024b8 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002828:	4603      	mov	r3, r0
 800282a:	461a      	mov	r2, r3
 800282c:	f240 4363 	movw	r3, #1123	; 0x463
 8002830:	429a      	cmp	r2, r3
 8002832:	bf14      	ite	ne
 8002834:	2301      	movne	r3, #1
 8002836:	2300      	moveq	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	d000      	beq.n	8002840 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 800283e:	e7fe      	b.n	800283e <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	0c02      	lsrs	r2, r0, #16
 8002850:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002854:	0c0b      	lsrs	r3, r1, #16
 8002856:	4613      	mov	r3, r2
 8002858:	73fb      	strb	r3, [r7, #15]
                return value;
 800285a:	7bfb      	ldrb	r3, [r7, #15]
            }
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1122            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002868:	b088      	sub	sp, #32
 800286a:	af00      	add	r7, sp, #0
 800286c:	6178      	str	r0, [r7, #20]
 800286e:	6139      	str	r1, [r7, #16]
 8002870:	60fa      	str	r2, [r7, #12]
 8002872:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1122);
 8002874:	f240 4362 	movw	r3, #1122	; 0x462
 8002878:	68fa      	ldr	r2, [r7, #12]
 800287a:	6939      	ldr	r1, [r7, #16]
 800287c:	6978      	ldr	r0, [r7, #20]
 800287e:	f7ff fdf3 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800288c:	69f9      	ldr	r1, [r7, #28]
 800288e:	2000      	movs	r0, #0
 8002890:	468a      	mov	sl, r1
 8002892:	4683      	mov	fp, r0
 8002894:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002898:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800289c:	480c      	ldr	r0, [pc, #48]	; (80028d0 <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm+0x6c>)
 800289e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80028a2:	ea08 0400 	and.w	r4, r8, r0
 80028a6:	ea09 0501 	and.w	r5, r9, r1
 80028aa:	ea42 0104 	orr.w	r1, r2, r4
 80028ae:	6039      	str	r1, [r7, #0]
 80028b0:	432b      	orrs	r3, r5
 80028b2:	607b      	str	r3, [r7, #4]
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80028ba:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2206      	movs	r2, #6
 80028c2:	701a      	strb	r2, [r3, #0]
            }
 80028c4:	bf00      	nop
 80028c6:	3720      	adds	r7, #32
 80028c8:	46bd      	mov	sp, r7
 80028ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ce:	bf00      	nop
 80028d0:	ffff0000 	.word	0xffff0000

080028d4 <_ZN3can7signals23SENSOR_OD_CAN2_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1121            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80028d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1121);
 80028e4:	f240 4361 	movw	r3, #1121	; 0x461
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68b9      	ldr	r1, [r7, #8]
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f7ff fdbb 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028fc:	7dfb      	ldrb	r3, [r7, #23]
 80028fe:	2200      	movs	r2, #0
 8002900:	4698      	mov	r8, r3
 8002902:	4691      	mov	r9, r2
 8002904:	f04f 0200 	mov.w	r2, #0
 8002908:	f04f 0300 	mov.w	r3, #0
 800290c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002910:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002914:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002918:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800291c:	2500      	movs	r5, #0
 800291e:	ea40 0a04 	orr.w	sl, r0, r4
 8002922:	ea41 0b05 	orr.w	fp, r1, r5
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2203      	movs	r2, #3
 8002930:	701a      	strb	r2, [r3, #0]
            }
 8002932:	bf00      	nop
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800293c <_ZN3can7signals23SENSOR_OD_CAN2_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1120            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800293c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002940:	b086      	sub	sp, #24
 8002942:	af00      	add	r7, sp, #0
 8002944:	60f8      	str	r0, [r7, #12]
 8002946:	60b9      	str	r1, [r7, #8]
 8002948:	607a      	str	r2, [r7, #4]
 800294a:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1120);
 800294c:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	68b9      	ldr	r1, [r7, #8]
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f7ff fd87 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002964:	7dfb      	ldrb	r3, [r7, #23]
 8002966:	2200      	movs	r2, #0
 8002968:	4698      	mov	r8, r3
 800296a:	4691      	mov	r9, r2
 800296c:	f04f 0200 	mov.w	r2, #0
 8002970:	f04f 0300 	mov.w	r3, #0
 8002974:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002978:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800297c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002980:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002984:	2500      	movs	r5, #0
 8002986:	ea40 0a04 	orr.w	sl, r0, r4
 800298a:	ea41 0b05 	orr.w	fp, r1, r5
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2203      	movs	r2, #3
 8002998:	701a      	strb	r2, [r3, #0]
            }
 800299a:	bf00      	nop
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080029a4 <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80029a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029a8:	b088      	sub	sp, #32
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6178      	str	r0, [r7, #20]
 80029ae:	6139      	str	r1, [r7, #16]
 80029b0:	60fa      	str	r2, [r7, #12]
 80029b2:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029ba:	d302      	bcc.n	80029c2 <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80029bc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80029c0:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1113);
 80029c2:	f240 4359 	movw	r3, #1113	; 0x459
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	6939      	ldr	r1, [r7, #16]
 80029ca:	6978      	ldr	r0, [r7, #20]
 80029cc:	f7ff fd4c 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029da:	69f9      	ldr	r1, [r7, #28]
 80029dc:	2000      	movs	r0, #0
 80029de:	468a      	mov	sl, r1
 80029e0:	4683      	mov	fp, r0
 80029e2:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80029e6:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80029ea:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80029ee:	0424      	lsls	r4, r4, #16
 80029f0:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80029f4:	ea42 0104 	orr.w	r1, r2, r4
 80029f8:	6039      	str	r1, [r7, #0]
 80029fa:	432b      	orrs	r3, r5
 80029fc:	607b      	str	r3, [r7, #4]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002a04:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2205      	movs	r2, #5
 8002a0c:	701a      	strb	r2, [r3, #0]
            }
 8002a0e:	bf00      	nop
 8002a10:	3720      	adds	r7, #32
 8002a12:	46bd      	mov	sp, r7
 8002a14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002a18 <_ZN3can7signals26SENSOR_OD_CAN1_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1112            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002a18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a1c:	b086      	sub	sp, #24
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
 8002a26:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1112);
 8002a28:	f44f 638b 	mov.w	r3, #1112	; 0x458
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	68b9      	ldr	r1, [r7, #8]
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f7ff fd19 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002a36:	78fb      	ldrb	r3, [r7, #3]
 8002a38:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a40:	7dfb      	ldrb	r3, [r7, #23]
 8002a42:	2200      	movs	r2, #0
 8002a44:	4698      	mov	r8, r3
 8002a46:	4691      	mov	r9, r2
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	f04f 0300 	mov.w	r3, #0
 8002a50:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002a54:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002a58:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002a5c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002a60:	2500      	movs	r5, #0
 8002a62:	ea40 0a04 	orr.w	sl, r0, r4
 8002a66:	ea41 0b05 	orr.w	fp, r1, r5
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2203      	movs	r2, #3
 8002a74:	701a      	strb	r2, [r3, #0]
            }
 8002a76:	bf00      	nop
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002a80 <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a84:	b088      	sub	sp, #32
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6178      	str	r0, [r7, #20]
 8002a8a:	6139      	str	r1, [r7, #16]
 8002a8c:	60fa      	str	r2, [r7, #12]
 8002a8e:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a96:	d302      	bcc.n	8002a9e <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8002a98:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002a9c:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1111);
 8002a9e:	f240 4357 	movw	r3, #1111	; 0x457
 8002aa2:	68fa      	ldr	r2, [r7, #12]
 8002aa4:	6939      	ldr	r1, [r7, #16]
 8002aa6:	6978      	ldr	r0, [r7, #20]
 8002aa8:	f7ff fcde 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab6:	69f9      	ldr	r1, [r7, #28]
 8002ab8:	2000      	movs	r0, #0
 8002aba:	468a      	mov	sl, r1
 8002abc:	4683      	mov	fp, r0
 8002abe:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002ac2:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002ac6:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8002aca:	0424      	lsls	r4, r4, #16
 8002acc:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002ad0:	ea42 0104 	orr.w	r1, r2, r4
 8002ad4:	6039      	str	r1, [r7, #0]
 8002ad6:	432b      	orrs	r3, r5
 8002ad8:	607b      	str	r3, [r7, #4]
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002ae0:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2205      	movs	r2, #5
 8002ae8:	701a      	strb	r2, [r3, #0]
            }
 8002aea:	bf00      	nop
 8002aec:	3720      	adds	r7, #32
 8002aee:	46bd      	mov	sp, r7
 8002af0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002af4 <_ZN3can7signals21SENSOR_OD_CAN1_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1110            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002af8:	b086      	sub	sp, #24
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1110);
 8002b04:	f240 4356 	movw	r3, #1110	; 0x456
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	68b9      	ldr	r1, [r7, #8]
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f7ff fcab 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	4698      	mov	r8, r3
 8002b22:	4691      	mov	r9, r2
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	f04f 0300 	mov.w	r3, #0
 8002b2c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002b30:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002b34:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002b38:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002b3c:	2500      	movs	r5, #0
 8002b3e:	ea40 0a04 	orr.w	sl, r0, r4
 8002b42:	ea41 0b05 	orr.w	fp, r1, r5
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2203      	movs	r2, #3
 8002b50:	701a      	strb	r2, [r3, #0]
            }
 8002b52:	bf00      	nop
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002b5c <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8002b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b60:	b088      	sub	sp, #32
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6178      	str	r0, [r7, #20]
 8002b66:	6139      	str	r1, [r7, #16]
 8002b68:	60fa      	str	r2, [r7, #12]
 8002b6a:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8002b6c:	897b      	ldrh	r3, [r7, #10]
 8002b6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b72:	d902      	bls.n	8002b7a <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8002b74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b78:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8002b7a:	897b      	ldrh	r3, [r7, #10]
 8002b7c:	2b7c      	cmp	r3, #124	; 0x7c
 8002b7e:	d801      	bhi.n	8002b84 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 8002b80:	237d      	movs	r3, #125	; 0x7d
 8002b82:	817b      	strh	r3, [r7, #10]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1108);
 8002b84:	f240 4354 	movw	r3, #1108	; 0x454
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	6939      	ldr	r1, [r7, #16]
 8002b8c:	6978      	ldr	r0, [r7, #20]
 8002b8e:	f7ff fc6b 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8002b92:	897b      	ldrh	r3, [r7, #10]
 8002b94:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9c:	8bf9      	ldrh	r1, [r7, #30]
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	4688      	mov	r8, r1
 8002ba2:	4681      	mov	r9, r0
 8002ba4:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002ba8:	6079      	str	r1, [r7, #4]
 8002baa:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002bae:	6039      	str	r1, [r7, #0]
 8002bb0:	683c      	ldr	r4, [r7, #0]
 8002bb2:	2500      	movs	r5, #0
 8002bb4:	ea42 0a04 	orr.w	sl, r2, r4
 8002bb8:	ea43 0b05 	orr.w	fp, r3, r5
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2204      	movs	r2, #4
 8002bc6:	701a      	strb	r2, [r3, #0]
            }
 8002bc8:	bf00      	nop
 8002bca:	3720      	adds	r7, #32
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002bd2 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b084      	sub	sp, #16
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1108) {
 8002bdc:	6839      	ldr	r1, [r7, #0]
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff fc6a 	bl	80024b8 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002be4:	4603      	mov	r3, r0
 8002be6:	461a      	mov	r2, r3
 8002be8:	f240 4354 	movw	r3, #1108	; 0x454
 8002bec:	429a      	cmp	r2, r3
 8002bee:	bf14      	ite	ne
 8002bf0:	2301      	movne	r3, #1
 8002bf2:	2300      	moveq	r3, #0
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d000      	beq.n	8002bfc <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_+0x2a>
                    while(1);
 8002bfa:	e7fe      	b.n	8002bfa <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	f04f 0300 	mov.w	r3, #0
 8002c0a:	0c02      	lsrs	r2, r0, #16
 8002c0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002c10:	0c0b      	lsrs	r3, r1, #16
 8002c12:	4613      	mov	r3, r2
 8002c14:	81fb      	strh	r3, [r7, #14]
                return value;
 8002c16:	89fb      	ldrh	r3, [r7, #14]
            }
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1107            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002c20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c24:	b086      	sub	sp, #24
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	60f8      	str	r0, [r7, #12]
 8002c2a:	60b9      	str	r1, [r7, #8]
 8002c2c:	607a      	str	r2, [r7, #4]
 8002c2e:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1107);
 8002c30:	f240 4353 	movw	r3, #1107	; 0x453
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	68b9      	ldr	r1, [r7, #8]
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f7ff fc15 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c48:	7dfb      	ldrb	r3, [r7, #23]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	4698      	mov	r8, r3
 8002c4e:	4691      	mov	r9, r2
 8002c50:	f04f 0200 	mov.w	r2, #0
 8002c54:	f04f 0300 	mov.w	r3, #0
 8002c58:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002c5c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002c60:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002c64:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002c68:	2500      	movs	r5, #0
 8002c6a:	ea40 0a04 	orr.w	sl, r0, r4
 8002c6e:	ea41 0b05 	orr.w	fp, r1, r5
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	701a      	strb	r2, [r3, #0]
            }
 8002c7e:	bf00      	nop
 8002c80:	3718      	adds	r7, #24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002c88 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 1107) {
 8002c92:	6839      	ldr	r1, [r7, #0]
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff fc0f 	bl	80024b8 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	f240 4353 	movw	r3, #1107	; 0x453
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	bf14      	ite	ne
 8002ca6:	2301      	movne	r3, #1
 8002ca8:	2300      	moveq	r3, #0
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d000      	beq.n	8002cb2 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8002cb0:	e7fe      	b.n	8002cb0 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	0c02      	lsrs	r2, r0, #16
 8002cc2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002cc6:	0c0b      	lsrs	r3, r1, #16
 8002cc8:	4613      	mov	r3, r2
 8002cca:	73fb      	strb	r3, [r7, #15]
                return value;
 8002ccc:	7bfb      	ldrb	r3, [r7, #15]
            }
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3710      	adds	r7, #16
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1106            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002cd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cdc:	b088      	sub	sp, #32
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6178      	str	r0, [r7, #20]
 8002ce2:	6139      	str	r1, [r7, #16]
 8002ce4:	60fa      	str	r2, [r7, #12]
 8002ce6:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1106);
 8002ce8:	f240 4352 	movw	r3, #1106	; 0x452
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	6939      	ldr	r1, [r7, #16]
 8002cf0:	6978      	ldr	r0, [r7, #20]
 8002cf2:	f7ff fbb9 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d00:	69f9      	ldr	r1, [r7, #28]
 8002d02:	2000      	movs	r0, #0
 8002d04:	468a      	mov	sl, r1
 8002d06:	4683      	mov	fp, r0
 8002d08:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002d0c:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002d10:	480c      	ldr	r0, [pc, #48]	; (8002d44 <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm+0x6c>)
 8002d12:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002d16:	ea08 0400 	and.w	r4, r8, r0
 8002d1a:	ea09 0501 	and.w	r5, r9, r1
 8002d1e:	ea42 0104 	orr.w	r1, r2, r4
 8002d22:	6039      	str	r1, [r7, #0]
 8002d24:	432b      	orrs	r3, r5
 8002d26:	607b      	str	r3, [r7, #4]
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002d2e:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2206      	movs	r2, #6
 8002d36:	701a      	strb	r2, [r3, #0]
            }
 8002d38:	bf00      	nop
 8002d3a:	3720      	adds	r7, #32
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d42:	bf00      	nop
 8002d44:	ffff0000 	.word	0xffff0000

08002d48 <_ZN3can7signals23SENSOR_OD_CAN1_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1105            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d4c:	b086      	sub	sp, #24
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	60f8      	str	r0, [r7, #12]
 8002d52:	60b9      	str	r1, [r7, #8]
 8002d54:	607a      	str	r2, [r7, #4]
 8002d56:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1105);
 8002d58:	f240 4351 	movw	r3, #1105	; 0x451
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	68b9      	ldr	r1, [r7, #8]
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f7ff fb81 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
 8002d72:	2200      	movs	r2, #0
 8002d74:	4698      	mov	r8, r3
 8002d76:	4691      	mov	r9, r2
 8002d78:	f04f 0200 	mov.w	r2, #0
 8002d7c:	f04f 0300 	mov.w	r3, #0
 8002d80:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002d84:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002d88:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002d8c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002d90:	2500      	movs	r5, #0
 8002d92:	ea40 0a04 	orr.w	sl, r0, r4
 8002d96:	ea41 0b05 	orr.w	fp, r1, r5
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2203      	movs	r2, #3
 8002da4:	701a      	strb	r2, [r3, #0]
            }
 8002da6:	bf00      	nop
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002db0 <_ZN3can7signals23SENSOR_OD_CAN1_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1104            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
 8002dbe:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1104);
 8002dc0:	f44f 638a 	mov.w	r3, #1104	; 0x450
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	68b9      	ldr	r1, [r7, #8]
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f7ff fb4d 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dd8:	7dfb      	ldrb	r3, [r7, #23]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	4698      	mov	r8, r3
 8002dde:	4691      	mov	r9, r2
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8002dec:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8002df0:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8002df4:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8002df8:	2500      	movs	r5, #0
 8002dfa:	ea40 0a04 	orr.w	sl, r0, r4
 8002dfe:	ea41 0b05 	orr.w	fp, r1, r5
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	701a      	strb	r2, [r3, #0]
            }
 8002e0e:	bf00      	nop
 8002e10:	3718      	adds	r7, #24
 8002e12:	46bd      	mov	sp, r7
 8002e14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002e18 <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e1c:	b088      	sub	sp, #32
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	6178      	str	r0, [r7, #20]
 8002e22:	6139      	str	r1, [r7, #16]
 8002e24:	60fa      	str	r2, [r7, #12]
 8002e26:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e2e:	d302      	bcc.n	8002e36 <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm+0x1e>
                    value = max;
 8002e30:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8002e34:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1073);
 8002e36:	f240 4331 	movw	r3, #1073	; 0x431
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	6939      	ldr	r1, [r7, #16]
 8002e3e:	6978      	ldr	r0, [r7, #20]
 8002e40:	f7ff fb12 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4e:	69f9      	ldr	r1, [r7, #28]
 8002e50:	2000      	movs	r0, #0
 8002e52:	468a      	mov	sl, r1
 8002e54:	4683      	mov	fp, r0
 8002e56:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002e5a:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002e5e:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8002e62:	0424      	lsls	r4, r4, #16
 8002e64:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8002e68:	ea42 0104 	orr.w	r1, r2, r4
 8002e6c:	6039      	str	r1, [r7, #0]
 8002e6e:	432b      	orrs	r3, r5
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002e78:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2205      	movs	r2, #5
 8002e80:	701a      	strb	r2, [r3, #0]
            }
 8002e82:	bf00      	nop
 8002e84:	3720      	adds	r7, #32
 8002e86:	46bd      	mov	sp, r7
 8002e88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002e8c <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1072            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8002e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e90:	b088      	sub	sp, #32
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6178      	str	r0, [r7, #20]
 8002e96:	6139      	str	r1, [r7, #16]
 8002e98:	60fa      	str	r2, [r7, #12]
 8002e9a:	60bb      	str	r3, [r7, #8]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1072);
 8002e9c:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	6939      	ldr	r1, [r7, #16]
 8002ea4:	6978      	ldr	r0, [r7, #20]
 8002ea6:	f7ff fadf 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb4:	69f9      	ldr	r1, [r7, #28]
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	468a      	mov	sl, r1
 8002eba:	4683      	mov	fp, r0
 8002ebc:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8002ec0:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8002ec4:	480c      	ldr	r0, [pc, #48]	; (8002ef8 <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm+0x6c>)
 8002ec6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002eca:	ea08 0400 	and.w	r4, r8, r0
 8002ece:	ea09 0501 	and.w	r5, r9, r1
 8002ed2:	ea42 0104 	orr.w	r1, r2, r4
 8002ed6:	6039      	str	r1, [r7, #0]
 8002ed8:	432b      	orrs	r3, r5
 8002eda:	607b      	str	r3, [r7, #4]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002ee2:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2206      	movs	r2, #6
 8002eea:	701a      	strb	r2, [r3, #0]
            }
 8002eec:	bf00      	nop
 8002eee:	3720      	adds	r7, #32
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ef6:	bf00      	nop
 8002ef8:	ffff0000 	.word	0xffff0000

08002efc <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8002efc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f00:	b086      	sub	sp, #24
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8002f0a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f12:	d305      	bcc.n	8002f20 <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy+0x24>
                    value = max;
 8002f14:	f04f 32ff 	mov.w	r2, #4294967295
 8002f18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f1c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1057);
 8002f20:	f240 4321 	movw	r3, #1057	; 0x421
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	f7ff fa9d 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8002f2e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f32:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002f3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f40:	f04f 0200 	mov.w	r2, #0
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	040b      	lsls	r3, r1, #16
 8002f4a:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8002f4e:	0402      	lsls	r2, r0, #16
 8002f50:	ea48 0402 	orr.w	r4, r8, r2
 8002f54:	ea49 0503 	orr.w	r5, r9, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2208      	movs	r2, #8
 8002f62:	701a      	strb	r2, [r3, #0]
            }
 8002f64:	bf00      	nop
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002f6e <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8002f6e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8002f7c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f84:	d305      	bcc.n	8002f92 <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy+0x24>
                    value = max;
 8002f86:	f04f 32ff 	mov.w	r2, #4294967295
 8002f8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f8e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1056);
 8002f92:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68b9      	ldr	r1, [r7, #8]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f7ff fa64 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8002fa0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002fa4:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002fae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002fb2:	f04f 0200 	mov.w	r2, #0
 8002fb6:	f04f 0300 	mov.w	r3, #0
 8002fba:	040b      	lsls	r3, r1, #16
 8002fbc:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8002fc0:	0402      	lsls	r2, r0, #16
 8002fc2:	ea48 0402 	orr.w	r4, r8, r2
 8002fc6:	ea49 0503 	orr.w	r5, r9, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2208      	movs	r2, #8
 8002fd4:	701a      	strb	r2, [r3, #0]
            }
 8002fd6:	bf00      	nop
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002fe0 <_ZN3can7signals16SENSOR_OD_SdcOut3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1046            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fe4:	b086      	sub	sp, #24
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	60f8      	str	r0, [r7, #12]
 8002fea:	60b9      	str	r1, [r7, #8]
 8002fec:	607a      	str	r2, [r7, #4]
 8002fee:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1046);
 8002ff0:	f240 4316 	movw	r3, #1046	; 0x416
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	68b9      	ldr	r1, [r7, #8]
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f7ff fa35 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003008:	7dfb      	ldrb	r3, [r7, #23]
 800300a:	2200      	movs	r2, #0
 800300c:	4698      	mov	r8, r3
 800300e:	4691      	mov	r9, r2
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800301c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003020:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003024:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003028:	2500      	movs	r5, #0
 800302a:	ea40 0a04 	orr.w	sl, r0, r4
 800302e:	ea41 0b05 	orr.w	fp, r1, r5
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2203      	movs	r2, #3
 800303c:	701a      	strb	r2, [r3, #0]
            }
 800303e:	bf00      	nop
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003048 <_ZN3can7signals15SENSOR_OD_SdcIn3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1045            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003048:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800304c:	b086      	sub	sp, #24
 800304e:	af00      	add	r7, sp, #0
 8003050:	60f8      	str	r0, [r7, #12]
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	607a      	str	r2, [r7, #4]
 8003056:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1045);
 8003058:	f240 4315 	movw	r3, #1045	; 0x415
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	68b9      	ldr	r1, [r7, #8]
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f7ff fa01 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003066:	78fb      	ldrb	r3, [r7, #3]
 8003068:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003070:	7dfb      	ldrb	r3, [r7, #23]
 8003072:	2200      	movs	r2, #0
 8003074:	4698      	mov	r8, r3
 8003076:	4691      	mov	r9, r2
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003084:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003088:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800308c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003090:	2500      	movs	r5, #0
 8003092:	ea40 0a04 	orr.w	sl, r0, r4
 8003096:	ea41 0b05 	orr.w	fp, r1, r5
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2203      	movs	r2, #3
 80030a4:	701a      	strb	r2, [r3, #0]
            }
 80030a6:	bf00      	nop
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080030b0 <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80030b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030b4:	b088      	sub	sp, #32
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	6178      	str	r0, [r7, #20]
 80030ba:	6139      	str	r1, [r7, #16]
 80030bc:	60fa      	str	r2, [r7, #12]
 80030be:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030c6:	d302      	bcc.n	80030ce <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm+0x1e>
                    value = max;
 80030c8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80030cc:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1044);
 80030ce:	f240 4314 	movw	r3, #1044	; 0x414
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	6939      	ldr	r1, [r7, #16]
 80030d6:	6978      	ldr	r0, [r7, #20]
 80030d8:	f7ff f9c6 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030e6:	69f9      	ldr	r1, [r7, #28]
 80030e8:	2000      	movs	r0, #0
 80030ea:	468a      	mov	sl, r1
 80030ec:	4683      	mov	fp, r0
 80030ee:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80030f2:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80030f6:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80030fa:	0424      	lsls	r4, r4, #16
 80030fc:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8003100:	ea42 0104 	orr.w	r1, r2, r4
 8003104:	6039      	str	r1, [r7, #0]
 8003106:	432b      	orrs	r3, r5
 8003108:	607b      	str	r3, [r7, #4]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003110:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2205      	movs	r2, #5
 8003118:	701a      	strb	r2, [r3, #0]
            }
 800311a:	bf00      	nop
 800311c:	3720      	adds	r7, #32
 800311e:	46bd      	mov	sp, r7
 8003120:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003124 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(65.535);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003128:	b088      	sub	sp, #32
 800312a:	af00      	add	r7, sp, #0
 800312c:	6178      	str	r0, [r7, #20]
 800312e:	6139      	str	r1, [r7, #16]
 8003130:	60fa      	str	r2, [r7, #12]
 8003132:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8003136:	edd7 7a02 	vldr	s15, [r7, #8]
 800313a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80031cc <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xa8>
 800313e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003146:	dd01      	ble.n	800314c <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0x28>
                    value = max;
 8003148:	4b21      	ldr	r3, [pc, #132]	; (80031d0 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xac>)
 800314a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 800314c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003150:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003158:	d502      	bpl.n	8003160 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0x3c>
                    value = min;
 800315a:	f04f 0300 	mov.w	r3, #0
 800315e:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1043);
 8003160:	f240 4313 	movw	r3, #1043	; 0x413
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	6939      	ldr	r1, [r7, #16]
 8003168:	6978      	ldr	r0, [r7, #20]
 800316a:	f7ff f97d 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.001f)));
 800316e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003172:	eddf 6a18 	vldr	s13, [pc, #96]	; 80031d4 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf+0xb0>
 8003176:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800317a:	eeb0 0a47 	vmov.f32	s0, s14
 800317e:	f7ff f831 	bl	80021e4 <_ZSt5roundf>
 8003182:	eef0 7a40 	vmov.f32	s15, s0
 8003186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800318a:	ee17 3a90 	vmov	r3, s15
 800318e:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003196:	8bf9      	ldrh	r1, [r7, #30]
 8003198:	2000      	movs	r0, #0
 800319a:	4688      	mov	r8, r1
 800319c:	4681      	mov	r9, r0
 800319e:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80031a2:	6079      	str	r1, [r7, #4]
 80031a4:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80031a8:	6039      	str	r1, [r7, #0]
 80031aa:	683c      	ldr	r4, [r7, #0]
 80031ac:	2500      	movs	r5, #0
 80031ae:	ea42 0a04 	orr.w	sl, r2, r4
 80031b2:	ea43 0b05 	orr.w	fp, r3, r5
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2204      	movs	r2, #4
 80031c0:	701a      	strb	r2, [r3, #0]
            }
 80031c2:	bf00      	nop
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031cc:	428311ec 	.word	0x428311ec
 80031d0:	428311ec 	.word	0x428311ec
 80031d4:	3a83126f 	.word	0x3a83126f

080031d8 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-30);
            constexpr static float max = static_cast<float>(625.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80031d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031dc:	b088      	sub	sp, #32
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6178      	str	r0, [r7, #20]
 80031e2:	6139      	str	r1, [r7, #16]
 80031e4:	60fa      	str	r2, [r7, #12]
 80031e6:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80031ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80031ee:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800328c <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xb4>
 80031f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031fa:	dd01      	ble.n	8003200 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0x28>
                    value = max;
 80031fc:	4b24      	ldr	r3, [pc, #144]	; (8003290 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xb8>)
 80031fe:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003200:	edd7 7a02 	vldr	s15, [r7, #8]
 8003204:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 8003208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800320c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003210:	d501      	bpl.n	8003216 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0x3e>
                    value = min;
 8003212:	4b20      	ldr	r3, [pc, #128]	; (8003294 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xbc>)
 8003214:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1042);
 8003216:	f240 4312 	movw	r3, #1042	; 0x412
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	6939      	ldr	r1, [r7, #16]
 800321e:	6978      	ldr	r0, [r7, #20]
 8003220:	f7ff f922 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-30.0f)) / (0.01f)));
 8003224:	edd7 7a02 	vldr	s15, [r7, #8]
 8003228:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800322c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003230:	eddf 6a19 	vldr	s13, [pc, #100]	; 8003298 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf+0xc0>
 8003234:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003238:	eeb0 0a47 	vmov.f32	s0, s14
 800323c:	f7fe ffd2 	bl	80021e4 <_ZSt5roundf>
 8003240:	eef0 7a40 	vmov.f32	s15, s0
 8003244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003248:	ee17 3a90 	vmov	r3, s15
 800324c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003254:	8bf9      	ldrh	r1, [r7, #30]
 8003256:	2000      	movs	r0, #0
 8003258:	4688      	mov	r8, r1
 800325a:	4681      	mov	r9, r0
 800325c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003260:	6079      	str	r1, [r7, #4]
 8003262:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003266:	6039      	str	r1, [r7, #0]
 8003268:	683c      	ldr	r4, [r7, #0]
 800326a:	2500      	movs	r5, #0
 800326c:	ea42 0a04 	orr.w	sl, r2, r4
 8003270:	ea43 0b05 	orr.w	fp, r3, r5
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2204      	movs	r2, #4
 800327e:	701a      	strb	r2, [r3, #0]
            }
 8003280:	bf00      	nop
 8003282:	3720      	adds	r7, #32
 8003284:	46bd      	mov	sp, r7
 8003286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800328a:	bf00      	nop
 800328c:	441c5666 	.word	0x441c5666
 8003290:	441c5666 	.word	0x441c5666
 8003294:	c1f00000 	.word	0xc1f00000
 8003298:	3c23d70a 	.word	0x3c23d70a

0800329c <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(262140);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 800329c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a0:	b088      	sub	sp, #32
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6178      	str	r0, [r7, #20]
 80032a6:	6139      	str	r1, [r7, #16]
 80032a8:	60fa      	str	r2, [r7, #12]
 80032aa:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	4a16      	ldr	r2, [pc, #88]	; (8003308 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x6c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d901      	bls.n	80032b8 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x1c>
                    value = max;
 80032b4:	4b14      	ldr	r3, [pc, #80]	; (8003308 <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm+0x6c>)
 80032b6:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1041);
 80032b8:	f240 4311 	movw	r3, #1041	; 0x411
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	6939      	ldr	r1, [r7, #16]
 80032c0:	6978      	ldr	r0, [r7, #20]
 80032c2:	f7ff f8d1 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = static_cast<uint32_t>((value) / (4));
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	089b      	lsrs	r3, r3, #2
 80032ca:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d2:	69f9      	ldr	r1, [r7, #28]
 80032d4:	2000      	movs	r0, #0
 80032d6:	4688      	mov	r8, r1
 80032d8:	4681      	mov	r9, r0
 80032da:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80032de:	6079      	str	r1, [r7, #4]
 80032e0:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80032e4:	6039      	str	r1, [r7, #0]
 80032e6:	683c      	ldr	r4, [r7, #0]
 80032e8:	2500      	movs	r5, #0
 80032ea:	ea42 0a04 	orr.w	sl, r2, r4
 80032ee:	ea43 0b05 	orr.w	fp, r3, r5
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2204      	movs	r2, #4
 80032fc:	701a      	strb	r2, [r3, #0]
            }
 80032fe:	bf00      	nop
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003308:	0003fffc 	.word	0x0003fffc

0800330c <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 800330c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003310:	b088      	sub	sp, #32
 8003312:	af00      	add	r7, sp, #0
 8003314:	6178      	str	r0, [r7, #20]
 8003316:	6139      	str	r1, [r7, #16]
 8003318:	60fa      	str	r2, [r7, #12]
 800331a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800331e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003322:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80033c0 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0xb4>
 8003326:	eef4 7ac7 	vcmpe.f32	s15, s14
 800332a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332e:	dd01      	ble.n	8003334 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0x28>
                    value = max;
 8003330:	4b24      	ldr	r3, [pc, #144]	; (80033c4 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0xb8>)
 8003332:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8003334:	edd7 7a02 	vldr	s15, [r7, #8]
 8003338:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800333c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003340:	d502      	bpl.n	8003348 <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf+0x3c>
                    value = min;
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	60bb      	str	r3, [r7, #8]
                }
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1040);
 8003348:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800334c:	68fa      	ldr	r2, [r7, #12]
 800334e:	6939      	ldr	r1, [r7, #16]
 8003350:	6978      	ldr	r0, [r7, #20]
 8003352:	f7ff f889 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 8003356:	edd7 7a02 	vldr	s15, [r7, #8]
 800335a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800335e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003362:	eeb0 0a47 	vmov.f32	s0, s14
 8003366:	f7fe ff3d 	bl	80021e4 <_ZSt5roundf>
 800336a:	eef0 7a40 	vmov.f32	s15, s0
 800336e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003372:	edc7 7a01 	vstr	s15, [r7, #4]
 8003376:	793b      	ldrb	r3, [r7, #4]
 8003378:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003380:	7ffb      	ldrb	r3, [r7, #31]
 8003382:	2200      	movs	r2, #0
 8003384:	4698      	mov	r8, r3
 8003386:	4691      	mov	r9, r2
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	f04f 0300 	mov.w	r3, #0
 8003390:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003394:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003398:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800339c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80033a0:	2500      	movs	r5, #0
 80033a2:	ea40 0a04 	orr.w	sl, r0, r4
 80033a6:	ea41 0b05 	orr.w	fp, r1, r5
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2203      	movs	r2, #3
 80033b4:	701a      	strb	r2, [r3, #0]
            }
 80033b6:	bf00      	nop
 80033b8:	3720      	adds	r7, #32
 80033ba:	46bd      	mov	sp, r7
 80033bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033c0:	42c80000 	.word	0x42c80000
 80033c4:	42c80000 	.word	0x42c80000

080033c8 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 33            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80033c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033cc:	b088      	sub	sp, #32
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6178      	str	r0, [r7, #20]
 80033d2:	6139      	str	r1, [r7, #16]
 80033d4:	60fa      	str	r2, [r7, #12]
 80033d6:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 33);
 80033d8:	2321      	movs	r3, #33	; 0x21
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	6939      	ldr	r1, [r7, #16]
 80033de:	6978      	ldr	r0, [r7, #20]
 80033e0:	f7ff f842 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80033e4:	897b      	ldrh	r3, [r7, #10]
 80033e6:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ee:	8bf9      	ldrh	r1, [r7, #30]
 80033f0:	2000      	movs	r0, #0
 80033f2:	4688      	mov	r8, r1
 80033f4:	4681      	mov	r9, r0
 80033f6:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80033fa:	6079      	str	r1, [r7, #4]
 80033fc:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003400:	6039      	str	r1, [r7, #0]
 8003402:	683c      	ldr	r4, [r7, #0]
 8003404:	2500      	movs	r5, #0
 8003406:	ea42 0a04 	orr.w	sl, r2, r4
 800340a:	ea43 0b05 	orr.w	fp, r3, r5
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2204      	movs	r2, #4
 8003418:	701a      	strb	r2, [r3, #0]
            }
 800341a:	bf00      	nop
 800341c:	3720      	adds	r7, #32
 800341e:	46bd      	mov	sp, r7
 8003420:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003424 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 33) {
 800342e:	6839      	ldr	r1, [r7, #0]
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f7ff f841 	bl	80024b8 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8003436:	4603      	mov	r3, r0
 8003438:	2b21      	cmp	r3, #33	; 0x21
 800343a:	bf14      	ite	ne
 800343c:	2301      	movne	r3, #1
 800343e:	2300      	moveq	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d000      	beq.n	8003448 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_+0x24>
                    while(1);
 8003446:	e7fe      	b.n	8003446 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	f04f 0300 	mov.w	r3, #0
 8003456:	0c02      	lsrs	r2, r0, #16
 8003458:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800345c:	0c0b      	lsrs	r3, r1, #16
 800345e:	4613      	mov	r3, r2
 8003460:	81fb      	strh	r3, [r7, #14]
                return value;
 8003462:	89fb      	ldrh	r3, [r7, #14]
            }
 8003464:	4618      	mov	r0, r3
 8003466:	3710      	adds	r7, #16
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 32            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800346c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003470:	b086      	sub	sp, #24
 8003472:	af00      	add	r7, sp, #0
 8003474:	60f8      	str	r0, [r7, #12]
 8003476:	60b9      	str	r1, [r7, #8]
 8003478:	607a      	str	r2, [r7, #4]
 800347a:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 32);
 800347c:	2320      	movs	r3, #32
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68b9      	ldr	r1, [r7, #8]
 8003482:	68f8      	ldr	r0, [r7, #12]
 8003484:	f7fe fff0 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003492:	7dfb      	ldrb	r3, [r7, #23]
 8003494:	2200      	movs	r2, #0
 8003496:	4698      	mov	r8, r3
 8003498:	4691      	mov	r9, r2
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80034a6:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80034aa:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80034ae:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80034b2:	2500      	movs	r5, #0
 80034b4:	ea40 0a04 	orr.w	sl, r0, r4
 80034b8:	ea41 0b05 	orr.w	fp, r1, r5
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2203      	movs	r2, #3
 80034c6:	701a      	strb	r2, [r3, #0]
            }
 80034c8:	bf00      	nop
 80034ca:	3718      	adds	r7, #24
 80034cc:	46bd      	mov	sp, r7
 80034ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080034d2 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
 80034da:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 32) {
 80034dc:	6839      	ldr	r1, [r7, #0]
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f7fe ffea 	bl	80024b8 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	bf14      	ite	ne
 80034ea:	2301      	movne	r3, #1
 80034ec:	2300      	moveq	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d000      	beq.n	80034f6 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_+0x24>
                    while(1);
 80034f4:	e7fe      	b.n	80034f4 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_+0x22>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034fc:	f04f 0200 	mov.w	r2, #0
 8003500:	f04f 0300 	mov.w	r3, #0
 8003504:	0c02      	lsrs	r2, r0, #16
 8003506:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800350a:	0c0b      	lsrs	r3, r1, #16
 800350c:	4613      	mov	r3, r2
 800350e:	73fb      	strb	r3, [r7, #15]
                return value;
 8003510:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 16            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800351a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af00      	add	r7, sp, #0
 8003522:	6178      	str	r0, [r7, #20]
 8003524:	6139      	str	r1, [r7, #16]
 8003526:	60fa      	str	r2, [r7, #12]
 8003528:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 16);
 800352a:	2310      	movs	r3, #16
 800352c:	68fa      	ldr	r2, [r7, #12]
 800352e:	6939      	ldr	r1, [r7, #16]
 8003530:	6978      	ldr	r0, [r7, #20]
 8003532:	f7fe ff99 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003536:	897b      	ldrh	r3, [r7, #10]
 8003538:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	8bf9      	ldrh	r1, [r7, #30]
 8003542:	2000      	movs	r0, #0
 8003544:	4688      	mov	r8, r1
 8003546:	4681      	mov	r9, r0
 8003548:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800354c:	6079      	str	r1, [r7, #4]
 800354e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003552:	6039      	str	r1, [r7, #0]
 8003554:	683c      	ldr	r4, [r7, #0]
 8003556:	2500      	movs	r5, #0
 8003558:	ea42 0a04 	orr.w	sl, r2, r4
 800355c:	ea43 0b05 	orr.w	fp, r3, r5
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2204      	movs	r2, #4
 800356a:	701a      	strb	r2, [r3, #0]
            }
 800356c:	bf00      	nop
 800356e:	3720      	adds	r7, #32
 8003570:	46bd      	mov	sp, r7
 8003572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003576 <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
                if (SENSOR_SDO_ID::get(intel, motorola) != 16) {
 8003580:	6839      	ldr	r1, [r7, #0]
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7fe ff98 	bl	80024b8 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8003588:	4603      	mov	r3, r0
 800358a:	2b10      	cmp	r3, #16
 800358c:	bf14      	ite	ne
 800358e:	2301      	movne	r3, #1
 8003590:	2300      	moveq	r3, #0
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d000      	beq.n	800359a <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_+0x24>
                    while(1);
 8003598:	e7fe      	b.n	8003598 <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	0c02      	lsrs	r2, r0, #16
 80035aa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80035ae:	0c0b      	lsrs	r3, r1, #16
 80035b0:	4613      	mov	r3, r2
 80035b2:	81fb      	strh	r3, [r7, #14]
                return value;
 80035b4:	89fb      	ldrh	r3, [r7, #14]
            }
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <_ZN3can7signals20SENSOR_OD_DbcVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 5            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80035be:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035c2:	b088      	sub	sp, #32
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6178      	str	r0, [r7, #20]
 80035c8:	6139      	str	r1, [r7, #16]
 80035ca:	60fa      	str	r2, [r7, #12]
 80035cc:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 5);
 80035ce:	2305      	movs	r3, #5
 80035d0:	68fa      	ldr	r2, [r7, #12]
 80035d2:	6939      	ldr	r1, [r7, #16]
 80035d4:	6978      	ldr	r0, [r7, #20]
 80035d6:	f7fe ff47 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80035da:	897b      	ldrh	r3, [r7, #10]
 80035dc:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	8bf9      	ldrh	r1, [r7, #30]
 80035e6:	2000      	movs	r0, #0
 80035e8:	4688      	mov	r8, r1
 80035ea:	4681      	mov	r9, r0
 80035ec:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80035f0:	6079      	str	r1, [r7, #4]
 80035f2:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80035f6:	6039      	str	r1, [r7, #0]
 80035f8:	683c      	ldr	r4, [r7, #0]
 80035fa:	2500      	movs	r5, #0
 80035fc:	ea42 0a04 	orr.w	sl, r2, r4
 8003600:	ea43 0b05 	orr.w	fp, r3, r5
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2204      	movs	r2, #4
 800360e:	701a      	strb	r2, [r3, #0]
            }
 8003610:	bf00      	nop
 8003612:	3720      	adds	r7, #32
 8003614:	46bd      	mov	sp, r7
 8003616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800361a <_ZN3can7signals22SENSOR_OD_StackVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 4            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800361a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800361e:	b088      	sub	sp, #32
 8003620:	af00      	add	r7, sp, #0
 8003622:	6178      	str	r0, [r7, #20]
 8003624:	6139      	str	r1, [r7, #16]
 8003626:	60fa      	str	r2, [r7, #12]
 8003628:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 4);
 800362a:	2304      	movs	r3, #4
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	6939      	ldr	r1, [r7, #16]
 8003630:	6978      	ldr	r0, [r7, #20]
 8003632:	f7fe ff19 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003636:	897b      	ldrh	r3, [r7, #10]
 8003638:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003640:	8bf9      	ldrh	r1, [r7, #30]
 8003642:	2000      	movs	r0, #0
 8003644:	4688      	mov	r8, r1
 8003646:	4681      	mov	r9, r0
 8003648:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800364c:	6079      	str	r1, [r7, #4]
 800364e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003652:	6039      	str	r1, [r7, #0]
 8003654:	683c      	ldr	r4, [r7, #0]
 8003656:	2500      	movs	r5, #0
 8003658:	ea42 0a04 	orr.w	sl, r2, r4
 800365c:	ea43 0b05 	orr.w	fp, r3, r5
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2204      	movs	r2, #4
 800366a:	701a      	strb	r2, [r3, #0]
            }
 800366c:	bf00      	nop
 800366e:	3720      	adds	r7, #32
 8003670:	46bd      	mov	sp, r7
 8003672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003676 <_ZN3can7signals25SENSOR_OD_ProtocolVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 3            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003676:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800367a:	b088      	sub	sp, #32
 800367c:	af00      	add	r7, sp, #0
 800367e:	6178      	str	r0, [r7, #20]
 8003680:	6139      	str	r1, [r7, #16]
 8003682:	60fa      	str	r2, [r7, #12]
 8003684:	817b      	strh	r3, [r7, #10]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 3);
 8003686:	2303      	movs	r3, #3
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	6939      	ldr	r1, [r7, #16]
 800368c:	6978      	ldr	r0, [r7, #20]
 800368e:	f7fe feeb 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003692:	897b      	ldrh	r3, [r7, #10]
 8003694:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369c:	8bf9      	ldrh	r1, [r7, #30]
 800369e:	2000      	movs	r0, #0
 80036a0:	4688      	mov	r8, r1
 80036a2:	4681      	mov	r9, r0
 80036a4:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80036a8:	6079      	str	r1, [r7, #4]
 80036aa:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80036ae:	6039      	str	r1, [r7, #0]
 80036b0:	683c      	ldr	r4, [r7, #0]
 80036b2:	2500      	movs	r5, #0
 80036b4:	ea42 0a04 	orr.w	sl, r2, r4
 80036b8:	ea43 0b05 	orr.w	fp, r3, r5
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2204      	movs	r2, #4
 80036c6:	701a      	strb	r2, [r3, #0]
            }
 80036c8:	bf00      	nop
 80036ca:	3720      	adds	r7, #32
 80036cc:	46bd      	mov	sp, r7
 80036ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080036d2 <_ZN3can7signals20SENSOR_OD_NodeStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 2            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80036d2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 2);
 80036e2:	2302      	movs	r3, #2
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68f8      	ldr	r0, [r7, #12]
 80036ea:	f7fe febd 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80036ee:	78fb      	ldrb	r3, [r7, #3]
 80036f0:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80036f8:	7dfb      	ldrb	r3, [r7, #23]
 80036fa:	2200      	movs	r2, #0
 80036fc:	4698      	mov	r8, r3
 80036fe:	4691      	mov	r9, r2
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	f04f 0300 	mov.w	r3, #0
 8003708:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800370c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003710:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003714:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003718:	2500      	movs	r5, #0
 800371a:	ea40 0a04 	orr.w	sl, r0, r4
 800371e:	ea41 0b05 	orr.w	fp, r1, r5
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2203      	movs	r2, #3
 800372c:	701a      	strb	r2, [r3, #0]
            }
 800372e:	bf00      	nop
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003738 <_ZN3can7signals16SENSOR_OD_NodeID3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SENSOR_SDO_ID == 1            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003738:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800373c:	b086      	sub	sp, #24
 800373e:	af00      	add	r7, sp, #0
 8003740:	60f8      	str	r0, [r7, #12]
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
 8003746:	70fb      	strb	r3, [r7, #3]
                SENSOR_SDO_ID::set(intel, motorola, dlc, 1);
 8003748:	2301      	movs	r3, #1
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68b9      	ldr	r1, [r7, #8]
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f7fe fe8a 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800375e:	7dfb      	ldrb	r3, [r7, #23]
 8003760:	2200      	movs	r2, #0
 8003762:	4698      	mov	r8, r3
 8003764:	4691      	mov	r9, r2
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	f04f 0300 	mov.w	r3, #0
 800376e:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003772:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003776:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800377a:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800377e:	2500      	movs	r5, #0
 8003780:	ea40 0a04 	orr.w	sl, r0, r4
 8003784:	ea41 0b05 	orr.w	fp, r1, r5
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2203      	movs	r2, #3
 8003792:	701a      	strb	r2, [r3, #0]
            }
 8003794:	bf00      	nop
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800379e <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800379e:	b580      	push	{r7, lr}
 80037a0:	b086      	sub	sp, #24
 80037a2:	af02      	add	r7, sp, #8
 80037a4:	60f8      	str	r0, [r7, #12]
 80037a6:	60b9      	str	r1, [r7, #8]
 80037a8:	607a      	str	r2, [r7, #4]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	2300      	movs	r3, #0
 80037b2:	2202      	movs	r2, #2
 80037b4:	f240 6101 	movw	r1, #1537	; 0x601
 80037b8:	f7fe fd24 	bl	8002204 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 80037c0:	f240 6201 	movw	r2, #1537	; 0x601
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d000      	beq.n	80037ca <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 80037c8:	e7fe      	b.n	80037c8 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	4618      	mov	r0, r3
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
 80037de:	6839      	ldr	r1, [r7, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	331c      	adds	r3, #28
 80037e4:	461a      	mov	r2, r3
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff ffd9 	bl	800379e <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <_Z24handleSDORequestDownloadRK9RxMessage>:


/**************************************************************************
* Functions to handle a SDO download and upload request.                  *
***************************************************************************/
void handleSDORequestDownload(const RxMessage& rxMsgSdoReq) {
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b08a      	sub	sp, #40	; 0x28
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SENSOR_SDO_Req_Down> msgSdoReq(rxMsgSdoReq);
 80037fe:	f107 0308 	add.w	r3, r7, #8
 8003802:	6879      	ldr	r1, [r7, #4]
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff ffe5 	bl	80037d4 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEEC1ERK9RxMessage>
    uint16_t sdoId = msgSdoReq.get<can::signals::SENSOR_SDO_ID>();
 800380a:	f107 0308 	add.w	r3, r7, #8
 800380e:	4618      	mov	r0, r3
 8003810:	f001 fcc0 	bl	8005194 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>
 8003814:	4603      	mov	r3, r0
 8003816:	84fb      	strh	r3, [r7, #38]	; 0x26
    handleSDORequestDownloadBySDOID(sdoId);
 8003818:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800381a:	4618      	mov	r0, r3
 800381c:	f000 f814 	bl	8003848 <_Z31handleSDORequestDownloadBySDOIDt>
}
 8003820:	bf00      	nop
 8003822:	3728      	adds	r7, #40	; 0x28
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	2300      	movs	r3, #0
 8003834:	2208      	movs	r2, #8
 8003836:	f240 5181 	movw	r1, #1409	; 0x581
 800383a:	f7fd fba7 	bl	8000f8c <_ZN3can11MessageBaseC1Emhb>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4618      	mov	r0, r3
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <_Z31handleSDORequestDownloadBySDOIDt>:
void handleSDORequestDownloadBySDOID(const uint16_t sdoId) {    
 8003848:	b580      	push	{r7, lr}
 800384a:	b092      	sub	sp, #72	; 0x48
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	80fb      	strh	r3, [r7, #6]
    can::Message<can::messages::SENSOR_SDO_Resp> msgSdoResp;
 8003852:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff ffe6 	bl	8003828 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SENSOR_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 800385c:	2301      	movs	r3, #1
 800385e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    switch (sdoId) {
 8003862:	88fb      	ldrh	r3, [r7, #6]
 8003864:	2b21      	cmp	r3, #33	; 0x21
 8003866:	f300 810b 	bgt.w	8003a80 <_Z31handleSDORequestDownloadBySDOIDt+0x238>
 800386a:	2b00      	cmp	r3, #0
 800386c:	f300 80be 	bgt.w	80039ec <_Z31handleSDORequestDownloadBySDOIDt+0x1a4>
 8003870:	e30d      	b.n	8003e8e <_Z31handleSDORequestDownloadBySDOIDt+0x646>
 8003872:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8003876:	2b59      	cmp	r3, #89	; 0x59
 8003878:	f200 8309 	bhi.w	8003e8e <_Z31handleSDORequestDownloadBySDOIDt+0x646>
 800387c:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <_Z31handleSDORequestDownloadBySDOIDt+0x3c>)
 800387e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003882:	bf00      	nop
 8003884:	08003b75 	.word	0x08003b75
 8003888:	08003b93 	.word	0x08003b93
 800388c:	08003bad 	.word	0x08003bad
 8003890:	08003bcb 	.word	0x08003bcb
 8003894:	08003be9 	.word	0x08003be9
 8003898:	08003c03 	.word	0x08003c03
 800389c:	08003c1f 	.word	0x08003c1f
 80038a0:	08003e8f 	.word	0x08003e8f
 80038a4:	08003e8f 	.word	0x08003e8f
 80038a8:	08003e8f 	.word	0x08003e8f
 80038ac:	08003e8f 	.word	0x08003e8f
 80038b0:	08003e8f 	.word	0x08003e8f
 80038b4:	08003e8f 	.word	0x08003e8f
 80038b8:	08003e8f 	.word	0x08003e8f
 80038bc:	08003e8f 	.word	0x08003e8f
 80038c0:	08003e8f 	.word	0x08003e8f
 80038c4:	08003c3b 	.word	0x08003c3b
 80038c8:	08003c55 	.word	0x08003c55
 80038cc:	08003e8f 	.word	0x08003e8f
 80038d0:	08003e8f 	.word	0x08003e8f
 80038d4:	08003e8f 	.word	0x08003e8f
 80038d8:	08003e8f 	.word	0x08003e8f
 80038dc:	08003e8f 	.word	0x08003e8f
 80038e0:	08003e8f 	.word	0x08003e8f
 80038e4:	08003e8f 	.word	0x08003e8f
 80038e8:	08003e8f 	.word	0x08003e8f
 80038ec:	08003e8f 	.word	0x08003e8f
 80038f0:	08003e8f 	.word	0x08003e8f
 80038f4:	08003e8f 	.word	0x08003e8f
 80038f8:	08003e8f 	.word	0x08003e8f
 80038fc:	08003e8f 	.word	0x08003e8f
 8003900:	08003e8f 	.word	0x08003e8f
 8003904:	08003c6f 	.word	0x08003c6f
 8003908:	08003c89 	.word	0x08003c89
 800390c:	08003e8f 	.word	0x08003e8f
 8003910:	08003e8f 	.word	0x08003e8f
 8003914:	08003e8f 	.word	0x08003e8f
 8003918:	08003e8f 	.word	0x08003e8f
 800391c:	08003e8f 	.word	0x08003e8f
 8003920:	08003e8f 	.word	0x08003e8f
 8003924:	08003e8f 	.word	0x08003e8f
 8003928:	08003e8f 	.word	0x08003e8f
 800392c:	08003e8f 	.word	0x08003e8f
 8003930:	08003e8f 	.word	0x08003e8f
 8003934:	08003e8f 	.word	0x08003e8f
 8003938:	08003e8f 	.word	0x08003e8f
 800393c:	08003e8f 	.word	0x08003e8f
 8003940:	08003e8f 	.word	0x08003e8f
 8003944:	08003e8f 	.word	0x08003e8f
 8003948:	08003e8f 	.word	0x08003e8f
 800394c:	08003e8f 	.word	0x08003e8f
 8003950:	08003e8f 	.word	0x08003e8f
 8003954:	08003e8f 	.word	0x08003e8f
 8003958:	08003e8f 	.word	0x08003e8f
 800395c:	08003e8f 	.word	0x08003e8f
 8003960:	08003e8f 	.word	0x08003e8f
 8003964:	08003e8f 	.word	0x08003e8f
 8003968:	08003e8f 	.word	0x08003e8f
 800396c:	08003e8f 	.word	0x08003e8f
 8003970:	08003e8f 	.word	0x08003e8f
 8003974:	08003e8f 	.word	0x08003e8f
 8003978:	08003e8f 	.word	0x08003e8f
 800397c:	08003e8f 	.word	0x08003e8f
 8003980:	08003e8f 	.word	0x08003e8f
 8003984:	08003ca3 	.word	0x08003ca3
 8003988:	08003cbf 	.word	0x08003cbf
 800398c:	08003cdb 	.word	0x08003cdb
 8003990:	08003cf5 	.word	0x08003cf5
 8003994:	08003d11 	.word	0x08003d11
 8003998:	08003e8f 	.word	0x08003e8f
 800399c:	08003d2d 	.word	0x08003d2d
 80039a0:	08003d49 	.word	0x08003d49
 80039a4:	08003d63 	.word	0x08003d63
 80039a8:	08003d7f 	.word	0x08003d7f
 80039ac:	08003e8f 	.word	0x08003e8f
 80039b0:	08003e8f 	.word	0x08003e8f
 80039b4:	08003e8f 	.word	0x08003e8f
 80039b8:	08003e8f 	.word	0x08003e8f
 80039bc:	08003e8f 	.word	0x08003e8f
 80039c0:	08003e8f 	.word	0x08003e8f
 80039c4:	08003d99 	.word	0x08003d99
 80039c8:	08003db5 	.word	0x08003db5
 80039cc:	08003dd1 	.word	0x08003dd1
 80039d0:	08003deb 	.word	0x08003deb
 80039d4:	08003e07 	.word	0x08003e07
 80039d8:	08003e8f 	.word	0x08003e8f
 80039dc:	08003e23 	.word	0x08003e23
 80039e0:	08003e3f 	.word	0x08003e3f
 80039e4:	08003e59 	.word	0x08003e59
 80039e8:	08003e75 	.word	0x08003e75
 80039ec:	3b01      	subs	r3, #1
 80039ee:	2b20      	cmp	r3, #32
 80039f0:	f200 824d 	bhi.w	8003e8e <_Z31handleSDORequestDownloadBySDOIDt+0x646>
 80039f4:	a201      	add	r2, pc, #4	; (adr r2, 80039fc <_Z31handleSDORequestDownloadBySDOIDt+0x1b4>)
 80039f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fa:	bf00      	nop
 80039fc:	08003a95 	.word	0x08003a95
 8003a00:	08003ab1 	.word	0x08003ab1
 8003a04:	08003acd 	.word	0x08003acd
 8003a08:	08003ae9 	.word	0x08003ae9
 8003a0c:	08003b05 	.word	0x08003b05
 8003a10:	08003e8f 	.word	0x08003e8f
 8003a14:	08003e8f 	.word	0x08003e8f
 8003a18:	08003e8f 	.word	0x08003e8f
 8003a1c:	08003e8f 	.word	0x08003e8f
 8003a20:	08003e8f 	.word	0x08003e8f
 8003a24:	08003e8f 	.word	0x08003e8f
 8003a28:	08003e8f 	.word	0x08003e8f
 8003a2c:	08003e8f 	.word	0x08003e8f
 8003a30:	08003e8f 	.word	0x08003e8f
 8003a34:	08003e8f 	.word	0x08003e8f
 8003a38:	08003b21 	.word	0x08003b21
 8003a3c:	08003e8f 	.word	0x08003e8f
 8003a40:	08003e8f 	.word	0x08003e8f
 8003a44:	08003e8f 	.word	0x08003e8f
 8003a48:	08003e8f 	.word	0x08003e8f
 8003a4c:	08003e8f 	.word	0x08003e8f
 8003a50:	08003e8f 	.word	0x08003e8f
 8003a54:	08003e8f 	.word	0x08003e8f
 8003a58:	08003e8f 	.word	0x08003e8f
 8003a5c:	08003e8f 	.word	0x08003e8f
 8003a60:	08003e8f 	.word	0x08003e8f
 8003a64:	08003e8f 	.word	0x08003e8f
 8003a68:	08003e8f 	.word	0x08003e8f
 8003a6c:	08003e8f 	.word	0x08003e8f
 8003a70:	08003e8f 	.word	0x08003e8f
 8003a74:	08003e8f 	.word	0x08003e8f
 8003a78:	08003b3d 	.word	0x08003b3d
 8003a7c:	08003b59 	.word	0x08003b59
 8003a80:	f240 4269 	movw	r2, #1129	; 0x469
 8003a84:	4293      	cmp	r3, r2
 8003a86:	f300 8202 	bgt.w	8003e8e <_Z31handleSDORequestDownloadBySDOIDt+0x646>
 8003a8a:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8003a8e:	f6bf aef0 	bge.w	8003872 <_Z31handleSDORequestDownloadBySDOIDt+0x2a>
 8003a92:	e1fc      	b.n	8003e8e <_Z31handleSDORequestDownloadBySDOIDt+0x646>
        case 0x1:    // OD_NodeID
            msgSdoResp.set<can::signals::SENSOR_OD_NodeID>(OD_NodeID_get());
 8003a94:	f000 fe1c 	bl	80046d0 <_Z13OD_NodeID_getv>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f001 fb88 	bl	80051b8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003aae:	e1f6      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x2:    // OD_NodeStatus
            msgSdoResp.set<can::signals::SENSOR_OD_NodeStatus>(OD_NodeStatus_get());
 8003ab0:	f000 fe2a 	bl	8004708 <_Z17OD_NodeStatus_getv>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003abc:	4611      	mov	r1, r2
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f001 fb8f 	bl	80051e2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003aca:	e1e8      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x3:    // OD_ProtocolVersion
            msgSdoResp.set<can::signals::SENSOR_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8003acc:	f000 fe38 	bl	8004740 <_Z22OD_ProtocolVersion_getv>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ad8:	4611      	mov	r1, r2
 8003ada:	4618      	mov	r0, r3
 8003adc:	f001 fb96 	bl	800520c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003ae6:	e1da      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x4:    // OD_StackVersion
            msgSdoResp.set<can::signals::SENSOR_OD_StackVersion>(OD_StackVersion_get());
 8003ae8:	f000 fe46 	bl	8004778 <_Z19OD_StackVersion_getv>
 8003aec:	4603      	mov	r3, r0
 8003aee:	461a      	mov	r2, r3
 8003af0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003af4:	4611      	mov	r1, r2
 8003af6:	4618      	mov	r0, r3
 8003af8:	f001 fb9d 	bl	8005236 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003b02:	e1cc      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x5:    // OD_DbcVersion
            msgSdoResp.set<can::signals::SENSOR_OD_DbcVersion>(OD_DbcVersion_get());
 8003b04:	f000 fe54 	bl	80047b0 <_Z17OD_DbcVersion_getv>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b10:	4611      	mov	r1, r2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f001 fba4 	bl	8005260 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003b1e:	e1be      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x10:    // OD_HeartbeatInterval
            msgSdoResp.set<can::signals::SENSOR_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 8003b20:	f000 fe62 	bl	80047e8 <_Z24OD_HeartbeatInterval_getv>
 8003b24:	4603      	mov	r3, r0
 8003b26:	461a      	mov	r2, r3
 8003b28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f001 fbab 	bl	800528a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003b3a:	e1b0      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x20:    // OD_SendOdOnBootup
            msgSdoResp.set<can::signals::SENSOR_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8003b3c:	f000 fe8c 	bl	8004858 <_Z21OD_SendOdOnBootup_getv>
 8003b40:	4603      	mov	r3, r0
 8003b42:	461a      	mov	r2, r3
 8003b44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b48:	4611      	mov	r1, r2
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f001 fbb2 	bl	80052b4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003b56:	e1a2      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x21:    // OD_OdEntrySendInterval
            msgSdoResp.set<can::signals::SENSOR_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8003b58:	f000 feb6 	bl	80048c8 <_Z26OD_OdEntrySendInterval_getv>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f001 fbb9 	bl	80052de <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003b72:	e194      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x410:    // OD_CpuUsage
            msgSdoResp.set<can::signals::SENSOR_OD_CpuUsage>(OD_CpuUsage_get());
 8003b74:	f000 fee0 	bl	8004938 <_Z15OD_CpuUsage_getv>
 8003b78:	eef0 7a40 	vmov.f32	s15, s0
 8003b7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b80:	eeb0 0a67 	vmov.f32	s0, s15
 8003b84:	4618      	mov	r0, r3
 8003b86:	f001 fbbf 	bl	8005308 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003b90:	e185      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x411:    // OD_MemFree
            msgSdoResp.set<can::signals::SENSOR_OD_MemFree>(OD_MemFree_get());
 8003b92:	f000 feef 	bl	8004974 <_Z14OD_MemFree_getv>
 8003b96:	4602      	mov	r2, r0
 8003b98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f001 fbc9 	bl	8005336 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003baa:	e178      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x412:    // OD_BoardTemp
            msgSdoResp.set<can::signals::SENSOR_OD_BoardTemp>(OD_BoardTemp_get());
 8003bac:	f000 fefe 	bl	80049ac <_Z16OD_BoardTemp_getv>
 8003bb0:	eef0 7a40 	vmov.f32	s15, s0
 8003bb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f001 fbce 	bl	800535e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003bc8:	e169      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x413:    // OD_InputVoltage
            msgSdoResp.set<can::signals::SENSOR_OD_InputVoltage>(OD_InputVoltage_get());
 8003bca:	f000 ff29 	bl	8004a20 <_Z19OD_InputVoltage_getv>
 8003bce:	eef0 7a40 	vmov.f32	s15, s0
 8003bd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f001 fbd6 	bl	800538c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003be6:	e15a      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x414:    // OD_runtime
            msgSdoResp.set<can::signals::SENSOR_OD_runtime>(OD_runtime_get());
 8003be8:	f000 ff54 	bl	8004a94 <_Z14OD_runtime_getv>
 8003bec:	4602      	mov	r2, r0
 8003bee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f001 fbe0 	bl	80053ba <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003c00:	e14d      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x415:    // OD_SdcIn
            msgSdoResp.set<can::signals::SENSOR_OD_SdcIn>(OD_SdcIn_get());
 8003c02:	f000 ff63 	bl	8004acc <_Z12OD_SdcIn_getv>
 8003c06:	4603      	mov	r3, r0
 8003c08:	461a      	mov	r2, r3
 8003c0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c0e:	4611      	mov	r1, r2
 8003c10:	4618      	mov	r0, r3
 8003c12:	f001 fbe6 	bl	80053e2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003c1c:	e13f      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x416:    // OD_SdcOut
            msgSdoResp.set<can::signals::SENSOR_OD_SdcOut>(OD_SdcOut_get());
 8003c1e:	f000 ff71 	bl	8004b04 <_Z13OD_SdcOut_getv>
 8003c22:	4603      	mov	r3, r0
 8003c24:	461a      	mov	r2, r3
 8003c26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f001 fbed 	bl	800540c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003c32:	2300      	movs	r3, #0
 8003c34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003c38:	e131      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x420:    // OD_ChipUID1
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID1>(OD_ChipUID1_get());
 8003c3a:	f000 ff7f 	bl	8004b3c <_Z15OD_ChipUID1_getv>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003c46:	4608      	mov	r0, r1
 8003c48:	f001 fbf5 	bl	8005436 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003c52:	e124      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x421:    // OD_ChipUID2
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID2>(OD_ChipUID2_get());
 8003c54:	f000 ff92 	bl	8004b7c <_Z15OD_ChipUID2_getv>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003c60:	4608      	mov	r0, r1
 8003c62:	f001 fc01 	bl	8005468 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003c66:	2300      	movs	r3, #0
 8003c68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003c6c:	e117      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x430:    // OD_BuildDate
            msgSdoResp.set<can::signals::SENSOR_OD_BuildDate>(OD_BuildDate_get());
 8003c6e:	f000 ffa5 	bl	8004bbc <_Z16OD_BuildDate_getv>
 8003c72:	4602      	mov	r2, r0
 8003c74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c78:	4611      	mov	r1, r2
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f001 fc0d 	bl	800549a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003c86:	e10a      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x431:    // OD_BuildTime
            msgSdoResp.set<can::signals::SENSOR_OD_BuildTime>(OD_BuildTime_get());
 8003c88:	f000 ffb4 	bl	8004bf4 <_Z16OD_BuildTime_getv>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c92:	4611      	mov	r1, r2
 8003c94:	4618      	mov	r0, r3
 8003c96:	f001 fc14 	bl	80054c2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003ca0:	e0fd      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x450:    // OD_CAN1_TxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 8003ca2:	f000 ffc3 	bl	8004c2c <_Z20OD_CAN1_TxErrCnt_getv>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	461a      	mov	r2, r3
 8003caa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cae:	4611      	mov	r1, r2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f001 fc1a 	bl	80054ea <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003cbc:	e0ef      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x451:    // OD_CAN1_RxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 8003cbe:	f000 ffd1 	bl	8004c64 <_Z20OD_CAN1_RxErrCnt_getv>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f001 fc21 	bl	8005514 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003cd8:	e0e1      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x452:    // OD_CAN1_lastErrorCode
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 8003cda:	f000 ffdf 	bl	8004c9c <_Z25OD_CAN1_lastErrorCode_getv>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f001 fc29 	bl	800553e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003cec:	2300      	movs	r3, #0
 8003cee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003cf2:	e0d4      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x453:    // OD_CAN1_autoErrorReset
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 8003cf4:	f000 ffee 	bl	8004cd4 <_Z26OD_CAN1_autoErrorReset_getv>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d00:	4611      	mov	r1, r2
 8003d02:	4618      	mov	r0, r3
 8003d04:	f001 fc2f 	bl	8005566 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003d0e:	e0c6      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x454:    // OD_CAN1_Baudrate
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 8003d10:	f001 f818 	bl	8004d44 <_Z20OD_CAN1_Baudrate_getv>
 8003d14:	4603      	mov	r3, r0
 8003d16:	461a      	mov	r2, r3
 8003d18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d1c:	4611      	mov	r1, r2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f001 fc36 	bl	8005590 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003d2a:	e0b8      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x456:    // OD_CAN1_Status
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Status>(OD_CAN1_Status_get());
 8003d2c:	f001 f842 	bl	8004db4 <_Z18OD_CAN1_Status_getv>
 8003d30:	4603      	mov	r3, r0
 8003d32:	461a      	mov	r2, r3
 8003d34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d38:	4611      	mov	r1, r2
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f001 fc3d 	bl	80055ba <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d40:	2300      	movs	r3, #0
 8003d42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003d46:	e0aa      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x457:    // OD_CAN1_DiscardedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 8003d48:	f001 f850 	bl	8004dec <_Z31OD_CAN1_DiscardedTxMessages_getv>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d52:	4611      	mov	r1, r2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f001 fc45 	bl	80055e4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003d60:	e09d      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x458:    // OD_CAN1_ErrorStatus
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 8003d62:	f001 f85f 	bl	8004e24 <_Z23OD_CAN1_ErrorStatus_getv>
 8003d66:	4603      	mov	r3, r0
 8003d68:	461a      	mov	r2, r3
 8003d6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d6e:	4611      	mov	r1, r2
 8003d70:	4618      	mov	r0, r3
 8003d72:	f001 fc4b 	bl	800560c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003d7c:	e08f      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x459:    // OD_CAN1_DelayedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 8003d7e:	f001 f86d 	bl	8004e5c <_Z29OD_CAN1_DelayedTxMessages_getv>
 8003d82:	4602      	mov	r2, r0
 8003d84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d88:	4611      	mov	r1, r2
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f001 fc53 	bl	8005636 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003d90:	2300      	movs	r3, #0
 8003d92:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003d96:	e082      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x460:    // OD_CAN2_TxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 8003d98:	f001 f87c 	bl	8004e94 <_Z20OD_CAN2_TxErrCnt_getv>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	461a      	mov	r2, r3
 8003da0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003da4:	4611      	mov	r1, r2
 8003da6:	4618      	mov	r0, r3
 8003da8:	f001 fc59 	bl	800565e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003db2:	e074      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x461:    // OD_CAN2_RxErrCnt
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8003db4:	f001 f88a 	bl	8004ecc <_Z20OD_CAN2_RxErrCnt_getv>
 8003db8:	4603      	mov	r3, r0
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dc0:	4611      	mov	r1, r2
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f001 fc60 	bl	8005688 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003dce:	e066      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x462:    // OD_CAN2_lastErrorCode
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8003dd0:	f001 f898 	bl	8004f04 <_Z25OD_CAN2_lastErrorCode_getv>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dda:	4611      	mov	r1, r2
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f001 fc68 	bl	80056b2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003de2:	2300      	movs	r3, #0
 8003de4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003de8:	e059      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x463:    // OD_CAN2_autoErrorReset
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8003dea:	f001 f8a7 	bl	8004f3c <_Z26OD_CAN2_autoErrorReset_getv>
 8003dee:	4603      	mov	r3, r0
 8003df0:	461a      	mov	r2, r3
 8003df2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003df6:	4611      	mov	r1, r2
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f001 fc6e 	bl	80056da <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e04:	e04b      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x464:    // OD_CAN2_Baudrate
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 8003e06:	f001 f8d1 	bl	8004fac <_Z20OD_CAN2_Baudrate_getv>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e12:	4611      	mov	r1, r2
 8003e14:	4618      	mov	r0, r3
 8003e16:	f001 fc75 	bl	8005704 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e20:	e03d      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x466:    // OD_CAN2_Status
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Status>(OD_CAN2_Status_get());
 8003e22:	f001 f8fb 	bl	800501c <_Z18OD_CAN2_Status_getv>
 8003e26:	4603      	mov	r3, r0
 8003e28:	461a      	mov	r2, r3
 8003e2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e2e:	4611      	mov	r1, r2
 8003e30:	4618      	mov	r0, r3
 8003e32:	f001 fc7c 	bl	800572e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e3c:	e02f      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x467:    // OD_CAN2_DiscardedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 8003e3e:	f001 f909 	bl	8005054 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 8003e42:	4602      	mov	r2, r0
 8003e44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e48:	4611      	mov	r1, r2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f001 fc84 	bl	8005758 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003e50:	2300      	movs	r3, #0
 8003e52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e56:	e022      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x468:    // OD_CAN2_ErrorStatus
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8003e58:	f001 f918 	bl	800508c <_Z23OD_CAN2_ErrorStatus_getv>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	461a      	mov	r2, r3
 8003e60:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e64:	4611      	mov	r1, r2
 8003e66:	4618      	mov	r0, r3
 8003e68:	f001 fc8a 	bl	8005780 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e72:	e014      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        case 0x469:    // OD_CAN2_DelayedTxMessages
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8003e74:	f001 f926 	bl	80050c4 <_Z29OD_CAN2_DelayedTxMessages_getv>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f001 fc92 	bl	80057aa <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8003e8c:	e007      	b.n	8003e9e <_Z31handleSDORequestDownloadBySDOIDt+0x656>
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SENSOR_SDO_ID>(sdoId);
 8003e8e:	88fa      	ldrh	r2, [r7, #6]
 8003e90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e94:	4611      	mov	r1, r2
 8003e96:	4618      	mov	r0, r3
 8003e98:	f001 fc9b 	bl	80057d2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>
            break;
 8003e9c:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SENSOR_SDO_RespCode>(respCode);
 8003e9e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003ea2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ea6:	4611      	mov	r1, r2
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f001 fca7 	bl	80057fc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 8003eae:	f107 0308 	add.w	r3, r7, #8
 8003eb2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fd f99b 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 8003ebe:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <_Z31handleSDORequestDownloadBySDOIDt+0x690>)
 8003ec0:	6818      	ldr	r0, [r3, #0]
 8003ec2:	f107 0108 	add.w	r1, r7, #8
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f00b f881 	bl	800efd0 <osMessageQueuePut>
}
 8003ece:	bf00      	nop
 8003ed0:	3748      	adds	r7, #72	; 0x48
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	2000079c 	.word	0x2000079c

08003edc <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af02      	add	r7, sp, #8
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	607a      	str	r2, [r7, #4]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	2300      	movs	r3, #0
 8003ef0:	2208      	movs	r2, #8
 8003ef2:	f240 51c1 	movw	r1, #1473	; 0x5c1
 8003ef6:	f7fe f985 	bl	8002204 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8003efe:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d000      	beq.n	8003f08 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8003f06:	e7fe      	b.n	8003f06 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
 8003f1a:	6039      	str	r1, [r7, #0]
 8003f1c:	6839      	ldr	r1, [r7, #0]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	331c      	adds	r3, #28
 8003f22:	461a      	mov	r2, r3
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7ff ffd9 	bl	8003edc <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <_Z22handleSDORequestUploadRK9RxMessage>:

void handleSDORequestUpload(const RxMessage& rxMsgSdoReq) {
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b09c      	sub	sp, #112	; 0x70
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SENSOR_SDO_Req_Up> msgSdoReq(rxMsgSdoReq);
 8003f3c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff ffe5 	bl	8003f12 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEEC1ERK9RxMessage>
    can::Message<can::messages::SENSOR_SDO_Resp> msgSdoResp;
 8003f48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff fc6b 	bl	8003828 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SENSOR_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 8003f52:	2301      	movs	r3, #1
 8003f54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    uint16_t sdoId = msgSdoReq.get<can::signals::SENSOR_SDO_ID>();
 8003f58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f001 fc62 	bl	8005826 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>
 8003f62:	4603      	mov	r3, r0
 8003f64:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

    switch (sdoId) {
 8003f68:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8003f6c:	2b21      	cmp	r3, #33	; 0x21
 8003f6e:	f300 810b 	bgt.w	8004188 <_Z22handleSDORequestUploadRK9RxMessage+0x254>
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f300 80be 	bgt.w	80040f4 <_Z22handleSDORequestUploadRK9RxMessage+0x1c0>
 8003f78:	e382      	b.n	8004680 <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
 8003f7a:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8003f7e:	2b59      	cmp	r3, #89	; 0x59
 8003f80:	f200 837e 	bhi.w	8004680 <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
 8003f84:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <_Z22handleSDORequestUploadRK9RxMessage+0x58>)
 8003f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8a:	bf00      	nop
 8003f8c:	080042cb 	.word	0x080042cb
 8003f90:	080042e9 	.word	0x080042e9
 8003f94:	08004303 	.word	0x08004303
 8003f98:	08004321 	.word	0x08004321
 8003f9c:	0800433f 	.word	0x0800433f
 8003fa0:	08004359 	.word	0x08004359
 8003fa4:	08004375 	.word	0x08004375
 8003fa8:	08004681 	.word	0x08004681
 8003fac:	08004681 	.word	0x08004681
 8003fb0:	08004681 	.word	0x08004681
 8003fb4:	08004681 	.word	0x08004681
 8003fb8:	08004681 	.word	0x08004681
 8003fbc:	08004681 	.word	0x08004681
 8003fc0:	08004681 	.word	0x08004681
 8003fc4:	08004681 	.word	0x08004681
 8003fc8:	08004681 	.word	0x08004681
 8003fcc:	08004391 	.word	0x08004391
 8003fd0:	080043ab 	.word	0x080043ab
 8003fd4:	08004681 	.word	0x08004681
 8003fd8:	08004681 	.word	0x08004681
 8003fdc:	08004681 	.word	0x08004681
 8003fe0:	08004681 	.word	0x08004681
 8003fe4:	08004681 	.word	0x08004681
 8003fe8:	08004681 	.word	0x08004681
 8003fec:	08004681 	.word	0x08004681
 8003ff0:	08004681 	.word	0x08004681
 8003ff4:	08004681 	.word	0x08004681
 8003ff8:	08004681 	.word	0x08004681
 8003ffc:	08004681 	.word	0x08004681
 8004000:	08004681 	.word	0x08004681
 8004004:	08004681 	.word	0x08004681
 8004008:	08004681 	.word	0x08004681
 800400c:	080043c5 	.word	0x080043c5
 8004010:	080043df 	.word	0x080043df
 8004014:	08004681 	.word	0x08004681
 8004018:	08004681 	.word	0x08004681
 800401c:	08004681 	.word	0x08004681
 8004020:	08004681 	.word	0x08004681
 8004024:	08004681 	.word	0x08004681
 8004028:	08004681 	.word	0x08004681
 800402c:	08004681 	.word	0x08004681
 8004030:	08004681 	.word	0x08004681
 8004034:	08004681 	.word	0x08004681
 8004038:	08004681 	.word	0x08004681
 800403c:	08004681 	.word	0x08004681
 8004040:	08004681 	.word	0x08004681
 8004044:	08004681 	.word	0x08004681
 8004048:	08004681 	.word	0x08004681
 800404c:	08004681 	.word	0x08004681
 8004050:	08004681 	.word	0x08004681
 8004054:	08004681 	.word	0x08004681
 8004058:	08004681 	.word	0x08004681
 800405c:	08004681 	.word	0x08004681
 8004060:	08004681 	.word	0x08004681
 8004064:	08004681 	.word	0x08004681
 8004068:	08004681 	.word	0x08004681
 800406c:	08004681 	.word	0x08004681
 8004070:	08004681 	.word	0x08004681
 8004074:	08004681 	.word	0x08004681
 8004078:	08004681 	.word	0x08004681
 800407c:	08004681 	.word	0x08004681
 8004080:	08004681 	.word	0x08004681
 8004084:	08004681 	.word	0x08004681
 8004088:	08004681 	.word	0x08004681
 800408c:	080043f9 	.word	0x080043f9
 8004090:	08004415 	.word	0x08004415
 8004094:	08004431 	.word	0x08004431
 8004098:	0800444b 	.word	0x0800444b
 800409c:	08004481 	.word	0x08004481
 80040a0:	08004681 	.word	0x08004681
 80040a4:	080044d1 	.word	0x080044d1
 80040a8:	080044ed 	.word	0x080044ed
 80040ac:	08004507 	.word	0x08004507
 80040b0:	08004523 	.word	0x08004523
 80040b4:	08004681 	.word	0x08004681
 80040b8:	08004681 	.word	0x08004681
 80040bc:	08004681 	.word	0x08004681
 80040c0:	08004681 	.word	0x08004681
 80040c4:	08004681 	.word	0x08004681
 80040c8:	08004681 	.word	0x08004681
 80040cc:	0800453d 	.word	0x0800453d
 80040d0:	08004559 	.word	0x08004559
 80040d4:	08004575 	.word	0x08004575
 80040d8:	0800458f 	.word	0x0800458f
 80040dc:	080045c5 	.word	0x080045c5
 80040e0:	08004681 	.word	0x08004681
 80040e4:	08004615 	.word	0x08004615
 80040e8:	08004631 	.word	0x08004631
 80040ec:	0800464b 	.word	0x0800464b
 80040f0:	08004667 	.word	0x08004667
 80040f4:	3b01      	subs	r3, #1
 80040f6:	2b20      	cmp	r3, #32
 80040f8:	f200 82c2 	bhi.w	8004680 <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
 80040fc:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <_Z22handleSDORequestUploadRK9RxMessage+0x1d0>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	0800419d 	.word	0x0800419d
 8004108:	080041b9 	.word	0x080041b9
 800410c:	080041d5 	.word	0x080041d5
 8004110:	080041f1 	.word	0x080041f1
 8004114:	0800420d 	.word	0x0800420d
 8004118:	08004681 	.word	0x08004681
 800411c:	08004681 	.word	0x08004681
 8004120:	08004681 	.word	0x08004681
 8004124:	08004681 	.word	0x08004681
 8004128:	08004681 	.word	0x08004681
 800412c:	08004681 	.word	0x08004681
 8004130:	08004681 	.word	0x08004681
 8004134:	08004681 	.word	0x08004681
 8004138:	08004681 	.word	0x08004681
 800413c:	08004681 	.word	0x08004681
 8004140:	08004229 	.word	0x08004229
 8004144:	08004681 	.word	0x08004681
 8004148:	08004681 	.word	0x08004681
 800414c:	08004681 	.word	0x08004681
 8004150:	08004681 	.word	0x08004681
 8004154:	08004681 	.word	0x08004681
 8004158:	08004681 	.word	0x08004681
 800415c:	08004681 	.word	0x08004681
 8004160:	08004681 	.word	0x08004681
 8004164:	08004681 	.word	0x08004681
 8004168:	08004681 	.word	0x08004681
 800416c:	08004681 	.word	0x08004681
 8004170:	08004681 	.word	0x08004681
 8004174:	08004681 	.word	0x08004681
 8004178:	08004681 	.word	0x08004681
 800417c:	08004681 	.word	0x08004681
 8004180:	0800425f 	.word	0x0800425f
 8004184:	08004295 	.word	0x08004295
 8004188:	f240 4269 	movw	r2, #1129	; 0x469
 800418c:	4293      	cmp	r3, r2
 800418e:	f300 8277 	bgt.w	8004680 <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
 8004192:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8004196:	f6bf aef0 	bge.w	8003f7a <_Z22handleSDORequestUploadRK9RxMessage+0x46>
 800419a:	e271      	b.n	8004680 <_Z22handleSDORequestUploadRK9RxMessage+0x74c>
        case 0x1: {   // OD_NodeID
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800419c:	2303      	movs	r3, #3
 800419e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_NodeID>(OD_NodeID_get());
 80041a2:	f000 fa95 	bl	80046d0 <_Z13OD_NodeID_getv>
 80041a6:	4603      	mov	r3, r0
 80041a8:	461a      	mov	r2, r3
 80041aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041ae:	4611      	mov	r1, r2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f001 f801 	bl	80051b8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>
            break;
 80041b6:	e26c      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x2: {   // OD_NodeStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_NodeStatus>(OD_NodeStatus_get());
 80041be:	f000 faa3 	bl	8004708 <_Z17OD_NodeStatus_getv>
 80041c2:	4603      	mov	r3, r0
 80041c4:	461a      	mov	r2, r3
 80041c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041ca:	4611      	mov	r1, r2
 80041cc:	4618      	mov	r0, r3
 80041ce:	f001 f808 	bl	80051e2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>
            break;
 80041d2:	e25e      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x3: {   // OD_ProtocolVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 80041da:	f000 fab1 	bl	8004740 <_Z22OD_ProtocolVersion_getv>
 80041de:	4603      	mov	r3, r0
 80041e0:	461a      	mov	r2, r3
 80041e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041e6:	4611      	mov	r1, r2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f001 f80f 	bl	800520c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>
            break;
 80041ee:	e250      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x4: {   // OD_StackVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_StackVersion>(OD_StackVersion_get());
 80041f6:	f000 fabf 	bl	8004778 <_Z19OD_StackVersion_getv>
 80041fa:	4603      	mov	r3, r0
 80041fc:	461a      	mov	r2, r3
 80041fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004202:	4611      	mov	r1, r2
 8004204:	4618      	mov	r0, r3
 8004206:	f001 f816 	bl	8005236 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>
            break;
 800420a:	e242      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x5: {   // OD_DbcVersion
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800420c:	2303      	movs	r3, #3
 800420e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_DbcVersion>(OD_DbcVersion_get());
 8004212:	f000 facd 	bl	80047b0 <_Z17OD_DbcVersion_getv>
 8004216:	4603      	mov	r3, r0
 8004218:	461a      	mov	r2, r3
 800421a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800421e:	4611      	mov	r1, r2
 8004220:	4618      	mov	r0, r3
 8004222:	f001 f81d 	bl	8005260 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>
            break;
 8004226:	e234      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x10: {   // OD_HeartbeatInterval
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_HeartbeatInterval>();
 8004228:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800422c:	4618      	mov	r0, r3
 800422e:	f001 fb0c 	bl	800584a <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals27SENSOR_OD_HeartbeatIntervalEEENT_8dataTypeEv>
 8004232:	4603      	mov	r3, r0
 8004234:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                OD_HeartbeatInterval_set(value);
 8004238:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800423c:	4618      	mov	r0, r3
 800423e:	f000 faef 	bl	8004820 <_Z24OD_HeartbeatInterval_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004242:	2300      	movs	r3, #0
 8004244:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 8004248:	f000 face 	bl	80047e8 <_Z24OD_HeartbeatInterval_getv>
 800424c:	4603      	mov	r3, r0
 800424e:	461a      	mov	r2, r3
 8004250:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004254:	4611      	mov	r1, r2
 8004256:	4618      	mov	r0, r3
 8004258:	f001 f817 	bl	800528a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            break;
 800425c:	e219      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x20: {   // OD_SendOdOnBootup
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_SendOdOnBootup>();
 800425e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004262:	4618      	mov	r0, r3
 8004264:	f001 fb03 	bl	800586e <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals24SENSOR_OD_SendOdOnBootupEEENT_8dataTypeEv>
 8004268:	4603      	mov	r3, r0
 800426a:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                OD_SendOdOnBootup_set(value);
 800426e:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fb0c 	bl	8004890 <_Z21OD_SendOdOnBootup_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004278:	2300      	movs	r3, #0
 800427a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 800427e:	f000 faeb 	bl	8004858 <_Z21OD_SendOdOnBootup_getv>
 8004282:	4603      	mov	r3, r0
 8004284:	461a      	mov	r2, r3
 8004286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800428a:	4611      	mov	r1, r2
 800428c:	4618      	mov	r0, r3
 800428e:	f001 f811 	bl	80052b4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            break;
 8004292:	e1fe      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x21: {   // OD_OdEntrySendInterval
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_OdEntrySendInterval>();
 8004294:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004298:	4618      	mov	r0, r3
 800429a:	f001 fafa 	bl	8005892 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_OdEntrySendIntervalEEENT_8dataTypeEv>
 800429e:	4603      	mov	r3, r0
 80042a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                OD_OdEntrySendInterval_set(value);
 80042a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fb29 	bl	8004900 <_Z26OD_OdEntrySendInterval_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 80042b4:	f000 fb08 	bl	80048c8 <_Z26OD_OdEntrySendInterval_getv>
 80042b8:	4603      	mov	r3, r0
 80042ba:	461a      	mov	r2, r3
 80042bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042c0:	4611      	mov	r1, r2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f001 f80b 	bl	80052de <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            break;
 80042c8:	e1e3      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x410: {   // OD_CpuUsage
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CpuUsage>(OD_CpuUsage_get());
 80042d0:	f000 fb32 	bl	8004938 <_Z15OD_CpuUsage_getv>
 80042d4:	eef0 7a40 	vmov.f32	s15, s0
 80042d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042dc:	eeb0 0a67 	vmov.f32	s0, s15
 80042e0:	4618      	mov	r0, r3
 80042e2:	f001 f811 	bl	8005308 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>
            break;
 80042e6:	e1d4      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x411: {   // OD_MemFree
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_MemFree>(OD_MemFree_get());
 80042ee:	f000 fb41 	bl	8004974 <_Z14OD_MemFree_getv>
 80042f2:	4602      	mov	r2, r0
 80042f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80042f8:	4611      	mov	r1, r2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f001 f81b 	bl	8005336 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>
            break;
 8004300:	e1c7      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x412: {   // OD_BoardTemp
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004302:	2303      	movs	r3, #3
 8004304:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BoardTemp>(OD_BoardTemp_get());
 8004308:	f000 fb50 	bl	80049ac <_Z16OD_BoardTemp_getv>
 800430c:	eef0 7a40 	vmov.f32	s15, s0
 8004310:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004314:	eeb0 0a67 	vmov.f32	s0, s15
 8004318:	4618      	mov	r0, r3
 800431a:	f001 f820 	bl	800535e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>
            break;
 800431e:	e1b8      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x413: {   // OD_InputVoltage
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004320:	2303      	movs	r3, #3
 8004322:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_InputVoltage>(OD_InputVoltage_get());
 8004326:	f000 fb7b 	bl	8004a20 <_Z19OD_InputVoltage_getv>
 800432a:	eef0 7a40 	vmov.f32	s15, s0
 800432e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004332:	eeb0 0a67 	vmov.f32	s0, s15
 8004336:	4618      	mov	r0, r3
 8004338:	f001 f828 	bl	800538c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>
            break;
 800433c:	e1a9      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x414: {   // OD_runtime
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800433e:	2303      	movs	r3, #3
 8004340:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_runtime>(OD_runtime_get());
 8004344:	f000 fba6 	bl	8004a94 <_Z14OD_runtime_getv>
 8004348:	4602      	mov	r2, r0
 800434a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800434e:	4611      	mov	r1, r2
 8004350:	4618      	mov	r0, r3
 8004352:	f001 f832 	bl	80053ba <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>
            break;
 8004356:	e19c      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x415: {   // OD_SdcIn
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004358:	2303      	movs	r3, #3
 800435a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SdcIn>(OD_SdcIn_get());
 800435e:	f000 fbb5 	bl	8004acc <_Z12OD_SdcIn_getv>
 8004362:	4603      	mov	r3, r0
 8004364:	461a      	mov	r2, r3
 8004366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800436a:	4611      	mov	r1, r2
 800436c:	4618      	mov	r0, r3
 800436e:	f001 f838 	bl	80053e2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>
            break;
 8004372:	e18e      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x416: {   // OD_SdcOut
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004374:	2303      	movs	r3, #3
 8004376:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_SdcOut>(OD_SdcOut_get());
 800437a:	f000 fbc3 	bl	8004b04 <_Z13OD_SdcOut_getv>
 800437e:	4603      	mov	r3, r0
 8004380:	461a      	mov	r2, r3
 8004382:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004386:	4611      	mov	r1, r2
 8004388:	4618      	mov	r0, r3
 800438a:	f001 f83f 	bl	800540c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>
            break;
 800438e:	e180      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x420: {   // OD_ChipUID1
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004390:	2303      	movs	r3, #3
 8004392:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID1>(OD_ChipUID1_get());
 8004396:	f000 fbd1 	bl	8004b3c <_Z15OD_ChipUID1_getv>
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80043a2:	4608      	mov	r0, r1
 80043a4:	f001 f847 	bl	8005436 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>
            break;
 80043a8:	e173      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x421: {   // OD_ChipUID2
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_ChipUID2>(OD_ChipUID2_get());
 80043b0:	f000 fbe4 	bl	8004b7c <_Z15OD_ChipUID2_getv>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80043bc:	4608      	mov	r0, r1
 80043be:	f001 f853 	bl	8005468 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>
            break;
 80043c2:	e166      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x430: {   // OD_BuildDate
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BuildDate>(OD_BuildDate_get());
 80043ca:	f000 fbf7 	bl	8004bbc <_Z16OD_BuildDate_getv>
 80043ce:	4602      	mov	r2, r0
 80043d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043d4:	4611      	mov	r1, r2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f001 f85f 	bl	800549a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>
            break;
 80043dc:	e159      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x431: {   // OD_BuildTime
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80043de:	2303      	movs	r3, #3
 80043e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_BuildTime>(OD_BuildTime_get());
 80043e4:	f000 fc06 	bl	8004bf4 <_Z16OD_BuildTime_getv>
 80043e8:	4602      	mov	r2, r0
 80043ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80043ee:	4611      	mov	r1, r2
 80043f0:	4618      	mov	r0, r3
 80043f2:	f001 f866 	bl	80054c2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>
            break;
 80043f6:	e14c      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x450: {   // OD_CAN1_TxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 80043fe:	f000 fc15 	bl	8004c2c <_Z20OD_CAN1_TxErrCnt_getv>
 8004402:	4603      	mov	r3, r0
 8004404:	461a      	mov	r2, r3
 8004406:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800440a:	4611      	mov	r1, r2
 800440c:	4618      	mov	r0, r3
 800440e:	f001 f86c 	bl	80054ea <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            break;
 8004412:	e13e      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x451: {   // OD_CAN1_RxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004414:	2303      	movs	r3, #3
 8004416:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 800441a:	f000 fc23 	bl	8004c64 <_Z20OD_CAN1_RxErrCnt_getv>
 800441e:	4603      	mov	r3, r0
 8004420:	461a      	mov	r2, r3
 8004422:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004426:	4611      	mov	r1, r2
 8004428:	4618      	mov	r0, r3
 800442a:	f001 f873 	bl	8005514 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            break;
 800442e:	e130      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x452: {   // OD_CAN1_lastErrorCode
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004430:	2303      	movs	r3, #3
 8004432:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 8004436:	f000 fc31 	bl	8004c9c <_Z25OD_CAN1_lastErrorCode_getv>
 800443a:	4602      	mov	r2, r0
 800443c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004440:	4611      	mov	r1, r2
 8004442:	4618      	mov	r0, r3
 8004444:	f001 f87b 	bl	800553e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8004448:	e123      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x453: {   // OD_CAN1_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN1_autoErrorReset>();
 800444a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800444e:	4618      	mov	r0, r3
 8004450:	f001 fa31 	bl	80058b6 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>
 8004454:	4603      	mov	r3, r0
 8004456:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                OD_CAN1_autoErrorReset_set(value);
 800445a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 800445e:	4618      	mov	r0, r3
 8004460:	f000 fc54 	bl	8004d0c <_Z26OD_CAN1_autoErrorReset_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 8004464:	2300      	movs	r3, #0
 8004466:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 800446a:	f000 fc33 	bl	8004cd4 <_Z26OD_CAN1_autoErrorReset_getv>
 800446e:	4603      	mov	r3, r0
 8004470:	461a      	mov	r2, r3
 8004472:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004476:	4611      	mov	r1, r2
 8004478:	4618      	mov	r0, r3
 800447a:	f001 f874 	bl	8005566 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            break;
 800447e:	e108      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x454: {   // OD_CAN1_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN1_Baudrate>();
 8004480:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004484:	4618      	mov	r0, r3
 8004486:	f001 fa28 	bl	80058da <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN1_BaudrateEEENT_8dataTypeEv>
 800448a:	4603      	mov	r3, r0
 800448c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
if (value < 125 || value > 1000) {
 8004490:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8004494:	2b7c      	cmp	r3, #124	; 0x7c
 8004496:	d904      	bls.n	80044a2 <_Z22handleSDORequestUploadRK9RxMessage+0x56e>
 8004498:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800449c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80044a0:	d903      	bls.n	80044aa <_Z22handleSDORequestUploadRK9RxMessage+0x576>
                respCode = can::signals::SENSOR_SDO_RespCode::ERR_OUT_OF_RANGE;
 80044a2:	2305      	movs	r3, #5
 80044a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80044a8:	e007      	b.n	80044ba <_Z22handleSDORequestUploadRK9RxMessage+0x586>
            }
            else {
                OD_CAN1_Baudrate_set(value);
 80044aa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fc64 	bl	8004d7c <_Z20OD_CAN1_Baudrate_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            }
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 80044ba:	f000 fc43 	bl	8004d44 <_Z20OD_CAN1_Baudrate_getv>
 80044be:	4603      	mov	r3, r0
 80044c0:	461a      	mov	r2, r3
 80044c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044c6:	4611      	mov	r1, r2
 80044c8:	4618      	mov	r0, r3
 80044ca:	f001 f861 	bl	8005590 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            break;
 80044ce:	e0e0      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x456: {   // OD_CAN1_Status
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_Status>(OD_CAN1_Status_get());
 80044d6:	f000 fc6d 	bl	8004db4 <_Z18OD_CAN1_Status_getv>
 80044da:	4603      	mov	r3, r0
 80044dc:	461a      	mov	r2, r3
 80044de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044e2:	4611      	mov	r1, r2
 80044e4:	4618      	mov	r0, r3
 80044e6:	f001 f868 	bl	80055ba <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>
            break;
 80044ea:	e0d2      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x457: {   // OD_CAN1_DiscardedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 80044f2:	f000 fc7b 	bl	8004dec <_Z31OD_CAN1_DiscardedTxMessages_getv>
 80044f6:	4602      	mov	r2, r0
 80044f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80044fc:	4611      	mov	r1, r2
 80044fe:	4618      	mov	r0, r3
 8004500:	f001 f870 	bl	80055e4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8004504:	e0c5      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x458: {   // OD_CAN1_ErrorStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004506:	2303      	movs	r3, #3
 8004508:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 800450c:	f000 fc8a 	bl	8004e24 <_Z23OD_CAN1_ErrorStatus_getv>
 8004510:	4603      	mov	r3, r0
 8004512:	461a      	mov	r2, r3
 8004514:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004518:	4611      	mov	r1, r2
 800451a:	4618      	mov	r0, r3
 800451c:	f001 f876 	bl	800560c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            break;
 8004520:	e0b7      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x459: {   // OD_CAN1_DelayedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004522:	2303      	movs	r3, #3
 8004524:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 8004528:	f000 fc98 	bl	8004e5c <_Z29OD_CAN1_DelayedTxMessages_getv>
 800452c:	4602      	mov	r2, r0
 800452e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004532:	4611      	mov	r1, r2
 8004534:	4618      	mov	r0, r3
 8004536:	f001 f87e 	bl	8005636 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 800453a:	e0aa      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x460: {   // OD_CAN2_TxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800453c:	2303      	movs	r3, #3
 800453e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 8004542:	f000 fca7 	bl	8004e94 <_Z20OD_CAN2_TxErrCnt_getv>
 8004546:	4603      	mov	r3, r0
 8004548:	461a      	mov	r2, r3
 800454a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800454e:	4611      	mov	r1, r2
 8004550:	4618      	mov	r0, r3
 8004552:	f001 f884 	bl	800565e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            break;
 8004556:	e09c      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x461: {   // OD_CAN2_RxErrCnt
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004558:	2303      	movs	r3, #3
 800455a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 800455e:	f000 fcb5 	bl	8004ecc <_Z20OD_CAN2_RxErrCnt_getv>
 8004562:	4603      	mov	r3, r0
 8004564:	461a      	mov	r2, r3
 8004566:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800456a:	4611      	mov	r1, r2
 800456c:	4618      	mov	r0, r3
 800456e:	f001 f88b 	bl	8005688 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            break;
 8004572:	e08e      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x462: {   // OD_CAN2_lastErrorCode
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004574:	2303      	movs	r3, #3
 8004576:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 800457a:	f000 fcc3 	bl	8004f04 <_Z25OD_CAN2_lastErrorCode_getv>
 800457e:	4602      	mov	r2, r0
 8004580:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004584:	4611      	mov	r1, r2
 8004586:	4618      	mov	r0, r3
 8004588:	f001 f893 	bl	80056b2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 800458c:	e081      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x463: {   // OD_CAN2_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN2_autoErrorReset>();
 800458e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004592:	4618      	mov	r0, r3
 8004594:	f001 f9b3 	bl	80058fe <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>
 8004598:	4603      	mov	r3, r0
 800459a:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                OD_CAN2_autoErrorReset_set(value);
 800459e:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fce6 	bl	8004f74 <_Z26OD_CAN2_autoErrorReset_seth>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 80045ae:	f000 fcc5 	bl	8004f3c <_Z26OD_CAN2_autoErrorReset_getv>
 80045b2:	4603      	mov	r3, r0
 80045b4:	461a      	mov	r2, r3
 80045b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045ba:	4611      	mov	r1, r2
 80045bc:	4618      	mov	r0, r3
 80045be:	f001 f88c 	bl	80056da <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            break;
 80045c2:	e066      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x464: {   // OD_CAN2_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SENSOR_OD_CAN2_Baudrate>();
 80045c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80045c8:	4618      	mov	r0, r3
 80045ca:	f001 f9aa 	bl	8005922 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN2_BaudrateEEENT_8dataTypeEv>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
if (value < 125 || value > 1000) {
 80045d4:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80045d8:	2b7c      	cmp	r3, #124	; 0x7c
 80045da:	d904      	bls.n	80045e6 <_Z22handleSDORequestUploadRK9RxMessage+0x6b2>
 80045dc:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80045e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045e4:	d903      	bls.n	80045ee <_Z22handleSDORequestUploadRK9RxMessage+0x6ba>
                respCode = can::signals::SENSOR_SDO_RespCode::ERR_OUT_OF_RANGE;
 80045e6:	2305      	movs	r3, #5
 80045e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80045ec:	e007      	b.n	80045fe <_Z22handleSDORequestUploadRK9RxMessage+0x6ca>
            }
            else {
                OD_CAN2_Baudrate_set(value);
 80045ee:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80045f2:	4618      	mov	r0, r3
 80045f4:	f000 fcf6 	bl	8004fe4 <_Z20OD_CAN2_Baudrate_sett>
                respCode = can::signals::SENSOR_SDO_RespCode::OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            }
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 80045fe:	f000 fcd5 	bl	8004fac <_Z20OD_CAN2_Baudrate_getv>
 8004602:	4603      	mov	r3, r0
 8004604:	461a      	mov	r2, r3
 8004606:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800460a:	4611      	mov	r1, r2
 800460c:	4618      	mov	r0, r3
 800460e:	f001 f879 	bl	8005704 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            break;
 8004612:	e03e      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x466: {   // OD_CAN2_Status
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004614:	2303      	movs	r3, #3
 8004616:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_Status>(OD_CAN2_Status_get());
 800461a:	f000 fcff 	bl	800501c <_Z18OD_CAN2_Status_getv>
 800461e:	4603      	mov	r3, r0
 8004620:	461a      	mov	r2, r3
 8004622:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004626:	4611      	mov	r1, r2
 8004628:	4618      	mov	r0, r3
 800462a:	f001 f880 	bl	800572e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>
            break;
 800462e:	e030      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x467: {   // OD_CAN2_DiscardedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004630:	2303      	movs	r3, #3
 8004632:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 8004636:	f000 fd0d 	bl	8005054 <_Z31OD_CAN2_DiscardedTxMessages_getv>
 800463a:	4602      	mov	r2, r0
 800463c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004640:	4611      	mov	r1, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f001 f888 	bl	8005758 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8004648:	e023      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x468: {   // OD_CAN2_ErrorStatus
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800464a:	2303      	movs	r3, #3
 800464c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8004650:	f000 fd1c 	bl	800508c <_Z23OD_CAN2_ErrorStatus_getv>
 8004654:	4603      	mov	r3, r0
 8004656:	461a      	mov	r2, r3
 8004658:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800465c:	4611      	mov	r1, r2
 800465e:	4618      	mov	r0, r3
 8004660:	f001 f88e 	bl	8005780 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            break;
 8004664:	e015      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        case 0x469: {   // OD_CAN2_DelayedTxMessages
            respCode = can::signals::SENSOR_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8004666:	2303      	movs	r3, #3
 8004668:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
            msgSdoResp.set<can::signals::SENSOR_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 800466c:	f000 fd2a 	bl	80050c4 <_Z29OD_CAN2_DelayedTxMessages_getv>
 8004670:	4602      	mov	r2, r0
 8004672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004676:	4611      	mov	r1, r2
 8004678:	4618      	mov	r0, r3
 800467a:	f001 f896 	bl	80057aa <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 800467e:	e008      	b.n	8004692 <_Z22handleSDORequestUploadRK9RxMessage+0x75e>
        }
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SENSOR_SDO_ID>(sdoId);
 8004680:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004684:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004688:	4611      	mov	r1, r2
 800468a:	4618      	mov	r0, r3
 800468c:	f001 f8a1 	bl	80057d2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>
            break;
 8004690:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SENSOR_SDO_RespCode>(respCode);
 8004692:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8004696:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800469a:	4611      	mov	r1, r2
 800469c:	4618      	mov	r0, r3
 800469e:	f001 f8ad 	bl	80057fc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 80046a2:	f107 0308 	add.w	r3, r7, #8
 80046a6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80046aa:	2200      	movs	r2, #0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fc fda1 	bl	80011f4 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 80046b2:	4b06      	ldr	r3, [pc, #24]	; (80046cc <_Z22handleSDORequestUploadRK9RxMessage+0x798>)
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	f107 0108 	add.w	r1, r7, #8
 80046ba:	2300      	movs	r3, #0
 80046bc:	2200      	movs	r2, #0
 80046be:	f00a fc87 	bl	800efd0 <osMessageQueuePut>
}
 80046c2:	bf00      	nop
 80046c4:	3770      	adds	r7, #112	; 0x70
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	2000079c 	.word	0x2000079c

080046d0 <_Z13OD_NodeID_getv>:
* or to trigger another function (e.g. enter debug mode).                 *
* ATTENTION: Then the threadsafe access has to be handled by the user,    *
* e.g with using the provided mutex.                                      *
***************************************************************************/
#ifndef OD_NodeID_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeID_get() {
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeID, portMAX_DELAY);
 80046d6:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <_Z13OD_NodeID_getv+0x30>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f04f 31ff 	mov.w	r1, #4294967295
 80046de:	4618      	mov	r0, r3
 80046e0:	f00a fa3b 	bl	800eb5a <osMutexAcquire>
    uint8_t value = OD_NodeID;
 80046e4:	4b07      	ldr	r3, [pc, #28]	; (8004704 <_Z13OD_NodeID_getv+0x34>)
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeID);
 80046ea:	4b05      	ldr	r3, [pc, #20]	; (8004700 <_Z13OD_NodeID_getv+0x30>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f00a fa7e 	bl	800ebf0 <osMutexRelease>
    return value;
 80046f4:	79fb      	ldrb	r3, [r7, #7]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3708      	adds	r7, #8
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	20000810 	.word	0x20000810
 8004704:	200007a5 	.word	0x200007a5

08004708 <_Z17OD_NodeStatus_getv>:
    osMutexRelease(mutex_OD_NodeID);
}
#endif

#ifndef OD_NodeStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeStatus_get() {
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeStatus, portMAX_DELAY);
 800470e:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <_Z17OD_NodeStatus_getv+0x30>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f04f 31ff 	mov.w	r1, #4294967295
 8004716:	4618      	mov	r0, r3
 8004718:	f00a fa1f 	bl	800eb5a <osMutexAcquire>
    uint8_t value = OD_NodeStatus;
 800471c:	4b07      	ldr	r3, [pc, #28]	; (800473c <_Z17OD_NodeStatus_getv+0x34>)
 800471e:	781b      	ldrb	r3, [r3, #0]
 8004720:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeStatus);
 8004722:	4b05      	ldr	r3, [pc, #20]	; (8004738 <_Z17OD_NodeStatus_getv+0x30>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f00a fa62 	bl	800ebf0 <osMutexRelease>
    return value;
 800472c:	79fb      	ldrb	r3, [r7, #7]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20000814 	.word	0x20000814
 800473c:	200007a6 	.word	0x200007a6

08004740 <_Z22OD_ProtocolVersion_getv>:
    osMutexRelease(mutex_OD_NodeStatus);
}
#endif

#ifndef OD_ProtocolVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_ProtocolVersion_get() {
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ProtocolVersion, portMAX_DELAY);
 8004746:	4b0a      	ldr	r3, [pc, #40]	; (8004770 <_Z22OD_ProtocolVersion_getv+0x30>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f04f 31ff 	mov.w	r1, #4294967295
 800474e:	4618      	mov	r0, r3
 8004750:	f00a fa03 	bl	800eb5a <osMutexAcquire>
    uint16_t value = OD_ProtocolVersion;
 8004754:	4b07      	ldr	r3, [pc, #28]	; (8004774 <_Z22OD_ProtocolVersion_getv+0x34>)
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_ProtocolVersion);
 800475a:	4b05      	ldr	r3, [pc, #20]	; (8004770 <_Z22OD_ProtocolVersion_getv+0x30>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f00a fa46 	bl	800ebf0 <osMutexRelease>
    return value;
 8004764:	88fb      	ldrh	r3, [r7, #6]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	20000818 	.word	0x20000818
 8004774:	20000000 	.word	0x20000000

08004778 <_Z19OD_StackVersion_getv>:
    osMutexRelease(mutex_OD_ProtocolVersion);
}
#endif

#ifndef OD_StackVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_StackVersion_get() {
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StackVersion, portMAX_DELAY);
 800477e:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <_Z19OD_StackVersion_getv+0x30>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f04f 31ff 	mov.w	r1, #4294967295
 8004786:	4618      	mov	r0, r3
 8004788:	f00a f9e7 	bl	800eb5a <osMutexAcquire>
    uint16_t value = OD_StackVersion;
 800478c:	4b07      	ldr	r3, [pc, #28]	; (80047ac <_Z19OD_StackVersion_getv+0x34>)
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_StackVersion);
 8004792:	4b05      	ldr	r3, [pc, #20]	; (80047a8 <_Z19OD_StackVersion_getv+0x30>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f00a fa2a 	bl	800ebf0 <osMutexRelease>
    return value;
 800479c:	88fb      	ldrh	r3, [r7, #6]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3708      	adds	r7, #8
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	2000081c 	.word	0x2000081c
 80047ac:	200007a8 	.word	0x200007a8

080047b0 <_Z17OD_DbcVersion_getv>:
    osMutexRelease(mutex_OD_StackVersion);
}
#endif

#ifndef OD_DbcVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_DbcVersion_get() {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_DbcVersion, portMAX_DELAY);
 80047b6:	4b0a      	ldr	r3, [pc, #40]	; (80047e0 <_Z17OD_DbcVersion_getv+0x30>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f04f 31ff 	mov.w	r1, #4294967295
 80047be:	4618      	mov	r0, r3
 80047c0:	f00a f9cb 	bl	800eb5a <osMutexAcquire>
    uint16_t value = OD_DbcVersion;
 80047c4:	4b07      	ldr	r3, [pc, #28]	; (80047e4 <_Z17OD_DbcVersion_getv+0x34>)
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_DbcVersion);
 80047ca:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <_Z17OD_DbcVersion_getv+0x30>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4618      	mov	r0, r3
 80047d0:	f00a fa0e 	bl	800ebf0 <osMutexRelease>
    return value;
 80047d4:	88fb      	ldrh	r3, [r7, #6]
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	20000820 	.word	0x20000820
 80047e4:	200007aa 	.word	0x200007aa

080047e8 <_Z24OD_HeartbeatInterval_getv>:
    osMutexRelease(mutex_OD_DbcVersion);
}
#endif

#ifndef OD_HeartbeatInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_HeartbeatInterval_get() {
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 80047ee:	4b0a      	ldr	r3, [pc, #40]	; (8004818 <_Z24OD_HeartbeatInterval_getv+0x30>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f04f 31ff 	mov.w	r1, #4294967295
 80047f6:	4618      	mov	r0, r3
 80047f8:	f00a f9af 	bl	800eb5a <osMutexAcquire>
    uint16_t value = OD_HeartbeatInterval;
 80047fc:	4b07      	ldr	r3, [pc, #28]	; (800481c <_Z24OD_HeartbeatInterval_getv+0x34>)
 80047fe:	881b      	ldrh	r3, [r3, #0]
 8004800:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 8004802:	4b05      	ldr	r3, [pc, #20]	; (8004818 <_Z24OD_HeartbeatInterval_getv+0x30>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f00a f9f2 	bl	800ebf0 <osMutexRelease>
    return value;
 800480c:	88fb      	ldrh	r3, [r7, #6]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	20000824 	.word	0x20000824
 800481c:	20000002 	.word	0x20000002

08004820 <_Z24OD_HeartbeatInterval_sett>:
#endif
#ifndef OD_HeartbeatInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_HeartbeatInterval_set(const uint16_t value) {
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	4603      	mov	r3, r0
 8004828:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 800482a:	4b09      	ldr	r3, [pc, #36]	; (8004850 <_Z24OD_HeartbeatInterval_sett+0x30>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f04f 31ff 	mov.w	r1, #4294967295
 8004832:	4618      	mov	r0, r3
 8004834:	f00a f991 	bl	800eb5a <osMutexAcquire>
    OD_HeartbeatInterval = value;
 8004838:	4a06      	ldr	r2, [pc, #24]	; (8004854 <_Z24OD_HeartbeatInterval_sett+0x34>)
 800483a:	88fb      	ldrh	r3, [r7, #6]
 800483c:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 800483e:	4b04      	ldr	r3, [pc, #16]	; (8004850 <_Z24OD_HeartbeatInterval_sett+0x30>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f00a f9d4 	bl	800ebf0 <osMutexRelease>
}
 8004848:	bf00      	nop
 800484a:	3708      	adds	r7, #8
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	20000824 	.word	0x20000824
 8004854:	20000002 	.word	0x20000002

08004858 <_Z21OD_SendOdOnBootup_getv>:
#endif

#ifndef OD_SendOdOnBootup_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SendOdOnBootup_get() {
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 800485e:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <_Z21OD_SendOdOnBootup_getv+0x30>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f04f 31ff 	mov.w	r1, #4294967295
 8004866:	4618      	mov	r0, r3
 8004868:	f00a f977 	bl	800eb5a <osMutexAcquire>
    uint8_t value = OD_SendOdOnBootup;
 800486c:	4b07      	ldr	r3, [pc, #28]	; (800488c <_Z21OD_SendOdOnBootup_getv+0x34>)
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 8004872:	4b05      	ldr	r3, [pc, #20]	; (8004888 <_Z21OD_SendOdOnBootup_getv+0x30>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f00a f9ba 	bl	800ebf0 <osMutexRelease>
    return value;
 800487c:	79fb      	ldrb	r3, [r7, #7]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3708      	adds	r7, #8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20000828 	.word	0x20000828
 800488c:	200007ac 	.word	0x200007ac

08004890 <_Z21OD_SendOdOnBootup_seth>:
#endif
#ifndef OD_SendOdOnBootup_SET_OVERWRITE
void WEAK_SYMBOL OD_SendOdOnBootup_set(const uint8_t value) {
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 800489a:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <_Z21OD_SendOdOnBootup_seth+0x30>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f04f 31ff 	mov.w	r1, #4294967295
 80048a2:	4618      	mov	r0, r3
 80048a4:	f00a f959 	bl	800eb5a <osMutexAcquire>
    OD_SendOdOnBootup = value;
 80048a8:	4a06      	ldr	r2, [pc, #24]	; (80048c4 <_Z21OD_SendOdOnBootup_seth+0x34>)
 80048aa:	79fb      	ldrb	r3, [r7, #7]
 80048ac:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 80048ae:	4b04      	ldr	r3, [pc, #16]	; (80048c0 <_Z21OD_SendOdOnBootup_seth+0x30>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4618      	mov	r0, r3
 80048b4:	f00a f99c 	bl	800ebf0 <osMutexRelease>
}
 80048b8:	bf00      	nop
 80048ba:	3708      	adds	r7, #8
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	20000828 	.word	0x20000828
 80048c4:	200007ac 	.word	0x200007ac

080048c8 <_Z26OD_OdEntrySendInterval_getv>:
#endif

#ifndef OD_OdEntrySendInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_OdEntrySendInterval_get() {
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 80048ce:	4b0a      	ldr	r3, [pc, #40]	; (80048f8 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f04f 31ff 	mov.w	r1, #4294967295
 80048d6:	4618      	mov	r0, r3
 80048d8:	f00a f93f 	bl	800eb5a <osMutexAcquire>
    uint16_t value = OD_OdEntrySendInterval;
 80048dc:	4b07      	ldr	r3, [pc, #28]	; (80048fc <_Z26OD_OdEntrySendInterval_getv+0x34>)
 80048de:	881b      	ldrh	r3, [r3, #0]
 80048e0:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 80048e2:	4b05      	ldr	r3, [pc, #20]	; (80048f8 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f00a f982 	bl	800ebf0 <osMutexRelease>
    return value;
 80048ec:	88fb      	ldrh	r3, [r7, #6]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	2000082c 	.word	0x2000082c
 80048fc:	20000004 	.word	0x20000004

08004900 <_Z26OD_OdEntrySendInterval_sett>:
#endif
#ifndef OD_OdEntrySendInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_OdEntrySendInterval_set(const uint16_t value) {
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	4603      	mov	r3, r0
 8004908:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 800490a:	4b09      	ldr	r3, [pc, #36]	; (8004930 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f04f 31ff 	mov.w	r1, #4294967295
 8004912:	4618      	mov	r0, r3
 8004914:	f00a f921 	bl	800eb5a <osMutexAcquire>
    OD_OdEntrySendInterval = value;
 8004918:	4a06      	ldr	r2, [pc, #24]	; (8004934 <_Z26OD_OdEntrySendInterval_sett+0x34>)
 800491a:	88fb      	ldrh	r3, [r7, #6]
 800491c:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 800491e:	4b04      	ldr	r3, [pc, #16]	; (8004930 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f00a f964 	bl	800ebf0 <osMutexRelease>
}
 8004928:	bf00      	nop
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	2000082c 	.word	0x2000082c
 8004934:	20000004 	.word	0x20000004

08004938 <_Z15OD_CpuUsage_getv>:
#endif

#ifndef OD_CpuUsage_GET_OVERWRITE
float WEAK_SYMBOL OD_CpuUsage_get() {
 8004938:	b580      	push	{r7, lr}
 800493a:	b082      	sub	sp, #8
 800493c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 800493e:	4b0b      	ldr	r3, [pc, #44]	; (800496c <_Z15OD_CpuUsage_getv+0x34>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f04f 31ff 	mov.w	r1, #4294967295
 8004946:	4618      	mov	r0, r3
 8004948:	f00a f907 	bl	800eb5a <osMutexAcquire>
    float value = OD_CpuUsage;
 800494c:	4b08      	ldr	r3, [pc, #32]	; (8004970 <_Z15OD_CpuUsage_getv+0x38>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CpuUsage);
 8004952:	4b06      	ldr	r3, [pc, #24]	; (800496c <_Z15OD_CpuUsage_getv+0x34>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f00a f94a 	bl	800ebf0 <osMutexRelease>
    return value;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	ee07 3a90 	vmov	s15, r3
}
 8004962:	eeb0 0a67 	vmov.f32	s0, s15
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20000830 	.word	0x20000830
 8004970:	200007b0 	.word	0x200007b0

08004974 <_Z14OD_MemFree_getv>:
    osMutexRelease(mutex_OD_CpuUsage);
}
#endif

#ifndef OD_MemFree_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_MemFree_get() {
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 800497a:	4b0a      	ldr	r3, [pc, #40]	; (80049a4 <_Z14OD_MemFree_getv+0x30>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f04f 31ff 	mov.w	r1, #4294967295
 8004982:	4618      	mov	r0, r3
 8004984:	f00a f8e9 	bl	800eb5a <osMutexAcquire>
    uint32_t value = OD_MemFree;
 8004988:	4b07      	ldr	r3, [pc, #28]	; (80049a8 <_Z14OD_MemFree_getv+0x34>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_MemFree);
 800498e:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <_Z14OD_MemFree_getv+0x30>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f00a f92c 	bl	800ebf0 <osMutexRelease>
    return value;
 8004998:	687b      	ldr	r3, [r7, #4]
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	20000834 	.word	0x20000834
 80049a8:	200007b4 	.word	0x200007b4

080049ac <_Z16OD_BoardTemp_getv>:
    osMutexRelease(mutex_OD_MemFree);
}
#endif

#ifndef OD_BoardTemp_GET_OVERWRITE
float WEAK_SYMBOL OD_BoardTemp_get() {
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <_Z16OD_BoardTemp_getv+0x34>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f04f 31ff 	mov.w	r1, #4294967295
 80049ba:	4618      	mov	r0, r3
 80049bc:	f00a f8cd 	bl	800eb5a <osMutexAcquire>
    float value = OD_BoardTemp;
 80049c0:	4b08      	ldr	r3, [pc, #32]	; (80049e4 <_Z16OD_BoardTemp_getv+0x38>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BoardTemp);
 80049c6:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <_Z16OD_BoardTemp_getv+0x34>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f00a f910 	bl	800ebf0 <osMutexRelease>
    return value;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	ee07 3a90 	vmov	s15, r3
}
 80049d6:	eeb0 0a67 	vmov.f32	s0, s15
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20000838 	.word	0x20000838
 80049e4:	200007b8 	.word	0x200007b8

080049e8 <_Z16OD_BoardTemp_setf>:
#endif
#ifndef OD_BoardTemp_SET_OVERWRITE
void WEAK_SYMBOL OD_BoardTemp_set(const float value) {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 80049f2:	4b09      	ldr	r3, [pc, #36]	; (8004a18 <_Z16OD_BoardTemp_setf+0x30>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f04f 31ff 	mov.w	r1, #4294967295
 80049fa:	4618      	mov	r0, r3
 80049fc:	f00a f8ad 	bl	800eb5a <osMutexAcquire>
    OD_BoardTemp = value;
 8004a00:	4a06      	ldr	r2, [pc, #24]	; (8004a1c <_Z16OD_BoardTemp_setf+0x34>)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_BoardTemp);
 8004a06:	4b04      	ldr	r3, [pc, #16]	; (8004a18 <_Z16OD_BoardTemp_setf+0x30>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f00a f8f0 	bl	800ebf0 <osMutexRelease>
}
 8004a10:	bf00      	nop
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20000838 	.word	0x20000838
 8004a1c:	200007b8 	.word	0x200007b8

08004a20 <_Z19OD_InputVoltage_getv>:
#endif

#ifndef OD_InputVoltage_GET_OVERWRITE
float WEAK_SYMBOL OD_InputVoltage_get() {
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 8004a26:	4b0b      	ldr	r3, [pc, #44]	; (8004a54 <_Z19OD_InputVoltage_getv+0x34>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f04f 31ff 	mov.w	r1, #4294967295
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f00a f893 	bl	800eb5a <osMutexAcquire>
    float value = OD_InputVoltage;
 8004a34:	4b08      	ldr	r3, [pc, #32]	; (8004a58 <_Z19OD_InputVoltage_getv+0x38>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_InputVoltage);
 8004a3a:	4b06      	ldr	r3, [pc, #24]	; (8004a54 <_Z19OD_InputVoltage_getv+0x34>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f00a f8d6 	bl	800ebf0 <osMutexRelease>
    return value;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	ee07 3a90 	vmov	s15, r3
}
 8004a4a:	eeb0 0a67 	vmov.f32	s0, s15
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	2000083c 	.word	0x2000083c
 8004a58:	200007bc 	.word	0x200007bc

08004a5c <_Z19OD_InputVoltage_setf>:
#endif
#ifndef OD_InputVoltage_SET_OVERWRITE
void WEAK_SYMBOL OD_InputVoltage_set(const float value) {
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 8004a66:	4b09      	ldr	r3, [pc, #36]	; (8004a8c <_Z19OD_InputVoltage_setf+0x30>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f04f 31ff 	mov.w	r1, #4294967295
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f00a f873 	bl	800eb5a <osMutexAcquire>
    OD_InputVoltage = value;
 8004a74:	4a06      	ldr	r2, [pc, #24]	; (8004a90 <_Z19OD_InputVoltage_setf+0x34>)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_InputVoltage);
 8004a7a:	4b04      	ldr	r3, [pc, #16]	; (8004a8c <_Z19OD_InputVoltage_setf+0x30>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f00a f8b6 	bl	800ebf0 <osMutexRelease>
}
 8004a84:	bf00      	nop
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	2000083c 	.word	0x2000083c
 8004a90:	200007bc 	.word	0x200007bc

08004a94 <_Z14OD_runtime_getv>:
#endif

#ifndef OD_runtime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_runtime_get() {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_runtime, portMAX_DELAY);
 8004a9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ac4 <_Z14OD_runtime_getv+0x30>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f04f 31ff 	mov.w	r1, #4294967295
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f00a f859 	bl	800eb5a <osMutexAcquire>
    uint32_t value = OD_runtime;
 8004aa8:	4b07      	ldr	r3, [pc, #28]	; (8004ac8 <_Z14OD_runtime_getv+0x34>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_runtime);
 8004aae:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <_Z14OD_runtime_getv+0x30>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f00a f89c 	bl	800ebf0 <osMutexRelease>
    return value;
 8004ab8:	687b      	ldr	r3, [r7, #4]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	20000840 	.word	0x20000840
 8004ac8:	200007c0 	.word	0x200007c0

08004acc <_Z12OD_SdcIn_getv>:
    osMutexRelease(mutex_OD_runtime);
}
#endif

#ifndef OD_SdcIn_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcIn_get() {
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcIn, portMAX_DELAY);
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <_Z12OD_SdcIn_getv+0x30>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f04f 31ff 	mov.w	r1, #4294967295
 8004ada:	4618      	mov	r0, r3
 8004adc:	f00a f83d 	bl	800eb5a <osMutexAcquire>
    uint8_t value = OD_SdcIn;
 8004ae0:	4b07      	ldr	r3, [pc, #28]	; (8004b00 <_Z12OD_SdcIn_getv+0x34>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcIn);
 8004ae6:	4b05      	ldr	r3, [pc, #20]	; (8004afc <_Z12OD_SdcIn_getv+0x30>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f00a f880 	bl	800ebf0 <osMutexRelease>
    return value;
 8004af0:	79fb      	ldrb	r3, [r7, #7]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	20000844 	.word	0x20000844
 8004b00:	200007c4 	.word	0x200007c4

08004b04 <_Z13OD_SdcOut_getv>:
    osMutexRelease(mutex_OD_SdcIn);
}
#endif

#ifndef OD_SdcOut_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcOut_get() {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcOut, portMAX_DELAY);
 8004b0a:	4b0a      	ldr	r3, [pc, #40]	; (8004b34 <_Z13OD_SdcOut_getv+0x30>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f04f 31ff 	mov.w	r1, #4294967295
 8004b12:	4618      	mov	r0, r3
 8004b14:	f00a f821 	bl	800eb5a <osMutexAcquire>
    uint8_t value = OD_SdcOut;
 8004b18:	4b07      	ldr	r3, [pc, #28]	; (8004b38 <_Z13OD_SdcOut_getv+0x34>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcOut);
 8004b1e:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <_Z13OD_SdcOut_getv+0x30>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f00a f864 	bl	800ebf0 <osMutexRelease>
    return value;
 8004b28:	79fb      	ldrb	r3, [r7, #7]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20000848 	.word	0x20000848
 8004b38:	200007c5 	.word	0x200007c5

08004b3c <_Z15OD_ChipUID1_getv>:
    osMutexRelease(mutex_OD_SdcOut);
}
#endif

#ifndef OD_ChipUID1_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID1_get() {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b082      	sub	sp, #8
 8004b40:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID1, portMAX_DELAY);
 8004b42:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <_Z15OD_ChipUID1_getv+0x38>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f04f 31ff 	mov.w	r1, #4294967295
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f00a f805 	bl	800eb5a <osMutexAcquire>
    uint64_t value = OD_ChipUID1;
 8004b50:	4b09      	ldr	r3, [pc, #36]	; (8004b78 <_Z15OD_ChipUID1_getv+0x3c>)
 8004b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b56:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID1);
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <_Z15OD_ChipUID1_getv+0x38>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f00a f846 	bl	800ebf0 <osMutexRelease>
    return value;
 8004b64:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004b68:	4610      	mov	r0, r2
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	2000084c 	.word	0x2000084c
 8004b78:	200007c8 	.word	0x200007c8

08004b7c <_Z15OD_ChipUID2_getv>:
    osMutexRelease(mutex_OD_ChipUID1);
}
#endif

#ifndef OD_ChipUID2_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID2_get() {
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID2, portMAX_DELAY);
 8004b82:	4b0c      	ldr	r3, [pc, #48]	; (8004bb4 <_Z15OD_ChipUID2_getv+0x38>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f04f 31ff 	mov.w	r1, #4294967295
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f009 ffe5 	bl	800eb5a <osMutexAcquire>
    uint64_t value = OD_ChipUID2;
 8004b90:	4b09      	ldr	r3, [pc, #36]	; (8004bb8 <_Z15OD_ChipUID2_getv+0x3c>)
 8004b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b96:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID2);
 8004b9a:	4b06      	ldr	r3, [pc, #24]	; (8004bb4 <_Z15OD_ChipUID2_getv+0x38>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f00a f826 	bl	800ebf0 <osMutexRelease>
    return value;
 8004ba4:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004ba8:	4610      	mov	r0, r2
 8004baa:	4619      	mov	r1, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	20000850 	.word	0x20000850
 8004bb8:	200007d0 	.word	0x200007d0

08004bbc <_Z16OD_BuildDate_getv>:
    osMutexRelease(mutex_OD_ChipUID2);
}
#endif

#ifndef OD_BuildDate_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildDate_get() {
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildDate, portMAX_DELAY);
 8004bc2:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <_Z16OD_BuildDate_getv+0x30>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f04f 31ff 	mov.w	r1, #4294967295
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f009 ffc5 	bl	800eb5a <osMutexAcquire>
    uint32_t value = OD_BuildDate;
 8004bd0:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <_Z16OD_BuildDate_getv+0x34>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildDate);
 8004bd6:	4b05      	ldr	r3, [pc, #20]	; (8004bec <_Z16OD_BuildDate_getv+0x30>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f00a f808 	bl	800ebf0 <osMutexRelease>
    return value;
 8004be0:	687b      	ldr	r3, [r7, #4]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3708      	adds	r7, #8
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	20000854 	.word	0x20000854
 8004bf0:	200007d8 	.word	0x200007d8

08004bf4 <_Z16OD_BuildTime_getv>:
    osMutexRelease(mutex_OD_BuildDate);
}
#endif

#ifndef OD_BuildTime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildTime_get() {
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b082      	sub	sp, #8
 8004bf8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildTime, portMAX_DELAY);
 8004bfa:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <_Z16OD_BuildTime_getv+0x30>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f04f 31ff 	mov.w	r1, #4294967295
 8004c02:	4618      	mov	r0, r3
 8004c04:	f009 ffa9 	bl	800eb5a <osMutexAcquire>
    uint32_t value = OD_BuildTime;
 8004c08:	4b07      	ldr	r3, [pc, #28]	; (8004c28 <_Z16OD_BuildTime_getv+0x34>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildTime);
 8004c0e:	4b05      	ldr	r3, [pc, #20]	; (8004c24 <_Z16OD_BuildTime_getv+0x30>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f009 ffec 	bl	800ebf0 <osMutexRelease>
    return value;
 8004c18:	687b      	ldr	r3, [r7, #4]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3708      	adds	r7, #8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20000858 	.word	0x20000858
 8004c28:	200007dc 	.word	0x200007dc

08004c2c <_Z20OD_CAN1_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_BuildTime);
}
#endif

#ifndef OD_CAN1_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_TxErrCnt_get() {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_TxErrCnt, portMAX_DELAY);
 8004c32:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f04f 31ff 	mov.w	r1, #4294967295
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f009 ff8d 	bl	800eb5a <osMutexAcquire>
    uint8_t value = OD_CAN1_TxErrCnt;
 8004c40:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <_Z20OD_CAN1_TxErrCnt_getv+0x34>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
 8004c46:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f009 ffd0 	bl	800ebf0 <osMutexRelease>
    return value;
 8004c50:	79fb      	ldrb	r3, [r7, #7]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3708      	adds	r7, #8
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	2000085c 	.word	0x2000085c
 8004c60:	200007e0 	.word	0x200007e0

08004c64 <_Z20OD_CAN1_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
}
#endif

#ifndef OD_CAN1_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_RxErrCnt_get() {
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_RxErrCnt, portMAX_DELAY);
 8004c6a:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f04f 31ff 	mov.w	r1, #4294967295
 8004c72:	4618      	mov	r0, r3
 8004c74:	f009 ff71 	bl	800eb5a <osMutexAcquire>
    uint8_t value = OD_CAN1_RxErrCnt;
 8004c78:	4b07      	ldr	r3, [pc, #28]	; (8004c98 <_Z20OD_CAN1_RxErrCnt_getv+0x34>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
 8004c7e:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f009 ffb4 	bl	800ebf0 <osMutexRelease>
    return value;
 8004c88:	79fb      	ldrb	r3, [r7, #7]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	20000860 	.word	0x20000860
 8004c98:	200007e1 	.word	0x200007e1

08004c9c <_Z25OD_CAN1_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
}
#endif

#ifndef OD_CAN1_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_lastErrorCode_get() {
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_lastErrorCode, portMAX_DELAY);
 8004ca2:	4b0a      	ldr	r3, [pc, #40]	; (8004ccc <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f04f 31ff 	mov.w	r1, #4294967295
 8004caa:	4618      	mov	r0, r3
 8004cac:	f009 ff55 	bl	800eb5a <osMutexAcquire>
    uint32_t value = OD_CAN1_lastErrorCode;
 8004cb0:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <_Z25OD_CAN1_lastErrorCode_getv+0x34>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
 8004cb6:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f009 ff98 	bl	800ebf0 <osMutexRelease>
    return value;
 8004cc0:	687b      	ldr	r3, [r7, #4]
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000864 	.word	0x20000864
 8004cd0:	200007e4 	.word	0x200007e4

08004cd4 <_Z26OD_CAN1_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
}
#endif

#ifndef OD_CAN1_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_autoErrorReset_get() {
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 8004cda:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f04f 31ff 	mov.w	r1, #4294967295
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f009 ff39 	bl	800eb5a <osMutexAcquire>
    uint8_t value = OD_CAN1_autoErrorReset;
 8004ce8:	4b07      	ldr	r3, [pc, #28]	; (8004d08 <_Z26OD_CAN1_autoErrorReset_getv+0x34>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 8004cee:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f009 ff7c 	bl	800ebf0 <osMutexRelease>
    return value;
 8004cf8:	79fb      	ldrb	r3, [r7, #7]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3708      	adds	r7, #8
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20000868 	.word	0x20000868
 8004d08:	20000006 	.word	0x20000006

08004d0c <_Z26OD_CAN1_autoErrorReset_seth>:
#endif
#ifndef OD_CAN1_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_autoErrorReset_set(const uint8_t value) {
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	4603      	mov	r3, r0
 8004d14:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 8004d16:	4b09      	ldr	r3, [pc, #36]	; (8004d3c <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f04f 31ff 	mov.w	r1, #4294967295
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f009 ff1b 	bl	800eb5a <osMutexAcquire>
    OD_CAN1_autoErrorReset = value;
 8004d24:	4a06      	ldr	r2, [pc, #24]	; (8004d40 <_Z26OD_CAN1_autoErrorReset_seth+0x34>)
 8004d26:	79fb      	ldrb	r3, [r7, #7]
 8004d28:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 8004d2a:	4b04      	ldr	r3, [pc, #16]	; (8004d3c <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f009 ff5e 	bl	800ebf0 <osMutexRelease>
}
 8004d34:	bf00      	nop
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	20000868 	.word	0x20000868
 8004d40:	20000006 	.word	0x20000006

08004d44 <_Z20OD_CAN1_Baudrate_getv>:
#endif

#ifndef OD_CAN1_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN1_Baudrate_get() {
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8004d4a:	4b0a      	ldr	r3, [pc, #40]	; (8004d74 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f04f 31ff 	mov.w	r1, #4294967295
 8004d52:	4618      	mov	r0, r3
 8004d54:	f009 ff01 	bl	800eb5a <osMutexAcquire>
    uint16_t value = OD_CAN1_Baudrate;
 8004d58:	4b07      	ldr	r3, [pc, #28]	; (8004d78 <_Z20OD_CAN1_Baudrate_getv+0x34>)
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 8004d5e:	4b05      	ldr	r3, [pc, #20]	; (8004d74 <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f009 ff44 	bl	800ebf0 <osMutexRelease>
    return value;
 8004d68:	88fb      	ldrh	r3, [r7, #6]
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	2000086c 	.word	0x2000086c
 8004d78:	20000008 	.word	0x20000008

08004d7c <_Z20OD_CAN1_Baudrate_sett>:
#endif
#ifndef OD_CAN1_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_Baudrate_set(const uint16_t value) {
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	4603      	mov	r3, r0
 8004d84:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8004d86:	4b09      	ldr	r3, [pc, #36]	; (8004dac <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f009 fee3 	bl	800eb5a <osMutexAcquire>
    OD_CAN1_Baudrate = value;
 8004d94:	4a06      	ldr	r2, [pc, #24]	; (8004db0 <_Z20OD_CAN1_Baudrate_sett+0x34>)
 8004d96:	88fb      	ldrh	r3, [r7, #6]
 8004d98:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 8004d9a:	4b04      	ldr	r3, [pc, #16]	; (8004dac <_Z20OD_CAN1_Baudrate_sett+0x30>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f009 ff26 	bl	800ebf0 <osMutexRelease>
}
 8004da4:	bf00      	nop
 8004da6:	3708      	adds	r7, #8
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	2000086c 	.word	0x2000086c
 8004db0:	20000008 	.word	0x20000008

08004db4 <_Z18OD_CAN1_Status_getv>:
#endif

#ifndef OD_CAN1_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_Status_get() {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Status, portMAX_DELAY);
 8004dba:	4b0a      	ldr	r3, [pc, #40]	; (8004de4 <_Z18OD_CAN1_Status_getv+0x30>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f04f 31ff 	mov.w	r1, #4294967295
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f009 fec9 	bl	800eb5a <osMutexAcquire>
    uint8_t value = OD_CAN1_Status;
 8004dc8:	4b07      	ldr	r3, [pc, #28]	; (8004de8 <_Z18OD_CAN1_Status_getv+0x34>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_Status);
 8004dce:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <_Z18OD_CAN1_Status_getv+0x30>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f009 ff0c 	bl	800ebf0 <osMutexRelease>
    return value;
 8004dd8:	79fb      	ldrb	r3, [r7, #7]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000870 	.word	0x20000870
 8004de8:	200007e8 	.word	0x200007e8

08004dec <_Z31OD_CAN1_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_Status);
}
#endif

#ifndef OD_CAN1_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DiscardedTxMessages_get() {
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DiscardedTxMessages, portMAX_DELAY);
 8004df2:	4b0a      	ldr	r3, [pc, #40]	; (8004e1c <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f04f 31ff 	mov.w	r1, #4294967295
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f009 fead 	bl	800eb5a <osMutexAcquire>
    uint32_t value = OD_CAN1_DiscardedTxMessages;
 8004e00:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x34>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
 8004e06:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f009 fef0 	bl	800ebf0 <osMutexRelease>
    return value;
 8004e10:	687b      	ldr	r3, [r7, #4]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3708      	adds	r7, #8
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	20000874 	.word	0x20000874
 8004e20:	200007ec 	.word	0x200007ec

08004e24 <_Z23OD_CAN1_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN1_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_ErrorStatus_get() {
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b082      	sub	sp, #8
 8004e28:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_ErrorStatus, portMAX_DELAY);
 8004e2a:	4b0a      	ldr	r3, [pc, #40]	; (8004e54 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f04f 31ff 	mov.w	r1, #4294967295
 8004e32:	4618      	mov	r0, r3
 8004e34:	f009 fe91 	bl	800eb5a <osMutexAcquire>
    uint8_t value = OD_CAN1_ErrorStatus;
 8004e38:	4b07      	ldr	r3, [pc, #28]	; (8004e58 <_Z23OD_CAN1_ErrorStatus_getv+0x34>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
 8004e3e:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4618      	mov	r0, r3
 8004e44:	f009 fed4 	bl	800ebf0 <osMutexRelease>
    return value;
 8004e48:	79fb      	ldrb	r3, [r7, #7]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20000878 	.word	0x20000878
 8004e58:	200007f0 	.word	0x200007f0

08004e5c <_Z29OD_CAN1_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
}
#endif

#ifndef OD_CAN1_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DelayedTxMessages_get() {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DelayedTxMessages, portMAX_DELAY);
 8004e62:	4b0a      	ldr	r3, [pc, #40]	; (8004e8c <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f04f 31ff 	mov.w	r1, #4294967295
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f009 fe75 	bl	800eb5a <osMutexAcquire>
    uint32_t value = OD_CAN1_DelayedTxMessages;
 8004e70:	4b07      	ldr	r3, [pc, #28]	; (8004e90 <_Z29OD_CAN1_DelayedTxMessages_getv+0x34>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
 8004e76:	4b05      	ldr	r3, [pc, #20]	; (8004e8c <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f009 feb8 	bl	800ebf0 <osMutexRelease>
    return value;
 8004e80:	687b      	ldr	r3, [r7, #4]
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3708      	adds	r7, #8
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	2000087c 	.word	0x2000087c
 8004e90:	200007f4 	.word	0x200007f4

08004e94 <_Z20OD_CAN2_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
}
#endif

#ifndef OD_CAN2_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_TxErrCnt_get() {
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_TxErrCnt, portMAX_DELAY);
 8004e9a:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f04f 31ff 	mov.w	r1, #4294967295
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f009 fe59 	bl	800eb5a <osMutexAcquire>
    uint8_t value = OD_CAN2_TxErrCnt;
 8004ea8:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <_Z20OD_CAN2_TxErrCnt_getv+0x34>)
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
 8004eae:	4b05      	ldr	r3, [pc, #20]	; (8004ec4 <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f009 fe9c 	bl	800ebf0 <osMutexRelease>
    return value;
 8004eb8:	79fb      	ldrb	r3, [r7, #7]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3708      	adds	r7, #8
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000880 	.word	0x20000880
 8004ec8:	200007f8 	.word	0x200007f8

08004ecc <_Z20OD_CAN2_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
}
#endif

#ifndef OD_CAN2_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_RxErrCnt_get() {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_RxErrCnt, portMAX_DELAY);
 8004ed2:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f04f 31ff 	mov.w	r1, #4294967295
 8004eda:	4618      	mov	r0, r3
 8004edc:	f009 fe3d 	bl	800eb5a <osMutexAcquire>
    uint8_t value = OD_CAN2_RxErrCnt;
 8004ee0:	4b07      	ldr	r3, [pc, #28]	; (8004f00 <_Z20OD_CAN2_RxErrCnt_getv+0x34>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
 8004ee6:	4b05      	ldr	r3, [pc, #20]	; (8004efc <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f009 fe80 	bl	800ebf0 <osMutexRelease>
    return value;
 8004ef0:	79fb      	ldrb	r3, [r7, #7]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
 8004efa:	bf00      	nop
 8004efc:	20000884 	.word	0x20000884
 8004f00:	200007f9 	.word	0x200007f9

08004f04 <_Z25OD_CAN2_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
}
#endif

#ifndef OD_CAN2_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_lastErrorCode_get() {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_lastErrorCode, portMAX_DELAY);
 8004f0a:	4b0a      	ldr	r3, [pc, #40]	; (8004f34 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f04f 31ff 	mov.w	r1, #4294967295
 8004f12:	4618      	mov	r0, r3
 8004f14:	f009 fe21 	bl	800eb5a <osMutexAcquire>
    uint32_t value = OD_CAN2_lastErrorCode;
 8004f18:	4b07      	ldr	r3, [pc, #28]	; (8004f38 <_Z25OD_CAN2_lastErrorCode_getv+0x34>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
 8004f1e:	4b05      	ldr	r3, [pc, #20]	; (8004f34 <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f009 fe64 	bl	800ebf0 <osMutexRelease>
    return value;
 8004f28:	687b      	ldr	r3, [r7, #4]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
 8004f32:	bf00      	nop
 8004f34:	20000888 	.word	0x20000888
 8004f38:	200007fc 	.word	0x200007fc

08004f3c <_Z26OD_CAN2_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
}
#endif

#ifndef OD_CAN2_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_autoErrorReset_get() {
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b082      	sub	sp, #8
 8004f40:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 8004f42:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f04f 31ff 	mov.w	r1, #4294967295
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f009 fe05 	bl	800eb5a <osMutexAcquire>
    uint8_t value = OD_CAN2_autoErrorReset;
 8004f50:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <_Z26OD_CAN2_autoErrorReset_getv+0x34>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 8004f56:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f009 fe48 	bl	800ebf0 <osMutexRelease>
    return value;
 8004f60:	79fb      	ldrb	r3, [r7, #7]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	2000088c 	.word	0x2000088c
 8004f70:	2000000a 	.word	0x2000000a

08004f74 <_Z26OD_CAN2_autoErrorReset_seth>:
#endif
#ifndef OD_CAN2_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_autoErrorReset_set(const uint8_t value) {
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 8004f7e:	4b09      	ldr	r3, [pc, #36]	; (8004fa4 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f04f 31ff 	mov.w	r1, #4294967295
 8004f86:	4618      	mov	r0, r3
 8004f88:	f009 fde7 	bl	800eb5a <osMutexAcquire>
    OD_CAN2_autoErrorReset = value;
 8004f8c:	4a06      	ldr	r2, [pc, #24]	; (8004fa8 <_Z26OD_CAN2_autoErrorReset_seth+0x34>)
 8004f8e:	79fb      	ldrb	r3, [r7, #7]
 8004f90:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 8004f92:	4b04      	ldr	r3, [pc, #16]	; (8004fa4 <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f009 fe2a 	bl	800ebf0 <osMutexRelease>
}
 8004f9c:	bf00      	nop
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	2000088c 	.word	0x2000088c
 8004fa8:	2000000a 	.word	0x2000000a

08004fac <_Z20OD_CAN2_Baudrate_getv>:
#endif

#ifndef OD_CAN2_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN2_Baudrate_get() {
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 8004fb2:	4b0a      	ldr	r3, [pc, #40]	; (8004fdc <_Z20OD_CAN2_Baudrate_getv+0x30>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f04f 31ff 	mov.w	r1, #4294967295
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f009 fdcd 	bl	800eb5a <osMutexAcquire>
    uint16_t value = OD_CAN2_Baudrate;
 8004fc0:	4b07      	ldr	r3, [pc, #28]	; (8004fe0 <_Z20OD_CAN2_Baudrate_getv+0x34>)
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 8004fc6:	4b05      	ldr	r3, [pc, #20]	; (8004fdc <_Z20OD_CAN2_Baudrate_getv+0x30>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f009 fe10 	bl	800ebf0 <osMutexRelease>
    return value;
 8004fd0:	88fb      	ldrh	r3, [r7, #6]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000890 	.word	0x20000890
 8004fe0:	2000000c 	.word	0x2000000c

08004fe4 <_Z20OD_CAN2_Baudrate_sett>:
#endif
#ifndef OD_CAN2_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_Baudrate_set(const uint16_t value) {
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	4603      	mov	r3, r0
 8004fec:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 8004fee:	4b09      	ldr	r3, [pc, #36]	; (8005014 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f04f 31ff 	mov.w	r1, #4294967295
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f009 fdaf 	bl	800eb5a <osMutexAcquire>
    OD_CAN2_Baudrate = value;
 8004ffc:	4a06      	ldr	r2, [pc, #24]	; (8005018 <_Z20OD_CAN2_Baudrate_sett+0x34>)
 8004ffe:	88fb      	ldrh	r3, [r7, #6]
 8005000:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 8005002:	4b04      	ldr	r3, [pc, #16]	; (8005014 <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4618      	mov	r0, r3
 8005008:	f009 fdf2 	bl	800ebf0 <osMutexRelease>
}
 800500c:	bf00      	nop
 800500e:	3708      	adds	r7, #8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}
 8005014:	20000890 	.word	0x20000890
 8005018:	2000000c 	.word	0x2000000c

0800501c <_Z18OD_CAN2_Status_getv>:
#endif

#ifndef OD_CAN2_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_Status_get() {
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Status, portMAX_DELAY);
 8005022:	4b0a      	ldr	r3, [pc, #40]	; (800504c <_Z18OD_CAN2_Status_getv+0x30>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f04f 31ff 	mov.w	r1, #4294967295
 800502a:	4618      	mov	r0, r3
 800502c:	f009 fd95 	bl	800eb5a <osMutexAcquire>
    uint8_t value = OD_CAN2_Status;
 8005030:	4b07      	ldr	r3, [pc, #28]	; (8005050 <_Z18OD_CAN2_Status_getv+0x34>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_Status);
 8005036:	4b05      	ldr	r3, [pc, #20]	; (800504c <_Z18OD_CAN2_Status_getv+0x30>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4618      	mov	r0, r3
 800503c:	f009 fdd8 	bl	800ebf0 <osMutexRelease>
    return value;
 8005040:	79fb      	ldrb	r3, [r7, #7]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20000894 	.word	0x20000894
 8005050:	20000800 	.word	0x20000800

08005054 <_Z31OD_CAN2_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_Status);
}
#endif

#ifndef OD_CAN2_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DiscardedTxMessages_get() {
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DiscardedTxMessages, portMAX_DELAY);
 800505a:	4b0a      	ldr	r3, [pc, #40]	; (8005084 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f04f 31ff 	mov.w	r1, #4294967295
 8005062:	4618      	mov	r0, r3
 8005064:	f009 fd79 	bl	800eb5a <osMutexAcquire>
    uint32_t value = OD_CAN2_DiscardedTxMessages;
 8005068:	4b07      	ldr	r3, [pc, #28]	; (8005088 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x34>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
 800506e:	4b05      	ldr	r3, [pc, #20]	; (8005084 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f009 fdbc 	bl	800ebf0 <osMutexRelease>
    return value;
 8005078:	687b      	ldr	r3, [r7, #4]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20000898 	.word	0x20000898
 8005088:	20000804 	.word	0x20000804

0800508c <_Z23OD_CAN2_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN2_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_ErrorStatus_get() {
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_ErrorStatus, portMAX_DELAY);
 8005092:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f04f 31ff 	mov.w	r1, #4294967295
 800509a:	4618      	mov	r0, r3
 800509c:	f009 fd5d 	bl	800eb5a <osMutexAcquire>
    uint8_t value = OD_CAN2_ErrorStatus;
 80050a0:	4b07      	ldr	r3, [pc, #28]	; (80050c0 <_Z23OD_CAN2_ErrorStatus_getv+0x34>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
 80050a6:	4b05      	ldr	r3, [pc, #20]	; (80050bc <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f009 fda0 	bl	800ebf0 <osMutexRelease>
    return value;
 80050b0:	79fb      	ldrb	r3, [r7, #7]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	2000089c 	.word	0x2000089c
 80050c0:	20000808 	.word	0x20000808

080050c4 <_Z29OD_CAN2_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
}
#endif

#ifndef OD_CAN2_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DelayedTxMessages_get() {
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DelayedTxMessages, portMAX_DELAY);
 80050ca:	4b0a      	ldr	r3, [pc, #40]	; (80050f4 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f04f 31ff 	mov.w	r1, #4294967295
 80050d2:	4618      	mov	r0, r3
 80050d4:	f009 fd41 	bl	800eb5a <osMutexAcquire>
    uint32_t value = OD_CAN2_DelayedTxMessages;
 80050d8:	4b07      	ldr	r3, [pc, #28]	; (80050f8 <_Z29OD_CAN2_DelayedTxMessages_getv+0x34>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
 80050de:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f009 fd84 	bl	800ebf0 <osMutexRelease>
    return value;
 80050e8:	687b      	ldr	r3, [r7, #4]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	200008a0 	.word	0x200008a0
 80050f8:	2000080c 	.word	0x2000080c

080050fc <_Z17sendOdEntriesTaskPv>:
    0x469 
};
constexpr uint16_t NUMBER_OF_READABLE_SDO_IDS = 37;
extern RNG_HandleTypeDef hrng;

void sendOdEntriesTask(void *pvParameters) {
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b086      	sub	sp, #24
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
    // Delay for random amount so that not all nodes send exactly at the same time
    uint32_t randomDelayMs;
    HAL_RNG_GenerateRandomNumber(&hrng, &randomDelayMs);
 8005104:	f107 030c 	add.w	r3, r7, #12
 8005108:	4619      	mov	r1, r3
 800510a:	481f      	ldr	r0, [pc, #124]	; (8005188 <_Z17sendOdEntriesTaskPv+0x8c>)
 800510c:	f006 f9c4 	bl	800b498 <HAL_RNG_GenerateRandomNumber>
    randomDelayMs = randomDelayMs & 0xFF;   // Use only lower byte, so delay will be 255ms at maximum
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	b2db      	uxtb	r3, r3
 8005114:	60fb      	str	r3, [r7, #12]
    osDelay(pdMS_TO_TICKS(randomDelayMs));
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800511c:	fb02 f303 	mul.w	r3, r2, r3
 8005120:	4a1a      	ldr	r2, [pc, #104]	; (800518c <_Z17sendOdEntriesTaskPv+0x90>)
 8005122:	fba2 2303 	umull	r2, r3, r2, r3
 8005126:	099b      	lsrs	r3, r3, #6
 8005128:	4618      	mov	r0, r3
 800512a:	f009 fc75 	bl	800ea18 <osDelay>

    uint16_t currentSdoListPos = 0;
 800512e:	2300      	movs	r3, #0
 8005130:	82fb      	strh	r3, [r7, #22]

    while(1) {
        uint16_t delayInterval = OD_OdEntrySendInterval_get();
 8005132:	f7ff fbc9 	bl	80048c8 <_Z26OD_OdEntrySendInterval_getv>
 8005136:	4603      	mov	r3, r0
 8005138:	82bb      	strh	r3, [r7, #20]
        if(delayInterval >= 5) {    // Periodically sending of all readable OD entries is enabled
 800513a:	8abb      	ldrh	r3, [r7, #20]
 800513c:	2b04      	cmp	r3, #4
 800513e:	d91d      	bls.n	800517c <_Z17sendOdEntriesTaskPv+0x80>
            uint16_t sdoId = READABLE_SDO_IDS[currentSdoListPos];
 8005140:	8afb      	ldrh	r3, [r7, #22]
 8005142:	4a13      	ldr	r2, [pc, #76]	; (8005190 <_Z17sendOdEntriesTaskPv+0x94>)
 8005144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005148:	827b      	strh	r3, [r7, #18]

            currentSdoListPos++;
 800514a:	8afb      	ldrh	r3, [r7, #22]
 800514c:	3301      	adds	r3, #1
 800514e:	82fb      	strh	r3, [r7, #22]
            if (currentSdoListPos >= NUMBER_OF_READABLE_SDO_IDS) {
 8005150:	8afb      	ldrh	r3, [r7, #22]
 8005152:	2b24      	cmp	r3, #36	; 0x24
 8005154:	d901      	bls.n	800515a <_Z17sendOdEntriesTaskPv+0x5e>
                currentSdoListPos = 0;
 8005156:	2300      	movs	r3, #0
 8005158:	82fb      	strh	r3, [r7, #22]
            }

            handleSDORequestDownloadBySDOID(sdoId);
 800515a:	8a7b      	ldrh	r3, [r7, #18]
 800515c:	4618      	mov	r0, r3
 800515e:	f7fe fb73 	bl	8003848 <_Z31handleSDORequestDownloadBySDOIDt>

            osDelay(pdMS_TO_TICKS(delayInterval));
 8005162:	8abb      	ldrh	r3, [r7, #20]
 8005164:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005168:	fb02 f303 	mul.w	r3, r2, r3
 800516c:	4a07      	ldr	r2, [pc, #28]	; (800518c <_Z17sendOdEntriesTaskPv+0x90>)
 800516e:	fba2 2303 	umull	r2, r3, r2, r3
 8005172:	099b      	lsrs	r3, r3, #6
 8005174:	4618      	mov	r0, r3
 8005176:	f009 fc4f 	bl	800ea18 <osDelay>
 800517a:	e7da      	b.n	8005132 <_Z17sendOdEntriesTaskPv+0x36>

        } else {    // Sending OD entries is disabled, sleep for one second and then check again
            osDelay(pdMS_TO_TICKS(1000));
 800517c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005180:	f009 fc4a 	bl	800ea18 <osDelay>
        }
    }
 8005184:	e7d5      	b.n	8005132 <_Z17sendOdEntriesTaskPv+0x36>
 8005186:	bf00      	nop
 8005188:	200010cc 	.word	0x200010cc
 800518c:	10624dd3 	.word	0x10624dd3
 8005190:	08016334 	.word	0x08016334

08005194 <_ZN3can7MessageINS_8messages19SENSOR_SDO_Req_DownEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f103 0208 	add.w	r2, r3, #8
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	3310      	adds	r3, #16
 80051a6:	4619      	mov	r1, r3
 80051a8:	4610      	mov	r0, r2
 80051aa:	f7fd f985 	bl	80024b8 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 80051ae:	4603      	mov	r3, r0
        }
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_NodeIDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	460b      	mov	r3, r1
 80051c2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f103 0008 	add.w	r0, r3, #8
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f103 0110 	add.w	r1, r3, #16
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	1d1a      	adds	r2, r3, #4
 80051d4:	78fb      	ldrb	r3, [r7, #3]
 80051d6:	f7fe faaf 	bl	8003738 <_ZN3can7signals16SENSOR_OD_NodeID3setERyS2_Rhh>
        }
 80051da:	bf00      	nop
 80051dc:	3708      	adds	r7, #8
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_NodeStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	460b      	mov	r3, r1
 80051ec:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f103 0008 	add.w	r0, r3, #8
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f103 0110 	add.w	r1, r3, #16
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	1d1a      	adds	r2, r3, #4
 80051fe:	78fb      	ldrb	r3, [r7, #3]
 8005200:	f7fe fa67 	bl	80036d2 <_ZN3can7signals20SENSOR_OD_NodeStatus3setERyS2_Rhh>
        }
 8005204:	bf00      	nop
 8005206:	3708      	adds	r7, #8
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals25SENSOR_OD_ProtocolVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f103 0008 	add.w	r0, r3, #8
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f103 0110 	add.w	r1, r3, #16
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	1d1a      	adds	r2, r3, #4
 8005228:	887b      	ldrh	r3, [r7, #2]
 800522a:	f7fe fa24 	bl	8003676 <_ZN3can7signals25SENSOR_OD_ProtocolVersion3setERyS2_Rht>
        }
 800522e:	bf00      	nop
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_StackVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005236:	b580      	push	{r7, lr}
 8005238:	b082      	sub	sp, #8
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	460b      	mov	r3, r1
 8005240:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f103 0008 	add.w	r0, r3, #8
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f103 0110 	add.w	r1, r3, #16
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	1d1a      	adds	r2, r3, #4
 8005252:	887b      	ldrh	r3, [r7, #2]
 8005254:	f7fe f9e1 	bl	800361a <_ZN3can7signals22SENSOR_OD_StackVersion3setERyS2_Rht>
        }
 8005258:	bf00      	nop
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals20SENSOR_OD_DbcVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f103 0008 	add.w	r0, r3, #8
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f103 0110 	add.w	r1, r3, #16
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	1d1a      	adds	r2, r3, #4
 800527c:	887b      	ldrh	r3, [r7, #2]
 800527e:	f7fe f99e 	bl	80035be <_ZN3can7signals20SENSOR_OD_DbcVersion3setERyS2_Rht>
        }
 8005282:	bf00      	nop
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals27SENSOR_OD_HeartbeatIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800528a:	b580      	push	{r7, lr}
 800528c:	b082      	sub	sp, #8
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	460b      	mov	r3, r1
 8005294:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f103 0008 	add.w	r0, r3, #8
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f103 0110 	add.w	r1, r3, #16
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	1d1a      	adds	r2, r3, #4
 80052a6:	887b      	ldrh	r3, [r7, #2]
 80052a8:	f7fe f937 	bl	800351a <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3setERyS2_Rht>
        }
 80052ac:	bf00      	nop
 80052ae:	3708      	adds	r7, #8
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals24SENSOR_OD_SendOdOnBootupEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	460b      	mov	r3, r1
 80052be:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f103 0008 	add.w	r0, r3, #8
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f103 0110 	add.w	r1, r3, #16
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	1d1a      	adds	r2, r3, #4
 80052d0:	78fb      	ldrb	r3, [r7, #3]
 80052d2:	f7fe f8cb 	bl	800346c <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3setERyS2_Rhh>
        }
 80052d6:	bf00      	nop
 80052d8:	3708      	adds	r7, #8
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}

080052de <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80052de:	b580      	push	{r7, lr}
 80052e0:	b082      	sub	sp, #8
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
 80052e6:	460b      	mov	r3, r1
 80052e8:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f103 0008 	add.w	r0, r3, #8
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f103 0110 	add.w	r1, r3, #16
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	1d1a      	adds	r2, r3, #4
 80052fa:	887b      	ldrh	r3, [r7, #2]
 80052fc:	f7fe f864 	bl	80033c8 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3setERyS2_Rht>
        }
 8005300:	bf00      	nop
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_CpuUsageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f103 0008 	add.w	r0, r3, #8
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	f103 0110 	add.w	r1, r3, #16
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	3304      	adds	r3, #4
 8005324:	ed97 0a00 	vldr	s0, [r7]
 8005328:	461a      	mov	r2, r3
 800532a:	f7fd ffef 	bl	800330c <_ZN3can7signals18SENSOR_OD_CpuUsage3setERyS2_Rhf>
        }
 800532e:	bf00      	nop
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_MemFreeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005336:	b580      	push	{r7, lr}
 8005338:	b082      	sub	sp, #8
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f103 0008 	add.w	r0, r3, #8
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f103 0110 	add.w	r1, r3, #16
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	1d1a      	adds	r2, r3, #4
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	f7fd ffa3 	bl	800329c <_ZN3can7signals17SENSOR_OD_MemFree3setERyS2_Rhm>
        }
 8005356:	bf00      	nop
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BoardTempEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800535e:	b580      	push	{r7, lr}
 8005360:	b082      	sub	sp, #8
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f103 0008 	add.w	r0, r3, #8
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f103 0110 	add.w	r1, r3, #16
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	3304      	adds	r3, #4
 800537a:	ed97 0a00 	vldr	s0, [r7]
 800537e:	461a      	mov	r2, r3
 8005380:	f7fd ff2a 	bl	80031d8 <_ZN3can7signals19SENSOR_OD_BoardTemp3setERyS2_Rhf>
        }
 8005384:	bf00      	nop
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals22SENSOR_OD_InputVoltageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f103 0008 	add.w	r0, r3, #8
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f103 0110 	add.w	r1, r3, #16
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3304      	adds	r3, #4
 80053a8:	ed97 0a00 	vldr	s0, [r7]
 80053ac:	461a      	mov	r2, r3
 80053ae:	f7fd feb9 	bl	8003124 <_ZN3can7signals22SENSOR_OD_InputVoltage3setERyS2_Rhf>
        }
 80053b2:	bf00      	nop
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals17SENSOR_OD_runtimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b082      	sub	sp, #8
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f103 0008 	add.w	r0, r3, #8
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f103 0110 	add.w	r1, r3, #16
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	1d1a      	adds	r2, r3, #4
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	f7fd fe6b 	bl	80030b0 <_ZN3can7signals17SENSOR_OD_runtime3setERyS2_Rhm>
        }
 80053da:	bf00      	nop
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals15SENSOR_OD_SdcInEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b082      	sub	sp, #8
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
 80053ea:	460b      	mov	r3, r1
 80053ec:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f103 0008 	add.w	r0, r3, #8
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f103 0110 	add.w	r1, r3, #16
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	1d1a      	adds	r2, r3, #4
 80053fe:	78fb      	ldrb	r3, [r7, #3]
 8005400:	f7fd fe22 	bl	8003048 <_ZN3can7signals15SENSOR_OD_SdcIn3setERyS2_Rhh>
        }
 8005404:	bf00      	nop
 8005406:	3708      	adds	r7, #8
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals16SENSOR_OD_SdcOutEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	460b      	mov	r3, r1
 8005416:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f103 0008 	add.w	r0, r3, #8
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f103 0110 	add.w	r1, r3, #16
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	1d1a      	adds	r2, r3, #4
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	f7fd fdd9 	bl	8002fe0 <_ZN3can7signals16SENSOR_OD_SdcOut3setERyS2_Rhh>
        }
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID1EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005436:	b590      	push	{r4, r7, lr}
 8005438:	b087      	sub	sp, #28
 800543a:	af02      	add	r7, sp, #8
 800543c:	60f8      	str	r0, [r7, #12]
 800543e:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	f103 0008 	add.w	r0, r3, #8
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f103 0110 	add.w	r1, r3, #16
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	1d1c      	adds	r4, r3, #4
 8005452:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005456:	e9cd 2300 	strd	r2, r3, [sp]
 800545a:	4622      	mov	r2, r4
 800545c:	f7fd fd87 	bl	8002f6e <_ZN3can7signals18SENSOR_OD_ChipUID13setERyS2_Rhy>
        }
 8005460:	bf00      	nop
 8005462:	3714      	adds	r7, #20
 8005464:	46bd      	mov	sp, r7
 8005466:	bd90      	pop	{r4, r7, pc}

08005468 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals18SENSOR_OD_ChipUID2EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005468:	b590      	push	{r4, r7, lr}
 800546a:	b087      	sub	sp, #28
 800546c:	af02      	add	r7, sp, #8
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f103 0008 	add.w	r0, r3, #8
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f103 0110 	add.w	r1, r3, #16
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	1d1c      	adds	r4, r3, #4
 8005484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005488:	e9cd 2300 	strd	r2, r3, [sp]
 800548c:	4622      	mov	r2, r4
 800548e:	f7fd fd35 	bl	8002efc <_ZN3can7signals18SENSOR_OD_ChipUID23setERyS2_Rhy>
        }
 8005492:	bf00      	nop
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	bd90      	pop	{r4, r7, pc}

0800549a <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildDateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800549a:	b580      	push	{r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f103 0008 	add.w	r0, r3, #8
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f103 0110 	add.w	r1, r3, #16
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	1d1a      	adds	r2, r3, #4
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	f7fd fce9 	bl	8002e8c <_ZN3can7signals19SENSOR_OD_BuildDate3setERyS2_Rhm>
        }
 80054ba:	bf00      	nop
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_OD_BuildTimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b082      	sub	sp, #8
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
 80054ca:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	f103 0008 	add.w	r0, r3, #8
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f103 0110 	add.w	r1, r3, #16
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	1d1a      	adds	r2, r3, #4
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	f7fd fc9b 	bl	8002e18 <_ZN3can7signals19SENSOR_OD_BuildTime3setERyS2_Rhm>
        }
 80054e2:	bf00      	nop
 80054e4:	3708      	adds	r7, #8
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}

080054ea <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80054ea:	b580      	push	{r7, lr}
 80054ec:	b082      	sub	sp, #8
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
 80054f2:	460b      	mov	r3, r1
 80054f4:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f103 0008 	add.w	r0, r3, #8
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f103 0110 	add.w	r1, r3, #16
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	1d1a      	adds	r2, r3, #4
 8005506:	78fb      	ldrb	r3, [r7, #3]
 8005508:	f7fd fc52 	bl	8002db0 <_ZN3can7signals23SENSOR_OD_CAN1_TxErrCnt3setERyS2_Rhh>
        }
 800550c:	bf00      	nop
 800550e:	3708      	adds	r7, #8
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}

08005514 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	460b      	mov	r3, r1
 800551e:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f103 0008 	add.w	r0, r3, #8
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f103 0110 	add.w	r1, r3, #16
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	1d1a      	adds	r2, r3, #4
 8005530:	78fb      	ldrb	r3, [r7, #3]
 8005532:	f7fd fc09 	bl	8002d48 <_ZN3can7signals23SENSOR_OD_CAN1_RxErrCnt3setERyS2_Rhh>
        }
 8005536:	bf00      	nop
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800553e:	b580      	push	{r7, lr}
 8005540:	b082      	sub	sp, #8
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
 8005546:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f103 0008 	add.w	r0, r3, #8
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f103 0110 	add.w	r1, r3, #16
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	1d1a      	adds	r2, r3, #4
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	f7fd fbbd 	bl	8002cd8 <_ZN3can7signals28SENSOR_OD_CAN1_lastErrorCode3setERyS2_Rhm>
        }
 800555e:	bf00      	nop
 8005560:	3708      	adds	r7, #8
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	460b      	mov	r3, r1
 8005570:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f103 0008 	add.w	r0, r3, #8
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f103 0110 	add.w	r1, r3, #16
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	1d1a      	adds	r2, r3, #4
 8005582:	78fb      	ldrb	r3, [r7, #3]
 8005584:	f7fd fb4c 	bl	8002c20 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3setERyS2_Rhh>
        }
 8005588:	bf00      	nop
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN1_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	460b      	mov	r3, r1
 800559a:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f103 0008 	add.w	r0, r3, #8
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f103 0110 	add.w	r1, r3, #16
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	1d1a      	adds	r2, r3, #4
 80055ac:	887b      	ldrh	r3, [r7, #2]
 80055ae:	f7fd fad5 	bl	8002b5c <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3setERyS2_Rht>
        }
 80055b2:	bf00      	nop
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN1_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	460b      	mov	r3, r1
 80055c4:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f103 0008 	add.w	r0, r3, #8
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f103 0110 	add.w	r1, r3, #16
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	1d1a      	adds	r2, r3, #4
 80055d6:	78fb      	ldrb	r3, [r7, #3]
 80055d8:	f7fd fa8c 	bl	8002af4 <_ZN3can7signals21SENSOR_OD_CAN1_Status3setERyS2_Rhh>
        }
 80055dc:	bf00      	nop
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f103 0008 	add.w	r0, r3, #8
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f103 0110 	add.w	r1, r3, #16
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	1d1a      	adds	r2, r3, #4
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	f7fd fa3e 	bl	8002a80 <_ZN3can7signals34SENSOR_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>
        }
 8005604:	bf00      	nop
 8005606:	3708      	adds	r7, #8
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f103 0008 	add.w	r0, r3, #8
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f103 0110 	add.w	r1, r3, #16
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	1d1a      	adds	r2, r3, #4
 8005628:	78fb      	ldrb	r3, [r7, #3]
 800562a:	f7fd f9f5 	bl	8002a18 <_ZN3can7signals26SENSOR_OD_CAN1_ErrorStatus3setERyS2_Rhh>
        }
 800562e:	bf00      	nop
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f103 0008 	add.w	r0, r3, #8
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f103 0110 	add.w	r1, r3, #16
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	1d1a      	adds	r2, r3, #4
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	f7fd f9a7 	bl	80029a4 <_ZN3can7signals32SENSOR_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>
        }
 8005656:	bf00      	nop
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800565e:	b580      	push	{r7, lr}
 8005660:	b082      	sub	sp, #8
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
 8005666:	460b      	mov	r3, r1
 8005668:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f103 0008 	add.w	r0, r3, #8
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f103 0110 	add.w	r1, r3, #16
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	1d1a      	adds	r2, r3, #4
 800567a:	78fb      	ldrb	r3, [r7, #3]
 800567c:	f7fd f95e 	bl	800293c <_ZN3can7signals23SENSOR_OD_CAN2_TxErrCnt3setERyS2_Rhh>
        }
 8005680:	bf00      	nop
 8005682:	3708      	adds	r7, #8
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}

08005688 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	460b      	mov	r3, r1
 8005692:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f103 0008 	add.w	r0, r3, #8
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f103 0110 	add.w	r1, r3, #16
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	1d1a      	adds	r2, r3, #4
 80056a4:	78fb      	ldrb	r3, [r7, #3]
 80056a6:	f7fd f915 	bl	80028d4 <_ZN3can7signals23SENSOR_OD_CAN2_RxErrCnt3setERyS2_Rhh>
        }
 80056aa:	bf00      	nop
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals28SENSOR_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b082      	sub	sp, #8
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f103 0008 	add.w	r0, r3, #8
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f103 0110 	add.w	r1, r3, #16
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	1d1a      	adds	r2, r3, #4
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	f7fd f8c9 	bl	8002864 <_ZN3can7signals28SENSOR_OD_CAN2_lastErrorCode3setERyS2_Rhm>
        }
 80056d2:	bf00      	nop
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80056da:	b580      	push	{r7, lr}
 80056dc:	b082      	sub	sp, #8
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	460b      	mov	r3, r1
 80056e4:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f103 0008 	add.w	r0, r3, #8
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f103 0110 	add.w	r1, r3, #16
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	1d1a      	adds	r2, r3, #4
 80056f6:	78fb      	ldrb	r3, [r7, #3]
 80056f8:	f7fd f859 	bl	80027ae <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3setERyS2_Rhh>
        }
 80056fc:	bf00      	nop
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals23SENSOR_OD_CAN2_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	460b      	mov	r3, r1
 800570e:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f103 0008 	add.w	r0, r3, #8
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f103 0110 	add.w	r1, r3, #16
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	1d1a      	adds	r2, r3, #4
 8005720:	887b      	ldrh	r3, [r7, #2]
 8005722:	f7fc ffe2 	bl	80026ea <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3setERyS2_Rht>
        }
 8005726:	bf00      	nop
 8005728:	3708      	adds	r7, #8
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals21SENSOR_OD_CAN2_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800572e:	b580      	push	{r7, lr}
 8005730:	b082      	sub	sp, #8
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	460b      	mov	r3, r1
 8005738:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f103 0008 	add.w	r0, r3, #8
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f103 0110 	add.w	r1, r3, #16
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	1d1a      	adds	r2, r3, #4
 800574a:	78fb      	ldrb	r3, [r7, #3]
 800574c:	f7fc ff99 	bl	8002682 <_ZN3can7signals21SENSOR_OD_CAN2_Status3setERyS2_Rhh>
        }
 8005750:	bf00      	nop
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals34SENSOR_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f103 0008 	add.w	r0, r3, #8
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f103 0110 	add.w	r1, r3, #16
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	1d1a      	adds	r2, r3, #4
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	f7fc ff4b 	bl	800260e <_ZN3can7signals34SENSOR_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>
        }
 8005778:	bf00      	nop
 800577a:	3708      	adds	r7, #8
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals26SENSOR_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	460b      	mov	r3, r1
 800578a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f103 0008 	add.w	r0, r3, #8
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f103 0110 	add.w	r1, r3, #16
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	1d1a      	adds	r2, r3, #4
 800579c:	78fb      	ldrb	r3, [r7, #3]
 800579e:	f7fc ff02 	bl	80025a6 <_ZN3can7signals26SENSOR_OD_CAN2_ErrorStatus3setERyS2_Rhh>
        }
 80057a2:	bf00      	nop
 80057a4:	3708      	adds	r7, #8
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}

080057aa <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals32SENSOR_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b082      	sub	sp, #8
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f103 0008 	add.w	r0, r3, #8
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f103 0110 	add.w	r1, r3, #16
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	1d1a      	adds	r2, r3, #4
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	f7fc feb4 	bl	8002532 <_ZN3can7signals32SENSOR_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>
        }
 80057ca:	bf00      	nop
 80057cc:	3708      	adds	r7, #8
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals13SENSOR_SDO_IDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b082      	sub	sp, #8
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	460b      	mov	r3, r1
 80057dc:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f103 0008 	add.w	r0, r3, #8
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f103 0110 	add.w	r1, r3, #16
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	1d1a      	adds	r2, r3, #4
 80057ee:	887b      	ldrh	r3, [r7, #2]
 80057f0:	f7fc fe3a 	bl	8002468 <_ZN3can7signals13SENSOR_SDO_ID3setERyS2_Rht>
        }
 80057f4:	bf00      	nop
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <_ZN3can7MessageINS_8messages15SENSOR_SDO_RespEE3setINS_7signals19SENSOR_SDO_RespCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	460b      	mov	r3, r1
 8005806:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f103 0008 	add.w	r0, r3, #8
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f103 0110 	add.w	r1, r3, #16
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	1d1a      	adds	r2, r3, #4
 8005818:	78fb      	ldrb	r3, [r7, #3]
 800581a:	f7fc fe60 	bl	80024de <_ZN3can7signals19SENSOR_SDO_RespCode3setERyS2_Rhh>
        }
 800581e:	bf00      	nop
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals13SENSOR_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005826:	b580      	push	{r7, lr}
 8005828:	b082      	sub	sp, #8
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f103 0208 	add.w	r2, r3, #8
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	3310      	adds	r3, #16
 8005838:	4619      	mov	r1, r3
 800583a:	4610      	mov	r0, r2
 800583c:	f7fc fe3c 	bl	80024b8 <_ZN3can7signals13SENSOR_SDO_ID3getERKyS3_>
 8005840:	4603      	mov	r3, r0
        }
 8005842:	4618      	mov	r0, r3
 8005844:	3708      	adds	r7, #8
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals27SENSOR_OD_HeartbeatIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f103 0208 	add.w	r2, r3, #8
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	3310      	adds	r3, #16
 800585c:	4619      	mov	r1, r3
 800585e:	4610      	mov	r0, r2
 8005860:	f7fd fe89 	bl	8003576 <_ZN3can7signals27SENSOR_OD_HeartbeatInterval3getERKyS3_>
 8005864:	4603      	mov	r3, r0
        }
 8005866:	4618      	mov	r0, r3
 8005868:	3708      	adds	r7, #8
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals24SENSOR_OD_SendOdOnBootupEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800586e:	b580      	push	{r7, lr}
 8005870:	b082      	sub	sp, #8
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f103 0208 	add.w	r2, r3, #8
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3310      	adds	r3, #16
 8005880:	4619      	mov	r1, r3
 8005882:	4610      	mov	r0, r2
 8005884:	f7fd fe25 	bl	80034d2 <_ZN3can7signals24SENSOR_OD_SendOdOnBootup3getERKyS3_>
 8005888:	4603      	mov	r3, r0
        }
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_OdEntrySendIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005892:	b580      	push	{r7, lr}
 8005894:	b082      	sub	sp, #8
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f103 0208 	add.w	r2, r3, #8
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	3310      	adds	r3, #16
 80058a4:	4619      	mov	r1, r3
 80058a6:	4610      	mov	r0, r2
 80058a8:	f7fd fdbc 	bl	8003424 <_ZN3can7signals29SENSOR_OD_OdEntrySendInterval3getERKyS3_>
 80058ac:	4603      	mov	r3, r0
        }
 80058ae:	4618      	mov	r0, r3
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b082      	sub	sp, #8
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f103 0208 	add.w	r2, r3, #8
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	3310      	adds	r3, #16
 80058c8:	4619      	mov	r1, r3
 80058ca:	4610      	mov	r0, r2
 80058cc:	f7fd f9dc 	bl	8002c88 <_ZN3can7signals29SENSOR_OD_CAN1_autoErrorReset3getERKyS3_>
 80058d0:	4603      	mov	r3, r0
        }
 80058d2:	4618      	mov	r0, r3
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN1_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80058da:	b580      	push	{r7, lr}
 80058dc:	b082      	sub	sp, #8
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f103 0208 	add.w	r2, r3, #8
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3310      	adds	r3, #16
 80058ec:	4619      	mov	r1, r3
 80058ee:	4610      	mov	r0, r2
 80058f0:	f7fd f96f 	bl	8002bd2 <_ZN3can7signals23SENSOR_OD_CAN1_Baudrate3getERKyS3_>
 80058f4:	4603      	mov	r3, r0
        }
 80058f6:	4618      	mov	r0, r3
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals29SENSOR_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f103 0208 	add.w	r2, r3, #8
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	3310      	adds	r3, #16
 8005910:	4619      	mov	r1, r3
 8005912:	4610      	mov	r0, r2
 8005914:	f7fc ff7f 	bl	8002816 <_ZN3can7signals29SENSOR_OD_CAN2_autoErrorReset3getERKyS3_>
 8005918:	4603      	mov	r3, r0
        }
 800591a:	4618      	mov	r0, r3
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <_ZN3can7MessageINS_8messages17SENSOR_SDO_Req_UpEE3getINS_7signals23SENSOR_OD_CAN2_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8005922:	b580      	push	{r7, lr}
 8005924:	b082      	sub	sp, #8
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f103 0208 	add.w	r2, r3, #8
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3310      	adds	r3, #16
 8005934:	4619      	mov	r1, r3
 8005936:	4610      	mov	r0, r2
 8005938:	f7fc ff12 	bl	8002760 <_ZN3can7signals23SENSOR_OD_CAN2_Baudrate3getERKyS3_>
 800593c:	4603      	mov	r3, r0
        }
 800593e:	4618      	mov	r0, r3
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <_Z41__static_initialization_and_destruction_0ii>:
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b01      	cmp	r3, #1
 8005956:	f040 80e4 	bne.w	8005b22 <_Z41__static_initialization_and_destruction_0ii+0x1da>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005960:	4293      	cmp	r3, r2
 8005962:	f040 80de 	bne.w	8005b22 <_Z41__static_initialization_and_destruction_0ii+0x1da>
osMutexId_t mutex_OD_NodeID                   = osMutexNew(NULL);
 8005966:	2000      	movs	r0, #0
 8005968:	f009 f871 	bl	800ea4e <osMutexNew>
 800596c:	4603      	mov	r3, r0
 800596e:	4a6f      	ldr	r2, [pc, #444]	; (8005b2c <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8005970:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_NodeStatus               = osMutexNew(NULL);
 8005972:	2000      	movs	r0, #0
 8005974:	f009 f86b 	bl	800ea4e <osMutexNew>
 8005978:	4603      	mov	r3, r0
 800597a:	4a6d      	ldr	r2, [pc, #436]	; (8005b30 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 800597c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ProtocolVersion          = osMutexNew(NULL);
 800597e:	2000      	movs	r0, #0
 8005980:	f009 f865 	bl	800ea4e <osMutexNew>
 8005984:	4603      	mov	r3, r0
 8005986:	4a6b      	ldr	r2, [pc, #428]	; (8005b34 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8005988:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StackVersion             = osMutexNew(NULL);
 800598a:	2000      	movs	r0, #0
 800598c:	f009 f85f 	bl	800ea4e <osMutexNew>
 8005990:	4603      	mov	r3, r0
 8005992:	4a69      	ldr	r2, [pc, #420]	; (8005b38 <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8005994:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_DbcVersion               = osMutexNew(NULL);
 8005996:	2000      	movs	r0, #0
 8005998:	f009 f859 	bl	800ea4e <osMutexNew>
 800599c:	4603      	mov	r3, r0
 800599e:	4a67      	ldr	r2, [pc, #412]	; (8005b3c <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 80059a0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HeartbeatInterval        = osMutexNew(NULL);
 80059a2:	2000      	movs	r0, #0
 80059a4:	f009 f853 	bl	800ea4e <osMutexNew>
 80059a8:	4603      	mov	r3, r0
 80059aa:	4a65      	ldr	r2, [pc, #404]	; (8005b40 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 80059ac:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SendOdOnBootup           = osMutexNew(NULL);
 80059ae:	2000      	movs	r0, #0
 80059b0:	f009 f84d 	bl	800ea4e <osMutexNew>
 80059b4:	4603      	mov	r3, r0
 80059b6:	4a63      	ldr	r2, [pc, #396]	; (8005b44 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 80059b8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_OdEntrySendInterval      = osMutexNew(NULL);
 80059ba:	2000      	movs	r0, #0
 80059bc:	f009 f847 	bl	800ea4e <osMutexNew>
 80059c0:	4603      	mov	r3, r0
 80059c2:	4a61      	ldr	r2, [pc, #388]	; (8005b48 <_Z41__static_initialization_and_destruction_0ii+0x200>)
 80059c4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CpuUsage                 = osMutexNew(NULL);
 80059c6:	2000      	movs	r0, #0
 80059c8:	f009 f841 	bl	800ea4e <osMutexNew>
 80059cc:	4603      	mov	r3, r0
 80059ce:	4a5f      	ldr	r2, [pc, #380]	; (8005b4c <_Z41__static_initialization_and_destruction_0ii+0x204>)
 80059d0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_MemFree                  = osMutexNew(NULL);
 80059d2:	2000      	movs	r0, #0
 80059d4:	f009 f83b 	bl	800ea4e <osMutexNew>
 80059d8:	4603      	mov	r3, r0
 80059da:	4a5d      	ldr	r2, [pc, #372]	; (8005b50 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 80059dc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BoardTemp                = osMutexNew(NULL);
 80059de:	2000      	movs	r0, #0
 80059e0:	f009 f835 	bl	800ea4e <osMutexNew>
 80059e4:	4603      	mov	r3, r0
 80059e6:	4a5b      	ldr	r2, [pc, #364]	; (8005b54 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 80059e8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_InputVoltage             = osMutexNew(NULL);
 80059ea:	2000      	movs	r0, #0
 80059ec:	f009 f82f 	bl	800ea4e <osMutexNew>
 80059f0:	4603      	mov	r3, r0
 80059f2:	4a59      	ldr	r2, [pc, #356]	; (8005b58 <_Z41__static_initialization_and_destruction_0ii+0x210>)
 80059f4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_runtime                  = osMutexNew(NULL);
 80059f6:	2000      	movs	r0, #0
 80059f8:	f009 f829 	bl	800ea4e <osMutexNew>
 80059fc:	4603      	mov	r3, r0
 80059fe:	4a57      	ldr	r2, [pc, #348]	; (8005b5c <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8005a00:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcIn                    = osMutexNew(NULL);
 8005a02:	2000      	movs	r0, #0
 8005a04:	f009 f823 	bl	800ea4e <osMutexNew>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	4a55      	ldr	r2, [pc, #340]	; (8005b60 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8005a0c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcOut                   = osMutexNew(NULL);
 8005a0e:	2000      	movs	r0, #0
 8005a10:	f009 f81d 	bl	800ea4e <osMutexNew>
 8005a14:	4603      	mov	r3, r0
 8005a16:	4a53      	ldr	r2, [pc, #332]	; (8005b64 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8005a18:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID1                 = osMutexNew(NULL);
 8005a1a:	2000      	movs	r0, #0
 8005a1c:	f009 f817 	bl	800ea4e <osMutexNew>
 8005a20:	4603      	mov	r3, r0
 8005a22:	4a51      	ldr	r2, [pc, #324]	; (8005b68 <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8005a24:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID2                 = osMutexNew(NULL);
 8005a26:	2000      	movs	r0, #0
 8005a28:	f009 f811 	bl	800ea4e <osMutexNew>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	4a4f      	ldr	r2, [pc, #316]	; (8005b6c <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8005a30:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildDate                = osMutexNew(NULL);
 8005a32:	2000      	movs	r0, #0
 8005a34:	f009 f80b 	bl	800ea4e <osMutexNew>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	4a4d      	ldr	r2, [pc, #308]	; (8005b70 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8005a3c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildTime                = osMutexNew(NULL);
 8005a3e:	2000      	movs	r0, #0
 8005a40:	f009 f805 	bl	800ea4e <osMutexNew>
 8005a44:	4603      	mov	r3, r0
 8005a46:	4a4b      	ldr	r2, [pc, #300]	; (8005b74 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8005a48:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_TxErrCnt            = osMutexNew(NULL);
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	f008 ffff 	bl	800ea4e <osMutexNew>
 8005a50:	4603      	mov	r3, r0
 8005a52:	4a49      	ldr	r2, [pc, #292]	; (8005b78 <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8005a54:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_RxErrCnt            = osMutexNew(NULL);
 8005a56:	2000      	movs	r0, #0
 8005a58:	f008 fff9 	bl	800ea4e <osMutexNew>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	4a47      	ldr	r2, [pc, #284]	; (8005b7c <_Z41__static_initialization_and_destruction_0ii+0x234>)
 8005a60:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_lastErrorCode       = osMutexNew(NULL);
 8005a62:	2000      	movs	r0, #0
 8005a64:	f008 fff3 	bl	800ea4e <osMutexNew>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	4a45      	ldr	r2, [pc, #276]	; (8005b80 <_Z41__static_initialization_and_destruction_0ii+0x238>)
 8005a6c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_autoErrorReset      = osMutexNew(NULL);
 8005a6e:	2000      	movs	r0, #0
 8005a70:	f008 ffed 	bl	800ea4e <osMutexNew>
 8005a74:	4603      	mov	r3, r0
 8005a76:	4a43      	ldr	r2, [pc, #268]	; (8005b84 <_Z41__static_initialization_and_destruction_0ii+0x23c>)
 8005a78:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Baudrate            = osMutexNew(NULL);
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	f008 ffe7 	bl	800ea4e <osMutexNew>
 8005a80:	4603      	mov	r3, r0
 8005a82:	4a41      	ldr	r2, [pc, #260]	; (8005b88 <_Z41__static_initialization_and_destruction_0ii+0x240>)
 8005a84:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Status              = osMutexNew(NULL);
 8005a86:	2000      	movs	r0, #0
 8005a88:	f008 ffe1 	bl	800ea4e <osMutexNew>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	4a3f      	ldr	r2, [pc, #252]	; (8005b8c <_Z41__static_initialization_and_destruction_0ii+0x244>)
 8005a90:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DiscardedTxMessages = osMutexNew(NULL);
 8005a92:	2000      	movs	r0, #0
 8005a94:	f008 ffdb 	bl	800ea4e <osMutexNew>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	4a3d      	ldr	r2, [pc, #244]	; (8005b90 <_Z41__static_initialization_and_destruction_0ii+0x248>)
 8005a9c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_ErrorStatus         = osMutexNew(NULL);
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	f008 ffd5 	bl	800ea4e <osMutexNew>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	4a3b      	ldr	r2, [pc, #236]	; (8005b94 <_Z41__static_initialization_and_destruction_0ii+0x24c>)
 8005aa8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DelayedTxMessages   = osMutexNew(NULL);
 8005aaa:	2000      	movs	r0, #0
 8005aac:	f008 ffcf 	bl	800ea4e <osMutexNew>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	4a39      	ldr	r2, [pc, #228]	; (8005b98 <_Z41__static_initialization_and_destruction_0ii+0x250>)
 8005ab4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_TxErrCnt            = osMutexNew(NULL);
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	f008 ffc9 	bl	800ea4e <osMutexNew>
 8005abc:	4603      	mov	r3, r0
 8005abe:	4a37      	ldr	r2, [pc, #220]	; (8005b9c <_Z41__static_initialization_and_destruction_0ii+0x254>)
 8005ac0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_RxErrCnt            = osMutexNew(NULL);
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	f008 ffc3 	bl	800ea4e <osMutexNew>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	4a35      	ldr	r2, [pc, #212]	; (8005ba0 <_Z41__static_initialization_and_destruction_0ii+0x258>)
 8005acc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_lastErrorCode       = osMutexNew(NULL);
 8005ace:	2000      	movs	r0, #0
 8005ad0:	f008 ffbd 	bl	800ea4e <osMutexNew>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	4a33      	ldr	r2, [pc, #204]	; (8005ba4 <_Z41__static_initialization_and_destruction_0ii+0x25c>)
 8005ad8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_autoErrorReset      = osMutexNew(NULL);
 8005ada:	2000      	movs	r0, #0
 8005adc:	f008 ffb7 	bl	800ea4e <osMutexNew>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	4a31      	ldr	r2, [pc, #196]	; (8005ba8 <_Z41__static_initialization_and_destruction_0ii+0x260>)
 8005ae4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Baudrate            = osMutexNew(NULL);
 8005ae6:	2000      	movs	r0, #0
 8005ae8:	f008 ffb1 	bl	800ea4e <osMutexNew>
 8005aec:	4603      	mov	r3, r0
 8005aee:	4a2f      	ldr	r2, [pc, #188]	; (8005bac <_Z41__static_initialization_and_destruction_0ii+0x264>)
 8005af0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Status              = osMutexNew(NULL);
 8005af2:	2000      	movs	r0, #0
 8005af4:	f008 ffab 	bl	800ea4e <osMutexNew>
 8005af8:	4603      	mov	r3, r0
 8005afa:	4a2d      	ldr	r2, [pc, #180]	; (8005bb0 <_Z41__static_initialization_and_destruction_0ii+0x268>)
 8005afc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DiscardedTxMessages = osMutexNew(NULL);
 8005afe:	2000      	movs	r0, #0
 8005b00:	f008 ffa5 	bl	800ea4e <osMutexNew>
 8005b04:	4603      	mov	r3, r0
 8005b06:	4a2b      	ldr	r2, [pc, #172]	; (8005bb4 <_Z41__static_initialization_and_destruction_0ii+0x26c>)
 8005b08:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_ErrorStatus         = osMutexNew(NULL);
 8005b0a:	2000      	movs	r0, #0
 8005b0c:	f008 ff9f 	bl	800ea4e <osMutexNew>
 8005b10:	4603      	mov	r3, r0
 8005b12:	4a29      	ldr	r2, [pc, #164]	; (8005bb8 <_Z41__static_initialization_and_destruction_0ii+0x270>)
 8005b14:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DelayedTxMessages   = osMutexNew(NULL);
 8005b16:	2000      	movs	r0, #0
 8005b18:	f008 ff99 	bl	800ea4e <osMutexNew>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	4a27      	ldr	r2, [pc, #156]	; (8005bbc <_Z41__static_initialization_and_destruction_0ii+0x274>)
 8005b20:	6013      	str	r3, [r2, #0]
 8005b22:	bf00      	nop
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	20000810 	.word	0x20000810
 8005b30:	20000814 	.word	0x20000814
 8005b34:	20000818 	.word	0x20000818
 8005b38:	2000081c 	.word	0x2000081c
 8005b3c:	20000820 	.word	0x20000820
 8005b40:	20000824 	.word	0x20000824
 8005b44:	20000828 	.word	0x20000828
 8005b48:	2000082c 	.word	0x2000082c
 8005b4c:	20000830 	.word	0x20000830
 8005b50:	20000834 	.word	0x20000834
 8005b54:	20000838 	.word	0x20000838
 8005b58:	2000083c 	.word	0x2000083c
 8005b5c:	20000840 	.word	0x20000840
 8005b60:	20000844 	.word	0x20000844
 8005b64:	20000848 	.word	0x20000848
 8005b68:	2000084c 	.word	0x2000084c
 8005b6c:	20000850 	.word	0x20000850
 8005b70:	20000854 	.word	0x20000854
 8005b74:	20000858 	.word	0x20000858
 8005b78:	2000085c 	.word	0x2000085c
 8005b7c:	20000860 	.word	0x20000860
 8005b80:	20000864 	.word	0x20000864
 8005b84:	20000868 	.word	0x20000868
 8005b88:	2000086c 	.word	0x2000086c
 8005b8c:	20000870 	.word	0x20000870
 8005b90:	20000874 	.word	0x20000874
 8005b94:	20000878 	.word	0x20000878
 8005b98:	2000087c 	.word	0x2000087c
 8005b9c:	20000880 	.word	0x20000880
 8005ba0:	20000884 	.word	0x20000884
 8005ba4:	20000888 	.word	0x20000888
 8005ba8:	2000088c 	.word	0x2000088c
 8005bac:	20000890 	.word	0x20000890
 8005bb0:	20000894 	.word	0x20000894
 8005bb4:	20000898 	.word	0x20000898
 8005bb8:	2000089c 	.word	0x2000089c
 8005bbc:	200008a0 	.word	0x200008a0

08005bc0 <_GLOBAL__sub_I_OD_NodeID>:
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005bc8:	2001      	movs	r0, #1
 8005bca:	f7ff febd 	bl	8005948 <_Z41__static_initialization_and_destruction_0ii>
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	4618      	mov	r0, r3
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <_ZNSt8functionIFvtEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f7fb fc0a 	bl	8001438 <_ZNSt14_Function_baseD1Ev>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4618      	mov	r0, r3
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <_ZN23GPIOExtiCallbackHandlerC1Ev>:
			m_listeners[i](pin);
		}
	}

private:
	GPIOExtiCallbackHandler() = default;
 8005c2e:	b5b0      	push	{r4, r5, r7, lr}
 8005c30:	b082      	sub	sp, #8
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	240f      	movs	r4, #15
 8005c3a:	461d      	mov	r5, r3
 8005c3c:	2c00      	cmp	r4, #0
 8005c3e:	db05      	blt.n	8005c4c <_ZN23GPIOExtiCallbackHandlerC1Ev+0x1e>
 8005c40:	4628      	mov	r0, r5
 8005c42:	f000 f8cb 	bl	8005ddc <_ZNSt8functionIFvtEEC1Ev>
 8005c46:	3510      	adds	r5, #16
 8005c48:	3c01      	subs	r4, #1
 8005c4a:	e7f7      	b.n	8005c3c <_ZN23GPIOExtiCallbackHandlerC1Ev+0xe>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4618      	mov	r0, r3
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bdb0      	pop	{r4, r5, r7, pc}

08005c5e <_ZN23GPIOExtiCallbackHandlerD1Ev>:
class GPIOExtiCallbackHandler {
 8005c5e:	b590      	push	{r4, r7, lr}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00a      	beq.n	8005c82 <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	429c      	cmp	r4, r3
 8005c76:	d004      	beq.n	8005c82 <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 8005c78:	3c10      	subs	r4, #16
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	f7ff ffca 	bl	8005c14 <_ZNSt8functionIFvtEED1Ev>
 8005c80:	e7f7      	b.n	8005c72 <_ZN23GPIOExtiCallbackHandlerD1Ev+0x14>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4618      	mov	r0, r3
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd90      	pop	{r4, r7, pc}

08005c8c <__tcf_0>:
		static GPIOExtiCallbackHandler instance;
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	4801      	ldr	r0, [pc, #4]	; (8005c98 <__tcf_0+0xc>)
 8005c92:	f7ff ffe4 	bl	8005c5e <_ZN23GPIOExtiCallbackHandlerD1Ev>
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	200008a4 	.word	0x200008a4

08005c9c <_ZN23GPIOExtiCallbackHandler11getInstanceEv>:
	static GPIOExtiCallbackHandler& getInstance() {
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	af00      	add	r7, sp, #0
		static GPIOExtiCallbackHandler instance;
 8005ca0:	4b12      	ldr	r3, [pc, #72]	; (8005cec <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	f3bf 8f5b 	dmb	ish
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	bf0c      	ite	eq
 8005cb2:	2301      	moveq	r3, #1
 8005cb4:	2300      	movne	r3, #0
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d013      	beq.n	8005ce4 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 8005cbc:	480b      	ldr	r0, [pc, #44]	; (8005cec <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8005cbe:	f00d f913 	bl	8012ee8 <__cxa_guard_acquire>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	bf14      	ite	ne
 8005cc8:	2301      	movne	r3, #1
 8005cca:	2300      	moveq	r3, #0
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d008      	beq.n	8005ce4 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 8005cd2:	4807      	ldr	r0, [pc, #28]	; (8005cf0 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
 8005cd4:	f7ff ffab 	bl	8005c2e <_ZN23GPIOExtiCallbackHandlerC1Ev>
 8005cd8:	4806      	ldr	r0, [pc, #24]	; (8005cf4 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x58>)
 8005cda:	f00d fb64 	bl	80133a6 <atexit>
 8005cde:	4803      	ldr	r0, [pc, #12]	; (8005cec <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8005ce0:	f00d f90e 	bl	8012f00 <__cxa_guard_release>
		return instance;
 8005ce4:	4b02      	ldr	r3, [pc, #8]	; (8005cf0 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
	}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	200009a8 	.word	0x200009a8
 8005cf0:	200008a4 	.word	0x200008a4
 8005cf4:	08005c8d 	.word	0x08005c8d

08005cf8 <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>:
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fb fb98 	bl	8001438 <_ZNSt14_Function_baseD1Ev>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev>:
			m_listeners[i](htim);
		}
	}

private:
	TimPeriodElapsedCallbackHandler() = default;
 8005d12:	b5b0      	push	{r4, r5, r7, lr}
 8005d14:	b082      	sub	sp, #8
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	240f      	movs	r4, #15
 8005d1e:	461d      	mov	r5, r3
 8005d20:	2c00      	cmp	r4, #0
 8005d22:	db05      	blt.n	8005d30 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev+0x1e>
 8005d24:	4628      	mov	r0, r5
 8005d26:	f000 f866 	bl	8005df6 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1Ev>
 8005d2a:	3510      	adds	r5, #16
 8005d2c:	3c01      	subs	r4, #1
 8005d2e:	e7f7      	b.n	8005d20 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev+0xe>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bdb0      	pop	{r4, r5, r7, pc}

08005d42 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev>:
class TimPeriodElapsedCallbackHandler {
 8005d42:	b590      	push	{r4, r7, lr}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00a      	beq.n	8005d66 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x24>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	429c      	cmp	r4, r3
 8005d5a:	d004      	beq.n	8005d66 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x24>
 8005d5c:	3c10      	subs	r4, #16
 8005d5e:	4620      	mov	r0, r4
 8005d60:	f7ff ffca 	bl	8005cf8 <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>
 8005d64:	e7f7      	b.n	8005d56 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x14>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd90      	pop	{r4, r7, pc}

08005d70 <__tcf_1>:
		static TimPeriodElapsedCallbackHandler instance;
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	4801      	ldr	r0, [pc, #4]	; (8005d7c <__tcf_1+0xc>)
 8005d76:	f7ff ffe4 	bl	8005d42 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev>
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	200009ac 	.word	0x200009ac

08005d80 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv>:
	static TimPeriodElapsedCallbackHandler& getInstance() {
 8005d80:	b580      	push	{r7, lr}
 8005d82:	af00      	add	r7, sp, #0
		static TimPeriodElapsedCallbackHandler instance;
 8005d84:	4b12      	ldr	r3, [pc, #72]	; (8005dd0 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	f3bf 8f5b 	dmb	ish
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	f003 0301 	and.w	r3, r3, #1
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	bf0c      	ite	eq
 8005d96:	2301      	moveq	r3, #1
 8005d98:	2300      	movne	r3, #0
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d013      	beq.n	8005dc8 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x48>
 8005da0:	480b      	ldr	r0, [pc, #44]	; (8005dd0 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 8005da2:	f00d f8a1 	bl	8012ee8 <__cxa_guard_acquire>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	bf14      	ite	ne
 8005dac:	2301      	movne	r3, #1
 8005dae:	2300      	moveq	r3, #0
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d008      	beq.n	8005dc8 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x48>
 8005db6:	4807      	ldr	r0, [pc, #28]	; (8005dd4 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x54>)
 8005db8:	f7ff ffab 	bl	8005d12 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev>
 8005dbc:	4806      	ldr	r0, [pc, #24]	; (8005dd8 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x58>)
 8005dbe:	f00d faf2 	bl	80133a6 <atexit>
 8005dc2:	4803      	ldr	r0, [pc, #12]	; (8005dd0 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 8005dc4:	f00d f89c 	bl	8012f00 <__cxa_guard_release>
		return instance;
 8005dc8:	4b02      	ldr	r3, [pc, #8]	; (8005dd4 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x54>)
	}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	20000ab0 	.word	0x20000ab0
 8005dd4:	200009ac 	.word	0x200009ac
 8005dd8:	08005d71 	.word	0x08005d71

08005ddc <_ZNSt8functionIFvtEEC1Ev>:
      function() noexcept
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fb fb18 	bl	800141c <_ZNSt14_Function_baseC1Ev>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4618      	mov	r0, r3
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1Ev>:
      function() noexcept
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b082      	sub	sp, #8
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7fb fb0b 	bl	800141c <_ZNSt14_Function_baseC1Ev>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3708      	adds	r7, #8
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e24:	4770      	bx	lr

08005e26 <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005e26:	b480      	push	{r7}
 8005e28:	b083      	sub	sp, #12
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4618      	mov	r0, r3
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <_ZL17AdcModuleToHandle9AdcModule>:

enum AdcModule : int {
	ADC_MODULE1, ADC_MODULE2,
};

static inline ADC_HandleTypeDef* AdcModuleToHandle(AdcModule module) {
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b082      	sub	sp, #8
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
	switch (module) {
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <_ZL17AdcModuleToHandle9AdcModule+0x16>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d002      	beq.n	8005e56 <_ZL17AdcModuleToHandle9AdcModule+0x1a>
 8005e50:	e003      	b.n	8005e5a <_ZL17AdcModuleToHandle9AdcModule+0x1e>
	case ADC_MODULE1:
		return &hadc1;
 8005e52:	4b05      	ldr	r3, [pc, #20]	; (8005e68 <_ZL17AdcModuleToHandle9AdcModule+0x2c>)
 8005e54:	e004      	b.n	8005e60 <_ZL17AdcModuleToHandle9AdcModule+0x24>
	case ADC_MODULE2:
		return &hadc2;
 8005e56:	4b05      	ldr	r3, [pc, #20]	; (8005e6c <_ZL17AdcModuleToHandle9AdcModule+0x30>)
 8005e58:	e002      	b.n	8005e60 <_ZL17AdcModuleToHandle9AdcModule+0x24>
	default:
		Error_Handler();
 8005e5a:	f001 fcb3 	bl	80077c4 <Error_Handler>
		return nullptr;
 8005e5e:	2300      	movs	r3, #0
	}
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3708      	adds	r7, #8
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	20000bfc 	.word	0x20000bfc
 8005e6c:	20000c44 	.word	0x20000c44

08005e70 <_ZN10AdcChannelC1Ev>:
#include "FreeRTOS.h"
#include "cmsis_os.h"

class AdcChannel {
public:
	explicit AdcChannel() {
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]

	}
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <_ZN10AdcChannel3getEv>:

	uint16_t get() {
 8005e86:	b480      	push	{r7}
 8005e88:	b083      	sub	sp, #12
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
		return m_value;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	881b      	ldrh	r3, [r3, #0]
	}
 8005e92:	4618      	mov	r0, r3
 8005e94:	370c      	adds	r7, #12
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <_ZN10AdcChannel8setValueEt>:

	void setValue(uint16_t value){
 8005e9e:	b480      	push	{r7}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	807b      	strh	r3, [r7, #2]
		m_value = value;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	887a      	ldrh	r2, [r7, #2]
 8005eae:	801a      	strh	r2, [r3, #0]
	}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fb fab6 	bl	8001438 <_ZNSt14_Function_baseD1Ev>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <_ZN26AdcConvCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvCpltCallbackHandler() = default;
 8005ed6:	b5b0      	push	{r4, r5, r7, lr}
 8005ed8:	b082      	sub	sp, #8
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	240f      	movs	r4, #15
 8005ee2:	461d      	mov	r5, r3
 8005ee4:	2c00      	cmp	r4, #0
 8005ee6:	db05      	blt.n	8005ef4 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0x1e>
 8005ee8:	4628      	mov	r0, r5
 8005eea:	f000 fa0f 	bl	800630c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 8005eee:	3510      	adds	r5, #16
 8005ef0:	3c01      	subs	r4, #1
 8005ef2:	e7f7      	b.n	8005ee4 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0xe>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4618      	mov	r0, r3
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bdb0      	pop	{r4, r5, r7, pc}

08005f06 <_ZN26AdcConvCpltCallbackHandlerD1Ev>:
class AdcConvCpltCallbackHandler {
 8005f06:	b590      	push	{r4, r7, lr}
 8005f08:	b083      	sub	sp, #12
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00a      	beq.n	8005f2a <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	429c      	cmp	r4, r3
 8005f1e:	d004      	beq.n	8005f2a <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 8005f20:	3c10      	subs	r4, #16
 8005f22:	4620      	mov	r0, r4
 8005f24:	f7ff ffca 	bl	8005ebc <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 8005f28:	e7f7      	b.n	8005f1a <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x14>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	370c      	adds	r7, #12
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd90      	pop	{r4, r7, pc}

08005f34 <__tcf_0>:
		static AdcConvCpltCallbackHandler instance;
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	4801      	ldr	r0, [pc, #4]	; (8005f40 <__tcf_0+0xc>)
 8005f3a:	f7ff ffe4 	bl	8005f06 <_ZN26AdcConvCpltCallbackHandlerD1Ev>
 8005f3e:	bd80      	pop	{r7, pc}
 8005f40:	20000ab4 	.word	0x20000ab4

08005f44 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>:
	static AdcConvCpltCallbackHandler& getInstance() {
 8005f44:	b580      	push	{r7, lr}
 8005f46:	af00      	add	r7, sp, #0
		static AdcConvCpltCallbackHandler instance;
 8005f48:	4b12      	ldr	r3, [pc, #72]	; (8005f94 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	f3bf 8f5b 	dmb	ish
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	bf0c      	ite	eq
 8005f5a:	2301      	moveq	r3, #1
 8005f5c:	2300      	movne	r3, #0
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d013      	beq.n	8005f8c <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 8005f64:	480b      	ldr	r0, [pc, #44]	; (8005f94 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 8005f66:	f00c ffbf 	bl	8012ee8 <__cxa_guard_acquire>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	bf14      	ite	ne
 8005f70:	2301      	movne	r3, #1
 8005f72:	2300      	moveq	r3, #0
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d008      	beq.n	8005f8c <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 8005f7a:	4807      	ldr	r0, [pc, #28]	; (8005f98 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
 8005f7c:	f7ff ffab 	bl	8005ed6 <_ZN26AdcConvCpltCallbackHandlerC1Ev>
 8005f80:	4806      	ldr	r0, [pc, #24]	; (8005f9c <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x58>)
 8005f82:	f00d fa10 	bl	80133a6 <atexit>
 8005f86:	4803      	ldr	r0, [pc, #12]	; (8005f94 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 8005f88:	f00c ffba 	bl	8012f00 <__cxa_guard_release>
		return instance;
 8005f8c:	4b02      	ldr	r3, [pc, #8]	; (8005f98 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
	}
 8005f8e:	4618      	mov	r0, r3
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	20000bb8 	.word	0x20000bb8
 8005f98:	20000ab4 	.word	0x20000ab4
 8005f9c:	08005f35 	.word	0x08005f35

08005fa0 <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>:
	unsigned int registerCallback(std::function<void(ADC_HandleTypeDef*)> isr) {
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005fb0:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005fb8:	1c59      	adds	r1, r3, #1
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
 8005fc0:	011b      	lsls	r3, r3, #4
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	6839      	ldr	r1, [r7, #0]
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f000 f9ac 	bl	8006326 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		return id;
 8005fce:	68fb      	ldr	r3, [r7, #12]
	}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>:
	void unregisterCallback(unsigned int callbackId) {
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b082      	sub	sp, #8
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	6039      	str	r1, [r7, #0]
		m_listeners[callbackId] = m_listeners[m_size];
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	011b      	lsls	r3, r3, #4
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	18d0      	adds	r0, r2, r3
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	4413      	add	r3, r2
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	f000 f995 	bl	8006326 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		m_listeners[m_size] = nullptr;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	4413      	add	r3, r2
 8006008:	2100      	movs	r1, #0
 800600a:	4618      	mov	r0, r3
 800600c:	f000 f9a6 	bl	800635c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>
		m_size--;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006016:	1e5a      	subs	r2, r3, #1
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}
 800601e:	bf00      	nop
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}

08006026 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>:
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
					m_hadc->Init.NbrOfConversion), m_channels(
					new AdcChannel[m_nbrConvertions]), m_buffer(
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
							[&](ADC_HandleTypeDef *hadc) {
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	6039      	str	r1, [r7, #0]
								if (hadc == m_hadc) {
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	429a      	cmp	r2, r3
 800603a:	d104      	bne.n	8006046 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_+0x20>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
									dmaCplrCallback();
 8006040:	4618      	mov	r0, r3
 8006042:	f000 f90a 	bl	800625a <_ZN19AdcModuleController15dmaCplrCallbackEv>
								}
							}
 8006046:	bf00      	nop
 8006048:	3708      	adds	r7, #8
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <_ZN19AdcModuleControllerC1E9AdcModule>:
	explicit AdcModuleController(AdcModule module) :
 8006050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
 800605a:	6838      	ldr	r0, [r7, #0]
 800605c:	f7ff feee 	bl	8005e3c <_ZL17AdcModuleToHandle9AdcModule>
 8006060:	4602      	mov	r2, r0
					)) {
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	601a      	str	r2, [r3, #0]
					m_hadc->Init.NbrOfConversion), m_channels(
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69da      	ldr	r2, [r3, #28]
					)) {
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	605a      	str	r2, [r3, #4]
					new AdcChannel[m_nbrConvertions]), m_buffer(
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685c      	ldr	r4, [r3, #4]
 8006074:	4b2f      	ldr	r3, [pc, #188]	; (8006134 <_ZN19AdcModuleControllerC1E9AdcModule+0xe4>)
 8006076:	429c      	cmp	r4, r3
 8006078:	d801      	bhi.n	800607e <_ZN19AdcModuleControllerC1E9AdcModule+0x2e>
 800607a:	0063      	lsls	r3, r4, #1
 800607c:	e001      	b.n	8006082 <_ZN19AdcModuleControllerC1E9AdcModule+0x32>
 800607e:	f04f 33ff 	mov.w	r3, #4294967295
 8006082:	4618      	mov	r0, r3
 8006084:	f00c ff3f 	bl	8012f06 <_Znaj>
 8006088:	4603      	mov	r3, r0
 800608a:	461e      	mov	r6, r3
 800608c:	4635      	mov	r5, r6
 800608e:	1e63      	subs	r3, r4, #1
 8006090:	461c      	mov	r4, r3
 8006092:	2c00      	cmp	r4, #0
 8006094:	db05      	blt.n	80060a2 <_ZN19AdcModuleControllerC1E9AdcModule+0x52>
 8006096:	4628      	mov	r0, r5
 8006098:	f7ff feea 	bl	8005e70 <_ZN10AdcChannelC1Ev>
 800609c:	3502      	adds	r5, #2
 800609e:	3c01      	subs	r4, #1
 80060a0:	e7f7      	b.n	8006092 <_ZN19AdcModuleControllerC1E9AdcModule+0x42>
					)) {
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	609e      	str	r6, [r3, #8]
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	4a22      	ldr	r2, [pc, #136]	; (8006134 <_ZN19AdcModuleControllerC1E9AdcModule+0xe4>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d801      	bhi.n	80060b4 <_ZN19AdcModuleControllerC1E9AdcModule+0x64>
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	e001      	b.n	80060b8 <_ZN19AdcModuleControllerC1E9AdcModule+0x68>
 80060b4:	f04f 33ff 	mov.w	r3, #4294967295
 80060b8:	4618      	mov	r0, r3
 80060ba:	f00c ff24 	bl	8012f06 <_Znaj>
 80060be:	4603      	mov	r3, r0
 80060c0:	461a      	mov	r2, r3
					)) {
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	60da      	str	r2, [r3, #12]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	741a      	strb	r2, [r3, #16]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 80060cc:	f7ff ff3a 	bl	8005f44 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 80060d0:	4604      	mov	r4, r0
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	f107 0308 	add.w	r3, r7, #8
 80060d8:	4611      	mov	r1, r2
 80060da:	4618      	mov	r0, r3
 80060dc:	f000 f958 	bl	8006390 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>
 80060e0:	f107 0308 	add.w	r3, r7, #8
 80060e4:	4619      	mov	r1, r3
 80060e6:	4620      	mov	r0, r4
 80060e8:	f7ff ff5a 	bl	8005fa0 <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>
 80060ec:	4602      	mov	r2, r0
					)) {
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	619a      	str	r2, [r3, #24]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 80060f2:	f107 0308 	add.w	r3, r7, #8
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7ff fee0 	bl	8005ebc <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
		m_semaphore = osSemaphoreNew(1, 0, NULL);
 80060fc:	2200      	movs	r2, #0
 80060fe:	2100      	movs	r1, #0
 8006100:	2001      	movs	r0, #1
 8006102:	f008 fdb2 	bl	800ec6a <osSemaphoreNew>
 8006106:	4602      	mov	r2, r0
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	615a      	str	r2, [r3, #20]
		m_bussy = true;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6818      	ldr	r0, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 800611e:	461a      	mov	r2, r3
 8006120:	f002 faf2 	bl	8008708 <HAL_ADC_Start_DMA>
		update();
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f854 	bl	80061d2 <_ZN19AdcModuleController6updateEv>
	}
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4618      	mov	r0, r3
 800612e:	371c      	adds	r7, #28
 8006130:	46bd      	mov	sp, r7
 8006132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006134:	3ffffffc 	.word	0x3ffffffc

08006138 <_ZN19AdcModuleControllerD1Ev>:

	~AdcModuleController() {
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
		AdcConvCpltCallbackHandler::getInstance().unregisterCallback(
 8006140:	f7ff ff00 	bl	8005f44 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 8006144:	4602      	mov	r2, r0
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	4619      	mov	r1, r3
 800614c:	4610      	mov	r0, r2
 800614e:	f7ff ff43 	bl	8005fd8 <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>
				m_dmaIsrId);
		if (osSemaphoreGetCount(m_semaphore) != 0) {
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	695b      	ldr	r3, [r3, #20]
 8006156:	4618      	mov	r0, r3
 8006158:	f008 fea6 	bl	800eea8 <osSemaphoreGetCount>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	bf14      	ite	ne
 8006162:	2301      	movne	r3, #1
 8006164:	2300      	moveq	r3, #0
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d006      	beq.n	800617a <_ZN19AdcModuleControllerD1Ev+0x42>
			osSemaphoreAcquire(m_semaphore, osWaitForever);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	f04f 31ff 	mov.w	r1, #4294967295
 8006174:	4618      	mov	r0, r3
 8006176:	f008 fe01 	bl	800ed7c <osSemaphoreAcquire>
		}
		delete[] m_channels;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d004      	beq.n	800618c <_ZN19AdcModuleControllerD1Ev+0x54>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	4618      	mov	r0, r3
 8006188:	f00c feac 	bl	8012ee4 <_ZdaPv>
		delete[] m_buffer;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d004      	beq.n	800619e <_ZN19AdcModuleControllerD1Ev+0x66>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	4618      	mov	r0, r3
 800619a:	f00c fea3 	bl	8012ee4 <_ZdaPv>
	}
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	4618      	mov	r0, r3
 80061a2:	3708      	adds	r7, #8
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <_ZN19AdcModuleController16getChannelByRankEj>:
public:

	AdcChannel* getChannelByRank(size_t rank) {
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
 80061b0:	6039      	str	r1, [r7, #0]
		if (rank >= m_nbrConvertions) {
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	685b      	ldr	r3, [r3, #4]
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d301      	bcc.n	80061c0 <_ZN19AdcModuleController16getChannelByRankEj+0x18>
			Error_Handler();
 80061bc:	f001 fb02 	bl	80077c4 <Error_Handler>
		}
		return m_channels + rank;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	005b      	lsls	r3, r3, #1
 80061c8:	4413      	add	r3, r2
	}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <_ZN19AdcModuleController6updateEv>:

	void update() {
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
		//wait for previous convertion.
		osSemaphoreAcquire(m_semaphore, osWaitForever);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	f04f 31ff 	mov.w	r1, #4294967295
 80061e2:	4618      	mov	r0, r3
 80061e4:	f008 fdca 	bl	800ed7c <osSemaphoreAcquire>
		//update channels.
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 80061e8:	2300      	movs	r3, #0
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d211      	bcs.n	800621a <_ZN19AdcModuleController6updateEv+0x48>
			m_channels[i].setValue(m_buffer[i]);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	689a      	ldr	r2, [r3, #8]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	005b      	lsls	r3, r3, #1
 80061fe:	18d0      	adds	r0, r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68da      	ldr	r2, [r3, #12]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	005b      	lsls	r3, r3, #1
 8006208:	4413      	add	r3, r2
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	4619      	mov	r1, r3
 800620e:	f7ff fe46 	bl	8005e9e <_ZN10AdcChannel8setValueEt>
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	3301      	adds	r3, #1
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	e7e8      	b.n	80061ec <_ZN19AdcModuleController6updateEv+0x1a>
		}
		//start next convertion
		m_bussy = true;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6818      	ldr	r0, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 800622c:	461a      	mov	r2, r3
 800622e:	f002 fa6b 	bl	8008708 <HAL_ADC_Start_DMA>
	}
 8006232:	bf00      	nop
 8006234:	3710      	adds	r7, #16
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <_ZN19AdcModuleController10weakUpdateEv>:

	void weakUpdate() {
 800623a:	b580      	push	{r7, lr}
 800623c:	b082      	sub	sp, #8
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
		if (m_bussy)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	7c1b      	ldrb	r3, [r3, #16]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d103      	bne.n	8006252 <_ZN19AdcModuleController10weakUpdateEv+0x18>
			return;
		else
			update();
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7ff ffc1 	bl	80061d2 <_ZN19AdcModuleController6updateEv>
 8006250:	e000      	b.n	8006254 <_ZN19AdcModuleController10weakUpdateEv+0x1a>
			return;
 8006252:	bf00      	nop
	}
 8006254:	3708      	adds	r7, #8
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <_ZN19AdcModuleController15dmaCplrCallbackEv>:

private:

	void dmaCplrCallback() {
 800625a:	b580      	push	{r7, lr}
 800625c:	b082      	sub	sp, #8
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
		m_bussy = false;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	741a      	strb	r2, [r3, #16]
		osSemaphoreRelease(m_semaphore);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	4618      	mov	r0, r3
 800626e:	f008 fdd7 	bl	800ee20 <osSemaphoreRelease>
	}
 8006272:	bf00      	nop
 8006274:	3708      	adds	r7, #8
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
	static AdcModuleController instance(ADC_MODULE);
	return instance;
}

static AdcModuleController& _getChannelAdcModuleControllerRuntime(AdcModule module){
 800627a:	b580      	push	{r7, lr}
 800627c:	b082      	sub	sp, #8
 800627e:	af00      	add	r7, sp, #0
 8006280:	6078      	str	r0, [r7, #4]
	switch(module){
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d003      	beq.n	8006290 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x16>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d004      	beq.n	8006298 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x1e>
 800628e:	e007      	b.n	80062a0 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x26>
	case ADC_MODULE1: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 8006290:	f000 f8b0 	bl	80063f4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 8006294:	4603      	mov	r3, r0
 8006296:	e008      	b.n	80062aa <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	case ADC_MODULE2: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE2>();
 8006298:	f000 f8e2 	bl	8006460 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>
 800629c:	4603      	mov	r3, r0
 800629e:	e004      	b.n	80062aa <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	default:
		Error_Handler();
 80062a0:	f001 fa90 	bl	80077c4 <Error_Handler>
		return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 80062a4:	f000 f8a6 	bl	80063f4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 80062a8:	4603      	mov	r3, r0
	}
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}

080062b2 <_ZN20AdcChannelControllerC1E9AdcModulej>:



class AdcChannelController {
public:
	explicit AdcChannelController(AdcModule module, unsigned int rank) :
 80062b2:	b580      	push	{r7, lr}
 80062b4:	b084      	sub	sp, #16
 80062b6:	af00      	add	r7, sp, #0
 80062b8:	60f8      	str	r0, [r7, #12]
 80062ba:	60b9      	str	r1, [r7, #8]
 80062bc:	607a      	str	r2, [r7, #4]
			m_module(_getChannelAdcModuleControllerRuntime(module)),
 80062be:	68b8      	ldr	r0, [r7, #8]
 80062c0:	f7ff ffdb 	bl	800627a <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>
 80062c4:	4602      	mov	r2, r0
			m_channel(m_module.getChannelByRank(rank)) {
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	6879      	ldr	r1, [r7, #4]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f7ff ff69 	bl	80061a8 <_ZN19AdcModuleController16getChannelByRankEj>
 80062d6:	4602      	mov	r2, r0
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	605a      	str	r2, [r3, #4]
	}
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4618      	mov	r0, r3
 80062e0:	3710      	adds	r7, #16
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <_ZN20AdcChannelController3getEv>:

	uint16_t get() {
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b082      	sub	sp, #8
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
		m_module.weakUpdate();
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7ff ffa1 	bl	800623a <_ZN19AdcModuleController10weakUpdateEv>
		return m_channel->get();
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7ff fdc2 	bl	8005e86 <_ZN10AdcChannel3getEv>
 8006302:	4603      	mov	r3, r0
	}
 8006304:	4618      	mov	r0, r3
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>:
      function() noexcept
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4618      	mov	r0, r3
 8006318:	f7fb f880 	bl	800141c <_ZNSt14_Function_baseC1Ev>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>:
      operator=(const function& __x)
 8006326:	b580      	push	{r7, lr}
 8006328:	b086      	sub	sp, #24
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
 800632e:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8006330:	f107 0308 	add.w	r3, r7, #8
 8006334:	6839      	ldr	r1, [r7, #0]
 8006336:	4618      	mov	r0, r3
 8006338:	f000 f8c0 	bl	80064bc <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>
 800633c:	f107 0308 	add.w	r3, r7, #8
 8006340:	6879      	ldr	r1, [r7, #4]
 8006342:	4618      	mov	r0, r3
 8006344:	f000 f8dc 	bl	8006500 <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>
 8006348:	f107 0308 	add.w	r3, r7, #8
 800634c:	4618      	mov	r0, r3
 800634e:	f7ff fdb5 	bl	8005ebc <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
	return *this;
 8006352:	687b      	ldr	r3, [r7, #4]
      }
 8006354:	4618      	mov	r0, r3
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>:
      operator=(nullptr_t) noexcept
 800635c:	b580      	push	{r7, lr}
 800635e:	b082      	sub	sp, #8
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
	if (_M_manager)
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	689b      	ldr	r3, [r3, #8]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00b      	beq.n	8006386 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn+0x2a>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	6879      	ldr	r1, [r7, #4]
 8006376:	2203      	movs	r2, #3
 8006378:	4798      	blx	r3
	    _M_manager = nullptr;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	60da      	str	r2, [r3, #12]
	return *this;
 8006386:	687b      	ldr	r3, [r7, #4]
      }
 8006388:	4618      	mov	r0, r3
 800638a:	3708      	adds	r7, #8
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8006390:	b590      	push	{r4, r7, lr}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4618      	mov	r0, r3
 800639e:	f7fb f83d 	bl	800141c <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80063a2:	463b      	mov	r3, r7
 80063a4:	4618      	mov	r0, r3
 80063a6:	f000 f8d7 	bl	8006558 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00f      	beq.n	80063d0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80063b0:	687c      	ldr	r4, [r7, #4]
 80063b2:	463b      	mov	r3, r7
 80063b4:	4618      	mov	r0, r3
 80063b6:	f000 f8da 	bl	800656e <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 80063ba:	4603      	mov	r3, r0
 80063bc:	4619      	mov	r1, r3
 80063be:	4620      	mov	r0, r4
 80063c0:	f000 f8e0 	bl	8006584 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>
	    _M_invoker = &_My_handler::_M_invoke;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a05      	ldr	r2, [pc, #20]	; (80063dc <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x4c>)
 80063c8:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a04      	ldr	r2, [pc, #16]	; (80063e0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x50>)
 80063ce:	609a      	str	r2, [r3, #8]
      }
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4618      	mov	r0, r3
 80063d4:	370c      	adds	r7, #12
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd90      	pop	{r4, r7, pc}
 80063da:	bf00      	nop
 80063dc:	080065a9 	.word	0x080065a9
 80063e0:	080065d3 	.word	0x080065d3

080063e4 <__tcf_1>:
	static AdcModuleController instance(ADC_MODULE);
 80063e4:	b580      	push	{r7, lr}
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	4801      	ldr	r0, [pc, #4]	; (80063f0 <__tcf_1+0xc>)
 80063ea:	f7ff fea5 	bl	8006138 <_ZN19AdcModuleControllerD1Ev>
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	20000bbc 	.word	0x20000bbc

080063f4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 80063f4:	b580      	push	{r7, lr}
 80063f6:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 80063f8:	4b12      	ldr	r3, [pc, #72]	; (8006444 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	f3bf 8f5b 	dmb	ish
 8006400:	b2db      	uxtb	r3, r3
 8006402:	f003 0301 	and.w	r3, r3, #1
 8006406:	2b00      	cmp	r3, #0
 8006408:	bf0c      	ite	eq
 800640a:	2301      	moveq	r3, #1
 800640c:	2300      	movne	r3, #0
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d014      	beq.n	800643e <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 8006414:	480b      	ldr	r0, [pc, #44]	; (8006444 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 8006416:	f00c fd67 	bl	8012ee8 <__cxa_guard_acquire>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	bf14      	ite	ne
 8006420:	2301      	movne	r3, #1
 8006422:	2300      	moveq	r3, #0
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d009      	beq.n	800643e <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 800642a:	2100      	movs	r1, #0
 800642c:	4806      	ldr	r0, [pc, #24]	; (8006448 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
 800642e:	f7ff fe0f 	bl	8006050 <_ZN19AdcModuleControllerC1E9AdcModule>
 8006432:	4806      	ldr	r0, [pc, #24]	; (800644c <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x58>)
 8006434:	f00c ffb7 	bl	80133a6 <atexit>
 8006438:	4802      	ldr	r0, [pc, #8]	; (8006444 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 800643a:	f00c fd61 	bl	8012f00 <__cxa_guard_release>
	return instance;
 800643e:	4b02      	ldr	r3, [pc, #8]	; (8006448 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
}
 8006440:	4618      	mov	r0, r3
 8006442:	bd80      	pop	{r7, pc}
 8006444:	20000bd8 	.word	0x20000bd8
 8006448:	20000bbc 	.word	0x20000bbc
 800644c:	080063e5 	.word	0x080063e5

08006450 <__tcf_2>:
	static AdcModuleController instance(ADC_MODULE);
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
 8006454:	4801      	ldr	r0, [pc, #4]	; (800645c <__tcf_2+0xc>)
 8006456:	f7ff fe6f 	bl	8006138 <_ZN19AdcModuleControllerD1Ev>
 800645a:	bd80      	pop	{r7, pc}
 800645c:	20000bdc 	.word	0x20000bdc

08006460 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 8006464:	4b12      	ldr	r3, [pc, #72]	; (80064b0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	f3bf 8f5b 	dmb	ish
 800646c:	b2db      	uxtb	r3, r3
 800646e:	f003 0301 	and.w	r3, r3, #1
 8006472:	2b00      	cmp	r3, #0
 8006474:	bf0c      	ite	eq
 8006476:	2301      	moveq	r3, #1
 8006478:	2300      	movne	r3, #0
 800647a:	b2db      	uxtb	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	d014      	beq.n	80064aa <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 8006480:	480b      	ldr	r0, [pc, #44]	; (80064b0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 8006482:	f00c fd31 	bl	8012ee8 <__cxa_guard_acquire>
 8006486:	4603      	mov	r3, r0
 8006488:	2b00      	cmp	r3, #0
 800648a:	bf14      	ite	ne
 800648c:	2301      	movne	r3, #1
 800648e:	2300      	moveq	r3, #0
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d009      	beq.n	80064aa <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 8006496:	2101      	movs	r1, #1
 8006498:	4806      	ldr	r0, [pc, #24]	; (80064b4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
 800649a:	f7ff fdd9 	bl	8006050 <_ZN19AdcModuleControllerC1E9AdcModule>
 800649e:	4806      	ldr	r0, [pc, #24]	; (80064b8 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x58>)
 80064a0:	f00c ff81 	bl	80133a6 <atexit>
 80064a4:	4802      	ldr	r0, [pc, #8]	; (80064b0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 80064a6:	f00c fd2b 	bl	8012f00 <__cxa_guard_release>
	return instance;
 80064aa:	4b02      	ldr	r3, [pc, #8]	; (80064b4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	20000bf8 	.word	0x20000bf8
 80064b4:	20000bdc 	.word	0x20000bdc
 80064b8:	08006451 	.word	0x08006451

080064bc <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	6039      	str	r1, [r7, #0]
    : _Function_base()
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fa ffa7 	bl	800141c <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 80064ce:	6838      	ldr	r0, [r7, #0]
 80064d0:	f000 f89e 	bl	8006610 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00d      	beq.n	80064f6 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	6839      	ldr	r1, [r7, #0]
 80064e2:	2202      	movs	r2, #2
 80064e4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	689a      	ldr	r2, [r3, #8]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	609a      	str	r2, [r3, #8]
    }
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4618      	mov	r0, r3
 80064fa:	3708      	adds	r7, #8
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>:
      void swap(function& __x) noexcept
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	683a      	ldr	r2, [r7, #0]
 800650e:	4611      	mov	r1, r2
 8006510:	4618      	mov	r0, r3
 8006512:	f7fb f890 	bl	8001636 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f103 0208 	add.w	r2, r3, #8
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	3308      	adds	r3, #8
 8006520:	4619      	mov	r1, r3
 8006522:	4610      	mov	r0, r2
 8006524:	f7fb f8b9 	bl	800169a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f103 020c 	add.w	r2, r3, #12
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	330c      	adds	r3, #12
 8006532:	4619      	mov	r1, r3
 8006534:	4610      	mov	r0, r2
 8006536:	f000 f886 	bl	8006646 <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 800653a:	bf00      	nop
 800653c:	3708      	adds	r7, #8
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006542:	b480      	push	{r7}
 8006544:	b083      	sub	sp, #12
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4618      	mov	r0, r3
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
	  { return true; }
 8006560:	2301      	movs	r3, #1
 8006562:	4618      	mov	r0, r3
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 800656e:	b480      	push	{r7}
 8006570:	b083      	sub	sp, #12
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4618      	mov	r0, r3
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8006584:	b590      	push	{r4, r7, lr}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 800658e:	6838      	ldr	r0, [r7, #0]
 8006590:	f7ff ffed 	bl	800656e <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 8006594:	4603      	mov	r3, r0
 8006596:	4622      	mov	r2, r4
 8006598:	4619      	mov	r1, r3
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f872 	bl	8006684 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>
 80065a0:	bf00      	nop
 80065a2:	370c      	adds	r7, #12
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd90      	pop	{r4, r7, pc}

080065a8 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80065a8:	b590      	push	{r4, r7, lr}
 80065aa:	b083      	sub	sp, #12
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f87f 	bl	80066b6 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 80065b8:	4604      	mov	r4, r0
 80065ba:	6838      	ldr	r0, [r7, #0]
 80065bc:	f7ff ffc1 	bl	8006542 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80065c0:	4603      	mov	r3, r0
 80065c2:	4619      	mov	r1, r3
 80065c4:	4620      	mov	r0, r4
 80065c6:	f000 f887 	bl	80066d8 <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 80065ca:	bf00      	nop
      }
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd90      	pop	{r4, r7, pc}

080065d2 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80065d2:	b590      	push	{r4, r7, lr}
 80065d4:	b085      	sub	sp, #20
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	60f8      	str	r0, [r7, #12]
 80065da:	60b9      	str	r1, [r7, #8]
 80065dc:	4613      	mov	r3, r2
 80065de:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80065e0:	79fb      	ldrb	r3, [r7, #7]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d109      	bne.n	80065fa <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 f88c 	bl	8006704 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 80065ec:	4604      	mov	r4, r0
 80065ee:	68b8      	ldr	r0, [r7, #8]
 80065f0:	f000 f861 	bl	80066b6 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 80065f4:	4603      	mov	r3, r0
 80065f6:	6023      	str	r3, [r4, #0]
	    break;
 80065f8:	e005      	b.n	8006606 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80065fa:	79fb      	ldrb	r3, [r7, #7]
 80065fc:	461a      	mov	r2, r3
 80065fe:	68b9      	ldr	r1, [r7, #8]
 8006600:	68f8      	ldr	r0, [r7, #12]
 8006602:	f000 f88b 	bl	800671c <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 8006606:	2300      	movs	r3, #0
      }
 8006608:	4618      	mov	r0, r3
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	bd90      	pop	{r4, r7, pc}

08006610 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>:
      explicit operator bool() const noexcept
 8006610:	b580      	push	{r7, lr}
 8006612:	b082      	sub	sp, #8
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4618      	mov	r0, r3
 800661c:	f7fa ff1f 	bl	800145e <_ZNKSt14_Function_base8_M_emptyEv>
 8006620:	4603      	mov	r3, r0
 8006622:	f083 0301 	eor.w	r3, r3, #1
 8006626:	b2db      	uxtb	r3, r3
 8006628:	4618      	mov	r0, r3
 800662a:	3708      	adds	r7, #8
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4618      	mov	r0, r3
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8006646:	b580      	push	{r7, lr}
 8006648:	b084      	sub	sp, #16
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f7ff ffed 	bl	8006630 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8006656:	4603      	mov	r3, r0
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800665c:	6838      	ldr	r0, [r7, #0]
 800665e:	f7ff ffe7 	bl	8006630 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8006662:	4603      	mov	r3, r0
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800666a:	f107 030c 	add.w	r3, r7, #12
 800666e:	4618      	mov	r0, r3
 8006670:	f7ff ffde 	bl	8006630 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8006674:	4603      	mov	r3, r0
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	601a      	str	r2, [r3, #0]
    }
 800667c:	bf00      	nop
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8006684:	b590      	push	{r4, r7, lr}
 8006686:	b085      	sub	sp, #20
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8006690:	68b8      	ldr	r0, [r7, #8]
 8006692:	f7ff ff6c 	bl	800656e <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 8006696:	4604      	mov	r4, r0
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f7ff faa5 	bl	8005be8 <_ZNSt9_Any_data9_M_accessEv>
 800669e:	4603      	mov	r3, r0
 80066a0:	4619      	mov	r1, r3
 80066a2:	2004      	movs	r0, #4
 80066a4:	f7ff fa94 	bl	8005bd0 <_ZnwjPv>
 80066a8:	4602      	mov	r2, r0
 80066aa:	6823      	ldr	r3, [r4, #0]
 80066ac:	6013      	str	r3, [r2, #0]
 80066ae:	bf00      	nop
 80066b0:	3714      	adds	r7, #20
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd90      	pop	{r4, r7, pc}

080066b6 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b084      	sub	sp, #16
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f857 	bl	8006772 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 80066c4:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f000 f85f 	bl	800678a <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>
 80066cc:	4603      	mov	r3, r0
 80066ce:	bf00      	nop
	}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80066d8:	b5b0      	push	{r4, r5, r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f85c 	bl	80067a0 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 80066e8:	4604      	mov	r4, r0
 80066ea:	6838      	ldr	r0, [r7, #0]
 80066ec:	f7ff ff29 	bl	8006542 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80066f0:	4603      	mov	r3, r0
 80066f2:	461a      	mov	r2, r3
 80066f4:	4621      	mov	r1, r4
 80066f6:	4628      	mov	r0, r5
 80066f8:	f000 f85d 	bl	80067b6 <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 80066fc:	bf00      	nop
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bdb0      	pop	{r4, r5, r7, pc}

08006704 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f7ff fa6b 	bl	8005be8 <_ZNSt9_Any_data9_M_accessEv>
 8006712:	4603      	mov	r3, r0
 8006714:	4618      	mov	r0, r3
 8006716:	3708      	adds	r7, #8
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 800671c:	b5b0      	push	{r4, r5, r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	4613      	mov	r3, r2
 8006728:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800672a:	79fb      	ldrb	r3, [r7, #7]
 800672c:	2b03      	cmp	r3, #3
 800672e:	d016      	beq.n	800675e <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x42>
 8006730:	2b03      	cmp	r3, #3
 8006732:	dc19      	bgt.n	8006768 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
 8006734:	2b01      	cmp	r3, #1
 8006736:	d002      	beq.n	800673e <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x22>
 8006738:	2b02      	cmp	r3, #2
 800673a:	d00a      	beq.n	8006752 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x36>
 800673c:	e014      	b.n	8006768 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f7ff ffe0 	bl	8006704 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 8006744:	4604      	mov	r4, r0
 8006746:	68b8      	ldr	r0, [r7, #8]
 8006748:	f7ff ffb5 	bl	80066b6 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 800674c:	4603      	mov	r3, r0
 800674e:	6023      	str	r3, [r4, #0]
	      break;
 8006750:	e00a      	b.n	8006768 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8006752:	462a      	mov	r2, r5
 8006754:	68b9      	ldr	r1, [r7, #8]
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 f844 	bl	80067e4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>
	      break;
 800675c:	e004      	b.n	8006768 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 800675e:	4621      	mov	r1, r4
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f000 f858 	bl	8006816 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8006766:	bf00      	nop
	  return false;
 8006768:	2300      	movs	r3, #0
	}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bdb0      	pop	{r4, r5, r7, pc}

08006772 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>:
      _M_access() const
 8006772:	b580      	push	{r7, lr}
 8006774:	b082      	sub	sp, #8
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7ff fa3f 	bl	8005bfe <_ZNKSt9_Any_data9_M_accessEv>
 8006780:	4603      	mov	r3, r0
 8006782:	4618      	mov	r0, r3
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4618      	mov	r0, r3
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4618      	mov	r0, r3
 80067ac:	370c      	adds	r7, #12
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr

080067b6 <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80067b6:	b590      	push	{r4, r7, lr}
 80067b8:	b085      	sub	sp, #20
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	7338      	strb	r0, [r7, #12]
 80067be:	60b9      	str	r1, [r7, #8]
 80067c0:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80067c2:	68b8      	ldr	r0, [r7, #8]
 80067c4:	f7ff ffec 	bl	80067a0 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 80067c8:	4604      	mov	r4, r0
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff feb9 	bl	8006542 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80067d0:	4603      	mov	r3, r0
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4619      	mov	r1, r3
 80067d6:	4620      	mov	r0, r4
 80067d8:	f7ff fc25 	bl	8006026 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>
 80067dc:	bf00      	nop
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd90      	pop	{r4, r7, pc}

080067e4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80067e4:	b590      	push	{r4, r7, lr}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	60f8      	str	r0, [r7, #12]
 80067ec:	60b9      	str	r1, [r7, #8]
 80067ee:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80067f0:	68b8      	ldr	r0, [r7, #8]
 80067f2:	f7ff ffbe 	bl	8006772 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 80067f6:	4604      	mov	r4, r0
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f7ff f9f5 	bl	8005be8 <_ZNSt9_Any_data9_M_accessEv>
 80067fe:	4603      	mov	r3, r0
 8006800:	4619      	mov	r1, r3
 8006802:	2004      	movs	r0, #4
 8006804:	f7ff f9e4 	bl	8005bd0 <_ZnwjPv>
 8006808:	4602      	mov	r2, r0
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	6013      	str	r3, [r2, #0]
	}
 800680e:	bf00      	nop
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	bd90      	pop	{r4, r7, pc}

08006816 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f804 	bl	800682e <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
	}
 8006826:	bf00      	nop
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}

0800682e <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 800682e:	b580      	push	{r7, lr}
 8006830:	b082      	sub	sp, #8
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f7ff f9d6 	bl	8005be8 <_ZNSt9_Any_data9_M_accessEv>
 800683c:	4603      	mov	r3, r0
 800683e:	4618      	mov	r0, r3
 8006840:	3708      	adds	r7, #8
 8006842:	46bd      	mov	sp, r7
 8006844:	bd80      	pop	{r7, pc}

08006846 <_ZN14OnBoardSensorsC1E23OnBoardTemperaturConfig>:
#include <cmath>
#include "canzero.hpp"

class OnBoardSensors {
public:
	explicit OnBoardSensors(OnBoardTemperaturConfig config) :
 8006846:	b084      	sub	sp, #16
 8006848:	b5b0      	push	{r4, r5, r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	f107 001c 	add.w	r0, r7, #28
 8006854:	e880 000e 	stmia.w	r0, {r1, r2, r3}
			m_internalNTC(config.m_internalNTCConfig.m_adc.m_module,
					config.m_internalNTCConfig.m_adc.m_rank), m_externalNTC(
					config.m_externalNTCConfig.m_adc.m_module,
					config.m_externalNTCConfig.m_adc.m_rank),
					m_inputVoltage(config.m_inputVoltageConfig.m_module, config.m_inputVoltageConfig.m_rank),
					m_config(config) {
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	69f9      	ldr	r1, [r7, #28]
					config.m_internalNTCConfig.m_adc.m_rank), m_externalNTC(
 800685c:	8c3a      	ldrh	r2, [r7, #32]
					m_config(config) {
 800685e:	4618      	mov	r0, r3
 8006860:	f7ff fd27 	bl	80062b2 <_ZN20AdcChannelControllerC1E9AdcModulej>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	3308      	adds	r3, #8
 8006868:	6b79      	ldr	r1, [r7, #52]	; 0x34
					config.m_externalNTCConfig.m_adc.m_rank),
 800686a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
					m_config(config) {
 800686c:	4618      	mov	r0, r3
 800686e:	f7ff fd20 	bl	80062b2 <_ZN20AdcChannelControllerC1E9AdcModulej>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	3310      	adds	r3, #16
 8006876:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
					m_inputVoltage(config.m_inputVoltageConfig.m_module, config.m_inputVoltageConfig.m_rank),
 8006878:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
					m_config(config) {
 800687c:	4618      	mov	r0, r3
 800687e:	f7ff fd18 	bl	80062b2 <_ZN20AdcChannelControllerC1E9AdcModulej>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f103 0418 	add.w	r4, r3, #24
 8006888:	f107 051c 	add.w	r5, r7, #28
 800688c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800688e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006890:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006894:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006898:	e895 0003 	ldmia.w	r5, {r0, r1}
 800689c:	e884 0003 	stmia.w	r4, {r0, r1}
	}
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4618      	mov	r0, r3
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80068ac:	b004      	add	sp, #16
 80068ae:	4770      	bx	lr

080068b0 <_ZN14OnBoardSensors22getInternalTemperaturCEv>:

	float getInternalTemperaturC(){
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_internalNTC.get();
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7ff fd13 	bl	80062e6 <_ZN20AdcChannelController3getEv>
 80068c0:	4603      	mov	r3, r0
 80068c2:	81fb      	strh	r3, [r7, #14]
		float internalTemp = (3.3f * (float) avalue/4095.0f - 0.76f) / 0.0025f + 25.0f;
 80068c4:	89fb      	ldrh	r3, [r7, #14]
 80068c6:	ee07 3a90 	vmov	s15, r3
 80068ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ce:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800690c <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x5c>
 80068d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80068d6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006910 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x60>
 80068da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80068de:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8006914 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x64>
 80068e2:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80068e6:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8006918 <_ZN14OnBoardSensors22getInternalTemperaturCEv+0x68>
 80068ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80068ee:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80068f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80068f6:	edc7 7a02 	vstr	s15, [r7, #8]
		return internalTemp;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	ee07 3a90 	vmov	s15, r3
	}
 8006900:	eeb0 0a67 	vmov.f32	s0, s15
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}
 800690a:	bf00      	nop
 800690c:	40533333 	.word	0x40533333
 8006910:	457ff000 	.word	0x457ff000
 8006914:	3f428f5c 	.word	0x3f428f5c
 8006918:	3b23d70a 	.word	0x3b23d70a
 800691c:	00000000 	.word	0x00000000

08006920 <_ZN14OnBoardSensors22getExternalTemperaturCEv>:

	float getExternalTemperaturC(){
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_externalNTC.get();
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	3308      	adds	r3, #8
 800692c:	4618      	mov	r0, r3
 800692e:	f7ff fcda 	bl	80062e6 <_ZN20AdcChannelController3getEv>
 8006932:	4603      	mov	r3, r0
 8006934:	81fb      	strh	r3, [r7, #14]
		float ntcTemperature = 1.0f / (1.0f / 298.15f + 1.0f / 3380.0f * log(1.0f / (4095.0f / (float) avalue - 1.0f) )) - 273.15f;
 8006936:	89fb      	ldrh	r3, [r7, #14]
 8006938:	ee07 3a90 	vmov	s15, r3
 800693c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006940:	eddf 6a29 	vldr	s13, [pc, #164]	; 80069e8 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xc8>
 8006944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006948:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800694c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006950:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006954:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006958:	ee16 0a90 	vmov	r0, s13
 800695c:	f7f9 fdf4 	bl	8000548 <__aeabi_f2d>
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	ec43 2b10 	vmov	d0, r2, r3
 8006968:	f00c fb12 	bl	8012f90 <log>
 800696c:	ec51 0b10 	vmov	r0, r1, d0
 8006970:	a317      	add	r3, pc, #92	; (adr r3, 80069d0 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xb0>)
 8006972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006976:	f7f9 fe3f 	bl	80005f8 <__aeabi_dmul>
 800697a:	4602      	mov	r2, r0
 800697c:	460b      	mov	r3, r1
 800697e:	4610      	mov	r0, r2
 8006980:	4619      	mov	r1, r3
 8006982:	a315      	add	r3, pc, #84	; (adr r3, 80069d8 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xb8>)
 8006984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006988:	f7f9 fc80 	bl	800028c <__adddf3>
 800698c:	4602      	mov	r2, r0
 800698e:	460b      	mov	r3, r1
 8006990:	f04f 0000 	mov.w	r0, #0
 8006994:	4915      	ldr	r1, [pc, #84]	; (80069ec <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xcc>)
 8006996:	f7f9 ff59 	bl	800084c <__aeabi_ddiv>
 800699a:	4602      	mov	r2, r0
 800699c:	460b      	mov	r3, r1
 800699e:	4610      	mov	r0, r2
 80069a0:	4619      	mov	r1, r3
 80069a2:	a30f      	add	r3, pc, #60	; (adr r3, 80069e0 <_ZN14OnBoardSensors22getExternalTemperaturCEv+0xc0>)
 80069a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069a8:	f7f9 fc6e 	bl	8000288 <__aeabi_dsub>
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	4610      	mov	r0, r2
 80069b2:	4619      	mov	r1, r3
 80069b4:	f7fa f918 	bl	8000be8 <__aeabi_d2f>
 80069b8:	4603      	mov	r3, r0
 80069ba:	60bb      	str	r3, [r7, #8]
		return ntcTemperature;
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	ee07 3a90 	vmov	s15, r3
	}
 80069c2:	eeb0 0a67 	vmov.f32	s0, s15
 80069c6:	3710      	adds	r7, #16
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	f3af 8000 	nop.w
 80069d0:	60000000 	.word	0x60000000
 80069d4:	3f3363ac 	.word	0x3f3363ac
 80069d8:	e0000000 	.word	0xe0000000
 80069dc:	3f6b79e1 	.word	0x3f6b79e1
 80069e0:	60000000 	.word	0x60000000
 80069e4:	40711266 	.word	0x40711266
 80069e8:	457ff000 	.word	0x457ff000
 80069ec:	3ff00000 	.word	0x3ff00000

080069f0 <_ZN14OnBoardSensors21getAverageTemperaturCEv>:

	float getAverageTemperaturC(){
 80069f0:	b580      	push	{r7, lr}
 80069f2:	ed2d 8b02 	vpush	{d8}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
		float average = (getExternalTemperaturC() + getInternalTemperaturC() ) / 2.0;
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f7ff ff8f 	bl	8006920 <_ZN14OnBoardSensors22getExternalTemperaturCEv>
 8006a02:	eeb0 8a40 	vmov.f32	s16, s0
 8006a06:	6878      	ldr	r0, [r7, #4]
 8006a08:	f7ff ff52 	bl	80068b0 <_ZN14OnBoardSensors22getInternalTemperaturCEv>
 8006a0c:	eef0 7a40 	vmov.f32	s15, s0
 8006a10:	ee78 7a27 	vadd.f32	s15, s16, s15
 8006a14:	ee17 0a90 	vmov	r0, s15
 8006a18:	f7f9 fd96 	bl	8000548 <__aeabi_f2d>
 8006a1c:	f04f 0200 	mov.w	r2, #0
 8006a20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a24:	f7f9 ff12 	bl	800084c <__aeabi_ddiv>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	4619      	mov	r1, r3
 8006a30:	f7fa f8da 	bl	8000be8 <__aeabi_d2f>
 8006a34:	4603      	mov	r3, r0
 8006a36:	60fb      	str	r3, [r7, #12]
		return average;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	ee07 3a90 	vmov	s15, r3
	}
 8006a3e:	eeb0 0a67 	vmov.f32	s0, s15
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	ecbd 8b02 	vpop	{d8}
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <_ZN14OnBoardSensors15getInputVoltageEv>:

	float getInputVoltage() {
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
		uint16_t avalue = m_inputVoltage.get();
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3310      	adds	r3, #16
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7ff fc44 	bl	80062e6 <_ZN20AdcChannelController3getEv>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	81fb      	strh	r3, [r7, #14]
		float inputVoltage = (float)avalue/ 4095.0f * 3.3f / 0.106464f + 0.6f;
 8006a62:	89fb      	ldrh	r3, [r7, #14]
 8006a64:	ee07 3a90 	vmov	s15, r3
 8006a68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006a6c:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8006aa0 <_ZN14OnBoardSensors15getInputVoltageEv+0x54>
 8006a70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a74:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8006aa4 <_ZN14OnBoardSensors15getInputVoltageEv+0x58>
 8006a78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006a7c:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8006aa8 <_ZN14OnBoardSensors15getInputVoltageEv+0x5c>
 8006a80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a84:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8006aac <_ZN14OnBoardSensors15getInputVoltageEv+0x60>
 8006a88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006a8c:	edc7 7a02 	vstr	s15, [r7, #8]
		return inputVoltage;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	ee07 3a90 	vmov	s15, r3
	}
 8006a96:	eeb0 0a67 	vmov.f32	s0, s15
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}
 8006aa0:	457ff000 	.word	0x457ff000
 8006aa4:	40533333 	.word	0x40533333
 8006aa8:	3dda09cc 	.word	0x3dda09cc
 8006aac:	3f19999a 	.word	0x3f19999a

08006ab0 <_ZN14OnBoardSensors9updateODsEv>:

	void updateODs(){
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
		float temp = getAverageTemperaturC();
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f7ff ff99 	bl	80069f0 <_ZN14OnBoardSensors21getAverageTemperaturCEv>
 8006abe:	ed87 0a03 	vstr	s0, [r7, #12]
		float vBat = getInputVoltage();
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7ff ffc2 	bl	8006a4c <_ZN14OnBoardSensors15getInputVoltageEv>
 8006ac8:	ed87 0a02 	vstr	s0, [r7, #8]
		OD_BoardTemp_set(temp);
 8006acc:	ed97 0a03 	vldr	s0, [r7, #12]
 8006ad0:	f7fd ff8a 	bl	80049e8 <_Z16OD_BoardTemp_setf>
		OD_InputVoltage_set(vBat);
 8006ad4:	ed97 0a02 	vldr	s0, [r7, #8]
 8006ad8:	f7fd ffc0 	bl	8004a5c <_Z19OD_InputVoltage_setf>
	}
 8006adc:	bf00      	nop
 8006ade:	3710      	adds	r7, #16
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <testbench_entry>:

#ifdef __cplusplus
extern "C" {
#endif

void testbench_entry(void *argv) {
 8006ae4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ae8:	b0a7      	sub	sp, #156	; 0x9c
 8006aea:	af0c      	add	r7, sp, #48	; 0x30
 8006aec:	6078      	str	r0, [r7, #4]
	OnBoardSensors onBoardSensors(g_peripherals.m_onBoardTemperaturConfig);
 8006aee:	4e25      	ldr	r6, [pc, #148]	; (8006b84 <testbench_entry+0xa0>)
 8006af0:	f107 0c0c 	add.w	ip, r7, #12
 8006af4:	466d      	mov	r5, sp
 8006af6:	f106 044c 	add.w	r4, r6, #76	; 0x4c
 8006afa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006afc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006afe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006b00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006b02:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006b06:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006b0a:	f106 0340 	add.w	r3, r6, #64	; 0x40
 8006b0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b10:	4660      	mov	r0, ip
 8006b12:	f7ff fe98 	bl	8006846 <_ZN14OnBoardSensorsC1E23OnBoardTemperaturConfig>

	while (true) {
		float internal = onBoardSensors.getInternalTemperaturC();
 8006b16:	f107 030c 	add.w	r3, r7, #12
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7ff fec8 	bl	80068b0 <_ZN14OnBoardSensors22getInternalTemperaturCEv>
 8006b20:	ed87 0a19 	vstr	s0, [r7, #100]	; 0x64
		float external = onBoardSensors.getExternalTemperaturC();
 8006b24:	f107 030c 	add.w	r3, r7, #12
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f7ff fef9 	bl	8006920 <_ZN14OnBoardSensors22getExternalTemperaturCEv>
 8006b2e:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
		float voltage = onBoardSensors.getInputVoltage();
 8006b32:	f107 030c 	add.w	r3, r7, #12
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7ff ff88 	bl	8006a4c <_ZN14OnBoardSensors15getInputVoltageEv>
 8006b3c:	ed87 0a17 	vstr	s0, [r7, #92]	; 0x5c

		onBoardSensors.updateODs();
 8006b40:	f107 030c 	add.w	r3, r7, #12
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7ff ffb3 	bl	8006ab0 <_ZN14OnBoardSensors9updateODsEv>

		printf("%f  %f  %f \n", internal, external, voltage);
 8006b4a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8006b4c:	f7f9 fcfc 	bl	8000548 <__aeabi_f2d>
 8006b50:	4680      	mov	r8, r0
 8006b52:	4689      	mov	r9, r1
 8006b54:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8006b56:	f7f9 fcf7 	bl	8000548 <__aeabi_f2d>
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	460d      	mov	r5, r1
 8006b5e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8006b60:	f7f9 fcf2 	bl	8000548 <__aeabi_f2d>
 8006b64:	4602      	mov	r2, r0
 8006b66:	460b      	mov	r3, r1
 8006b68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b6c:	e9cd 4500 	strd	r4, r5, [sp]
 8006b70:	4642      	mov	r2, r8
 8006b72:	464b      	mov	r3, r9
 8006b74:	4804      	ldr	r0, [pc, #16]	; (8006b88 <testbench_entry+0xa4>)
 8006b76:	f007 fdd5 	bl	800e724 <printf_>
		osDelay(1000);
 8006b7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006b7e:	f007 ff4b 	bl	800ea18 <osDelay>
	}
 8006b82:	e7c8      	b.n	8006b16 <testbench_entry+0x32>
 8006b84:	08016380 	.word	0x08016380
 8006b88:	08016210 	.word	0x08016210

08006b8c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b084      	sub	sp, #16
 8006b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006b92:	463b      	mov	r3, r7
 8006b94:	2200      	movs	r2, #0
 8006b96:	601a      	str	r2, [r3, #0]
 8006b98:	605a      	str	r2, [r3, #4]
 8006b9a:	609a      	str	r2, [r3, #8]
 8006b9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8006b9e:	4b36      	ldr	r3, [pc, #216]	; (8006c78 <MX_ADC1_Init+0xec>)
 8006ba0:	4a36      	ldr	r2, [pc, #216]	; (8006c7c <MX_ADC1_Init+0xf0>)
 8006ba2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8006ba4:	4b34      	ldr	r3, [pc, #208]	; (8006c78 <MX_ADC1_Init+0xec>)
 8006ba6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006baa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006bac:	4b32      	ldr	r3, [pc, #200]	; (8006c78 <MX_ADC1_Init+0xec>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8006bb2:	4b31      	ldr	r3, [pc, #196]	; (8006c78 <MX_ADC1_Init+0xec>)
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8006bb8:	4b2f      	ldr	r3, [pc, #188]	; (8006c78 <MX_ADC1_Init+0xec>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006bbe:	4b2e      	ldr	r3, [pc, #184]	; (8006c78 <MX_ADC1_Init+0xec>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006bc6:	4b2c      	ldr	r3, [pc, #176]	; (8006c78 <MX_ADC1_Init+0xec>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006bcc:	4b2a      	ldr	r3, [pc, #168]	; (8006c78 <MX_ADC1_Init+0xec>)
 8006bce:	4a2c      	ldr	r2, [pc, #176]	; (8006c80 <MX_ADC1_Init+0xf4>)
 8006bd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006bd2:	4b29      	ldr	r3, [pc, #164]	; (8006c78 <MX_ADC1_Init+0xec>)
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8006bd8:	4b27      	ldr	r3, [pc, #156]	; (8006c78 <MX_ADC1_Init+0xec>)
 8006bda:	2204      	movs	r2, #4
 8006bdc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8006bde:	4b26      	ldr	r3, [pc, #152]	; (8006c78 <MX_ADC1_Init+0xec>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8006be6:	4b24      	ldr	r3, [pc, #144]	; (8006c78 <MX_ADC1_Init+0xec>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006bec:	4822      	ldr	r0, [pc, #136]	; (8006c78 <MX_ADC1_Init+0xec>)
 8006bee:	f001 fd47 	bl	8008680 <HAL_ADC_Init>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8006bf8:	f000 fde4 	bl	80077c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8006bfc:	230a      	movs	r3, #10
 8006bfe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006c00:	2301      	movs	r3, #1
 8006c02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8006c04:	2305      	movs	r3, #5
 8006c06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006c08:	463b      	mov	r3, r7
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	481a      	ldr	r0, [pc, #104]	; (8006c78 <MX_ADC1_Init+0xec>)
 8006c0e:	f001 fe95 	bl	800893c <HAL_ADC_ConfigChannel>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8006c18:	f000 fdd4 	bl	80077c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8006c1c:	230c      	movs	r3, #12
 8006c1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006c20:	2302      	movs	r3, #2
 8006c22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006c24:	463b      	mov	r3, r7
 8006c26:	4619      	mov	r1, r3
 8006c28:	4813      	ldr	r0, [pc, #76]	; (8006c78 <MX_ADC1_Init+0xec>)
 8006c2a:	f001 fe87 	bl	800893c <HAL_ADC_ConfigChannel>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8006c34:	f000 fdc6 	bl	80077c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8006c38:	2310      	movs	r3, #16
 8006c3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006c40:	463b      	mov	r3, r7
 8006c42:	4619      	mov	r1, r3
 8006c44:	480c      	ldr	r0, [pc, #48]	; (8006c78 <MX_ADC1_Init+0xec>)
 8006c46:	f001 fe79 	bl	800893c <HAL_ADC_ConfigChannel>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8006c50:	f000 fdb8 	bl	80077c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8006c54:	2311      	movs	r3, #17
 8006c56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006c58:	2304      	movs	r3, #4
 8006c5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006c5c:	463b      	mov	r3, r7
 8006c5e:	4619      	mov	r1, r3
 8006c60:	4805      	ldr	r0, [pc, #20]	; (8006c78 <MX_ADC1_Init+0xec>)
 8006c62:	f001 fe6b 	bl	800893c <HAL_ADC_ConfigChannel>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8006c6c:	f000 fdaa 	bl	80077c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8006c70:	bf00      	nop
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	20000bfc 	.word	0x20000bfc
 8006c7c:	40012000 	.word	0x40012000
 8006c80:	0f000001 	.word	0x0f000001

08006c84 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8006c8a:	463b      	mov	r3, r7
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	605a      	str	r2, [r3, #4]
 8006c92:	609a      	str	r2, [r3, #8]
 8006c94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8006c96:	4b52      	ldr	r3, [pc, #328]	; (8006de0 <MX_ADC2_Init+0x15c>)
 8006c98:	4a52      	ldr	r2, [pc, #328]	; (8006de4 <MX_ADC2_Init+0x160>)
 8006c9a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8006c9c:	4b50      	ldr	r3, [pc, #320]	; (8006de0 <MX_ADC2_Init+0x15c>)
 8006c9e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006ca2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006ca4:	4b4e      	ldr	r3, [pc, #312]	; (8006de0 <MX_ADC2_Init+0x15c>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8006caa:	4b4d      	ldr	r3, [pc, #308]	; (8006de0 <MX_ADC2_Init+0x15c>)
 8006cac:	2201      	movs	r2, #1
 8006cae:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8006cb0:	4b4b      	ldr	r3, [pc, #300]	; (8006de0 <MX_ADC2_Init+0x15c>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8006cb6:	4b4a      	ldr	r3, [pc, #296]	; (8006de0 <MX_ADC2_Init+0x15c>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006cbe:	4b48      	ldr	r3, [pc, #288]	; (8006de0 <MX_ADC2_Init+0x15c>)
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006cc4:	4b46      	ldr	r3, [pc, #280]	; (8006de0 <MX_ADC2_Init+0x15c>)
 8006cc6:	4a48      	ldr	r2, [pc, #288]	; (8006de8 <MX_ADC2_Init+0x164>)
 8006cc8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006cca:	4b45      	ldr	r3, [pc, #276]	; (8006de0 <MX_ADC2_Init+0x15c>)
 8006ccc:	2200      	movs	r2, #0
 8006cce:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 8;
 8006cd0:	4b43      	ldr	r3, [pc, #268]	; (8006de0 <MX_ADC2_Init+0x15c>)
 8006cd2:	2208      	movs	r2, #8
 8006cd4:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8006cd6:	4b42      	ldr	r3, [pc, #264]	; (8006de0 <MX_ADC2_Init+0x15c>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8006cde:	4b40      	ldr	r3, [pc, #256]	; (8006de0 <MX_ADC2_Init+0x15c>)
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006ce4:	483e      	ldr	r0, [pc, #248]	; (8006de0 <MX_ADC2_Init+0x15c>)
 8006ce6:	f001 fccb 	bl	8008680 <HAL_ADC_Init>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8006cf0:	f000 fd68 	bl	80077c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8006cf4:	230f      	movs	r3, #15
 8006cf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8006cfc:	2304      	movs	r3, #4
 8006cfe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006d00:	463b      	mov	r3, r7
 8006d02:	4619      	mov	r1, r3
 8006d04:	4836      	ldr	r0, [pc, #216]	; (8006de0 <MX_ADC2_Init+0x15c>)
 8006d06:	f001 fe19 	bl	800893c <HAL_ADC_ConfigChannel>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d001      	beq.n	8006d14 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8006d10:	f000 fd58 	bl	80077c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8006d14:	230e      	movs	r3, #14
 8006d16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8006d18:	2302      	movs	r3, #2
 8006d1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006d1c:	463b      	mov	r3, r7
 8006d1e:	4619      	mov	r1, r3
 8006d20:	482f      	ldr	r0, [pc, #188]	; (8006de0 <MX_ADC2_Init+0x15c>)
 8006d22:	f001 fe0b 	bl	800893c <HAL_ADC_ConfigChannel>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d001      	beq.n	8006d30 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8006d2c:	f000 fd4a 	bl	80077c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006d30:	2303      	movs	r3, #3
 8006d32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8006d34:	2303      	movs	r3, #3
 8006d36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006d38:	463b      	mov	r3, r7
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4828      	ldr	r0, [pc, #160]	; (8006de0 <MX_ADC2_Init+0x15c>)
 8006d3e:	f001 fdfd 	bl	800893c <HAL_ADC_ConfigChannel>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8006d48:	f000 fd3c 	bl	80077c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8006d50:	2304      	movs	r3, #4
 8006d52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006d54:	463b      	mov	r3, r7
 8006d56:	4619      	mov	r1, r3
 8006d58:	4821      	ldr	r0, [pc, #132]	; (8006de0 <MX_ADC2_Init+0x15c>)
 8006d5a:	f001 fdef 	bl	800893c <HAL_ADC_ConfigChannel>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d001      	beq.n	8006d68 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8006d64:	f000 fd2e 	bl	80077c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006d68:	2304      	movs	r3, #4
 8006d6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8006d6c:	2305      	movs	r3, #5
 8006d6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006d70:	463b      	mov	r3, r7
 8006d72:	4619      	mov	r1, r3
 8006d74:	481a      	ldr	r0, [pc, #104]	; (8006de0 <MX_ADC2_Init+0x15c>)
 8006d76:	f001 fde1 	bl	800893c <HAL_ADC_ConfigChannel>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d001      	beq.n	8006d84 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8006d80:	f000 fd20 	bl	80077c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8006d84:	2305      	movs	r3, #5
 8006d86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006d88:	2306      	movs	r3, #6
 8006d8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006d8c:	463b      	mov	r3, r7
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4813      	ldr	r0, [pc, #76]	; (8006de0 <MX_ADC2_Init+0x15c>)
 8006d92:	f001 fdd3 	bl	800893c <HAL_ADC_ConfigChannel>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d001      	beq.n	8006da0 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8006d9c:	f000 fd12 	bl	80077c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8006da0:	2306      	movs	r3, #6
 8006da2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8006da4:	2307      	movs	r3, #7
 8006da6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006da8:	463b      	mov	r3, r7
 8006daa:	4619      	mov	r1, r3
 8006dac:	480c      	ldr	r0, [pc, #48]	; (8006de0 <MX_ADC2_Init+0x15c>)
 8006dae:	f001 fdc5 	bl	800893c <HAL_ADC_ConfigChannel>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006db8:	f000 fd04 	bl	80077c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8006dbc:	2307      	movs	r3, #7
 8006dbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006dc0:	2308      	movs	r3, #8
 8006dc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006dc4:	463b      	mov	r3, r7
 8006dc6:	4619      	mov	r1, r3
 8006dc8:	4805      	ldr	r0, [pc, #20]	; (8006de0 <MX_ADC2_Init+0x15c>)
 8006dca:	f001 fdb7 	bl	800893c <HAL_ADC_ConfigChannel>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d001      	beq.n	8006dd8 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8006dd4:	f000 fcf6 	bl	80077c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006dd8:	bf00      	nop
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	20000c44 	.word	0x20000c44
 8006de4:	40012100 	.word	0x40012100
 8006de8:	0f000001 	.word	0x0f000001

08006dec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b08c      	sub	sp, #48	; 0x30
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006df4:	f107 031c 	add.w	r3, r7, #28
 8006df8:	2200      	movs	r2, #0
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	605a      	str	r2, [r3, #4]
 8006dfe:	609a      	str	r2, [r3, #8]
 8006e00:	60da      	str	r2, [r3, #12]
 8006e02:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a6b      	ldr	r2, [pc, #428]	; (8006fb8 <HAL_ADC_MspInit+0x1cc>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d157      	bne.n	8006ebe <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006e0e:	2300      	movs	r3, #0
 8006e10:	61bb      	str	r3, [r7, #24]
 8006e12:	4b6a      	ldr	r3, [pc, #424]	; (8006fbc <HAL_ADC_MspInit+0x1d0>)
 8006e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e16:	4a69      	ldr	r2, [pc, #420]	; (8006fbc <HAL_ADC_MspInit+0x1d0>)
 8006e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8006e1e:	4b67      	ldr	r3, [pc, #412]	; (8006fbc <HAL_ADC_MspInit+0x1d0>)
 8006e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e26:	61bb      	str	r3, [r7, #24]
 8006e28:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	617b      	str	r3, [r7, #20]
 8006e2e:	4b63      	ldr	r3, [pc, #396]	; (8006fbc <HAL_ADC_MspInit+0x1d0>)
 8006e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e32:	4a62      	ldr	r2, [pc, #392]	; (8006fbc <HAL_ADC_MspInit+0x1d0>)
 8006e34:	f043 0304 	orr.w	r3, r3, #4
 8006e38:	6313      	str	r3, [r2, #48]	; 0x30
 8006e3a:	4b60      	ldr	r3, [pc, #384]	; (8006fbc <HAL_ADC_MspInit+0x1d0>)
 8006e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3e:	f003 0304 	and.w	r3, r3, #4
 8006e42:	617b      	str	r3, [r7, #20]
 8006e44:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 8006e46:	2305      	movs	r3, #5
 8006e48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e52:	f107 031c 	add.w	r3, r7, #28
 8006e56:	4619      	mov	r1, r3
 8006e58:	4859      	ldr	r0, [pc, #356]	; (8006fc0 <HAL_ADC_MspInit+0x1d4>)
 8006e5a:	f003 fb19 	bl	800a490 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8006e5e:	4b59      	ldr	r3, [pc, #356]	; (8006fc4 <HAL_ADC_MspInit+0x1d8>)
 8006e60:	4a59      	ldr	r2, [pc, #356]	; (8006fc8 <HAL_ADC_MspInit+0x1dc>)
 8006e62:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8006e64:	4b57      	ldr	r3, [pc, #348]	; (8006fc4 <HAL_ADC_MspInit+0x1d8>)
 8006e66:	2200      	movs	r2, #0
 8006e68:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006e6a:	4b56      	ldr	r3, [pc, #344]	; (8006fc4 <HAL_ADC_MspInit+0x1d8>)
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e70:	4b54      	ldr	r3, [pc, #336]	; (8006fc4 <HAL_ADC_MspInit+0x1d8>)
 8006e72:	2200      	movs	r2, #0
 8006e74:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006e76:	4b53      	ldr	r3, [pc, #332]	; (8006fc4 <HAL_ADC_MspInit+0x1d8>)
 8006e78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e7c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006e7e:	4b51      	ldr	r3, [pc, #324]	; (8006fc4 <HAL_ADC_MspInit+0x1d8>)
 8006e80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e84:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006e86:	4b4f      	ldr	r3, [pc, #316]	; (8006fc4 <HAL_ADC_MspInit+0x1d8>)
 8006e88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006e8c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8006e8e:	4b4d      	ldr	r3, [pc, #308]	; (8006fc4 <HAL_ADC_MspInit+0x1d8>)
 8006e90:	2200      	movs	r2, #0
 8006e92:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006e94:	4b4b      	ldr	r3, [pc, #300]	; (8006fc4 <HAL_ADC_MspInit+0x1d8>)
 8006e96:	2200      	movs	r2, #0
 8006e98:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006e9a:	4b4a      	ldr	r3, [pc, #296]	; (8006fc4 <HAL_ADC_MspInit+0x1d8>)
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006ea0:	4848      	ldr	r0, [pc, #288]	; (8006fc4 <HAL_ADC_MspInit+0x1d8>)
 8006ea2:	f002 ff85 	bl	8009db0 <HAL_DMA_Init>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8006eac:	f000 fc8a 	bl	80077c4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a44      	ldr	r2, [pc, #272]	; (8006fc4 <HAL_ADC_MspInit+0x1d8>)
 8006eb4:	639a      	str	r2, [r3, #56]	; 0x38
 8006eb6:	4a43      	ldr	r2, [pc, #268]	; (8006fc4 <HAL_ADC_MspInit+0x1d8>)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8006ebc:	e077      	b.n	8006fae <HAL_ADC_MspInit+0x1c2>
  else if(adcHandle->Instance==ADC2)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	4a42      	ldr	r2, [pc, #264]	; (8006fcc <HAL_ADC_MspInit+0x1e0>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	d172      	bne.n	8006fae <HAL_ADC_MspInit+0x1c2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006ec8:	2300      	movs	r3, #0
 8006eca:	613b      	str	r3, [r7, #16]
 8006ecc:	4b3b      	ldr	r3, [pc, #236]	; (8006fbc <HAL_ADC_MspInit+0x1d0>)
 8006ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ed0:	4a3a      	ldr	r2, [pc, #232]	; (8006fbc <HAL_ADC_MspInit+0x1d0>)
 8006ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ed6:	6453      	str	r3, [r2, #68]	; 0x44
 8006ed8:	4b38      	ldr	r3, [pc, #224]	; (8006fbc <HAL_ADC_MspInit+0x1d0>)
 8006eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006edc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ee0:	613b      	str	r3, [r7, #16]
 8006ee2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	60fb      	str	r3, [r7, #12]
 8006ee8:	4b34      	ldr	r3, [pc, #208]	; (8006fbc <HAL_ADC_MspInit+0x1d0>)
 8006eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eec:	4a33      	ldr	r2, [pc, #204]	; (8006fbc <HAL_ADC_MspInit+0x1d0>)
 8006eee:	f043 0304 	orr.w	r3, r3, #4
 8006ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8006ef4:	4b31      	ldr	r3, [pc, #196]	; (8006fbc <HAL_ADC_MspInit+0x1d0>)
 8006ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef8:	f003 0304 	and.w	r3, r3, #4
 8006efc:	60fb      	str	r3, [r7, #12]
 8006efe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f00:	2300      	movs	r3, #0
 8006f02:	60bb      	str	r3, [r7, #8]
 8006f04:	4b2d      	ldr	r3, [pc, #180]	; (8006fbc <HAL_ADC_MspInit+0x1d0>)
 8006f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f08:	4a2c      	ldr	r2, [pc, #176]	; (8006fbc <HAL_ADC_MspInit+0x1d0>)
 8006f0a:	f043 0301 	orr.w	r3, r3, #1
 8006f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8006f10:	4b2a      	ldr	r3, [pc, #168]	; (8006fbc <HAL_ADC_MspInit+0x1d0>)
 8006f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	60bb      	str	r3, [r7, #8]
 8006f1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin|AN2_Pin|AN1_Pin;
 8006f1c:	2335      	movs	r3, #53	; 0x35
 8006f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f20:	2303      	movs	r3, #3
 8006f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f24:	2300      	movs	r3, #0
 8006f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f28:	f107 031c 	add.w	r3, r7, #28
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	4824      	ldr	r0, [pc, #144]	; (8006fc0 <HAL_ADC_MspInit+0x1d4>)
 8006f30:	f003 faae 	bl	800a490 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AN4_Pin|AN3_Pin|AN5_Pin|AN6_Pin
 8006f34:	23fc      	movs	r3, #252	; 0xfc
 8006f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f40:	f107 031c 	add.w	r3, r7, #28
 8006f44:	4619      	mov	r1, r3
 8006f46:	4822      	ldr	r0, [pc, #136]	; (8006fd0 <HAL_ADC_MspInit+0x1e4>)
 8006f48:	f003 faa2 	bl	800a490 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8006f4c:	4b21      	ldr	r3, [pc, #132]	; (8006fd4 <HAL_ADC_MspInit+0x1e8>)
 8006f4e:	4a22      	ldr	r2, [pc, #136]	; (8006fd8 <HAL_ADC_MspInit+0x1ec>)
 8006f50:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006f52:	4b20      	ldr	r3, [pc, #128]	; (8006fd4 <HAL_ADC_MspInit+0x1e8>)
 8006f54:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f58:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f5a:	4b1e      	ldr	r3, [pc, #120]	; (8006fd4 <HAL_ADC_MspInit+0x1e8>)
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f60:	4b1c      	ldr	r3, [pc, #112]	; (8006fd4 <HAL_ADC_MspInit+0x1e8>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006f66:	4b1b      	ldr	r3, [pc, #108]	; (8006fd4 <HAL_ADC_MspInit+0x1e8>)
 8006f68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f6c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006f6e:	4b19      	ldr	r3, [pc, #100]	; (8006fd4 <HAL_ADC_MspInit+0x1e8>)
 8006f70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f74:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006f76:	4b17      	ldr	r3, [pc, #92]	; (8006fd4 <HAL_ADC_MspInit+0x1e8>)
 8006f78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006f7c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8006f7e:	4b15      	ldr	r3, [pc, #84]	; (8006fd4 <HAL_ADC_MspInit+0x1e8>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006f84:	4b13      	ldr	r3, [pc, #76]	; (8006fd4 <HAL_ADC_MspInit+0x1e8>)
 8006f86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006f8a:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006f8c:	4b11      	ldr	r3, [pc, #68]	; (8006fd4 <HAL_ADC_MspInit+0x1e8>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006f92:	4810      	ldr	r0, [pc, #64]	; (8006fd4 <HAL_ADC_MspInit+0x1e8>)
 8006f94:	f002 ff0c 	bl	8009db0 <HAL_DMA_Init>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d001      	beq.n	8006fa2 <HAL_ADC_MspInit+0x1b6>
      Error_Handler();
 8006f9e:	f000 fc11 	bl	80077c4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a0b      	ldr	r2, [pc, #44]	; (8006fd4 <HAL_ADC_MspInit+0x1e8>)
 8006fa6:	639a      	str	r2, [r3, #56]	; 0x38
 8006fa8:	4a0a      	ldr	r2, [pc, #40]	; (8006fd4 <HAL_ADC_MspInit+0x1e8>)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006fae:	bf00      	nop
 8006fb0:	3730      	adds	r7, #48	; 0x30
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	40012000 	.word	0x40012000
 8006fbc:	40023800 	.word	0x40023800
 8006fc0:	40020800 	.word	0x40020800
 8006fc4:	20000c8c 	.word	0x20000c8c
 8006fc8:	40026410 	.word	0x40026410
 8006fcc:	40012100 	.word	0x40012100
 8006fd0:	40020000 	.word	0x40020000
 8006fd4:	20000cec 	.word	0x20000cec
 8006fd8:	40026440 	.word	0x40026440

08006fdc <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8006fe0:	4b17      	ldr	r3, [pc, #92]	; (8007040 <MX_CAN1_Init+0x64>)
 8006fe2:	4a18      	ldr	r2, [pc, #96]	; (8007044 <MX_CAN1_Init+0x68>)
 8006fe4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8006fe6:	4b16      	ldr	r3, [pc, #88]	; (8007040 <MX_CAN1_Init+0x64>)
 8006fe8:	2203      	movs	r2, #3
 8006fea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006fec:	4b14      	ldr	r3, [pc, #80]	; (8007040 <MX_CAN1_Init+0x64>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8006ff2:	4b13      	ldr	r3, [pc, #76]	; (8007040 <MX_CAN1_Init+0x64>)
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8006ff8:	4b11      	ldr	r3, [pc, #68]	; (8007040 <MX_CAN1_Init+0x64>)
 8006ffa:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8006ffe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8007000:	4b0f      	ldr	r3, [pc, #60]	; (8007040 <MX_CAN1_Init+0x64>)
 8007002:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007006:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8007008:	4b0d      	ldr	r3, [pc, #52]	; (8007040 <MX_CAN1_Init+0x64>)
 800700a:	2200      	movs	r2, #0
 800700c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800700e:	4b0c      	ldr	r3, [pc, #48]	; (8007040 <MX_CAN1_Init+0x64>)
 8007010:	2201      	movs	r2, #1
 8007012:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8007014:	4b0a      	ldr	r3, [pc, #40]	; (8007040 <MX_CAN1_Init+0x64>)
 8007016:	2200      	movs	r2, #0
 8007018:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800701a:	4b09      	ldr	r3, [pc, #36]	; (8007040 <MX_CAN1_Init+0x64>)
 800701c:	2201      	movs	r2, #1
 800701e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8007020:	4b07      	ldr	r3, [pc, #28]	; (8007040 <MX_CAN1_Init+0x64>)
 8007022:	2200      	movs	r2, #0
 8007024:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8007026:	4b06      	ldr	r3, [pc, #24]	; (8007040 <MX_CAN1_Init+0x64>)
 8007028:	2200      	movs	r2, #0
 800702a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800702c:	4804      	ldr	r0, [pc, #16]	; (8007040 <MX_CAN1_Init+0x64>)
 800702e:	f001 ff25 	bl	8008e7c <HAL_CAN_Init>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8007038:	f000 fbc4 	bl	80077c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800703c:	bf00      	nop
 800703e:	bd80      	pop	{r7, pc}
 8007040:	20000d4c 	.word	0x20000d4c
 8007044:	40006400 	.word	0x40006400

08007048 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800704c:	4b17      	ldr	r3, [pc, #92]	; (80070ac <MX_CAN2_Init+0x64>)
 800704e:	4a18      	ldr	r2, [pc, #96]	; (80070b0 <MX_CAN2_Init+0x68>)
 8007050:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8007052:	4b16      	ldr	r3, [pc, #88]	; (80070ac <MX_CAN2_Init+0x64>)
 8007054:	2203      	movs	r2, #3
 8007056:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8007058:	4b14      	ldr	r3, [pc, #80]	; (80070ac <MX_CAN2_Init+0x64>)
 800705a:	2200      	movs	r2, #0
 800705c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800705e:	4b13      	ldr	r3, [pc, #76]	; (80070ac <MX_CAN2_Init+0x64>)
 8007060:	2200      	movs	r2, #0
 8007062:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8007064:	4b11      	ldr	r3, [pc, #68]	; (80070ac <MX_CAN2_Init+0x64>)
 8007066:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800706a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 800706c:	4b0f      	ldr	r3, [pc, #60]	; (80070ac <MX_CAN2_Init+0x64>)
 800706e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8007072:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8007074:	4b0d      	ldr	r3, [pc, #52]	; (80070ac <MX_CAN2_Init+0x64>)
 8007076:	2200      	movs	r2, #0
 8007078:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 800707a:	4b0c      	ldr	r3, [pc, #48]	; (80070ac <MX_CAN2_Init+0x64>)
 800707c:	2201      	movs	r2, #1
 800707e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8007080:	4b0a      	ldr	r3, [pc, #40]	; (80070ac <MX_CAN2_Init+0x64>)
 8007082:	2200      	movs	r2, #0
 8007084:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8007086:	4b09      	ldr	r3, [pc, #36]	; (80070ac <MX_CAN2_Init+0x64>)
 8007088:	2201      	movs	r2, #1
 800708a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800708c:	4b07      	ldr	r3, [pc, #28]	; (80070ac <MX_CAN2_Init+0x64>)
 800708e:	2200      	movs	r2, #0
 8007090:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8007092:	4b06      	ldr	r3, [pc, #24]	; (80070ac <MX_CAN2_Init+0x64>)
 8007094:	2200      	movs	r2, #0
 8007096:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8007098:	4804      	ldr	r0, [pc, #16]	; (80070ac <MX_CAN2_Init+0x64>)
 800709a:	f001 feef 	bl	8008e7c <HAL_CAN_Init>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80070a4:	f000 fb8e 	bl	80077c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80070a8:	bf00      	nop
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	20000d74 	.word	0x20000d74
 80070b0:	40006800 	.word	0x40006800

080070b4 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b08c      	sub	sp, #48	; 0x30
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070bc:	f107 031c 	add.w	r3, r7, #28
 80070c0:	2200      	movs	r2, #0
 80070c2:	601a      	str	r2, [r3, #0]
 80070c4:	605a      	str	r2, [r3, #4]
 80070c6:	609a      	str	r2, [r3, #8]
 80070c8:	60da      	str	r2, [r3, #12]
 80070ca:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a5a      	ldr	r2, [pc, #360]	; (800723c <HAL_CAN_MspInit+0x188>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d14d      	bne.n	8007172 <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80070d6:	4b5a      	ldr	r3, [pc, #360]	; (8007240 <HAL_CAN_MspInit+0x18c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	3301      	adds	r3, #1
 80070dc:	4a58      	ldr	r2, [pc, #352]	; (8007240 <HAL_CAN_MspInit+0x18c>)
 80070de:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80070e0:	4b57      	ldr	r3, [pc, #348]	; (8007240 <HAL_CAN_MspInit+0x18c>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d10d      	bne.n	8007104 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80070e8:	2300      	movs	r3, #0
 80070ea:	61bb      	str	r3, [r7, #24]
 80070ec:	4b55      	ldr	r3, [pc, #340]	; (8007244 <HAL_CAN_MspInit+0x190>)
 80070ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f0:	4a54      	ldr	r2, [pc, #336]	; (8007244 <HAL_CAN_MspInit+0x190>)
 80070f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80070f6:	6413      	str	r3, [r2, #64]	; 0x40
 80070f8:	4b52      	ldr	r3, [pc, #328]	; (8007244 <HAL_CAN_MspInit+0x190>)
 80070fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007100:	61bb      	str	r3, [r7, #24]
 8007102:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007104:	2300      	movs	r3, #0
 8007106:	617b      	str	r3, [r7, #20]
 8007108:	4b4e      	ldr	r3, [pc, #312]	; (8007244 <HAL_CAN_MspInit+0x190>)
 800710a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710c:	4a4d      	ldr	r2, [pc, #308]	; (8007244 <HAL_CAN_MspInit+0x190>)
 800710e:	f043 0308 	orr.w	r3, r3, #8
 8007112:	6313      	str	r3, [r2, #48]	; 0x30
 8007114:	4b4b      	ldr	r3, [pc, #300]	; (8007244 <HAL_CAN_MspInit+0x190>)
 8007116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007118:	f003 0308 	and.w	r3, r3, #8
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007120:	2303      	movs	r3, #3
 8007122:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007124:	2302      	movs	r3, #2
 8007126:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007128:	2300      	movs	r3, #0
 800712a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800712c:	2303      	movs	r3, #3
 800712e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8007130:	2309      	movs	r3, #9
 8007132:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007134:	f107 031c 	add.w	r3, r7, #28
 8007138:	4619      	mov	r1, r3
 800713a:	4843      	ldr	r0, [pc, #268]	; (8007248 <HAL_CAN_MspInit+0x194>)
 800713c:	f003 f9a8 	bl	800a490 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8007140:	2200      	movs	r2, #0
 8007142:	2105      	movs	r1, #5
 8007144:	2013      	movs	r0, #19
 8007146:	f002 fded 	bl	8009d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800714a:	2013      	movs	r0, #19
 800714c:	f002 fe06 	bl	8009d5c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8007150:	2200      	movs	r2, #0
 8007152:	2105      	movs	r1, #5
 8007154:	2014      	movs	r0, #20
 8007156:	f002 fde5 	bl	8009d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800715a:	2014      	movs	r0, #20
 800715c:	f002 fdfe 	bl	8009d5c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8007160:	2200      	movs	r2, #0
 8007162:	2105      	movs	r1, #5
 8007164:	2015      	movs	r0, #21
 8007166:	f002 fddd 	bl	8009d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800716a:	2015      	movs	r0, #21
 800716c:	f002 fdf6 	bl	8009d5c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8007170:	e05f      	b.n	8007232 <HAL_CAN_MspInit+0x17e>
  else if(canHandle->Instance==CAN2)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a35      	ldr	r2, [pc, #212]	; (800724c <HAL_CAN_MspInit+0x198>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d15a      	bne.n	8007232 <HAL_CAN_MspInit+0x17e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800717c:	2300      	movs	r3, #0
 800717e:	613b      	str	r3, [r7, #16]
 8007180:	4b30      	ldr	r3, [pc, #192]	; (8007244 <HAL_CAN_MspInit+0x190>)
 8007182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007184:	4a2f      	ldr	r2, [pc, #188]	; (8007244 <HAL_CAN_MspInit+0x190>)
 8007186:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800718a:	6413      	str	r3, [r2, #64]	; 0x40
 800718c:	4b2d      	ldr	r3, [pc, #180]	; (8007244 <HAL_CAN_MspInit+0x190>)
 800718e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007190:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007194:	613b      	str	r3, [r7, #16]
 8007196:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8007198:	4b29      	ldr	r3, [pc, #164]	; (8007240 <HAL_CAN_MspInit+0x18c>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3301      	adds	r3, #1
 800719e:	4a28      	ldr	r2, [pc, #160]	; (8007240 <HAL_CAN_MspInit+0x18c>)
 80071a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80071a2:	4b27      	ldr	r3, [pc, #156]	; (8007240 <HAL_CAN_MspInit+0x18c>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d10d      	bne.n	80071c6 <HAL_CAN_MspInit+0x112>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	4b25      	ldr	r3, [pc, #148]	; (8007244 <HAL_CAN_MspInit+0x190>)
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	4a24      	ldr	r2, [pc, #144]	; (8007244 <HAL_CAN_MspInit+0x190>)
 80071b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80071b8:	6413      	str	r3, [r2, #64]	; 0x40
 80071ba:	4b22      	ldr	r3, [pc, #136]	; (8007244 <HAL_CAN_MspInit+0x190>)
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071c6:	2300      	movs	r3, #0
 80071c8:	60bb      	str	r3, [r7, #8]
 80071ca:	4b1e      	ldr	r3, [pc, #120]	; (8007244 <HAL_CAN_MspInit+0x190>)
 80071cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ce:	4a1d      	ldr	r2, [pc, #116]	; (8007244 <HAL_CAN_MspInit+0x190>)
 80071d0:	f043 0302 	orr.w	r3, r3, #2
 80071d4:	6313      	str	r3, [r2, #48]	; 0x30
 80071d6:	4b1b      	ldr	r3, [pc, #108]	; (8007244 <HAL_CAN_MspInit+0x190>)
 80071d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071da:	f003 0302 	and.w	r3, r3, #2
 80071de:	60bb      	str	r3, [r7, #8]
 80071e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80071e2:	2360      	movs	r3, #96	; 0x60
 80071e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071e6:	2302      	movs	r3, #2
 80071e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ea:	2300      	movs	r3, #0
 80071ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071ee:	2303      	movs	r3, #3
 80071f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80071f2:	2309      	movs	r3, #9
 80071f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071f6:	f107 031c 	add.w	r3, r7, #28
 80071fa:	4619      	mov	r1, r3
 80071fc:	4814      	ldr	r0, [pc, #80]	; (8007250 <HAL_CAN_MspInit+0x19c>)
 80071fe:	f003 f947 	bl	800a490 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8007202:	2200      	movs	r2, #0
 8007204:	2105      	movs	r1, #5
 8007206:	203f      	movs	r0, #63	; 0x3f
 8007208:	f002 fd8c 	bl	8009d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 800720c:	203f      	movs	r0, #63	; 0x3f
 800720e:	f002 fda5 	bl	8009d5c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8007212:	2200      	movs	r2, #0
 8007214:	2105      	movs	r1, #5
 8007216:	2040      	movs	r0, #64	; 0x40
 8007218:	f002 fd84 	bl	8009d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800721c:	2040      	movs	r0, #64	; 0x40
 800721e:	f002 fd9d 	bl	8009d5c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8007222:	2200      	movs	r2, #0
 8007224:	2105      	movs	r1, #5
 8007226:	2041      	movs	r0, #65	; 0x41
 8007228:	f002 fd7c 	bl	8009d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800722c:	2041      	movs	r0, #65	; 0x41
 800722e:	f002 fd95 	bl	8009d5c <HAL_NVIC_EnableIRQ>
}
 8007232:	bf00      	nop
 8007234:	3730      	adds	r7, #48	; 0x30
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	40006400 	.word	0x40006400
 8007240:	20000d9c 	.word	0x20000d9c
 8007244:	40023800 	.word	0x40023800
 8007248:	40020c00 	.word	0x40020c00
 800724c:	40006800 	.word	0x40006800
 8007250:	40020400 	.word	0x40020400

08007254 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8007258:	4b06      	ldr	r3, [pc, #24]	; (8007274 <MX_CRC_Init+0x20>)
 800725a:	4a07      	ldr	r2, [pc, #28]	; (8007278 <MX_CRC_Init+0x24>)
 800725c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800725e:	4805      	ldr	r0, [pc, #20]	; (8007274 <MX_CRC_Init+0x20>)
 8007260:	f002 fd8a 	bl	8009d78 <HAL_CRC_Init>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800726a:	f000 faab 	bl	80077c4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800726e:	bf00      	nop
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	20000da0 	.word	0x20000da0
 8007278:	40023000 	.word	0x40023000

0800727c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a0b      	ldr	r2, [pc, #44]	; (80072b8 <HAL_CRC_MspInit+0x3c>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d10d      	bne.n	80072aa <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800728e:	2300      	movs	r3, #0
 8007290:	60fb      	str	r3, [r7, #12]
 8007292:	4b0a      	ldr	r3, [pc, #40]	; (80072bc <HAL_CRC_MspInit+0x40>)
 8007294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007296:	4a09      	ldr	r2, [pc, #36]	; (80072bc <HAL_CRC_MspInit+0x40>)
 8007298:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800729c:	6313      	str	r3, [r2, #48]	; 0x30
 800729e:	4b07      	ldr	r3, [pc, #28]	; (80072bc <HAL_CRC_MspInit+0x40>)
 80072a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072a6:	60fb      	str	r3, [r7, #12]
 80072a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80072aa:	bf00      	nop
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	40023000 	.word	0x40023000
 80072bc:	40023800 	.word	0x40023800

080072c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b082      	sub	sp, #8
 80072c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80072c6:	2300      	movs	r3, #0
 80072c8:	607b      	str	r3, [r7, #4]
 80072ca:	4b18      	ldr	r3, [pc, #96]	; (800732c <MX_DMA_Init+0x6c>)
 80072cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ce:	4a17      	ldr	r2, [pc, #92]	; (800732c <MX_DMA_Init+0x6c>)
 80072d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80072d4:	6313      	str	r3, [r2, #48]	; 0x30
 80072d6:	4b15      	ldr	r3, [pc, #84]	; (800732c <MX_DMA_Init+0x6c>)
 80072d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072de:	607b      	str	r3, [r7, #4]
 80072e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80072e2:	2200      	movs	r2, #0
 80072e4:	2105      	movs	r1, #5
 80072e6:	2038      	movs	r0, #56	; 0x38
 80072e8:	f002 fd1c 	bl	8009d24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80072ec:	2038      	movs	r0, #56	; 0x38
 80072ee:	f002 fd35 	bl	8009d5c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80072f2:	2200      	movs	r2, #0
 80072f4:	2105      	movs	r1, #5
 80072f6:	203a      	movs	r0, #58	; 0x3a
 80072f8:	f002 fd14 	bl	8009d24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80072fc:	203a      	movs	r0, #58	; 0x3a
 80072fe:	f002 fd2d 	bl	8009d5c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8007302:	2200      	movs	r2, #0
 8007304:	2105      	movs	r1, #5
 8007306:	2044      	movs	r0, #68	; 0x44
 8007308:	f002 fd0c 	bl	8009d24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800730c:	2044      	movs	r0, #68	; 0x44
 800730e:	f002 fd25 	bl	8009d5c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8007312:	2200      	movs	r2, #0
 8007314:	2105      	movs	r1, #5
 8007316:	2046      	movs	r0, #70	; 0x46
 8007318:	f002 fd04 	bl	8009d24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800731c:	2046      	movs	r0, #70	; 0x46
 800731e:	f002 fd1d 	bl	8009d5c <HAL_NVIC_EnableIRQ>

}
 8007322:	bf00      	nop
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	40023800 	.word	0x40023800

08007330 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8007330:	b480      	push	{r7}
 8007332:	af00      	add	r7, sp, #0

}
 8007334:	bf00      	nop
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800733e:	b480      	push	{r7}
 8007340:	af00      	add	r7, sp, #0
return 0;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr

0800734e <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800734e:	b480      	push	{r7}
 8007350:	b083      	sub	sp, #12
 8007352:	af00      	add	r7, sp, #0
 8007354:	6078      	str	r0, [r7, #4]
 8007356:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 8007364:	b480      	push	{r7}
 8007366:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8007368:	bf00      	nop
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
	...

08007374 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of printQueue */
  printQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &printQueue_attributes);
 8007378:	4a10      	ldr	r2, [pc, #64]	; (80073bc <MX_FREERTOS_Init+0x48>)
 800737a:	2101      	movs	r1, #1
 800737c:	2010      	movs	r0, #16
 800737e:	f007 fdb3 	bl	800eee8 <osMessageQueueNew>
 8007382:	4603      	mov	r3, r0
 8007384:	4a0e      	ldr	r2, [pc, #56]	; (80073c0 <MX_FREERTOS_Init+0x4c>)
 8007386:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8007388:	4a0e      	ldr	r2, [pc, #56]	; (80073c4 <MX_FREERTOS_Init+0x50>)
 800738a:	2100      	movs	r1, #0
 800738c:	480e      	ldr	r0, [pc, #56]	; (80073c8 <MX_FREERTOS_Init+0x54>)
 800738e:	f007 fab1 	bl	800e8f4 <osThreadNew>
 8007392:	4603      	mov	r3, r0
 8007394:	4a0d      	ldr	r2, [pc, #52]	; (80073cc <MX_FREERTOS_Init+0x58>)
 8007396:	6013      	str	r3, [r2, #0]

  /* creation of canzero */
  canzeroHandle = osThreadNew(canzero_start, NULL, &canzero_attributes);
 8007398:	4a0d      	ldr	r2, [pc, #52]	; (80073d0 <MX_FREERTOS_Init+0x5c>)
 800739a:	2100      	movs	r1, #0
 800739c:	480d      	ldr	r0, [pc, #52]	; (80073d4 <MX_FREERTOS_Init+0x60>)
 800739e:	f007 faa9 	bl	800e8f4 <osThreadNew>
 80073a2:	4603      	mov	r3, r0
 80073a4:	4a0c      	ldr	r2, [pc, #48]	; (80073d8 <MX_FREERTOS_Init+0x64>)
 80073a6:	6013      	str	r3, [r2, #0]

  /* creation of testbench */
  testbenchHandle = osThreadNew(testbench_entry, NULL, &testbench_attributes);
 80073a8:	4a0c      	ldr	r2, [pc, #48]	; (80073dc <MX_FREERTOS_Init+0x68>)
 80073aa:	2100      	movs	r1, #0
 80073ac:	480c      	ldr	r0, [pc, #48]	; (80073e0 <MX_FREERTOS_Init+0x6c>)
 80073ae:	f007 faa1 	bl	800e8f4 <osThreadNew>
 80073b2:	4603      	mov	r3, r0
 80073b4:	4a0b      	ldr	r2, [pc, #44]	; (80073e4 <MX_FREERTOS_Init+0x70>)
 80073b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80073b8:	bf00      	nop
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	08016464 	.word	0x08016464
 80073c0:	20001074 	.word	0x20001074
 80073c4:	080163f8 	.word	0x080163f8
 80073c8:	080073e9 	.word	0x080073e9
 80073cc:	20000da8 	.word	0x20000da8
 80073d0:	0801641c 	.word	0x0801641c
 80073d4:	08002049 	.word	0x08002049
 80073d8:	2000106c 	.word	0x2000106c
 80073dc:	08016440 	.word	0x08016440
 80073e0:	08006ae5 	.word	0x08006ae5
 80073e4:	20001070 	.word	0x20001070

080073e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80073f0:	2001      	movs	r0, #1
 80073f2:	f007 fb11 	bl	800ea18 <osDelay>
 80073f6:	e7fb      	b.n	80073f0 <StartDefaultTask+0x8>

080073f8 <MX_GPIO_Init>:
        * EXTI
     PC0   ------> SharedAnalog_PC0
     PC2   ------> SharedAnalog_PC2
*/
void MX_GPIO_Init(void)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b08a      	sub	sp, #40	; 0x28
 80073fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80073fe:	f107 0314 	add.w	r3, r7, #20
 8007402:	2200      	movs	r2, #0
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	605a      	str	r2, [r3, #4]
 8007408:	609a      	str	r2, [r3, #8]
 800740a:	60da      	str	r2, [r3, #12]
 800740c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800740e:	2300      	movs	r3, #0
 8007410:	613b      	str	r3, [r7, #16]
 8007412:	4b55      	ldr	r3, [pc, #340]	; (8007568 <MX_GPIO_Init+0x170>)
 8007414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007416:	4a54      	ldr	r2, [pc, #336]	; (8007568 <MX_GPIO_Init+0x170>)
 8007418:	f043 0304 	orr.w	r3, r3, #4
 800741c:	6313      	str	r3, [r2, #48]	; 0x30
 800741e:	4b52      	ldr	r3, [pc, #328]	; (8007568 <MX_GPIO_Init+0x170>)
 8007420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007422:	f003 0304 	and.w	r3, r3, #4
 8007426:	613b      	str	r3, [r7, #16]
 8007428:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800742a:	2300      	movs	r3, #0
 800742c:	60fb      	str	r3, [r7, #12]
 800742e:	4b4e      	ldr	r3, [pc, #312]	; (8007568 <MX_GPIO_Init+0x170>)
 8007430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007432:	4a4d      	ldr	r2, [pc, #308]	; (8007568 <MX_GPIO_Init+0x170>)
 8007434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007438:	6313      	str	r3, [r2, #48]	; 0x30
 800743a:	4b4b      	ldr	r3, [pc, #300]	; (8007568 <MX_GPIO_Init+0x170>)
 800743c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007442:	60fb      	str	r3, [r7, #12]
 8007444:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007446:	2300      	movs	r3, #0
 8007448:	60bb      	str	r3, [r7, #8]
 800744a:	4b47      	ldr	r3, [pc, #284]	; (8007568 <MX_GPIO_Init+0x170>)
 800744c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744e:	4a46      	ldr	r2, [pc, #280]	; (8007568 <MX_GPIO_Init+0x170>)
 8007450:	f043 0301 	orr.w	r3, r3, #1
 8007454:	6313      	str	r3, [r2, #48]	; 0x30
 8007456:	4b44      	ldr	r3, [pc, #272]	; (8007568 <MX_GPIO_Init+0x170>)
 8007458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800745a:	f003 0301 	and.w	r3, r3, #1
 800745e:	60bb      	str	r3, [r7, #8]
 8007460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007462:	2300      	movs	r3, #0
 8007464:	607b      	str	r3, [r7, #4]
 8007466:	4b40      	ldr	r3, [pc, #256]	; (8007568 <MX_GPIO_Init+0x170>)
 8007468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800746a:	4a3f      	ldr	r2, [pc, #252]	; (8007568 <MX_GPIO_Init+0x170>)
 800746c:	f043 0302 	orr.w	r3, r3, #2
 8007470:	6313      	str	r3, [r2, #48]	; 0x30
 8007472:	4b3d      	ldr	r3, [pc, #244]	; (8007568 <MX_GPIO_Init+0x170>)
 8007474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007476:	f003 0302 	and.w	r3, r3, #2
 800747a:	607b      	str	r3, [r7, #4]
 800747c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800747e:	2300      	movs	r3, #0
 8007480:	603b      	str	r3, [r7, #0]
 8007482:	4b39      	ldr	r3, [pc, #228]	; (8007568 <MX_GPIO_Init+0x170>)
 8007484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007486:	4a38      	ldr	r2, [pc, #224]	; (8007568 <MX_GPIO_Init+0x170>)
 8007488:	f043 0308 	orr.w	r3, r3, #8
 800748c:	6313      	str	r3, [r2, #48]	; 0x30
 800748e:	4b36      	ldr	r3, [pc, #216]	; (8007568 <MX_GPIO_Init+0x170>)
 8007490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007492:	f003 0308 	and.w	r3, r3, #8
 8007496:	603b      	str	r3, [r7, #0]
 8007498:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin, GPIO_PIN_RESET);
 800749a:	2200      	movs	r2, #0
 800749c:	f641 4102 	movw	r1, #7170	; 0x1c02
 80074a0:	4832      	ldr	r0, [pc, #200]	; (800756c <MX_GPIO_Init+0x174>)
 80074a2:	f003 f991 	bl	800a7c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 80074a6:	2305      	movs	r3, #5
 80074a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80074aa:	2303      	movs	r3, #3
 80074ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074ae:	2300      	movs	r3, #0
 80074b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80074b2:	f107 0314 	add.w	r3, r7, #20
 80074b6:	4619      	mov	r1, r3
 80074b8:	482d      	ldr	r0, [pc, #180]	; (8007570 <MX_GPIO_Init+0x178>)
 80074ba:	f002 ffe9 	bl	800a490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIN1_Pin;
 80074be:	2302      	movs	r3, #2
 80074c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80074c2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80074c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074c8:	2300      	movs	r3, #0
 80074ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN1_GPIO_Port, &GPIO_InitStruct);
 80074cc:	f107 0314 	add.w	r3, r7, #20
 80074d0:	4619      	mov	r1, r3
 80074d2:	4827      	ldr	r0, [pc, #156]	; (8007570 <MX_GPIO_Init+0x178>)
 80074d4:	f002 ffdc 	bl	800a490 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIN2_Pin;
 80074d8:	2308      	movs	r3, #8
 80074da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80074dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80074e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN2_GPIO_Port, &GPIO_InitStruct);
 80074e6:	f107 0314 	add.w	r3, r7, #20
 80074ea:	4619      	mov	r1, r3
 80074ec:	4820      	ldr	r0, [pc, #128]	; (8007570 <MX_GPIO_Init+0x178>)
 80074ee:	f002 ffcf 	bl	800a490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin;
 80074f2:	f641 4302 	movw	r3, #7170	; 0x1c02
 80074f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074f8:	2301      	movs	r3, #1
 80074fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074fc:	2300      	movs	r3, #0
 80074fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007500:	2300      	movs	r3, #0
 8007502:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007504:	f107 0314 	add.w	r3, r7, #20
 8007508:	4619      	mov	r1, r3
 800750a:	4818      	ldr	r0, [pc, #96]	; (800756c <MX_GPIO_Init+0x174>)
 800750c:	f002 ffc0 	bl	800a490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SDC_IN_STATUS_Pin|SDC_OUT_STATUS_Pin;
 8007510:	2318      	movs	r3, #24
 8007512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007514:	2300      	movs	r3, #0
 8007516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007518:	2300      	movs	r3, #0
 800751a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800751c:	f107 0314 	add.w	r3, r7, #20
 8007520:	4619      	mov	r1, r3
 8007522:	4814      	ldr	r0, [pc, #80]	; (8007574 <MX_GPIO_Init+0x17c>)
 8007524:	f002 ffb4 	bl	800a490 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIN3_Pin|DIN4_Pin;
 8007528:	2390      	movs	r3, #144	; 0x90
 800752a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800752c:	2300      	movs	r3, #0
 800752e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007530:	2300      	movs	r3, #0
 8007532:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007534:	f107 0314 	add.w	r3, r7, #20
 8007538:	4619      	mov	r1, r3
 800753a:	480c      	ldr	r0, [pc, #48]	; (800756c <MX_GPIO_Init+0x174>)
 800753c:	f002 ffa8 	bl	800a490 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8007540:	2200      	movs	r2, #0
 8007542:	2105      	movs	r1, #5
 8007544:	2007      	movs	r0, #7
 8007546:	f002 fbed 	bl	8009d24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800754a:	2007      	movs	r0, #7
 800754c:	f002 fc06 	bl	8009d5c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8007550:	2200      	movs	r2, #0
 8007552:	2105      	movs	r1, #5
 8007554:	2009      	movs	r0, #9
 8007556:	f002 fbe5 	bl	8009d24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800755a:	2009      	movs	r0, #9
 800755c:	f002 fbfe 	bl	8009d5c <HAL_NVIC_EnableIRQ>

}
 8007560:	bf00      	nop
 8007562:	3728      	adds	r7, #40	; 0x28
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	40023800 	.word	0x40023800
 800756c:	40020400 	.word	0x40020400
 8007570:	40020800 	.word	0x40020800
 8007574:	40020c00 	.word	0x40020c00

08007578 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800757c:	4b12      	ldr	r3, [pc, #72]	; (80075c8 <MX_I2C1_Init+0x50>)
 800757e:	4a13      	ldr	r2, [pc, #76]	; (80075cc <MX_I2C1_Init+0x54>)
 8007580:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007582:	4b11      	ldr	r3, [pc, #68]	; (80075c8 <MX_I2C1_Init+0x50>)
 8007584:	4a12      	ldr	r2, [pc, #72]	; (80075d0 <MX_I2C1_Init+0x58>)
 8007586:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007588:	4b0f      	ldr	r3, [pc, #60]	; (80075c8 <MX_I2C1_Init+0x50>)
 800758a:	2200      	movs	r2, #0
 800758c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800758e:	4b0e      	ldr	r3, [pc, #56]	; (80075c8 <MX_I2C1_Init+0x50>)
 8007590:	2200      	movs	r2, #0
 8007592:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007594:	4b0c      	ldr	r3, [pc, #48]	; (80075c8 <MX_I2C1_Init+0x50>)
 8007596:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800759a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800759c:	4b0a      	ldr	r3, [pc, #40]	; (80075c8 <MX_I2C1_Init+0x50>)
 800759e:	2200      	movs	r2, #0
 80075a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80075a2:	4b09      	ldr	r3, [pc, #36]	; (80075c8 <MX_I2C1_Init+0x50>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80075a8:	4b07      	ldr	r3, [pc, #28]	; (80075c8 <MX_I2C1_Init+0x50>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80075ae:	4b06      	ldr	r3, [pc, #24]	; (80075c8 <MX_I2C1_Init+0x50>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80075b4:	4804      	ldr	r0, [pc, #16]	; (80075c8 <MX_I2C1_Init+0x50>)
 80075b6:	f003 f939 	bl	800a82c <HAL_I2C_Init>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d001      	beq.n	80075c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80075c0:	f000 f900 	bl	80077c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80075c4:	bf00      	nop
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	20001078 	.word	0x20001078
 80075cc:	40005400 	.word	0x40005400
 80075d0:	000186a0 	.word	0x000186a0

080075d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b08a      	sub	sp, #40	; 0x28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075dc:	f107 0314 	add.w	r3, r7, #20
 80075e0:	2200      	movs	r2, #0
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	605a      	str	r2, [r3, #4]
 80075e6:	609a      	str	r2, [r3, #8]
 80075e8:	60da      	str	r2, [r3, #12]
 80075ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a19      	ldr	r2, [pc, #100]	; (8007658 <HAL_I2C_MspInit+0x84>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d12c      	bne.n	8007650 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075f6:	2300      	movs	r3, #0
 80075f8:	613b      	str	r3, [r7, #16]
 80075fa:	4b18      	ldr	r3, [pc, #96]	; (800765c <HAL_I2C_MspInit+0x88>)
 80075fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fe:	4a17      	ldr	r2, [pc, #92]	; (800765c <HAL_I2C_MspInit+0x88>)
 8007600:	f043 0302 	orr.w	r3, r3, #2
 8007604:	6313      	str	r3, [r2, #48]	; 0x30
 8007606:	4b15      	ldr	r3, [pc, #84]	; (800765c <HAL_I2C_MspInit+0x88>)
 8007608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760a:	f003 0302 	and.w	r3, r3, #2
 800760e:	613b      	str	r3, [r7, #16]
 8007610:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_IMU_Pin|I2C_SDA_IMU_Pin;
 8007612:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007618:	2312      	movs	r3, #18
 800761a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800761c:	2301      	movs	r3, #1
 800761e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007620:	2303      	movs	r3, #3
 8007622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007624:	2304      	movs	r3, #4
 8007626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007628:	f107 0314 	add.w	r3, r7, #20
 800762c:	4619      	mov	r1, r3
 800762e:	480c      	ldr	r0, [pc, #48]	; (8007660 <HAL_I2C_MspInit+0x8c>)
 8007630:	f002 ff2e 	bl	800a490 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007634:	2300      	movs	r3, #0
 8007636:	60fb      	str	r3, [r7, #12]
 8007638:	4b08      	ldr	r3, [pc, #32]	; (800765c <HAL_I2C_MspInit+0x88>)
 800763a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763c:	4a07      	ldr	r2, [pc, #28]	; (800765c <HAL_I2C_MspInit+0x88>)
 800763e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007642:	6413      	str	r3, [r2, #64]	; 0x40
 8007644:	4b05      	ldr	r3, [pc, #20]	; (800765c <HAL_I2C_MspInit+0x88>)
 8007646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800764c:	60fb      	str	r3, [r7, #12]
 800764e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8007650:	bf00      	nop
 8007652:	3728      	adds	r7, #40	; 0x28
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	40005400 	.word	0x40005400
 800765c:	40023800 	.word	0x40023800
 8007660:	40020400 	.word	0x40020400

08007664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007668:	f000 ffc8 	bl	80085fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800766c:	f000 f82c 	bl	80076c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007670:	f7ff fec2 	bl	80073f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8007674:	f7ff fe24 	bl	80072c0 <MX_DMA_Init>
  MX_ADC1_Init();
 8007678:	f7ff fa88 	bl	8006b8c <MX_ADC1_Init>
  MX_CAN1_Init();
 800767c:	f7ff fcae 	bl	8006fdc <MX_CAN1_Init>
  MX_CAN2_Init();
 8007680:	f7ff fce2 	bl	8007048 <MX_CAN2_Init>
  MX_CRC_Init();
 8007684:	f7ff fde6 	bl	8007254 <MX_CRC_Init>
  MX_RNG_Init();
 8007688:	f000 f8a2 	bl	80077d0 <MX_RNG_Init>
  MX_USART2_UART_Init();
 800768c:	f000 fe7e 	bl	800838c <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8007690:	f000 fc0c 	bl	8007eac <MX_TIM4_Init>
  MX_ADC2_Init();
 8007694:	f7ff faf6 	bl	8006c84 <MX_ADC2_Init>
  MX_I2C1_Init();
 8007698:	f7ff ff6e 	bl	8007578 <MX_I2C1_Init>
  MX_SPI2_Init();
 800769c:	f000 f8ce 	bl	800783c <MX_SPI2_Init>
  MX_TIM5_Init();
 80076a0:	f000 fc90 	bl	8007fc4 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80076a4:	f000 fe48 	bl	8008338 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 80076a8:	f000 fd1a 	bl	80080e0 <MX_TIM14_Init>
  MX_TIM2_Init();
 80076ac:	f000 fb62 	bl	8007d74 <MX_TIM2_Init>
  MX_TIM9_Init();
 80076b0:	f000 fcdc 	bl	800806c <MX_TIM9_Init>
  MX_TIM3_Init();
 80076b4:	f000 fbac 	bl	8007e10 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80076b8:	f007 f8d2 	bl	800e860 <osKernelInitialize>
  MX_FREERTOS_Init();
 80076bc:	f7ff fe5a 	bl	8007374 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80076c0:	f007 f8f2 	bl	800e8a8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80076c4:	e7fe      	b.n	80076c4 <main+0x60>
	...

080076c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	b094      	sub	sp, #80	; 0x50
 80076cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80076ce:	f107 0320 	add.w	r3, r7, #32
 80076d2:	2230      	movs	r2, #48	; 0x30
 80076d4:	2100      	movs	r1, #0
 80076d6:	4618      	mov	r0, r3
 80076d8:	f00b ffae 	bl	8013638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80076dc:	f107 030c 	add.w	r3, r7, #12
 80076e0:	2200      	movs	r2, #0
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	605a      	str	r2, [r3, #4]
 80076e6:	609a      	str	r2, [r3, #8]
 80076e8:	60da      	str	r2, [r3, #12]
 80076ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80076ec:	2300      	movs	r3, #0
 80076ee:	60bb      	str	r3, [r7, #8]
 80076f0:	4b28      	ldr	r3, [pc, #160]	; (8007794 <SystemClock_Config+0xcc>)
 80076f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f4:	4a27      	ldr	r2, [pc, #156]	; (8007794 <SystemClock_Config+0xcc>)
 80076f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076fa:	6413      	str	r3, [r2, #64]	; 0x40
 80076fc:	4b25      	ldr	r3, [pc, #148]	; (8007794 <SystemClock_Config+0xcc>)
 80076fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007704:	60bb      	str	r3, [r7, #8]
 8007706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007708:	2300      	movs	r3, #0
 800770a:	607b      	str	r3, [r7, #4]
 800770c:	4b22      	ldr	r3, [pc, #136]	; (8007798 <SystemClock_Config+0xd0>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a21      	ldr	r2, [pc, #132]	; (8007798 <SystemClock_Config+0xd0>)
 8007712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007716:	6013      	str	r3, [r2, #0]
 8007718:	4b1f      	ldr	r3, [pc, #124]	; (8007798 <SystemClock_Config+0xd0>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007720:	607b      	str	r3, [r7, #4]
 8007722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007724:	2301      	movs	r3, #1
 8007726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007728:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800772c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800772e:	2302      	movs	r3, #2
 8007730:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007732:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007736:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007738:	2308      	movs	r3, #8
 800773a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800773c:	23a8      	movs	r3, #168	; 0xa8
 800773e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007740:	2302      	movs	r3, #2
 8007742:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007744:	2307      	movs	r3, #7
 8007746:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007748:	f107 0320 	add.w	r3, r7, #32
 800774c:	4618      	mov	r0, r3
 800774e:	f003 f9b1 	bl	800aab4 <HAL_RCC_OscConfig>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007758:	f000 f834 	bl	80077c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800775c:	230f      	movs	r3, #15
 800775e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007760:	2302      	movs	r3, #2
 8007762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007764:	2300      	movs	r3, #0
 8007766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007768:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800776c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800776e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007774:	f107 030c 	add.w	r3, r7, #12
 8007778:	2105      	movs	r1, #5
 800777a:	4618      	mov	r0, r3
 800777c:	f003 fc12 	bl	800afa4 <HAL_RCC_ClockConfig>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8007786:	f000 f81d 	bl	80077c4 <Error_Handler>
  }
}
 800778a:	bf00      	nop
 800778c:	3750      	adds	r7, #80	; 0x50
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
 8007792:	bf00      	nop
 8007794:	40023800 	.word	0x40023800
 8007798:	40007000 	.word	0x40007000

0800779c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b082      	sub	sp, #8
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a05      	ldr	r2, [pc, #20]	; (80077c0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d101      	bne.n	80077b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80077ae:	f000 ff47 	bl	8008640 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  PeriodElapsedCallback(htim);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f005 fb49 	bl	800ce4a <PeriodElapsedCallback>

  /* USER CODE END Callback 1 */
}
 80077b8:	bf00      	nop
 80077ba:	3708      	adds	r7, #8
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	40010000 	.word	0x40010000

080077c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80077c4:	b480      	push	{r7}
 80077c6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80077c8:	b672      	cpsid	i
}
 80077ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80077cc:	e7fe      	b.n	80077cc <Error_Handler+0x8>
	...

080077d0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80077d4:	4b06      	ldr	r3, [pc, #24]	; (80077f0 <MX_RNG_Init+0x20>)
 80077d6:	4a07      	ldr	r2, [pc, #28]	; (80077f4 <MX_RNG_Init+0x24>)
 80077d8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80077da:	4805      	ldr	r0, [pc, #20]	; (80077f0 <MX_RNG_Init+0x20>)
 80077dc:	f003 fe32 	bl	800b444 <HAL_RNG_Init>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80077e6:	f7ff ffed 	bl	80077c4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80077ea:	bf00      	nop
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	200010cc 	.word	0x200010cc
 80077f4:	50060800 	.word	0x50060800

080077f8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a0b      	ldr	r2, [pc, #44]	; (8007834 <HAL_RNG_MspInit+0x3c>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d10d      	bne.n	8007826 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800780a:	2300      	movs	r3, #0
 800780c:	60fb      	str	r3, [r7, #12]
 800780e:	4b0a      	ldr	r3, [pc, #40]	; (8007838 <HAL_RNG_MspInit+0x40>)
 8007810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007812:	4a09      	ldr	r2, [pc, #36]	; (8007838 <HAL_RNG_MspInit+0x40>)
 8007814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007818:	6353      	str	r3, [r2, #52]	; 0x34
 800781a:	4b07      	ldr	r3, [pc, #28]	; (8007838 <HAL_RNG_MspInit+0x40>)
 800781c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800781e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8007826:	bf00      	nop
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	50060800 	.word	0x50060800
 8007838:	40023800 	.word	0x40023800

0800783c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8007840:	4b17      	ldr	r3, [pc, #92]	; (80078a0 <MX_SPI2_Init+0x64>)
 8007842:	4a18      	ldr	r2, [pc, #96]	; (80078a4 <MX_SPI2_Init+0x68>)
 8007844:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007846:	4b16      	ldr	r3, [pc, #88]	; (80078a0 <MX_SPI2_Init+0x64>)
 8007848:	f44f 7282 	mov.w	r2, #260	; 0x104
 800784c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800784e:	4b14      	ldr	r3, [pc, #80]	; (80078a0 <MX_SPI2_Init+0x64>)
 8007850:	2200      	movs	r2, #0
 8007852:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007854:	4b12      	ldr	r3, [pc, #72]	; (80078a0 <MX_SPI2_Init+0x64>)
 8007856:	2200      	movs	r2, #0
 8007858:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800785a:	4b11      	ldr	r3, [pc, #68]	; (80078a0 <MX_SPI2_Init+0x64>)
 800785c:	2200      	movs	r2, #0
 800785e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007860:	4b0f      	ldr	r3, [pc, #60]	; (80078a0 <MX_SPI2_Init+0x64>)
 8007862:	2200      	movs	r2, #0
 8007864:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007866:	4b0e      	ldr	r3, [pc, #56]	; (80078a0 <MX_SPI2_Init+0x64>)
 8007868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800786c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800786e:	4b0c      	ldr	r3, [pc, #48]	; (80078a0 <MX_SPI2_Init+0x64>)
 8007870:	2200      	movs	r2, #0
 8007872:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007874:	4b0a      	ldr	r3, [pc, #40]	; (80078a0 <MX_SPI2_Init+0x64>)
 8007876:	2200      	movs	r2, #0
 8007878:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800787a:	4b09      	ldr	r3, [pc, #36]	; (80078a0 <MX_SPI2_Init+0x64>)
 800787c:	2200      	movs	r2, #0
 800787e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007880:	4b07      	ldr	r3, [pc, #28]	; (80078a0 <MX_SPI2_Init+0x64>)
 8007882:	2200      	movs	r2, #0
 8007884:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007886:	4b06      	ldr	r3, [pc, #24]	; (80078a0 <MX_SPI2_Init+0x64>)
 8007888:	220a      	movs	r2, #10
 800788a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800788c:	4804      	ldr	r0, [pc, #16]	; (80078a0 <MX_SPI2_Init+0x64>)
 800788e:	f003 fe59 	bl	800b544 <HAL_SPI_Init>
 8007892:	4603      	mov	r3, r0
 8007894:	2b00      	cmp	r3, #0
 8007896:	d001      	beq.n	800789c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8007898:	f7ff ff94 	bl	80077c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800789c:	bf00      	nop
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	200010dc 	.word	0x200010dc
 80078a4:	40003800 	.word	0x40003800

080078a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b08a      	sub	sp, #40	; 0x28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80078b0:	f107 0314 	add.w	r3, r7, #20
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]
 80078b8:	605a      	str	r2, [r3, #4]
 80078ba:	609a      	str	r2, [r3, #8]
 80078bc:	60da      	str	r2, [r3, #12]
 80078be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a19      	ldr	r2, [pc, #100]	; (800792c <HAL_SPI_MspInit+0x84>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d12c      	bne.n	8007924 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80078ca:	2300      	movs	r3, #0
 80078cc:	613b      	str	r3, [r7, #16]
 80078ce:	4b18      	ldr	r3, [pc, #96]	; (8007930 <HAL_SPI_MspInit+0x88>)
 80078d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d2:	4a17      	ldr	r2, [pc, #92]	; (8007930 <HAL_SPI_MspInit+0x88>)
 80078d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078d8:	6413      	str	r3, [r2, #64]	; 0x40
 80078da:	4b15      	ldr	r3, [pc, #84]	; (8007930 <HAL_SPI_MspInit+0x88>)
 80078dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078e2:	613b      	str	r3, [r7, #16]
 80078e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80078e6:	2300      	movs	r3, #0
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	4b11      	ldr	r3, [pc, #68]	; (8007930 <HAL_SPI_MspInit+0x88>)
 80078ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ee:	4a10      	ldr	r2, [pc, #64]	; (8007930 <HAL_SPI_MspInit+0x88>)
 80078f0:	f043 0302 	orr.w	r3, r3, #2
 80078f4:	6313      	str	r3, [r2, #48]	; 0x30
 80078f6:	4b0e      	ldr	r3, [pc, #56]	; (8007930 <HAL_SPI_MspInit+0x88>)
 80078f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fa:	f003 0302 	and.w	r3, r3, #2
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007902:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007906:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007908:	2302      	movs	r3, #2
 800790a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800790c:	2300      	movs	r3, #0
 800790e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007910:	2303      	movs	r3, #3
 8007912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007914:	2305      	movs	r3, #5
 8007916:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007918:	f107 0314 	add.w	r3, r7, #20
 800791c:	4619      	mov	r1, r3
 800791e:	4805      	ldr	r0, [pc, #20]	; (8007934 <HAL_SPI_MspInit+0x8c>)
 8007920:	f002 fdb6 	bl	800a490 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8007924:	bf00      	nop
 8007926:	3728      	adds	r7, #40	; 0x28
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	40003800 	.word	0x40003800
 8007930:	40023800 	.word	0x40023800
 8007934:	40020400 	.word	0x40020400

08007938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800793e:	2300      	movs	r3, #0
 8007940:	607b      	str	r3, [r7, #4]
 8007942:	4b12      	ldr	r3, [pc, #72]	; (800798c <HAL_MspInit+0x54>)
 8007944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007946:	4a11      	ldr	r2, [pc, #68]	; (800798c <HAL_MspInit+0x54>)
 8007948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800794c:	6453      	str	r3, [r2, #68]	; 0x44
 800794e:	4b0f      	ldr	r3, [pc, #60]	; (800798c <HAL_MspInit+0x54>)
 8007950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007956:	607b      	str	r3, [r7, #4]
 8007958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800795a:	2300      	movs	r3, #0
 800795c:	603b      	str	r3, [r7, #0]
 800795e:	4b0b      	ldr	r3, [pc, #44]	; (800798c <HAL_MspInit+0x54>)
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	4a0a      	ldr	r2, [pc, #40]	; (800798c <HAL_MspInit+0x54>)
 8007964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007968:	6413      	str	r3, [r2, #64]	; 0x40
 800796a:	4b08      	ldr	r3, [pc, #32]	; (800798c <HAL_MspInit+0x54>)
 800796c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007972:	603b      	str	r3, [r7, #0]
 8007974:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007976:	2200      	movs	r2, #0
 8007978:	210f      	movs	r1, #15
 800797a:	f06f 0001 	mvn.w	r0, #1
 800797e:	f002 f9d1 	bl	8009d24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007982:	bf00      	nop
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	40023800 	.word	0x40023800

08007990 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b08c      	sub	sp, #48	; 0x30
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8007998:	2300      	movs	r3, #0
 800799a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 800799c:	2300      	movs	r3, #0
 800799e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80079a0:	2300      	movs	r3, #0
 80079a2:	60bb      	str	r3, [r7, #8]
 80079a4:	4b2f      	ldr	r3, [pc, #188]	; (8007a64 <HAL_InitTick+0xd4>)
 80079a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a8:	4a2e      	ldr	r2, [pc, #184]	; (8007a64 <HAL_InitTick+0xd4>)
 80079aa:	f043 0301 	orr.w	r3, r3, #1
 80079ae:	6453      	str	r3, [r2, #68]	; 0x44
 80079b0:	4b2c      	ldr	r3, [pc, #176]	; (8007a64 <HAL_InitTick+0xd4>)
 80079b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	60bb      	str	r3, [r7, #8]
 80079ba:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80079bc:	f107 020c 	add.w	r2, r7, #12
 80079c0:	f107 0310 	add.w	r3, r7, #16
 80079c4:	4611      	mov	r1, r2
 80079c6:	4618      	mov	r0, r3
 80079c8:	f003 fd0a 	bl	800b3e0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80079cc:	f003 fcf4 	bl	800b3b8 <HAL_RCC_GetPCLK2Freq>
 80079d0:	4603      	mov	r3, r0
 80079d2:	005b      	lsls	r3, r3, #1
 80079d4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80079d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d8:	4a23      	ldr	r2, [pc, #140]	; (8007a68 <HAL_InitTick+0xd8>)
 80079da:	fba2 2303 	umull	r2, r3, r2, r3
 80079de:	0c9b      	lsrs	r3, r3, #18
 80079e0:	3b01      	subs	r3, #1
 80079e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80079e4:	4b21      	ldr	r3, [pc, #132]	; (8007a6c <HAL_InitTick+0xdc>)
 80079e6:	4a22      	ldr	r2, [pc, #136]	; (8007a70 <HAL_InitTick+0xe0>)
 80079e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80079ea:	4b20      	ldr	r3, [pc, #128]	; (8007a6c <HAL_InitTick+0xdc>)
 80079ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80079f0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80079f2:	4a1e      	ldr	r2, [pc, #120]	; (8007a6c <HAL_InitTick+0xdc>)
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80079f8:	4b1c      	ldr	r3, [pc, #112]	; (8007a6c <HAL_InitTick+0xdc>)
 80079fa:	2200      	movs	r2, #0
 80079fc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80079fe:	4b1b      	ldr	r3, [pc, #108]	; (8007a6c <HAL_InitTick+0xdc>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a04:	4b19      	ldr	r3, [pc, #100]	; (8007a6c <HAL_InitTick+0xdc>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8007a0a:	4818      	ldr	r0, [pc, #96]	; (8007a6c <HAL_InitTick+0xdc>)
 8007a0c:	f003 fe23 	bl	800b656 <HAL_TIM_Base_Init>
 8007a10:	4603      	mov	r3, r0
 8007a12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8007a16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d11b      	bne.n	8007a56 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8007a1e:	4813      	ldr	r0, [pc, #76]	; (8007a6c <HAL_InitTick+0xdc>)
 8007a20:	f003 fe68 	bl	800b6f4 <HAL_TIM_Base_Start_IT>
 8007a24:	4603      	mov	r3, r0
 8007a26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8007a2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d111      	bne.n	8007a56 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8007a32:	2019      	movs	r0, #25
 8007a34:	f002 f992 	bl	8009d5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2b0f      	cmp	r3, #15
 8007a3c:	d808      	bhi.n	8007a50 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8007a3e:	2200      	movs	r2, #0
 8007a40:	6879      	ldr	r1, [r7, #4]
 8007a42:	2019      	movs	r0, #25
 8007a44:	f002 f96e 	bl	8009d24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007a48:	4a0a      	ldr	r2, [pc, #40]	; (8007a74 <HAL_InitTick+0xe4>)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6013      	str	r3, [r2, #0]
 8007a4e:	e002      	b.n	8007a56 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8007a56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3730      	adds	r7, #48	; 0x30
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	40023800 	.word	0x40023800
 8007a68:	431bde83 	.word	0x431bde83
 8007a6c:	20001134 	.word	0x20001134
 8007a70:	40010000 	.word	0x40010000
 8007a74:	20000014 	.word	0x20000014

08007a78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007a78:	b480      	push	{r7}
 8007a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007a7c:	e7fe      	b.n	8007a7c <NMI_Handler+0x4>

08007a7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007a82:	e7fe      	b.n	8007a82 <HardFault_Handler+0x4>

08007a84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007a84:	b480      	push	{r7}
 8007a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007a88:	e7fe      	b.n	8007a88 <MemManage_Handler+0x4>

08007a8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007a8e:	e7fe      	b.n	8007a8e <BusFault_Handler+0x4>

08007a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007a94:	e7fe      	b.n	8007a94 <UsageFault_Handler+0x4>

08007a96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007a96:	b480      	push	{r7}
 8007a98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007a9a:	bf00      	nop
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr

08007aa4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIN1_Pin);
 8007aa8:	2002      	movs	r0, #2
 8007aaa:	f002 fea7 	bl	800a7fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007aae:	bf00      	nop
 8007ab0:	bd80      	pop	{r7, pc}

08007ab2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8007ab2:	b580      	push	{r7, lr}
 8007ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIN2_Pin);
 8007ab6:	2008      	movs	r0, #8
 8007ab8:	f002 fea0 	bl	800a7fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8007abc:	bf00      	nop
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007ac4:	4802      	ldr	r0, [pc, #8]	; (8007ad0 <CAN1_TX_IRQHandler+0x10>)
 8007ac6:	f001 fe41 	bl	800974c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8007aca:	bf00      	nop
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20000d4c 	.word	0x20000d4c

08007ad4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007ad8:	4802      	ldr	r0, [pc, #8]	; (8007ae4 <CAN1_RX0_IRQHandler+0x10>)
 8007ada:	f001 fe37 	bl	800974c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8007ade:	bf00      	nop
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20000d4c 	.word	0x20000d4c

08007ae8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8007aec:	4802      	ldr	r0, [pc, #8]	; (8007af8 <CAN1_RX1_IRQHandler+0x10>)
 8007aee:	f001 fe2d 	bl	800974c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8007af2:	bf00      	nop
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	20000d4c 	.word	0x20000d4c

08007afc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8007b00:	4802      	ldr	r0, [pc, #8]	; (8007b0c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8007b02:	f003 ff66 	bl	800b9d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8007b06:	bf00      	nop
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	200012a0 	.word	0x200012a0

08007b10 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007b14:	4802      	ldr	r0, [pc, #8]	; (8007b20 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8007b16:	f003 ff5c 	bl	800b9d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8007b1a:	bf00      	nop
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	20001134 	.word	0x20001134

08007b24 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007b28:	4802      	ldr	r0, [pc, #8]	; (8007b34 <TIM3_IRQHandler+0x10>)
 8007b2a:	f003 ff52 	bl	800b9d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007b2e:	bf00      	nop
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	200011c8 	.word	0x200011c8

08007b38 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007b3c:	4802      	ldr	r0, [pc, #8]	; (8007b48 <DMA2_Stream0_IRQHandler+0x10>)
 8007b3e:	f002 fa3d 	bl	8009fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8007b42:	bf00      	nop
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	20000c8c 	.word	0x20000c8c

08007b4c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007b50:	4802      	ldr	r0, [pc, #8]	; (8007b5c <DMA2_Stream2_IRQHandler+0x10>)
 8007b52:	f002 fa33 	bl	8009fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007b56:	bf00      	nop
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop
 8007b5c:	20000cec 	.word	0x20000cec

08007b60 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8007b64:	4802      	ldr	r0, [pc, #8]	; (8007b70 <CAN2_TX_IRQHandler+0x10>)
 8007b66:	f001 fdf1 	bl	800974c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8007b6a:	bf00      	nop
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	20000d74 	.word	0x20000d74

08007b74 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8007b78:	4802      	ldr	r0, [pc, #8]	; (8007b84 <CAN2_RX0_IRQHandler+0x10>)
 8007b7a:	f001 fde7 	bl	800974c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8007b7e:	bf00      	nop
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	20000d74 	.word	0x20000d74

08007b88 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8007b8c:	4802      	ldr	r0, [pc, #8]	; (8007b98 <CAN2_RX1_IRQHandler+0x10>)
 8007b8e:	f001 fddd 	bl	800974c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8007b92:	bf00      	nop
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	20000d74 	.word	0x20000d74

08007b9c <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8007ba0:	4802      	ldr	r0, [pc, #8]	; (8007bac <DMA2_Stream5_IRQHandler+0x10>)
 8007ba2:	f002 fa0b 	bl	8009fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8007ba6:	bf00      	nop
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	20001418 	.word	0x20001418

08007bb0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8007bb4:	4802      	ldr	r0, [pc, #8]	; (8007bc0 <DMA2_Stream7_IRQHandler+0x10>)
 8007bb6:	f002 fa01 	bl	8009fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8007bba:	bf00      	nop
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	200013b8 	.word	0x200013b8

08007bc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	af00      	add	r7, sp, #0
  return 1;
 8007bc8:	2301      	movs	r3, #1
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <_kill>:

int _kill(int pid, int sig)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007bde:	f00b fbe9 	bl	80133b4 <__errno>
 8007be2:	4603      	mov	r3, r0
 8007be4:	2216      	movs	r2, #22
 8007be6:	601a      	str	r2, [r3, #0]
  return -1;
 8007be8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <_exit>:

void _exit (int status)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff ffe7 	bl	8007bd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007c06:	e7fe      	b.n	8007c06 <_exit+0x12>

08007c08 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	60b9      	str	r1, [r7, #8]
 8007c12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c14:	2300      	movs	r3, #0
 8007c16:	617b      	str	r3, [r7, #20]
 8007c18:	e00a      	b.n	8007c30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007c1a:	f3af 8000 	nop.w
 8007c1e:	4601      	mov	r1, r0
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	1c5a      	adds	r2, r3, #1
 8007c24:	60ba      	str	r2, [r7, #8]
 8007c26:	b2ca      	uxtb	r2, r1
 8007c28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	617b      	str	r3, [r7, #20]
 8007c30:	697a      	ldr	r2, [r7, #20]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	dbf0      	blt.n	8007c1a <_read+0x12>
  }

  return len;
 8007c38:	687b      	ldr	r3, [r7, #4]
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3718      	adds	r7, #24
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007c42:	b580      	push	{r7, lr}
 8007c44:	b086      	sub	sp, #24
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	60f8      	str	r0, [r7, #12]
 8007c4a:	60b9      	str	r1, [r7, #8]
 8007c4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c4e:	2300      	movs	r3, #0
 8007c50:	617b      	str	r3, [r7, #20]
 8007c52:	e009      	b.n	8007c68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	1c5a      	adds	r2, r3, #1
 8007c58:	60ba      	str	r2, [r7, #8]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	3301      	adds	r3, #1
 8007c66:	617b      	str	r3, [r7, #20]
 8007c68:	697a      	ldr	r2, [r7, #20]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	dbf1      	blt.n	8007c54 <_write+0x12>
  }
  return len;
 8007c70:	687b      	ldr	r3, [r7, #4]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3718      	adds	r7, #24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <_close>:

int _close(int file)
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b083      	sub	sp, #12
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007c82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	370c      	adds	r7, #12
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007c92:	b480      	push	{r7}
 8007c94:	b083      	sub	sp, #12
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
 8007c9a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007ca2:	605a      	str	r2, [r3, #4]
  return 0;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	370c      	adds	r7, #12
 8007caa:	46bd      	mov	sp, r7
 8007cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb0:	4770      	bx	lr

08007cb2 <_isatty>:

int _isatty(int file)
{
 8007cb2:	b480      	push	{r7}
 8007cb4:	b083      	sub	sp, #12
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007cba:	2301      	movs	r3, #1
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3714      	adds	r7, #20
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
	...

08007ce4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007cec:	4a14      	ldr	r2, [pc, #80]	; (8007d40 <_sbrk+0x5c>)
 8007cee:	4b15      	ldr	r3, [pc, #84]	; (8007d44 <_sbrk+0x60>)
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007cf8:	4b13      	ldr	r3, [pc, #76]	; (8007d48 <_sbrk+0x64>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d102      	bne.n	8007d06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007d00:	4b11      	ldr	r3, [pc, #68]	; (8007d48 <_sbrk+0x64>)
 8007d02:	4a12      	ldr	r2, [pc, #72]	; (8007d4c <_sbrk+0x68>)
 8007d04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007d06:	4b10      	ldr	r3, [pc, #64]	; (8007d48 <_sbrk+0x64>)
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d207      	bcs.n	8007d24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007d14:	f00b fb4e 	bl	80133b4 <__errno>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	220c      	movs	r2, #12
 8007d1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8007d22:	e009      	b.n	8007d38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007d24:	4b08      	ldr	r3, [pc, #32]	; (8007d48 <_sbrk+0x64>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007d2a:	4b07      	ldr	r3, [pc, #28]	; (8007d48 <_sbrk+0x64>)
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4413      	add	r3, r2
 8007d32:	4a05      	ldr	r2, [pc, #20]	; (8007d48 <_sbrk+0x64>)
 8007d34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007d36:	68fb      	ldr	r3, [r7, #12]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3718      	adds	r7, #24
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}
 8007d40:	20020000 	.word	0x20020000
 8007d44:	00000800 	.word	0x00000800
 8007d48:	2000117c 	.word	0x2000117c
 8007d4c:	2000a448 	.word	0x2000a448

08007d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007d50:	b480      	push	{r7}
 8007d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007d54:	4b06      	ldr	r3, [pc, #24]	; (8007d70 <SystemInit+0x20>)
 8007d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d5a:	4a05      	ldr	r2, [pc, #20]	; (8007d70 <SystemInit+0x20>)
 8007d5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007d64:	bf00      	nop
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	e000ed00 	.word	0xe000ed00

08007d74 <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b086      	sub	sp, #24
 8007d78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007d7a:	f107 0308 	add.w	r3, r7, #8
 8007d7e:	2200      	movs	r2, #0
 8007d80:	601a      	str	r2, [r3, #0]
 8007d82:	605a      	str	r2, [r3, #4]
 8007d84:	609a      	str	r2, [r3, #8]
 8007d86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007d88:	463b      	mov	r3, r7
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	601a      	str	r2, [r3, #0]
 8007d8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007d90:	4b1e      	ldr	r3, [pc, #120]	; (8007e0c <MX_TIM2_Init+0x98>)
 8007d92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007d96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8007d98:	4b1c      	ldr	r3, [pc, #112]	; (8007e0c <MX_TIM2_Init+0x98>)
 8007d9a:	f240 3247 	movw	r2, #839	; 0x347
 8007d9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007da0:	4b1a      	ldr	r3, [pc, #104]	; (8007e0c <MX_TIM2_Init+0x98>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8007da6:	4b19      	ldr	r3, [pc, #100]	; (8007e0c <MX_TIM2_Init+0x98>)
 8007da8:	f04f 32ff 	mov.w	r2, #4294967295
 8007dac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007dae:	4b17      	ldr	r3, [pc, #92]	; (8007e0c <MX_TIM2_Init+0x98>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007db4:	4b15      	ldr	r3, [pc, #84]	; (8007e0c <MX_TIM2_Init+0x98>)
 8007db6:	2200      	movs	r2, #0
 8007db8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007dba:	4814      	ldr	r0, [pc, #80]	; (8007e0c <MX_TIM2_Init+0x98>)
 8007dbc:	f003 fc4b 	bl	800b656 <HAL_TIM_Base_Init>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8007dc6:	f7ff fcfd 	bl	80077c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007dce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007dd0:	f107 0308 	add.w	r3, r7, #8
 8007dd4:	4619      	mov	r1, r3
 8007dd6:	480d      	ldr	r0, [pc, #52]	; (8007e0c <MX_TIM2_Init+0x98>)
 8007dd8:	f003 ffc6 	bl	800bd68 <HAL_TIM_ConfigClockSource>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8007de2:	f7ff fcef 	bl	80077c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007de6:	2300      	movs	r3, #0
 8007de8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007dea:	2300      	movs	r3, #0
 8007dec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007dee:	463b      	mov	r3, r7
 8007df0:	4619      	mov	r1, r3
 8007df2:	4806      	ldr	r0, [pc, #24]	; (8007e0c <MX_TIM2_Init+0x98>)
 8007df4:	f004 fb92 	bl	800c51c <HAL_TIMEx_MasterConfigSynchronization>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8007dfe:	f7ff fce1 	bl	80077c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007e02:	bf00      	nop
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	20001180 	.word	0x20001180

08007e10 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007e16:	f107 0308 	add.w	r3, r7, #8
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	605a      	str	r2, [r3, #4]
 8007e20:	609a      	str	r2, [r3, #8]
 8007e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007e24:	463b      	mov	r3, r7
 8007e26:	2200      	movs	r2, #0
 8007e28:	601a      	str	r2, [r3, #0]
 8007e2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007e2c:	4b1d      	ldr	r3, [pc, #116]	; (8007ea4 <MX_TIM3_Init+0x94>)
 8007e2e:	4a1e      	ldr	r2, [pc, #120]	; (8007ea8 <MX_TIM3_Init+0x98>)
 8007e30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16800 - 1;
 8007e32:	4b1c      	ldr	r3, [pc, #112]	; (8007ea4 <MX_TIM3_Init+0x94>)
 8007e34:	f244 129f 	movw	r2, #16799	; 0x419f
 8007e38:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e3a:	4b1a      	ldr	r3, [pc, #104]	; (8007ea4 <MX_TIM3_Init+0x94>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8007e40:	4b18      	ldr	r3, [pc, #96]	; (8007ea4 <MX_TIM3_Init+0x94>)
 8007e42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e46:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e48:	4b16      	ldr	r3, [pc, #88]	; (8007ea4 <MX_TIM3_Init+0x94>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007e4e:	4b15      	ldr	r3, [pc, #84]	; (8007ea4 <MX_TIM3_Init+0x94>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007e54:	4813      	ldr	r0, [pc, #76]	; (8007ea4 <MX_TIM3_Init+0x94>)
 8007e56:	f003 fbfe 	bl	800b656 <HAL_TIM_Base_Init>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007e60:	f7ff fcb0 	bl	80077c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007e6a:	f107 0308 	add.w	r3, r7, #8
 8007e6e:	4619      	mov	r1, r3
 8007e70:	480c      	ldr	r0, [pc, #48]	; (8007ea4 <MX_TIM3_Init+0x94>)
 8007e72:	f003 ff79 	bl	800bd68 <HAL_TIM_ConfigClockSource>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d001      	beq.n	8007e80 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8007e7c:	f7ff fca2 	bl	80077c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007e80:	2300      	movs	r3, #0
 8007e82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e84:	2300      	movs	r3, #0
 8007e86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007e88:	463b      	mov	r3, r7
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	4805      	ldr	r0, [pc, #20]	; (8007ea4 <MX_TIM3_Init+0x94>)
 8007e8e:	f004 fb45 	bl	800c51c <HAL_TIMEx_MasterConfigSynchronization>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d001      	beq.n	8007e9c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8007e98:	f7ff fc94 	bl	80077c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8007e9c:	bf00      	nop
 8007e9e:	3718      	adds	r7, #24
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}
 8007ea4:	200011c8 	.word	0x200011c8
 8007ea8:	40000400 	.word	0x40000400

08007eac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b08e      	sub	sp, #56	; 0x38
 8007eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007eb2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	601a      	str	r2, [r3, #0]
 8007eba:	605a      	str	r2, [r3, #4]
 8007ebc:	609a      	str	r2, [r3, #8]
 8007ebe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ec0:	f107 0320 	add.w	r3, r7, #32
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	601a      	str	r2, [r3, #0]
 8007ec8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007eca:	1d3b      	adds	r3, r7, #4
 8007ecc:	2200      	movs	r2, #0
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	605a      	str	r2, [r3, #4]
 8007ed2:	609a      	str	r2, [r3, #8]
 8007ed4:	60da      	str	r2, [r3, #12]
 8007ed6:	611a      	str	r2, [r3, #16]
 8007ed8:	615a      	str	r2, [r3, #20]
 8007eda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007edc:	4b37      	ldr	r3, [pc, #220]	; (8007fbc <MX_TIM4_Init+0x110>)
 8007ede:	4a38      	ldr	r2, [pc, #224]	; (8007fc0 <MX_TIM4_Init+0x114>)
 8007ee0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000-1;
 8007ee2:	4b36      	ldr	r3, [pc, #216]	; (8007fbc <MX_TIM4_Init+0x110>)
 8007ee4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007ee8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007eea:	4b34      	ldr	r3, [pc, #208]	; (8007fbc <MX_TIM4_Init+0x110>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 8007ef0:	4b32      	ldr	r3, [pc, #200]	; (8007fbc <MX_TIM4_Init+0x110>)
 8007ef2:	22fe      	movs	r2, #254	; 0xfe
 8007ef4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ef6:	4b31      	ldr	r3, [pc, #196]	; (8007fbc <MX_TIM4_Init+0x110>)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007efc:	4b2f      	ldr	r3, [pc, #188]	; (8007fbc <MX_TIM4_Init+0x110>)
 8007efe:	2200      	movs	r2, #0
 8007f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007f02:	482e      	ldr	r0, [pc, #184]	; (8007fbc <MX_TIM4_Init+0x110>)
 8007f04:	f003 fba7 	bl	800b656 <HAL_TIM_Base_Init>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8007f0e:	f7ff fc59 	bl	80077c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007f12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8007f18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	4827      	ldr	r0, [pc, #156]	; (8007fbc <MX_TIM4_Init+0x110>)
 8007f20:	f003 ff22 	bl	800bd68 <HAL_TIM_ConfigClockSource>
 8007f24:	4603      	mov	r3, r0
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d001      	beq.n	8007f2e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8007f2a:	f7ff fc4b 	bl	80077c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8007f2e:	4823      	ldr	r0, [pc, #140]	; (8007fbc <MX_TIM4_Init+0x110>)
 8007f30:	f003 fc50 	bl	800b7d4 <HAL_TIM_PWM_Init>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8007f3a:	f7ff fc43 	bl	80077c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f42:	2300      	movs	r3, #0
 8007f44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007f46:	f107 0320 	add.w	r3, r7, #32
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	481b      	ldr	r0, [pc, #108]	; (8007fbc <MX_TIM4_Init+0x110>)
 8007f4e:	f004 fae5 	bl	800c51c <HAL_TIMEx_MasterConfigSynchronization>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8007f58:	f7ff fc34 	bl	80077c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007f5c:	2360      	movs	r3, #96	; 0x60
 8007f5e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007f64:	2300      	movs	r3, #0
 8007f66:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007f6c:	1d3b      	adds	r3, r7, #4
 8007f6e:	2200      	movs	r2, #0
 8007f70:	4619      	mov	r1, r3
 8007f72:	4812      	ldr	r0, [pc, #72]	; (8007fbc <MX_TIM4_Init+0x110>)
 8007f74:	f003 fe36 	bl	800bbe4 <HAL_TIM_PWM_ConfigChannel>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8007f7e:	f7ff fc21 	bl	80077c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007f82:	1d3b      	adds	r3, r7, #4
 8007f84:	2204      	movs	r2, #4
 8007f86:	4619      	mov	r1, r3
 8007f88:	480c      	ldr	r0, [pc, #48]	; (8007fbc <MX_TIM4_Init+0x110>)
 8007f8a:	f003 fe2b 	bl	800bbe4 <HAL_TIM_PWM_ConfigChannel>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d001      	beq.n	8007f98 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8007f94:	f7ff fc16 	bl	80077c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007f98:	1d3b      	adds	r3, r7, #4
 8007f9a:	2208      	movs	r2, #8
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	4807      	ldr	r0, [pc, #28]	; (8007fbc <MX_TIM4_Init+0x110>)
 8007fa0:	f003 fe20 	bl	800bbe4 <HAL_TIM_PWM_ConfigChannel>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d001      	beq.n	8007fae <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8007faa:	f7ff fc0b 	bl	80077c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8007fae:	4803      	ldr	r0, [pc, #12]	; (8007fbc <MX_TIM4_Init+0x110>)
 8007fb0:	f000 f988 	bl	80082c4 <HAL_TIM_MspPostInit>

}
 8007fb4:	bf00      	nop
 8007fb6:	3738      	adds	r7, #56	; 0x38
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	20001210 	.word	0x20001210
 8007fc0:	40000800 	.word	0x40000800

08007fc4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b08c      	sub	sp, #48	; 0x30
 8007fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8007fca:	f107 030c 	add.w	r3, r7, #12
 8007fce:	2224      	movs	r2, #36	; 0x24
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f00b fb30 	bl	8013638 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007fd8:	1d3b      	adds	r3, r7, #4
 8007fda:	2200      	movs	r2, #0
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8007fe0:	4b20      	ldr	r3, [pc, #128]	; (8008064 <MX_TIM5_Init+0xa0>)
 8007fe2:	4a21      	ldr	r2, [pc, #132]	; (8008068 <MX_TIM5_Init+0xa4>)
 8007fe4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8007fe6:	4b1f      	ldr	r3, [pc, #124]	; (8008064 <MX_TIM5_Init+0xa0>)
 8007fe8:	2200      	movs	r2, #0
 8007fea:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007fec:	4b1d      	ldr	r3, [pc, #116]	; (8008064 <MX_TIM5_Init+0xa0>)
 8007fee:	2200      	movs	r2, #0
 8007ff0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8007ff2:	4b1c      	ldr	r3, [pc, #112]	; (8008064 <MX_TIM5_Init+0xa0>)
 8007ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ff8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ffa:	4b1a      	ldr	r3, [pc, #104]	; (8008064 <MX_TIM5_Init+0xa0>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008000:	4b18      	ldr	r3, [pc, #96]	; (8008064 <MX_TIM5_Init+0xa0>)
 8008002:	2200      	movs	r2, #0
 8008004:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8008006:	2301      	movs	r3, #1
 8008008:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800800a:	2300      	movs	r3, #0
 800800c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800800e:	2301      	movs	r3, #1
 8008010:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8008012:	2300      	movs	r3, #0
 8008014:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8008016:	2300      	movs	r3, #0
 8008018:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800801a:	2300      	movs	r3, #0
 800801c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800801e:	2301      	movs	r3, #1
 8008020:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8008022:	2300      	movs	r3, #0
 8008024:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8008026:	2300      	movs	r3, #0
 8008028:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800802a:	f107 030c 	add.w	r3, r7, #12
 800802e:	4619      	mov	r1, r3
 8008030:	480c      	ldr	r0, [pc, #48]	; (8008064 <MX_TIM5_Init+0xa0>)
 8008032:	f003 fc28 	bl	800b886 <HAL_TIM_Encoder_Init>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800803c:	f7ff fbc2 	bl	80077c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008040:	2300      	movs	r3, #0
 8008042:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008044:	2300      	movs	r3, #0
 8008046:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8008048:	1d3b      	adds	r3, r7, #4
 800804a:	4619      	mov	r1, r3
 800804c:	4805      	ldr	r0, [pc, #20]	; (8008064 <MX_TIM5_Init+0xa0>)
 800804e:	f004 fa65 	bl	800c51c <HAL_TIMEx_MasterConfigSynchronization>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d001      	beq.n	800805c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8008058:	f7ff fbb4 	bl	80077c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800805c:	bf00      	nop
 800805e:	3730      	adds	r7, #48	; 0x30
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	20001258 	.word	0x20001258
 8008068:	40000c00 	.word	0x40000c00

0800806c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008072:	463b      	mov	r3, r7
 8008074:	2200      	movs	r2, #0
 8008076:	601a      	str	r2, [r3, #0]
 8008078:	605a      	str	r2, [r3, #4]
 800807a:	609a      	str	r2, [r3, #8]
 800807c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800807e:	4b16      	ldr	r3, [pc, #88]	; (80080d8 <MX_TIM9_Init+0x6c>)
 8008080:	4a16      	ldr	r2, [pc, #88]	; (80080dc <MX_TIM9_Init+0x70>)
 8008082:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 16800 - 1;
 8008084:	4b14      	ldr	r3, [pc, #80]	; (80080d8 <MX_TIM9_Init+0x6c>)
 8008086:	f244 129f 	movw	r2, #16799	; 0x419f
 800808a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800808c:	4b12      	ldr	r3, [pc, #72]	; (80080d8 <MX_TIM9_Init+0x6c>)
 800808e:	2200      	movs	r2, #0
 8008090:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8008092:	4b11      	ldr	r3, [pc, #68]	; (80080d8 <MX_TIM9_Init+0x6c>)
 8008094:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008098:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800809a:	4b0f      	ldr	r3, [pc, #60]	; (80080d8 <MX_TIM9_Init+0x6c>)
 800809c:	2200      	movs	r2, #0
 800809e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080a0:	4b0d      	ldr	r3, [pc, #52]	; (80080d8 <MX_TIM9_Init+0x6c>)
 80080a2:	2200      	movs	r2, #0
 80080a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80080a6:	480c      	ldr	r0, [pc, #48]	; (80080d8 <MX_TIM9_Init+0x6c>)
 80080a8:	f003 fad5 	bl	800b656 <HAL_TIM_Base_Init>
 80080ac:	4603      	mov	r3, r0
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 80080b2:	f7ff fb87 	bl	80077c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80080b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080ba:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80080bc:	463b      	mov	r3, r7
 80080be:	4619      	mov	r1, r3
 80080c0:	4805      	ldr	r0, [pc, #20]	; (80080d8 <MX_TIM9_Init+0x6c>)
 80080c2:	f003 fe51 	bl	800bd68 <HAL_TIM_ConfigClockSource>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d001      	beq.n	80080d0 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 80080cc:	f7ff fb7a 	bl	80077c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80080d0:	bf00      	nop
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	200012a0 	.word	0x200012a0
 80080dc:	40014000 	.word	0x40014000

080080e0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80080e4:	4b0e      	ldr	r3, [pc, #56]	; (8008120 <MX_TIM14_Init+0x40>)
 80080e6:	4a0f      	ldr	r2, [pc, #60]	; (8008124 <MX_TIM14_Init+0x44>)
 80080e8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 840-1;
 80080ea:	4b0d      	ldr	r3, [pc, #52]	; (8008120 <MX_TIM14_Init+0x40>)
 80080ec:	f240 3247 	movw	r2, #839	; 0x347
 80080f0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080f2:	4b0b      	ldr	r3, [pc, #44]	; (8008120 <MX_TIM14_Init+0x40>)
 80080f4:	2200      	movs	r2, #0
 80080f6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80080f8:	4b09      	ldr	r3, [pc, #36]	; (8008120 <MX_TIM14_Init+0x40>)
 80080fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80080fe:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008100:	4b07      	ldr	r3, [pc, #28]	; (8008120 <MX_TIM14_Init+0x40>)
 8008102:	2200      	movs	r2, #0
 8008104:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008106:	4b06      	ldr	r3, [pc, #24]	; (8008120 <MX_TIM14_Init+0x40>)
 8008108:	2200      	movs	r2, #0
 800810a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800810c:	4804      	ldr	r0, [pc, #16]	; (8008120 <MX_TIM14_Init+0x40>)
 800810e:	f003 faa2 	bl	800b656 <HAL_TIM_Base_Init>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d001      	beq.n	800811c <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8008118:	f7ff fb54 	bl	80077c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800811c:	bf00      	nop
 800811e:	bd80      	pop	{r7, pc}
 8008120:	200012e8 	.word	0x200012e8
 8008124:	40002000 	.word	0x40002000

08008128 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b088      	sub	sp, #32
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008138:	d10e      	bne.n	8008158 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800813a:	2300      	movs	r3, #0
 800813c:	61fb      	str	r3, [r7, #28]
 800813e:	4b38      	ldr	r3, [pc, #224]	; (8008220 <HAL_TIM_Base_MspInit+0xf8>)
 8008140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008142:	4a37      	ldr	r2, [pc, #220]	; (8008220 <HAL_TIM_Base_MspInit+0xf8>)
 8008144:	f043 0301 	orr.w	r3, r3, #1
 8008148:	6413      	str	r3, [r2, #64]	; 0x40
 800814a:	4b35      	ldr	r3, [pc, #212]	; (8008220 <HAL_TIM_Base_MspInit+0xf8>)
 800814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814e:	f003 0301 	and.w	r3, r3, #1
 8008152:	61fb      	str	r3, [r7, #28]
 8008154:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 8008156:	e05e      	b.n	8008216 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM3)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a31      	ldr	r2, [pc, #196]	; (8008224 <HAL_TIM_Base_MspInit+0xfc>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d116      	bne.n	8008190 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008162:	2300      	movs	r3, #0
 8008164:	61bb      	str	r3, [r7, #24]
 8008166:	4b2e      	ldr	r3, [pc, #184]	; (8008220 <HAL_TIM_Base_MspInit+0xf8>)
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	4a2d      	ldr	r2, [pc, #180]	; (8008220 <HAL_TIM_Base_MspInit+0xf8>)
 800816c:	f043 0302 	orr.w	r3, r3, #2
 8008170:	6413      	str	r3, [r2, #64]	; 0x40
 8008172:	4b2b      	ldr	r3, [pc, #172]	; (8008220 <HAL_TIM_Base_MspInit+0xf8>)
 8008174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008176:	f003 0302 	and.w	r3, r3, #2
 800817a:	61bb      	str	r3, [r7, #24]
 800817c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800817e:	2200      	movs	r2, #0
 8008180:	2105      	movs	r1, #5
 8008182:	201d      	movs	r0, #29
 8008184:	f001 fdce 	bl	8009d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008188:	201d      	movs	r0, #29
 800818a:	f001 fde7 	bl	8009d5c <HAL_NVIC_EnableIRQ>
}
 800818e:	e042      	b.n	8008216 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM4)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a24      	ldr	r2, [pc, #144]	; (8008228 <HAL_TIM_Base_MspInit+0x100>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d10e      	bne.n	80081b8 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800819a:	2300      	movs	r3, #0
 800819c:	617b      	str	r3, [r7, #20]
 800819e:	4b20      	ldr	r3, [pc, #128]	; (8008220 <HAL_TIM_Base_MspInit+0xf8>)
 80081a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a2:	4a1f      	ldr	r2, [pc, #124]	; (8008220 <HAL_TIM_Base_MspInit+0xf8>)
 80081a4:	f043 0304 	orr.w	r3, r3, #4
 80081a8:	6413      	str	r3, [r2, #64]	; 0x40
 80081aa:	4b1d      	ldr	r3, [pc, #116]	; (8008220 <HAL_TIM_Base_MspInit+0xf8>)
 80081ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ae:	f003 0304 	and.w	r3, r3, #4
 80081b2:	617b      	str	r3, [r7, #20]
 80081b4:	697b      	ldr	r3, [r7, #20]
}
 80081b6:	e02e      	b.n	8008216 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM9)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a1b      	ldr	r2, [pc, #108]	; (800822c <HAL_TIM_Base_MspInit+0x104>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d116      	bne.n	80081f0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80081c2:	2300      	movs	r3, #0
 80081c4:	613b      	str	r3, [r7, #16]
 80081c6:	4b16      	ldr	r3, [pc, #88]	; (8008220 <HAL_TIM_Base_MspInit+0xf8>)
 80081c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ca:	4a15      	ldr	r2, [pc, #84]	; (8008220 <HAL_TIM_Base_MspInit+0xf8>)
 80081cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081d0:	6453      	str	r3, [r2, #68]	; 0x44
 80081d2:	4b13      	ldr	r3, [pc, #76]	; (8008220 <HAL_TIM_Base_MspInit+0xf8>)
 80081d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081da:	613b      	str	r3, [r7, #16]
 80081dc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80081de:	2200      	movs	r2, #0
 80081e0:	2105      	movs	r1, #5
 80081e2:	2018      	movs	r0, #24
 80081e4:	f001 fd9e 	bl	8009d24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80081e8:	2018      	movs	r0, #24
 80081ea:	f001 fdb7 	bl	8009d5c <HAL_NVIC_EnableIRQ>
}
 80081ee:	e012      	b.n	8008216 <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM14)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a0e      	ldr	r2, [pc, #56]	; (8008230 <HAL_TIM_Base_MspInit+0x108>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d10d      	bne.n	8008216 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80081fa:	2300      	movs	r3, #0
 80081fc:	60fb      	str	r3, [r7, #12]
 80081fe:	4b08      	ldr	r3, [pc, #32]	; (8008220 <HAL_TIM_Base_MspInit+0xf8>)
 8008200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008202:	4a07      	ldr	r2, [pc, #28]	; (8008220 <HAL_TIM_Base_MspInit+0xf8>)
 8008204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008208:	6413      	str	r3, [r2, #64]	; 0x40
 800820a:	4b05      	ldr	r3, [pc, #20]	; (8008220 <HAL_TIM_Base_MspInit+0xf8>)
 800820c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008212:	60fb      	str	r3, [r7, #12]
 8008214:	68fb      	ldr	r3, [r7, #12]
}
 8008216:	bf00      	nop
 8008218:	3720      	adds	r7, #32
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	40023800 	.word	0x40023800
 8008224:	40000400 	.word	0x40000400
 8008228:	40000800 	.word	0x40000800
 800822c:	40014000 	.word	0x40014000
 8008230:	40002000 	.word	0x40002000

08008234 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b08a      	sub	sp, #40	; 0x28
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800823c:	f107 0314 	add.w	r3, r7, #20
 8008240:	2200      	movs	r2, #0
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	605a      	str	r2, [r3, #4]
 8008246:	609a      	str	r2, [r3, #8]
 8008248:	60da      	str	r2, [r3, #12]
 800824a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a19      	ldr	r2, [pc, #100]	; (80082b8 <HAL_TIM_Encoder_MspInit+0x84>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d12b      	bne.n	80082ae <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008256:	2300      	movs	r3, #0
 8008258:	613b      	str	r3, [r7, #16]
 800825a:	4b18      	ldr	r3, [pc, #96]	; (80082bc <HAL_TIM_Encoder_MspInit+0x88>)
 800825c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800825e:	4a17      	ldr	r2, [pc, #92]	; (80082bc <HAL_TIM_Encoder_MspInit+0x88>)
 8008260:	f043 0308 	orr.w	r3, r3, #8
 8008264:	6413      	str	r3, [r2, #64]	; 0x40
 8008266:	4b15      	ldr	r3, [pc, #84]	; (80082bc <HAL_TIM_Encoder_MspInit+0x88>)
 8008268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826a:	f003 0308 	and.w	r3, r3, #8
 800826e:	613b      	str	r3, [r7, #16]
 8008270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008272:	2300      	movs	r3, #0
 8008274:	60fb      	str	r3, [r7, #12]
 8008276:	4b11      	ldr	r3, [pc, #68]	; (80082bc <HAL_TIM_Encoder_MspInit+0x88>)
 8008278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827a:	4a10      	ldr	r2, [pc, #64]	; (80082bc <HAL_TIM_Encoder_MspInit+0x88>)
 800827c:	f043 0301 	orr.w	r3, r3, #1
 8008280:	6313      	str	r3, [r2, #48]	; 0x30
 8008282:	4b0e      	ldr	r3, [pc, #56]	; (80082bc <HAL_TIM_Encoder_MspInit+0x88>)
 8008284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	60fb      	str	r3, [r7, #12]
 800828c:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = WHEELENCODER_A_Pin|WHEELENCODER_B_Pin;
 800828e:	2303      	movs	r3, #3
 8008290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008292:	2302      	movs	r3, #2
 8008294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008296:	2300      	movs	r3, #0
 8008298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800829a:	2300      	movs	r3, #0
 800829c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800829e:	2302      	movs	r3, #2
 80082a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082a2:	f107 0314 	add.w	r3, r7, #20
 80082a6:	4619      	mov	r1, r3
 80082a8:	4805      	ldr	r0, [pc, #20]	; (80082c0 <HAL_TIM_Encoder_MspInit+0x8c>)
 80082aa:	f002 f8f1 	bl	800a490 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80082ae:	bf00      	nop
 80082b0:	3728      	adds	r7, #40	; 0x28
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	40000c00 	.word	0x40000c00
 80082bc:	40023800 	.word	0x40023800
 80082c0:	40020000 	.word	0x40020000

080082c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082cc:	f107 030c 	add.w	r3, r7, #12
 80082d0:	2200      	movs	r2, #0
 80082d2:	601a      	str	r2, [r3, #0]
 80082d4:	605a      	str	r2, [r3, #4]
 80082d6:	609a      	str	r2, [r3, #8]
 80082d8:	60da      	str	r2, [r3, #12]
 80082da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a12      	ldr	r2, [pc, #72]	; (800832c <HAL_TIM_MspPostInit+0x68>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d11e      	bne.n	8008324 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80082e6:	2300      	movs	r3, #0
 80082e8:	60bb      	str	r3, [r7, #8]
 80082ea:	4b11      	ldr	r3, [pc, #68]	; (8008330 <HAL_TIM_MspPostInit+0x6c>)
 80082ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ee:	4a10      	ldr	r2, [pc, #64]	; (8008330 <HAL_TIM_MspPostInit+0x6c>)
 80082f0:	f043 0308 	orr.w	r3, r3, #8
 80082f4:	6313      	str	r3, [r2, #48]	; 0x30
 80082f6:	4b0e      	ldr	r3, [pc, #56]	; (8008330 <HAL_TIM_MspPostInit+0x6c>)
 80082f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fa:	f003 0308 	and.w	r3, r3, #8
 80082fe:	60bb      	str	r3, [r7, #8]
 8008300:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin;
 8008302:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8008306:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008308:	2302      	movs	r3, #2
 800830a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800830c:	2300      	movs	r3, #0
 800830e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008310:	2300      	movs	r3, #0
 8008312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008314:	2302      	movs	r3, #2
 8008316:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008318:	f107 030c 	add.w	r3, r7, #12
 800831c:	4619      	mov	r1, r3
 800831e:	4805      	ldr	r0, [pc, #20]	; (8008334 <HAL_TIM_MspPostInit+0x70>)
 8008320:	f002 f8b6 	bl	800a490 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8008324:	bf00      	nop
 8008326:	3720      	adds	r7, #32
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}
 800832c:	40000800 	.word	0x40000800
 8008330:	40023800 	.word	0x40023800
 8008334:	40020c00 	.word	0x40020c00

08008338 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800833c:	4b11      	ldr	r3, [pc, #68]	; (8008384 <MX_USART1_UART_Init+0x4c>)
 800833e:	4a12      	ldr	r2, [pc, #72]	; (8008388 <MX_USART1_UART_Init+0x50>)
 8008340:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008342:	4b10      	ldr	r3, [pc, #64]	; (8008384 <MX_USART1_UART_Init+0x4c>)
 8008344:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008348:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800834a:	4b0e      	ldr	r3, [pc, #56]	; (8008384 <MX_USART1_UART_Init+0x4c>)
 800834c:	2200      	movs	r2, #0
 800834e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008350:	4b0c      	ldr	r3, [pc, #48]	; (8008384 <MX_USART1_UART_Init+0x4c>)
 8008352:	2200      	movs	r2, #0
 8008354:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008356:	4b0b      	ldr	r3, [pc, #44]	; (8008384 <MX_USART1_UART_Init+0x4c>)
 8008358:	2200      	movs	r2, #0
 800835a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800835c:	4b09      	ldr	r3, [pc, #36]	; (8008384 <MX_USART1_UART_Init+0x4c>)
 800835e:	220c      	movs	r2, #12
 8008360:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8008362:	4b08      	ldr	r3, [pc, #32]	; (8008384 <MX_USART1_UART_Init+0x4c>)
 8008364:	f44f 7240 	mov.w	r2, #768	; 0x300
 8008368:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800836a:	4b06      	ldr	r3, [pc, #24]	; (8008384 <MX_USART1_UART_Init+0x4c>)
 800836c:	2200      	movs	r2, #0
 800836e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008370:	4804      	ldr	r0, [pc, #16]	; (8008384 <MX_USART1_UART_Init+0x4c>)
 8008372:	f004 f963 	bl	800c63c <HAL_UART_Init>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 800837c:	f7ff fa22 	bl	80077c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008380:	bf00      	nop
 8008382:	bd80      	pop	{r7, pc}
 8008384:	20001330 	.word	0x20001330
 8008388:	40011000 	.word	0x40011000

0800838c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008390:	4b11      	ldr	r3, [pc, #68]	; (80083d8 <MX_USART2_UART_Init+0x4c>)
 8008392:	4a12      	ldr	r2, [pc, #72]	; (80083dc <MX_USART2_UART_Init+0x50>)
 8008394:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 8008396:	4b10      	ldr	r3, [pc, #64]	; (80083d8 <MX_USART2_UART_Init+0x4c>)
 8008398:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 800839c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800839e:	4b0e      	ldr	r3, [pc, #56]	; (80083d8 <MX_USART2_UART_Init+0x4c>)
 80083a0:	2200      	movs	r2, #0
 80083a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80083a4:	4b0c      	ldr	r3, [pc, #48]	; (80083d8 <MX_USART2_UART_Init+0x4c>)
 80083a6:	2200      	movs	r2, #0
 80083a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80083aa:	4b0b      	ldr	r3, [pc, #44]	; (80083d8 <MX_USART2_UART_Init+0x4c>)
 80083ac:	2200      	movs	r2, #0
 80083ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80083b0:	4b09      	ldr	r3, [pc, #36]	; (80083d8 <MX_USART2_UART_Init+0x4c>)
 80083b2:	220c      	movs	r2, #12
 80083b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80083b6:	4b08      	ldr	r3, [pc, #32]	; (80083d8 <MX_USART2_UART_Init+0x4c>)
 80083b8:	2200      	movs	r2, #0
 80083ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80083bc:	4b06      	ldr	r3, [pc, #24]	; (80083d8 <MX_USART2_UART_Init+0x4c>)
 80083be:	2200      	movs	r2, #0
 80083c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80083c2:	4805      	ldr	r0, [pc, #20]	; (80083d8 <MX_USART2_UART_Init+0x4c>)
 80083c4:	f004 f93a 	bl	800c63c <HAL_UART_Init>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d001      	beq.n	80083d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80083ce:	f7ff f9f9 	bl	80077c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80083d2:	bf00      	nop
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	20001374 	.word	0x20001374
 80083dc:	40004400 	.word	0x40004400

080083e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b08c      	sub	sp, #48	; 0x30
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083e8:	f107 031c 	add.w	r3, r7, #28
 80083ec:	2200      	movs	r2, #0
 80083ee:	601a      	str	r2, [r3, #0]
 80083f0:	605a      	str	r2, [r3, #4]
 80083f2:	609a      	str	r2, [r3, #8]
 80083f4:	60da      	str	r2, [r3, #12]
 80083f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a61      	ldr	r2, [pc, #388]	; (8008584 <HAL_UART_MspInit+0x1a4>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	f040 808a 	bne.w	8008518 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008404:	2300      	movs	r3, #0
 8008406:	61bb      	str	r3, [r7, #24]
 8008408:	4b5f      	ldr	r3, [pc, #380]	; (8008588 <HAL_UART_MspInit+0x1a8>)
 800840a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800840c:	4a5e      	ldr	r2, [pc, #376]	; (8008588 <HAL_UART_MspInit+0x1a8>)
 800840e:	f043 0310 	orr.w	r3, r3, #16
 8008412:	6453      	str	r3, [r2, #68]	; 0x44
 8008414:	4b5c      	ldr	r3, [pc, #368]	; (8008588 <HAL_UART_MspInit+0x1a8>)
 8008416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008418:	f003 0310 	and.w	r3, r3, #16
 800841c:	61bb      	str	r3, [r7, #24]
 800841e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008420:	2300      	movs	r3, #0
 8008422:	617b      	str	r3, [r7, #20]
 8008424:	4b58      	ldr	r3, [pc, #352]	; (8008588 <HAL_UART_MspInit+0x1a8>)
 8008426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008428:	4a57      	ldr	r2, [pc, #348]	; (8008588 <HAL_UART_MspInit+0x1a8>)
 800842a:	f043 0301 	orr.w	r3, r3, #1
 800842e:	6313      	str	r3, [r2, #48]	; 0x30
 8008430:	4b55      	ldr	r3, [pc, #340]	; (8008588 <HAL_UART_MspInit+0x1a8>)
 8008432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	617b      	str	r3, [r7, #20]
 800843a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800843c:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8008440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008442:	2302      	movs	r3, #2
 8008444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008446:	2300      	movs	r3, #0
 8008448:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800844a:	2303      	movs	r3, #3
 800844c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800844e:	2307      	movs	r3, #7
 8008450:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008452:	f107 031c 	add.w	r3, r7, #28
 8008456:	4619      	mov	r1, r3
 8008458:	484c      	ldr	r0, [pc, #304]	; (800858c <HAL_UART_MspInit+0x1ac>)
 800845a:	f002 f819 	bl	800a490 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800845e:	4b4c      	ldr	r3, [pc, #304]	; (8008590 <HAL_UART_MspInit+0x1b0>)
 8008460:	4a4c      	ldr	r2, [pc, #304]	; (8008594 <HAL_UART_MspInit+0x1b4>)
 8008462:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8008464:	4b4a      	ldr	r3, [pc, #296]	; (8008590 <HAL_UART_MspInit+0x1b0>)
 8008466:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800846a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800846c:	4b48      	ldr	r3, [pc, #288]	; (8008590 <HAL_UART_MspInit+0x1b0>)
 800846e:	2240      	movs	r2, #64	; 0x40
 8008470:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008472:	4b47      	ldr	r3, [pc, #284]	; (8008590 <HAL_UART_MspInit+0x1b0>)
 8008474:	2200      	movs	r2, #0
 8008476:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008478:	4b45      	ldr	r3, [pc, #276]	; (8008590 <HAL_UART_MspInit+0x1b0>)
 800847a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800847e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008480:	4b43      	ldr	r3, [pc, #268]	; (8008590 <HAL_UART_MspInit+0x1b0>)
 8008482:	2200      	movs	r2, #0
 8008484:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008486:	4b42      	ldr	r3, [pc, #264]	; (8008590 <HAL_UART_MspInit+0x1b0>)
 8008488:	2200      	movs	r2, #0
 800848a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800848c:	4b40      	ldr	r3, [pc, #256]	; (8008590 <HAL_UART_MspInit+0x1b0>)
 800848e:	2200      	movs	r2, #0
 8008490:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008492:	4b3f      	ldr	r3, [pc, #252]	; (8008590 <HAL_UART_MspInit+0x1b0>)
 8008494:	2200      	movs	r2, #0
 8008496:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008498:	4b3d      	ldr	r3, [pc, #244]	; (8008590 <HAL_UART_MspInit+0x1b0>)
 800849a:	2200      	movs	r2, #0
 800849c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800849e:	483c      	ldr	r0, [pc, #240]	; (8008590 <HAL_UART_MspInit+0x1b0>)
 80084a0:	f001 fc86 	bl	8009db0 <HAL_DMA_Init>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d001      	beq.n	80084ae <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80084aa:	f7ff f98b 	bl	80077c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	4a37      	ldr	r2, [pc, #220]	; (8008590 <HAL_UART_MspInit+0x1b0>)
 80084b2:	635a      	str	r2, [r3, #52]	; 0x34
 80084b4:	4a36      	ldr	r2, [pc, #216]	; (8008590 <HAL_UART_MspInit+0x1b0>)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 80084ba:	4b37      	ldr	r3, [pc, #220]	; (8008598 <HAL_UART_MspInit+0x1b8>)
 80084bc:	4a37      	ldr	r2, [pc, #220]	; (800859c <HAL_UART_MspInit+0x1bc>)
 80084be:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80084c0:	4b35      	ldr	r3, [pc, #212]	; (8008598 <HAL_UART_MspInit+0x1b8>)
 80084c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80084c6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80084c8:	4b33      	ldr	r3, [pc, #204]	; (8008598 <HAL_UART_MspInit+0x1b8>)
 80084ca:	2200      	movs	r2, #0
 80084cc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80084ce:	4b32      	ldr	r3, [pc, #200]	; (8008598 <HAL_UART_MspInit+0x1b8>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80084d4:	4b30      	ldr	r3, [pc, #192]	; (8008598 <HAL_UART_MspInit+0x1b8>)
 80084d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80084da:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80084dc:	4b2e      	ldr	r3, [pc, #184]	; (8008598 <HAL_UART_MspInit+0x1b8>)
 80084de:	2200      	movs	r2, #0
 80084e0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80084e2:	4b2d      	ldr	r3, [pc, #180]	; (8008598 <HAL_UART_MspInit+0x1b8>)
 80084e4:	2200      	movs	r2, #0
 80084e6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80084e8:	4b2b      	ldr	r3, [pc, #172]	; (8008598 <HAL_UART_MspInit+0x1b8>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80084ee:	4b2a      	ldr	r3, [pc, #168]	; (8008598 <HAL_UART_MspInit+0x1b8>)
 80084f0:	2200      	movs	r2, #0
 80084f2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80084f4:	4b28      	ldr	r3, [pc, #160]	; (8008598 <HAL_UART_MspInit+0x1b8>)
 80084f6:	2200      	movs	r2, #0
 80084f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80084fa:	4827      	ldr	r0, [pc, #156]	; (8008598 <HAL_UART_MspInit+0x1b8>)
 80084fc:	f001 fc58 	bl	8009db0 <HAL_DMA_Init>
 8008500:	4603      	mov	r3, r0
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8008506:	f7ff f95d 	bl	80077c4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4a22      	ldr	r2, [pc, #136]	; (8008598 <HAL_UART_MspInit+0x1b8>)
 800850e:	639a      	str	r2, [r3, #56]	; 0x38
 8008510:	4a21      	ldr	r2, [pc, #132]	; (8008598 <HAL_UART_MspInit+0x1b8>)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8008516:	e030      	b.n	800857a <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART2)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a20      	ldr	r2, [pc, #128]	; (80085a0 <HAL_UART_MspInit+0x1c0>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d12b      	bne.n	800857a <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8008522:	2300      	movs	r3, #0
 8008524:	613b      	str	r3, [r7, #16]
 8008526:	4b18      	ldr	r3, [pc, #96]	; (8008588 <HAL_UART_MspInit+0x1a8>)
 8008528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852a:	4a17      	ldr	r2, [pc, #92]	; (8008588 <HAL_UART_MspInit+0x1a8>)
 800852c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008530:	6413      	str	r3, [r2, #64]	; 0x40
 8008532:	4b15      	ldr	r3, [pc, #84]	; (8008588 <HAL_UART_MspInit+0x1a8>)
 8008534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800853a:	613b      	str	r3, [r7, #16]
 800853c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800853e:	2300      	movs	r3, #0
 8008540:	60fb      	str	r3, [r7, #12]
 8008542:	4b11      	ldr	r3, [pc, #68]	; (8008588 <HAL_UART_MspInit+0x1a8>)
 8008544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008546:	4a10      	ldr	r2, [pc, #64]	; (8008588 <HAL_UART_MspInit+0x1a8>)
 8008548:	f043 0308 	orr.w	r3, r3, #8
 800854c:	6313      	str	r3, [r2, #48]	; 0x30
 800854e:	4b0e      	ldr	r3, [pc, #56]	; (8008588 <HAL_UART_MspInit+0x1a8>)
 8008550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008552:	f003 0308 	and.w	r3, r3, #8
 8008556:	60fb      	str	r3, [r7, #12]
 8008558:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DBG_UART_TX_Pin|DBG_UART_RX_Pin;
 800855a:	2360      	movs	r3, #96	; 0x60
 800855c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800855e:	2302      	movs	r3, #2
 8008560:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008562:	2300      	movs	r3, #0
 8008564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008566:	2303      	movs	r3, #3
 8008568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800856a:	2307      	movs	r3, #7
 800856c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800856e:	f107 031c 	add.w	r3, r7, #28
 8008572:	4619      	mov	r1, r3
 8008574:	480b      	ldr	r0, [pc, #44]	; (80085a4 <HAL_UART_MspInit+0x1c4>)
 8008576:	f001 ff8b 	bl	800a490 <HAL_GPIO_Init>
}
 800857a:	bf00      	nop
 800857c:	3730      	adds	r7, #48	; 0x30
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	40011000 	.word	0x40011000
 8008588:	40023800 	.word	0x40023800
 800858c:	40020000 	.word	0x40020000
 8008590:	200013b8 	.word	0x200013b8
 8008594:	400264b8 	.word	0x400264b8
 8008598:	20001418 	.word	0x20001418
 800859c:	40026488 	.word	0x40026488
 80085a0:	40004400 	.word	0x40004400
 80085a4:	40020c00 	.word	0x40020c00

080085a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80085a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80085e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80085ac:	480d      	ldr	r0, [pc, #52]	; (80085e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80085ae:	490e      	ldr	r1, [pc, #56]	; (80085e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80085b0:	4a0e      	ldr	r2, [pc, #56]	; (80085ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80085b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80085b4:	e002      	b.n	80085bc <LoopCopyDataInit>

080085b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80085b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80085b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80085ba:	3304      	adds	r3, #4

080085bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80085bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80085be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80085c0:	d3f9      	bcc.n	80085b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80085c2:	4a0b      	ldr	r2, [pc, #44]	; (80085f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80085c4:	4c0b      	ldr	r4, [pc, #44]	; (80085f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80085c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80085c8:	e001      	b.n	80085ce <LoopFillZerobss>

080085ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80085ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80085cc:	3204      	adds	r2, #4

080085ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80085ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80085d0:	d3fb      	bcc.n	80085ca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80085d2:	f7ff fbbd 	bl	8007d50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80085d6:	f00a ffe9 	bl	80135ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80085da:	f7ff f843 	bl	8007664 <main>
  bx  lr    
 80085de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80085e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80085e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80085e8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80085ec:	080168fc 	.word	0x080168fc
  ldr r2, =_sbss
 80085f0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80085f4:	2000a448 	.word	0x2000a448

080085f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80085f8:	e7fe      	b.n	80085f8 <ADC_IRQHandler>
	...

080085fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008600:	4b0e      	ldr	r3, [pc, #56]	; (800863c <HAL_Init+0x40>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a0d      	ldr	r2, [pc, #52]	; (800863c <HAL_Init+0x40>)
 8008606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800860a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800860c:	4b0b      	ldr	r3, [pc, #44]	; (800863c <HAL_Init+0x40>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a0a      	ldr	r2, [pc, #40]	; (800863c <HAL_Init+0x40>)
 8008612:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008616:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008618:	4b08      	ldr	r3, [pc, #32]	; (800863c <HAL_Init+0x40>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a07      	ldr	r2, [pc, #28]	; (800863c <HAL_Init+0x40>)
 800861e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008624:	2003      	movs	r0, #3
 8008626:	f001 fb72 	bl	8009d0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800862a:	2005      	movs	r0, #5
 800862c:	f7ff f9b0 	bl	8007990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008630:	f7ff f982 	bl	8007938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	40023c00 	.word	0x40023c00

08008640 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008640:	b480      	push	{r7}
 8008642:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008644:	4b06      	ldr	r3, [pc, #24]	; (8008660 <HAL_IncTick+0x20>)
 8008646:	781b      	ldrb	r3, [r3, #0]
 8008648:	461a      	mov	r2, r3
 800864a:	4b06      	ldr	r3, [pc, #24]	; (8008664 <HAL_IncTick+0x24>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4413      	add	r3, r2
 8008650:	4a04      	ldr	r2, [pc, #16]	; (8008664 <HAL_IncTick+0x24>)
 8008652:	6013      	str	r3, [r2, #0]
}
 8008654:	bf00      	nop
 8008656:	46bd      	mov	sp, r7
 8008658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865c:	4770      	bx	lr
 800865e:	bf00      	nop
 8008660:	20000018 	.word	0x20000018
 8008664:	20001478 	.word	0x20001478

08008668 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008668:	b480      	push	{r7}
 800866a:	af00      	add	r7, sp, #0
  return uwTick;
 800866c:	4b03      	ldr	r3, [pc, #12]	; (800867c <HAL_GetTick+0x14>)
 800866e:	681b      	ldr	r3, [r3, #0]
}
 8008670:	4618      	mov	r0, r3
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	20001478 	.word	0x20001478

08008680 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008688:	2300      	movs	r3, #0
 800868a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d101      	bne.n	8008696 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e033      	b.n	80086fe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869a:	2b00      	cmp	r3, #0
 800869c:	d109      	bne.n	80086b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7fe fba4 	bl	8006dec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b6:	f003 0310 	and.w	r3, r3, #16
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d118      	bne.n	80086f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80086c6:	f023 0302 	bic.w	r3, r3, #2
 80086ca:	f043 0202 	orr.w	r2, r3, #2
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fa54 	bl	8008b80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e2:	f023 0303 	bic.w	r3, r3, #3
 80086e6:	f043 0201 	orr.w	r2, r3, #1
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	641a      	str	r2, [r3, #64]	; 0x40
 80086ee:	e001      	b.n	80086f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
	...

08008708 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b086      	sub	sp, #24
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008714:	2300      	movs	r3, #0
 8008716:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800871e:	2b01      	cmp	r3, #1
 8008720:	d101      	bne.n	8008726 <HAL_ADC_Start_DMA+0x1e>
 8008722:	2302      	movs	r3, #2
 8008724:	e0e9      	b.n	80088fa <HAL_ADC_Start_DMA+0x1f2>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f003 0301 	and.w	r3, r3, #1
 8008738:	2b01      	cmp	r3, #1
 800873a:	d018      	beq.n	800876e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	689a      	ldr	r2, [r3, #8]
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f042 0201 	orr.w	r2, r2, #1
 800874a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800874c:	4b6d      	ldr	r3, [pc, #436]	; (8008904 <HAL_ADC_Start_DMA+0x1fc>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a6d      	ldr	r2, [pc, #436]	; (8008908 <HAL_ADC_Start_DMA+0x200>)
 8008752:	fba2 2303 	umull	r2, r3, r2, r3
 8008756:	0c9a      	lsrs	r2, r3, #18
 8008758:	4613      	mov	r3, r2
 800875a:	005b      	lsls	r3, r3, #1
 800875c:	4413      	add	r3, r2
 800875e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008760:	e002      	b.n	8008768 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008762:	693b      	ldr	r3, [r7, #16]
 8008764:	3b01      	subs	r3, #1
 8008766:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1f9      	bne.n	8008762 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800877c:	d107      	bne.n	800878e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	689a      	ldr	r2, [r3, #8]
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800878c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	f003 0301 	and.w	r3, r3, #1
 8008798:	2b01      	cmp	r3, #1
 800879a:	f040 80a1 	bne.w	80088e0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80087a6:	f023 0301 	bic.w	r3, r3, #1
 80087aa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d007      	beq.n	80087d0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80087c8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80087d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087dc:	d106      	bne.n	80087ec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087e2:	f023 0206 	bic.w	r2, r3, #6
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	645a      	str	r2, [r3, #68]	; 0x44
 80087ea:	e002      	b.n	80087f2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2200      	movs	r2, #0
 80087f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80087fa:	4b44      	ldr	r3, [pc, #272]	; (800890c <HAL_ADC_Start_DMA+0x204>)
 80087fc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008802:	4a43      	ldr	r2, [pc, #268]	; (8008910 <HAL_ADC_Start_DMA+0x208>)
 8008804:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880a:	4a42      	ldr	r2, [pc, #264]	; (8008914 <HAL_ADC_Start_DMA+0x20c>)
 800880c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008812:	4a41      	ldr	r2, [pc, #260]	; (8008918 <HAL_ADC_Start_DMA+0x210>)
 8008814:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800881e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	685a      	ldr	r2, [r3, #4]
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800882e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	689a      	ldr	r2, [r3, #8]
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800883e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	334c      	adds	r3, #76	; 0x4c
 800884a:	4619      	mov	r1, r3
 800884c:	68ba      	ldr	r2, [r7, #8]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f001 fb5c 	bl	8009f0c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	f003 031f 	and.w	r3, r3, #31
 800885c:	2b00      	cmp	r3, #0
 800885e:	d12a      	bne.n	80088b6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a2d      	ldr	r2, [pc, #180]	; (800891c <HAL_ADC_Start_DMA+0x214>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d015      	beq.n	8008896 <HAL_ADC_Start_DMA+0x18e>
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a2c      	ldr	r2, [pc, #176]	; (8008920 <HAL_ADC_Start_DMA+0x218>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d105      	bne.n	8008880 <HAL_ADC_Start_DMA+0x178>
 8008874:	4b25      	ldr	r3, [pc, #148]	; (800890c <HAL_ADC_Start_DMA+0x204>)
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	f003 031f 	and.w	r3, r3, #31
 800887c:	2b00      	cmp	r3, #0
 800887e:	d00a      	beq.n	8008896 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a27      	ldr	r2, [pc, #156]	; (8008924 <HAL_ADC_Start_DMA+0x21c>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d136      	bne.n	80088f8 <HAL_ADC_Start_DMA+0x1f0>
 800888a:	4b20      	ldr	r3, [pc, #128]	; (800890c <HAL_ADC_Start_DMA+0x204>)
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	f003 0310 	and.w	r3, r3, #16
 8008892:	2b00      	cmp	r3, #0
 8008894:	d130      	bne.n	80088f8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d129      	bne.n	80088f8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	689a      	ldr	r2, [r3, #8]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80088b2:	609a      	str	r2, [r3, #8]
 80088b4:	e020      	b.n	80088f8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a18      	ldr	r2, [pc, #96]	; (800891c <HAL_ADC_Start_DMA+0x214>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d11b      	bne.n	80088f8 <HAL_ADC_Start_DMA+0x1f0>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	689b      	ldr	r3, [r3, #8]
 80088c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d114      	bne.n	80088f8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	689a      	ldr	r2, [r3, #8]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80088dc:	609a      	str	r2, [r3, #8]
 80088de:	e00b      	b.n	80088f8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e4:	f043 0210 	orr.w	r2, r3, #16
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088f0:	f043 0201 	orr.w	r2, r3, #1
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80088f8:	2300      	movs	r3, #0
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3718      	adds	r7, #24
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	20000010 	.word	0x20000010
 8008908:	431bde83 	.word	0x431bde83
 800890c:	40012300 	.word	0x40012300
 8008910:	08008d79 	.word	0x08008d79
 8008914:	08008e33 	.word	0x08008e33
 8008918:	08008e4f 	.word	0x08008e4f
 800891c:	40012000 	.word	0x40012000
 8008920:	40012100 	.word	0x40012100
 8008924:	40012200 	.word	0x40012200

08008928 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008928:	b480      	push	{r7}
 800892a:	b083      	sub	sp, #12
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008930:	bf00      	nop
 8008932:	370c      	adds	r7, #12
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008946:	2300      	movs	r3, #0
 8008948:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008950:	2b01      	cmp	r3, #1
 8008952:	d101      	bne.n	8008958 <HAL_ADC_ConfigChannel+0x1c>
 8008954:	2302      	movs	r3, #2
 8008956:	e105      	b.n	8008b64 <HAL_ADC_ConfigChannel+0x228>
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b09      	cmp	r3, #9
 8008966:	d925      	bls.n	80089b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68d9      	ldr	r1, [r3, #12]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	b29b      	uxth	r3, r3
 8008974:	461a      	mov	r2, r3
 8008976:	4613      	mov	r3, r2
 8008978:	005b      	lsls	r3, r3, #1
 800897a:	4413      	add	r3, r2
 800897c:	3b1e      	subs	r3, #30
 800897e:	2207      	movs	r2, #7
 8008980:	fa02 f303 	lsl.w	r3, r2, r3
 8008984:	43da      	mvns	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	400a      	ands	r2, r1
 800898c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	68d9      	ldr	r1, [r3, #12]
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	689a      	ldr	r2, [r3, #8]
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	b29b      	uxth	r3, r3
 800899e:	4618      	mov	r0, r3
 80089a0:	4603      	mov	r3, r0
 80089a2:	005b      	lsls	r3, r3, #1
 80089a4:	4403      	add	r3, r0
 80089a6:	3b1e      	subs	r3, #30
 80089a8:	409a      	lsls	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	430a      	orrs	r2, r1
 80089b0:	60da      	str	r2, [r3, #12]
 80089b2:	e022      	b.n	80089fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6919      	ldr	r1, [r3, #16]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	b29b      	uxth	r3, r3
 80089c0:	461a      	mov	r2, r3
 80089c2:	4613      	mov	r3, r2
 80089c4:	005b      	lsls	r3, r3, #1
 80089c6:	4413      	add	r3, r2
 80089c8:	2207      	movs	r2, #7
 80089ca:	fa02 f303 	lsl.w	r3, r2, r3
 80089ce:	43da      	mvns	r2, r3
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	400a      	ands	r2, r1
 80089d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6919      	ldr	r1, [r3, #16]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	689a      	ldr	r2, [r3, #8]
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	b29b      	uxth	r3, r3
 80089e8:	4618      	mov	r0, r3
 80089ea:	4603      	mov	r3, r0
 80089ec:	005b      	lsls	r3, r3, #1
 80089ee:	4403      	add	r3, r0
 80089f0:	409a      	lsls	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	430a      	orrs	r2, r1
 80089f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	2b06      	cmp	r3, #6
 8008a00:	d824      	bhi.n	8008a4c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685a      	ldr	r2, [r3, #4]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	009b      	lsls	r3, r3, #2
 8008a10:	4413      	add	r3, r2
 8008a12:	3b05      	subs	r3, #5
 8008a14:	221f      	movs	r2, #31
 8008a16:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1a:	43da      	mvns	r2, r3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	400a      	ands	r2, r1
 8008a22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	b29b      	uxth	r3, r3
 8008a30:	4618      	mov	r0, r3
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	685a      	ldr	r2, [r3, #4]
 8008a36:	4613      	mov	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	3b05      	subs	r3, #5
 8008a3e:	fa00 f203 	lsl.w	r2, r0, r3
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	430a      	orrs	r2, r1
 8008a48:	635a      	str	r2, [r3, #52]	; 0x34
 8008a4a:	e04c      	b.n	8008ae6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	2b0c      	cmp	r3, #12
 8008a52:	d824      	bhi.n	8008a9e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	685a      	ldr	r2, [r3, #4]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	3b23      	subs	r3, #35	; 0x23
 8008a66:	221f      	movs	r2, #31
 8008a68:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6c:	43da      	mvns	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	400a      	ands	r2, r1
 8008a74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	b29b      	uxth	r3, r3
 8008a82:	4618      	mov	r0, r3
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	4613      	mov	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	4413      	add	r3, r2
 8008a8e:	3b23      	subs	r3, #35	; 0x23
 8008a90:	fa00 f203 	lsl.w	r2, r0, r3
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	430a      	orrs	r2, r1
 8008a9a:	631a      	str	r2, [r3, #48]	; 0x30
 8008a9c:	e023      	b.n	8008ae6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	685a      	ldr	r2, [r3, #4]
 8008aa8:	4613      	mov	r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	4413      	add	r3, r2
 8008aae:	3b41      	subs	r3, #65	; 0x41
 8008ab0:	221f      	movs	r2, #31
 8008ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab6:	43da      	mvns	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	400a      	ands	r2, r1
 8008abe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	b29b      	uxth	r3, r3
 8008acc:	4618      	mov	r0, r3
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	685a      	ldr	r2, [r3, #4]
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	3b41      	subs	r3, #65	; 0x41
 8008ada:	fa00 f203 	lsl.w	r2, r0, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	430a      	orrs	r2, r1
 8008ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008ae6:	4b22      	ldr	r3, [pc, #136]	; (8008b70 <HAL_ADC_ConfigChannel+0x234>)
 8008ae8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a21      	ldr	r2, [pc, #132]	; (8008b74 <HAL_ADC_ConfigChannel+0x238>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d109      	bne.n	8008b08 <HAL_ADC_ConfigChannel+0x1cc>
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2b12      	cmp	r3, #18
 8008afa:	d105      	bne.n	8008b08 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a19      	ldr	r2, [pc, #100]	; (8008b74 <HAL_ADC_ConfigChannel+0x238>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d123      	bne.n	8008b5a <HAL_ADC_ConfigChannel+0x21e>
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2b10      	cmp	r3, #16
 8008b18:	d003      	beq.n	8008b22 <HAL_ADC_ConfigChannel+0x1e6>
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2b11      	cmp	r3, #17
 8008b20:	d11b      	bne.n	8008b5a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2b10      	cmp	r3, #16
 8008b34:	d111      	bne.n	8008b5a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8008b36:	4b10      	ldr	r3, [pc, #64]	; (8008b78 <HAL_ADC_ConfigChannel+0x23c>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a10      	ldr	r2, [pc, #64]	; (8008b7c <HAL_ADC_ConfigChannel+0x240>)
 8008b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b40:	0c9a      	lsrs	r2, r3, #18
 8008b42:	4613      	mov	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	005b      	lsls	r3, r3, #1
 8008b4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008b4c:	e002      	b.n	8008b54 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	3b01      	subs	r3, #1
 8008b52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1f9      	bne.n	8008b4e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008b62:	2300      	movs	r3, #0
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3714      	adds	r7, #20
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr
 8008b70:	40012300 	.word	0x40012300
 8008b74:	40012000 	.word	0x40012000
 8008b78:	20000010 	.word	0x20000010
 8008b7c:	431bde83 	.word	0x431bde83

08008b80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008b88:	4b79      	ldr	r3, [pc, #484]	; (8008d70 <ADC_Init+0x1f0>)
 8008b8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	685a      	ldr	r2, [r3, #4]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	431a      	orrs	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	685a      	ldr	r2, [r3, #4]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008bb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	6859      	ldr	r1, [r3, #4]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	691b      	ldr	r3, [r3, #16]
 8008bc0:	021a      	lsls	r2, r3, #8
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	430a      	orrs	r2, r1
 8008bc8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	685a      	ldr	r2, [r3, #4]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008bd8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	6859      	ldr	r1, [r3, #4]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	689a      	ldr	r2, [r3, #8]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	430a      	orrs	r2, r1
 8008bea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	689a      	ldr	r2, [r3, #8]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008bfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	6899      	ldr	r1, [r3, #8]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68da      	ldr	r2, [r3, #12]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	430a      	orrs	r2, r1
 8008c0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c12:	4a58      	ldr	r2, [pc, #352]	; (8008d74 <ADC_Init+0x1f4>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d022      	beq.n	8008c5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	689a      	ldr	r2, [r3, #8]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008c26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	6899      	ldr	r1, [r3, #8]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	430a      	orrs	r2, r1
 8008c38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	689a      	ldr	r2, [r3, #8]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008c48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	6899      	ldr	r1, [r3, #8]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	430a      	orrs	r2, r1
 8008c5a:	609a      	str	r2, [r3, #8]
 8008c5c:	e00f      	b.n	8008c7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	689a      	ldr	r2, [r3, #8]
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008c6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	689a      	ldr	r2, [r3, #8]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8008c7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	689a      	ldr	r2, [r3, #8]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f022 0202 	bic.w	r2, r2, #2
 8008c8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	6899      	ldr	r1, [r3, #8]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	7e1b      	ldrb	r3, [r3, #24]
 8008c98:	005a      	lsls	r2, r3, #1
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d01b      	beq.n	8008ce4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	685a      	ldr	r2, [r3, #4]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008cca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	6859      	ldr	r1, [r3, #4]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	035a      	lsls	r2, r3, #13
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	430a      	orrs	r2, r1
 8008ce0:	605a      	str	r2, [r3, #4]
 8008ce2:	e007      	b.n	8008cf4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	685a      	ldr	r2, [r3, #4]
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008cf2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008d02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	69db      	ldr	r3, [r3, #28]
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	051a      	lsls	r2, r3, #20
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	430a      	orrs	r2, r1
 8008d18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	689a      	ldr	r2, [r3, #8]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008d28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	6899      	ldr	r1, [r3, #8]
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d36:	025a      	lsls	r2, r3, #9
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	430a      	orrs	r2, r1
 8008d3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	689a      	ldr	r2, [r3, #8]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6899      	ldr	r1, [r3, #8]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	029a      	lsls	r2, r3, #10
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	430a      	orrs	r2, r1
 8008d62:	609a      	str	r2, [r3, #8]
}
 8008d64:	bf00      	nop
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr
 8008d70:	40012300 	.word	0x40012300
 8008d74:	0f000001 	.word	0x0f000001

08008d78 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d84:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d8a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d13c      	bne.n	8008e0c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d12b      	bne.n	8008e04 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d127      	bne.n	8008e04 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dba:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d006      	beq.n	8008dd0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	689b      	ldr	r3, [r3, #8]
 8008dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d119      	bne.n	8008e04 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	685a      	ldr	r2, [r3, #4]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f022 0220 	bic.w	r2, r2, #32
 8008dde:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d105      	bne.n	8008e04 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfc:	f043 0201 	orr.w	r2, r3, #1
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f003 fef8 	bl	800cbfa <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008e0a:	e00e      	b.n	8008e2a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e10:	f003 0310 	and.w	r3, r3, #16
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d003      	beq.n	8008e20 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008e18:	68f8      	ldr	r0, [r7, #12]
 8008e1a:	f7ff fd85 	bl	8008928 <HAL_ADC_ErrorCallback>
}
 8008e1e:	e004      	b.n	8008e2a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	4798      	blx	r3
}
 8008e2a:	bf00      	nop
 8008e2c:	3710      	adds	r7, #16
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b084      	sub	sp, #16
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e3e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f003 ff88 	bl	800cd56 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008e46:	bf00      	nop
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b084      	sub	sp, #16
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2240      	movs	r2, #64	; 0x40
 8008e60:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e66:	f043 0204 	orr.w	r2, r3, #4
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008e6e:	68f8      	ldr	r0, [r7, #12]
 8008e70:	f7ff fd5a 	bl	8008928 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008e74:	bf00      	nop
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e0ed      	b.n	800906a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d102      	bne.n	8008ea0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f7fe f90a 	bl	80070b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f042 0201 	orr.w	r2, r2, #1
 8008eae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008eb0:	f7ff fbda 	bl	8008668 <HAL_GetTick>
 8008eb4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008eb6:	e012      	b.n	8008ede <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008eb8:	f7ff fbd6 	bl	8008668 <HAL_GetTick>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	2b0a      	cmp	r3, #10
 8008ec4:	d90b      	bls.n	8008ede <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2205      	movs	r2, #5
 8008ed6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e0c5      	b.n	800906a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	f003 0301 	and.w	r3, r3, #1
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d0e5      	beq.n	8008eb8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f022 0202 	bic.w	r2, r2, #2
 8008efa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008efc:	f7ff fbb4 	bl	8008668 <HAL_GetTick>
 8008f00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008f02:	e012      	b.n	8008f2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008f04:	f7ff fbb0 	bl	8008668 <HAL_GetTick>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	2b0a      	cmp	r3, #10
 8008f10:	d90b      	bls.n	8008f2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2205      	movs	r2, #5
 8008f22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e09f      	b.n	800906a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	f003 0302 	and.w	r3, r3, #2
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1e5      	bne.n	8008f04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	7e1b      	ldrb	r3, [r3, #24]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d108      	bne.n	8008f52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f4e:	601a      	str	r2, [r3, #0]
 8008f50:	e007      	b.n	8008f62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	7e5b      	ldrb	r3, [r3, #25]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d108      	bne.n	8008f7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f78:	601a      	str	r2, [r3, #0]
 8008f7a:	e007      	b.n	8008f8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	7e9b      	ldrb	r3, [r3, #26]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d108      	bne.n	8008fa6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f042 0220 	orr.w	r2, r2, #32
 8008fa2:	601a      	str	r2, [r3, #0]
 8008fa4:	e007      	b.n	8008fb6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f022 0220 	bic.w	r2, r2, #32
 8008fb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	7edb      	ldrb	r3, [r3, #27]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d108      	bne.n	8008fd0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f022 0210 	bic.w	r2, r2, #16
 8008fcc:	601a      	str	r2, [r3, #0]
 8008fce:	e007      	b.n	8008fe0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f042 0210 	orr.w	r2, r2, #16
 8008fde:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	7f1b      	ldrb	r3, [r3, #28]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d108      	bne.n	8008ffa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f042 0208 	orr.w	r2, r2, #8
 8008ff6:	601a      	str	r2, [r3, #0]
 8008ff8:	e007      	b.n	800900a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f022 0208 	bic.w	r2, r2, #8
 8009008:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	7f5b      	ldrb	r3, [r3, #29]
 800900e:	2b01      	cmp	r3, #1
 8009010:	d108      	bne.n	8009024 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f042 0204 	orr.w	r2, r2, #4
 8009020:	601a      	str	r2, [r3, #0]
 8009022:	e007      	b.n	8009034 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f022 0204 	bic.w	r2, r2, #4
 8009032:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	689a      	ldr	r2, [r3, #8]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	431a      	orrs	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	431a      	orrs	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	695b      	ldr	r3, [r3, #20]
 8009048:	ea42 0103 	orr.w	r1, r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	1e5a      	subs	r2, r3, #1
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	430a      	orrs	r2, r1
 8009058:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
	...

08009074 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8009074:	b480      	push	{r7}
 8009076:	b087      	sub	sp, #28
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f893 3020 	ldrb.w	r3, [r3, #32]
 800908a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800908c:	7cfb      	ldrb	r3, [r7, #19]
 800908e:	2b01      	cmp	r3, #1
 8009090:	d003      	beq.n	800909a <HAL_CAN_ConfigFilter+0x26>
 8009092:	7cfb      	ldrb	r3, [r7, #19]
 8009094:	2b02      	cmp	r3, #2
 8009096:	f040 80be 	bne.w	8009216 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800909a:	4b65      	ldr	r3, [pc, #404]	; (8009230 <HAL_CAN_ConfigFilter+0x1bc>)
 800909c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80090a4:	f043 0201 	orr.w	r2, r3, #1
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80090ae:	697b      	ldr	r3, [r7, #20]
 80090b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80090b4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c8:	021b      	lsls	r3, r3, #8
 80090ca:	431a      	orrs	r2, r3
 80090cc:	697b      	ldr	r3, [r7, #20]
 80090ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	f003 031f 	and.w	r3, r3, #31
 80090da:	2201      	movs	r2, #1
 80090dc:	fa02 f303 	lsl.w	r3, r2, r3
 80090e0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	43db      	mvns	r3, r3
 80090ec:	401a      	ands	r2, r3
 80090ee:	697b      	ldr	r3, [r7, #20]
 80090f0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	69db      	ldr	r3, [r3, #28]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d123      	bne.n	8009144 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80090fc:	697b      	ldr	r3, [r7, #20]
 80090fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	43db      	mvns	r3, r3
 8009106:	401a      	ands	r2, r3
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685b      	ldr	r3, [r3, #4]
 8009118:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800911a:	683a      	ldr	r2, [r7, #0]
 800911c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800911e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009120:	697b      	ldr	r3, [r7, #20]
 8009122:	3248      	adds	r2, #72	; 0x48
 8009124:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009138:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800913a:	6979      	ldr	r1, [r7, #20]
 800913c:	3348      	adds	r3, #72	; 0x48
 800913e:	00db      	lsls	r3, r3, #3
 8009140:	440b      	add	r3, r1
 8009142:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	69db      	ldr	r3, [r3, #28]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d122      	bne.n	8009192 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	431a      	orrs	r2, r3
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800916c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	3248      	adds	r2, #72	; 0x48
 8009172:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	689b      	ldr	r3, [r3, #8]
 800917a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	68db      	ldr	r3, [r3, #12]
 8009180:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009186:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009188:	6979      	ldr	r1, [r7, #20]
 800918a:	3348      	adds	r3, #72	; 0x48
 800918c:	00db      	lsls	r3, r3, #3
 800918e:	440b      	add	r3, r1
 8009190:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	699b      	ldr	r3, [r3, #24]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d109      	bne.n	80091ae <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	43db      	mvns	r3, r3
 80091a4:	401a      	ands	r2, r3
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80091ac:	e007      	b.n	80091be <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	431a      	orrs	r2, r3
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	691b      	ldr	r3, [r3, #16]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d109      	bne.n	80091da <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	43db      	mvns	r3, r3
 80091d0:	401a      	ands	r2, r3
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80091d8:	e007      	b.n	80091ea <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	431a      	orrs	r2, r3
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	6a1b      	ldr	r3, [r3, #32]
 80091ee:	2b01      	cmp	r3, #1
 80091f0:	d107      	bne.n	8009202 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	431a      	orrs	r2, r3
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009208:	f023 0201 	bic.w	r2, r3, #1
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8009212:	2300      	movs	r3, #0
 8009214:	e006      	b.n	8009224 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009222:	2301      	movs	r3, #1
  }
}
 8009224:	4618      	mov	r0, r3
 8009226:	371c      	adds	r7, #28
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr
 8009230:	40006400 	.word	0x40006400

08009234 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009242:	b2db      	uxtb	r3, r3
 8009244:	2b01      	cmp	r3, #1
 8009246:	d12e      	bne.n	80092a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2202      	movs	r2, #2
 800924c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f022 0201 	bic.w	r2, r2, #1
 800925e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009260:	f7ff fa02 	bl	8008668 <HAL_GetTick>
 8009264:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009266:	e012      	b.n	800928e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009268:	f7ff f9fe 	bl	8008668 <HAL_GetTick>
 800926c:	4602      	mov	r2, r0
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	2b0a      	cmp	r3, #10
 8009274:	d90b      	bls.n	800928e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2205      	movs	r2, #5
 8009286:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e012      	b.n	80092b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	f003 0301 	and.w	r3, r3, #1
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1e5      	bne.n	8009268 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80092a2:	2300      	movs	r3, #0
 80092a4:	e006      	b.n	80092b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80092b2:	2301      	movs	r3, #1
  }
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3710      	adds	r7, #16
 80092b8:	46bd      	mov	sp, r7
 80092ba:	bd80      	pop	{r7, pc}

080092bc <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80092bc:	b480      	push	{r7}
 80092be:	b089      	sub	sp, #36	; 0x24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
 80092c8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80092d0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80092da:	7ffb      	ldrb	r3, [r7, #31]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d003      	beq.n	80092e8 <HAL_CAN_AddTxMessage+0x2c>
 80092e0:	7ffb      	ldrb	r3, [r7, #31]
 80092e2:	2b02      	cmp	r3, #2
 80092e4:	f040 80b8 	bne.w	8009458 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d10a      	bne.n	8009308 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d105      	bne.n	8009308 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80092fc:	69bb      	ldr	r3, [r7, #24]
 80092fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8009302:	2b00      	cmp	r3, #0
 8009304:	f000 80a0 	beq.w	8009448 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	0e1b      	lsrs	r3, r3, #24
 800930c:	f003 0303 	and.w	r3, r3, #3
 8009310:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	2b02      	cmp	r3, #2
 8009316:	d907      	bls.n	8009328 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800931c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e09e      	b.n	8009466 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8009328:	2201      	movs	r2, #1
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	409a      	lsls	r2, r3
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d10d      	bne.n	8009356 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8009344:	68f9      	ldr	r1, [r7, #12]
 8009346:	6809      	ldr	r1, [r1, #0]
 8009348:	431a      	orrs	r2, r3
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	3318      	adds	r3, #24
 800934e:	011b      	lsls	r3, r3, #4
 8009350:	440b      	add	r3, r1
 8009352:	601a      	str	r2, [r3, #0]
 8009354:	e00f      	b.n	8009376 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009360:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8009366:	68f9      	ldr	r1, [r7, #12]
 8009368:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800936a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	3318      	adds	r3, #24
 8009370:	011b      	lsls	r3, r3, #4
 8009372:	440b      	add	r3, r1
 8009374:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	6819      	ldr	r1, [r3, #0]
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	691a      	ldr	r2, [r3, #16]
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	3318      	adds	r3, #24
 8009382:	011b      	lsls	r3, r3, #4
 8009384:	440b      	add	r3, r1
 8009386:	3304      	adds	r3, #4
 8009388:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	7d1b      	ldrb	r3, [r3, #20]
 800938e:	2b01      	cmp	r3, #1
 8009390:	d111      	bne.n	80093b6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	3318      	adds	r3, #24
 800939a:	011b      	lsls	r3, r3, #4
 800939c:	4413      	add	r3, r2
 800939e:	3304      	adds	r3, #4
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	6811      	ldr	r1, [r2, #0]
 80093a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	3318      	adds	r3, #24
 80093ae:	011b      	lsls	r3, r3, #4
 80093b0:	440b      	add	r3, r1
 80093b2:	3304      	adds	r3, #4
 80093b4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	3307      	adds	r3, #7
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	061a      	lsls	r2, r3, #24
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	3306      	adds	r3, #6
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	041b      	lsls	r3, r3, #16
 80093c6:	431a      	orrs	r2, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	3305      	adds	r3, #5
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	021b      	lsls	r3, r3, #8
 80093d0:	4313      	orrs	r3, r2
 80093d2:	687a      	ldr	r2, [r7, #4]
 80093d4:	3204      	adds	r2, #4
 80093d6:	7812      	ldrb	r2, [r2, #0]
 80093d8:	4610      	mov	r0, r2
 80093da:	68fa      	ldr	r2, [r7, #12]
 80093dc:	6811      	ldr	r1, [r2, #0]
 80093de:	ea43 0200 	orr.w	r2, r3, r0
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	011b      	lsls	r3, r3, #4
 80093e6:	440b      	add	r3, r1
 80093e8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80093ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	3303      	adds	r3, #3
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	061a      	lsls	r2, r3, #24
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	3302      	adds	r3, #2
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	041b      	lsls	r3, r3, #16
 80093fe:	431a      	orrs	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	3301      	adds	r3, #1
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	021b      	lsls	r3, r3, #8
 8009408:	4313      	orrs	r3, r2
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	7812      	ldrb	r2, [r2, #0]
 800940e:	4610      	mov	r0, r2
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	6811      	ldr	r1, [r2, #0]
 8009414:	ea43 0200 	orr.w	r2, r3, r0
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	011b      	lsls	r3, r3, #4
 800941c:	440b      	add	r3, r1
 800941e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8009422:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681a      	ldr	r2, [r3, #0]
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	3318      	adds	r3, #24
 800942c:	011b      	lsls	r3, r3, #4
 800942e:	4413      	add	r3, r2
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	6811      	ldr	r1, [r2, #0]
 8009436:	f043 0201 	orr.w	r2, r3, #1
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	3318      	adds	r3, #24
 800943e:	011b      	lsls	r3, r3, #4
 8009440:	440b      	add	r3, r1
 8009442:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8009444:	2300      	movs	r3, #0
 8009446:	e00e      	b.n	8009466 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	e006      	b.n	8009466 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009464:	2301      	movs	r3, #1
  }
}
 8009466:	4618      	mov	r0, r3
 8009468:	3724      	adds	r7, #36	; 0x24
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr

08009472 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8009472:	b480      	push	{r7}
 8009474:	b085      	sub	sp, #20
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800947a:	2300      	movs	r3, #0
 800947c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009484:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8009486:	7afb      	ldrb	r3, [r7, #11]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d002      	beq.n	8009492 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800948c:	7afb      	ldrb	r3, [r7, #11]
 800948e:	2b02      	cmp	r3, #2
 8009490:	d11d      	bne.n	80094ce <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	3301      	adds	r3, #1
 80094a4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d002      	beq.n	80094ba <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	3301      	adds	r3, #1
 80094b8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	689b      	ldr	r3, [r3, #8]
 80094c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d002      	beq.n	80094ce <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	3301      	adds	r3, #1
 80094cc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80094ce:	68fb      	ldr	r3, [r7, #12]
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80094dc:	b480      	push	{r7}
 80094de:	b087      	sub	sp, #28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	607a      	str	r2, [r7, #4]
 80094e8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094f0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80094f2:	7dfb      	ldrb	r3, [r7, #23]
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d003      	beq.n	8009500 <HAL_CAN_GetRxMessage+0x24>
 80094f8:	7dfb      	ldrb	r3, [r7, #23]
 80094fa:	2b02      	cmp	r3, #2
 80094fc:	f040 80f3 	bne.w	80096e6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d10e      	bne.n	8009524 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	68db      	ldr	r3, [r3, #12]
 800950c:	f003 0303 	and.w	r3, r3, #3
 8009510:	2b00      	cmp	r3, #0
 8009512:	d116      	bne.n	8009542 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009518:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009520:	2301      	movs	r3, #1
 8009522:	e0e7      	b.n	80096f4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	f003 0303 	and.w	r3, r3, #3
 800952e:	2b00      	cmp	r3, #0
 8009530:	d107      	bne.n	8009542 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009536:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	e0d8      	b.n	80096f4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	331b      	adds	r3, #27
 800954a:	011b      	lsls	r3, r3, #4
 800954c:	4413      	add	r3, r2
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 0204 	and.w	r2, r3, #4
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	689b      	ldr	r3, [r3, #8]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10c      	bne.n	800957a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681a      	ldr	r2, [r3, #0]
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	331b      	adds	r3, #27
 8009568:	011b      	lsls	r3, r3, #4
 800956a:	4413      	add	r3, r2
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	0d5b      	lsrs	r3, r3, #21
 8009570:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	601a      	str	r2, [r3, #0]
 8009578:	e00b      	b.n	8009592 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681a      	ldr	r2, [r3, #0]
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	331b      	adds	r3, #27
 8009582:	011b      	lsls	r3, r3, #4
 8009584:	4413      	add	r3, r2
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	08db      	lsrs	r3, r3, #3
 800958a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	681a      	ldr	r2, [r3, #0]
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	331b      	adds	r3, #27
 800959a:	011b      	lsls	r3, r3, #4
 800959c:	4413      	add	r3, r2
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 0202 	and.w	r2, r3, #2
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	331b      	adds	r3, #27
 80095b0:	011b      	lsls	r3, r3, #4
 80095b2:	4413      	add	r3, r2
 80095b4:	3304      	adds	r3, #4
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	f003 020f 	and.w	r2, r3, #15
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	331b      	adds	r3, #27
 80095c8:	011b      	lsls	r3, r3, #4
 80095ca:	4413      	add	r3, r2
 80095cc:	3304      	adds	r3, #4
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	0a1b      	lsrs	r3, r3, #8
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681a      	ldr	r2, [r3, #0]
 80095dc:	68bb      	ldr	r3, [r7, #8]
 80095de:	331b      	adds	r3, #27
 80095e0:	011b      	lsls	r3, r3, #4
 80095e2:	4413      	add	r3, r2
 80095e4:	3304      	adds	r3, #4
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	0c1b      	lsrs	r3, r3, #16
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	011b      	lsls	r3, r3, #4
 80095f8:	4413      	add	r3, r2
 80095fa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	b2da      	uxtb	r2, r3
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681a      	ldr	r2, [r3, #0]
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	011b      	lsls	r3, r3, #4
 800960e:	4413      	add	r3, r2
 8009610:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	0a1a      	lsrs	r2, r3, #8
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	3301      	adds	r3, #1
 800961c:	b2d2      	uxtb	r2, r2
 800961e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	68bb      	ldr	r3, [r7, #8]
 8009626:	011b      	lsls	r3, r3, #4
 8009628:	4413      	add	r3, r2
 800962a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	0c1a      	lsrs	r2, r3, #16
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	3302      	adds	r3, #2
 8009636:	b2d2      	uxtb	r2, r2
 8009638:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	011b      	lsls	r3, r3, #4
 8009642:	4413      	add	r3, r2
 8009644:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	0e1a      	lsrs	r2, r3, #24
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	3303      	adds	r3, #3
 8009650:	b2d2      	uxtb	r2, r2
 8009652:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	011b      	lsls	r3, r3, #4
 800965c:	4413      	add	r3, r2
 800965e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	3304      	adds	r3, #4
 8009668:	b2d2      	uxtb	r2, r2
 800966a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681a      	ldr	r2, [r3, #0]
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	011b      	lsls	r3, r3, #4
 8009674:	4413      	add	r3, r2
 8009676:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	0a1a      	lsrs	r2, r3, #8
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	3305      	adds	r3, #5
 8009682:	b2d2      	uxtb	r2, r2
 8009684:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	011b      	lsls	r3, r3, #4
 800968e:	4413      	add	r3, r2
 8009690:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	0c1a      	lsrs	r2, r3, #16
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	3306      	adds	r3, #6
 800969c:	b2d2      	uxtb	r2, r2
 800969e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	011b      	lsls	r3, r3, #4
 80096a8:	4413      	add	r3, r2
 80096aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	0e1a      	lsrs	r2, r3, #24
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	3307      	adds	r3, #7
 80096b6:	b2d2      	uxtb	r2, r2
 80096b8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d108      	bne.n	80096d2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68da      	ldr	r2, [r3, #12]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f042 0220 	orr.w	r2, r2, #32
 80096ce:	60da      	str	r2, [r3, #12]
 80096d0:	e007      	b.n	80096e2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	691a      	ldr	r2, [r3, #16]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f042 0220 	orr.w	r2, r2, #32
 80096e0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	e006      	b.n	80096f4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
  }
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	371c      	adds	r7, #28
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009700:	b480      	push	{r7}
 8009702:	b085      	sub	sp, #20
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009710:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009712:	7bfb      	ldrb	r3, [r7, #15]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d002      	beq.n	800971e <HAL_CAN_ActivateNotification+0x1e>
 8009718:	7bfb      	ldrb	r3, [r7, #15]
 800971a:	2b02      	cmp	r3, #2
 800971c:	d109      	bne.n	8009732 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	6959      	ldr	r1, [r3, #20]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	683a      	ldr	r2, [r7, #0]
 800972a:	430a      	orrs	r2, r1
 800972c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	e006      	b.n	8009740 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009736:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
  }
}
 8009740:	4618      	mov	r0, r3
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b08a      	sub	sp, #40	; 0x28
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009754:	2300      	movs	r3, #0
 8009756:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	695b      	ldr	r3, [r3, #20]
 800975e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68db      	ldr	r3, [r3, #12]
 8009776:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	691b      	ldr	r3, [r3, #16]
 800977e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009788:	6a3b      	ldr	r3, [r7, #32]
 800978a:	f003 0301 	and.w	r3, r3, #1
 800978e:	2b00      	cmp	r3, #0
 8009790:	d07c      	beq.n	800988c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	f003 0301 	and.w	r3, r3, #1
 8009798:	2b00      	cmp	r3, #0
 800979a:	d023      	beq.n	80097e4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2201      	movs	r2, #1
 80097a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80097a4:	69bb      	ldr	r3, [r7, #24]
 80097a6:	f003 0302 	and.w	r3, r3, #2
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d003      	beq.n	80097b6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7f8 f97c 	bl	8001aac <HAL_CAN_TxMailbox0CompleteCallback>
 80097b4:	e016      	b.n	80097e4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	f003 0304 	and.w	r3, r3, #4
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d004      	beq.n	80097ca <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80097c6:	627b      	str	r3, [r7, #36]	; 0x24
 80097c8:	e00c      	b.n	80097e4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	f003 0308 	and.w	r3, r3, #8
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d004      	beq.n	80097de <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80097d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80097da:	627b      	str	r3, [r7, #36]	; 0x24
 80097dc:	e002      	b.n	80097e4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 f97f 	bl	8009ae2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d024      	beq.n	8009838 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80097f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80097f8:	69bb      	ldr	r3, [r7, #24]
 80097fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d003      	beq.n	800980a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	f000 f959 	bl	8009aba <HAL_CAN_TxMailbox1CompleteCallback>
 8009808:	e016      	b.n	8009838 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009810:	2b00      	cmp	r3, #0
 8009812:	d004      	beq.n	800981e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009816:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800981a:	627b      	str	r3, [r7, #36]	; 0x24
 800981c:	e00c      	b.n	8009838 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009824:	2b00      	cmp	r3, #0
 8009826:	d004      	beq.n	8009832 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800982e:	627b      	str	r3, [r7, #36]	; 0x24
 8009830:	e002      	b.n	8009838 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 f95f 	bl	8009af6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009838:	69bb      	ldr	r3, [r7, #24]
 800983a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800983e:	2b00      	cmp	r3, #0
 8009840:	d024      	beq.n	800988c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800984a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009852:	2b00      	cmp	r3, #0
 8009854:	d003      	beq.n	800985e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 f939 	bl	8009ace <HAL_CAN_TxMailbox2CompleteCallback>
 800985c:	e016      	b.n	800988c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d004      	beq.n	8009872 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800986e:	627b      	str	r3, [r7, #36]	; 0x24
 8009870:	e00c      	b.n	800988c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009878:	2b00      	cmp	r3, #0
 800987a:	d004      	beq.n	8009886 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800987c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009882:	627b      	str	r3, [r7, #36]	; 0x24
 8009884:	e002      	b.n	800988c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 f93f 	bl	8009b0a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800988c:	6a3b      	ldr	r3, [r7, #32]
 800988e:	f003 0308 	and.w	r3, r3, #8
 8009892:	2b00      	cmp	r3, #0
 8009894:	d00c      	beq.n	80098b0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	f003 0310 	and.w	r3, r3, #16
 800989c:	2b00      	cmp	r3, #0
 800989e:	d007      	beq.n	80098b0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80098a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2210      	movs	r2, #16
 80098ae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80098b0:	6a3b      	ldr	r3, [r7, #32]
 80098b2:	f003 0304 	and.w	r3, r3, #4
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00b      	beq.n	80098d2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	f003 0308 	and.w	r3, r3, #8
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d006      	beq.n	80098d2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2208      	movs	r2, #8
 80098ca:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f926 	bl	8009b1e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80098d2:	6a3b      	ldr	r3, [r7, #32]
 80098d4:	f003 0302 	and.w	r3, r3, #2
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d009      	beq.n	80098f0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	f003 0303 	and.w	r3, r3, #3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d002      	beq.n	80098f0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7f8 f846 	bl	800197c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80098f0:	6a3b      	ldr	r3, [r7, #32]
 80098f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00c      	beq.n	8009914 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	f003 0310 	and.w	r3, r3, #16
 8009900:	2b00      	cmp	r3, #0
 8009902:	d007      	beq.n	8009914 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800990a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2210      	movs	r2, #16
 8009912:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009914:	6a3b      	ldr	r3, [r7, #32]
 8009916:	f003 0320 	and.w	r3, r3, #32
 800991a:	2b00      	cmp	r3, #0
 800991c:	d00b      	beq.n	8009936 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	f003 0308 	and.w	r3, r3, #8
 8009924:	2b00      	cmp	r3, #0
 8009926:	d006      	beq.n	8009936 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2208      	movs	r2, #8
 800992e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 f8fe 	bl	8009b32 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009936:	6a3b      	ldr	r3, [r7, #32]
 8009938:	f003 0310 	and.w	r3, r3, #16
 800993c:	2b00      	cmp	r3, #0
 800993e:	d009      	beq.n	8009954 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	f003 0303 	and.w	r3, r3, #3
 800994a:	2b00      	cmp	r3, #0
 800994c:	d002      	beq.n	8009954 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f7f8 f84e 	bl	80019f0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009954:	6a3b      	ldr	r3, [r7, #32]
 8009956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00b      	beq.n	8009976 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	f003 0310 	and.w	r3, r3, #16
 8009964:	2b00      	cmp	r3, #0
 8009966:	d006      	beq.n	8009976 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2210      	movs	r2, #16
 800996e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 f8e8 	bl	8009b46 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009976:	6a3b      	ldr	r3, [r7, #32]
 8009978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00b      	beq.n	8009998 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	f003 0308 	and.w	r3, r3, #8
 8009986:	2b00      	cmp	r3, #0
 8009988:	d006      	beq.n	8009998 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2208      	movs	r2, #8
 8009990:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f8e1 	bl	8009b5a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009998:	6a3b      	ldr	r3, [r7, #32]
 800999a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d07b      	beq.n	8009a9a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	f003 0304 	and.w	r3, r3, #4
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d072      	beq.n	8009a92 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80099ac:	6a3b      	ldr	r3, [r7, #32]
 80099ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d008      	beq.n	80099c8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d003      	beq.n	80099c8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80099c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c2:	f043 0301 	orr.w	r3, r3, #1
 80099c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80099c8:	6a3b      	ldr	r3, [r7, #32]
 80099ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d008      	beq.n	80099e4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d003      	beq.n	80099e4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80099dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099de:	f043 0302 	orr.w	r3, r3, #2
 80099e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d008      	beq.n	8009a00 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d003      	beq.n	8009a00 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80099f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fa:	f043 0304 	orr.w	r3, r3, #4
 80099fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009a00:	6a3b      	ldr	r3, [r7, #32]
 8009a02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d043      	beq.n	8009a92 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d03e      	beq.n	8009a92 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009a1a:	2b60      	cmp	r3, #96	; 0x60
 8009a1c:	d02b      	beq.n	8009a76 <HAL_CAN_IRQHandler+0x32a>
 8009a1e:	2b60      	cmp	r3, #96	; 0x60
 8009a20:	d82e      	bhi.n	8009a80 <HAL_CAN_IRQHandler+0x334>
 8009a22:	2b50      	cmp	r3, #80	; 0x50
 8009a24:	d022      	beq.n	8009a6c <HAL_CAN_IRQHandler+0x320>
 8009a26:	2b50      	cmp	r3, #80	; 0x50
 8009a28:	d82a      	bhi.n	8009a80 <HAL_CAN_IRQHandler+0x334>
 8009a2a:	2b40      	cmp	r3, #64	; 0x40
 8009a2c:	d019      	beq.n	8009a62 <HAL_CAN_IRQHandler+0x316>
 8009a2e:	2b40      	cmp	r3, #64	; 0x40
 8009a30:	d826      	bhi.n	8009a80 <HAL_CAN_IRQHandler+0x334>
 8009a32:	2b30      	cmp	r3, #48	; 0x30
 8009a34:	d010      	beq.n	8009a58 <HAL_CAN_IRQHandler+0x30c>
 8009a36:	2b30      	cmp	r3, #48	; 0x30
 8009a38:	d822      	bhi.n	8009a80 <HAL_CAN_IRQHandler+0x334>
 8009a3a:	2b10      	cmp	r3, #16
 8009a3c:	d002      	beq.n	8009a44 <HAL_CAN_IRQHandler+0x2f8>
 8009a3e:	2b20      	cmp	r3, #32
 8009a40:	d005      	beq.n	8009a4e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009a42:	e01d      	b.n	8009a80 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8009a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a46:	f043 0308 	orr.w	r3, r3, #8
 8009a4a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009a4c:	e019      	b.n	8009a82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a50:	f043 0310 	orr.w	r3, r3, #16
 8009a54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009a56:	e014      	b.n	8009a82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	f043 0320 	orr.w	r3, r3, #32
 8009a5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009a60:	e00f      	b.n	8009a82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8009a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009a6a:	e00a      	b.n	8009a82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8009a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009a74:	e005      	b.n	8009a82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009a7e:	e000      	b.n	8009a82 <HAL_CAN_IRQHandler+0x336>
            break;
 8009a80:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	699a      	ldr	r2, [r3, #24]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009a90:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2204      	movs	r2, #4
 8009a98:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d008      	beq.n	8009ab2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa6:	431a      	orrs	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f7f7 ffd9 	bl	8001a64 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8009ab2:	bf00      	nop
 8009ab4:	3728      	adds	r7, #40	; 0x28
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009aba:	b480      	push	{r7}
 8009abc:	b083      	sub	sp, #12
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8009ac2:	bf00      	nop
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr

08009ace <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8009ace:	b480      	push	{r7}
 8009ad0:	b083      	sub	sp, #12
 8009ad2:	af00      	add	r7, sp, #0
 8009ad4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8009ad6:	bf00      	nop
 8009ad8:	370c      	adds	r7, #12
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr

08009ae2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009ae2:	b480      	push	{r7}
 8009ae4:	b083      	sub	sp, #12
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8009aea:	bf00      	nop
 8009aec:	370c      	adds	r7, #12
 8009aee:	46bd      	mov	sp, r7
 8009af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af4:	4770      	bx	lr

08009af6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009af6:	b480      	push	{r7}
 8009af8:	b083      	sub	sp, #12
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8009afe:	bf00      	nop
 8009b00:	370c      	adds	r7, #12
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr

08009b0a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009b0a:	b480      	push	{r7}
 8009b0c:	b083      	sub	sp, #12
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8009b12:	bf00      	nop
 8009b14:	370c      	adds	r7, #12
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8009b1e:	b480      	push	{r7}
 8009b20:	b083      	sub	sp, #12
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009b26:	bf00      	nop
 8009b28:	370c      	adds	r7, #12
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr

08009b32 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8009b32:	b480      	push	{r7}
 8009b34:	b083      	sub	sp, #12
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8009b3a:	bf00      	nop
 8009b3c:	370c      	adds	r7, #12
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b44:	4770      	bx	lr

08009b46 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8009b46:	b480      	push	{r7}
 8009b48:	b083      	sub	sp, #12
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8009b4e:	bf00      	nop
 8009b50:	370c      	adds	r7, #12
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr

08009b5a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8009b5a:	b480      	push	{r7}
 8009b5c:	b083      	sub	sp, #12
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8009b62:	bf00      	nop
 8009b64:	370c      	adds	r7, #12
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8009b6e:	b480      	push	{r7}
 8009b70:	b085      	sub	sp, #20
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b76:	2300      	movs	r3, #0
 8009b78:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b80:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8009b82:	7bbb      	ldrb	r3, [r7, #14]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d002      	beq.n	8009b8e <HAL_CAN_ResetError+0x20>
 8009b88:	7bbb      	ldrb	r3, [r7, #14]
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d103      	bne.n	8009b96 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	625a      	str	r2, [r3, #36]	; 0x24
 8009b94:	e007      	b.n	8009ba6 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b9a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8009ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3714      	adds	r7, #20
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr

08009bb4 <__NVIC_SetPriorityGrouping>:
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	b085      	sub	sp, #20
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f003 0307 	and.w	r3, r3, #7
 8009bc2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009bc4:	4b0c      	ldr	r3, [pc, #48]	; (8009bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009bca:	68ba      	ldr	r2, [r7, #8]
 8009bcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009bd0:	4013      	ands	r3, r2
 8009bd2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009bdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009be0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009be6:	4a04      	ldr	r2, [pc, #16]	; (8009bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	60d3      	str	r3, [r2, #12]
}
 8009bec:	bf00      	nop
 8009bee:	3714      	adds	r7, #20
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf6:	4770      	bx	lr
 8009bf8:	e000ed00 	.word	0xe000ed00

08009bfc <__NVIC_GetPriorityGrouping>:
{
 8009bfc:	b480      	push	{r7}
 8009bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009c00:	4b04      	ldr	r3, [pc, #16]	; (8009c14 <__NVIC_GetPriorityGrouping+0x18>)
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	0a1b      	lsrs	r3, r3, #8
 8009c06:	f003 0307 	and.w	r3, r3, #7
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr
 8009c14:	e000ed00 	.word	0xe000ed00

08009c18 <__NVIC_EnableIRQ>:
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	4603      	mov	r3, r0
 8009c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	db0b      	blt.n	8009c42 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009c2a:	79fb      	ldrb	r3, [r7, #7]
 8009c2c:	f003 021f 	and.w	r2, r3, #31
 8009c30:	4907      	ldr	r1, [pc, #28]	; (8009c50 <__NVIC_EnableIRQ+0x38>)
 8009c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c36:	095b      	lsrs	r3, r3, #5
 8009c38:	2001      	movs	r0, #1
 8009c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8009c3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009c42:	bf00      	nop
 8009c44:	370c      	adds	r7, #12
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
 8009c4e:	bf00      	nop
 8009c50:	e000e100 	.word	0xe000e100

08009c54 <__NVIC_SetPriority>:
{
 8009c54:	b480      	push	{r7}
 8009c56:	b083      	sub	sp, #12
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	6039      	str	r1, [r7, #0]
 8009c5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	db0a      	blt.n	8009c7e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	b2da      	uxtb	r2, r3
 8009c6c:	490c      	ldr	r1, [pc, #48]	; (8009ca0 <__NVIC_SetPriority+0x4c>)
 8009c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c72:	0112      	lsls	r2, r2, #4
 8009c74:	b2d2      	uxtb	r2, r2
 8009c76:	440b      	add	r3, r1
 8009c78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009c7c:	e00a      	b.n	8009c94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	b2da      	uxtb	r2, r3
 8009c82:	4908      	ldr	r1, [pc, #32]	; (8009ca4 <__NVIC_SetPriority+0x50>)
 8009c84:	79fb      	ldrb	r3, [r7, #7]
 8009c86:	f003 030f 	and.w	r3, r3, #15
 8009c8a:	3b04      	subs	r3, #4
 8009c8c:	0112      	lsls	r2, r2, #4
 8009c8e:	b2d2      	uxtb	r2, r2
 8009c90:	440b      	add	r3, r1
 8009c92:	761a      	strb	r2, [r3, #24]
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr
 8009ca0:	e000e100 	.word	0xe000e100
 8009ca4:	e000ed00 	.word	0xe000ed00

08009ca8 <NVIC_EncodePriority>:
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b089      	sub	sp, #36	; 0x24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	f003 0307 	and.w	r3, r3, #7
 8009cba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	f1c3 0307 	rsb	r3, r3, #7
 8009cc2:	2b04      	cmp	r3, #4
 8009cc4:	bf28      	it	cs
 8009cc6:	2304      	movcs	r3, #4
 8009cc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009cca:	69fb      	ldr	r3, [r7, #28]
 8009ccc:	3304      	adds	r3, #4
 8009cce:	2b06      	cmp	r3, #6
 8009cd0:	d902      	bls.n	8009cd8 <NVIC_EncodePriority+0x30>
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	3b03      	subs	r3, #3
 8009cd6:	e000      	b.n	8009cda <NVIC_EncodePriority+0x32>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ce6:	43da      	mvns	r2, r3
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	401a      	ands	r2, r3
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8009cfa:	43d9      	mvns	r1, r3
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009d00:	4313      	orrs	r3, r2
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3724      	adds	r7, #36	; 0x24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr

08009d0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b082      	sub	sp, #8
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f7ff ff4c 	bl	8009bb4 <__NVIC_SetPriorityGrouping>
}
 8009d1c:	bf00      	nop
 8009d1e:	3708      	adds	r7, #8
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b086      	sub	sp, #24
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	607a      	str	r2, [r7, #4]
 8009d30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009d32:	2300      	movs	r3, #0
 8009d34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009d36:	f7ff ff61 	bl	8009bfc <__NVIC_GetPriorityGrouping>
 8009d3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009d3c:	687a      	ldr	r2, [r7, #4]
 8009d3e:	68b9      	ldr	r1, [r7, #8]
 8009d40:	6978      	ldr	r0, [r7, #20]
 8009d42:	f7ff ffb1 	bl	8009ca8 <NVIC_EncodePriority>
 8009d46:	4602      	mov	r2, r0
 8009d48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d4c:	4611      	mov	r1, r2
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f7ff ff80 	bl	8009c54 <__NVIC_SetPriority>
}
 8009d54:	bf00      	nop
 8009d56:	3718      	adds	r7, #24
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	bd80      	pop	{r7, pc}

08009d5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	4603      	mov	r3, r0
 8009d64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7ff ff54 	bl	8009c18 <__NVIC_EnableIRQ>
}
 8009d70:	bf00      	nop
 8009d72:	3708      	adds	r7, #8
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d101      	bne.n	8009d8a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e00e      	b.n	8009da8 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	795b      	ldrb	r3, [r3, #5]
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d105      	bne.n	8009da0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2200      	movs	r2, #0
 8009d98:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7fd fa6e 	bl	800727c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2201      	movs	r2, #1
 8009da4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	3708      	adds	r7, #8
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b086      	sub	sp, #24
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009db8:	2300      	movs	r3, #0
 8009dba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009dbc:	f7fe fc54 	bl	8008668 <HAL_GetTick>
 8009dc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d101      	bne.n	8009dcc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e099      	b.n	8009f00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	2202      	movs	r2, #2
 8009dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f022 0201 	bic.w	r2, r2, #1
 8009dea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009dec:	e00f      	b.n	8009e0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009dee:	f7fe fc3b 	bl	8008668 <HAL_GetTick>
 8009df2:	4602      	mov	r2, r0
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	1ad3      	subs	r3, r2, r3
 8009df8:	2b05      	cmp	r3, #5
 8009dfa:	d908      	bls.n	8009e0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	2220      	movs	r2, #32
 8009e00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2203      	movs	r2, #3
 8009e06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	e078      	b.n	8009f00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f003 0301 	and.w	r3, r3, #1
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1e8      	bne.n	8009dee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009e24:	697a      	ldr	r2, [r7, #20]
 8009e26:	4b38      	ldr	r3, [pc, #224]	; (8009f08 <HAL_DMA_Init+0x158>)
 8009e28:	4013      	ands	r3, r2
 8009e2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685a      	ldr	r2, [r3, #4]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009e3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	691b      	ldr	r3, [r3, #16]
 8009e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009e46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	699b      	ldr	r3, [r3, #24]
 8009e4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009e52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	6a1b      	ldr	r3, [r3, #32]
 8009e58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009e5a:	697a      	ldr	r2, [r7, #20]
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e64:	2b04      	cmp	r3, #4
 8009e66:	d107      	bne.n	8009e78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e70:	4313      	orrs	r3, r2
 8009e72:	697a      	ldr	r2, [r7, #20]
 8009e74:	4313      	orrs	r3, r2
 8009e76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	697a      	ldr	r2, [r7, #20]
 8009e7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	f023 0307 	bic.w	r3, r3, #7
 8009e8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e94:	697a      	ldr	r2, [r7, #20]
 8009e96:	4313      	orrs	r3, r2
 8009e98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e9e:	2b04      	cmp	r3, #4
 8009ea0:	d117      	bne.n	8009ed2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ea6:	697a      	ldr	r2, [r7, #20]
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d00e      	beq.n	8009ed2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fa6f 	bl	800a398 <DMA_CheckFifoParam>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d008      	beq.n	8009ed2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2240      	movs	r2, #64	; 0x40
 8009ec4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2201      	movs	r2, #1
 8009eca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009ece:	2301      	movs	r3, #1
 8009ed0:	e016      	b.n	8009f00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	697a      	ldr	r2, [r7, #20]
 8009ed8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 fa26 	bl	800a32c <DMA_CalcBaseAndBitshift>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ee8:	223f      	movs	r2, #63	; 0x3f
 8009eea:	409a      	lsls	r2, r3
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2201      	movs	r2, #1
 8009efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009efe:	2300      	movs	r3, #0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3718      	adds	r7, #24
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}
 8009f08:	f010803f 	.word	0xf010803f

08009f0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	60f8      	str	r0, [r7, #12]
 8009f14:	60b9      	str	r1, [r7, #8]
 8009f16:	607a      	str	r2, [r7, #4]
 8009f18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d101      	bne.n	8009f32 <HAL_DMA_Start_IT+0x26>
 8009f2e:	2302      	movs	r3, #2
 8009f30:	e040      	b.n	8009fb4 <HAL_DMA_Start_IT+0xa8>
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2201      	movs	r2, #1
 8009f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d12f      	bne.n	8009fa6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2202      	movs	r2, #2
 8009f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	68b9      	ldr	r1, [r7, #8]
 8009f5a:	68f8      	ldr	r0, [r7, #12]
 8009f5c:	f000 f9b8 	bl	800a2d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009f64:	223f      	movs	r2, #63	; 0x3f
 8009f66:	409a      	lsls	r2, r3
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f042 0216 	orr.w	r2, r2, #22
 8009f7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d007      	beq.n	8009f94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f042 0208 	orr.w	r2, r2, #8
 8009f92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f042 0201 	orr.w	r2, r2, #1
 8009fa2:	601a      	str	r2, [r3, #0]
 8009fa4:	e005      	b.n	8009fb2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009fae:	2302      	movs	r3, #2
 8009fb0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3718      	adds	r7, #24
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b086      	sub	sp, #24
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009fc8:	4b8e      	ldr	r3, [pc, #568]	; (800a204 <HAL_DMA_IRQHandler+0x248>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a8e      	ldr	r2, [pc, #568]	; (800a208 <HAL_DMA_IRQHandler+0x24c>)
 8009fce:	fba2 2303 	umull	r2, r3, r2, r3
 8009fd2:	0a9b      	lsrs	r3, r3, #10
 8009fd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fe6:	2208      	movs	r2, #8
 8009fe8:	409a      	lsls	r2, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	4013      	ands	r3, r2
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d01a      	beq.n	800a028 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 0304 	and.w	r3, r3, #4
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d013      	beq.n	800a028 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f022 0204 	bic.w	r2, r2, #4
 800a00e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a014:	2208      	movs	r2, #8
 800a016:	409a      	lsls	r2, r3
 800a018:	693b      	ldr	r3, [r7, #16]
 800a01a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a020:	f043 0201 	orr.w	r2, r3, #1
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a02c:	2201      	movs	r2, #1
 800a02e:	409a      	lsls	r2, r3
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	4013      	ands	r3, r2
 800a034:	2b00      	cmp	r3, #0
 800a036:	d012      	beq.n	800a05e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	695b      	ldr	r3, [r3, #20]
 800a03e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00b      	beq.n	800a05e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a04a:	2201      	movs	r2, #1
 800a04c:	409a      	lsls	r2, r3
 800a04e:	693b      	ldr	r3, [r7, #16]
 800a050:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a056:	f043 0202 	orr.w	r2, r3, #2
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a062:	2204      	movs	r2, #4
 800a064:	409a      	lsls	r2, r3
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	4013      	ands	r3, r2
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d012      	beq.n	800a094 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	f003 0302 	and.w	r3, r3, #2
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00b      	beq.n	800a094 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a080:	2204      	movs	r2, #4
 800a082:	409a      	lsls	r2, r3
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a08c:	f043 0204 	orr.w	r2, r3, #4
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a098:	2210      	movs	r2, #16
 800a09a:	409a      	lsls	r2, r3
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	4013      	ands	r3, r2
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d043      	beq.n	800a12c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0308 	and.w	r3, r3, #8
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d03c      	beq.n	800a12c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0b6:	2210      	movs	r2, #16
 800a0b8:	409a      	lsls	r2, r3
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d018      	beq.n	800a0fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d108      	bne.n	800a0ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d024      	beq.n	800a12c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	4798      	blx	r3
 800a0ea:	e01f      	b.n	800a12c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d01b      	beq.n	800a12c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0f8:	6878      	ldr	r0, [r7, #4]
 800a0fa:	4798      	blx	r3
 800a0fc:	e016      	b.n	800a12c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d107      	bne.n	800a11c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f022 0208 	bic.w	r2, r2, #8
 800a11a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a120:	2b00      	cmp	r3, #0
 800a122:	d003      	beq.n	800a12c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a130:	2220      	movs	r2, #32
 800a132:	409a      	lsls	r2, r3
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	4013      	ands	r3, r2
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f000 808f 	beq.w	800a25c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f003 0310 	and.w	r3, r3, #16
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f000 8087 	beq.w	800a25c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a152:	2220      	movs	r2, #32
 800a154:	409a      	lsls	r2, r3
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a160:	b2db      	uxtb	r3, r3
 800a162:	2b05      	cmp	r3, #5
 800a164:	d136      	bne.n	800a1d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	681a      	ldr	r2, [r3, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f022 0216 	bic.w	r2, r2, #22
 800a174:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	695a      	ldr	r2, [r3, #20]
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a184:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d103      	bne.n	800a196 <HAL_DMA_IRQHandler+0x1da>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a192:	2b00      	cmp	r3, #0
 800a194:	d007      	beq.n	800a1a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f022 0208 	bic.w	r2, r2, #8
 800a1a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1aa:	223f      	movs	r2, #63	; 0x3f
 800a1ac:	409a      	lsls	r2, r3
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2200      	movs	r2, #0
 800a1be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d07e      	beq.n	800a2c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	4798      	blx	r3
        }
        return;
 800a1d2:	e079      	b.n	800a2c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d01d      	beq.n	800a21e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10d      	bne.n	800a20c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d031      	beq.n	800a25c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1fc:	6878      	ldr	r0, [r7, #4]
 800a1fe:	4798      	blx	r3
 800a200:	e02c      	b.n	800a25c <HAL_DMA_IRQHandler+0x2a0>
 800a202:	bf00      	nop
 800a204:	20000010 	.word	0x20000010
 800a208:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a210:	2b00      	cmp	r3, #0
 800a212:	d023      	beq.n	800a25c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	4798      	blx	r3
 800a21c:	e01e      	b.n	800a25c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d10f      	bne.n	800a24c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	681a      	ldr	r2, [r3, #0]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f022 0210 	bic.w	r2, r2, #16
 800a23a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a250:	2b00      	cmp	r3, #0
 800a252:	d003      	beq.n	800a25c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a258:	6878      	ldr	r0, [r7, #4]
 800a25a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a260:	2b00      	cmp	r3, #0
 800a262:	d032      	beq.n	800a2ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a268:	f003 0301 	and.w	r3, r3, #1
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d022      	beq.n	800a2b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2205      	movs	r2, #5
 800a274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f022 0201 	bic.w	r2, r2, #1
 800a286:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	3301      	adds	r3, #1
 800a28c:	60bb      	str	r3, [r7, #8]
 800a28e:	697a      	ldr	r2, [r7, #20]
 800a290:	429a      	cmp	r2, r3
 800a292:	d307      	bcc.n	800a2a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f003 0301 	and.w	r3, r3, #1
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d1f2      	bne.n	800a288 <HAL_DMA_IRQHandler+0x2cc>
 800a2a2:	e000      	b.n	800a2a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800a2a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d005      	beq.n	800a2ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a2c2:	6878      	ldr	r0, [r7, #4]
 800a2c4:	4798      	blx	r3
 800a2c6:	e000      	b.n	800a2ca <HAL_DMA_IRQHandler+0x30e>
        return;
 800a2c8:	bf00      	nop
    }
  }
}
 800a2ca:	3718      	adds	r7, #24
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b085      	sub	sp, #20
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
 800a2dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	681a      	ldr	r2, [r3, #0]
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a2ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	683a      	ldr	r2, [r7, #0]
 800a2f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	2b40      	cmp	r3, #64	; 0x40
 800a2fc:	d108      	bne.n	800a310 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	68ba      	ldr	r2, [r7, #8]
 800a30c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a30e:	e007      	b.n	800a320 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	68ba      	ldr	r2, [r7, #8]
 800a316:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	687a      	ldr	r2, [r7, #4]
 800a31e:	60da      	str	r2, [r3, #12]
}
 800a320:	bf00      	nop
 800a322:	3714      	adds	r7, #20
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b085      	sub	sp, #20
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	b2db      	uxtb	r3, r3
 800a33a:	3b10      	subs	r3, #16
 800a33c:	4a14      	ldr	r2, [pc, #80]	; (800a390 <DMA_CalcBaseAndBitshift+0x64>)
 800a33e:	fba2 2303 	umull	r2, r3, r2, r3
 800a342:	091b      	lsrs	r3, r3, #4
 800a344:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a346:	4a13      	ldr	r2, [pc, #76]	; (800a394 <DMA_CalcBaseAndBitshift+0x68>)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	4413      	add	r3, r2
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	461a      	mov	r2, r3
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2b03      	cmp	r3, #3
 800a358:	d909      	bls.n	800a36e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a362:	f023 0303 	bic.w	r3, r3, #3
 800a366:	1d1a      	adds	r2, r3, #4
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	659a      	str	r2, [r3, #88]	; 0x58
 800a36c:	e007      	b.n	800a37e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a376:	f023 0303 	bic.w	r3, r3, #3
 800a37a:	687a      	ldr	r2, [r7, #4]
 800a37c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a382:	4618      	mov	r0, r3
 800a384:	3714      	adds	r7, #20
 800a386:	46bd      	mov	sp, r7
 800a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	aaaaaaab 	.word	0xaaaaaaab
 800a394:	08016494 	.word	0x08016494

0800a398 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a398:	b480      	push	{r7}
 800a39a:	b085      	sub	sp, #20
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	699b      	ldr	r3, [r3, #24]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d11f      	bne.n	800a3f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	2b03      	cmp	r3, #3
 800a3b6:	d856      	bhi.n	800a466 <DMA_CheckFifoParam+0xce>
 800a3b8:	a201      	add	r2, pc, #4	; (adr r2, 800a3c0 <DMA_CheckFifoParam+0x28>)
 800a3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3be:	bf00      	nop
 800a3c0:	0800a3d1 	.word	0x0800a3d1
 800a3c4:	0800a3e3 	.word	0x0800a3e3
 800a3c8:	0800a3d1 	.word	0x0800a3d1
 800a3cc:	0800a467 	.word	0x0800a467
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d046      	beq.n	800a46a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a3e0:	e043      	b.n	800a46a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a3ea:	d140      	bne.n	800a46e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a3f0:	e03d      	b.n	800a46e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	699b      	ldr	r3, [r3, #24]
 800a3f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3fa:	d121      	bne.n	800a440 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	2b03      	cmp	r3, #3
 800a400:	d837      	bhi.n	800a472 <DMA_CheckFifoParam+0xda>
 800a402:	a201      	add	r2, pc, #4	; (adr r2, 800a408 <DMA_CheckFifoParam+0x70>)
 800a404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a408:	0800a419 	.word	0x0800a419
 800a40c:	0800a41f 	.word	0x0800a41f
 800a410:	0800a419 	.word	0x0800a419
 800a414:	0800a431 	.word	0x0800a431
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	73fb      	strb	r3, [r7, #15]
      break;
 800a41c:	e030      	b.n	800a480 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a422:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a426:	2b00      	cmp	r3, #0
 800a428:	d025      	beq.n	800a476 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a42a:	2301      	movs	r3, #1
 800a42c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a42e:	e022      	b.n	800a476 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a434:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a438:	d11f      	bne.n	800a47a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a43e:	e01c      	b.n	800a47a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	2b02      	cmp	r3, #2
 800a444:	d903      	bls.n	800a44e <DMA_CheckFifoParam+0xb6>
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	2b03      	cmp	r3, #3
 800a44a:	d003      	beq.n	800a454 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a44c:	e018      	b.n	800a480 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a44e:	2301      	movs	r3, #1
 800a450:	73fb      	strb	r3, [r7, #15]
      break;
 800a452:	e015      	b.n	800a480 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a458:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00e      	beq.n	800a47e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a460:	2301      	movs	r3, #1
 800a462:	73fb      	strb	r3, [r7, #15]
      break;
 800a464:	e00b      	b.n	800a47e <DMA_CheckFifoParam+0xe6>
      break;
 800a466:	bf00      	nop
 800a468:	e00a      	b.n	800a480 <DMA_CheckFifoParam+0xe8>
      break;
 800a46a:	bf00      	nop
 800a46c:	e008      	b.n	800a480 <DMA_CheckFifoParam+0xe8>
      break;
 800a46e:	bf00      	nop
 800a470:	e006      	b.n	800a480 <DMA_CheckFifoParam+0xe8>
      break;
 800a472:	bf00      	nop
 800a474:	e004      	b.n	800a480 <DMA_CheckFifoParam+0xe8>
      break;
 800a476:	bf00      	nop
 800a478:	e002      	b.n	800a480 <DMA_CheckFifoParam+0xe8>
      break;   
 800a47a:	bf00      	nop
 800a47c:	e000      	b.n	800a480 <DMA_CheckFifoParam+0xe8>
      break;
 800a47e:	bf00      	nop
    }
  } 
  
  return status; 
 800a480:	7bfb      	ldrb	r3, [r7, #15]
}
 800a482:	4618      	mov	r0, r3
 800a484:	3714      	adds	r7, #20
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr
 800a48e:	bf00      	nop

0800a490 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a490:	b480      	push	{r7}
 800a492:	b089      	sub	sp, #36	; 0x24
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a49a:	2300      	movs	r3, #0
 800a49c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	61fb      	str	r3, [r7, #28]
 800a4aa:	e16b      	b.n	800a784 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a4b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	697a      	ldr	r2, [r7, #20]
 800a4bc:	4013      	ands	r3, r2
 800a4be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a4c0:	693a      	ldr	r2, [r7, #16]
 800a4c2:	697b      	ldr	r3, [r7, #20]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	f040 815a 	bne.w	800a77e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	f003 0303 	and.w	r3, r3, #3
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d005      	beq.n	800a4e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a4d6:	683b      	ldr	r3, [r7, #0]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a4de:	2b02      	cmp	r3, #2
 800a4e0:	d130      	bne.n	800a544 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	005b      	lsls	r3, r3, #1
 800a4ec:	2203      	movs	r2, #3
 800a4ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a4f2:	43db      	mvns	r3, r3
 800a4f4:	69ba      	ldr	r2, [r7, #24]
 800a4f6:	4013      	ands	r3, r2
 800a4f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	68da      	ldr	r2, [r3, #12]
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	005b      	lsls	r3, r3, #1
 800a502:	fa02 f303 	lsl.w	r3, r2, r3
 800a506:	69ba      	ldr	r2, [r7, #24]
 800a508:	4313      	orrs	r3, r2
 800a50a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	69ba      	ldr	r2, [r7, #24]
 800a510:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a518:	2201      	movs	r2, #1
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	fa02 f303 	lsl.w	r3, r2, r3
 800a520:	43db      	mvns	r3, r3
 800a522:	69ba      	ldr	r2, [r7, #24]
 800a524:	4013      	ands	r3, r2
 800a526:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	091b      	lsrs	r3, r3, #4
 800a52e:	f003 0201 	and.w	r2, r3, #1
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	fa02 f303 	lsl.w	r3, r2, r3
 800a538:	69ba      	ldr	r2, [r7, #24]
 800a53a:	4313      	orrs	r3, r2
 800a53c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	69ba      	ldr	r2, [r7, #24]
 800a542:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	685b      	ldr	r3, [r3, #4]
 800a548:	f003 0303 	and.w	r3, r3, #3
 800a54c:	2b03      	cmp	r3, #3
 800a54e:	d017      	beq.n	800a580 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	005b      	lsls	r3, r3, #1
 800a55a:	2203      	movs	r2, #3
 800a55c:	fa02 f303 	lsl.w	r3, r2, r3
 800a560:	43db      	mvns	r3, r3
 800a562:	69ba      	ldr	r2, [r7, #24]
 800a564:	4013      	ands	r3, r2
 800a566:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	689a      	ldr	r2, [r3, #8]
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	005b      	lsls	r3, r3, #1
 800a570:	fa02 f303 	lsl.w	r3, r2, r3
 800a574:	69ba      	ldr	r2, [r7, #24]
 800a576:	4313      	orrs	r3, r2
 800a578:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	69ba      	ldr	r2, [r7, #24]
 800a57e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	f003 0303 	and.w	r3, r3, #3
 800a588:	2b02      	cmp	r3, #2
 800a58a:	d123      	bne.n	800a5d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	08da      	lsrs	r2, r3, #3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	3208      	adds	r2, #8
 800a594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a598:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a59a:	69fb      	ldr	r3, [r7, #28]
 800a59c:	f003 0307 	and.w	r3, r3, #7
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	220f      	movs	r2, #15
 800a5a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5a8:	43db      	mvns	r3, r3
 800a5aa:	69ba      	ldr	r2, [r7, #24]
 800a5ac:	4013      	ands	r3, r2
 800a5ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	691a      	ldr	r2, [r3, #16]
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	f003 0307 	and.w	r3, r3, #7
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	fa02 f303 	lsl.w	r3, r2, r3
 800a5c0:	69ba      	ldr	r2, [r7, #24]
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	08da      	lsrs	r2, r3, #3
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	3208      	adds	r2, #8
 800a5ce:	69b9      	ldr	r1, [r7, #24]
 800a5d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a5da:	69fb      	ldr	r3, [r7, #28]
 800a5dc:	005b      	lsls	r3, r3, #1
 800a5de:	2203      	movs	r2, #3
 800a5e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5e4:	43db      	mvns	r3, r3
 800a5e6:	69ba      	ldr	r2, [r7, #24]
 800a5e8:	4013      	ands	r3, r2
 800a5ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	f003 0203 	and.w	r2, r3, #3
 800a5f4:	69fb      	ldr	r3, [r7, #28]
 800a5f6:	005b      	lsls	r3, r3, #1
 800a5f8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5fc:	69ba      	ldr	r2, [r7, #24]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	69ba      	ldr	r2, [r7, #24]
 800a606:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a610:	2b00      	cmp	r3, #0
 800a612:	f000 80b4 	beq.w	800a77e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a616:	2300      	movs	r3, #0
 800a618:	60fb      	str	r3, [r7, #12]
 800a61a:	4b60      	ldr	r3, [pc, #384]	; (800a79c <HAL_GPIO_Init+0x30c>)
 800a61c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a61e:	4a5f      	ldr	r2, [pc, #380]	; (800a79c <HAL_GPIO_Init+0x30c>)
 800a620:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a624:	6453      	str	r3, [r2, #68]	; 0x44
 800a626:	4b5d      	ldr	r3, [pc, #372]	; (800a79c <HAL_GPIO_Init+0x30c>)
 800a628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a62a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a62e:	60fb      	str	r3, [r7, #12]
 800a630:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a632:	4a5b      	ldr	r2, [pc, #364]	; (800a7a0 <HAL_GPIO_Init+0x310>)
 800a634:	69fb      	ldr	r3, [r7, #28]
 800a636:	089b      	lsrs	r3, r3, #2
 800a638:	3302      	adds	r3, #2
 800a63a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a63e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a640:	69fb      	ldr	r3, [r7, #28]
 800a642:	f003 0303 	and.w	r3, r3, #3
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	220f      	movs	r2, #15
 800a64a:	fa02 f303 	lsl.w	r3, r2, r3
 800a64e:	43db      	mvns	r3, r3
 800a650:	69ba      	ldr	r2, [r7, #24]
 800a652:	4013      	ands	r3, r2
 800a654:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	4a52      	ldr	r2, [pc, #328]	; (800a7a4 <HAL_GPIO_Init+0x314>)
 800a65a:	4293      	cmp	r3, r2
 800a65c:	d02b      	beq.n	800a6b6 <HAL_GPIO_Init+0x226>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	4a51      	ldr	r2, [pc, #324]	; (800a7a8 <HAL_GPIO_Init+0x318>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d025      	beq.n	800a6b2 <HAL_GPIO_Init+0x222>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	4a50      	ldr	r2, [pc, #320]	; (800a7ac <HAL_GPIO_Init+0x31c>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d01f      	beq.n	800a6ae <HAL_GPIO_Init+0x21e>
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	4a4f      	ldr	r2, [pc, #316]	; (800a7b0 <HAL_GPIO_Init+0x320>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d019      	beq.n	800a6aa <HAL_GPIO_Init+0x21a>
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	4a4e      	ldr	r2, [pc, #312]	; (800a7b4 <HAL_GPIO_Init+0x324>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d013      	beq.n	800a6a6 <HAL_GPIO_Init+0x216>
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4a4d      	ldr	r2, [pc, #308]	; (800a7b8 <HAL_GPIO_Init+0x328>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d00d      	beq.n	800a6a2 <HAL_GPIO_Init+0x212>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4a4c      	ldr	r2, [pc, #304]	; (800a7bc <HAL_GPIO_Init+0x32c>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d007      	beq.n	800a69e <HAL_GPIO_Init+0x20e>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	4a4b      	ldr	r2, [pc, #300]	; (800a7c0 <HAL_GPIO_Init+0x330>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d101      	bne.n	800a69a <HAL_GPIO_Init+0x20a>
 800a696:	2307      	movs	r3, #7
 800a698:	e00e      	b.n	800a6b8 <HAL_GPIO_Init+0x228>
 800a69a:	2308      	movs	r3, #8
 800a69c:	e00c      	b.n	800a6b8 <HAL_GPIO_Init+0x228>
 800a69e:	2306      	movs	r3, #6
 800a6a0:	e00a      	b.n	800a6b8 <HAL_GPIO_Init+0x228>
 800a6a2:	2305      	movs	r3, #5
 800a6a4:	e008      	b.n	800a6b8 <HAL_GPIO_Init+0x228>
 800a6a6:	2304      	movs	r3, #4
 800a6a8:	e006      	b.n	800a6b8 <HAL_GPIO_Init+0x228>
 800a6aa:	2303      	movs	r3, #3
 800a6ac:	e004      	b.n	800a6b8 <HAL_GPIO_Init+0x228>
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	e002      	b.n	800a6b8 <HAL_GPIO_Init+0x228>
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e000      	b.n	800a6b8 <HAL_GPIO_Init+0x228>
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	69fa      	ldr	r2, [r7, #28]
 800a6ba:	f002 0203 	and.w	r2, r2, #3
 800a6be:	0092      	lsls	r2, r2, #2
 800a6c0:	4093      	lsls	r3, r2
 800a6c2:	69ba      	ldr	r2, [r7, #24]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a6c8:	4935      	ldr	r1, [pc, #212]	; (800a7a0 <HAL_GPIO_Init+0x310>)
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	089b      	lsrs	r3, r3, #2
 800a6ce:	3302      	adds	r3, #2
 800a6d0:	69ba      	ldr	r2, [r7, #24]
 800a6d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a6d6:	4b3b      	ldr	r3, [pc, #236]	; (800a7c4 <HAL_GPIO_Init+0x334>)
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a6dc:	693b      	ldr	r3, [r7, #16]
 800a6de:	43db      	mvns	r3, r3
 800a6e0:	69ba      	ldr	r2, [r7, #24]
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d003      	beq.n	800a6fa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a6f2:	69ba      	ldr	r2, [r7, #24]
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a6fa:	4a32      	ldr	r2, [pc, #200]	; (800a7c4 <HAL_GPIO_Init+0x334>)
 800a6fc:	69bb      	ldr	r3, [r7, #24]
 800a6fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a700:	4b30      	ldr	r3, [pc, #192]	; (800a7c4 <HAL_GPIO_Init+0x334>)
 800a702:	68db      	ldr	r3, [r3, #12]
 800a704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	43db      	mvns	r3, r3
 800a70a:	69ba      	ldr	r2, [r7, #24]
 800a70c:	4013      	ands	r3, r2
 800a70e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d003      	beq.n	800a724 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800a71c:	69ba      	ldr	r2, [r7, #24]
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	4313      	orrs	r3, r2
 800a722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a724:	4a27      	ldr	r2, [pc, #156]	; (800a7c4 <HAL_GPIO_Init+0x334>)
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800a72a:	4b26      	ldr	r3, [pc, #152]	; (800a7c4 <HAL_GPIO_Init+0x334>)
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	43db      	mvns	r3, r3
 800a734:	69ba      	ldr	r2, [r7, #24]
 800a736:	4013      	ands	r3, r2
 800a738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a742:	2b00      	cmp	r3, #0
 800a744:	d003      	beq.n	800a74e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800a746:	69ba      	ldr	r2, [r7, #24]
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	4313      	orrs	r3, r2
 800a74c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a74e:	4a1d      	ldr	r2, [pc, #116]	; (800a7c4 <HAL_GPIO_Init+0x334>)
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a754:	4b1b      	ldr	r3, [pc, #108]	; (800a7c4 <HAL_GPIO_Init+0x334>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	43db      	mvns	r3, r3
 800a75e:	69ba      	ldr	r2, [r7, #24]
 800a760:	4013      	ands	r3, r2
 800a762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d003      	beq.n	800a778 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800a770:	69ba      	ldr	r2, [r7, #24]
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	4313      	orrs	r3, r2
 800a776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a778:	4a12      	ldr	r2, [pc, #72]	; (800a7c4 <HAL_GPIO_Init+0x334>)
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	3301      	adds	r3, #1
 800a782:	61fb      	str	r3, [r7, #28]
 800a784:	69fb      	ldr	r3, [r7, #28]
 800a786:	2b0f      	cmp	r3, #15
 800a788:	f67f ae90 	bls.w	800a4ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a78c:	bf00      	nop
 800a78e:	bf00      	nop
 800a790:	3724      	adds	r7, #36	; 0x24
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	40023800 	.word	0x40023800
 800a7a0:	40013800 	.word	0x40013800
 800a7a4:	40020000 	.word	0x40020000
 800a7a8:	40020400 	.word	0x40020400
 800a7ac:	40020800 	.word	0x40020800
 800a7b0:	40020c00 	.word	0x40020c00
 800a7b4:	40021000 	.word	0x40021000
 800a7b8:	40021400 	.word	0x40021400
 800a7bc:	40021800 	.word	0x40021800
 800a7c0:	40021c00 	.word	0x40021c00
 800a7c4:	40013c00 	.word	0x40013c00

0800a7c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	807b      	strh	r3, [r7, #2]
 800a7d4:	4613      	mov	r3, r2
 800a7d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a7d8:	787b      	ldrb	r3, [r7, #1]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d003      	beq.n	800a7e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a7de:	887a      	ldrh	r2, [r7, #2]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a7e4:	e003      	b.n	800a7ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a7e6:	887b      	ldrh	r3, [r7, #2]
 800a7e8:	041a      	lsls	r2, r3, #16
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	619a      	str	r2, [r3, #24]
}
 800a7ee:	bf00      	nop
 800a7f0:	370c      	adds	r7, #12
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr
	...

0800a7fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	4603      	mov	r3, r0
 800a804:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a806:	4b08      	ldr	r3, [pc, #32]	; (800a828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a808:	695a      	ldr	r2, [r3, #20]
 800a80a:	88fb      	ldrh	r3, [r7, #6]
 800a80c:	4013      	ands	r3, r2
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d006      	beq.n	800a820 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a812:	4a05      	ldr	r2, [pc, #20]	; (800a828 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a814:	88fb      	ldrh	r3, [r7, #6]
 800a816:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a818:	88fb      	ldrh	r3, [r7, #6]
 800a81a:	4618      	mov	r0, r3
 800a81c:	f002 fac9 	bl	800cdb2 <HAL_GPIO_EXTI_Callback>
  }
}
 800a820:	bf00      	nop
 800a822:	3708      	adds	r7, #8
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	40013c00 	.word	0x40013c00

0800a82c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d101      	bne.n	800a83e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	e12b      	b.n	800aa96 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a844:	b2db      	uxtb	r3, r3
 800a846:	2b00      	cmp	r3, #0
 800a848:	d106      	bne.n	800a858 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f7fc febe 	bl	80075d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2224      	movs	r2, #36	; 0x24
 800a85c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	681a      	ldr	r2, [r3, #0]
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f022 0201 	bic.w	r2, r2, #1
 800a86e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a87e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a88e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a890:	f000 fd7e 	bl	800b390 <HAL_RCC_GetPCLK1Freq>
 800a894:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	4a81      	ldr	r2, [pc, #516]	; (800aaa0 <HAL_I2C_Init+0x274>)
 800a89c:	4293      	cmp	r3, r2
 800a89e:	d807      	bhi.n	800a8b0 <HAL_I2C_Init+0x84>
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	4a80      	ldr	r2, [pc, #512]	; (800aaa4 <HAL_I2C_Init+0x278>)
 800a8a4:	4293      	cmp	r3, r2
 800a8a6:	bf94      	ite	ls
 800a8a8:	2301      	movls	r3, #1
 800a8aa:	2300      	movhi	r3, #0
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	e006      	b.n	800a8be <HAL_I2C_Init+0x92>
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	4a7d      	ldr	r2, [pc, #500]	; (800aaa8 <HAL_I2C_Init+0x27c>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	bf94      	ite	ls
 800a8b8:	2301      	movls	r3, #1
 800a8ba:	2300      	movhi	r3, #0
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d001      	beq.n	800a8c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e0e7      	b.n	800aa96 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	4a78      	ldr	r2, [pc, #480]	; (800aaac <HAL_I2C_Init+0x280>)
 800a8ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ce:	0c9b      	lsrs	r3, r3, #18
 800a8d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	685b      	ldr	r3, [r3, #4]
 800a8d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	68ba      	ldr	r2, [r7, #8]
 800a8e2:	430a      	orrs	r2, r1
 800a8e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	6a1b      	ldr	r3, [r3, #32]
 800a8ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	4a6a      	ldr	r2, [pc, #424]	; (800aaa0 <HAL_I2C_Init+0x274>)
 800a8f6:	4293      	cmp	r3, r2
 800a8f8:	d802      	bhi.n	800a900 <HAL_I2C_Init+0xd4>
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	e009      	b.n	800a914 <HAL_I2C_Init+0xe8>
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a906:	fb02 f303 	mul.w	r3, r2, r3
 800a90a:	4a69      	ldr	r2, [pc, #420]	; (800aab0 <HAL_I2C_Init+0x284>)
 800a90c:	fba2 2303 	umull	r2, r3, r2, r3
 800a910:	099b      	lsrs	r3, r3, #6
 800a912:	3301      	adds	r3, #1
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	6812      	ldr	r2, [r2, #0]
 800a918:	430b      	orrs	r3, r1
 800a91a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	69db      	ldr	r3, [r3, #28]
 800a922:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a926:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	495c      	ldr	r1, [pc, #368]	; (800aaa0 <HAL_I2C_Init+0x274>)
 800a930:	428b      	cmp	r3, r1
 800a932:	d819      	bhi.n	800a968 <HAL_I2C_Init+0x13c>
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	1e59      	subs	r1, r3, #1
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	005b      	lsls	r3, r3, #1
 800a93e:	fbb1 f3f3 	udiv	r3, r1, r3
 800a942:	1c59      	adds	r1, r3, #1
 800a944:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a948:	400b      	ands	r3, r1
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00a      	beq.n	800a964 <HAL_I2C_Init+0x138>
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	1e59      	subs	r1, r3, #1
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	005b      	lsls	r3, r3, #1
 800a958:	fbb1 f3f3 	udiv	r3, r1, r3
 800a95c:	3301      	adds	r3, #1
 800a95e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a962:	e051      	b.n	800aa08 <HAL_I2C_Init+0x1dc>
 800a964:	2304      	movs	r3, #4
 800a966:	e04f      	b.n	800aa08 <HAL_I2C_Init+0x1dc>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d111      	bne.n	800a994 <HAL_I2C_Init+0x168>
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	1e58      	subs	r0, r3, #1
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6859      	ldr	r1, [r3, #4]
 800a978:	460b      	mov	r3, r1
 800a97a:	005b      	lsls	r3, r3, #1
 800a97c:	440b      	add	r3, r1
 800a97e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a982:	3301      	adds	r3, #1
 800a984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a988:	2b00      	cmp	r3, #0
 800a98a:	bf0c      	ite	eq
 800a98c:	2301      	moveq	r3, #1
 800a98e:	2300      	movne	r3, #0
 800a990:	b2db      	uxtb	r3, r3
 800a992:	e012      	b.n	800a9ba <HAL_I2C_Init+0x18e>
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	1e58      	subs	r0, r3, #1
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6859      	ldr	r1, [r3, #4]
 800a99c:	460b      	mov	r3, r1
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	440b      	add	r3, r1
 800a9a2:	0099      	lsls	r1, r3, #2
 800a9a4:	440b      	add	r3, r1
 800a9a6:	fbb0 f3f3 	udiv	r3, r0, r3
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	bf0c      	ite	eq
 800a9b4:	2301      	moveq	r3, #1
 800a9b6:	2300      	movne	r3, #0
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d001      	beq.n	800a9c2 <HAL_I2C_Init+0x196>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e022      	b.n	800aa08 <HAL_I2C_Init+0x1dc>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	689b      	ldr	r3, [r3, #8]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d10e      	bne.n	800a9e8 <HAL_I2C_Init+0x1bc>
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	1e58      	subs	r0, r3, #1
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6859      	ldr	r1, [r3, #4]
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	005b      	lsls	r3, r3, #1
 800a9d6:	440b      	add	r3, r1
 800a9d8:	fbb0 f3f3 	udiv	r3, r0, r3
 800a9dc:	3301      	adds	r3, #1
 800a9de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a9e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9e6:	e00f      	b.n	800aa08 <HAL_I2C_Init+0x1dc>
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	1e58      	subs	r0, r3, #1
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6859      	ldr	r1, [r3, #4]
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	440b      	add	r3, r1
 800a9f6:	0099      	lsls	r1, r3, #2
 800a9f8:	440b      	add	r3, r1
 800a9fa:	fbb0 f3f3 	udiv	r3, r0, r3
 800a9fe:	3301      	adds	r3, #1
 800aa00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa04:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800aa08:	6879      	ldr	r1, [r7, #4]
 800aa0a:	6809      	ldr	r1, [r1, #0]
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	69da      	ldr	r2, [r3, #28]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6a1b      	ldr	r3, [r3, #32]
 800aa22:	431a      	orrs	r2, r3
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	430a      	orrs	r2, r1
 800aa2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800aa36:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	6911      	ldr	r1, [r2, #16]
 800aa3e:	687a      	ldr	r2, [r7, #4]
 800aa40:	68d2      	ldr	r2, [r2, #12]
 800aa42:	4311      	orrs	r1, r2
 800aa44:	687a      	ldr	r2, [r7, #4]
 800aa46:	6812      	ldr	r2, [r2, #0]
 800aa48:	430b      	orrs	r3, r1
 800aa4a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	695a      	ldr	r2, [r3, #20]
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	699b      	ldr	r3, [r3, #24]
 800aa5e:	431a      	orrs	r2, r3
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	430a      	orrs	r2, r1
 800aa66:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	f042 0201 	orr.w	r2, r2, #1
 800aa76:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	2220      	movs	r2, #32
 800aa82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}
 800aa9e:	bf00      	nop
 800aaa0:	000186a0 	.word	0x000186a0
 800aaa4:	001e847f 	.word	0x001e847f
 800aaa8:	003d08ff 	.word	0x003d08ff
 800aaac:	431bde83 	.word	0x431bde83
 800aab0:	10624dd3 	.word	0x10624dd3

0800aab4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b086      	sub	sp, #24
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d101      	bne.n	800aac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aac2:	2301      	movs	r3, #1
 800aac4:	e267      	b.n	800af96 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f003 0301 	and.w	r3, r3, #1
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d075      	beq.n	800abbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aad2:	4b88      	ldr	r3, [pc, #544]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	f003 030c 	and.w	r3, r3, #12
 800aada:	2b04      	cmp	r3, #4
 800aadc:	d00c      	beq.n	800aaf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aade:	4b85      	ldr	r3, [pc, #532]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800aae0:	689b      	ldr	r3, [r3, #8]
 800aae2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800aae6:	2b08      	cmp	r3, #8
 800aae8:	d112      	bne.n	800ab10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800aaea:	4b82      	ldr	r3, [pc, #520]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aaf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aaf6:	d10b      	bne.n	800ab10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aaf8:	4b7e      	ldr	r3, [pc, #504]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d05b      	beq.n	800abbc <HAL_RCC_OscConfig+0x108>
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d157      	bne.n	800abbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	e242      	b.n	800af96 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab18:	d106      	bne.n	800ab28 <HAL_RCC_OscConfig+0x74>
 800ab1a:	4b76      	ldr	r3, [pc, #472]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4a75      	ldr	r2, [pc, #468]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800ab20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab24:	6013      	str	r3, [r2, #0]
 800ab26:	e01d      	b.n	800ab64 <HAL_RCC_OscConfig+0xb0>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab30:	d10c      	bne.n	800ab4c <HAL_RCC_OscConfig+0x98>
 800ab32:	4b70      	ldr	r3, [pc, #448]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a6f      	ldr	r2, [pc, #444]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800ab38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ab3c:	6013      	str	r3, [r2, #0]
 800ab3e:	4b6d      	ldr	r3, [pc, #436]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	4a6c      	ldr	r2, [pc, #432]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800ab44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ab48:	6013      	str	r3, [r2, #0]
 800ab4a:	e00b      	b.n	800ab64 <HAL_RCC_OscConfig+0xb0>
 800ab4c:	4b69      	ldr	r3, [pc, #420]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	4a68      	ldr	r2, [pc, #416]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800ab52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ab56:	6013      	str	r3, [r2, #0]
 800ab58:	4b66      	ldr	r3, [pc, #408]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	4a65      	ldr	r2, [pc, #404]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800ab5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ab62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	685b      	ldr	r3, [r3, #4]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d013      	beq.n	800ab94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab6c:	f7fd fd7c 	bl	8008668 <HAL_GetTick>
 800ab70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab72:	e008      	b.n	800ab86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ab74:	f7fd fd78 	bl	8008668 <HAL_GetTick>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	1ad3      	subs	r3, r2, r3
 800ab7e:	2b64      	cmp	r3, #100	; 0x64
 800ab80:	d901      	bls.n	800ab86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ab82:	2303      	movs	r3, #3
 800ab84:	e207      	b.n	800af96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ab86:	4b5b      	ldr	r3, [pc, #364]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d0f0      	beq.n	800ab74 <HAL_RCC_OscConfig+0xc0>
 800ab92:	e014      	b.n	800abbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ab94:	f7fd fd68 	bl	8008668 <HAL_GetTick>
 800ab98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ab9a:	e008      	b.n	800abae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ab9c:	f7fd fd64 	bl	8008668 <HAL_GetTick>
 800aba0:	4602      	mov	r2, r0
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	1ad3      	subs	r3, r2, r3
 800aba6:	2b64      	cmp	r3, #100	; 0x64
 800aba8:	d901      	bls.n	800abae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800abaa:	2303      	movs	r3, #3
 800abac:	e1f3      	b.n	800af96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800abae:	4b51      	ldr	r3, [pc, #324]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d1f0      	bne.n	800ab9c <HAL_RCC_OscConfig+0xe8>
 800abba:	e000      	b.n	800abbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800abbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f003 0302 	and.w	r3, r3, #2
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d063      	beq.n	800ac92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800abca:	4b4a      	ldr	r3, [pc, #296]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	f003 030c 	and.w	r3, r3, #12
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00b      	beq.n	800abee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800abd6:	4b47      	ldr	r3, [pc, #284]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800abde:	2b08      	cmp	r3, #8
 800abe0:	d11c      	bne.n	800ac1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800abe2:	4b44      	ldr	r3, [pc, #272]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800abea:	2b00      	cmp	r3, #0
 800abec:	d116      	bne.n	800ac1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800abee:	4b41      	ldr	r3, [pc, #260]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f003 0302 	and.w	r3, r3, #2
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d005      	beq.n	800ac06 <HAL_RCC_OscConfig+0x152>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d001      	beq.n	800ac06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e1c7      	b.n	800af96 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac06:	4b3b      	ldr	r3, [pc, #236]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	691b      	ldr	r3, [r3, #16]
 800ac12:	00db      	lsls	r3, r3, #3
 800ac14:	4937      	ldr	r1, [pc, #220]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800ac16:	4313      	orrs	r3, r2
 800ac18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ac1a:	e03a      	b.n	800ac92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d020      	beq.n	800ac66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ac24:	4b34      	ldr	r3, [pc, #208]	; (800acf8 <HAL_RCC_OscConfig+0x244>)
 800ac26:	2201      	movs	r2, #1
 800ac28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac2a:	f7fd fd1d 	bl	8008668 <HAL_GetTick>
 800ac2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac30:	e008      	b.n	800ac44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ac32:	f7fd fd19 	bl	8008668 <HAL_GetTick>
 800ac36:	4602      	mov	r2, r0
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	1ad3      	subs	r3, r2, r3
 800ac3c:	2b02      	cmp	r3, #2
 800ac3e:	d901      	bls.n	800ac44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ac40:	2303      	movs	r3, #3
 800ac42:	e1a8      	b.n	800af96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ac44:	4b2b      	ldr	r3, [pc, #172]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f003 0302 	and.w	r3, r3, #2
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d0f0      	beq.n	800ac32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ac50:	4b28      	ldr	r3, [pc, #160]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	00db      	lsls	r3, r3, #3
 800ac5e:	4925      	ldr	r1, [pc, #148]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800ac60:	4313      	orrs	r3, r2
 800ac62:	600b      	str	r3, [r1, #0]
 800ac64:	e015      	b.n	800ac92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ac66:	4b24      	ldr	r3, [pc, #144]	; (800acf8 <HAL_RCC_OscConfig+0x244>)
 800ac68:	2200      	movs	r2, #0
 800ac6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac6c:	f7fd fcfc 	bl	8008668 <HAL_GetTick>
 800ac70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ac72:	e008      	b.n	800ac86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ac74:	f7fd fcf8 	bl	8008668 <HAL_GetTick>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	1ad3      	subs	r3, r2, r3
 800ac7e:	2b02      	cmp	r3, #2
 800ac80:	d901      	bls.n	800ac86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800ac82:	2303      	movs	r3, #3
 800ac84:	e187      	b.n	800af96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800ac86:	4b1b      	ldr	r3, [pc, #108]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f003 0302 	and.w	r3, r3, #2
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d1f0      	bne.n	800ac74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f003 0308 	and.w	r3, r3, #8
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d036      	beq.n	800ad0c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	695b      	ldr	r3, [r3, #20]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d016      	beq.n	800acd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aca6:	4b15      	ldr	r3, [pc, #84]	; (800acfc <HAL_RCC_OscConfig+0x248>)
 800aca8:	2201      	movs	r2, #1
 800acaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acac:	f7fd fcdc 	bl	8008668 <HAL_GetTick>
 800acb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800acb2:	e008      	b.n	800acc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800acb4:	f7fd fcd8 	bl	8008668 <HAL_GetTick>
 800acb8:	4602      	mov	r2, r0
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	1ad3      	subs	r3, r2, r3
 800acbe:	2b02      	cmp	r3, #2
 800acc0:	d901      	bls.n	800acc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800acc2:	2303      	movs	r3, #3
 800acc4:	e167      	b.n	800af96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800acc6:	4b0b      	ldr	r3, [pc, #44]	; (800acf4 <HAL_RCC_OscConfig+0x240>)
 800acc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acca:	f003 0302 	and.w	r3, r3, #2
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d0f0      	beq.n	800acb4 <HAL_RCC_OscConfig+0x200>
 800acd2:	e01b      	b.n	800ad0c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800acd4:	4b09      	ldr	r3, [pc, #36]	; (800acfc <HAL_RCC_OscConfig+0x248>)
 800acd6:	2200      	movs	r2, #0
 800acd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800acda:	f7fd fcc5 	bl	8008668 <HAL_GetTick>
 800acde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ace0:	e00e      	b.n	800ad00 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800ace2:	f7fd fcc1 	bl	8008668 <HAL_GetTick>
 800ace6:	4602      	mov	r2, r0
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	1ad3      	subs	r3, r2, r3
 800acec:	2b02      	cmp	r3, #2
 800acee:	d907      	bls.n	800ad00 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800acf0:	2303      	movs	r3, #3
 800acf2:	e150      	b.n	800af96 <HAL_RCC_OscConfig+0x4e2>
 800acf4:	40023800 	.word	0x40023800
 800acf8:	42470000 	.word	0x42470000
 800acfc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ad00:	4b88      	ldr	r3, [pc, #544]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800ad02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad04:	f003 0302 	and.w	r3, r3, #2
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d1ea      	bne.n	800ace2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f003 0304 	and.w	r3, r3, #4
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	f000 8097 	beq.w	800ae48 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ad1e:	4b81      	ldr	r3, [pc, #516]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800ad20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d10f      	bne.n	800ad4a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	60bb      	str	r3, [r7, #8]
 800ad2e:	4b7d      	ldr	r3, [pc, #500]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800ad30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad32:	4a7c      	ldr	r2, [pc, #496]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800ad34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad38:	6413      	str	r3, [r2, #64]	; 0x40
 800ad3a:	4b7a      	ldr	r3, [pc, #488]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800ad3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ad42:	60bb      	str	r3, [r7, #8]
 800ad44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ad46:	2301      	movs	r3, #1
 800ad48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad4a:	4b77      	ldr	r3, [pc, #476]	; (800af28 <HAL_RCC_OscConfig+0x474>)
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d118      	bne.n	800ad88 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ad56:	4b74      	ldr	r3, [pc, #464]	; (800af28 <HAL_RCC_OscConfig+0x474>)
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	4a73      	ldr	r2, [pc, #460]	; (800af28 <HAL_RCC_OscConfig+0x474>)
 800ad5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ad62:	f7fd fc81 	bl	8008668 <HAL_GetTick>
 800ad66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad68:	e008      	b.n	800ad7c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad6a:	f7fd fc7d 	bl	8008668 <HAL_GetTick>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	1ad3      	subs	r3, r2, r3
 800ad74:	2b02      	cmp	r3, #2
 800ad76:	d901      	bls.n	800ad7c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800ad78:	2303      	movs	r3, #3
 800ad7a:	e10c      	b.n	800af96 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ad7c:	4b6a      	ldr	r3, [pc, #424]	; (800af28 <HAL_RCC_OscConfig+0x474>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d0f0      	beq.n	800ad6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	689b      	ldr	r3, [r3, #8]
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d106      	bne.n	800ad9e <HAL_RCC_OscConfig+0x2ea>
 800ad90:	4b64      	ldr	r3, [pc, #400]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800ad92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad94:	4a63      	ldr	r2, [pc, #396]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800ad96:	f043 0301 	orr.w	r3, r3, #1
 800ad9a:	6713      	str	r3, [r2, #112]	; 0x70
 800ad9c:	e01c      	b.n	800add8 <HAL_RCC_OscConfig+0x324>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	689b      	ldr	r3, [r3, #8]
 800ada2:	2b05      	cmp	r3, #5
 800ada4:	d10c      	bne.n	800adc0 <HAL_RCC_OscConfig+0x30c>
 800ada6:	4b5f      	ldr	r3, [pc, #380]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800ada8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adaa:	4a5e      	ldr	r2, [pc, #376]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800adac:	f043 0304 	orr.w	r3, r3, #4
 800adb0:	6713      	str	r3, [r2, #112]	; 0x70
 800adb2:	4b5c      	ldr	r3, [pc, #368]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800adb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adb6:	4a5b      	ldr	r2, [pc, #364]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800adb8:	f043 0301 	orr.w	r3, r3, #1
 800adbc:	6713      	str	r3, [r2, #112]	; 0x70
 800adbe:	e00b      	b.n	800add8 <HAL_RCC_OscConfig+0x324>
 800adc0:	4b58      	ldr	r3, [pc, #352]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800adc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adc4:	4a57      	ldr	r2, [pc, #348]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800adc6:	f023 0301 	bic.w	r3, r3, #1
 800adca:	6713      	str	r3, [r2, #112]	; 0x70
 800adcc:	4b55      	ldr	r3, [pc, #340]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800adce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800add0:	4a54      	ldr	r2, [pc, #336]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800add2:	f023 0304 	bic.w	r3, r3, #4
 800add6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	689b      	ldr	r3, [r3, #8]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d015      	beq.n	800ae0c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ade0:	f7fd fc42 	bl	8008668 <HAL_GetTick>
 800ade4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ade6:	e00a      	b.n	800adfe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ade8:	f7fd fc3e 	bl	8008668 <HAL_GetTick>
 800adec:	4602      	mov	r2, r0
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	f241 3288 	movw	r2, #5000	; 0x1388
 800adf6:	4293      	cmp	r3, r2
 800adf8:	d901      	bls.n	800adfe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800adfa:	2303      	movs	r3, #3
 800adfc:	e0cb      	b.n	800af96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800adfe:	4b49      	ldr	r3, [pc, #292]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800ae00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae02:	f003 0302 	and.w	r3, r3, #2
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d0ee      	beq.n	800ade8 <HAL_RCC_OscConfig+0x334>
 800ae0a:	e014      	b.n	800ae36 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ae0c:	f7fd fc2c 	bl	8008668 <HAL_GetTick>
 800ae10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae12:	e00a      	b.n	800ae2a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ae14:	f7fd fc28 	bl	8008668 <HAL_GetTick>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	1ad3      	subs	r3, r2, r3
 800ae1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae22:	4293      	cmp	r3, r2
 800ae24:	d901      	bls.n	800ae2a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800ae26:	2303      	movs	r3, #3
 800ae28:	e0b5      	b.n	800af96 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ae2a:	4b3e      	ldr	r3, [pc, #248]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800ae2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae2e:	f003 0302 	and.w	r3, r3, #2
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d1ee      	bne.n	800ae14 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ae36:	7dfb      	ldrb	r3, [r7, #23]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d105      	bne.n	800ae48 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ae3c:	4b39      	ldr	r3, [pc, #228]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800ae3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae40:	4a38      	ldr	r2, [pc, #224]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800ae42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ae46:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	699b      	ldr	r3, [r3, #24]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f000 80a1 	beq.w	800af94 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ae52:	4b34      	ldr	r3, [pc, #208]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800ae54:	689b      	ldr	r3, [r3, #8]
 800ae56:	f003 030c 	and.w	r3, r3, #12
 800ae5a:	2b08      	cmp	r3, #8
 800ae5c:	d05c      	beq.n	800af18 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	699b      	ldr	r3, [r3, #24]
 800ae62:	2b02      	cmp	r3, #2
 800ae64:	d141      	bne.n	800aeea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ae66:	4b31      	ldr	r3, [pc, #196]	; (800af2c <HAL_RCC_OscConfig+0x478>)
 800ae68:	2200      	movs	r2, #0
 800ae6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae6c:	f7fd fbfc 	bl	8008668 <HAL_GetTick>
 800ae70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae72:	e008      	b.n	800ae86 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ae74:	f7fd fbf8 	bl	8008668 <HAL_GetTick>
 800ae78:	4602      	mov	r2, r0
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	1ad3      	subs	r3, r2, r3
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d901      	bls.n	800ae86 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ae82:	2303      	movs	r3, #3
 800ae84:	e087      	b.n	800af96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ae86:	4b27      	ldr	r3, [pc, #156]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d1f0      	bne.n	800ae74 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	69da      	ldr	r2, [r3, #28]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6a1b      	ldr	r3, [r3, #32]
 800ae9a:	431a      	orrs	r2, r3
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aea0:	019b      	lsls	r3, r3, #6
 800aea2:	431a      	orrs	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea8:	085b      	lsrs	r3, r3, #1
 800aeaa:	3b01      	subs	r3, #1
 800aeac:	041b      	lsls	r3, r3, #16
 800aeae:	431a      	orrs	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb4:	061b      	lsls	r3, r3, #24
 800aeb6:	491b      	ldr	r1, [pc, #108]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800aebc:	4b1b      	ldr	r3, [pc, #108]	; (800af2c <HAL_RCC_OscConfig+0x478>)
 800aebe:	2201      	movs	r2, #1
 800aec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aec2:	f7fd fbd1 	bl	8008668 <HAL_GetTick>
 800aec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aec8:	e008      	b.n	800aedc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aeca:	f7fd fbcd 	bl	8008668 <HAL_GetTick>
 800aece:	4602      	mov	r2, r0
 800aed0:	693b      	ldr	r3, [r7, #16]
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	2b02      	cmp	r3, #2
 800aed6:	d901      	bls.n	800aedc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800aed8:	2303      	movs	r3, #3
 800aeda:	e05c      	b.n	800af96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800aedc:	4b11      	ldr	r3, [pc, #68]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d0f0      	beq.n	800aeca <HAL_RCC_OscConfig+0x416>
 800aee8:	e054      	b.n	800af94 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aeea:	4b10      	ldr	r3, [pc, #64]	; (800af2c <HAL_RCC_OscConfig+0x478>)
 800aeec:	2200      	movs	r2, #0
 800aeee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aef0:	f7fd fbba 	bl	8008668 <HAL_GetTick>
 800aef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800aef6:	e008      	b.n	800af0a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800aef8:	f7fd fbb6 	bl	8008668 <HAL_GetTick>
 800aefc:	4602      	mov	r2, r0
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	1ad3      	subs	r3, r2, r3
 800af02:	2b02      	cmp	r3, #2
 800af04:	d901      	bls.n	800af0a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800af06:	2303      	movs	r3, #3
 800af08:	e045      	b.n	800af96 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800af0a:	4b06      	ldr	r3, [pc, #24]	; (800af24 <HAL_RCC_OscConfig+0x470>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af12:	2b00      	cmp	r3, #0
 800af14:	d1f0      	bne.n	800aef8 <HAL_RCC_OscConfig+0x444>
 800af16:	e03d      	b.n	800af94 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	699b      	ldr	r3, [r3, #24]
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d107      	bne.n	800af30 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	e038      	b.n	800af96 <HAL_RCC_OscConfig+0x4e2>
 800af24:	40023800 	.word	0x40023800
 800af28:	40007000 	.word	0x40007000
 800af2c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800af30:	4b1b      	ldr	r3, [pc, #108]	; (800afa0 <HAL_RCC_OscConfig+0x4ec>)
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	699b      	ldr	r3, [r3, #24]
 800af3a:	2b01      	cmp	r3, #1
 800af3c:	d028      	beq.n	800af90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800af48:	429a      	cmp	r2, r3
 800af4a:	d121      	bne.n	800af90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800af56:	429a      	cmp	r2, r3
 800af58:	d11a      	bne.n	800af90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800af5a:	68fa      	ldr	r2, [r7, #12]
 800af5c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800af60:	4013      	ands	r3, r2
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800af66:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800af68:	4293      	cmp	r3, r2
 800af6a:	d111      	bne.n	800af90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af76:	085b      	lsrs	r3, r3, #1
 800af78:	3b01      	subs	r3, #1
 800af7a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800af7c:	429a      	cmp	r2, r3
 800af7e:	d107      	bne.n	800af90 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af8a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d001      	beq.n	800af94 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800af90:	2301      	movs	r3, #1
 800af92:	e000      	b.n	800af96 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3718      	adds	r7, #24
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	40023800 	.word	0x40023800

0800afa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d101      	bne.n	800afb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800afb4:	2301      	movs	r3, #1
 800afb6:	e0cc      	b.n	800b152 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800afb8:	4b68      	ldr	r3, [pc, #416]	; (800b15c <HAL_RCC_ClockConfig+0x1b8>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f003 0307 	and.w	r3, r3, #7
 800afc0:	683a      	ldr	r2, [r7, #0]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d90c      	bls.n	800afe0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800afc6:	4b65      	ldr	r3, [pc, #404]	; (800b15c <HAL_RCC_ClockConfig+0x1b8>)
 800afc8:	683a      	ldr	r2, [r7, #0]
 800afca:	b2d2      	uxtb	r2, r2
 800afcc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800afce:	4b63      	ldr	r3, [pc, #396]	; (800b15c <HAL_RCC_ClockConfig+0x1b8>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f003 0307 	and.w	r3, r3, #7
 800afd6:	683a      	ldr	r2, [r7, #0]
 800afd8:	429a      	cmp	r2, r3
 800afda:	d001      	beq.n	800afe0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800afdc:	2301      	movs	r3, #1
 800afde:	e0b8      	b.n	800b152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f003 0302 	and.w	r3, r3, #2
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d020      	beq.n	800b02e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f003 0304 	and.w	r3, r3, #4
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d005      	beq.n	800b004 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800aff8:	4b59      	ldr	r3, [pc, #356]	; (800b160 <HAL_RCC_ClockConfig+0x1bc>)
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	4a58      	ldr	r2, [pc, #352]	; (800b160 <HAL_RCC_ClockConfig+0x1bc>)
 800affe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b002:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f003 0308 	and.w	r3, r3, #8
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d005      	beq.n	800b01c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b010:	4b53      	ldr	r3, [pc, #332]	; (800b160 <HAL_RCC_ClockConfig+0x1bc>)
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	4a52      	ldr	r2, [pc, #328]	; (800b160 <HAL_RCC_ClockConfig+0x1bc>)
 800b016:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b01a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b01c:	4b50      	ldr	r3, [pc, #320]	; (800b160 <HAL_RCC_ClockConfig+0x1bc>)
 800b01e:	689b      	ldr	r3, [r3, #8]
 800b020:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	689b      	ldr	r3, [r3, #8]
 800b028:	494d      	ldr	r1, [pc, #308]	; (800b160 <HAL_RCC_ClockConfig+0x1bc>)
 800b02a:	4313      	orrs	r3, r2
 800b02c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	f003 0301 	and.w	r3, r3, #1
 800b036:	2b00      	cmp	r3, #0
 800b038:	d044      	beq.n	800b0c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	685b      	ldr	r3, [r3, #4]
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d107      	bne.n	800b052 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b042:	4b47      	ldr	r3, [pc, #284]	; (800b160 <HAL_RCC_ClockConfig+0x1bc>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d119      	bne.n	800b082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b04e:	2301      	movs	r3, #1
 800b050:	e07f      	b.n	800b152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	2b02      	cmp	r3, #2
 800b058:	d003      	beq.n	800b062 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b05e:	2b03      	cmp	r3, #3
 800b060:	d107      	bne.n	800b072 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b062:	4b3f      	ldr	r3, [pc, #252]	; (800b160 <HAL_RCC_ClockConfig+0x1bc>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d109      	bne.n	800b082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b06e:	2301      	movs	r3, #1
 800b070:	e06f      	b.n	800b152 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b072:	4b3b      	ldr	r3, [pc, #236]	; (800b160 <HAL_RCC_ClockConfig+0x1bc>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f003 0302 	and.w	r3, r3, #2
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d101      	bne.n	800b082 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b07e:	2301      	movs	r3, #1
 800b080:	e067      	b.n	800b152 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b082:	4b37      	ldr	r3, [pc, #220]	; (800b160 <HAL_RCC_ClockConfig+0x1bc>)
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	f023 0203 	bic.w	r2, r3, #3
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	4934      	ldr	r1, [pc, #208]	; (800b160 <HAL_RCC_ClockConfig+0x1bc>)
 800b090:	4313      	orrs	r3, r2
 800b092:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b094:	f7fd fae8 	bl	8008668 <HAL_GetTick>
 800b098:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b09a:	e00a      	b.n	800b0b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b09c:	f7fd fae4 	bl	8008668 <HAL_GetTick>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	1ad3      	subs	r3, r2, r3
 800b0a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0aa:	4293      	cmp	r3, r2
 800b0ac:	d901      	bls.n	800b0b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b0ae:	2303      	movs	r3, #3
 800b0b0:	e04f      	b.n	800b152 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0b2:	4b2b      	ldr	r3, [pc, #172]	; (800b160 <HAL_RCC_ClockConfig+0x1bc>)
 800b0b4:	689b      	ldr	r3, [r3, #8]
 800b0b6:	f003 020c 	and.w	r2, r3, #12
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	009b      	lsls	r3, r3, #2
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d1eb      	bne.n	800b09c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b0c4:	4b25      	ldr	r3, [pc, #148]	; (800b15c <HAL_RCC_ClockConfig+0x1b8>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f003 0307 	and.w	r3, r3, #7
 800b0cc:	683a      	ldr	r2, [r7, #0]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d20c      	bcs.n	800b0ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b0d2:	4b22      	ldr	r3, [pc, #136]	; (800b15c <HAL_RCC_ClockConfig+0x1b8>)
 800b0d4:	683a      	ldr	r2, [r7, #0]
 800b0d6:	b2d2      	uxtb	r2, r2
 800b0d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b0da:	4b20      	ldr	r3, [pc, #128]	; (800b15c <HAL_RCC_ClockConfig+0x1b8>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f003 0307 	and.w	r3, r3, #7
 800b0e2:	683a      	ldr	r2, [r7, #0]
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d001      	beq.n	800b0ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	e032      	b.n	800b152 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	f003 0304 	and.w	r3, r3, #4
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d008      	beq.n	800b10a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b0f8:	4b19      	ldr	r3, [pc, #100]	; (800b160 <HAL_RCC_ClockConfig+0x1bc>)
 800b0fa:	689b      	ldr	r3, [r3, #8]
 800b0fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	4916      	ldr	r1, [pc, #88]	; (800b160 <HAL_RCC_ClockConfig+0x1bc>)
 800b106:	4313      	orrs	r3, r2
 800b108:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f003 0308 	and.w	r3, r3, #8
 800b112:	2b00      	cmp	r3, #0
 800b114:	d009      	beq.n	800b12a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b116:	4b12      	ldr	r3, [pc, #72]	; (800b160 <HAL_RCC_ClockConfig+0x1bc>)
 800b118:	689b      	ldr	r3, [r3, #8]
 800b11a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	691b      	ldr	r3, [r3, #16]
 800b122:	00db      	lsls	r3, r3, #3
 800b124:	490e      	ldr	r1, [pc, #56]	; (800b160 <HAL_RCC_ClockConfig+0x1bc>)
 800b126:	4313      	orrs	r3, r2
 800b128:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b12a:	f000 f821 	bl	800b170 <HAL_RCC_GetSysClockFreq>
 800b12e:	4602      	mov	r2, r0
 800b130:	4b0b      	ldr	r3, [pc, #44]	; (800b160 <HAL_RCC_ClockConfig+0x1bc>)
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	091b      	lsrs	r3, r3, #4
 800b136:	f003 030f 	and.w	r3, r3, #15
 800b13a:	490a      	ldr	r1, [pc, #40]	; (800b164 <HAL_RCC_ClockConfig+0x1c0>)
 800b13c:	5ccb      	ldrb	r3, [r1, r3]
 800b13e:	fa22 f303 	lsr.w	r3, r2, r3
 800b142:	4a09      	ldr	r2, [pc, #36]	; (800b168 <HAL_RCC_ClockConfig+0x1c4>)
 800b144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b146:	4b09      	ldr	r3, [pc, #36]	; (800b16c <HAL_RCC_ClockConfig+0x1c8>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7fc fc20 	bl	8007990 <HAL_InitTick>

  return HAL_OK;
 800b150:	2300      	movs	r3, #0
}
 800b152:	4618      	mov	r0, r3
 800b154:	3710      	adds	r7, #16
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	40023c00 	.word	0x40023c00
 800b160:	40023800 	.word	0x40023800
 800b164:	0801647c 	.word	0x0801647c
 800b168:	20000010 	.word	0x20000010
 800b16c:	20000014 	.word	0x20000014

0800b170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b174:	b094      	sub	sp, #80	; 0x50
 800b176:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800b178:	2300      	movs	r3, #0
 800b17a:	647b      	str	r3, [r7, #68]	; 0x44
 800b17c:	2300      	movs	r3, #0
 800b17e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b180:	2300      	movs	r3, #0
 800b182:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800b184:	2300      	movs	r3, #0
 800b186:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b188:	4b79      	ldr	r3, [pc, #484]	; (800b370 <HAL_RCC_GetSysClockFreq+0x200>)
 800b18a:	689b      	ldr	r3, [r3, #8]
 800b18c:	f003 030c 	and.w	r3, r3, #12
 800b190:	2b08      	cmp	r3, #8
 800b192:	d00d      	beq.n	800b1b0 <HAL_RCC_GetSysClockFreq+0x40>
 800b194:	2b08      	cmp	r3, #8
 800b196:	f200 80e1 	bhi.w	800b35c <HAL_RCC_GetSysClockFreq+0x1ec>
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d002      	beq.n	800b1a4 <HAL_RCC_GetSysClockFreq+0x34>
 800b19e:	2b04      	cmp	r3, #4
 800b1a0:	d003      	beq.n	800b1aa <HAL_RCC_GetSysClockFreq+0x3a>
 800b1a2:	e0db      	b.n	800b35c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b1a4:	4b73      	ldr	r3, [pc, #460]	; (800b374 <HAL_RCC_GetSysClockFreq+0x204>)
 800b1a6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800b1a8:	e0db      	b.n	800b362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b1aa:	4b72      	ldr	r3, [pc, #456]	; (800b374 <HAL_RCC_GetSysClockFreq+0x204>)
 800b1ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b1ae:	e0d8      	b.n	800b362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b1b0:	4b6f      	ldr	r3, [pc, #444]	; (800b370 <HAL_RCC_GetSysClockFreq+0x200>)
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1b8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b1ba:	4b6d      	ldr	r3, [pc, #436]	; (800b370 <HAL_RCC_GetSysClockFreq+0x200>)
 800b1bc:	685b      	ldr	r3, [r3, #4]
 800b1be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d063      	beq.n	800b28e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b1c6:	4b6a      	ldr	r3, [pc, #424]	; (800b370 <HAL_RCC_GetSysClockFreq+0x200>)
 800b1c8:	685b      	ldr	r3, [r3, #4]
 800b1ca:	099b      	lsrs	r3, r3, #6
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800b1d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1d8:	633b      	str	r3, [r7, #48]	; 0x30
 800b1da:	2300      	movs	r3, #0
 800b1dc:	637b      	str	r3, [r7, #52]	; 0x34
 800b1de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800b1e2:	4622      	mov	r2, r4
 800b1e4:	462b      	mov	r3, r5
 800b1e6:	f04f 0000 	mov.w	r0, #0
 800b1ea:	f04f 0100 	mov.w	r1, #0
 800b1ee:	0159      	lsls	r1, r3, #5
 800b1f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b1f4:	0150      	lsls	r0, r2, #5
 800b1f6:	4602      	mov	r2, r0
 800b1f8:	460b      	mov	r3, r1
 800b1fa:	4621      	mov	r1, r4
 800b1fc:	1a51      	subs	r1, r2, r1
 800b1fe:	6139      	str	r1, [r7, #16]
 800b200:	4629      	mov	r1, r5
 800b202:	eb63 0301 	sbc.w	r3, r3, r1
 800b206:	617b      	str	r3, [r7, #20]
 800b208:	f04f 0200 	mov.w	r2, #0
 800b20c:	f04f 0300 	mov.w	r3, #0
 800b210:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b214:	4659      	mov	r1, fp
 800b216:	018b      	lsls	r3, r1, #6
 800b218:	4651      	mov	r1, sl
 800b21a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b21e:	4651      	mov	r1, sl
 800b220:	018a      	lsls	r2, r1, #6
 800b222:	4651      	mov	r1, sl
 800b224:	ebb2 0801 	subs.w	r8, r2, r1
 800b228:	4659      	mov	r1, fp
 800b22a:	eb63 0901 	sbc.w	r9, r3, r1
 800b22e:	f04f 0200 	mov.w	r2, #0
 800b232:	f04f 0300 	mov.w	r3, #0
 800b236:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b23a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b23e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b242:	4690      	mov	r8, r2
 800b244:	4699      	mov	r9, r3
 800b246:	4623      	mov	r3, r4
 800b248:	eb18 0303 	adds.w	r3, r8, r3
 800b24c:	60bb      	str	r3, [r7, #8]
 800b24e:	462b      	mov	r3, r5
 800b250:	eb49 0303 	adc.w	r3, r9, r3
 800b254:	60fb      	str	r3, [r7, #12]
 800b256:	f04f 0200 	mov.w	r2, #0
 800b25a:	f04f 0300 	mov.w	r3, #0
 800b25e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b262:	4629      	mov	r1, r5
 800b264:	028b      	lsls	r3, r1, #10
 800b266:	4621      	mov	r1, r4
 800b268:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b26c:	4621      	mov	r1, r4
 800b26e:	028a      	lsls	r2, r1, #10
 800b270:	4610      	mov	r0, r2
 800b272:	4619      	mov	r1, r3
 800b274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b276:	2200      	movs	r2, #0
 800b278:	62bb      	str	r3, [r7, #40]	; 0x28
 800b27a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b27c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b280:	f7f5 fd02 	bl	8000c88 <__aeabi_uldivmod>
 800b284:	4602      	mov	r2, r0
 800b286:	460b      	mov	r3, r1
 800b288:	4613      	mov	r3, r2
 800b28a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b28c:	e058      	b.n	800b340 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b28e:	4b38      	ldr	r3, [pc, #224]	; (800b370 <HAL_RCC_GetSysClockFreq+0x200>)
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	099b      	lsrs	r3, r3, #6
 800b294:	2200      	movs	r2, #0
 800b296:	4618      	mov	r0, r3
 800b298:	4611      	mov	r1, r2
 800b29a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b29e:	623b      	str	r3, [r7, #32]
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	627b      	str	r3, [r7, #36]	; 0x24
 800b2a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b2a8:	4642      	mov	r2, r8
 800b2aa:	464b      	mov	r3, r9
 800b2ac:	f04f 0000 	mov.w	r0, #0
 800b2b0:	f04f 0100 	mov.w	r1, #0
 800b2b4:	0159      	lsls	r1, r3, #5
 800b2b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b2ba:	0150      	lsls	r0, r2, #5
 800b2bc:	4602      	mov	r2, r0
 800b2be:	460b      	mov	r3, r1
 800b2c0:	4641      	mov	r1, r8
 800b2c2:	ebb2 0a01 	subs.w	sl, r2, r1
 800b2c6:	4649      	mov	r1, r9
 800b2c8:	eb63 0b01 	sbc.w	fp, r3, r1
 800b2cc:	f04f 0200 	mov.w	r2, #0
 800b2d0:	f04f 0300 	mov.w	r3, #0
 800b2d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b2d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b2dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b2e0:	ebb2 040a 	subs.w	r4, r2, sl
 800b2e4:	eb63 050b 	sbc.w	r5, r3, fp
 800b2e8:	f04f 0200 	mov.w	r2, #0
 800b2ec:	f04f 0300 	mov.w	r3, #0
 800b2f0:	00eb      	lsls	r3, r5, #3
 800b2f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b2f6:	00e2      	lsls	r2, r4, #3
 800b2f8:	4614      	mov	r4, r2
 800b2fa:	461d      	mov	r5, r3
 800b2fc:	4643      	mov	r3, r8
 800b2fe:	18e3      	adds	r3, r4, r3
 800b300:	603b      	str	r3, [r7, #0]
 800b302:	464b      	mov	r3, r9
 800b304:	eb45 0303 	adc.w	r3, r5, r3
 800b308:	607b      	str	r3, [r7, #4]
 800b30a:	f04f 0200 	mov.w	r2, #0
 800b30e:	f04f 0300 	mov.w	r3, #0
 800b312:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b316:	4629      	mov	r1, r5
 800b318:	028b      	lsls	r3, r1, #10
 800b31a:	4621      	mov	r1, r4
 800b31c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b320:	4621      	mov	r1, r4
 800b322:	028a      	lsls	r2, r1, #10
 800b324:	4610      	mov	r0, r2
 800b326:	4619      	mov	r1, r3
 800b328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b32a:	2200      	movs	r2, #0
 800b32c:	61bb      	str	r3, [r7, #24]
 800b32e:	61fa      	str	r2, [r7, #28]
 800b330:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b334:	f7f5 fca8 	bl	8000c88 <__aeabi_uldivmod>
 800b338:	4602      	mov	r2, r0
 800b33a:	460b      	mov	r3, r1
 800b33c:	4613      	mov	r3, r2
 800b33e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b340:	4b0b      	ldr	r3, [pc, #44]	; (800b370 <HAL_RCC_GetSysClockFreq+0x200>)
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	0c1b      	lsrs	r3, r3, #16
 800b346:	f003 0303 	and.w	r3, r3, #3
 800b34a:	3301      	adds	r3, #1
 800b34c:	005b      	lsls	r3, r3, #1
 800b34e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800b350:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b352:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b354:	fbb2 f3f3 	udiv	r3, r2, r3
 800b358:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b35a:	e002      	b.n	800b362 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b35c:	4b05      	ldr	r3, [pc, #20]	; (800b374 <HAL_RCC_GetSysClockFreq+0x204>)
 800b35e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800b360:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800b364:	4618      	mov	r0, r3
 800b366:	3750      	adds	r7, #80	; 0x50
 800b368:	46bd      	mov	sp, r7
 800b36a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b36e:	bf00      	nop
 800b370:	40023800 	.word	0x40023800
 800b374:	00f42400 	.word	0x00f42400

0800b378 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b378:	b480      	push	{r7}
 800b37a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b37c:	4b03      	ldr	r3, [pc, #12]	; (800b38c <HAL_RCC_GetHCLKFreq+0x14>)
 800b37e:	681b      	ldr	r3, [r3, #0]
}
 800b380:	4618      	mov	r0, r3
 800b382:	46bd      	mov	sp, r7
 800b384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b388:	4770      	bx	lr
 800b38a:	bf00      	nop
 800b38c:	20000010 	.word	0x20000010

0800b390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b394:	f7ff fff0 	bl	800b378 <HAL_RCC_GetHCLKFreq>
 800b398:	4602      	mov	r2, r0
 800b39a:	4b05      	ldr	r3, [pc, #20]	; (800b3b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b39c:	689b      	ldr	r3, [r3, #8]
 800b39e:	0a9b      	lsrs	r3, r3, #10
 800b3a0:	f003 0307 	and.w	r3, r3, #7
 800b3a4:	4903      	ldr	r1, [pc, #12]	; (800b3b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b3a6:	5ccb      	ldrb	r3, [r1, r3]
 800b3a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	40023800 	.word	0x40023800
 800b3b4:	0801648c 	.word	0x0801648c

0800b3b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b3bc:	f7ff ffdc 	bl	800b378 <HAL_RCC_GetHCLKFreq>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	4b05      	ldr	r3, [pc, #20]	; (800b3d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b3c4:	689b      	ldr	r3, [r3, #8]
 800b3c6:	0b5b      	lsrs	r3, r3, #13
 800b3c8:	f003 0307 	and.w	r3, r3, #7
 800b3cc:	4903      	ldr	r1, [pc, #12]	; (800b3dc <HAL_RCC_GetPCLK2Freq+0x24>)
 800b3ce:	5ccb      	ldrb	r3, [r1, r3]
 800b3d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	bd80      	pop	{r7, pc}
 800b3d8:	40023800 	.word	0x40023800
 800b3dc:	0801648c 	.word	0x0801648c

0800b3e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	220f      	movs	r2, #15
 800b3ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b3f0:	4b12      	ldr	r3, [pc, #72]	; (800b43c <HAL_RCC_GetClockConfig+0x5c>)
 800b3f2:	689b      	ldr	r3, [r3, #8]
 800b3f4:	f003 0203 	and.w	r2, r3, #3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800b3fc:	4b0f      	ldr	r3, [pc, #60]	; (800b43c <HAL_RCC_GetClockConfig+0x5c>)
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800b408:	4b0c      	ldr	r3, [pc, #48]	; (800b43c <HAL_RCC_GetClockConfig+0x5c>)
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800b414:	4b09      	ldr	r3, [pc, #36]	; (800b43c <HAL_RCC_GetClockConfig+0x5c>)
 800b416:	689b      	ldr	r3, [r3, #8]
 800b418:	08db      	lsrs	r3, r3, #3
 800b41a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b422:	4b07      	ldr	r3, [pc, #28]	; (800b440 <HAL_RCC_GetClockConfig+0x60>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	f003 0207 	and.w	r2, r3, #7
 800b42a:	683b      	ldr	r3, [r7, #0]
 800b42c:	601a      	str	r2, [r3, #0]
}
 800b42e:	bf00      	nop
 800b430:	370c      	adds	r7, #12
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	40023800 	.word	0x40023800
 800b440:	40023c00 	.word	0x40023c00

0800b444 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d101      	bne.n	800b456 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800b452:	2301      	movs	r3, #1
 800b454:	e01c      	b.n	800b490 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	795b      	ldrb	r3, [r3, #5]
 800b45a:	b2db      	uxtb	r3, r3
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d105      	bne.n	800b46c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2200      	movs	r2, #0
 800b464:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f7fc f9c6 	bl	80077f8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2202      	movs	r2, #2
 800b470:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f042 0204 	orr.w	r2, r2, #4
 800b480:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2201      	movs	r2, #1
 800b486:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800b48e:	2300      	movs	r3, #0
}
 800b490:	4618      	mov	r0, r3
 800b492:	3708      	adds	r7, #8
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}

0800b498 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	791b      	ldrb	r3, [r3, #4]
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d101      	bne.n	800b4b2 <HAL_RNG_GenerateRandomNumber+0x1a>
 800b4ae:	2302      	movs	r3, #2
 800b4b0:	e044      	b.n	800b53c <HAL_RNG_GenerateRandomNumber+0xa4>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	795b      	ldrb	r3, [r3, #5]
 800b4bc:	b2db      	uxtb	r3, r3
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d133      	bne.n	800b52a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2202      	movs	r2, #2
 800b4c6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b4c8:	f7fd f8ce 	bl	8008668 <HAL_GetTick>
 800b4cc:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b4ce:	e018      	b.n	800b502 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800b4d0:	f7fd f8ca 	bl	8008668 <HAL_GetTick>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	1ad3      	subs	r3, r2, r3
 800b4da:	2b02      	cmp	r3, #2
 800b4dc:	d911      	bls.n	800b502 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	685b      	ldr	r3, [r3, #4]
 800b4e4:	f003 0301 	and.w	r3, r3, #1
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d00a      	beq.n	800b502 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2202      	movs	r2, #2
 800b4f6:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
 800b500:	e01c      	b.n	800b53c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	f003 0301 	and.w	r3, r3, #1
 800b50c:	2b01      	cmp	r3, #1
 800b50e:	d1df      	bne.n	800b4d0 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	689a      	ldr	r2, [r3, #8]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	68da      	ldr	r2, [r3, #12]
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2201      	movs	r2, #1
 800b526:	715a      	strb	r2, [r3, #5]
 800b528:	e004      	b.n	800b534 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2204      	movs	r2, #4
 800b52e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2200      	movs	r2, #0
 800b538:	711a      	strb	r2, [r3, #4]

  return status;
 800b53a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}

0800b544 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d101      	bne.n	800b556 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b552:	2301      	movs	r3, #1
 800b554:	e07b      	b.n	800b64e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d108      	bne.n	800b570 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b566:	d009      	beq.n	800b57c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	61da      	str	r2, [r3, #28]
 800b56e:	e005      	b.n	800b57c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2200      	movs	r2, #0
 800b574:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2200      	movs	r2, #0
 800b57a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2200      	movs	r2, #0
 800b580:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d106      	bne.n	800b59c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	2200      	movs	r2, #0
 800b592:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b596:	6878      	ldr	r0, [r7, #4]
 800b598:	f7fc f986 	bl	80078a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2202      	movs	r2, #2
 800b5a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	685b      	ldr	r3, [r3, #4]
 800b5b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	689b      	ldr	r3, [r3, #8]
 800b5c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b5c4:	431a      	orrs	r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	68db      	ldr	r3, [r3, #12]
 800b5ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b5ce:	431a      	orrs	r2, r3
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	691b      	ldr	r3, [r3, #16]
 800b5d4:	f003 0302 	and.w	r3, r3, #2
 800b5d8:	431a      	orrs	r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	695b      	ldr	r3, [r3, #20]
 800b5de:	f003 0301 	and.w	r3, r3, #1
 800b5e2:	431a      	orrs	r2, r3
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	699b      	ldr	r3, [r3, #24]
 800b5e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b5ec:	431a      	orrs	r2, r3
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	69db      	ldr	r3, [r3, #28]
 800b5f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b5f6:	431a      	orrs	r2, r3
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6a1b      	ldr	r3, [r3, #32]
 800b5fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b600:	ea42 0103 	orr.w	r1, r2, r3
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b608:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	430a      	orrs	r2, r1
 800b612:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	699b      	ldr	r3, [r3, #24]
 800b618:	0c1b      	lsrs	r3, r3, #16
 800b61a:	f003 0104 	and.w	r1, r3, #4
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b622:	f003 0210 	and.w	r2, r3, #16
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	430a      	orrs	r2, r1
 800b62c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	69da      	ldr	r2, [r3, #28]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b63c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2201      	movs	r2, #1
 800b648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800b64c:	2300      	movs	r3, #0
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b656:	b580      	push	{r7, lr}
 800b658:	b082      	sub	sp, #8
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d101      	bne.n	800b668 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b664:	2301      	movs	r3, #1
 800b666:	e041      	b.n	800b6ec <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b66e:	b2db      	uxtb	r3, r3
 800b670:	2b00      	cmp	r3, #0
 800b672:	d106      	bne.n	800b682 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f7fc fd53 	bl	8008128 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2202      	movs	r2, #2
 800b686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	3304      	adds	r3, #4
 800b692:	4619      	mov	r1, r3
 800b694:	4610      	mov	r0, r2
 800b696:	f000 fc57 	bl	800bf48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2201      	movs	r2, #1
 800b69e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2201      	movs	r2, #1
 800b6b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2201      	movs	r2, #1
 800b6de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b6ea:	2300      	movs	r3, #0
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3708      	adds	r7, #8
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b085      	sub	sp, #20
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b702:	b2db      	uxtb	r3, r3
 800b704:	2b01      	cmp	r3, #1
 800b706:	d001      	beq.n	800b70c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b708:	2301      	movs	r3, #1
 800b70a:	e04e      	b.n	800b7aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2202      	movs	r2, #2
 800b710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	68da      	ldr	r2, [r3, #12]
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f042 0201 	orr.w	r2, r2, #1
 800b722:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	4a23      	ldr	r2, [pc, #140]	; (800b7b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d022      	beq.n	800b774 <HAL_TIM_Base_Start_IT+0x80>
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b736:	d01d      	beq.n	800b774 <HAL_TIM_Base_Start_IT+0x80>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	4a1f      	ldr	r2, [pc, #124]	; (800b7bc <HAL_TIM_Base_Start_IT+0xc8>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d018      	beq.n	800b774 <HAL_TIM_Base_Start_IT+0x80>
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	4a1e      	ldr	r2, [pc, #120]	; (800b7c0 <HAL_TIM_Base_Start_IT+0xcc>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d013      	beq.n	800b774 <HAL_TIM_Base_Start_IT+0x80>
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	4a1c      	ldr	r2, [pc, #112]	; (800b7c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d00e      	beq.n	800b774 <HAL_TIM_Base_Start_IT+0x80>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4a1b      	ldr	r2, [pc, #108]	; (800b7c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800b75c:	4293      	cmp	r3, r2
 800b75e:	d009      	beq.n	800b774 <HAL_TIM_Base_Start_IT+0x80>
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a19      	ldr	r2, [pc, #100]	; (800b7cc <HAL_TIM_Base_Start_IT+0xd8>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d004      	beq.n	800b774 <HAL_TIM_Base_Start_IT+0x80>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4a18      	ldr	r2, [pc, #96]	; (800b7d0 <HAL_TIM_Base_Start_IT+0xdc>)
 800b770:	4293      	cmp	r3, r2
 800b772:	d111      	bne.n	800b798 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	689b      	ldr	r3, [r3, #8]
 800b77a:	f003 0307 	and.w	r3, r3, #7
 800b77e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2b06      	cmp	r3, #6
 800b784:	d010      	beq.n	800b7a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f042 0201 	orr.w	r2, r2, #1
 800b794:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b796:	e007      	b.n	800b7a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f042 0201 	orr.w	r2, r2, #1
 800b7a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3714      	adds	r7, #20
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr
 800b7b6:	bf00      	nop
 800b7b8:	40010000 	.word	0x40010000
 800b7bc:	40000400 	.word	0x40000400
 800b7c0:	40000800 	.word	0x40000800
 800b7c4:	40000c00 	.word	0x40000c00
 800b7c8:	40010400 	.word	0x40010400
 800b7cc:	40014000 	.word	0x40014000
 800b7d0:	40001800 	.word	0x40001800

0800b7d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b082      	sub	sp, #8
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d101      	bne.n	800b7e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e041      	b.n	800b86a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7ec:	b2db      	uxtb	r3, r3
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d106      	bne.n	800b800 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 f839 	bl	800b872 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2202      	movs	r2, #2
 800b804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681a      	ldr	r2, [r3, #0]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	3304      	adds	r3, #4
 800b810:	4619      	mov	r1, r3
 800b812:	4610      	mov	r0, r2
 800b814:	f000 fb98 	bl	800bf48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2201      	movs	r2, #1
 800b81c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2201      	movs	r2, #1
 800b824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2201      	movs	r2, #1
 800b834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2201      	movs	r2, #1
 800b83c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2201      	movs	r2, #1
 800b864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b868:	2300      	movs	r3, #0
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3708      	adds	r7, #8
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}

0800b872 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b872:	b480      	push	{r7}
 800b874:	b083      	sub	sp, #12
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b87a:	bf00      	nop
 800b87c:	370c      	adds	r7, #12
 800b87e:	46bd      	mov	sp, r7
 800b880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b884:	4770      	bx	lr

0800b886 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b886:	b580      	push	{r7, lr}
 800b888:	b086      	sub	sp, #24
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
 800b88e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d101      	bne.n	800b89a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b896:	2301      	movs	r3, #1
 800b898:	e097      	b.n	800b9ca <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8a0:	b2db      	uxtb	r3, r3
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d106      	bne.n	800b8b4 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f7fc fcc0 	bl	8008234 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2202      	movs	r2, #2
 800b8b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	689b      	ldr	r3, [r3, #8]
 800b8c2:	687a      	ldr	r2, [r7, #4]
 800b8c4:	6812      	ldr	r2, [r2, #0]
 800b8c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b8ca:	f023 0307 	bic.w	r3, r3, #7
 800b8ce:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681a      	ldr	r2, [r3, #0]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	3304      	adds	r3, #4
 800b8d8:	4619      	mov	r1, r3
 800b8da:	4610      	mov	r0, r2
 800b8dc:	f000 fb34 	bl	800bf48 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	689b      	ldr	r3, [r3, #8]
 800b8e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	699b      	ldr	r3, [r3, #24]
 800b8ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	6a1b      	ldr	r3, [r3, #32]
 800b8f6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	697a      	ldr	r2, [r7, #20]
 800b8fe:	4313      	orrs	r3, r2
 800b900:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b908:	f023 0303 	bic.w	r3, r3, #3
 800b90c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	689a      	ldr	r2, [r3, #8]
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	699b      	ldr	r3, [r3, #24]
 800b916:	021b      	lsls	r3, r3, #8
 800b918:	4313      	orrs	r3, r2
 800b91a:	693a      	ldr	r2, [r7, #16]
 800b91c:	4313      	orrs	r3, r2
 800b91e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b926:	f023 030c 	bic.w	r3, r3, #12
 800b92a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b92c:	693b      	ldr	r3, [r7, #16]
 800b92e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	68da      	ldr	r2, [r3, #12]
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	69db      	ldr	r3, [r3, #28]
 800b940:	021b      	lsls	r3, r3, #8
 800b942:	4313      	orrs	r3, r2
 800b944:	693a      	ldr	r2, [r7, #16]
 800b946:	4313      	orrs	r3, r2
 800b948:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b94a:	683b      	ldr	r3, [r7, #0]
 800b94c:	691b      	ldr	r3, [r3, #16]
 800b94e:	011a      	lsls	r2, r3, #4
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	6a1b      	ldr	r3, [r3, #32]
 800b954:	031b      	lsls	r3, r3, #12
 800b956:	4313      	orrs	r3, r2
 800b958:	693a      	ldr	r2, [r7, #16]
 800b95a:	4313      	orrs	r3, r2
 800b95c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b964:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b96c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	685a      	ldr	r2, [r3, #4]
 800b972:	683b      	ldr	r3, [r7, #0]
 800b974:	695b      	ldr	r3, [r3, #20]
 800b976:	011b      	lsls	r3, r3, #4
 800b978:	4313      	orrs	r3, r2
 800b97a:	68fa      	ldr	r2, [r7, #12]
 800b97c:	4313      	orrs	r3, r2
 800b97e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	697a      	ldr	r2, [r7, #20]
 800b986:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	693a      	ldr	r2, [r7, #16]
 800b98e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	68fa      	ldr	r2, [r7, #12]
 800b996:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2201      	movs	r2, #1
 800b99c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b9c8:	2300      	movs	r3, #0
}
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	3718      	adds	r7, #24
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	bd80      	pop	{r7, pc}

0800b9d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b9d2:	b580      	push	{r7, lr}
 800b9d4:	b082      	sub	sp, #8
 800b9d6:	af00      	add	r7, sp, #0
 800b9d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	691b      	ldr	r3, [r3, #16]
 800b9e0:	f003 0302 	and.w	r3, r3, #2
 800b9e4:	2b02      	cmp	r3, #2
 800b9e6:	d122      	bne.n	800ba2e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	68db      	ldr	r3, [r3, #12]
 800b9ee:	f003 0302 	and.w	r3, r3, #2
 800b9f2:	2b02      	cmp	r3, #2
 800b9f4:	d11b      	bne.n	800ba2e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f06f 0202 	mvn.w	r2, #2
 800b9fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2201      	movs	r2, #1
 800ba04:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	699b      	ldr	r3, [r3, #24]
 800ba0c:	f003 0303 	and.w	r3, r3, #3
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d003      	beq.n	800ba1c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f000 fa78 	bl	800bf0a <HAL_TIM_IC_CaptureCallback>
 800ba1a:	e005      	b.n	800ba28 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	f000 fa6a 	bl	800bef6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 fa7b 	bl	800bf1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	691b      	ldr	r3, [r3, #16]
 800ba34:	f003 0304 	and.w	r3, r3, #4
 800ba38:	2b04      	cmp	r3, #4
 800ba3a:	d122      	bne.n	800ba82 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	68db      	ldr	r3, [r3, #12]
 800ba42:	f003 0304 	and.w	r3, r3, #4
 800ba46:	2b04      	cmp	r3, #4
 800ba48:	d11b      	bne.n	800ba82 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f06f 0204 	mvn.w	r2, #4
 800ba52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2202      	movs	r2, #2
 800ba58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	699b      	ldr	r3, [r3, #24]
 800ba60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d003      	beq.n	800ba70 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 fa4e 	bl	800bf0a <HAL_TIM_IC_CaptureCallback>
 800ba6e:	e005      	b.n	800ba7c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 fa40 	bl	800bef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f000 fa51 	bl	800bf1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	2200      	movs	r2, #0
 800ba80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	691b      	ldr	r3, [r3, #16]
 800ba88:	f003 0308 	and.w	r3, r3, #8
 800ba8c:	2b08      	cmp	r3, #8
 800ba8e:	d122      	bne.n	800bad6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	68db      	ldr	r3, [r3, #12]
 800ba96:	f003 0308 	and.w	r3, r3, #8
 800ba9a:	2b08      	cmp	r3, #8
 800ba9c:	d11b      	bne.n	800bad6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f06f 0208 	mvn.w	r2, #8
 800baa6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2204      	movs	r2, #4
 800baac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	69db      	ldr	r3, [r3, #28]
 800bab4:	f003 0303 	and.w	r3, r3, #3
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d003      	beq.n	800bac4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 fa24 	bl	800bf0a <HAL_TIM_IC_CaptureCallback>
 800bac2:	e005      	b.n	800bad0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 fa16 	bl	800bef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 fa27 	bl	800bf1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2200      	movs	r2, #0
 800bad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	691b      	ldr	r3, [r3, #16]
 800badc:	f003 0310 	and.w	r3, r3, #16
 800bae0:	2b10      	cmp	r3, #16
 800bae2:	d122      	bne.n	800bb2a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	68db      	ldr	r3, [r3, #12]
 800baea:	f003 0310 	and.w	r3, r3, #16
 800baee:	2b10      	cmp	r3, #16
 800baf0:	d11b      	bne.n	800bb2a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f06f 0210 	mvn.w	r2, #16
 800bafa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2208      	movs	r2, #8
 800bb00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	69db      	ldr	r3, [r3, #28]
 800bb08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d003      	beq.n	800bb18 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f000 f9fa 	bl	800bf0a <HAL_TIM_IC_CaptureCallback>
 800bb16:	e005      	b.n	800bb24 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 f9ec 	bl	800bef6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 f9fd 	bl	800bf1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	691b      	ldr	r3, [r3, #16]
 800bb30:	f003 0301 	and.w	r3, r3, #1
 800bb34:	2b01      	cmp	r3, #1
 800bb36:	d10e      	bne.n	800bb56 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	68db      	ldr	r3, [r3, #12]
 800bb3e:	f003 0301 	and.w	r3, r3, #1
 800bb42:	2b01      	cmp	r3, #1
 800bb44:	d107      	bne.n	800bb56 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f06f 0201 	mvn.w	r2, #1
 800bb4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f7fb fe23 	bl	800779c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	691b      	ldr	r3, [r3, #16]
 800bb5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb60:	2b80      	cmp	r3, #128	; 0x80
 800bb62:	d10e      	bne.n	800bb82 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	68db      	ldr	r3, [r3, #12]
 800bb6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb6e:	2b80      	cmp	r3, #128	; 0x80
 800bb70:	d107      	bne.n	800bb82 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bb7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f000 fd53 	bl	800c628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	691b      	ldr	r3, [r3, #16]
 800bb88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb8c:	2b40      	cmp	r3, #64	; 0x40
 800bb8e:	d10e      	bne.n	800bbae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	68db      	ldr	r3, [r3, #12]
 800bb96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb9a:	2b40      	cmp	r3, #64	; 0x40
 800bb9c:	d107      	bne.n	800bbae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f000 f9c2 	bl	800bf32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	691b      	ldr	r3, [r3, #16]
 800bbb4:	f003 0320 	and.w	r3, r3, #32
 800bbb8:	2b20      	cmp	r3, #32
 800bbba:	d10e      	bne.n	800bbda <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	f003 0320 	and.w	r3, r3, #32
 800bbc6:	2b20      	cmp	r3, #32
 800bbc8:	d107      	bne.n	800bbda <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f06f 0220 	mvn.w	r2, #32
 800bbd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bbd4:	6878      	ldr	r0, [r7, #4]
 800bbd6:	f000 fd1d 	bl	800c614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bbda:	bf00      	nop
 800bbdc:	3708      	adds	r7, #8
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
	...

0800bbe4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	b086      	sub	sp, #24
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	60f8      	str	r0, [r7, #12]
 800bbec:	60b9      	str	r1, [r7, #8]
 800bbee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d101      	bne.n	800bc02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bbfe:	2302      	movs	r3, #2
 800bc00:	e0ae      	b.n	800bd60 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2201      	movs	r2, #1
 800bc06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2b0c      	cmp	r3, #12
 800bc0e:	f200 809f 	bhi.w	800bd50 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800bc12:	a201      	add	r2, pc, #4	; (adr r2, 800bc18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bc14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc18:	0800bc4d 	.word	0x0800bc4d
 800bc1c:	0800bd51 	.word	0x0800bd51
 800bc20:	0800bd51 	.word	0x0800bd51
 800bc24:	0800bd51 	.word	0x0800bd51
 800bc28:	0800bc8d 	.word	0x0800bc8d
 800bc2c:	0800bd51 	.word	0x0800bd51
 800bc30:	0800bd51 	.word	0x0800bd51
 800bc34:	0800bd51 	.word	0x0800bd51
 800bc38:	0800bccf 	.word	0x0800bccf
 800bc3c:	0800bd51 	.word	0x0800bd51
 800bc40:	0800bd51 	.word	0x0800bd51
 800bc44:	0800bd51 	.word	0x0800bd51
 800bc48:	0800bd0f 	.word	0x0800bd0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	68b9      	ldr	r1, [r7, #8]
 800bc52:	4618      	mov	r0, r3
 800bc54:	f000 fa18 	bl	800c088 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	699a      	ldr	r2, [r3, #24]
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f042 0208 	orr.w	r2, r2, #8
 800bc66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	699a      	ldr	r2, [r3, #24]
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	f022 0204 	bic.w	r2, r2, #4
 800bc76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	6999      	ldr	r1, [r3, #24]
 800bc7e:	68bb      	ldr	r3, [r7, #8]
 800bc80:	691a      	ldr	r2, [r3, #16]
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	430a      	orrs	r2, r1
 800bc88:	619a      	str	r2, [r3, #24]
      break;
 800bc8a:	e064      	b.n	800bd56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	68b9      	ldr	r1, [r7, #8]
 800bc92:	4618      	mov	r0, r3
 800bc94:	f000 fa68 	bl	800c168 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	699a      	ldr	r2, [r3, #24]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bca6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	699a      	ldr	r2, [r3, #24]
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bcb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	6999      	ldr	r1, [r3, #24]
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	691b      	ldr	r3, [r3, #16]
 800bcc2:	021a      	lsls	r2, r3, #8
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	430a      	orrs	r2, r1
 800bcca:	619a      	str	r2, [r3, #24]
      break;
 800bccc:	e043      	b.n	800bd56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	68b9      	ldr	r1, [r7, #8]
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	f000 fabd 	bl	800c254 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	69da      	ldr	r2, [r3, #28]
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f042 0208 	orr.w	r2, r2, #8
 800bce8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	69da      	ldr	r2, [r3, #28]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f022 0204 	bic.w	r2, r2, #4
 800bcf8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	69d9      	ldr	r1, [r3, #28]
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	691a      	ldr	r2, [r3, #16]
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	430a      	orrs	r2, r1
 800bd0a:	61da      	str	r2, [r3, #28]
      break;
 800bd0c:	e023      	b.n	800bd56 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	68b9      	ldr	r1, [r7, #8]
 800bd14:	4618      	mov	r0, r3
 800bd16:	f000 fb11 	bl	800c33c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	69da      	ldr	r2, [r3, #28]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bd28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	69da      	ldr	r2, [r3, #28]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800bd38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	69d9      	ldr	r1, [r3, #28]
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	691b      	ldr	r3, [r3, #16]
 800bd44:	021a      	lsls	r2, r3, #8
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	430a      	orrs	r2, r1
 800bd4c:	61da      	str	r2, [r3, #28]
      break;
 800bd4e:	e002      	b.n	800bd56 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800bd50:	2301      	movs	r3, #1
 800bd52:	75fb      	strb	r3, [r7, #23]
      break;
 800bd54:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bd5e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3718      	adds	r7, #24
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bd72:	2300      	movs	r3, #0
 800bd74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd7c:	2b01      	cmp	r3, #1
 800bd7e:	d101      	bne.n	800bd84 <HAL_TIM_ConfigClockSource+0x1c>
 800bd80:	2302      	movs	r3, #2
 800bd82:	e0b4      	b.n	800beee <HAL_TIM_ConfigClockSource+0x186>
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2201      	movs	r2, #1
 800bd88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2202      	movs	r2, #2
 800bd90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bda2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bdaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	68ba      	ldr	r2, [r7, #8]
 800bdb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdbc:	d03e      	beq.n	800be3c <HAL_TIM_ConfigClockSource+0xd4>
 800bdbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bdc2:	f200 8087 	bhi.w	800bed4 <HAL_TIM_ConfigClockSource+0x16c>
 800bdc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdca:	f000 8086 	beq.w	800beda <HAL_TIM_ConfigClockSource+0x172>
 800bdce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdd2:	d87f      	bhi.n	800bed4 <HAL_TIM_ConfigClockSource+0x16c>
 800bdd4:	2b70      	cmp	r3, #112	; 0x70
 800bdd6:	d01a      	beq.n	800be0e <HAL_TIM_ConfigClockSource+0xa6>
 800bdd8:	2b70      	cmp	r3, #112	; 0x70
 800bdda:	d87b      	bhi.n	800bed4 <HAL_TIM_ConfigClockSource+0x16c>
 800bddc:	2b60      	cmp	r3, #96	; 0x60
 800bdde:	d050      	beq.n	800be82 <HAL_TIM_ConfigClockSource+0x11a>
 800bde0:	2b60      	cmp	r3, #96	; 0x60
 800bde2:	d877      	bhi.n	800bed4 <HAL_TIM_ConfigClockSource+0x16c>
 800bde4:	2b50      	cmp	r3, #80	; 0x50
 800bde6:	d03c      	beq.n	800be62 <HAL_TIM_ConfigClockSource+0xfa>
 800bde8:	2b50      	cmp	r3, #80	; 0x50
 800bdea:	d873      	bhi.n	800bed4 <HAL_TIM_ConfigClockSource+0x16c>
 800bdec:	2b40      	cmp	r3, #64	; 0x40
 800bdee:	d058      	beq.n	800bea2 <HAL_TIM_ConfigClockSource+0x13a>
 800bdf0:	2b40      	cmp	r3, #64	; 0x40
 800bdf2:	d86f      	bhi.n	800bed4 <HAL_TIM_ConfigClockSource+0x16c>
 800bdf4:	2b30      	cmp	r3, #48	; 0x30
 800bdf6:	d064      	beq.n	800bec2 <HAL_TIM_ConfigClockSource+0x15a>
 800bdf8:	2b30      	cmp	r3, #48	; 0x30
 800bdfa:	d86b      	bhi.n	800bed4 <HAL_TIM_ConfigClockSource+0x16c>
 800bdfc:	2b20      	cmp	r3, #32
 800bdfe:	d060      	beq.n	800bec2 <HAL_TIM_ConfigClockSource+0x15a>
 800be00:	2b20      	cmp	r3, #32
 800be02:	d867      	bhi.n	800bed4 <HAL_TIM_ConfigClockSource+0x16c>
 800be04:	2b00      	cmp	r3, #0
 800be06:	d05c      	beq.n	800bec2 <HAL_TIM_ConfigClockSource+0x15a>
 800be08:	2b10      	cmp	r3, #16
 800be0a:	d05a      	beq.n	800bec2 <HAL_TIM_ConfigClockSource+0x15a>
 800be0c:	e062      	b.n	800bed4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6818      	ldr	r0, [r3, #0]
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	6899      	ldr	r1, [r3, #8]
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	685a      	ldr	r2, [r3, #4]
 800be1a:	683b      	ldr	r3, [r7, #0]
 800be1c:	68db      	ldr	r3, [r3, #12]
 800be1e:	f000 fb5d 	bl	800c4dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	689b      	ldr	r3, [r3, #8]
 800be28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800be30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	68ba      	ldr	r2, [r7, #8]
 800be38:	609a      	str	r2, [r3, #8]
      break;
 800be3a:	e04f      	b.n	800bedc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	6818      	ldr	r0, [r3, #0]
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	6899      	ldr	r1, [r3, #8]
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	685a      	ldr	r2, [r3, #4]
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	68db      	ldr	r3, [r3, #12]
 800be4c:	f000 fb46 	bl	800c4dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	689a      	ldr	r2, [r3, #8]
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800be5e:	609a      	str	r2, [r3, #8]
      break;
 800be60:	e03c      	b.n	800bedc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6818      	ldr	r0, [r3, #0]
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	6859      	ldr	r1, [r3, #4]
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	68db      	ldr	r3, [r3, #12]
 800be6e:	461a      	mov	r2, r3
 800be70:	f000 faba 	bl	800c3e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	2150      	movs	r1, #80	; 0x50
 800be7a:	4618      	mov	r0, r3
 800be7c:	f000 fb13 	bl	800c4a6 <TIM_ITRx_SetConfig>
      break;
 800be80:	e02c      	b.n	800bedc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6818      	ldr	r0, [r3, #0]
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	6859      	ldr	r1, [r3, #4]
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	68db      	ldr	r3, [r3, #12]
 800be8e:	461a      	mov	r2, r3
 800be90:	f000 fad9 	bl	800c446 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	2160      	movs	r1, #96	; 0x60
 800be9a:	4618      	mov	r0, r3
 800be9c:	f000 fb03 	bl	800c4a6 <TIM_ITRx_SetConfig>
      break;
 800bea0:	e01c      	b.n	800bedc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6818      	ldr	r0, [r3, #0]
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	6859      	ldr	r1, [r3, #4]
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	68db      	ldr	r3, [r3, #12]
 800beae:	461a      	mov	r2, r3
 800beb0:	f000 fa9a 	bl	800c3e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2140      	movs	r1, #64	; 0x40
 800beba:	4618      	mov	r0, r3
 800bebc:	f000 faf3 	bl	800c4a6 <TIM_ITRx_SetConfig>
      break;
 800bec0:	e00c      	b.n	800bedc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681a      	ldr	r2, [r3, #0]
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4619      	mov	r1, r3
 800becc:	4610      	mov	r0, r2
 800bece:	f000 faea 	bl	800c4a6 <TIM_ITRx_SetConfig>
      break;
 800bed2:	e003      	b.n	800bedc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bed4:	2301      	movs	r3, #1
 800bed6:	73fb      	strb	r3, [r7, #15]
      break;
 800bed8:	e000      	b.n	800bedc <HAL_TIM_ConfigClockSource+0x174>
      break;
 800beda:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	2201      	movs	r2, #1
 800bee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	2200      	movs	r2, #0
 800bee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800beec:	7bfb      	ldrb	r3, [r7, #15]
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3710      	adds	r7, #16
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}

0800bef6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bef6:	b480      	push	{r7}
 800bef8:	b083      	sub	sp, #12
 800befa:	af00      	add	r7, sp, #0
 800befc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800befe:	bf00      	nop
 800bf00:	370c      	adds	r7, #12
 800bf02:	46bd      	mov	sp, r7
 800bf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf08:	4770      	bx	lr

0800bf0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bf0a:	b480      	push	{r7}
 800bf0c:	b083      	sub	sp, #12
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bf12:	bf00      	nop
 800bf14:	370c      	adds	r7, #12
 800bf16:	46bd      	mov	sp, r7
 800bf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1c:	4770      	bx	lr

0800bf1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bf1e:	b480      	push	{r7}
 800bf20:	b083      	sub	sp, #12
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bf26:	bf00      	nop
 800bf28:	370c      	adds	r7, #12
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf30:	4770      	bx	lr

0800bf32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bf32:	b480      	push	{r7}
 800bf34:	b083      	sub	sp, #12
 800bf36:	af00      	add	r7, sp, #0
 800bf38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bf3a:	bf00      	nop
 800bf3c:	370c      	adds	r7, #12
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr
	...

0800bf48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b085      	sub	sp, #20
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4a40      	ldr	r2, [pc, #256]	; (800c05c <TIM_Base_SetConfig+0x114>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d013      	beq.n	800bf88 <TIM_Base_SetConfig+0x40>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf66:	d00f      	beq.n	800bf88 <TIM_Base_SetConfig+0x40>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4a3d      	ldr	r2, [pc, #244]	; (800c060 <TIM_Base_SetConfig+0x118>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d00b      	beq.n	800bf88 <TIM_Base_SetConfig+0x40>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4a3c      	ldr	r2, [pc, #240]	; (800c064 <TIM_Base_SetConfig+0x11c>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d007      	beq.n	800bf88 <TIM_Base_SetConfig+0x40>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	4a3b      	ldr	r2, [pc, #236]	; (800c068 <TIM_Base_SetConfig+0x120>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d003      	beq.n	800bf88 <TIM_Base_SetConfig+0x40>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	4a3a      	ldr	r2, [pc, #232]	; (800c06c <TIM_Base_SetConfig+0x124>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d108      	bne.n	800bf9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	68fa      	ldr	r2, [r7, #12]
 800bf96:	4313      	orrs	r3, r2
 800bf98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	4a2f      	ldr	r2, [pc, #188]	; (800c05c <TIM_Base_SetConfig+0x114>)
 800bf9e:	4293      	cmp	r3, r2
 800bfa0:	d02b      	beq.n	800bffa <TIM_Base_SetConfig+0xb2>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bfa8:	d027      	beq.n	800bffa <TIM_Base_SetConfig+0xb2>
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	4a2c      	ldr	r2, [pc, #176]	; (800c060 <TIM_Base_SetConfig+0x118>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d023      	beq.n	800bffa <TIM_Base_SetConfig+0xb2>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	4a2b      	ldr	r2, [pc, #172]	; (800c064 <TIM_Base_SetConfig+0x11c>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d01f      	beq.n	800bffa <TIM_Base_SetConfig+0xb2>
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	4a2a      	ldr	r2, [pc, #168]	; (800c068 <TIM_Base_SetConfig+0x120>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d01b      	beq.n	800bffa <TIM_Base_SetConfig+0xb2>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	4a29      	ldr	r2, [pc, #164]	; (800c06c <TIM_Base_SetConfig+0x124>)
 800bfc6:	4293      	cmp	r3, r2
 800bfc8:	d017      	beq.n	800bffa <TIM_Base_SetConfig+0xb2>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	4a28      	ldr	r2, [pc, #160]	; (800c070 <TIM_Base_SetConfig+0x128>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d013      	beq.n	800bffa <TIM_Base_SetConfig+0xb2>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	4a27      	ldr	r2, [pc, #156]	; (800c074 <TIM_Base_SetConfig+0x12c>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d00f      	beq.n	800bffa <TIM_Base_SetConfig+0xb2>
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	4a26      	ldr	r2, [pc, #152]	; (800c078 <TIM_Base_SetConfig+0x130>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d00b      	beq.n	800bffa <TIM_Base_SetConfig+0xb2>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	4a25      	ldr	r2, [pc, #148]	; (800c07c <TIM_Base_SetConfig+0x134>)
 800bfe6:	4293      	cmp	r3, r2
 800bfe8:	d007      	beq.n	800bffa <TIM_Base_SetConfig+0xb2>
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	4a24      	ldr	r2, [pc, #144]	; (800c080 <TIM_Base_SetConfig+0x138>)
 800bfee:	4293      	cmp	r3, r2
 800bff0:	d003      	beq.n	800bffa <TIM_Base_SetConfig+0xb2>
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	4a23      	ldr	r2, [pc, #140]	; (800c084 <TIM_Base_SetConfig+0x13c>)
 800bff6:	4293      	cmp	r3, r2
 800bff8:	d108      	bne.n	800c00c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c000:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	68db      	ldr	r3, [r3, #12]
 800c006:	68fa      	ldr	r2, [r7, #12]
 800c008:	4313      	orrs	r3, r2
 800c00a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	695b      	ldr	r3, [r3, #20]
 800c016:	4313      	orrs	r3, r2
 800c018:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	689a      	ldr	r2, [r3, #8]
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	4a0a      	ldr	r2, [pc, #40]	; (800c05c <TIM_Base_SetConfig+0x114>)
 800c034:	4293      	cmp	r3, r2
 800c036:	d003      	beq.n	800c040 <TIM_Base_SetConfig+0xf8>
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	4a0c      	ldr	r2, [pc, #48]	; (800c06c <TIM_Base_SetConfig+0x124>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d103      	bne.n	800c048 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	691a      	ldr	r2, [r3, #16]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2201      	movs	r2, #1
 800c04c:	615a      	str	r2, [r3, #20]
}
 800c04e:	bf00      	nop
 800c050:	3714      	adds	r7, #20
 800c052:	46bd      	mov	sp, r7
 800c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c058:	4770      	bx	lr
 800c05a:	bf00      	nop
 800c05c:	40010000 	.word	0x40010000
 800c060:	40000400 	.word	0x40000400
 800c064:	40000800 	.word	0x40000800
 800c068:	40000c00 	.word	0x40000c00
 800c06c:	40010400 	.word	0x40010400
 800c070:	40014000 	.word	0x40014000
 800c074:	40014400 	.word	0x40014400
 800c078:	40014800 	.word	0x40014800
 800c07c:	40001800 	.word	0x40001800
 800c080:	40001c00 	.word	0x40001c00
 800c084:	40002000 	.word	0x40002000

0800c088 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c088:	b480      	push	{r7}
 800c08a:	b087      	sub	sp, #28
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
 800c090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6a1b      	ldr	r3, [r3, #32]
 800c096:	f023 0201 	bic.w	r2, r3, #1
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6a1b      	ldr	r3, [r3, #32]
 800c0a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	699b      	ldr	r3, [r3, #24]
 800c0ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f023 0303 	bic.w	r3, r3, #3
 800c0be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	68fa      	ldr	r2, [r7, #12]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c0ca:	697b      	ldr	r3, [r7, #20]
 800c0cc:	f023 0302 	bic.w	r3, r3, #2
 800c0d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c0d2:	683b      	ldr	r3, [r7, #0]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	697a      	ldr	r2, [r7, #20]
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	4a20      	ldr	r2, [pc, #128]	; (800c160 <TIM_OC1_SetConfig+0xd8>)
 800c0e0:	4293      	cmp	r3, r2
 800c0e2:	d003      	beq.n	800c0ec <TIM_OC1_SetConfig+0x64>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	4a1f      	ldr	r2, [pc, #124]	; (800c164 <TIM_OC1_SetConfig+0xdc>)
 800c0e8:	4293      	cmp	r3, r2
 800c0ea:	d10c      	bne.n	800c106 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	f023 0308 	bic.w	r3, r3, #8
 800c0f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	697a      	ldr	r2, [r7, #20]
 800c0fa:	4313      	orrs	r3, r2
 800c0fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c0fe:	697b      	ldr	r3, [r7, #20]
 800c100:	f023 0304 	bic.w	r3, r3, #4
 800c104:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	4a15      	ldr	r2, [pc, #84]	; (800c160 <TIM_OC1_SetConfig+0xd8>)
 800c10a:	4293      	cmp	r3, r2
 800c10c:	d003      	beq.n	800c116 <TIM_OC1_SetConfig+0x8e>
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	4a14      	ldr	r2, [pc, #80]	; (800c164 <TIM_OC1_SetConfig+0xdc>)
 800c112:	4293      	cmp	r3, r2
 800c114:	d111      	bne.n	800c13a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c116:	693b      	ldr	r3, [r7, #16]
 800c118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c11c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c124:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	695b      	ldr	r3, [r3, #20]
 800c12a:	693a      	ldr	r2, [r7, #16]
 800c12c:	4313      	orrs	r3, r2
 800c12e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	699b      	ldr	r3, [r3, #24]
 800c134:	693a      	ldr	r2, [r7, #16]
 800c136:	4313      	orrs	r3, r2
 800c138:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	693a      	ldr	r2, [r7, #16]
 800c13e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	68fa      	ldr	r2, [r7, #12]
 800c144:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c146:	683b      	ldr	r3, [r7, #0]
 800c148:	685a      	ldr	r2, [r3, #4]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	697a      	ldr	r2, [r7, #20]
 800c152:	621a      	str	r2, [r3, #32]
}
 800c154:	bf00      	nop
 800c156:	371c      	adds	r7, #28
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr
 800c160:	40010000 	.word	0x40010000
 800c164:	40010400 	.word	0x40010400

0800c168 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c168:	b480      	push	{r7}
 800c16a:	b087      	sub	sp, #28
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	6a1b      	ldr	r3, [r3, #32]
 800c176:	f023 0210 	bic.w	r2, r3, #16
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6a1b      	ldr	r3, [r3, #32]
 800c182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	685b      	ldr	r3, [r3, #4]
 800c188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	699b      	ldr	r3, [r3, #24]
 800c18e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c19e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	021b      	lsls	r3, r3, #8
 800c1a6:	68fa      	ldr	r2, [r7, #12]
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	f023 0320 	bic.w	r3, r3, #32
 800c1b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c1b4:	683b      	ldr	r3, [r7, #0]
 800c1b6:	689b      	ldr	r3, [r3, #8]
 800c1b8:	011b      	lsls	r3, r3, #4
 800c1ba:	697a      	ldr	r2, [r7, #20]
 800c1bc:	4313      	orrs	r3, r2
 800c1be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	4a22      	ldr	r2, [pc, #136]	; (800c24c <TIM_OC2_SetConfig+0xe4>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d003      	beq.n	800c1d0 <TIM_OC2_SetConfig+0x68>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4a21      	ldr	r2, [pc, #132]	; (800c250 <TIM_OC2_SetConfig+0xe8>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d10d      	bne.n	800c1ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	68db      	ldr	r3, [r3, #12]
 800c1dc:	011b      	lsls	r3, r3, #4
 800c1de:	697a      	ldr	r2, [r7, #20]
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c1e4:	697b      	ldr	r3, [r7, #20]
 800c1e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c1ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	4a17      	ldr	r2, [pc, #92]	; (800c24c <TIM_OC2_SetConfig+0xe4>)
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d003      	beq.n	800c1fc <TIM_OC2_SetConfig+0x94>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	4a16      	ldr	r2, [pc, #88]	; (800c250 <TIM_OC2_SetConfig+0xe8>)
 800c1f8:	4293      	cmp	r3, r2
 800c1fa:	d113      	bne.n	800c224 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c202:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c20a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	695b      	ldr	r3, [r3, #20]
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	693a      	ldr	r2, [r7, #16]
 800c214:	4313      	orrs	r3, r2
 800c216:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	699b      	ldr	r3, [r3, #24]
 800c21c:	009b      	lsls	r3, r3, #2
 800c21e:	693a      	ldr	r2, [r7, #16]
 800c220:	4313      	orrs	r3, r2
 800c222:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	693a      	ldr	r2, [r7, #16]
 800c228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	68fa      	ldr	r2, [r7, #12]
 800c22e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	685a      	ldr	r2, [r3, #4]
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	697a      	ldr	r2, [r7, #20]
 800c23c:	621a      	str	r2, [r3, #32]
}
 800c23e:	bf00      	nop
 800c240:	371c      	adds	r7, #28
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr
 800c24a:	bf00      	nop
 800c24c:	40010000 	.word	0x40010000
 800c250:	40010400 	.word	0x40010400

0800c254 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c254:	b480      	push	{r7}
 800c256:	b087      	sub	sp, #28
 800c258:	af00      	add	r7, sp, #0
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6a1b      	ldr	r3, [r3, #32]
 800c262:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a1b      	ldr	r3, [r3, #32]
 800c26e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	69db      	ldr	r3, [r3, #28]
 800c27a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c282:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f023 0303 	bic.w	r3, r3, #3
 800c28a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	68fa      	ldr	r2, [r7, #12]
 800c292:	4313      	orrs	r3, r2
 800c294:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c29c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	689b      	ldr	r3, [r3, #8]
 800c2a2:	021b      	lsls	r3, r3, #8
 800c2a4:	697a      	ldr	r2, [r7, #20]
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4a21      	ldr	r2, [pc, #132]	; (800c334 <TIM_OC3_SetConfig+0xe0>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d003      	beq.n	800c2ba <TIM_OC3_SetConfig+0x66>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4a20      	ldr	r2, [pc, #128]	; (800c338 <TIM_OC3_SetConfig+0xe4>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d10d      	bne.n	800c2d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c2c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	021b      	lsls	r3, r3, #8
 800c2c8:	697a      	ldr	r2, [r7, #20]
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c2d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4a16      	ldr	r2, [pc, #88]	; (800c334 <TIM_OC3_SetConfig+0xe0>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d003      	beq.n	800c2e6 <TIM_OC3_SetConfig+0x92>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4a15      	ldr	r2, [pc, #84]	; (800c338 <TIM_OC3_SetConfig+0xe4>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d113      	bne.n	800c30e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c2ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c2f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	695b      	ldr	r3, [r3, #20]
 800c2fa:	011b      	lsls	r3, r3, #4
 800c2fc:	693a      	ldr	r2, [r7, #16]
 800c2fe:	4313      	orrs	r3, r2
 800c300:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	699b      	ldr	r3, [r3, #24]
 800c306:	011b      	lsls	r3, r3, #4
 800c308:	693a      	ldr	r2, [r7, #16]
 800c30a:	4313      	orrs	r3, r2
 800c30c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	693a      	ldr	r2, [r7, #16]
 800c312:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	68fa      	ldr	r2, [r7, #12]
 800c318:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	685a      	ldr	r2, [r3, #4]
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	697a      	ldr	r2, [r7, #20]
 800c326:	621a      	str	r2, [r3, #32]
}
 800c328:	bf00      	nop
 800c32a:	371c      	adds	r7, #28
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr
 800c334:	40010000 	.word	0x40010000
 800c338:	40010400 	.word	0x40010400

0800c33c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c33c:	b480      	push	{r7}
 800c33e:	b087      	sub	sp, #28
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	6a1b      	ldr	r3, [r3, #32]
 800c34a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6a1b      	ldr	r3, [r3, #32]
 800c356:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	69db      	ldr	r3, [r3, #28]
 800c362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c36a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	021b      	lsls	r3, r3, #8
 800c37a:	68fa      	ldr	r2, [r7, #12]
 800c37c:	4313      	orrs	r3, r2
 800c37e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c386:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	689b      	ldr	r3, [r3, #8]
 800c38c:	031b      	lsls	r3, r3, #12
 800c38e:	693a      	ldr	r2, [r7, #16]
 800c390:	4313      	orrs	r3, r2
 800c392:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	4a12      	ldr	r2, [pc, #72]	; (800c3e0 <TIM_OC4_SetConfig+0xa4>)
 800c398:	4293      	cmp	r3, r2
 800c39a:	d003      	beq.n	800c3a4 <TIM_OC4_SetConfig+0x68>
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	4a11      	ldr	r2, [pc, #68]	; (800c3e4 <TIM_OC4_SetConfig+0xa8>)
 800c3a0:	4293      	cmp	r3, r2
 800c3a2:	d109      	bne.n	800c3b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c3aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	695b      	ldr	r3, [r3, #20]
 800c3b0:	019b      	lsls	r3, r3, #6
 800c3b2:	697a      	ldr	r2, [r7, #20]
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	697a      	ldr	r2, [r7, #20]
 800c3bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	68fa      	ldr	r2, [r7, #12]
 800c3c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	685a      	ldr	r2, [r3, #4]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	693a      	ldr	r2, [r7, #16]
 800c3d0:	621a      	str	r2, [r3, #32]
}
 800c3d2:	bf00      	nop
 800c3d4:	371c      	adds	r7, #28
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop
 800c3e0:	40010000 	.word	0x40010000
 800c3e4:	40010400 	.word	0x40010400

0800c3e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b087      	sub	sp, #28
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	6a1b      	ldr	r3, [r3, #32]
 800c3f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	6a1b      	ldr	r3, [r3, #32]
 800c3fe:	f023 0201 	bic.w	r2, r3, #1
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	699b      	ldr	r3, [r3, #24]
 800c40a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	011b      	lsls	r3, r3, #4
 800c418:	693a      	ldr	r2, [r7, #16]
 800c41a:	4313      	orrs	r3, r2
 800c41c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	f023 030a 	bic.w	r3, r3, #10
 800c424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c426:	697a      	ldr	r2, [r7, #20]
 800c428:	68bb      	ldr	r3, [r7, #8]
 800c42a:	4313      	orrs	r3, r2
 800c42c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	693a      	ldr	r2, [r7, #16]
 800c432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	697a      	ldr	r2, [r7, #20]
 800c438:	621a      	str	r2, [r3, #32]
}
 800c43a:	bf00      	nop
 800c43c:	371c      	adds	r7, #28
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr

0800c446 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c446:	b480      	push	{r7}
 800c448:	b087      	sub	sp, #28
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	60f8      	str	r0, [r7, #12]
 800c44e:	60b9      	str	r1, [r7, #8]
 800c450:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	6a1b      	ldr	r3, [r3, #32]
 800c456:	f023 0210 	bic.w	r2, r3, #16
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	699b      	ldr	r3, [r3, #24]
 800c462:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	6a1b      	ldr	r3, [r3, #32]
 800c468:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c46a:	697b      	ldr	r3, [r7, #20]
 800c46c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c470:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	031b      	lsls	r3, r3, #12
 800c476:	697a      	ldr	r2, [r7, #20]
 800c478:	4313      	orrs	r3, r2
 800c47a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c47c:	693b      	ldr	r3, [r7, #16]
 800c47e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c482:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	011b      	lsls	r3, r3, #4
 800c488:	693a      	ldr	r2, [r7, #16]
 800c48a:	4313      	orrs	r3, r2
 800c48c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	697a      	ldr	r2, [r7, #20]
 800c492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c494:	68fb      	ldr	r3, [r7, #12]
 800c496:	693a      	ldr	r2, [r7, #16]
 800c498:	621a      	str	r2, [r3, #32]
}
 800c49a:	bf00      	nop
 800c49c:	371c      	adds	r7, #28
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr

0800c4a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c4a6:	b480      	push	{r7}
 800c4a8:	b085      	sub	sp, #20
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
 800c4ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	689b      	ldr	r3, [r3, #8]
 800c4b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c4be:	683a      	ldr	r2, [r7, #0]
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	f043 0307 	orr.w	r3, r3, #7
 800c4c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	68fa      	ldr	r2, [r7, #12]
 800c4ce:	609a      	str	r2, [r3, #8]
}
 800c4d0:	bf00      	nop
 800c4d2:	3714      	adds	r7, #20
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b087      	sub	sp, #28
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	607a      	str	r2, [r7, #4]
 800c4e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	689b      	ldr	r3, [r3, #8]
 800c4ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c4f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	021a      	lsls	r2, r3, #8
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	431a      	orrs	r2, r3
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	4313      	orrs	r3, r2
 800c504:	697a      	ldr	r2, [r7, #20]
 800c506:	4313      	orrs	r3, r2
 800c508:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	697a      	ldr	r2, [r7, #20]
 800c50e:	609a      	str	r2, [r3, #8]
}
 800c510:	bf00      	nop
 800c512:	371c      	adds	r7, #28
 800c514:	46bd      	mov	sp, r7
 800c516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51a:	4770      	bx	lr

0800c51c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b085      	sub	sp, #20
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
 800c524:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d101      	bne.n	800c534 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c530:	2302      	movs	r3, #2
 800c532:	e05a      	b.n	800c5ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	2201      	movs	r2, #1
 800c538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2202      	movs	r2, #2
 800c540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	685b      	ldr	r3, [r3, #4]
 800c54a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	689b      	ldr	r3, [r3, #8]
 800c552:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c55a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	68fa      	ldr	r2, [r7, #12]
 800c562:	4313      	orrs	r3, r2
 800c564:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	68fa      	ldr	r2, [r7, #12]
 800c56c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	4a21      	ldr	r2, [pc, #132]	; (800c5f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c574:	4293      	cmp	r3, r2
 800c576:	d022      	beq.n	800c5be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c580:	d01d      	beq.n	800c5be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a1d      	ldr	r2, [pc, #116]	; (800c5fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d018      	beq.n	800c5be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a1b      	ldr	r2, [pc, #108]	; (800c600 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d013      	beq.n	800c5be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4a1a      	ldr	r2, [pc, #104]	; (800c604 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d00e      	beq.n	800c5be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4a18      	ldr	r2, [pc, #96]	; (800c608 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c5a6:	4293      	cmp	r3, r2
 800c5a8:	d009      	beq.n	800c5be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	4a17      	ldr	r2, [pc, #92]	; (800c60c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c5b0:	4293      	cmp	r3, r2
 800c5b2:	d004      	beq.n	800c5be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4a15      	ldr	r2, [pc, #84]	; (800c610 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c5ba:	4293      	cmp	r3, r2
 800c5bc:	d10c      	bne.n	800c5d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	68ba      	ldr	r2, [r7, #8]
 800c5cc:	4313      	orrs	r3, r2
 800c5ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	68ba      	ldr	r2, [r7, #8]
 800c5d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c5e8:	2300      	movs	r3, #0
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3714      	adds	r7, #20
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr
 800c5f6:	bf00      	nop
 800c5f8:	40010000 	.word	0x40010000
 800c5fc:	40000400 	.word	0x40000400
 800c600:	40000800 	.word	0x40000800
 800c604:	40000c00 	.word	0x40000c00
 800c608:	40010400 	.word	0x40010400
 800c60c:	40014000 	.word	0x40014000
 800c610:	40001800 	.word	0x40001800

0800c614 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c614:	b480      	push	{r7}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c61c:	bf00      	nop
 800c61e:	370c      	adds	r7, #12
 800c620:	46bd      	mov	sp, r7
 800c622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c626:	4770      	bx	lr

0800c628 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c630:	bf00      	nop
 800c632:	370c      	adds	r7, #12
 800c634:	46bd      	mov	sp, r7
 800c636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63a:	4770      	bx	lr

0800c63c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d101      	bne.n	800c64e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c64a:	2301      	movs	r3, #1
 800c64c:	e03f      	b.n	800c6ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c654:	b2db      	uxtb	r3, r3
 800c656:	2b00      	cmp	r3, #0
 800c658:	d106      	bne.n	800c668 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	2200      	movs	r2, #0
 800c65e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f7fb febc 	bl	80083e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2224      	movs	r2, #36	; 0x24
 800c66c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	68da      	ldr	r2, [r3, #12]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c67e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c680:	6878      	ldr	r0, [r7, #4]
 800c682:	f000 f829 	bl	800c6d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	691a      	ldr	r2, [r3, #16]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c694:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	695a      	ldr	r2, [r3, #20]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c6a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	68da      	ldr	r2, [r3, #12]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c6b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2220      	movs	r2, #32
 800c6c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2220      	movs	r2, #32
 800c6c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c6cc:	2300      	movs	r3, #0
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3708      	adds	r7, #8
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
	...

0800c6d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c6d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c6dc:	b0c0      	sub	sp, #256	; 0x100
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c6e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	691b      	ldr	r3, [r3, #16]
 800c6ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c6f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6f4:	68d9      	ldr	r1, [r3, #12]
 800c6f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c6fa:	681a      	ldr	r2, [r3, #0]
 800c6fc:	ea40 0301 	orr.w	r3, r0, r1
 800c700:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c706:	689a      	ldr	r2, [r3, #8]
 800c708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c70c:	691b      	ldr	r3, [r3, #16]
 800c70e:	431a      	orrs	r2, r3
 800c710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c714:	695b      	ldr	r3, [r3, #20]
 800c716:	431a      	orrs	r2, r3
 800c718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c71c:	69db      	ldr	r3, [r3, #28]
 800c71e:	4313      	orrs	r3, r2
 800c720:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	68db      	ldr	r3, [r3, #12]
 800c72c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c730:	f021 010c 	bic.w	r1, r1, #12
 800c734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c738:	681a      	ldr	r2, [r3, #0]
 800c73a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c73e:	430b      	orrs	r3, r1
 800c740:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	695b      	ldr	r3, [r3, #20]
 800c74a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c74e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c752:	6999      	ldr	r1, [r3, #24]
 800c754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c758:	681a      	ldr	r2, [r3, #0]
 800c75a:	ea40 0301 	orr.w	r3, r0, r1
 800c75e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c764:	681a      	ldr	r2, [r3, #0]
 800c766:	4b8f      	ldr	r3, [pc, #572]	; (800c9a4 <UART_SetConfig+0x2cc>)
 800c768:	429a      	cmp	r2, r3
 800c76a:	d005      	beq.n	800c778 <UART_SetConfig+0xa0>
 800c76c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c770:	681a      	ldr	r2, [r3, #0]
 800c772:	4b8d      	ldr	r3, [pc, #564]	; (800c9a8 <UART_SetConfig+0x2d0>)
 800c774:	429a      	cmp	r2, r3
 800c776:	d104      	bne.n	800c782 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c778:	f7fe fe1e 	bl	800b3b8 <HAL_RCC_GetPCLK2Freq>
 800c77c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c780:	e003      	b.n	800c78a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c782:	f7fe fe05 	bl	800b390 <HAL_RCC_GetPCLK1Freq>
 800c786:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c78a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c78e:	69db      	ldr	r3, [r3, #28]
 800c790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c794:	f040 810c 	bne.w	800c9b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c79c:	2200      	movs	r2, #0
 800c79e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c7a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c7a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c7aa:	4622      	mov	r2, r4
 800c7ac:	462b      	mov	r3, r5
 800c7ae:	1891      	adds	r1, r2, r2
 800c7b0:	65b9      	str	r1, [r7, #88]	; 0x58
 800c7b2:	415b      	adcs	r3, r3
 800c7b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c7b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c7ba:	4621      	mov	r1, r4
 800c7bc:	eb12 0801 	adds.w	r8, r2, r1
 800c7c0:	4629      	mov	r1, r5
 800c7c2:	eb43 0901 	adc.w	r9, r3, r1
 800c7c6:	f04f 0200 	mov.w	r2, #0
 800c7ca:	f04f 0300 	mov.w	r3, #0
 800c7ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c7d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c7d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c7da:	4690      	mov	r8, r2
 800c7dc:	4699      	mov	r9, r3
 800c7de:	4623      	mov	r3, r4
 800c7e0:	eb18 0303 	adds.w	r3, r8, r3
 800c7e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c7e8:	462b      	mov	r3, r5
 800c7ea:	eb49 0303 	adc.w	r3, r9, r3
 800c7ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c7f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	2200      	movs	r2, #0
 800c7fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c7fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c802:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c806:	460b      	mov	r3, r1
 800c808:	18db      	adds	r3, r3, r3
 800c80a:	653b      	str	r3, [r7, #80]	; 0x50
 800c80c:	4613      	mov	r3, r2
 800c80e:	eb42 0303 	adc.w	r3, r2, r3
 800c812:	657b      	str	r3, [r7, #84]	; 0x54
 800c814:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c818:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c81c:	f7f4 fa34 	bl	8000c88 <__aeabi_uldivmod>
 800c820:	4602      	mov	r2, r0
 800c822:	460b      	mov	r3, r1
 800c824:	4b61      	ldr	r3, [pc, #388]	; (800c9ac <UART_SetConfig+0x2d4>)
 800c826:	fba3 2302 	umull	r2, r3, r3, r2
 800c82a:	095b      	lsrs	r3, r3, #5
 800c82c:	011c      	lsls	r4, r3, #4
 800c82e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c832:	2200      	movs	r2, #0
 800c834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c838:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c83c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c840:	4642      	mov	r2, r8
 800c842:	464b      	mov	r3, r9
 800c844:	1891      	adds	r1, r2, r2
 800c846:	64b9      	str	r1, [r7, #72]	; 0x48
 800c848:	415b      	adcs	r3, r3
 800c84a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c84c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c850:	4641      	mov	r1, r8
 800c852:	eb12 0a01 	adds.w	sl, r2, r1
 800c856:	4649      	mov	r1, r9
 800c858:	eb43 0b01 	adc.w	fp, r3, r1
 800c85c:	f04f 0200 	mov.w	r2, #0
 800c860:	f04f 0300 	mov.w	r3, #0
 800c864:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c868:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c86c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c870:	4692      	mov	sl, r2
 800c872:	469b      	mov	fp, r3
 800c874:	4643      	mov	r3, r8
 800c876:	eb1a 0303 	adds.w	r3, sl, r3
 800c87a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c87e:	464b      	mov	r3, r9
 800c880:	eb4b 0303 	adc.w	r3, fp, r3
 800c884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	2200      	movs	r2, #0
 800c890:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c894:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c898:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c89c:	460b      	mov	r3, r1
 800c89e:	18db      	adds	r3, r3, r3
 800c8a0:	643b      	str	r3, [r7, #64]	; 0x40
 800c8a2:	4613      	mov	r3, r2
 800c8a4:	eb42 0303 	adc.w	r3, r2, r3
 800c8a8:	647b      	str	r3, [r7, #68]	; 0x44
 800c8aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c8ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c8b2:	f7f4 f9e9 	bl	8000c88 <__aeabi_uldivmod>
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	4611      	mov	r1, r2
 800c8bc:	4b3b      	ldr	r3, [pc, #236]	; (800c9ac <UART_SetConfig+0x2d4>)
 800c8be:	fba3 2301 	umull	r2, r3, r3, r1
 800c8c2:	095b      	lsrs	r3, r3, #5
 800c8c4:	2264      	movs	r2, #100	; 0x64
 800c8c6:	fb02 f303 	mul.w	r3, r2, r3
 800c8ca:	1acb      	subs	r3, r1, r3
 800c8cc:	00db      	lsls	r3, r3, #3
 800c8ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c8d2:	4b36      	ldr	r3, [pc, #216]	; (800c9ac <UART_SetConfig+0x2d4>)
 800c8d4:	fba3 2302 	umull	r2, r3, r3, r2
 800c8d8:	095b      	lsrs	r3, r3, #5
 800c8da:	005b      	lsls	r3, r3, #1
 800c8dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c8e0:	441c      	add	r4, r3
 800c8e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c8ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c8f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c8f4:	4642      	mov	r2, r8
 800c8f6:	464b      	mov	r3, r9
 800c8f8:	1891      	adds	r1, r2, r2
 800c8fa:	63b9      	str	r1, [r7, #56]	; 0x38
 800c8fc:	415b      	adcs	r3, r3
 800c8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c900:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c904:	4641      	mov	r1, r8
 800c906:	1851      	adds	r1, r2, r1
 800c908:	6339      	str	r1, [r7, #48]	; 0x30
 800c90a:	4649      	mov	r1, r9
 800c90c:	414b      	adcs	r3, r1
 800c90e:	637b      	str	r3, [r7, #52]	; 0x34
 800c910:	f04f 0200 	mov.w	r2, #0
 800c914:	f04f 0300 	mov.w	r3, #0
 800c918:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c91c:	4659      	mov	r1, fp
 800c91e:	00cb      	lsls	r3, r1, #3
 800c920:	4651      	mov	r1, sl
 800c922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c926:	4651      	mov	r1, sl
 800c928:	00ca      	lsls	r2, r1, #3
 800c92a:	4610      	mov	r0, r2
 800c92c:	4619      	mov	r1, r3
 800c92e:	4603      	mov	r3, r0
 800c930:	4642      	mov	r2, r8
 800c932:	189b      	adds	r3, r3, r2
 800c934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c938:	464b      	mov	r3, r9
 800c93a:	460a      	mov	r2, r1
 800c93c:	eb42 0303 	adc.w	r3, r2, r3
 800c940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c948:	685b      	ldr	r3, [r3, #4]
 800c94a:	2200      	movs	r2, #0
 800c94c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c950:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c954:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c958:	460b      	mov	r3, r1
 800c95a:	18db      	adds	r3, r3, r3
 800c95c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c95e:	4613      	mov	r3, r2
 800c960:	eb42 0303 	adc.w	r3, r2, r3
 800c964:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c966:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c96a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c96e:	f7f4 f98b 	bl	8000c88 <__aeabi_uldivmod>
 800c972:	4602      	mov	r2, r0
 800c974:	460b      	mov	r3, r1
 800c976:	4b0d      	ldr	r3, [pc, #52]	; (800c9ac <UART_SetConfig+0x2d4>)
 800c978:	fba3 1302 	umull	r1, r3, r3, r2
 800c97c:	095b      	lsrs	r3, r3, #5
 800c97e:	2164      	movs	r1, #100	; 0x64
 800c980:	fb01 f303 	mul.w	r3, r1, r3
 800c984:	1ad3      	subs	r3, r2, r3
 800c986:	00db      	lsls	r3, r3, #3
 800c988:	3332      	adds	r3, #50	; 0x32
 800c98a:	4a08      	ldr	r2, [pc, #32]	; (800c9ac <UART_SetConfig+0x2d4>)
 800c98c:	fba2 2303 	umull	r2, r3, r2, r3
 800c990:	095b      	lsrs	r3, r3, #5
 800c992:	f003 0207 	and.w	r2, r3, #7
 800c996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4422      	add	r2, r4
 800c99e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c9a0:	e105      	b.n	800cbae <UART_SetConfig+0x4d6>
 800c9a2:	bf00      	nop
 800c9a4:	40011000 	.word	0x40011000
 800c9a8:	40011400 	.word	0x40011400
 800c9ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c9b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c9ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c9be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c9c2:	4642      	mov	r2, r8
 800c9c4:	464b      	mov	r3, r9
 800c9c6:	1891      	adds	r1, r2, r2
 800c9c8:	6239      	str	r1, [r7, #32]
 800c9ca:	415b      	adcs	r3, r3
 800c9cc:	627b      	str	r3, [r7, #36]	; 0x24
 800c9ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c9d2:	4641      	mov	r1, r8
 800c9d4:	1854      	adds	r4, r2, r1
 800c9d6:	4649      	mov	r1, r9
 800c9d8:	eb43 0501 	adc.w	r5, r3, r1
 800c9dc:	f04f 0200 	mov.w	r2, #0
 800c9e0:	f04f 0300 	mov.w	r3, #0
 800c9e4:	00eb      	lsls	r3, r5, #3
 800c9e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c9ea:	00e2      	lsls	r2, r4, #3
 800c9ec:	4614      	mov	r4, r2
 800c9ee:	461d      	mov	r5, r3
 800c9f0:	4643      	mov	r3, r8
 800c9f2:	18e3      	adds	r3, r4, r3
 800c9f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c9f8:	464b      	mov	r3, r9
 800c9fa:	eb45 0303 	adc.w	r3, r5, r3
 800c9fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ca02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ca06:	685b      	ldr	r3, [r3, #4]
 800ca08:	2200      	movs	r2, #0
 800ca0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ca0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ca12:	f04f 0200 	mov.w	r2, #0
 800ca16:	f04f 0300 	mov.w	r3, #0
 800ca1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800ca1e:	4629      	mov	r1, r5
 800ca20:	008b      	lsls	r3, r1, #2
 800ca22:	4621      	mov	r1, r4
 800ca24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ca28:	4621      	mov	r1, r4
 800ca2a:	008a      	lsls	r2, r1, #2
 800ca2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800ca30:	f7f4 f92a 	bl	8000c88 <__aeabi_uldivmod>
 800ca34:	4602      	mov	r2, r0
 800ca36:	460b      	mov	r3, r1
 800ca38:	4b60      	ldr	r3, [pc, #384]	; (800cbbc <UART_SetConfig+0x4e4>)
 800ca3a:	fba3 2302 	umull	r2, r3, r3, r2
 800ca3e:	095b      	lsrs	r3, r3, #5
 800ca40:	011c      	lsls	r4, r3, #4
 800ca42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ca46:	2200      	movs	r2, #0
 800ca48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ca4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ca50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ca54:	4642      	mov	r2, r8
 800ca56:	464b      	mov	r3, r9
 800ca58:	1891      	adds	r1, r2, r2
 800ca5a:	61b9      	str	r1, [r7, #24]
 800ca5c:	415b      	adcs	r3, r3
 800ca5e:	61fb      	str	r3, [r7, #28]
 800ca60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ca64:	4641      	mov	r1, r8
 800ca66:	1851      	adds	r1, r2, r1
 800ca68:	6139      	str	r1, [r7, #16]
 800ca6a:	4649      	mov	r1, r9
 800ca6c:	414b      	adcs	r3, r1
 800ca6e:	617b      	str	r3, [r7, #20]
 800ca70:	f04f 0200 	mov.w	r2, #0
 800ca74:	f04f 0300 	mov.w	r3, #0
 800ca78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ca7c:	4659      	mov	r1, fp
 800ca7e:	00cb      	lsls	r3, r1, #3
 800ca80:	4651      	mov	r1, sl
 800ca82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ca86:	4651      	mov	r1, sl
 800ca88:	00ca      	lsls	r2, r1, #3
 800ca8a:	4610      	mov	r0, r2
 800ca8c:	4619      	mov	r1, r3
 800ca8e:	4603      	mov	r3, r0
 800ca90:	4642      	mov	r2, r8
 800ca92:	189b      	adds	r3, r3, r2
 800ca94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ca98:	464b      	mov	r3, r9
 800ca9a:	460a      	mov	r2, r1
 800ca9c:	eb42 0303 	adc.w	r3, r2, r3
 800caa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800caa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	2200      	movs	r2, #0
 800caac:	67bb      	str	r3, [r7, #120]	; 0x78
 800caae:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cab0:	f04f 0200 	mov.w	r2, #0
 800cab4:	f04f 0300 	mov.w	r3, #0
 800cab8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cabc:	4649      	mov	r1, r9
 800cabe:	008b      	lsls	r3, r1, #2
 800cac0:	4641      	mov	r1, r8
 800cac2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cac6:	4641      	mov	r1, r8
 800cac8:	008a      	lsls	r2, r1, #2
 800caca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cace:	f7f4 f8db 	bl	8000c88 <__aeabi_uldivmod>
 800cad2:	4602      	mov	r2, r0
 800cad4:	460b      	mov	r3, r1
 800cad6:	4b39      	ldr	r3, [pc, #228]	; (800cbbc <UART_SetConfig+0x4e4>)
 800cad8:	fba3 1302 	umull	r1, r3, r3, r2
 800cadc:	095b      	lsrs	r3, r3, #5
 800cade:	2164      	movs	r1, #100	; 0x64
 800cae0:	fb01 f303 	mul.w	r3, r1, r3
 800cae4:	1ad3      	subs	r3, r2, r3
 800cae6:	011b      	lsls	r3, r3, #4
 800cae8:	3332      	adds	r3, #50	; 0x32
 800caea:	4a34      	ldr	r2, [pc, #208]	; (800cbbc <UART_SetConfig+0x4e4>)
 800caec:	fba2 2303 	umull	r2, r3, r2, r3
 800caf0:	095b      	lsrs	r3, r3, #5
 800caf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800caf6:	441c      	add	r4, r3
 800caf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cafc:	2200      	movs	r2, #0
 800cafe:	673b      	str	r3, [r7, #112]	; 0x70
 800cb00:	677a      	str	r2, [r7, #116]	; 0x74
 800cb02:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cb06:	4642      	mov	r2, r8
 800cb08:	464b      	mov	r3, r9
 800cb0a:	1891      	adds	r1, r2, r2
 800cb0c:	60b9      	str	r1, [r7, #8]
 800cb0e:	415b      	adcs	r3, r3
 800cb10:	60fb      	str	r3, [r7, #12]
 800cb12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cb16:	4641      	mov	r1, r8
 800cb18:	1851      	adds	r1, r2, r1
 800cb1a:	6039      	str	r1, [r7, #0]
 800cb1c:	4649      	mov	r1, r9
 800cb1e:	414b      	adcs	r3, r1
 800cb20:	607b      	str	r3, [r7, #4]
 800cb22:	f04f 0200 	mov.w	r2, #0
 800cb26:	f04f 0300 	mov.w	r3, #0
 800cb2a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cb2e:	4659      	mov	r1, fp
 800cb30:	00cb      	lsls	r3, r1, #3
 800cb32:	4651      	mov	r1, sl
 800cb34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cb38:	4651      	mov	r1, sl
 800cb3a:	00ca      	lsls	r2, r1, #3
 800cb3c:	4610      	mov	r0, r2
 800cb3e:	4619      	mov	r1, r3
 800cb40:	4603      	mov	r3, r0
 800cb42:	4642      	mov	r2, r8
 800cb44:	189b      	adds	r3, r3, r2
 800cb46:	66bb      	str	r3, [r7, #104]	; 0x68
 800cb48:	464b      	mov	r3, r9
 800cb4a:	460a      	mov	r2, r1
 800cb4c:	eb42 0303 	adc.w	r3, r2, r3
 800cb50:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cb52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cb56:	685b      	ldr	r3, [r3, #4]
 800cb58:	2200      	movs	r2, #0
 800cb5a:	663b      	str	r3, [r7, #96]	; 0x60
 800cb5c:	667a      	str	r2, [r7, #100]	; 0x64
 800cb5e:	f04f 0200 	mov.w	r2, #0
 800cb62:	f04f 0300 	mov.w	r3, #0
 800cb66:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800cb6a:	4649      	mov	r1, r9
 800cb6c:	008b      	lsls	r3, r1, #2
 800cb6e:	4641      	mov	r1, r8
 800cb70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cb74:	4641      	mov	r1, r8
 800cb76:	008a      	lsls	r2, r1, #2
 800cb78:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800cb7c:	f7f4 f884 	bl	8000c88 <__aeabi_uldivmod>
 800cb80:	4602      	mov	r2, r0
 800cb82:	460b      	mov	r3, r1
 800cb84:	4b0d      	ldr	r3, [pc, #52]	; (800cbbc <UART_SetConfig+0x4e4>)
 800cb86:	fba3 1302 	umull	r1, r3, r3, r2
 800cb8a:	095b      	lsrs	r3, r3, #5
 800cb8c:	2164      	movs	r1, #100	; 0x64
 800cb8e:	fb01 f303 	mul.w	r3, r1, r3
 800cb92:	1ad3      	subs	r3, r2, r3
 800cb94:	011b      	lsls	r3, r3, #4
 800cb96:	3332      	adds	r3, #50	; 0x32
 800cb98:	4a08      	ldr	r2, [pc, #32]	; (800cbbc <UART_SetConfig+0x4e4>)
 800cb9a:	fba2 2303 	umull	r2, r3, r2, r3
 800cb9e:	095b      	lsrs	r3, r3, #5
 800cba0:	f003 020f 	and.w	r2, r3, #15
 800cba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4422      	add	r2, r4
 800cbac:	609a      	str	r2, [r3, #8]
}
 800cbae:	bf00      	nop
 800cbb0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cbba:	bf00      	nop
 800cbbc:	51eb851f 	.word	0x51eb851f

0800cbc0 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b084      	sub	sp, #16
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
 800cbc8:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 800cbca:	2300      	movs	r3, #0
 800cbcc:	60fb      	str	r3, [r7, #12]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800cbd4:	68fa      	ldr	r2, [r7, #12]
 800cbd6:	429a      	cmp	r2, r3
 800cbd8:	d20b      	bcs.n	800cbf2 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	011b      	lsls	r3, r3, #4
 800cbde:	687a      	ldr	r2, [r7, #4]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	6839      	ldr	r1, [r7, #0]
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f000 f817 	bl	800cc18 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	3301      	adds	r3, #1
 800cbee:	60fb      	str	r3, [r7, #12]
 800cbf0:	e7ed      	b.n	800cbce <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 800cbf2:	bf00      	nop
 800cbf4:	3710      	adds	r7, #16
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}

0800cbfa <HAL_ADC_ConvCpltCallback>:
 */

#include "AdcConvCpltCallbackHandler.hpp"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800cbfa:	b580      	push	{r7, lr}
 800cbfc:	b082      	sub	sp, #8
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
	AdcConvCpltCallbackHandler::getInstance().notify(hadc);
 800cc02:	f7f9 f99f 	bl	8005f44 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 800cc06:	4603      	mov	r3, r0
 800cc08:	6879      	ldr	r1, [r7, #4]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f7ff ffd8 	bl	800cbc0 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 800cc10:	bf00      	nop
 800cc12:	3708      	adds	r7, #8
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>:
    function<_Res(_ArgTypes...)>::
 800cc18:	b5b0      	push	{r4, r5, r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	6039      	str	r1, [r7, #0]
      if (_M_empty())
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7f4 fc1a 	bl	800145e <_ZNKSt14_Function_base8_M_emptyEv>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d001      	beq.n	800cc34 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 800cc30:	f006 f96b 	bl	8012f0a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	68dc      	ldr	r4, [r3, #12]
 800cc38:	687d      	ldr	r5, [r7, #4]
 800cc3a:	463b      	mov	r3, r7
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f7f9 fc80 	bl	8006542 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800cc42:	4603      	mov	r3, r0
 800cc44:	4619      	mov	r1, r3
 800cc46:	4628      	mov	r0, r5
 800cc48:	47a0      	blx	r4
 800cc4a:	bf00      	nop
    }
 800cc4c:	3708      	adds	r7, #8
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bdb0      	pop	{r4, r5, r7, pc}

0800cc52 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvHalfCpltCallbackHandler() = default;
 800cc52:	b5b0      	push	{r4, r5, r7, lr}
 800cc54:	b082      	sub	sp, #8
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	6078      	str	r0, [r7, #4]
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	240f      	movs	r4, #15
 800cc5e:	461d      	mov	r5, r3
 800cc60:	2c00      	cmp	r4, #0
 800cc62:	db05      	blt.n	800cc70 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0x1e>
 800cc64:	4628      	mov	r0, r5
 800cc66:	f7f9 fb51 	bl	800630c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 800cc6a:	3510      	adds	r5, #16
 800cc6c:	3c01      	subs	r4, #1
 800cc6e:	e7f7      	b.n	800cc60 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0xe>
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2200      	movs	r2, #0
 800cc74:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	3708      	adds	r7, #8
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bdb0      	pop	{r4, r5, r7, pc}

0800cc82 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>:
class AdcConvHalfCpltCallbackHandler {
 800cc82:	b590      	push	{r4, r7, lr}
 800cc84:	b083      	sub	sp, #12
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d00a      	beq.n	800cca6 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	429c      	cmp	r4, r3
 800cc9a:	d004      	beq.n	800cca6 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 800cc9c:	3c10      	subs	r4, #16
 800cc9e:	4620      	mov	r0, r4
 800cca0:	f7f9 f90c 	bl	8005ebc <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 800cca4:	e7f7      	b.n	800cc96 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x14>
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	4618      	mov	r0, r3
 800ccaa:	370c      	adds	r7, #12
 800ccac:	46bd      	mov	sp, r7
 800ccae:	bd90      	pop	{r4, r7, pc}

0800ccb0 <__tcf_0>:
		static AdcConvHalfCpltCallbackHandler instance;
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	af00      	add	r7, sp, #0
 800ccb4:	4801      	ldr	r0, [pc, #4]	; (800ccbc <__tcf_0+0xc>)
 800ccb6:	f7ff ffe4 	bl	800cc82 <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>
 800ccba:	bd80      	pop	{r7, pc}
 800ccbc:	2000147c 	.word	0x2000147c

0800ccc0 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>:
	static AdcConvHalfCpltCallbackHandler& getInstance() {
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	af00      	add	r7, sp, #0
		static AdcConvHalfCpltCallbackHandler instance;
 800ccc4:	4b12      	ldr	r3, [pc, #72]	; (800cd10 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800ccc6:	781b      	ldrb	r3, [r3, #0]
 800ccc8:	f3bf 8f5b 	dmb	ish
 800cccc:	b2db      	uxtb	r3, r3
 800ccce:	f003 0301 	and.w	r3, r3, #1
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	bf0c      	ite	eq
 800ccd6:	2301      	moveq	r3, #1
 800ccd8:	2300      	movne	r3, #0
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	2b00      	cmp	r3, #0
 800ccde:	d013      	beq.n	800cd08 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 800cce0:	480b      	ldr	r0, [pc, #44]	; (800cd10 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800cce2:	f006 f901 	bl	8012ee8 <__cxa_guard_acquire>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	bf14      	ite	ne
 800ccec:	2301      	movne	r3, #1
 800ccee:	2300      	moveq	r3, #0
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d008      	beq.n	800cd08 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 800ccf6:	4807      	ldr	r0, [pc, #28]	; (800cd14 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
 800ccf8:	f7ff ffab 	bl	800cc52 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>
 800ccfc:	4806      	ldr	r0, [pc, #24]	; (800cd18 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x58>)
 800ccfe:	f006 fb52 	bl	80133a6 <atexit>
 800cd02:	4803      	ldr	r0, [pc, #12]	; (800cd10 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800cd04:	f006 f8fc 	bl	8012f00 <__cxa_guard_release>
		return instance;
 800cd08:	4b02      	ldr	r3, [pc, #8]	; (800cd14 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
	}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	20001580 	.word	0x20001580
 800cd14:	2000147c 	.word	0x2000147c
 800cd18:	0800ccb1 	.word	0x0800ccb1

0800cd1c <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 800cd1c:	b580      	push	{r7, lr}
 800cd1e:	b084      	sub	sp, #16
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
 800cd24:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 800cd26:	2300      	movs	r3, #0
 800cd28:	60fb      	str	r3, [r7, #12]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800cd30:	68fa      	ldr	r2, [r7, #12]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d20b      	bcs.n	800cd4e <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	011b      	lsls	r3, r3, #4
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	4413      	add	r3, r2
 800cd3e:	6839      	ldr	r1, [r7, #0]
 800cd40:	4618      	mov	r0, r3
 800cd42:	f7ff ff69 	bl	800cc18 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	3301      	adds	r3, #1
 800cd4a:	60fb      	str	r3, [r7, #12]
 800cd4c:	e7ed      	b.n	800cd2a <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 800cd4e:	bf00      	nop
 800cd50:	3710      	adds	r7, #16
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <HAL_ADC_ConvHalfCpltCallback>:


#include "AdcConvHalfCpltCallbackHandler.hpp"

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b082      	sub	sp, #8
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6078      	str	r0, [r7, #4]
	AdcConvHalfCpltCallbackHandler::getInstance().notify(hadc);
 800cd5e:	f7ff ffaf 	bl	800ccc0 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>
 800cd62:	4603      	mov	r3, r0
 800cd64:	6879      	ldr	r1, [r7, #4]
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7ff ffd8 	bl	800cd1c <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 800cd6c:	bf00      	nop
 800cd6e:	3708      	adds	r7, #8
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <_ZN23GPIOExtiCallbackHandler6notifyEt>:
	void notify(uint16_t pin) {
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	460b      	mov	r3, r1
 800cd7e:	807b      	strh	r3, [r7, #2]
		for (unsigned int i = 0; i < m_size; i++) {
 800cd80:	2300      	movs	r3, #0
 800cd82:	60fb      	str	r3, [r7, #12]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d20c      	bcs.n	800cdaa <_ZN23GPIOExtiCallbackHandler6notifyEt+0x36>
			m_listeners[i](pin);
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	011b      	lsls	r3, r3, #4
 800cd94:	687a      	ldr	r2, [r7, #4]
 800cd96:	4413      	add	r3, r2
 800cd98:	887a      	ldrh	r2, [r7, #2]
 800cd9a:	4611      	mov	r1, r2
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f000 f819 	bl	800cdd4 <_ZNKSt8functionIFvtEEclEt>
		for (unsigned int i = 0; i < m_size; i++) {
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	3301      	adds	r3, #1
 800cda6:	60fb      	str	r3, [r7, #12]
 800cda8:	e7ec      	b.n	800cd84 <_ZN23GPIOExtiCallbackHandler6notifyEt+0x10>
	}
 800cdaa:	bf00      	nop
 800cdac:	3710      	adds	r7, #16
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}

0800cdb2 <HAL_GPIO_EXTI_Callback>:
#include "GPIOExtiCallbackHandler.hpp"




void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 800cdb2:	b580      	push	{r7, lr}
 800cdb4:	b082      	sub	sp, #8
 800cdb6:	af00      	add	r7, sp, #0
 800cdb8:	4603      	mov	r3, r0
 800cdba:	80fb      	strh	r3, [r7, #6]
	GPIOExtiCallbackHandler::getInstance().notify(pin);
 800cdbc:	f7f8 ff6e 	bl	8005c9c <_ZN23GPIOExtiCallbackHandler11getInstanceEv>
 800cdc0:	4602      	mov	r2, r0
 800cdc2:	88fb      	ldrh	r3, [r7, #6]
 800cdc4:	4619      	mov	r1, r3
 800cdc6:	4610      	mov	r0, r2
 800cdc8:	f7ff ffd4 	bl	800cd74 <_ZN23GPIOExtiCallbackHandler6notifyEt>
}
 800cdcc:	bf00      	nop
 800cdce:	3708      	adds	r7, #8
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <_ZNKSt8functionIFvtEEclEt>:
    function<_Res(_ArgTypes...)>::
 800cdd4:	b5b0      	push	{r4, r5, r7, lr}
 800cdd6:	b082      	sub	sp, #8
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
 800cddc:	460b      	mov	r3, r1
 800cdde:	807b      	strh	r3, [r7, #2]
      if (_M_empty())
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7f4 fb3b 	bl	800145e <_ZNKSt14_Function_base8_M_emptyEv>
 800cde8:	4603      	mov	r3, r0
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d001      	beq.n	800cdf2 <_ZNKSt8functionIFvtEEclEt+0x1e>
	__throw_bad_function_call();
 800cdee:	f006 f88c 	bl	8012f0a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	68dc      	ldr	r4, [r3, #12]
 800cdf6:	687d      	ldr	r5, [r7, #4]
 800cdf8:	1cbb      	adds	r3, r7, #2
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	f7f9 f808 	bl	8005e10 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 800ce00:	4603      	mov	r3, r0
 800ce02:	4619      	mov	r1, r3
 800ce04:	4628      	mov	r0, r5
 800ce06:	47a0      	blx	r4
 800ce08:	bf00      	nop
    }
 800ce0a:	3708      	adds	r7, #8
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bdb0      	pop	{r4, r5, r7, pc}

0800ce10 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef>:
	void notify(TIM_HandleTypeDef *htim) {
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b084      	sub	sp, #16
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
 800ce18:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	60fb      	str	r3, [r7, #12]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800ce24:	68fa      	ldr	r2, [r7, #12]
 800ce26:	429a      	cmp	r2, r3
 800ce28:	d20b      	bcs.n	800ce42 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef+0x32>
			m_listeners[i](htim);
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	011b      	lsls	r3, r3, #4
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	4413      	add	r3, r2
 800ce32:	6839      	ldr	r1, [r7, #0]
 800ce34:	4618      	mov	r0, r3
 800ce36:	f000 f817 	bl	800ce68 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	3301      	adds	r3, #1
 800ce3e:	60fb      	str	r3, [r7, #12]
 800ce40:	e7ed      	b.n	800ce1e <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef+0xe>
	}
 800ce42:	bf00      	nop
 800ce44:	3710      	adds	r7, #16
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}

0800ce4a <PeriodElapsedCallback>:

#ifdef __cplusplus
extern "C" {
#endif

void PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800ce4a:	b580      	push	{r7, lr}
 800ce4c:	b082      	sub	sp, #8
 800ce4e:	af00      	add	r7, sp, #0
 800ce50:	6078      	str	r0, [r7, #4]
	TimPeriodElapsedCallbackHandler::getInstance().notify(htim);
 800ce52:	f7f8 ff95 	bl	8005d80 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv>
 800ce56:	4603      	mov	r3, r0
 800ce58:	6879      	ldr	r1, [r7, #4]
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	f7ff ffd8 	bl	800ce10 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef>
}
 800ce60:	bf00      	nop
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}

0800ce68 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_>:
    function<_Res(_ArgTypes...)>::
 800ce68:	b5b0      	push	{r4, r5, r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
 800ce70:	6039      	str	r1, [r7, #0]
      if (_M_empty())
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7f4 faf2 	bl	800145e <_ZNKSt14_Function_base8_M_emptyEv>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d001      	beq.n	800ce84 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 800ce80:	f006 f843 	bl	8012f0a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	68dc      	ldr	r4, [r3, #12]
 800ce88:	687d      	ldr	r5, [r7, #4]
 800ce8a:	463b      	mov	r3, r7
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	f7f8 ffca 	bl	8005e26 <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800ce92:	4603      	mov	r3, r0
 800ce94:	4619      	mov	r1, r3
 800ce96:	4628      	mov	r0, r5
 800ce98:	47a0      	blx	r4
 800ce9a:	bf00      	nop
    }
 800ce9c:	3708      	adds	r7, #8
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bdb0      	pop	{r4, r5, r7, pc}

0800cea2 <_ZL9_out_nullcPvjj>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800cea2:	b480      	push	{r7}
 800cea4:	b085      	sub	sp, #20
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	607a      	str	r2, [r7, #4]
 800ceac:	603b      	str	r3, [r7, #0]
 800ceae:	4603      	mov	r3, r0
 800ceb0:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800ceb2:	bf00      	nop
 800ceb4:	3714      	adds	r7, #20
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr

0800cebe <_ZL9_out_charcPvjj>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800cebe:	b580      	push	{r7, lr}
 800cec0:	b084      	sub	sp, #16
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	607a      	str	r2, [r7, #4]
 800cec8:	603b      	str	r3, [r7, #0]
 800ceca:	4603      	mov	r3, r0
 800cecc:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800cece:	7bfb      	ldrb	r3, [r7, #15]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d003      	beq.n	800cedc <_ZL9_out_charcPvjj+0x1e>
    _putchar(character);
 800ced4:	7bfb      	ldrb	r3, [r7, #15]
 800ced6:	4618      	mov	r0, r3
 800ced8:	f001 fc71 	bl	800e7be <_putchar>
  }
}
 800cedc:	bf00      	nop
 800cede:	3710      	adds	r7, #16
 800cee0:	46bd      	mov	sp, r7
 800cee2:	bd80      	pop	{r7, pc}

0800cee4 <_ZL10_strnlen_sPKcj>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800cee4:	b480      	push	{r7}
 800cee6:	b085      	sub	sp, #20
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
 800ceec:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	60fb      	str	r3, [r7, #12]
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d006      	beq.n	800cf08 <_ZL10_strnlen_sPKcj+0x24>
 800cefa:	683b      	ldr	r3, [r7, #0]
 800cefc:	1e5a      	subs	r2, r3, #1
 800cefe:	603a      	str	r2, [r7, #0]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d001      	beq.n	800cf08 <_ZL10_strnlen_sPKcj+0x24>
 800cf04:	2301      	movs	r3, #1
 800cf06:	e000      	b.n	800cf0a <_ZL10_strnlen_sPKcj+0x26>
 800cf08:	2300      	movs	r3, #0
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d003      	beq.n	800cf16 <_ZL10_strnlen_sPKcj+0x32>
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	3301      	adds	r3, #1
 800cf12:	60fb      	str	r3, [r7, #12]
 800cf14:	e7ed      	b.n	800cef2 <_ZL10_strnlen_sPKcj+0xe>
  return (unsigned int)(s - str);
 800cf16:	68fa      	ldr	r2, [r7, #12]
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	1ad3      	subs	r3, r2, r3
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3714      	adds	r7, #20
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	4770      	bx	lr

0800cf28 <_ZL9_is_digitc>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b083      	sub	sp, #12
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	4603      	mov	r3, r0
 800cf30:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800cf32:	79fb      	ldrb	r3, [r7, #7]
 800cf34:	2b2f      	cmp	r3, #47	; 0x2f
 800cf36:	d904      	bls.n	800cf42 <_ZL9_is_digitc+0x1a>
 800cf38:	79fb      	ldrb	r3, [r7, #7]
 800cf3a:	2b39      	cmp	r3, #57	; 0x39
 800cf3c:	d801      	bhi.n	800cf42 <_ZL9_is_digitc+0x1a>
 800cf3e:	2301      	movs	r3, #1
 800cf40:	e000      	b.n	800cf44 <_ZL9_is_digitc+0x1c>
 800cf42:	2300      	movs	r3, #0
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	370c      	adds	r7, #12
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <_ZL5_atoiPPKc>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	781b      	ldrb	r3, [r3, #0]
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7ff ffe0 	bl	800cf28 <_ZL9_is_digitc>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d00f      	beq.n	800cf8e <_ZL5_atoiPPKc+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800cf6e:	68fa      	ldr	r2, [r7, #12]
 800cf70:	4613      	mov	r3, r2
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	4413      	add	r3, r2
 800cf76:	005b      	lsls	r3, r3, #1
 800cf78:	4618      	mov	r0, r3
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	1c59      	adds	r1, r3, #1
 800cf80:	687a      	ldr	r2, [r7, #4]
 800cf82:	6011      	str	r1, [r2, #0]
 800cf84:	781b      	ldrb	r3, [r3, #0]
 800cf86:	4403      	add	r3, r0
 800cf88:	3b30      	subs	r3, #48	; 0x30
 800cf8a:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800cf8c:	e7e6      	b.n	800cf5c <_ZL5_atoiPPKc+0xc>
  }
  return i;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
}
 800cf90:	4618      	mov	r0, r3
 800cf92:	3710      	adds	r7, #16
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800cf98:	b590      	push	{r4, r7, lr}
 800cf9a:	b087      	sub	sp, #28
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	607a      	str	r2, [r7, #4]
 800cfa4:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800cfaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfac:	f003 0302 	and.w	r3, r3, #2
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d116      	bne.n	800cfe2 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
 800cfb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfb6:	f003 0301 	and.w	r3, r3, #1
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d111      	bne.n	800cfe2 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
    for (size_t i = len; i < width; i++) {
 800cfbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc0:	617b      	str	r3, [r7, #20]
 800cfc2:	697a      	ldr	r2, [r7, #20]
 800cfc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d20b      	bcs.n	800cfe2 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
      out(' ', buffer, idx++, maxlen);
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	1c53      	adds	r3, r2, #1
 800cfce:	607b      	str	r3, [r7, #4]
 800cfd0:	68fc      	ldr	r4, [r7, #12]
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	68b9      	ldr	r1, [r7, #8]
 800cfd6:	2020      	movs	r0, #32
 800cfd8:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800cfda:	697b      	ldr	r3, [r7, #20]
 800cfdc:	3301      	adds	r3, #1
 800cfde:	617b      	str	r3, [r7, #20]
 800cfe0:	e7ef      	b.n	800cfc2 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x2a>
    }
  }

  // reverse string
  while (len) {
 800cfe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d00e      	beq.n	800d006 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x6e>
    out(buf[--len], buffer, idx++, maxlen);
 800cfe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfea:	3b01      	subs	r3, #1
 800cfec:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cfee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cff2:	4413      	add	r3, r2
 800cff4:	7818      	ldrb	r0, [r3, #0]
 800cff6:	687a      	ldr	r2, [r7, #4]
 800cff8:	1c53      	adds	r3, r2, #1
 800cffa:	607b      	str	r3, [r7, #4]
 800cffc:	68fc      	ldr	r4, [r7, #12]
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	68b9      	ldr	r1, [r7, #8]
 800d002:	47a0      	blx	r4
  while (len) {
 800d004:	e7ed      	b.n	800cfe2 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800d006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d008:	f003 0302 	and.w	r3, r3, #2
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d00e      	beq.n	800d02e <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
    while (idx - start_idx < width) {
 800d010:	687a      	ldr	r2, [r7, #4]
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	1ad3      	subs	r3, r2, r3
 800d016:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d018:	429a      	cmp	r2, r3
 800d01a:	d908      	bls.n	800d02e <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
      out(' ', buffer, idx++, maxlen);
 800d01c:	687a      	ldr	r2, [r7, #4]
 800d01e:	1c53      	adds	r3, r2, #1
 800d020:	607b      	str	r3, [r7, #4]
 800d022:	68fc      	ldr	r4, [r7, #12]
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	68b9      	ldr	r1, [r7, #8]
 800d028:	2020      	movs	r0, #32
 800d02a:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800d02c:	e7f0      	b.n	800d010 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x78>
    }
  }

  return idx;
 800d02e:	687b      	ldr	r3, [r7, #4]
}
 800d030:	4618      	mov	r0, r3
 800d032:	371c      	adds	r7, #28
 800d034:	46bd      	mov	sp, r7
 800d036:	bd90      	pop	{r4, r7, pc}

0800d038 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b088      	sub	sp, #32
 800d03c:	af04      	add	r7, sp, #16
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	607a      	str	r2, [r7, #4]
 800d044:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800d046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d048:	f003 0302 	and.w	r3, r3, #2
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d136      	bne.n	800d0be <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800d050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d052:	2b00      	cmp	r3, #0
 800d054:	d010      	beq.n	800d078 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 800d056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d058:	f003 0301 	and.w	r3, r3, #1
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d00b      	beq.n	800d078 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 800d060:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d104      	bne.n	800d072 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x3a>
 800d068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06a:	f003 030c 	and.w	r3, r3, #12
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d002      	beq.n	800d078 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
      width--;
 800d072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d074:	3b01      	subs	r3, #1
 800d076:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d078:	69fa      	ldr	r2, [r7, #28]
 800d07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d20a      	bcs.n	800d096 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
 800d080:	69fb      	ldr	r3, [r7, #28]
 800d082:	2b1f      	cmp	r3, #31
 800d084:	d807      	bhi.n	800d096 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
      buf[len++] = '0';
 800d086:	69fb      	ldr	r3, [r7, #28]
 800d088:	1c5a      	adds	r2, r3, #1
 800d08a:	61fa      	str	r2, [r7, #28]
 800d08c:	69ba      	ldr	r2, [r7, #24]
 800d08e:	4413      	add	r3, r2
 800d090:	2230      	movs	r2, #48	; 0x30
 800d092:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d094:	e7f0      	b.n	800d078 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d098:	f003 0301 	and.w	r3, r3, #1
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d00e      	beq.n	800d0be <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 800d0a0:	69fa      	ldr	r2, [r7, #28]
 800d0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	d20a      	bcs.n	800d0be <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 800d0a8:	69fb      	ldr	r3, [r7, #28]
 800d0aa:	2b1f      	cmp	r3, #31
 800d0ac:	d807      	bhi.n	800d0be <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
      buf[len++] = '0';
 800d0ae:	69fb      	ldr	r3, [r7, #28]
 800d0b0:	1c5a      	adds	r2, r3, #1
 800d0b2:	61fa      	str	r2, [r7, #28]
 800d0b4:	69ba      	ldr	r2, [r7, #24]
 800d0b6:	4413      	add	r3, r2
 800d0b8:	2230      	movs	r2, #48	; 0x30
 800d0ba:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d0bc:	e7eb      	b.n	800d096 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800d0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c0:	f003 0310 	and.w	r3, r3, #16
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d058      	beq.n	800d17a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800d0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d116      	bne.n	800d100 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800d0d2:	69fb      	ldr	r3, [r7, #28]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d013      	beq.n	800d100 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800d0d8:	69fa      	ldr	r2, [r7, #28]
 800d0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d003      	beq.n	800d0e8 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xb0>
 800d0e0:	69fa      	ldr	r2, [r7, #28]
 800d0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d10b      	bne.n	800d100 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
      len--;
 800d0e8:	69fb      	ldr	r3, [r7, #28]
 800d0ea:	3b01      	subs	r3, #1
 800d0ec:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800d0ee:	69fb      	ldr	r3, [r7, #28]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d005      	beq.n	800d100 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800d0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0f6:	2b10      	cmp	r3, #16
 800d0f8:	d102      	bne.n	800d100 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
        len--;
 800d0fa:	69fb      	ldr	r3, [r7, #28]
 800d0fc:	3b01      	subs	r3, #1
 800d0fe:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d102:	2b10      	cmp	r3, #16
 800d104:	d10f      	bne.n	800d126 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 800d106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d108:	f003 0320 	and.w	r3, r3, #32
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d10a      	bne.n	800d126 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 800d110:	69fb      	ldr	r3, [r7, #28]
 800d112:	2b1f      	cmp	r3, #31
 800d114:	d807      	bhi.n	800d126 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
      buf[len++] = 'x';
 800d116:	69fb      	ldr	r3, [r7, #28]
 800d118:	1c5a      	adds	r2, r3, #1
 800d11a:	61fa      	str	r2, [r7, #28]
 800d11c:	69ba      	ldr	r2, [r7, #24]
 800d11e:	4413      	add	r3, r2
 800d120:	2278      	movs	r2, #120	; 0x78
 800d122:	701a      	strb	r2, [r3, #0]
 800d124:	e01f      	b.n	800d166 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d128:	2b10      	cmp	r3, #16
 800d12a:	d10f      	bne.n	800d14c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 800d12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12e:	f003 0320 	and.w	r3, r3, #32
 800d132:	2b00      	cmp	r3, #0
 800d134:	d00a      	beq.n	800d14c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 800d136:	69fb      	ldr	r3, [r7, #28]
 800d138:	2b1f      	cmp	r3, #31
 800d13a:	d807      	bhi.n	800d14c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
      buf[len++] = 'X';
 800d13c:	69fb      	ldr	r3, [r7, #28]
 800d13e:	1c5a      	adds	r2, r3, #1
 800d140:	61fa      	str	r2, [r7, #28]
 800d142:	69ba      	ldr	r2, [r7, #24]
 800d144:	4413      	add	r3, r2
 800d146:	2258      	movs	r2, #88	; 0x58
 800d148:	701a      	strb	r2, [r3, #0]
 800d14a:	e00c      	b.n	800d166 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800d14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14e:	2b02      	cmp	r3, #2
 800d150:	d109      	bne.n	800d166 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
 800d152:	69fb      	ldr	r3, [r7, #28]
 800d154:	2b1f      	cmp	r3, #31
 800d156:	d806      	bhi.n	800d166 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
      buf[len++] = 'b';
 800d158:	69fb      	ldr	r3, [r7, #28]
 800d15a:	1c5a      	adds	r2, r3, #1
 800d15c:	61fa      	str	r2, [r7, #28]
 800d15e:	69ba      	ldr	r2, [r7, #24]
 800d160:	4413      	add	r3, r2
 800d162:	2262      	movs	r2, #98	; 0x62
 800d164:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800d166:	69fb      	ldr	r3, [r7, #28]
 800d168:	2b1f      	cmp	r3, #31
 800d16a:	d806      	bhi.n	800d17a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
      buf[len++] = '0';
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	1c5a      	adds	r2, r3, #1
 800d170:	61fa      	str	r2, [r7, #28]
 800d172:	69ba      	ldr	r2, [r7, #24]
 800d174:	4413      	add	r3, r2
 800d176:	2230      	movs	r2, #48	; 0x30
 800d178:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800d17a:	69fb      	ldr	r3, [r7, #28]
 800d17c:	2b1f      	cmp	r3, #31
 800d17e:	d824      	bhi.n	800d1ca <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    if (negative) {
 800d180:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d007      	beq.n	800d198 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x160>
      buf[len++] = '-';
 800d188:	69fb      	ldr	r3, [r7, #28]
 800d18a:	1c5a      	adds	r2, r3, #1
 800d18c:	61fa      	str	r2, [r7, #28]
 800d18e:	69ba      	ldr	r2, [r7, #24]
 800d190:	4413      	add	r3, r2
 800d192:	222d      	movs	r2, #45	; 0x2d
 800d194:	701a      	strb	r2, [r3, #0]
 800d196:	e018      	b.n	800d1ca <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800d198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d19a:	f003 0304 	and.w	r3, r3, #4
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d007      	beq.n	800d1b2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800d1a2:	69fb      	ldr	r3, [r7, #28]
 800d1a4:	1c5a      	adds	r2, r3, #1
 800d1a6:	61fa      	str	r2, [r7, #28]
 800d1a8:	69ba      	ldr	r2, [r7, #24]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	222b      	movs	r2, #43	; 0x2b
 800d1ae:	701a      	strb	r2, [r3, #0]
 800d1b0:	e00b      	b.n	800d1ca <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800d1b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1b4:	f003 0308 	and.w	r3, r3, #8
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d006      	beq.n	800d1ca <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
      buf[len++] = ' ';
 800d1bc:	69fb      	ldr	r3, [r7, #28]
 800d1be:	1c5a      	adds	r2, r3, #1
 800d1c0:	61fa      	str	r2, [r7, #28]
 800d1c2:	69ba      	ldr	r2, [r7, #24]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	2220      	movs	r2, #32
 800d1c8:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800d1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1cc:	9303      	str	r3, [sp, #12]
 800d1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1d0:	9302      	str	r3, [sp, #8]
 800d1d2:	69fb      	ldr	r3, [r7, #28]
 800d1d4:	9301      	str	r3, [sp, #4]
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	9300      	str	r3, [sp, #0]
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	687a      	ldr	r2, [r7, #4]
 800d1de:	68b9      	ldr	r1, [r7, #8]
 800d1e0:	68f8      	ldr	r0, [r7, #12]
 800d1e2:	f7ff fed9 	bl	800cf98 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800d1e6:	4603      	mov	r3, r0
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b096      	sub	sp, #88	; 0x58
 800d1f4:	af08      	add	r7, sp, #32
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	607a      	str	r2, [r7, #4]
 800d1fc:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800d1fe:	2300      	movs	r3, #0
 800d200:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800d202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d204:	2b00      	cmp	r3, #0
 800d206:	d103      	bne.n	800d210 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x20>
    flags &= ~FLAGS_HASH;
 800d208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d20a:	f023 0310 	bic.w	r3, r3, #16
 800d20e:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800d210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d216:	2b00      	cmp	r3, #0
 800d218:	d002      	beq.n	800d220 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
 800d21a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d033      	beq.n	800d288 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
      const char digit = (char)(value % base);
 800d220:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d222:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d224:	fbb3 f2f2 	udiv	r2, r3, r2
 800d228:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800d22a:	fb01 f202 	mul.w	r2, r1, r2
 800d22e:	1a9b      	subs	r3, r3, r2
 800d230:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800d234:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d238:	2b09      	cmp	r3, #9
 800d23a:	d804      	bhi.n	800d246 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x56>
 800d23c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d240:	3330      	adds	r3, #48	; 0x30
 800d242:	b2da      	uxtb	r2, r3
 800d244:	e00d      	b.n	800d262 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x72>
 800d246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d248:	f003 0320 	and.w	r3, r3, #32
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d001      	beq.n	800d254 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x64>
 800d250:	2241      	movs	r2, #65	; 0x41
 800d252:	e000      	b.n	800d256 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x66>
 800d254:	2261      	movs	r2, #97	; 0x61
 800d256:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d25a:	4413      	add	r3, r2
 800d25c:	b2db      	uxtb	r3, r3
 800d25e:	3b0a      	subs	r3, #10
 800d260:	b2da      	uxtb	r2, r3
 800d262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d264:	1c59      	adds	r1, r3, #1
 800d266:	6379      	str	r1, [r7, #52]	; 0x34
 800d268:	3338      	adds	r3, #56	; 0x38
 800d26a:	443b      	add	r3, r7
 800d26c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800d270:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d274:	fbb2 f3f3 	udiv	r3, r2, r3
 800d278:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800d27a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d003      	beq.n	800d288 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
 800d280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d282:	2b1f      	cmp	r3, #31
 800d284:	d800      	bhi.n	800d288 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
 800d286:	e7cb      	b.n	800d220 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800d288:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d28a:	9306      	str	r3, [sp, #24]
 800d28c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d28e:	9305      	str	r3, [sp, #20]
 800d290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d292:	9304      	str	r3, [sp, #16]
 800d294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d296:	9303      	str	r3, [sp, #12]
 800d298:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800d29c:	9302      	str	r3, [sp, #8]
 800d29e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2a0:	9301      	str	r3, [sp, #4]
 800d2a2:	f107 0310 	add.w	r3, r7, #16
 800d2a6:	9300      	str	r3, [sp, #0]
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	68b9      	ldr	r1, [r7, #8]
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f7ff fec2 	bl	800d038 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 800d2b4:	4603      	mov	r3, r0
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3738      	adds	r7, #56	; 0x38
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}

0800d2be <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800d2be:	b580      	push	{r7, lr}
 800d2c0:	b096      	sub	sp, #88	; 0x58
 800d2c2:	af08      	add	r7, sp, #32
 800d2c4:	60f8      	str	r0, [r7, #12]
 800d2c6:	60b9      	str	r1, [r7, #8]
 800d2c8:	607a      	str	r2, [r7, #4]
 800d2ca:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800d2d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d2d4:	4313      	orrs	r3, r2
 800d2d6:	d103      	bne.n	800d2e0 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x22>
    flags &= ~FLAGS_HASH;
 800d2d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2da:	f023 0310 	bic.w	r3, r3, #16
 800d2de:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800d2e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d003      	beq.n	800d2f2 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
 800d2ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d2ee:	4313      	orrs	r3, r2
 800d2f0:	d038      	beq.n	800d364 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
      const char digit = (char)(value % base);
 800d2f2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d2f6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d2fa:	f7f3 fcc5 	bl	8000c88 <__aeabi_uldivmod>
 800d2fe:	4613      	mov	r3, r2
 800d300:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800d304:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d308:	2b09      	cmp	r3, #9
 800d30a:	d804      	bhi.n	800d316 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x58>
 800d30c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d310:	3330      	adds	r3, #48	; 0x30
 800d312:	b2da      	uxtb	r2, r3
 800d314:	e00d      	b.n	800d332 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x74>
 800d316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d318:	f003 0320 	and.w	r3, r3, #32
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d001      	beq.n	800d324 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x66>
 800d320:	2241      	movs	r2, #65	; 0x41
 800d322:	e000      	b.n	800d326 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x68>
 800d324:	2261      	movs	r2, #97	; 0x61
 800d326:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d32a:	4413      	add	r3, r2
 800d32c:	b2db      	uxtb	r3, r3
 800d32e:	3b0a      	subs	r3, #10
 800d330:	b2da      	uxtb	r2, r3
 800d332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d334:	1c59      	adds	r1, r3, #1
 800d336:	6379      	str	r1, [r7, #52]	; 0x34
 800d338:	3338      	adds	r3, #56	; 0x38
 800d33a:	443b      	add	r3, r7
 800d33c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800d340:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800d344:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d348:	f7f3 fc9e 	bl	8000c88 <__aeabi_uldivmod>
 800d34c:	4602      	mov	r2, r0
 800d34e:	460b      	mov	r3, r1
 800d350:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800d354:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800d358:	4313      	orrs	r3, r2
 800d35a:	d003      	beq.n	800d364 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
 800d35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d35e:	2b1f      	cmp	r3, #31
 800d360:	d800      	bhi.n	800d364 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
 800d362:	e7c6      	b.n	800d2f2 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800d364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d366:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d368:	9206      	str	r2, [sp, #24]
 800d36a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d36c:	9205      	str	r2, [sp, #20]
 800d36e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d370:	9204      	str	r2, [sp, #16]
 800d372:	9303      	str	r3, [sp, #12]
 800d374:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d378:	9302      	str	r3, [sp, #8]
 800d37a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d37c:	9301      	str	r3, [sp, #4]
 800d37e:	f107 0310 	add.w	r3, r7, #16
 800d382:	9300      	str	r3, [sp, #0]
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	68b9      	ldr	r1, [r7, #8]
 800d38a:	68f8      	ldr	r0, [r7, #12]
 800d38c:	f7ff fe54 	bl	800d038 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 800d390:	4603      	mov	r3, r0
}
 800d392:	4618      	mov	r0, r3
 800d394:	3738      	adds	r7, #56	; 0x38
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	0000      	movs	r0, r0
 800d39c:	0000      	movs	r0, r0
	...

0800d3a0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800d3a0:	b590      	push	{r4, r7, lr}
 800d3a2:	b09d      	sub	sp, #116	; 0x74
 800d3a4:	af04      	add	r7, sp, #16
 800d3a6:	6178      	str	r0, [r7, #20]
 800d3a8:	6139      	str	r1, [r7, #16]
 800d3aa:	60fa      	str	r2, [r7, #12]
 800d3ac:	60bb      	str	r3, [r7, #8]
 800d3ae:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800d3b6:	f04f 0200 	mov.w	r2, #0
 800d3ba:	f04f 0300 	mov.w	r3, #0
 800d3be:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800d3c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d3ca:	f7f3 fb7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3ce:	4603      	mov	r3, r0
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d10f      	bne.n	800d3f4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800d3d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3d6:	9303      	str	r3, [sp, #12]
 800d3d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d3da:	9302      	str	r3, [sp, #8]
 800d3dc:	2303      	movs	r3, #3
 800d3de:	9301      	str	r3, [sp, #4]
 800d3e0:	4ba7      	ldr	r3, [pc, #668]	; (800d680 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e0>)
 800d3e2:	9300      	str	r3, [sp, #0]
 800d3e4:	68bb      	ldr	r3, [r7, #8]
 800d3e6:	68fa      	ldr	r2, [r7, #12]
 800d3e8:	6939      	ldr	r1, [r7, #16]
 800d3ea:	6978      	ldr	r0, [r7, #20]
 800d3ec:	f7ff fdd4 	bl	800cf98 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	e230      	b.n	800d856 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value < -DBL_MAX)
 800d3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800d3f8:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800d3fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d400:	f7f3 fb6c 	bl	8000adc <__aeabi_dcmplt>
 800d404:	4603      	mov	r3, r0
 800d406:	2b00      	cmp	r3, #0
 800d408:	d00f      	beq.n	800d42a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800d40a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d40c:	9303      	str	r3, [sp, #12]
 800d40e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d410:	9302      	str	r3, [sp, #8]
 800d412:	2304      	movs	r3, #4
 800d414:	9301      	str	r3, [sp, #4]
 800d416:	4b9b      	ldr	r3, [pc, #620]	; (800d684 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e4>)
 800d418:	9300      	str	r3, [sp, #0]
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	68fa      	ldr	r2, [r7, #12]
 800d41e:	6939      	ldr	r1, [r7, #16]
 800d420:	6978      	ldr	r0, [r7, #20]
 800d422:	f7ff fdb9 	bl	800cf98 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800d426:	4603      	mov	r3, r0
 800d428:	e215      	b.n	800d856 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value > DBL_MAX)
 800d42a:	f04f 32ff 	mov.w	r2, #4294967295
 800d42e:	4b96      	ldr	r3, [pc, #600]	; (800d688 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e8>)
 800d430:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d434:	f7f3 fb70 	bl	8000b18 <__aeabi_dcmpgt>
 800d438:	4603      	mov	r3, r0
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d01d      	beq.n	800d47a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800d43e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d440:	f003 0304 	and.w	r3, r3, #4
 800d444:	2b00      	cmp	r3, #0
 800d446:	d001      	beq.n	800d44c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xac>
 800d448:	4b90      	ldr	r3, [pc, #576]	; (800d68c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ec>)
 800d44a:	e000      	b.n	800d44e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xae>
 800d44c:	4b90      	ldr	r3, [pc, #576]	; (800d690 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f0>)
 800d44e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d450:	f002 0204 	and.w	r2, r2, #4
 800d454:	2a00      	cmp	r2, #0
 800d456:	d001      	beq.n	800d45c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbc>
 800d458:	2204      	movs	r2, #4
 800d45a:	e000      	b.n	800d45e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbe>
 800d45c:	2203      	movs	r2, #3
 800d45e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d460:	9103      	str	r1, [sp, #12]
 800d462:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800d464:	9102      	str	r1, [sp, #8]
 800d466:	9201      	str	r2, [sp, #4]
 800d468:	9300      	str	r3, [sp, #0]
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	68fa      	ldr	r2, [r7, #12]
 800d46e:	6939      	ldr	r1, [r7, #16]
 800d470:	6978      	ldr	r0, [r7, #20]
 800d472:	f7ff fd91 	bl	800cf98 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800d476:	4603      	mov	r3, r0
 800d478:	e1ed      	b.n	800d856 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800d47a:	a37d      	add	r3, pc, #500	; (adr r3, 800d670 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d0>)
 800d47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d480:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d484:	f7f3 fb48 	bl	8000b18 <__aeabi_dcmpgt>
 800d488:	4603      	mov	r3, r0
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d109      	bne.n	800d4a2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x102>
 800d48e:	a37a      	add	r3, pc, #488	; (adr r3, 800d678 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d8>)
 800d490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d494:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d498:	f7f3 fb20 	bl	8000adc <__aeabi_dcmplt>
 800d49c:	4603      	mov	r3, r0
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d00f      	beq.n	800d4c2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800d4a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4a4:	9302      	str	r3, [sp, #8]
 800d4a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d4a8:	9301      	str	r3, [sp, #4]
 800d4aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d4ac:	9300      	str	r3, [sp, #0]
 800d4ae:	ed97 0b00 	vldr	d0, [r7]
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	68fa      	ldr	r2, [r7, #12]
 800d4b6:	6939      	ldr	r1, [r7, #16]
 800d4b8:	6978      	ldr	r0, [r7, #20]
 800d4ba:	f000 f9d5 	bl	800d868 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 800d4be:	4603      	mov	r3, r0
 800d4c0:	e1c9      	b.n	800d856 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800d4c8:	f04f 0200 	mov.w	r2, #0
 800d4cc:	f04f 0300 	mov.w	r3, #0
 800d4d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d4d4:	f7f3 fb02 	bl	8000adc <__aeabi_dcmplt>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d00e      	beq.n	800d4fc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x15c>
    negative = true;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800d4e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4e8:	f04f 0000 	mov.w	r0, #0
 800d4ec:	f04f 0100 	mov.w	r1, #0
 800d4f0:	f7f2 feca 	bl	8000288 <__aeabi_dsub>
 800d4f4:	4602      	mov	r2, r0
 800d4f6:	460b      	mov	r3, r1
 800d4f8:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800d4fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d502:	2b00      	cmp	r3, #0
 800d504:	d101      	bne.n	800d50a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800d506:	2306      	movs	r3, #6
 800d508:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800d50a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d50c:	2b1f      	cmp	r3, #31
 800d50e:	d80e      	bhi.n	800d52e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
 800d510:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d512:	2b09      	cmp	r3, #9
 800d514:	d90b      	bls.n	800d52e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
    buf[len++] = '0';
 800d516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d518:	1c5a      	adds	r2, r3, #1
 800d51a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d51c:	3360      	adds	r3, #96	; 0x60
 800d51e:	443b      	add	r3, r7
 800d520:	2230      	movs	r2, #48	; 0x30
 800d522:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800d526:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d528:	3b01      	subs	r3, #1
 800d52a:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800d52c:	e7ed      	b.n	800d50a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
  }

  int whole = (int)value;
 800d52e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d532:	f7f3 fb11 	bl	8000b58 <__aeabi_d2iz>
 800d536:	4603      	mov	r3, r0
 800d538:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800d53a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d53c:	f7f2 fff2 	bl	8000524 <__aeabi_i2d>
 800d540:	4602      	mov	r2, r0
 800d542:	460b      	mov	r3, r1
 800d544:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d548:	f7f2 fe9e 	bl	8000288 <__aeabi_dsub>
 800d54c:	4602      	mov	r2, r0
 800d54e:	460b      	mov	r3, r1
 800d550:	4610      	mov	r0, r2
 800d552:	4619      	mov	r1, r3
 800d554:	4a4f      	ldr	r2, [pc, #316]	; (800d694 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 800d556:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d558:	00db      	lsls	r3, r3, #3
 800d55a:	4413      	add	r3, r2
 800d55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d560:	f7f3 f84a 	bl	80005f8 <__aeabi_dmul>
 800d564:	4602      	mov	r2, r0
 800d566:	460b      	mov	r3, r1
 800d568:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800d56c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d570:	f7f3 fb1a 	bl	8000ba8 <__aeabi_d2uiz>
 800d574:	4603      	mov	r3, r0
 800d576:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800d578:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d57a:	f7f2 ffc3 	bl	8000504 <__aeabi_ui2d>
 800d57e:	4602      	mov	r2, r0
 800d580:	460b      	mov	r3, r1
 800d582:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800d586:	f7f2 fe7f 	bl	8000288 <__aeabi_dsub>
 800d58a:	4602      	mov	r2, r0
 800d58c:	460b      	mov	r3, r1
 800d58e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800d592:	f04f 0200 	mov.w	r2, #0
 800d596:	4b40      	ldr	r3, [pc, #256]	; (800d698 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800d598:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d59c:	f7f3 fabc 	bl	8000b18 <__aeabi_dcmpgt>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d016      	beq.n	800d5d4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x234>
    ++frac;
 800d5a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800d5ac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d5ae:	f7f2 ffa9 	bl	8000504 <__aeabi_ui2d>
 800d5b2:	4a38      	ldr	r2, [pc, #224]	; (800d694 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 800d5b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d5b6:	00db      	lsls	r3, r3, #3
 800d5b8:	4413      	add	r3, r2
 800d5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5be:	f7f3 faa1 	bl	8000b04 <__aeabi_dcmpge>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d01a      	beq.n	800d5fe <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
      frac = 0;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800d5cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	657b      	str	r3, [r7, #84]	; 0x54
 800d5d2:	e014      	b.n	800d5fe <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    }
  }
  else if (diff < 0.5) {
 800d5d4:	f04f 0200 	mov.w	r2, #0
 800d5d8:	4b2f      	ldr	r3, [pc, #188]	; (800d698 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800d5da:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d5de:	f7f3 fa7d 	bl	8000adc <__aeabi_dcmplt>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d10a      	bne.n	800d5fe <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800d5e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d004      	beq.n	800d5f8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x258>
 800d5ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5f0:	f003 0301 	and.w	r3, r3, #1
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d002      	beq.n	800d5fe <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800d5f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800d5fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d600:	2b00      	cmp	r3, #0
 800d602:	d14b      	bne.n	800d69c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2fc>
    diff = value - (double)whole;
 800d604:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d606:	f7f2 ff8d 	bl	8000524 <__aeabi_i2d>
 800d60a:	4602      	mov	r2, r0
 800d60c:	460b      	mov	r3, r1
 800d60e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d612:	f7f2 fe39 	bl	8000288 <__aeabi_dsub>
 800d616:	4602      	mov	r2, r0
 800d618:	460b      	mov	r3, r1
 800d61a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800d61e:	2301      	movs	r3, #1
 800d620:	461c      	mov	r4, r3
 800d622:	f04f 0200 	mov.w	r2, #0
 800d626:	4b1c      	ldr	r3, [pc, #112]	; (800d698 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800d628:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d62c:	f7f3 fa56 	bl	8000adc <__aeabi_dcmplt>
 800d630:	4603      	mov	r3, r0
 800d632:	2b00      	cmp	r3, #0
 800d634:	d101      	bne.n	800d63a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x29a>
 800d636:	2300      	movs	r3, #0
 800d638:	461c      	mov	r4, r3
 800d63a:	b2e3      	uxtb	r3, r4
 800d63c:	f083 0301 	eor.w	r3, r3, #1
 800d640:	b2db      	uxtb	r3, r3
 800d642:	2b00      	cmp	r3, #0
 800d644:	d109      	bne.n	800d65a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ba>
 800d646:	f04f 0200 	mov.w	r2, #0
 800d64a:	4b13      	ldr	r3, [pc, #76]	; (800d698 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800d64c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800d650:	f7f3 fa62 	bl	8000b18 <__aeabi_dcmpgt>
 800d654:	4603      	mov	r3, r0
 800d656:	2b00      	cmp	r3, #0
 800d658:	d06d      	beq.n	800d736 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 800d65a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d65c:	f003 0301 	and.w	r3, r3, #1
 800d660:	2b00      	cmp	r3, #0
 800d662:	d068      	beq.n	800d736 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800d664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d666:	3301      	adds	r3, #1
 800d668:	657b      	str	r3, [r7, #84]	; 0x54
 800d66a:	e064      	b.n	800d736 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 800d66c:	f3af 8000 	nop.w
 800d670:	00000000 	.word	0x00000000
 800d674:	41cdcd65 	.word	0x41cdcd65
 800d678:	00000000 	.word	0x00000000
 800d67c:	c1cdcd65 	.word	0xc1cdcd65
 800d680:	0801624c 	.word	0x0801624c
 800d684:	08016250 	.word	0x08016250
 800d688:	7fefffff 	.word	0x7fefffff
 800d68c:	08016258 	.word	0x08016258
 800d690:	08016260 	.word	0x08016260
 800d694:	080164a0 	.word	0x080164a0
 800d698:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 800d69c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d69e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d6a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6a2:	2b1f      	cmp	r3, #31
 800d6a4:	d826      	bhi.n	800d6f4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
      --count;
 800d6a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6a8:	3b01      	subs	r3, #1
 800d6aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800d6ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d6ae:	4b6c      	ldr	r3, [pc, #432]	; (800d860 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 800d6b0:	fba3 2301 	umull	r2, r3, r3, r1
 800d6b4:	08da      	lsrs	r2, r3, #3
 800d6b6:	4613      	mov	r3, r2
 800d6b8:	009b      	lsls	r3, r3, #2
 800d6ba:	4413      	add	r3, r2
 800d6bc:	005b      	lsls	r3, r3, #1
 800d6be:	1aca      	subs	r2, r1, r3
 800d6c0:	b2d2      	uxtb	r2, r2
 800d6c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6c4:	1c59      	adds	r1, r3, #1
 800d6c6:	65f9      	str	r1, [r7, #92]	; 0x5c
 800d6c8:	3230      	adds	r2, #48	; 0x30
 800d6ca:	b2d2      	uxtb	r2, r2
 800d6cc:	3360      	adds	r3, #96	; 0x60
 800d6ce:	443b      	add	r3, r7
 800d6d0:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800d6d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6d6:	4a62      	ldr	r2, [pc, #392]	; (800d860 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 800d6d8:	fba2 2303 	umull	r2, r3, r2, r3
 800d6dc:	08db      	lsrs	r3, r3, #3
 800d6de:	653b      	str	r3, [r7, #80]	; 0x50
 800d6e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	bf0c      	ite	eq
 800d6e6:	2301      	moveq	r3, #1
 800d6e8:	2300      	movne	r3, #0
 800d6ea:	b2db      	uxtb	r3, r3
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d100      	bne.n	800d6f2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x352>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d6f0:	e7d6      	b.n	800d6a0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x300>
        break;
 800d6f2:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800d6f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d6f6:	2b1f      	cmp	r3, #31
 800d6f8:	d806      	bhi.n	800d708 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 800d6fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d6fc:	1e5a      	subs	r2, r3, #1
 800d6fe:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d700:	2b00      	cmp	r3, #0
 800d702:	d001      	beq.n	800d708 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 800d704:	2301      	movs	r3, #1
 800d706:	e000      	b.n	800d70a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x36a>
 800d708:	2300      	movs	r3, #0
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d008      	beq.n	800d720 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x380>
      buf[len++] = '0';
 800d70e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d710:	1c5a      	adds	r2, r3, #1
 800d712:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d714:	3360      	adds	r3, #96	; 0x60
 800d716:	443b      	add	r3, r7
 800d718:	2230      	movs	r2, #48	; 0x30
 800d71a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800d71e:	e7e9      	b.n	800d6f4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d720:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d722:	2b1f      	cmp	r3, #31
 800d724:	d807      	bhi.n	800d736 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // add decimal
      buf[len++] = '.';
 800d726:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d728:	1c5a      	adds	r2, r3, #1
 800d72a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d72c:	3360      	adds	r3, #96	; 0x60
 800d72e:	443b      	add	r3, r7
 800d730:	222e      	movs	r2, #46	; 0x2e
 800d732:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d736:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d738:	2b1f      	cmp	r3, #31
 800d73a:	d827      	bhi.n	800d78c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ec>
    buf[len++] = (char)(48 + (whole % 10));
 800d73c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d73e:	4b49      	ldr	r3, [pc, #292]	; (800d864 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 800d740:	fb83 1302 	smull	r1, r3, r3, r2
 800d744:	1099      	asrs	r1, r3, #2
 800d746:	17d3      	asrs	r3, r2, #31
 800d748:	1ac9      	subs	r1, r1, r3
 800d74a:	460b      	mov	r3, r1
 800d74c:	009b      	lsls	r3, r3, #2
 800d74e:	440b      	add	r3, r1
 800d750:	005b      	lsls	r3, r3, #1
 800d752:	1ad1      	subs	r1, r2, r3
 800d754:	b2ca      	uxtb	r2, r1
 800d756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d758:	1c59      	adds	r1, r3, #1
 800d75a:	65f9      	str	r1, [r7, #92]	; 0x5c
 800d75c:	3230      	adds	r2, #48	; 0x30
 800d75e:	b2d2      	uxtb	r2, r2
 800d760:	3360      	adds	r3, #96	; 0x60
 800d762:	443b      	add	r3, r7
 800d764:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800d768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d76a:	4a3e      	ldr	r2, [pc, #248]	; (800d864 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 800d76c:	fb82 1203 	smull	r1, r2, r2, r3
 800d770:	1092      	asrs	r2, r2, #2
 800d772:	17db      	asrs	r3, r3, #31
 800d774:	1ad3      	subs	r3, r2, r3
 800d776:	657b      	str	r3, [r7, #84]	; 0x54
 800d778:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	bf0c      	ite	eq
 800d77e:	2301      	moveq	r3, #1
 800d780:	2300      	movne	r3, #0
 800d782:	b2db      	uxtb	r3, r3
 800d784:	2b00      	cmp	r3, #0
 800d786:	d100      	bne.n	800d78a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ea>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d788:	e7d5      	b.n	800d736 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      break;
 800d78a:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800d78c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d78e:	f003 0302 	and.w	r3, r3, #2
 800d792:	2b00      	cmp	r3, #0
 800d794:	d123      	bne.n	800d7de <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 800d796:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d798:	f003 0301 	and.w	r3, r3, #1
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d01e      	beq.n	800d7de <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800d7a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d00b      	beq.n	800d7be <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
 800d7a6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d104      	bne.n	800d7b8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x418>
 800d7ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7b0:	f003 030c 	and.w	r3, r3, #12
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d002      	beq.n	800d7be <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
      width--;
 800d7b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7ba:	3b01      	subs	r3, #1
 800d7bc:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800d7be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d7c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d20b      	bcs.n	800d7de <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 800d7c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7c8:	2b1f      	cmp	r3, #31
 800d7ca:	d808      	bhi.n	800d7de <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
      buf[len++] = '0';
 800d7cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7ce:	1c5a      	adds	r2, r3, #1
 800d7d0:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d7d2:	3360      	adds	r3, #96	; 0x60
 800d7d4:	443b      	add	r3, r7
 800d7d6:	2230      	movs	r2, #48	; 0x30
 800d7d8:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800d7dc:	e7ef      	b.n	800d7be <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800d7de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7e0:	2b1f      	cmp	r3, #31
 800d7e2:	d827      	bhi.n	800d834 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    if (negative) {
 800d7e4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d008      	beq.n	800d7fe <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x45e>
      buf[len++] = '-';
 800d7ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d7ee:	1c5a      	adds	r2, r3, #1
 800d7f0:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d7f2:	3360      	adds	r3, #96	; 0x60
 800d7f4:	443b      	add	r3, r7
 800d7f6:	222d      	movs	r2, #45	; 0x2d
 800d7f8:	f803 2c48 	strb.w	r2, [r3, #-72]
 800d7fc:	e01a      	b.n	800d834 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_PLUS) {
 800d7fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d800:	f003 0304 	and.w	r3, r3, #4
 800d804:	2b00      	cmp	r3, #0
 800d806:	d008      	beq.n	800d81a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x47a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800d808:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d80a:	1c5a      	adds	r2, r3, #1
 800d80c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d80e:	3360      	adds	r3, #96	; 0x60
 800d810:	443b      	add	r3, r7
 800d812:	222b      	movs	r2, #43	; 0x2b
 800d814:	f803 2c48 	strb.w	r2, [r3, #-72]
 800d818:	e00c      	b.n	800d834 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_SPACE) {
 800d81a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d81c:	f003 0308 	and.w	r3, r3, #8
 800d820:	2b00      	cmp	r3, #0
 800d822:	d007      	beq.n	800d834 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
      buf[len++] = ' ';
 800d824:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d826:	1c5a      	adds	r2, r3, #1
 800d828:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d82a:	3360      	adds	r3, #96	; 0x60
 800d82c:	443b      	add	r3, r7
 800d82e:	2220      	movs	r2, #32
 800d830:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800d834:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d836:	9303      	str	r3, [sp, #12]
 800d838:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d83a:	9302      	str	r3, [sp, #8]
 800d83c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d83e:	9301      	str	r3, [sp, #4]
 800d840:	f107 0318 	add.w	r3, r7, #24
 800d844:	9300      	str	r3, [sp, #0]
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	68fa      	ldr	r2, [r7, #12]
 800d84a:	6939      	ldr	r1, [r7, #16]
 800d84c:	6978      	ldr	r0, [r7, #20]
 800d84e:	f7ff fba3 	bl	800cf98 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800d852:	4603      	mov	r3, r0
 800d854:	bf00      	nop
}
 800d856:	4618      	mov	r0, r3
 800d858:	3764      	adds	r7, #100	; 0x64
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd90      	pop	{r4, r7, pc}
 800d85e:	bf00      	nop
 800d860:	cccccccd 	.word	0xcccccccd
 800d864:	66666667 	.word	0x66666667

0800d868 <_ZL5_etoaPFvcPvjjEPcjjdjjj>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800d868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d86c:	b09f      	sub	sp, #124	; 0x7c
 800d86e:	af06      	add	r7, sp, #24
 800d870:	6278      	str	r0, [r7, #36]	; 0x24
 800d872:	6239      	str	r1, [r7, #32]
 800d874:	61fa      	str	r2, [r7, #28]
 800d876:	61bb      	str	r3, [r7, #24]
 800d878:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800d87c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d880:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d884:	f7f3 f920 	bl	8000ac8 <__aeabi_dcmpeq>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d014      	beq.n	800d8b8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 800d88e:	f04f 32ff 	mov.w	r2, #4294967295
 800d892:	4bc1      	ldr	r3, [pc, #772]	; (800db98 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x330>)
 800d894:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d898:	f7f3 f93e 	bl	8000b18 <__aeabi_dcmpgt>
 800d89c:	4603      	mov	r3, r0
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d10a      	bne.n	800d8b8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 800d8a2:	f04f 32ff 	mov.w	r2, #4294967295
 800d8a6:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800d8aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d8ae:	f7f3 f915 	bl	8000adc <__aeabi_dcmplt>
 800d8b2:	4603      	mov	r3, r0
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d012      	beq.n	800d8de <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800d8b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8bc:	9302      	str	r3, [sp, #8]
 800d8be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d8c2:	9301      	str	r3, [sp, #4]
 800d8c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d8c8:	9300      	str	r3, [sp, #0]
 800d8ca:	ed97 0b04 	vldr	d0, [r7, #16]
 800d8ce:	69bb      	ldr	r3, [r7, #24]
 800d8d0:	69fa      	ldr	r2, [r7, #28]
 800d8d2:	6a39      	ldr	r1, [r7, #32]
 800d8d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d8d6:	f7ff fd63 	bl	800d3a0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	e23f      	b.n	800dd5e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800d8de:	2301      	movs	r3, #1
 800d8e0:	461e      	mov	r6, r3
 800d8e2:	f04f 0200 	mov.w	r2, #0
 800d8e6:	f04f 0300 	mov.w	r3, #0
 800d8ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800d8ee:	f7f3 f8f5 	bl	8000adc <__aeabi_dcmplt>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d101      	bne.n	800d8fc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x94>
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	461e      	mov	r6, r3
 800d8fc:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 800d900:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800d904:	2b00      	cmp	r3, #0
 800d906:	d009      	beq.n	800d91c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xb4>
    value = -value;
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	603b      	str	r3, [r7, #0]
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800d912:	607b      	str	r3, [r7, #4]
 800d914:	ed97 7b00 	vldr	d7, [r7]
 800d918:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800d91c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d924:	2b00      	cmp	r3, #0
 800d926:	d102      	bne.n	800d92e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800d928:	2306      	movs	r3, #6
 800d92a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800d92e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800d932:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800d936:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d93a:	f04f 0200 	mov.w	r2, #0
 800d93e:	f04f 0300 	mov.w	r3, #0
 800d942:	0d0a      	lsrs	r2, r1, #20
 800d944:	2300      	movs	r3, #0
 800d946:	4613      	mov	r3, r2
 800d948:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800d94c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d950:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800d952:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800d956:	4690      	mov	r8, r2
 800d958:	f3c3 0913 	ubfx	r9, r3, #0, #20
 800d95c:	4644      	mov	r4, r8
 800d95e:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 800d962:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d966:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800d96a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d96c:	f7f2 fdda 	bl	8000524 <__aeabi_i2d>
 800d970:	a37d      	add	r3, pc, #500	; (adr r3, 800db68 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x300>)
 800d972:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d976:	f7f2 fe3f 	bl	80005f8 <__aeabi_dmul>
 800d97a:	4602      	mov	r2, r0
 800d97c:	460b      	mov	r3, r1
 800d97e:	4610      	mov	r0, r2
 800d980:	4619      	mov	r1, r3
 800d982:	a37b      	add	r3, pc, #492	; (adr r3, 800db70 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x308>)
 800d984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d988:	f7f2 fc80 	bl	800028c <__adddf3>
 800d98c:	4602      	mov	r2, r0
 800d98e:	460b      	mov	r3, r1
 800d990:	4614      	mov	r4, r2
 800d992:	461d      	mov	r5, r3
 800d994:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800d998:	f04f 0200 	mov.w	r2, #0
 800d99c:	4b7f      	ldr	r3, [pc, #508]	; (800db9c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x334>)
 800d99e:	f7f2 fc73 	bl	8000288 <__aeabi_dsub>
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	460b      	mov	r3, r1
 800d9a6:	4610      	mov	r0, r2
 800d9a8:	4619      	mov	r1, r3
 800d9aa:	a373      	add	r3, pc, #460	; (adr r3, 800db78 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x310>)
 800d9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9b0:	f7f2 fe22 	bl	80005f8 <__aeabi_dmul>
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	4620      	mov	r0, r4
 800d9ba:	4629      	mov	r1, r5
 800d9bc:	f7f2 fc66 	bl	800028c <__adddf3>
 800d9c0:	4602      	mov	r2, r0
 800d9c2:	460b      	mov	r3, r1
 800d9c4:	4610      	mov	r0, r2
 800d9c6:	4619      	mov	r1, r3
 800d9c8:	f7f3 f8c6 	bl	8000b58 <__aeabi_d2iz>
 800d9cc:	4603      	mov	r3, r0
 800d9ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800d9d0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800d9d2:	f7f2 fda7 	bl	8000524 <__aeabi_i2d>
 800d9d6:	a36a      	add	r3, pc, #424	; (adr r3, 800db80 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x318>)
 800d9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9dc:	f7f2 fe0c 	bl	80005f8 <__aeabi_dmul>
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	460b      	mov	r3, r1
 800d9e4:	4610      	mov	r0, r2
 800d9e6:	4619      	mov	r1, r3
 800d9e8:	f04f 0200 	mov.w	r2, #0
 800d9ec:	4b6c      	ldr	r3, [pc, #432]	; (800dba0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x338>)
 800d9ee:	f7f2 fc4d 	bl	800028c <__adddf3>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	460b      	mov	r3, r1
 800d9f6:	4610      	mov	r0, r2
 800d9f8:	4619      	mov	r1, r3
 800d9fa:	f7f3 f8ad 	bl	8000b58 <__aeabi_d2iz>
 800d9fe:	4603      	mov	r3, r0
 800da00:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800da02:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800da04:	f7f2 fd8e 	bl	8000524 <__aeabi_i2d>
 800da08:	a35f      	add	r3, pc, #380	; (adr r3, 800db88 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x320>)
 800da0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da0e:	f7f2 fdf3 	bl	80005f8 <__aeabi_dmul>
 800da12:	4602      	mov	r2, r0
 800da14:	460b      	mov	r3, r1
 800da16:	4614      	mov	r4, r2
 800da18:	461d      	mov	r5, r3
 800da1a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800da1c:	f7f2 fd82 	bl	8000524 <__aeabi_i2d>
 800da20:	a35b      	add	r3, pc, #364	; (adr r3, 800db90 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x328>)
 800da22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da26:	f7f2 fde7 	bl	80005f8 <__aeabi_dmul>
 800da2a:	4602      	mov	r2, r0
 800da2c:	460b      	mov	r3, r1
 800da2e:	4620      	mov	r0, r4
 800da30:	4629      	mov	r1, r5
 800da32:	f7f2 fc29 	bl	8000288 <__aeabi_dsub>
 800da36:	4602      	mov	r2, r0
 800da38:	460b      	mov	r3, r1
 800da3a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 800da3e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800da42:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800da46:	f7f2 fdd7 	bl	80005f8 <__aeabi_dmul>
 800da4a:	4602      	mov	r2, r0
 800da4c:	460b      	mov	r3, r1
 800da4e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800da52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da54:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800da58:	17da      	asrs	r2, r3, #31
 800da5a:	469a      	mov	sl, r3
 800da5c:	4693      	mov	fp, r2
 800da5e:	f04f 0200 	mov.w	r2, #0
 800da62:	f04f 0300 	mov.w	r3, #0
 800da66:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800da6a:	2200      	movs	r2, #0
 800da6c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800da70:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800da74:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800da78:	4602      	mov	r2, r0
 800da7a:	460b      	mov	r3, r1
 800da7c:	f7f2 fc06 	bl	800028c <__adddf3>
 800da80:	4602      	mov	r2, r0
 800da82:	460b      	mov	r3, r1
 800da84:	4690      	mov	r8, r2
 800da86:	4699      	mov	r9, r3
 800da88:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800da8c:	f04f 0000 	mov.w	r0, #0
 800da90:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800da94:	f7f2 fbf8 	bl	8000288 <__aeabi_dsub>
 800da98:	4602      	mov	r2, r0
 800da9a:	460b      	mov	r3, r1
 800da9c:	4692      	mov	sl, r2
 800da9e:	469b      	mov	fp, r3
 800daa0:	f04f 0200 	mov.w	r2, #0
 800daa4:	4b3f      	ldr	r3, [pc, #252]	; (800dba4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x33c>)
 800daa6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800daaa:	f7f2 fecf 	bl	800084c <__aeabi_ddiv>
 800daae:	4602      	mov	r2, r0
 800dab0:	460b      	mov	r3, r1
 800dab2:	4610      	mov	r0, r2
 800dab4:	4619      	mov	r1, r3
 800dab6:	f04f 0200 	mov.w	r2, #0
 800daba:	4b3b      	ldr	r3, [pc, #236]	; (800dba8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 800dabc:	f7f2 fbe6 	bl	800028c <__adddf3>
 800dac0:	4602      	mov	r2, r0
 800dac2:	460b      	mov	r3, r1
 800dac4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800dac8:	f7f2 fec0 	bl	800084c <__aeabi_ddiv>
 800dacc:	4602      	mov	r2, r0
 800dace:	460b      	mov	r3, r1
 800dad0:	4610      	mov	r0, r2
 800dad2:	4619      	mov	r1, r3
 800dad4:	f04f 0200 	mov.w	r2, #0
 800dad8:	4b34      	ldr	r3, [pc, #208]	; (800dbac <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x344>)
 800dada:	f7f2 fbd7 	bl	800028c <__adddf3>
 800dade:	4602      	mov	r2, r0
 800dae0:	460b      	mov	r3, r1
 800dae2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800dae6:	f7f2 feb1 	bl	800084c <__aeabi_ddiv>
 800daea:	4602      	mov	r2, r0
 800daec:	460b      	mov	r3, r1
 800daee:	4650      	mov	r0, sl
 800daf0:	4659      	mov	r1, fp
 800daf2:	f7f2 fbcb 	bl	800028c <__adddf3>
 800daf6:	4602      	mov	r2, r0
 800daf8:	460b      	mov	r3, r1
 800dafa:	4640      	mov	r0, r8
 800dafc:	4649      	mov	r1, r9
 800dafe:	f7f2 fea5 	bl	800084c <__aeabi_ddiv>
 800db02:	4602      	mov	r2, r0
 800db04:	460b      	mov	r3, r1
 800db06:	4610      	mov	r0, r2
 800db08:	4619      	mov	r1, r3
 800db0a:	f04f 0200 	mov.w	r2, #0
 800db0e:	4b28      	ldr	r3, [pc, #160]	; (800dbb0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x348>)
 800db10:	f7f2 fbbc 	bl	800028c <__adddf3>
 800db14:	4602      	mov	r2, r0
 800db16:	460b      	mov	r3, r1
 800db18:	4620      	mov	r0, r4
 800db1a:	4629      	mov	r1, r5
 800db1c:	f7f2 fd6c 	bl	80005f8 <__aeabi_dmul>
 800db20:	4602      	mov	r2, r0
 800db22:	460b      	mov	r3, r1
 800db24:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 800db28:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800db2c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800db30:	f7f2 ffd4 	bl	8000adc <__aeabi_dcmplt>
 800db34:	4603      	mov	r3, r0
 800db36:	2b00      	cmp	r3, #0
 800db38:	d00d      	beq.n	800db56 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x2ee>
    expval--;
 800db3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db3c:	3b01      	subs	r3, #1
 800db3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 800db40:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800db44:	f04f 0200 	mov.w	r2, #0
 800db48:	4b17      	ldr	r3, [pc, #92]	; (800dba8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 800db4a:	f7f2 fe7f 	bl	800084c <__aeabi_ddiv>
 800db4e:	4602      	mov	r2, r0
 800db50:	460b      	mov	r3, r1
 800db52:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800db56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db58:	2b63      	cmp	r3, #99	; 0x63
 800db5a:	dc2b      	bgt.n	800dbb4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 800db5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db5e:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800db62:	db27      	blt.n	800dbb4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 800db64:	2304      	movs	r3, #4
 800db66:	e026      	b.n	800dbb6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34e>
 800db68:	509f79fb 	.word	0x509f79fb
 800db6c:	3fd34413 	.word	0x3fd34413
 800db70:	8b60c8b3 	.word	0x8b60c8b3
 800db74:	3fc68a28 	.word	0x3fc68a28
 800db78:	636f4361 	.word	0x636f4361
 800db7c:	3fd287a7 	.word	0x3fd287a7
 800db80:	0979a371 	.word	0x0979a371
 800db84:	400a934f 	.word	0x400a934f
 800db88:	bbb55516 	.word	0xbbb55516
 800db8c:	40026bb1 	.word	0x40026bb1
 800db90:	fefa39ef 	.word	0xfefa39ef
 800db94:	3fe62e42 	.word	0x3fe62e42
 800db98:	7fefffff 	.word	0x7fefffff
 800db9c:	3ff80000 	.word	0x3ff80000
 800dba0:	3fe00000 	.word	0x3fe00000
 800dba4:	402c0000 	.word	0x402c0000
 800dba8:	40240000 	.word	0x40240000
 800dbac:	40180000 	.word	0x40180000
 800dbb0:	3ff00000 	.word	0x3ff00000
 800dbb4:	2305      	movs	r3, #5
 800dbb6:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800dbb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dbbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d03d      	beq.n	800dc40 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800dbc4:	a368      	add	r3, pc, #416	; (adr r3, 800dd68 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x500>)
 800dbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800dbce:	f7f2 ff99 	bl	8000b04 <__aeabi_dcmpge>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d024      	beq.n	800dc22 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
 800dbd8:	a365      	add	r3, pc, #404	; (adr r3, 800dd70 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x508>)
 800dbda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbde:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800dbe2:	f7f2 ff7b 	bl	8000adc <__aeabi_dcmplt>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d01a      	beq.n	800dc22 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
      if ((int)prec > expval) {
 800dbec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dbf0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	da07      	bge.n	800dc06 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 800dbf6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800dbfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dbfc:	1ad3      	subs	r3, r2, r3
 800dbfe:	3b01      	subs	r3, #1
 800dc00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800dc04:	e002      	b.n	800dc0c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3a4>
      }
      else {
        prec = 0;
 800dc06:	2300      	movs	r3, #0
 800dc08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800dc0c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dc10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dc14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 800dc18:	2300      	movs	r3, #0
 800dc1a:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc20:	e00e      	b.n	800dc40 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800dc22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d00a      	beq.n	800dc40 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
 800dc2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dc2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d004      	beq.n	800dc40 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
        --prec;
 800dc36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dc3a:	3b01      	subs	r3, #1
 800dc3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800dc40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dc44:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 800dc46:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800dc4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d904      	bls.n	800dc5a <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800dc50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dc52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc54:	1ad3      	subs	r3, r2, r3
 800dc56:	657b      	str	r3, [r7, #84]	; 0x54
 800dc58:	e001      	b.n	800dc5e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800dc5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dc62:	f003 0302 	and.w	r3, r3, #2
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d004      	beq.n	800dc74 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
 800dc6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d001      	beq.n	800dc74 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800dc70:	2300      	movs	r3, #0
 800dc72:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 800dc74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d009      	beq.n	800dc8e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x426>
    value /= conv.F;
 800dc7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800dc7e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800dc82:	f7f2 fde3 	bl	800084c <__aeabi_ddiv>
 800dc86:	4602      	mov	r2, r0
 800dc88:	460b      	mov	r3, r1
 800dc8a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 800dc8e:	69fb      	ldr	r3, [r7, #28]
 800dc90:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800dc92:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d006      	beq.n	800dca8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x440>
 800dc9a:	693b      	ldr	r3, [r7, #16]
 800dc9c:	60bb      	str	r3, [r7, #8]
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800dca4:	60fb      	str	r3, [r7, #12]
 800dca6:	e003      	b.n	800dcb0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x448>
 800dca8:	ed97 7b04 	vldr	d7, [r7, #16]
 800dcac:	ed87 7b02 	vstr	d7, [r7, #8]
 800dcb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dcb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dcb8:	9302      	str	r3, [sp, #8]
 800dcba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dcbc:	9301      	str	r3, [sp, #4]
 800dcbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dcc2:	9300      	str	r3, [sp, #0]
 800dcc4:	ed97 0b02 	vldr	d0, [r7, #8]
 800dcc8:	69bb      	ldr	r3, [r7, #24]
 800dcca:	69fa      	ldr	r2, [r7, #28]
 800dccc:	6a39      	ldr	r1, [r7, #32]
 800dcce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcd0:	f7ff fb66 	bl	800d3a0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800dcd4:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 800dcd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d03f      	beq.n	800dd5c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800dcdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dce0:	f003 0320 	and.w	r3, r3, #32
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d001      	beq.n	800dcec <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x484>
 800dce8:	2045      	movs	r0, #69	; 0x45
 800dcea:	e000      	b.n	800dcee <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x486>
 800dcec:	2065      	movs	r0, #101	; 0x65
 800dcee:	69fa      	ldr	r2, [r7, #28]
 800dcf0:	1c53      	adds	r3, r2, #1
 800dcf2:	61fb      	str	r3, [r7, #28]
 800dcf4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800dcf6:	69bb      	ldr	r3, [r7, #24]
 800dcf8:	6a39      	ldr	r1, [r7, #32]
 800dcfa:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800dcfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	bfb8      	it	lt
 800dd02:	425b      	neglt	r3, r3
 800dd04:	4618      	mov	r0, r3
 800dd06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd08:	0fdb      	lsrs	r3, r3, #31
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dd0e:	3a01      	subs	r2, #1
 800dd10:	2105      	movs	r1, #5
 800dd12:	9105      	str	r1, [sp, #20]
 800dd14:	9204      	str	r2, [sp, #16]
 800dd16:	2200      	movs	r2, #0
 800dd18:	9203      	str	r2, [sp, #12]
 800dd1a:	220a      	movs	r2, #10
 800dd1c:	9202      	str	r2, [sp, #8]
 800dd1e:	9301      	str	r3, [sp, #4]
 800dd20:	9000      	str	r0, [sp, #0]
 800dd22:	69bb      	ldr	r3, [r7, #24]
 800dd24:	69fa      	ldr	r2, [r7, #28]
 800dd26:	6a39      	ldr	r1, [r7, #32]
 800dd28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd2a:	f7ff fa61 	bl	800d1f0 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800dd2e:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800dd30:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800dd34:	f003 0302 	and.w	r3, r3, #2
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d00f      	beq.n	800dd5c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800dd3c:	69fa      	ldr	r2, [r7, #28]
 800dd3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd40:	1ad3      	subs	r3, r2, r3
 800dd42:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d908      	bls.n	800dd5c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
 800dd4a:	69fa      	ldr	r2, [r7, #28]
 800dd4c:	1c53      	adds	r3, r2, #1
 800dd4e:	61fb      	str	r3, [r7, #28]
 800dd50:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800dd52:	69bb      	ldr	r3, [r7, #24]
 800dd54:	6a39      	ldr	r1, [r7, #32]
 800dd56:	2020      	movs	r0, #32
 800dd58:	47a0      	blx	r4
 800dd5a:	e7ef      	b.n	800dd3c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4d4>
    }
  }
  return idx;
 800dd5c:	69fb      	ldr	r3, [r7, #28]
}
 800dd5e:	4618      	mov	r0, r3
 800dd60:	3764      	adds	r7, #100	; 0x64
 800dd62:	46bd      	mov	sp, r7
 800dd64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd68:	eb1c432d 	.word	0xeb1c432d
 800dd6c:	3f1a36e2 	.word	0x3f1a36e2
 800dd70:	00000000 	.word	0x00000000
 800dd74:	412e8480 	.word	0x412e8480

0800dd78 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800dd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd7c:	b0a1      	sub	sp, #132	; 0x84
 800dd7e:	af0a      	add	r7, sp, #40	; 0x28
 800dd80:	60f8      	str	r0, [r7, #12]
 800dd82:	60b9      	str	r1, [r7, #8]
 800dd84:	607a      	str	r2, [r7, #4]
 800dd86:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d101      	bne.n	800dd96 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    // use null output function
    out = _out_null;
 800dd92:	4ba5      	ldr	r3, [pc, #660]	; (800e028 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b0>)
 800dd94:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	781b      	ldrb	r3, [r3, #0]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	f000 84ae 	beq.w	800e6fc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x984>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	2b25      	cmp	r3, #37	; 0x25
 800dda6:	d00d      	beq.n	800ddc4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	7818      	ldrb	r0, [r3, #0]
 800ddac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ddae:	1c53      	adds	r3, r2, #1
 800ddb0:	647b      	str	r3, [r7, #68]	; 0x44
 800ddb2:	68fe      	ldr	r6, [r7, #12]
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	68b9      	ldr	r1, [r7, #8]
 800ddb8:	47b0      	blx	r6
      format++;
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	603b      	str	r3, [r7, #0]
      continue;
 800ddc0:	f000 bc9a 	b.w	800e6f8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
    }
    else {
      // yes, evaluate it
      format++;
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	3301      	adds	r3, #1
 800ddc8:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800ddca:	2300      	movs	r3, #0
 800ddcc:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	781b      	ldrb	r3, [r3, #0]
 800ddd2:	3b20      	subs	r3, #32
 800ddd4:	2b10      	cmp	r3, #16
 800ddd6:	d857      	bhi.n	800de88 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x110>
 800ddd8:	a201      	add	r2, pc, #4	; (adr r2, 800dde0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x68>)
 800ddda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddde:	bf00      	nop
 800dde0:	0800de61 	.word	0x0800de61
 800dde4:	0800de89 	.word	0x0800de89
 800dde8:	0800de89 	.word	0x0800de89
 800ddec:	0800de75 	.word	0x0800de75
 800ddf0:	0800de89 	.word	0x0800de89
 800ddf4:	0800de89 	.word	0x0800de89
 800ddf8:	0800de89 	.word	0x0800de89
 800ddfc:	0800de89 	.word	0x0800de89
 800de00:	0800de89 	.word	0x0800de89
 800de04:	0800de89 	.word	0x0800de89
 800de08:	0800de89 	.word	0x0800de89
 800de0c:	0800de4d 	.word	0x0800de4d
 800de10:	0800de89 	.word	0x0800de89
 800de14:	0800de39 	.word	0x0800de39
 800de18:	0800de89 	.word	0x0800de89
 800de1c:	0800de89 	.word	0x0800de89
 800de20:	0800de25 	.word	0x0800de25
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800de24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de26:	f043 0301 	orr.w	r3, r3, #1
 800de2a:	657b      	str	r3, [r7, #84]	; 0x54
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	3301      	adds	r3, #1
 800de30:	603b      	str	r3, [r7, #0]
 800de32:	2301      	movs	r3, #1
 800de34:	64bb      	str	r3, [r7, #72]	; 0x48
 800de36:	e02a      	b.n	800de8e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800de38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de3a:	f043 0302 	orr.w	r3, r3, #2
 800de3e:	657b      	str	r3, [r7, #84]	; 0x54
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	3301      	adds	r3, #1
 800de44:	603b      	str	r3, [r7, #0]
 800de46:	2301      	movs	r3, #1
 800de48:	64bb      	str	r3, [r7, #72]	; 0x48
 800de4a:	e020      	b.n	800de8e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800de4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de4e:	f043 0304 	orr.w	r3, r3, #4
 800de52:	657b      	str	r3, [r7, #84]	; 0x54
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	3301      	adds	r3, #1
 800de58:	603b      	str	r3, [r7, #0]
 800de5a:	2301      	movs	r3, #1
 800de5c:	64bb      	str	r3, [r7, #72]	; 0x48
 800de5e:	e016      	b.n	800de8e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800de60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de62:	f043 0308 	orr.w	r3, r3, #8
 800de66:	657b      	str	r3, [r7, #84]	; 0x54
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	3301      	adds	r3, #1
 800de6c:	603b      	str	r3, [r7, #0]
 800de6e:	2301      	movs	r3, #1
 800de70:	64bb      	str	r3, [r7, #72]	; 0x48
 800de72:	e00c      	b.n	800de8e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800de74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800de76:	f043 0310 	orr.w	r3, r3, #16
 800de7a:	657b      	str	r3, [r7, #84]	; 0x54
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	3301      	adds	r3, #1
 800de80:	603b      	str	r3, [r7, #0]
 800de82:	2301      	movs	r3, #1
 800de84:	64bb      	str	r3, [r7, #72]	; 0x48
 800de86:	e002      	b.n	800de8e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        default :                                   n = 0U; break;
 800de88:	2300      	movs	r3, #0
 800de8a:	64bb      	str	r3, [r7, #72]	; 0x48
 800de8c:	bf00      	nop
      }
    } while (n);
 800de8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de90:	2b00      	cmp	r3, #0
 800de92:	d000      	beq.n	800de96 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x11e>
    do {
 800de94:	e79b      	b.n	800ddce <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x56>

    // evaluate width field
    width = 0U;
 800de96:	2300      	movs	r3, #0
 800de98:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7ff f842 	bl	800cf28 <_ZL9_is_digitc>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d005      	beq.n	800deb6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x13e>
      width = _atoi(&format);
 800deaa:	463b      	mov	r3, r7
 800deac:	4618      	mov	r0, r3
 800deae:	f7ff f84f 	bl	800cf50 <_ZL5_atoiPPKc>
 800deb2:	6538      	str	r0, [r7, #80]	; 0x50
 800deb4:	e01a      	b.n	800deec <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
    }
    else if (*format == '*') {
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	781b      	ldrb	r3, [r3, #0]
 800deba:	2b2a      	cmp	r3, #42	; 0x2a
 800debc:	d116      	bne.n	800deec <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
      const int w = va_arg(va, int);
 800debe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800dec2:	1d1a      	adds	r2, r3, #4
 800dec4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800decc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dece:	2b00      	cmp	r3, #0
 800ded0:	da07      	bge.n	800dee2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16a>
        flags |= FLAGS_LEFT;    // reverse padding
 800ded2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ded4:	f043 0302 	orr.w	r3, r3, #2
 800ded8:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800deda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dedc:	425b      	negs	r3, r3
 800dede:	653b      	str	r3, [r7, #80]	; 0x50
 800dee0:	e001      	b.n	800dee6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16e>
      }
      else {
        width = (unsigned int)w;
 800dee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dee4:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	3301      	adds	r3, #1
 800deea:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800deec:	2300      	movs	r3, #0
 800deee:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	781b      	ldrb	r3, [r3, #0]
 800def4:	2b2e      	cmp	r3, #46	; 0x2e
 800def6:	d126      	bne.n	800df46 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      flags |= FLAGS_PRECISION;
 800def8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800defa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800defe:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	3301      	adds	r3, #1
 800df04:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800df06:	683b      	ldr	r3, [r7, #0]
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	4618      	mov	r0, r3
 800df0c:	f7ff f80c 	bl	800cf28 <_ZL9_is_digitc>
 800df10:	4603      	mov	r3, r0
 800df12:	2b00      	cmp	r3, #0
 800df14:	d005      	beq.n	800df22 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1aa>
        precision = _atoi(&format);
 800df16:	463b      	mov	r3, r7
 800df18:	4618      	mov	r0, r3
 800df1a:	f7ff f819 	bl	800cf50 <_ZL5_atoiPPKc>
 800df1e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800df20:	e011      	b.n	800df46 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      }
      else if (*format == '*') {
 800df22:	683b      	ldr	r3, [r7, #0]
 800df24:	781b      	ldrb	r3, [r3, #0]
 800df26:	2b2a      	cmp	r3, #42	; 0x2a
 800df28:	d10d      	bne.n	800df46 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
        const int prec = (int)va_arg(va, int);
 800df2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800df2e:	1d1a      	adds	r2, r3, #4
 800df30:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800df38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df3a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800df3e:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	3301      	adds	r3, #1
 800df44:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	781b      	ldrb	r3, [r3, #0]
 800df4a:	3b68      	subs	r3, #104	; 0x68
 800df4c:	2b12      	cmp	r3, #18
 800df4e:	d867      	bhi.n	800e020 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2a8>
 800df50:	a201      	add	r2, pc, #4	; (adr r2, 800df58 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e0>)
 800df52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df56:	bf00      	nop
 800df58:	0800dfcb 	.word	0x0800dfcb
 800df5c:	0800e021 	.word	0x0800e021
 800df60:	0800e001 	.word	0x0800e001
 800df64:	0800e021 	.word	0x0800e021
 800df68:	0800dfa5 	.word	0x0800dfa5
 800df6c:	0800e021 	.word	0x0800e021
 800df70:	0800e021 	.word	0x0800e021
 800df74:	0800e021 	.word	0x0800e021
 800df78:	0800e021 	.word	0x0800e021
 800df7c:	0800e021 	.word	0x0800e021
 800df80:	0800e021 	.word	0x0800e021
 800df84:	0800e021 	.word	0x0800e021
 800df88:	0800dff1 	.word	0x0800dff1
 800df8c:	0800e021 	.word	0x0800e021
 800df90:	0800e021 	.word	0x0800e021
 800df94:	0800e021 	.word	0x0800e021
 800df98:	0800e021 	.word	0x0800e021
 800df9c:	0800e021 	.word	0x0800e021
 800dfa0:	0800e011 	.word	0x0800e011
      case 'l' :
        flags |= FLAGS_LONG;
 800dfa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfa6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dfaa:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	3301      	adds	r3, #1
 800dfb0:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	2b6c      	cmp	r3, #108	; 0x6c
 800dfb8:	d134      	bne.n	800e024 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
          flags |= FLAGS_LONG_LONG;
 800dfba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfbc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dfc0:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	3301      	adds	r3, #1
 800dfc6:	603b      	str	r3, [r7, #0]
        }
        break;
 800dfc8:	e02c      	b.n	800e024 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
 800dfca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfd0:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800dfd2:	683b      	ldr	r3, [r7, #0]
 800dfd4:	3301      	adds	r3, #1
 800dfd6:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800dfd8:	683b      	ldr	r3, [r7, #0]
 800dfda:	781b      	ldrb	r3, [r3, #0]
 800dfdc:	2b68      	cmp	r3, #104	; 0x68
 800dfde:	d125      	bne.n	800e02c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
          flags |= FLAGS_CHAR;
 800dfe0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfe2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfe6:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800dfe8:	683b      	ldr	r3, [r7, #0]
 800dfea:	3301      	adds	r3, #1
 800dfec:	603b      	str	r3, [r7, #0]
        }
        break;
 800dfee:	e01d      	b.n	800e02c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800dff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dff2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dff6:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800dff8:	683b      	ldr	r3, [r7, #0]
 800dffa:	3301      	adds	r3, #1
 800dffc:	603b      	str	r3, [r7, #0]
        break;
 800dffe:	e016      	b.n	800e02e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800e000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e006:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	3301      	adds	r3, #1
 800e00c:	603b      	str	r3, [r7, #0]
        break;
 800e00e:	e00e      	b.n	800e02e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800e010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e016:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	3301      	adds	r3, #1
 800e01c:	603b      	str	r3, [r7, #0]
        break;
 800e01e:	e006      	b.n	800e02e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      default :
        break;
 800e020:	bf00      	nop
 800e022:	e004      	b.n	800e02e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
        break;
 800e024:	bf00      	nop
 800e026:	e002      	b.n	800e02e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
 800e028:	0800cea3 	.word	0x0800cea3
        break;
 800e02c:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	781b      	ldrb	r3, [r3, #0]
 800e032:	3b25      	subs	r3, #37	; 0x25
 800e034:	2b53      	cmp	r3, #83	; 0x53
 800e036:	f200 8352 	bhi.w	800e6de <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x966>
 800e03a:	a201      	add	r2, pc, #4	; (adr r2, 800e040 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2c8>)
 800e03c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e040:	0800e6c7 	.word	0x0800e6c7
 800e044:	0800e6df 	.word	0x0800e6df
 800e048:	0800e6df 	.word	0x0800e6df
 800e04c:	0800e6df 	.word	0x0800e6df
 800e050:	0800e6df 	.word	0x0800e6df
 800e054:	0800e6df 	.word	0x0800e6df
 800e058:	0800e6df 	.word	0x0800e6df
 800e05c:	0800e6df 	.word	0x0800e6df
 800e060:	0800e6df 	.word	0x0800e6df
 800e064:	0800e6df 	.word	0x0800e6df
 800e068:	0800e6df 	.word	0x0800e6df
 800e06c:	0800e6df 	.word	0x0800e6df
 800e070:	0800e6df 	.word	0x0800e6df
 800e074:	0800e6df 	.word	0x0800e6df
 800e078:	0800e6df 	.word	0x0800e6df
 800e07c:	0800e6df 	.word	0x0800e6df
 800e080:	0800e6df 	.word	0x0800e6df
 800e084:	0800e6df 	.word	0x0800e6df
 800e088:	0800e6df 	.word	0x0800e6df
 800e08c:	0800e6df 	.word	0x0800e6df
 800e090:	0800e6df 	.word	0x0800e6df
 800e094:	0800e6df 	.word	0x0800e6df
 800e098:	0800e6df 	.word	0x0800e6df
 800e09c:	0800e6df 	.word	0x0800e6df
 800e0a0:	0800e6df 	.word	0x0800e6df
 800e0a4:	0800e6df 	.word	0x0800e6df
 800e0a8:	0800e6df 	.word	0x0800e6df
 800e0ac:	0800e6df 	.word	0x0800e6df
 800e0b0:	0800e6df 	.word	0x0800e6df
 800e0b4:	0800e6df 	.word	0x0800e6df
 800e0b8:	0800e6df 	.word	0x0800e6df
 800e0bc:	0800e6df 	.word	0x0800e6df
 800e0c0:	0800e495 	.word	0x0800e495
 800e0c4:	0800e445 	.word	0x0800e445
 800e0c8:	0800e495 	.word	0x0800e495
 800e0cc:	0800e6df 	.word	0x0800e6df
 800e0d0:	0800e6df 	.word	0x0800e6df
 800e0d4:	0800e6df 	.word	0x0800e6df
 800e0d8:	0800e6df 	.word	0x0800e6df
 800e0dc:	0800e6df 	.word	0x0800e6df
 800e0e0:	0800e6df 	.word	0x0800e6df
 800e0e4:	0800e6df 	.word	0x0800e6df
 800e0e8:	0800e6df 	.word	0x0800e6df
 800e0ec:	0800e6df 	.word	0x0800e6df
 800e0f0:	0800e6df 	.word	0x0800e6df
 800e0f4:	0800e6df 	.word	0x0800e6df
 800e0f8:	0800e6df 	.word	0x0800e6df
 800e0fc:	0800e6df 	.word	0x0800e6df
 800e100:	0800e6df 	.word	0x0800e6df
 800e104:	0800e6df 	.word	0x0800e6df
 800e108:	0800e6df 	.word	0x0800e6df
 800e10c:	0800e191 	.word	0x0800e191
 800e110:	0800e6df 	.word	0x0800e6df
 800e114:	0800e6df 	.word	0x0800e6df
 800e118:	0800e6df 	.word	0x0800e6df
 800e11c:	0800e6df 	.word	0x0800e6df
 800e120:	0800e6df 	.word	0x0800e6df
 800e124:	0800e6df 	.word	0x0800e6df
 800e128:	0800e6df 	.word	0x0800e6df
 800e12c:	0800e6df 	.word	0x0800e6df
 800e130:	0800e6df 	.word	0x0800e6df
 800e134:	0800e191 	.word	0x0800e191
 800e138:	0800e505 	.word	0x0800e505
 800e13c:	0800e191 	.word	0x0800e191
 800e140:	0800e495 	.word	0x0800e495
 800e144:	0800e445 	.word	0x0800e445
 800e148:	0800e495 	.word	0x0800e495
 800e14c:	0800e6df 	.word	0x0800e6df
 800e150:	0800e191 	.word	0x0800e191
 800e154:	0800e6df 	.word	0x0800e6df
 800e158:	0800e6df 	.word	0x0800e6df
 800e15c:	0800e6df 	.word	0x0800e6df
 800e160:	0800e6df 	.word	0x0800e6df
 800e164:	0800e6df 	.word	0x0800e6df
 800e168:	0800e191 	.word	0x0800e191
 800e16c:	0800e67b 	.word	0x0800e67b
 800e170:	0800e6df 	.word	0x0800e6df
 800e174:	0800e6df 	.word	0x0800e6df
 800e178:	0800e591 	.word	0x0800e591
 800e17c:	0800e6df 	.word	0x0800e6df
 800e180:	0800e191 	.word	0x0800e191
 800e184:	0800e6df 	.word	0x0800e6df
 800e188:	0800e6df 	.word	0x0800e6df
 800e18c:	0800e191 	.word	0x0800e191
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	781b      	ldrb	r3, [r3, #0]
 800e194:	2b78      	cmp	r3, #120	; 0x78
 800e196:	d003      	beq.n	800e1a0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x428>
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	781b      	ldrb	r3, [r3, #0]
 800e19c:	2b58      	cmp	r3, #88	; 0x58
 800e19e:	d102      	bne.n	800e1a6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x42e>
          base = 16U;
 800e1a0:	2310      	movs	r3, #16
 800e1a2:	643b      	str	r3, [r7, #64]	; 0x40
 800e1a4:	e013      	b.n	800e1ce <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'o') {
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	781b      	ldrb	r3, [r3, #0]
 800e1aa:	2b6f      	cmp	r3, #111	; 0x6f
 800e1ac:	d102      	bne.n	800e1b4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x43c>
          base =  8U;
 800e1ae:	2308      	movs	r3, #8
 800e1b0:	643b      	str	r3, [r7, #64]	; 0x40
 800e1b2:	e00c      	b.n	800e1ce <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'b') {
 800e1b4:	683b      	ldr	r3, [r7, #0]
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	2b62      	cmp	r3, #98	; 0x62
 800e1ba:	d102      	bne.n	800e1c2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x44a>
          base =  2U;
 800e1bc:	2302      	movs	r3, #2
 800e1be:	643b      	str	r3, [r7, #64]	; 0x40
 800e1c0:	e005      	b.n	800e1ce <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else {
          base = 10U;
 800e1c2:	230a      	movs	r3, #10
 800e1c4:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800e1c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1c8:	f023 0310 	bic.w	r3, r3, #16
 800e1cc:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	2b58      	cmp	r3, #88	; 0x58
 800e1d4:	d103      	bne.n	800e1de <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x466>
          flags |= FLAGS_UPPERCASE;
 800e1d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1d8:	f043 0320 	orr.w	r3, r3, #32
 800e1dc:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800e1de:	683b      	ldr	r3, [r7, #0]
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	2b69      	cmp	r3, #105	; 0x69
 800e1e4:	d007      	beq.n	800e1f6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
 800e1e6:	683b      	ldr	r3, [r7, #0]
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	2b64      	cmp	r3, #100	; 0x64
 800e1ec:	d003      	beq.n	800e1f6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800e1ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1f0:	f023 030c 	bic.w	r3, r3, #12
 800e1f4:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800e1f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d003      	beq.n	800e208 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x490>
          flags &= ~FLAGS_ZEROPAD;
 800e200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e202:	f023 0301 	bic.w	r3, r3, #1
 800e206:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	781b      	ldrb	r3, [r3, #0]
 800e20c:	2b69      	cmp	r3, #105	; 0x69
 800e20e:	d004      	beq.n	800e21a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4a2>
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	781b      	ldrb	r3, [r3, #0]
 800e214:	2b64      	cmp	r3, #100	; 0x64
 800e216:	f040 8097 	bne.w	800e348 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x5d0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800e21a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e21c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e220:	2b00      	cmp	r3, #0
 800e222:	d030      	beq.n	800e286 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800e224:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e228:	3307      	adds	r3, #7
 800e22a:	f023 0307 	bic.w	r3, r3, #7
 800e22e:	f103 0208 	add.w	r2, r3, #8
 800e232:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e23a:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800e23e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e242:	2b00      	cmp	r3, #0
 800e244:	da05      	bge.n	800e252 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4da>
 800e246:	2100      	movs	r1, #0
 800e248:	4254      	negs	r4, r2
 800e24a:	eb61 0503 	sbc.w	r5, r1, r3
 800e24e:	4622      	mov	r2, r4
 800e250:	462b      	mov	r3, r5
 800e252:	6979      	ldr	r1, [r7, #20]
 800e254:	0fc9      	lsrs	r1, r1, #31
 800e256:	b2c9      	uxtb	r1, r1
 800e258:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e25a:	2600      	movs	r6, #0
 800e25c:	4680      	mov	r8, r0
 800e25e:	46b1      	mov	r9, r6
 800e260:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e262:	9008      	str	r0, [sp, #32]
 800e264:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800e266:	9007      	str	r0, [sp, #28]
 800e268:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e26a:	9006      	str	r0, [sp, #24]
 800e26c:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800e270:	9102      	str	r1, [sp, #8]
 800e272:	e9cd 2300 	strd	r2, r3, [sp]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e27a:	68b9      	ldr	r1, [r7, #8]
 800e27c:	68f8      	ldr	r0, [r7, #12]
 800e27e:	f7ff f81e 	bl	800d2be <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 800e282:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
 800e284:	e0da      	b.n	800e43c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          else if (flags & FLAGS_LONG) {
 800e286:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d020      	beq.n	800e2d2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x55a>
            const long value = va_arg(va, long);
 800e290:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e294:	1d1a      	adds	r2, r3, #4
 800e296:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800e29e:	69fb      	ldr	r3, [r7, #28]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	bfb8      	it	lt
 800e2a4:	425b      	neglt	r3, r3
 800e2a6:	4619      	mov	r1, r3
 800e2a8:	69fb      	ldr	r3, [r7, #28]
 800e2aa:	0fdb      	lsrs	r3, r3, #31
 800e2ac:	b2db      	uxtb	r3, r3
 800e2ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e2b0:	9205      	str	r2, [sp, #20]
 800e2b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e2b4:	9204      	str	r2, [sp, #16]
 800e2b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e2b8:	9203      	str	r2, [sp, #12]
 800e2ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e2bc:	9202      	str	r2, [sp, #8]
 800e2be:	9301      	str	r3, [sp, #4]
 800e2c0:	9100      	str	r1, [sp, #0]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e2c6:	68b9      	ldr	r1, [r7, #8]
 800e2c8:	68f8      	ldr	r0, [r7, #12]
 800e2ca:	f7fe ff91 	bl	800d1f0 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800e2ce:	6478      	str	r0, [r7, #68]	; 0x44
          }
 800e2d0:	e0b4      	b.n	800e43c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800e2d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d007      	beq.n	800e2ec <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x574>
 800e2dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e2e0:	1d1a      	adds	r2, r3, #4
 800e2e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	b2db      	uxtb	r3, r3
 800e2ea:	e012      	b.n	800e312 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 800e2ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d007      	beq.n	800e306 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x58e>
 800e2f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e2fa:	1d1a      	adds	r2, r3, #4
 800e2fc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	b21b      	sxth	r3, r3
 800e304:	e005      	b.n	800e312 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 800e306:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e30a:	1d1a      	adds	r2, r3, #4
 800e30c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800e314:	6a3b      	ldr	r3, [r7, #32]
 800e316:	2b00      	cmp	r3, #0
 800e318:	bfb8      	it	lt
 800e31a:	425b      	neglt	r3, r3
 800e31c:	4619      	mov	r1, r3
 800e31e:	6a3b      	ldr	r3, [r7, #32]
 800e320:	0fdb      	lsrs	r3, r3, #31
 800e322:	b2db      	uxtb	r3, r3
 800e324:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e326:	9205      	str	r2, [sp, #20]
 800e328:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e32a:	9204      	str	r2, [sp, #16]
 800e32c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e32e:	9203      	str	r2, [sp, #12]
 800e330:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e332:	9202      	str	r2, [sp, #8]
 800e334:	9301      	str	r3, [sp, #4]
 800e336:	9100      	str	r1, [sp, #0]
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e33c:	68b9      	ldr	r1, [r7, #8]
 800e33e:	68f8      	ldr	r0, [r7, #12]
 800e340:	f7fe ff56 	bl	800d1f0 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800e344:	6478      	str	r0, [r7, #68]	; 0x44
          }
 800e346:	e079      	b.n	800e43c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800e348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e34a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d022      	beq.n	800e398 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x620>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800e352:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e356:	3307      	adds	r3, #7
 800e358:	f023 0307 	bic.w	r3, r3, #7
 800e35c:	f103 0208 	add.w	r2, r3, #8
 800e360:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e364:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e368:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e36a:	2000      	movs	r0, #0
 800e36c:	468a      	mov	sl, r1
 800e36e:	4683      	mov	fp, r0
 800e370:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e372:	9108      	str	r1, [sp, #32]
 800e374:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e376:	9107      	str	r1, [sp, #28]
 800e378:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e37a:	9106      	str	r1, [sp, #24]
 800e37c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800e380:	2100      	movs	r1, #0
 800e382:	9102      	str	r1, [sp, #8]
 800e384:	e9cd 2300 	strd	r2, r3, [sp]
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e38c:	68b9      	ldr	r1, [r7, #8]
 800e38e:	68f8      	ldr	r0, [r7, #12]
 800e390:	f7fe ff95 	bl	800d2be <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 800e394:	6478      	str	r0, [r7, #68]	; 0x44
 800e396:	e051      	b.n	800e43c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800e398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e39a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d018      	beq.n	800e3d4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x65c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800e3a2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e3a6:	1d1a      	adds	r2, r3, #4
 800e3a8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e3ac:	681b      	ldr	r3, [r3, #0]
 800e3ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e3b0:	9205      	str	r2, [sp, #20]
 800e3b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e3b4:	9204      	str	r2, [sp, #16]
 800e3b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e3b8:	9203      	str	r2, [sp, #12]
 800e3ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e3bc:	9202      	str	r2, [sp, #8]
 800e3be:	2200      	movs	r2, #0
 800e3c0:	9201      	str	r2, [sp, #4]
 800e3c2:	9300      	str	r3, [sp, #0]
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e3c8:	68b9      	ldr	r1, [r7, #8]
 800e3ca:	68f8      	ldr	r0, [r7, #12]
 800e3cc:	f7fe ff10 	bl	800d1f0 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800e3d0:	6478      	str	r0, [r7, #68]	; 0x44
 800e3d2:	e033      	b.n	800e43c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800e3d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d007      	beq.n	800e3ee <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x676>
 800e3de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e3e2:	1d1a      	adds	r2, r3, #4
 800e3e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	b2db      	uxtb	r3, r3
 800e3ec:	e012      	b.n	800e414 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 800e3ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e3f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d007      	beq.n	800e408 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x690>
 800e3f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e3fc:	1d1a      	adds	r2, r3, #4
 800e3fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	b29b      	uxth	r3, r3
 800e406:	e005      	b.n	800e414 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 800e408:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e40c:	1d1a      	adds	r2, r3, #4
 800e40e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800e416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e418:	9305      	str	r3, [sp, #20]
 800e41a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e41c:	9304      	str	r3, [sp, #16]
 800e41e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e420:	9303      	str	r3, [sp, #12]
 800e422:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e424:	9302      	str	r3, [sp, #8]
 800e426:	2300      	movs	r3, #0
 800e428:	9301      	str	r3, [sp, #4]
 800e42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42c:	9300      	str	r3, [sp, #0]
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e432:	68b9      	ldr	r1, [r7, #8]
 800e434:	68f8      	ldr	r0, [r7, #12]
 800e436:	f7fe fedb 	bl	800d1f0 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800e43a:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	3301      	adds	r3, #1
 800e440:	603b      	str	r3, [r7, #0]
        break;
 800e442:	e159      	b.n	800e6f8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	2b46      	cmp	r3, #70	; 0x46
 800e44a:	d103      	bne.n	800e454 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6dc>
 800e44c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e44e:	f043 0320 	orr.w	r3, r3, #32
 800e452:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800e454:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e458:	3307      	adds	r3, #7
 800e45a:	f023 0307 	bic.w	r3, r3, #7
 800e45e:	f103 0208 	add.w	r2, r3, #8
 800e462:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e466:	ed93 7b00 	vldr	d7, [r3]
 800e46a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e46c:	9302      	str	r3, [sp, #8]
 800e46e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e470:	9301      	str	r3, [sp, #4]
 800e472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e474:	9300      	str	r3, [sp, #0]
 800e476:	eeb0 0a47 	vmov.f32	s0, s14
 800e47a:	eef0 0a67 	vmov.f32	s1, s15
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e482:	68b9      	ldr	r1, [r7, #8]
 800e484:	68f8      	ldr	r0, [r7, #12]
 800e486:	f7fe ff8b 	bl	800d3a0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800e48a:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800e48c:	683b      	ldr	r3, [r7, #0]
 800e48e:	3301      	adds	r3, #1
 800e490:	603b      	str	r3, [r7, #0]
        break;
 800e492:	e131      	b.n	800e6f8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	781b      	ldrb	r3, [r3, #0]
 800e498:	2b67      	cmp	r3, #103	; 0x67
 800e49a:	d003      	beq.n	800e4a4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x72c>
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	2b47      	cmp	r3, #71	; 0x47
 800e4a2:	d103      	bne.n	800e4ac <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x734>
 800e4a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e4aa:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	2b45      	cmp	r3, #69	; 0x45
 800e4b2:	d003      	beq.n	800e4bc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x744>
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	781b      	ldrb	r3, [r3, #0]
 800e4b8:	2b47      	cmp	r3, #71	; 0x47
 800e4ba:	d103      	bne.n	800e4c4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x74c>
 800e4bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4be:	f043 0320 	orr.w	r3, r3, #32
 800e4c2:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800e4c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e4c8:	3307      	adds	r3, #7
 800e4ca:	f023 0307 	bic.w	r3, r3, #7
 800e4ce:	f103 0208 	add.w	r2, r3, #8
 800e4d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e4d6:	ed93 7b00 	vldr	d7, [r3]
 800e4da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4dc:	9302      	str	r3, [sp, #8]
 800e4de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4e0:	9301      	str	r3, [sp, #4]
 800e4e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4e4:	9300      	str	r3, [sp, #0]
 800e4e6:	eeb0 0a47 	vmov.f32	s0, s14
 800e4ea:	eef0 0a67 	vmov.f32	s1, s15
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e4f2:	68b9      	ldr	r1, [r7, #8]
 800e4f4:	68f8      	ldr	r0, [r7, #12]
 800e4f6:	f7ff f9b7 	bl	800d868 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 800e4fa:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	3301      	adds	r3, #1
 800e500:	603b      	str	r3, [r7, #0]
        break;
 800e502:	e0f9      	b.n	800e6f8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800e504:	2301      	movs	r3, #1
 800e506:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800e508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e50a:	f003 0302 	and.w	r3, r3, #2
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d113      	bne.n	800e53a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
          while (l++ < width) {
 800e512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e514:	1c5a      	adds	r2, r3, #1
 800e516:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e518:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e51a:	429a      	cmp	r2, r3
 800e51c:	bf8c      	ite	hi
 800e51e:	2301      	movhi	r3, #1
 800e520:	2300      	movls	r3, #0
 800e522:	b2db      	uxtb	r3, r3
 800e524:	2b00      	cmp	r3, #0
 800e526:	d008      	beq.n	800e53a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
            out(' ', buffer, idx++, maxlen);
 800e528:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e52a:	1c53      	adds	r3, r2, #1
 800e52c:	647b      	str	r3, [r7, #68]	; 0x44
 800e52e:	68fe      	ldr	r6, [r7, #12]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	68b9      	ldr	r1, [r7, #8]
 800e534:	2020      	movs	r0, #32
 800e536:	47b0      	blx	r6
          while (l++ < width) {
 800e538:	e7eb      	b.n	800e512 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800e53a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e53e:	1d1a      	adds	r2, r3, #4
 800e540:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	b2d8      	uxtb	r0, r3
 800e548:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e54a:	1c53      	adds	r3, r2, #1
 800e54c:	647b      	str	r3, [r7, #68]	; 0x44
 800e54e:	68fe      	ldr	r6, [r7, #12]
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	68b9      	ldr	r1, [r7, #8]
 800e554:	47b0      	blx	r6
        // post padding
        if (flags & FLAGS_LEFT) {
 800e556:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e558:	f003 0302 	and.w	r3, r3, #2
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d013      	beq.n	800e588 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
          while (l++ < width) {
 800e560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e562:	1c5a      	adds	r2, r3, #1
 800e564:	63fa      	str	r2, [r7, #60]	; 0x3c
 800e566:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e568:	429a      	cmp	r2, r3
 800e56a:	bf8c      	ite	hi
 800e56c:	2301      	movhi	r3, #1
 800e56e:	2300      	movls	r3, #0
 800e570:	b2db      	uxtb	r3, r3
 800e572:	2b00      	cmp	r3, #0
 800e574:	d008      	beq.n	800e588 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
            out(' ', buffer, idx++, maxlen);
 800e576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e578:	1c53      	adds	r3, r2, #1
 800e57a:	647b      	str	r3, [r7, #68]	; 0x44
 800e57c:	68fe      	ldr	r6, [r7, #12]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	68b9      	ldr	r1, [r7, #8]
 800e582:	2020      	movs	r0, #32
 800e584:	47b0      	blx	r6
          while (l++ < width) {
 800e586:	e7eb      	b.n	800e560 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7e8>
          }
        }
        format++;
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	3301      	adds	r3, #1
 800e58c:	603b      	str	r3, [r7, #0]
        break;
 800e58e:	e0b3      	b.n	800e6f8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800e590:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e594:	1d1a      	adds	r2, r3, #4
 800e596:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800e59e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d001      	beq.n	800e5a8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x830>
 800e5a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5a6:	e001      	b.n	800e5ac <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x834>
 800e5a8:	f04f 33ff 	mov.w	r3, #4294967295
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e5b0:	f7fe fc98 	bl	800cee4 <_ZL10_strnlen_sPKcj>
 800e5b4:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800e5b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d007      	beq.n	800e5d0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x858>
          l = (l < precision ? l : precision);
 800e5c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e5c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5c4:	429a      	cmp	r2, r3
 800e5c6:	d201      	bcs.n	800e5cc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x854>
 800e5c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5ca:	e000      	b.n	800e5ce <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x856>
 800e5cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e5ce:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 800e5d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e5d2:	f003 0302 	and.w	r3, r3, #2
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d113      	bne.n	800e602 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
          while (l++ < width) {
 800e5da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5dc:	1c5a      	adds	r2, r3, #1
 800e5de:	637a      	str	r2, [r7, #52]	; 0x34
 800e5e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e5e2:	429a      	cmp	r2, r3
 800e5e4:	bf8c      	ite	hi
 800e5e6:	2301      	movhi	r3, #1
 800e5e8:	2300      	movls	r3, #0
 800e5ea:	b2db      	uxtb	r3, r3
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d008      	beq.n	800e602 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
            out(' ', buffer, idx++, maxlen);
 800e5f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e5f2:	1c53      	adds	r3, r2, #1
 800e5f4:	647b      	str	r3, [r7, #68]	; 0x44
 800e5f6:	68fe      	ldr	r6, [r7, #12]
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	68b9      	ldr	r1, [r7, #8]
 800e5fc:	2020      	movs	r0, #32
 800e5fe:	47b0      	blx	r6
          while (l++ < width) {
 800e600:	e7eb      	b.n	800e5da <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x862>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800e602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e604:	781b      	ldrb	r3, [r3, #0]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d00b      	beq.n	800e622 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 800e60a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e60c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e610:	2b00      	cmp	r3, #0
 800e612:	d004      	beq.n	800e61e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8a6>
 800e614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e616:	1e5a      	subs	r2, r3, #1
 800e618:	64fa      	str	r2, [r7, #76]	; 0x4c
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d001      	beq.n	800e622 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 800e61e:	2301      	movs	r3, #1
 800e620:	e000      	b.n	800e624 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8ac>
 800e622:	2300      	movs	r3, #0
 800e624:	2b00      	cmp	r3, #0
 800e626:	d00b      	beq.n	800e640 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8c8>
          out(*(p++), buffer, idx++, maxlen);
 800e628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e62a:	1c5a      	adds	r2, r3, #1
 800e62c:	63ba      	str	r2, [r7, #56]	; 0x38
 800e62e:	7818      	ldrb	r0, [r3, #0]
 800e630:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e632:	1c53      	adds	r3, r2, #1
 800e634:	647b      	str	r3, [r7, #68]	; 0x44
 800e636:	68fe      	ldr	r6, [r7, #12]
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	68b9      	ldr	r1, [r7, #8]
 800e63c:	47b0      	blx	r6
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800e63e:	e7e0      	b.n	800e602 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800e640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e642:	f003 0302 	and.w	r3, r3, #2
 800e646:	2b00      	cmp	r3, #0
 800e648:	d013      	beq.n	800e672 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
          while (l++ < width) {
 800e64a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e64c:	1c5a      	adds	r2, r3, #1
 800e64e:	637a      	str	r2, [r7, #52]	; 0x34
 800e650:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e652:	429a      	cmp	r2, r3
 800e654:	bf8c      	ite	hi
 800e656:	2301      	movhi	r3, #1
 800e658:	2300      	movls	r3, #0
 800e65a:	b2db      	uxtb	r3, r3
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d008      	beq.n	800e672 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
            out(' ', buffer, idx++, maxlen);
 800e660:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e662:	1c53      	adds	r3, r2, #1
 800e664:	647b      	str	r3, [r7, #68]	; 0x44
 800e666:	68fe      	ldr	r6, [r7, #12]
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	68b9      	ldr	r1, [r7, #8]
 800e66c:	2020      	movs	r0, #32
 800e66e:	47b0      	blx	r6
          while (l++ < width) {
 800e670:	e7eb      	b.n	800e64a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8d2>
          }
        }
        format++;
 800e672:	683b      	ldr	r3, [r7, #0]
 800e674:	3301      	adds	r3, #1
 800e676:	603b      	str	r3, [r7, #0]
        break;
 800e678:	e03e      	b.n	800e6f8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800e67a:	2308      	movs	r3, #8
 800e67c:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800e67e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e680:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800e684:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800e686:	2300      	movs	r3, #0
 800e688:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800e68c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e690:	1d1a      	adds	r2, r3, #4
 800e692:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	461a      	mov	r2, r3
 800e69a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e69c:	9305      	str	r3, [sp, #20]
 800e69e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e6a0:	9304      	str	r3, [sp, #16]
 800e6a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6a4:	9303      	str	r3, [sp, #12]
 800e6a6:	2310      	movs	r3, #16
 800e6a8:	9302      	str	r3, [sp, #8]
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	9301      	str	r3, [sp, #4]
 800e6ae:	9200      	str	r2, [sp, #0]
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6b4:	68b9      	ldr	r1, [r7, #8]
 800e6b6:	68f8      	ldr	r0, [r7, #12]
 800e6b8:	f7fe fd9a 	bl	800d1f0 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800e6bc:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	603b      	str	r3, [r7, #0]
        break;
 800e6c4:	e018      	b.n	800e6f8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800e6c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6c8:	1c53      	adds	r3, r2, #1
 800e6ca:	647b      	str	r3, [r7, #68]	; 0x44
 800e6cc:	68fe      	ldr	r6, [r7, #12]
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	68b9      	ldr	r1, [r7, #8]
 800e6d2:	2025      	movs	r0, #37	; 0x25
 800e6d4:	47b0      	blx	r6
        format++;
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	3301      	adds	r3, #1
 800e6da:	603b      	str	r3, [r7, #0]
        break;
 800e6dc:	e00c      	b.n	800e6f8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>

      default :
        out(*format, buffer, idx++, maxlen);
 800e6de:	683b      	ldr	r3, [r7, #0]
 800e6e0:	7818      	ldrb	r0, [r3, #0]
 800e6e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6e4:	1c53      	adds	r3, r2, #1
 800e6e6:	647b      	str	r3, [r7, #68]	; 0x44
 800e6e8:	68fe      	ldr	r6, [r7, #12]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	68b9      	ldr	r1, [r7, #8]
 800e6ee:	47b0      	blx	r6
        format++;
 800e6f0:	683b      	ldr	r3, [r7, #0]
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	603b      	str	r3, [r7, #0]
        break;
 800e6f6:	bf00      	nop
  while (*format)
 800e6f8:	f7ff bb4d 	b.w	800dd96 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800e6fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	429a      	cmp	r2, r3
 800e702:	d302      	bcc.n	800e70a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x992>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	1e5a      	subs	r2, r3, #1
 800e708:	e000      	b.n	800e70c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x994>
 800e70a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e70c:	68fc      	ldr	r4, [r7, #12]
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	68b9      	ldr	r1, [r7, #8]
 800e712:	2000      	movs	r0, #0
 800e714:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800e716:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800e718:	4618      	mov	r0, r3
 800e71a:	375c      	adds	r7, #92	; 0x5c
 800e71c:	46bd      	mov	sp, r7
 800e71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e722:	bf00      	nop

0800e724 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 800e724:	b40f      	push	{r0, r1, r2, r3}
 800e726:	b580      	push	{r7, lr}
 800e728:	b086      	sub	sp, #24
 800e72a:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 800e72c:	f107 031c 	add.w	r3, r7, #28
 800e730:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800e732:	1d39      	adds	r1, r7, #4
 800e734:	68bb      	ldr	r3, [r7, #8]
 800e736:	9300      	str	r3, [sp, #0]
 800e738:	69bb      	ldr	r3, [r7, #24]
 800e73a:	f04f 32ff 	mov.w	r2, #4294967295
 800e73e:	4806      	ldr	r0, [pc, #24]	; (800e758 <printf_+0x34>)
 800e740:	f7ff fb1a 	bl	800dd78 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>
 800e744:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800e746:	68fb      	ldr	r3, [r7, #12]
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3710      	adds	r7, #16
 800e74c:	46bd      	mov	sp, r7
 800e74e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e752:	b004      	add	sp, #16
 800e754:	4770      	bx	lr
 800e756:	bf00      	nop
 800e758:	0800cebf 	.word	0x0800cebf

0800e75c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800e75c:	b480      	push	{r7}
 800e75e:	b083      	sub	sp, #12
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800e764:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800e768:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800e76c:	f003 0301 	and.w	r3, r3, #1
 800e770:	2b00      	cmp	r3, #0
 800e772:	d009      	beq.n	800e788 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800e774:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800e778:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800e77c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800e780:	2b00      	cmp	r3, #0
 800e782:	d001      	beq.n	800e788 <ITM_SendChar+0x2c>
 800e784:	2301      	movs	r3, #1
 800e786:	e000      	b.n	800e78a <ITM_SendChar+0x2e>
 800e788:	2300      	movs	r3, #0
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d010      	beq.n	800e7b0 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800e78e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	2b00      	cmp	r3, #0
 800e796:	bf0c      	ite	eq
 800e798:	2301      	moveq	r3, #1
 800e79a:	2300      	movne	r3, #0
 800e79c:	b2db      	uxtb	r3, r3
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d001      	beq.n	800e7a6 <ITM_SendChar+0x4a>
    {
      __NOP();
 800e7a2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800e7a4:	e7f3      	b.n	800e78e <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800e7a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800e7aa:	687a      	ldr	r2, [r7, #4]
 800e7ac:	b2d2      	uxtb	r2, r2
 800e7ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800e7b0:	687b      	ldr	r3, [r7, #4]
}
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	370c      	adds	r7, #12
 800e7b6:	46bd      	mov	sp, r7
 800e7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7bc:	4770      	bx	lr

0800e7be <_putchar>:
 */

#include "estdio.hpp"
#include "main.h"

void _putchar(char character) {
 800e7be:	b580      	push	{r7, lr}
 800e7c0:	b082      	sub	sp, #8
 800e7c2:	af00      	add	r7, sp, #0
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(character);
 800e7c8:	79fb      	ldrb	r3, [r7, #7]
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f7ff ffc6 	bl	800e75c <ITM_SendChar>
}
 800e7d0:	bf00      	nop
 800e7d2:	3708      	adds	r7, #8
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	bd80      	pop	{r7, pc}

0800e7d8 <__NVIC_SetPriority>:
{
 800e7d8:	b480      	push	{r7}
 800e7da:	b083      	sub	sp, #12
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	4603      	mov	r3, r0
 800e7e0:	6039      	str	r1, [r7, #0]
 800e7e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e7e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	db0a      	blt.n	800e802 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	b2da      	uxtb	r2, r3
 800e7f0:	490c      	ldr	r1, [pc, #48]	; (800e824 <__NVIC_SetPriority+0x4c>)
 800e7f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7f6:	0112      	lsls	r2, r2, #4
 800e7f8:	b2d2      	uxtb	r2, r2
 800e7fa:	440b      	add	r3, r1
 800e7fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e800:	e00a      	b.n	800e818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	b2da      	uxtb	r2, r3
 800e806:	4908      	ldr	r1, [pc, #32]	; (800e828 <__NVIC_SetPriority+0x50>)
 800e808:	79fb      	ldrb	r3, [r7, #7]
 800e80a:	f003 030f 	and.w	r3, r3, #15
 800e80e:	3b04      	subs	r3, #4
 800e810:	0112      	lsls	r2, r2, #4
 800e812:	b2d2      	uxtb	r2, r2
 800e814:	440b      	add	r3, r1
 800e816:	761a      	strb	r2, [r3, #24]
}
 800e818:	bf00      	nop
 800e81a:	370c      	adds	r7, #12
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr
 800e824:	e000e100 	.word	0xe000e100
 800e828:	e000ed00 	.word	0xe000ed00

0800e82c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e82c:	b580      	push	{r7, lr}
 800e82e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e830:	4b05      	ldr	r3, [pc, #20]	; (800e848 <SysTick_Handler+0x1c>)
 800e832:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e834:	f003 f8a8 	bl	8011988 <xTaskGetSchedulerState>
 800e838:	4603      	mov	r3, r0
 800e83a:	2b01      	cmp	r3, #1
 800e83c:	d001      	beq.n	800e842 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e83e:	f004 f8d3 	bl	80129e8 <xPortSysTickHandler>
  }
}
 800e842:	bf00      	nop
 800e844:	bd80      	pop	{r7, pc}
 800e846:	bf00      	nop
 800e848:	e000e010 	.word	0xe000e010

0800e84c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e84c:	b580      	push	{r7, lr}
 800e84e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e850:	2100      	movs	r1, #0
 800e852:	f06f 0004 	mvn.w	r0, #4
 800e856:	f7ff ffbf 	bl	800e7d8 <__NVIC_SetPriority>
#endif
}
 800e85a:	bf00      	nop
 800e85c:	bd80      	pop	{r7, pc}
	...

0800e860 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e860:	b480      	push	{r7}
 800e862:	b083      	sub	sp, #12
 800e864:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e866:	f3ef 8305 	mrs	r3, IPSR
 800e86a:	603b      	str	r3, [r7, #0]
  return(result);
 800e86c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d003      	beq.n	800e87a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e872:	f06f 0305 	mvn.w	r3, #5
 800e876:	607b      	str	r3, [r7, #4]
 800e878:	e00c      	b.n	800e894 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e87a:	4b0a      	ldr	r3, [pc, #40]	; (800e8a4 <osKernelInitialize+0x44>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d105      	bne.n	800e88e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e882:	4b08      	ldr	r3, [pc, #32]	; (800e8a4 <osKernelInitialize+0x44>)
 800e884:	2201      	movs	r2, #1
 800e886:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e888:	2300      	movs	r3, #0
 800e88a:	607b      	str	r3, [r7, #4]
 800e88c:	e002      	b.n	800e894 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e88e:	f04f 33ff 	mov.w	r3, #4294967295
 800e892:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e894:	687b      	ldr	r3, [r7, #4]
}
 800e896:	4618      	mov	r0, r3
 800e898:	370c      	adds	r7, #12
 800e89a:	46bd      	mov	sp, r7
 800e89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a0:	4770      	bx	lr
 800e8a2:	bf00      	nop
 800e8a4:	20001584 	.word	0x20001584

0800e8a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b082      	sub	sp, #8
 800e8ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e8ae:	f3ef 8305 	mrs	r3, IPSR
 800e8b2:	603b      	str	r3, [r7, #0]
  return(result);
 800e8b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d003      	beq.n	800e8c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800e8ba:	f06f 0305 	mvn.w	r3, #5
 800e8be:	607b      	str	r3, [r7, #4]
 800e8c0:	e010      	b.n	800e8e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e8c2:	4b0b      	ldr	r3, [pc, #44]	; (800e8f0 <osKernelStart+0x48>)
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	2b01      	cmp	r3, #1
 800e8c8:	d109      	bne.n	800e8de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e8ca:	f7ff ffbf 	bl	800e84c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e8ce:	4b08      	ldr	r3, [pc, #32]	; (800e8f0 <osKernelStart+0x48>)
 800e8d0:	2202      	movs	r2, #2
 800e8d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e8d4:	f002 fb98 	bl	8011008 <vTaskStartScheduler>
      stat = osOK;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	607b      	str	r3, [r7, #4]
 800e8dc:	e002      	b.n	800e8e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e8de:	f04f 33ff 	mov.w	r3, #4294967295
 800e8e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e8e4:	687b      	ldr	r3, [r7, #4]
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	3708      	adds	r7, #8
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
 800e8ee:	bf00      	nop
 800e8f0:	20001584 	.word	0x20001584

0800e8f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e8f4:	b580      	push	{r7, lr}
 800e8f6:	b08e      	sub	sp, #56	; 0x38
 800e8f8:	af04      	add	r7, sp, #16
 800e8fa:	60f8      	str	r0, [r7, #12]
 800e8fc:	60b9      	str	r1, [r7, #8]
 800e8fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e900:	2300      	movs	r3, #0
 800e902:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e904:	f3ef 8305 	mrs	r3, IPSR
 800e908:	617b      	str	r3, [r7, #20]
  return(result);
 800e90a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d17e      	bne.n	800ea0e <osThreadNew+0x11a>
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d07b      	beq.n	800ea0e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e916:	2380      	movs	r3, #128	; 0x80
 800e918:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e91a:	2318      	movs	r3, #24
 800e91c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e91e:	2300      	movs	r3, #0
 800e920:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e922:	f04f 33ff 	mov.w	r3, #4294967295
 800e926:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d045      	beq.n	800e9ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d002      	beq.n	800e93c <osThreadNew+0x48>
        name = attr->name;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	699b      	ldr	r3, [r3, #24]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d002      	beq.n	800e94a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	699b      	ldr	r3, [r3, #24]
 800e948:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e94a:	69fb      	ldr	r3, [r7, #28]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d008      	beq.n	800e962 <osThreadNew+0x6e>
 800e950:	69fb      	ldr	r3, [r7, #28]
 800e952:	2b38      	cmp	r3, #56	; 0x38
 800e954:	d805      	bhi.n	800e962 <osThreadNew+0x6e>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	685b      	ldr	r3, [r3, #4]
 800e95a:	f003 0301 	and.w	r3, r3, #1
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d001      	beq.n	800e966 <osThreadNew+0x72>
        return (NULL);
 800e962:	2300      	movs	r3, #0
 800e964:	e054      	b.n	800ea10 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	695b      	ldr	r3, [r3, #20]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d003      	beq.n	800e976 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	695b      	ldr	r3, [r3, #20]
 800e972:	089b      	lsrs	r3, r3, #2
 800e974:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	689b      	ldr	r3, [r3, #8]
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d00e      	beq.n	800e99c <osThreadNew+0xa8>
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	68db      	ldr	r3, [r3, #12]
 800e982:	2bbf      	cmp	r3, #191	; 0xbf
 800e984:	d90a      	bls.n	800e99c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d006      	beq.n	800e99c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	695b      	ldr	r3, [r3, #20]
 800e992:	2b00      	cmp	r3, #0
 800e994:	d002      	beq.n	800e99c <osThreadNew+0xa8>
        mem = 1;
 800e996:	2301      	movs	r3, #1
 800e998:	61bb      	str	r3, [r7, #24]
 800e99a:	e010      	b.n	800e9be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	689b      	ldr	r3, [r3, #8]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d10c      	bne.n	800e9be <osThreadNew+0xca>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	68db      	ldr	r3, [r3, #12]
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	d108      	bne.n	800e9be <osThreadNew+0xca>
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	691b      	ldr	r3, [r3, #16]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d104      	bne.n	800e9be <osThreadNew+0xca>
          mem = 0;
 800e9b4:	2300      	movs	r3, #0
 800e9b6:	61bb      	str	r3, [r7, #24]
 800e9b8:	e001      	b.n	800e9be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e9be:	69bb      	ldr	r3, [r7, #24]
 800e9c0:	2b01      	cmp	r3, #1
 800e9c2:	d110      	bne.n	800e9e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e9c8:	687a      	ldr	r2, [r7, #4]
 800e9ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e9cc:	9202      	str	r2, [sp, #8]
 800e9ce:	9301      	str	r3, [sp, #4]
 800e9d0:	69fb      	ldr	r3, [r7, #28]
 800e9d2:	9300      	str	r3, [sp, #0]
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	6a3a      	ldr	r2, [r7, #32]
 800e9d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9da:	68f8      	ldr	r0, [r7, #12]
 800e9dc:	f002 f924 	bl	8010c28 <xTaskCreateStatic>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	613b      	str	r3, [r7, #16]
 800e9e4:	e013      	b.n	800ea0e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e9e6:	69bb      	ldr	r3, [r7, #24]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d110      	bne.n	800ea0e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e9ec:	6a3b      	ldr	r3, [r7, #32]
 800e9ee:	b29a      	uxth	r2, r3
 800e9f0:	f107 0310 	add.w	r3, r7, #16
 800e9f4:	9301      	str	r3, [sp, #4]
 800e9f6:	69fb      	ldr	r3, [r7, #28]
 800e9f8:	9300      	str	r3, [sp, #0]
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e9fe:	68f8      	ldr	r0, [r7, #12]
 800ea00:	f002 f96f 	bl	8010ce2 <xTaskCreate>
 800ea04:	4603      	mov	r3, r0
 800ea06:	2b01      	cmp	r3, #1
 800ea08:	d001      	beq.n	800ea0e <osThreadNew+0x11a>
            hTask = NULL;
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ea0e:	693b      	ldr	r3, [r7, #16]
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3728      	adds	r7, #40	; 0x28
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b084      	sub	sp, #16
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea20:	f3ef 8305 	mrs	r3, IPSR
 800ea24:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea26:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d003      	beq.n	800ea34 <osDelay+0x1c>
    stat = osErrorISR;
 800ea2c:	f06f 0305 	mvn.w	r3, #5
 800ea30:	60fb      	str	r3, [r7, #12]
 800ea32:	e007      	b.n	800ea44 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800ea34:	2300      	movs	r3, #0
 800ea36:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d002      	beq.n	800ea44 <osDelay+0x2c>
      vTaskDelay(ticks);
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f002 faae 	bl	8010fa0 <vTaskDelay>
    }
  }

  return (stat);
 800ea44:	68fb      	ldr	r3, [r7, #12]
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3710      	adds	r7, #16
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}

0800ea4e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b088      	sub	sp, #32
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800ea56:	2300      	movs	r3, #0
 800ea58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ea5a:	f3ef 8305 	mrs	r3, IPSR
 800ea5e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ea60:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d174      	bne.n	800eb50 <osMutexNew+0x102>
    if (attr != NULL) {
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d003      	beq.n	800ea74 <osMutexNew+0x26>
      type = attr->attr_bits;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	685b      	ldr	r3, [r3, #4]
 800ea70:	61bb      	str	r3, [r7, #24]
 800ea72:	e001      	b.n	800ea78 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800ea74:	2300      	movs	r3, #0
 800ea76:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800ea78:	69bb      	ldr	r3, [r7, #24]
 800ea7a:	f003 0301 	and.w	r3, r3, #1
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d002      	beq.n	800ea88 <osMutexNew+0x3a>
      rmtx = 1U;
 800ea82:	2301      	movs	r3, #1
 800ea84:	617b      	str	r3, [r7, #20]
 800ea86:	e001      	b.n	800ea8c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800ea8c:	69bb      	ldr	r3, [r7, #24]
 800ea8e:	f003 0308 	and.w	r3, r3, #8
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d15c      	bne.n	800eb50 <osMutexNew+0x102>
      mem = -1;
 800ea96:	f04f 33ff 	mov.w	r3, #4294967295
 800ea9a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d015      	beq.n	800eace <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	689b      	ldr	r3, [r3, #8]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d006      	beq.n	800eab8 <osMutexNew+0x6a>
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	68db      	ldr	r3, [r3, #12]
 800eaae:	2b4f      	cmp	r3, #79	; 0x4f
 800eab0:	d902      	bls.n	800eab8 <osMutexNew+0x6a>
          mem = 1;
 800eab2:	2301      	movs	r3, #1
 800eab4:	613b      	str	r3, [r7, #16]
 800eab6:	e00c      	b.n	800ead2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	689b      	ldr	r3, [r3, #8]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d108      	bne.n	800ead2 <osMutexNew+0x84>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	68db      	ldr	r3, [r3, #12]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d104      	bne.n	800ead2 <osMutexNew+0x84>
            mem = 0;
 800eac8:	2300      	movs	r3, #0
 800eaca:	613b      	str	r3, [r7, #16]
 800eacc:	e001      	b.n	800ead2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800eace:	2300      	movs	r3, #0
 800ead0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800ead2:	693b      	ldr	r3, [r7, #16]
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	d112      	bne.n	800eafe <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d007      	beq.n	800eaee <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	689b      	ldr	r3, [r3, #8]
 800eae2:	4619      	mov	r1, r3
 800eae4:	2004      	movs	r0, #4
 800eae6:	f000 fd88 	bl	800f5fa <xQueueCreateMutexStatic>
 800eaea:	61f8      	str	r0, [r7, #28]
 800eaec:	e016      	b.n	800eb1c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	689b      	ldr	r3, [r3, #8]
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	2001      	movs	r0, #1
 800eaf6:	f000 fd80 	bl	800f5fa <xQueueCreateMutexStatic>
 800eafa:	61f8      	str	r0, [r7, #28]
 800eafc:	e00e      	b.n	800eb1c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800eafe:	693b      	ldr	r3, [r7, #16]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d10b      	bne.n	800eb1c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800eb04:	697b      	ldr	r3, [r7, #20]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d004      	beq.n	800eb14 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800eb0a:	2004      	movs	r0, #4
 800eb0c:	f000 fd5d 	bl	800f5ca <xQueueCreateMutex>
 800eb10:	61f8      	str	r0, [r7, #28]
 800eb12:	e003      	b.n	800eb1c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800eb14:	2001      	movs	r0, #1
 800eb16:	f000 fd58 	bl	800f5ca <xQueueCreateMutex>
 800eb1a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800eb1c:	69fb      	ldr	r3, [r7, #28]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d00c      	beq.n	800eb3c <osMutexNew+0xee>
        if (attr != NULL) {
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d003      	beq.n	800eb30 <osMutexNew+0xe2>
          name = attr->name;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	60fb      	str	r3, [r7, #12]
 800eb2e:	e001      	b.n	800eb34 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800eb30:	2300      	movs	r3, #0
 800eb32:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800eb34:	68f9      	ldr	r1, [r7, #12]
 800eb36:	69f8      	ldr	r0, [r7, #28]
 800eb38:	f001 fc68 	bl	801040c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800eb3c:	69fb      	ldr	r3, [r7, #28]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d006      	beq.n	800eb50 <osMutexNew+0x102>
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d003      	beq.n	800eb50 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800eb48:	69fb      	ldr	r3, [r7, #28]
 800eb4a:	f043 0301 	orr.w	r3, r3, #1
 800eb4e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800eb50:	69fb      	ldr	r3, [r7, #28]
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3720      	adds	r7, #32
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}

0800eb5a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800eb5a:	b580      	push	{r7, lr}
 800eb5c:	b086      	sub	sp, #24
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	6078      	str	r0, [r7, #4]
 800eb62:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f023 0301 	bic.w	r3, r3, #1
 800eb6a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	f003 0301 	and.w	r3, r3, #1
 800eb72:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800eb74:	2300      	movs	r3, #0
 800eb76:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eb78:	f3ef 8305 	mrs	r3, IPSR
 800eb7c:	60bb      	str	r3, [r7, #8]
  return(result);
 800eb7e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d003      	beq.n	800eb8c <osMutexAcquire+0x32>
    stat = osErrorISR;
 800eb84:	f06f 0305 	mvn.w	r3, #5
 800eb88:	617b      	str	r3, [r7, #20]
 800eb8a:	e02c      	b.n	800ebe6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800eb8c:	693b      	ldr	r3, [r7, #16]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d103      	bne.n	800eb9a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800eb92:	f06f 0303 	mvn.w	r3, #3
 800eb96:	617b      	str	r3, [r7, #20]
 800eb98:	e025      	b.n	800ebe6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d011      	beq.n	800ebc4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800eba0:	6839      	ldr	r1, [r7, #0]
 800eba2:	6938      	ldr	r0, [r7, #16]
 800eba4:	f000 fd78 	bl	800f698 <xQueueTakeMutexRecursive>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	2b01      	cmp	r3, #1
 800ebac:	d01b      	beq.n	800ebe6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d003      	beq.n	800ebbc <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800ebb4:	f06f 0301 	mvn.w	r3, #1
 800ebb8:	617b      	str	r3, [r7, #20]
 800ebba:	e014      	b.n	800ebe6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ebbc:	f06f 0302 	mvn.w	r3, #2
 800ebc0:	617b      	str	r3, [r7, #20]
 800ebc2:	e010      	b.n	800ebe6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ebc4:	6839      	ldr	r1, [r7, #0]
 800ebc6:	6938      	ldr	r0, [r7, #16]
 800ebc8:	f001 f90c 	bl	800fde4 <xQueueSemaphoreTake>
 800ebcc:	4603      	mov	r3, r0
 800ebce:	2b01      	cmp	r3, #1
 800ebd0:	d009      	beq.n	800ebe6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d003      	beq.n	800ebe0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800ebd8:	f06f 0301 	mvn.w	r3, #1
 800ebdc:	617b      	str	r3, [r7, #20]
 800ebde:	e002      	b.n	800ebe6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ebe0:	f06f 0302 	mvn.w	r3, #2
 800ebe4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800ebe6:	697b      	ldr	r3, [r7, #20]
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3718      	adds	r7, #24
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}

0800ebf0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b086      	sub	sp, #24
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f023 0301 	bic.w	r3, r3, #1
 800ebfe:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f003 0301 	and.w	r3, r3, #1
 800ec06:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec0c:	f3ef 8305 	mrs	r3, IPSR
 800ec10:	60bb      	str	r3, [r7, #8]
  return(result);
 800ec12:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d003      	beq.n	800ec20 <osMutexRelease+0x30>
    stat = osErrorISR;
 800ec18:	f06f 0305 	mvn.w	r3, #5
 800ec1c:	617b      	str	r3, [r7, #20]
 800ec1e:	e01f      	b.n	800ec60 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800ec20:	693b      	ldr	r3, [r7, #16]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d103      	bne.n	800ec2e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800ec26:	f06f 0303 	mvn.w	r3, #3
 800ec2a:	617b      	str	r3, [r7, #20]
 800ec2c:	e018      	b.n	800ec60 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d009      	beq.n	800ec48 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ec34:	6938      	ldr	r0, [r7, #16]
 800ec36:	f000 fcfb 	bl	800f630 <xQueueGiveMutexRecursive>
 800ec3a:	4603      	mov	r3, r0
 800ec3c:	2b01      	cmp	r3, #1
 800ec3e:	d00f      	beq.n	800ec60 <osMutexRelease+0x70>
        stat = osErrorResource;
 800ec40:	f06f 0302 	mvn.w	r3, #2
 800ec44:	617b      	str	r3, [r7, #20]
 800ec46:	e00b      	b.n	800ec60 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ec48:	2300      	movs	r3, #0
 800ec4a:	2200      	movs	r2, #0
 800ec4c:	2100      	movs	r1, #0
 800ec4e:	6938      	ldr	r0, [r7, #16]
 800ec50:	f000 fdc2 	bl	800f7d8 <xQueueGenericSend>
 800ec54:	4603      	mov	r3, r0
 800ec56:	2b01      	cmp	r3, #1
 800ec58:	d002      	beq.n	800ec60 <osMutexRelease+0x70>
        stat = osErrorResource;
 800ec5a:	f06f 0302 	mvn.w	r3, #2
 800ec5e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ec60:	697b      	ldr	r3, [r7, #20]
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3718      	adds	r7, #24
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}

0800ec6a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ec6a:	b580      	push	{r7, lr}
 800ec6c:	b08a      	sub	sp, #40	; 0x28
 800ec6e:	af02      	add	r7, sp, #8
 800ec70:	60f8      	str	r0, [r7, #12]
 800ec72:	60b9      	str	r1, [r7, #8]
 800ec74:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ec76:	2300      	movs	r3, #0
 800ec78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ec7a:	f3ef 8305 	mrs	r3, IPSR
 800ec7e:	613b      	str	r3, [r7, #16]
  return(result);
 800ec80:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d175      	bne.n	800ed72 <osSemaphoreNew+0x108>
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d072      	beq.n	800ed72 <osSemaphoreNew+0x108>
 800ec8c:	68ba      	ldr	r2, [r7, #8]
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d86e      	bhi.n	800ed72 <osSemaphoreNew+0x108>
    mem = -1;
 800ec94:	f04f 33ff 	mov.w	r3, #4294967295
 800ec98:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d015      	beq.n	800eccc <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	689b      	ldr	r3, [r3, #8]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d006      	beq.n	800ecb6 <osSemaphoreNew+0x4c>
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	68db      	ldr	r3, [r3, #12]
 800ecac:	2b4f      	cmp	r3, #79	; 0x4f
 800ecae:	d902      	bls.n	800ecb6 <osSemaphoreNew+0x4c>
        mem = 1;
 800ecb0:	2301      	movs	r3, #1
 800ecb2:	61bb      	str	r3, [r7, #24]
 800ecb4:	e00c      	b.n	800ecd0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	689b      	ldr	r3, [r3, #8]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d108      	bne.n	800ecd0 <osSemaphoreNew+0x66>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	68db      	ldr	r3, [r3, #12]
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d104      	bne.n	800ecd0 <osSemaphoreNew+0x66>
          mem = 0;
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	61bb      	str	r3, [r7, #24]
 800ecca:	e001      	b.n	800ecd0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800eccc:	2300      	movs	r3, #0
 800ecce:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800ecd0:	69bb      	ldr	r3, [r7, #24]
 800ecd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecd6:	d04c      	beq.n	800ed72 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800ecd8:	68fb      	ldr	r3, [r7, #12]
 800ecda:	2b01      	cmp	r3, #1
 800ecdc:	d128      	bne.n	800ed30 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800ecde:	69bb      	ldr	r3, [r7, #24]
 800ece0:	2b01      	cmp	r3, #1
 800ece2:	d10a      	bne.n	800ecfa <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	689b      	ldr	r3, [r3, #8]
 800ece8:	2203      	movs	r2, #3
 800ecea:	9200      	str	r2, [sp, #0]
 800ecec:	2200      	movs	r2, #0
 800ecee:	2100      	movs	r1, #0
 800ecf0:	2001      	movs	r0, #1
 800ecf2:	f000 fb7b 	bl	800f3ec <xQueueGenericCreateStatic>
 800ecf6:	61f8      	str	r0, [r7, #28]
 800ecf8:	e005      	b.n	800ed06 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800ecfa:	2203      	movs	r2, #3
 800ecfc:	2100      	movs	r1, #0
 800ecfe:	2001      	movs	r0, #1
 800ed00:	f000 fbec 	bl	800f4dc <xQueueGenericCreate>
 800ed04:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ed06:	69fb      	ldr	r3, [r7, #28]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d022      	beq.n	800ed52 <osSemaphoreNew+0xe8>
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d01f      	beq.n	800ed52 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ed12:	2300      	movs	r3, #0
 800ed14:	2200      	movs	r2, #0
 800ed16:	2100      	movs	r1, #0
 800ed18:	69f8      	ldr	r0, [r7, #28]
 800ed1a:	f000 fd5d 	bl	800f7d8 <xQueueGenericSend>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b01      	cmp	r3, #1
 800ed22:	d016      	beq.n	800ed52 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800ed24:	69f8      	ldr	r0, [r7, #28]
 800ed26:	f001 fa25 	bl	8010174 <vQueueDelete>
            hSemaphore = NULL;
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	61fb      	str	r3, [r7, #28]
 800ed2e:	e010      	b.n	800ed52 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800ed30:	69bb      	ldr	r3, [r7, #24]
 800ed32:	2b01      	cmp	r3, #1
 800ed34:	d108      	bne.n	800ed48 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	689b      	ldr	r3, [r3, #8]
 800ed3a:	461a      	mov	r2, r3
 800ed3c:	68b9      	ldr	r1, [r7, #8]
 800ed3e:	68f8      	ldr	r0, [r7, #12]
 800ed40:	f000 fce0 	bl	800f704 <xQueueCreateCountingSemaphoreStatic>
 800ed44:	61f8      	str	r0, [r7, #28]
 800ed46:	e004      	b.n	800ed52 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800ed48:	68b9      	ldr	r1, [r7, #8]
 800ed4a:	68f8      	ldr	r0, [r7, #12]
 800ed4c:	f000 fd11 	bl	800f772 <xQueueCreateCountingSemaphore>
 800ed50:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800ed52:	69fb      	ldr	r3, [r7, #28]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d00c      	beq.n	800ed72 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d003      	beq.n	800ed66 <osSemaphoreNew+0xfc>
          name = attr->name;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	617b      	str	r3, [r7, #20]
 800ed64:	e001      	b.n	800ed6a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800ed66:	2300      	movs	r3, #0
 800ed68:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800ed6a:	6979      	ldr	r1, [r7, #20]
 800ed6c:	69f8      	ldr	r0, [r7, #28]
 800ed6e:	f001 fb4d 	bl	801040c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800ed72:	69fb      	ldr	r3, [r7, #28]
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3720      	adds	r7, #32
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b086      	sub	sp, #24
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	6078      	str	r0, [r7, #4]
 800ed84:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ed8e:	693b      	ldr	r3, [r7, #16]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d103      	bne.n	800ed9c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800ed94:	f06f 0303 	mvn.w	r3, #3
 800ed98:	617b      	str	r3, [r7, #20]
 800ed9a:	e039      	b.n	800ee10 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ed9c:	f3ef 8305 	mrs	r3, IPSR
 800eda0:	60fb      	str	r3, [r7, #12]
  return(result);
 800eda2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d022      	beq.n	800edee <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800eda8:	683b      	ldr	r3, [r7, #0]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d003      	beq.n	800edb6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800edae:	f06f 0303 	mvn.w	r3, #3
 800edb2:	617b      	str	r3, [r7, #20]
 800edb4:	e02c      	b.n	800ee10 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800edb6:	2300      	movs	r3, #0
 800edb8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800edba:	f107 0308 	add.w	r3, r7, #8
 800edbe:	461a      	mov	r2, r3
 800edc0:	2100      	movs	r1, #0
 800edc2:	6938      	ldr	r0, [r7, #16]
 800edc4:	f001 f91a 	bl	800fffc <xQueueReceiveFromISR>
 800edc8:	4603      	mov	r3, r0
 800edca:	2b01      	cmp	r3, #1
 800edcc:	d003      	beq.n	800edd6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800edce:	f06f 0302 	mvn.w	r3, #2
 800edd2:	617b      	str	r3, [r7, #20]
 800edd4:	e01c      	b.n	800ee10 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800edd6:	68bb      	ldr	r3, [r7, #8]
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d019      	beq.n	800ee10 <osSemaphoreAcquire+0x94>
 800eddc:	4b0f      	ldr	r3, [pc, #60]	; (800ee1c <osSemaphoreAcquire+0xa0>)
 800edde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ede2:	601a      	str	r2, [r3, #0]
 800ede4:	f3bf 8f4f 	dsb	sy
 800ede8:	f3bf 8f6f 	isb	sy
 800edec:	e010      	b.n	800ee10 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800edee:	6839      	ldr	r1, [r7, #0]
 800edf0:	6938      	ldr	r0, [r7, #16]
 800edf2:	f000 fff7 	bl	800fde4 <xQueueSemaphoreTake>
 800edf6:	4603      	mov	r3, r0
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	d009      	beq.n	800ee10 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d003      	beq.n	800ee0a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800ee02:	f06f 0301 	mvn.w	r3, #1
 800ee06:	617b      	str	r3, [r7, #20]
 800ee08:	e002      	b.n	800ee10 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800ee0a:	f06f 0302 	mvn.w	r3, #2
 800ee0e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ee10:	697b      	ldr	r3, [r7, #20]
}
 800ee12:	4618      	mov	r0, r3
 800ee14:	3718      	adds	r7, #24
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}
 800ee1a:	bf00      	nop
 800ee1c:	e000ed04 	.word	0xe000ed04

0800ee20 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b086      	sub	sp, #24
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ee30:	693b      	ldr	r3, [r7, #16]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d103      	bne.n	800ee3e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ee36:	f06f 0303 	mvn.w	r3, #3
 800ee3a:	617b      	str	r3, [r7, #20]
 800ee3c:	e02c      	b.n	800ee98 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ee3e:	f3ef 8305 	mrs	r3, IPSR
 800ee42:	60fb      	str	r3, [r7, #12]
  return(result);
 800ee44:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d01a      	beq.n	800ee80 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ee4e:	f107 0308 	add.w	r3, r7, #8
 800ee52:	4619      	mov	r1, r3
 800ee54:	6938      	ldr	r0, [r7, #16]
 800ee56:	f000 fe58 	bl	800fb0a <xQueueGiveFromISR>
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	2b01      	cmp	r3, #1
 800ee5e:	d003      	beq.n	800ee68 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800ee60:	f06f 0302 	mvn.w	r3, #2
 800ee64:	617b      	str	r3, [r7, #20]
 800ee66:	e017      	b.n	800ee98 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800ee68:	68bb      	ldr	r3, [r7, #8]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d014      	beq.n	800ee98 <osSemaphoreRelease+0x78>
 800ee6e:	4b0d      	ldr	r3, [pc, #52]	; (800eea4 <osSemaphoreRelease+0x84>)
 800ee70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee74:	601a      	str	r2, [r3, #0]
 800ee76:	f3bf 8f4f 	dsb	sy
 800ee7a:	f3bf 8f6f 	isb	sy
 800ee7e:	e00b      	b.n	800ee98 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ee80:	2300      	movs	r3, #0
 800ee82:	2200      	movs	r2, #0
 800ee84:	2100      	movs	r1, #0
 800ee86:	6938      	ldr	r0, [r7, #16]
 800ee88:	f000 fca6 	bl	800f7d8 <xQueueGenericSend>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	2b01      	cmp	r3, #1
 800ee90:	d002      	beq.n	800ee98 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800ee92:	f06f 0302 	mvn.w	r3, #2
 800ee96:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ee98:	697b      	ldr	r3, [r7, #20]
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3718      	adds	r7, #24
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	e000ed04 	.word	0xe000ed04

0800eea8 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	b086      	sub	sp, #24
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 800eeb4:	693b      	ldr	r3, [r7, #16]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d102      	bne.n	800eec0 <osSemaphoreGetCount+0x18>
    count = 0U;
 800eeba:	2300      	movs	r3, #0
 800eebc:	617b      	str	r3, [r7, #20]
 800eebe:	e00e      	b.n	800eede <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eec0:	f3ef 8305 	mrs	r3, IPSR
 800eec4:	60fb      	str	r3, [r7, #12]
  return(result);
 800eec6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d004      	beq.n	800eed6 <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 800eecc:	6938      	ldr	r0, [r7, #16]
 800eece:	f001 f933 	bl	8010138 <uxQueueMessagesWaitingFromISR>
 800eed2:	6178      	str	r0, [r7, #20]
 800eed4:	e003      	b.n	800eede <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800eed6:	6938      	ldr	r0, [r7, #16]
 800eed8:	f001 f910 	bl	80100fc <uxQueueMessagesWaiting>
 800eedc:	6178      	str	r0, [r7, #20]
  }

  return (count);
 800eede:	697b      	ldr	r3, [r7, #20]
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3718      	adds	r7, #24
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}

0800eee8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b08a      	sub	sp, #40	; 0x28
 800eeec:	af02      	add	r7, sp, #8
 800eeee:	60f8      	str	r0, [r7, #12]
 800eef0:	60b9      	str	r1, [r7, #8]
 800eef2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800eef4:	2300      	movs	r3, #0
 800eef6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800eef8:	f3ef 8305 	mrs	r3, IPSR
 800eefc:	613b      	str	r3, [r7, #16]
  return(result);
 800eefe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d15f      	bne.n	800efc4 <osMessageQueueNew+0xdc>
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d05c      	beq.n	800efc4 <osMessageQueueNew+0xdc>
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d059      	beq.n	800efc4 <osMessageQueueNew+0xdc>
    mem = -1;
 800ef10:	f04f 33ff 	mov.w	r3, #4294967295
 800ef14:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d029      	beq.n	800ef70 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	689b      	ldr	r3, [r3, #8]
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d012      	beq.n	800ef4a <osMessageQueueNew+0x62>
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	2b4f      	cmp	r3, #79	; 0x4f
 800ef2a:	d90e      	bls.n	800ef4a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d00a      	beq.n	800ef4a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	695a      	ldr	r2, [r3, #20]
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	68b9      	ldr	r1, [r7, #8]
 800ef3c:	fb01 f303 	mul.w	r3, r1, r3
 800ef40:	429a      	cmp	r2, r3
 800ef42:	d302      	bcc.n	800ef4a <osMessageQueueNew+0x62>
        mem = 1;
 800ef44:	2301      	movs	r3, #1
 800ef46:	61bb      	str	r3, [r7, #24]
 800ef48:	e014      	b.n	800ef74 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	689b      	ldr	r3, [r3, #8]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d110      	bne.n	800ef74 <osMessageQueueNew+0x8c>
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	68db      	ldr	r3, [r3, #12]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d10c      	bne.n	800ef74 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d108      	bne.n	800ef74 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	695b      	ldr	r3, [r3, #20]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d104      	bne.n	800ef74 <osMessageQueueNew+0x8c>
          mem = 0;
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	61bb      	str	r3, [r7, #24]
 800ef6e:	e001      	b.n	800ef74 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ef70:	2300      	movs	r3, #0
 800ef72:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ef74:	69bb      	ldr	r3, [r7, #24]
 800ef76:	2b01      	cmp	r3, #1
 800ef78:	d10b      	bne.n	800ef92 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	691a      	ldr	r2, [r3, #16]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	689b      	ldr	r3, [r3, #8]
 800ef82:	2100      	movs	r1, #0
 800ef84:	9100      	str	r1, [sp, #0]
 800ef86:	68b9      	ldr	r1, [r7, #8]
 800ef88:	68f8      	ldr	r0, [r7, #12]
 800ef8a:	f000 fa2f 	bl	800f3ec <xQueueGenericCreateStatic>
 800ef8e:	61f8      	str	r0, [r7, #28]
 800ef90:	e008      	b.n	800efa4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ef92:	69bb      	ldr	r3, [r7, #24]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d105      	bne.n	800efa4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ef98:	2200      	movs	r2, #0
 800ef9a:	68b9      	ldr	r1, [r7, #8]
 800ef9c:	68f8      	ldr	r0, [r7, #12]
 800ef9e:	f000 fa9d 	bl	800f4dc <xQueueGenericCreate>
 800efa2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800efa4:	69fb      	ldr	r3, [r7, #28]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d00c      	beq.n	800efc4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d003      	beq.n	800efb8 <osMessageQueueNew+0xd0>
        name = attr->name;
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	617b      	str	r3, [r7, #20]
 800efb6:	e001      	b.n	800efbc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800efb8:	2300      	movs	r3, #0
 800efba:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800efbc:	6979      	ldr	r1, [r7, #20]
 800efbe:	69f8      	ldr	r0, [r7, #28]
 800efc0:	f001 fa24 	bl	801040c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800efc4:	69fb      	ldr	r3, [r7, #28]
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	3720      	adds	r7, #32
 800efca:	46bd      	mov	sp, r7
 800efcc:	bd80      	pop	{r7, pc}
	...

0800efd0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b088      	sub	sp, #32
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	60f8      	str	r0, [r7, #12]
 800efd8:	60b9      	str	r1, [r7, #8]
 800efda:	603b      	str	r3, [r7, #0]
 800efdc:	4613      	mov	r3, r2
 800efde:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800efe4:	2300      	movs	r3, #0
 800efe6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800efe8:	f3ef 8305 	mrs	r3, IPSR
 800efec:	617b      	str	r3, [r7, #20]
  return(result);
 800efee:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d028      	beq.n	800f046 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800eff4:	69bb      	ldr	r3, [r7, #24]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d005      	beq.n	800f006 <osMessageQueuePut+0x36>
 800effa:	68bb      	ldr	r3, [r7, #8]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d002      	beq.n	800f006 <osMessageQueuePut+0x36>
 800f000:	683b      	ldr	r3, [r7, #0]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d003      	beq.n	800f00e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f006:	f06f 0303 	mvn.w	r3, #3
 800f00a:	61fb      	str	r3, [r7, #28]
 800f00c:	e038      	b.n	800f080 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800f00e:	2300      	movs	r3, #0
 800f010:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f012:	f107 0210 	add.w	r2, r7, #16
 800f016:	2300      	movs	r3, #0
 800f018:	68b9      	ldr	r1, [r7, #8]
 800f01a:	69b8      	ldr	r0, [r7, #24]
 800f01c:	f000 fcda 	bl	800f9d4 <xQueueGenericSendFromISR>
 800f020:	4603      	mov	r3, r0
 800f022:	2b01      	cmp	r3, #1
 800f024:	d003      	beq.n	800f02e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800f026:	f06f 0302 	mvn.w	r3, #2
 800f02a:	61fb      	str	r3, [r7, #28]
 800f02c:	e028      	b.n	800f080 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800f02e:	693b      	ldr	r3, [r7, #16]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d025      	beq.n	800f080 <osMessageQueuePut+0xb0>
 800f034:	4b15      	ldr	r3, [pc, #84]	; (800f08c <osMessageQueuePut+0xbc>)
 800f036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f03a:	601a      	str	r2, [r3, #0]
 800f03c:	f3bf 8f4f 	dsb	sy
 800f040:	f3bf 8f6f 	isb	sy
 800f044:	e01c      	b.n	800f080 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f046:	69bb      	ldr	r3, [r7, #24]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d002      	beq.n	800f052 <osMessageQueuePut+0x82>
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	2b00      	cmp	r3, #0
 800f050:	d103      	bne.n	800f05a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800f052:	f06f 0303 	mvn.w	r3, #3
 800f056:	61fb      	str	r3, [r7, #28]
 800f058:	e012      	b.n	800f080 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f05a:	2300      	movs	r3, #0
 800f05c:	683a      	ldr	r2, [r7, #0]
 800f05e:	68b9      	ldr	r1, [r7, #8]
 800f060:	69b8      	ldr	r0, [r7, #24]
 800f062:	f000 fbb9 	bl	800f7d8 <xQueueGenericSend>
 800f066:	4603      	mov	r3, r0
 800f068:	2b01      	cmp	r3, #1
 800f06a:	d009      	beq.n	800f080 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d003      	beq.n	800f07a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800f072:	f06f 0301 	mvn.w	r3, #1
 800f076:	61fb      	str	r3, [r7, #28]
 800f078:	e002      	b.n	800f080 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800f07a:	f06f 0302 	mvn.w	r3, #2
 800f07e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f080:	69fb      	ldr	r3, [r7, #28]
}
 800f082:	4618      	mov	r0, r3
 800f084:	3720      	adds	r7, #32
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}
 800f08a:	bf00      	nop
 800f08c:	e000ed04 	.word	0xe000ed04

0800f090 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f090:	b580      	push	{r7, lr}
 800f092:	b088      	sub	sp, #32
 800f094:	af00      	add	r7, sp, #0
 800f096:	60f8      	str	r0, [r7, #12]
 800f098:	60b9      	str	r1, [r7, #8]
 800f09a:	607a      	str	r2, [r7, #4]
 800f09c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f0a6:	f3ef 8305 	mrs	r3, IPSR
 800f0aa:	617b      	str	r3, [r7, #20]
  return(result);
 800f0ac:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d028      	beq.n	800f104 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f0b2:	69bb      	ldr	r3, [r7, #24]
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d005      	beq.n	800f0c4 <osMessageQueueGet+0x34>
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d002      	beq.n	800f0c4 <osMessageQueueGet+0x34>
 800f0be:	683b      	ldr	r3, [r7, #0]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d003      	beq.n	800f0cc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800f0c4:	f06f 0303 	mvn.w	r3, #3
 800f0c8:	61fb      	str	r3, [r7, #28]
 800f0ca:	e037      	b.n	800f13c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f0d0:	f107 0310 	add.w	r3, r7, #16
 800f0d4:	461a      	mov	r2, r3
 800f0d6:	68b9      	ldr	r1, [r7, #8]
 800f0d8:	69b8      	ldr	r0, [r7, #24]
 800f0da:	f000 ff8f 	bl	800fffc <xQueueReceiveFromISR>
 800f0de:	4603      	mov	r3, r0
 800f0e0:	2b01      	cmp	r3, #1
 800f0e2:	d003      	beq.n	800f0ec <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800f0e4:	f06f 0302 	mvn.w	r3, #2
 800f0e8:	61fb      	str	r3, [r7, #28]
 800f0ea:	e027      	b.n	800f13c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800f0ec:	693b      	ldr	r3, [r7, #16]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d024      	beq.n	800f13c <osMessageQueueGet+0xac>
 800f0f2:	4b15      	ldr	r3, [pc, #84]	; (800f148 <osMessageQueueGet+0xb8>)
 800f0f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0f8:	601a      	str	r2, [r3, #0]
 800f0fa:	f3bf 8f4f 	dsb	sy
 800f0fe:	f3bf 8f6f 	isb	sy
 800f102:	e01b      	b.n	800f13c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f104:	69bb      	ldr	r3, [r7, #24]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d002      	beq.n	800f110 <osMessageQueueGet+0x80>
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d103      	bne.n	800f118 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800f110:	f06f 0303 	mvn.w	r3, #3
 800f114:	61fb      	str	r3, [r7, #28]
 800f116:	e011      	b.n	800f13c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f118:	683a      	ldr	r2, [r7, #0]
 800f11a:	68b9      	ldr	r1, [r7, #8]
 800f11c:	69b8      	ldr	r0, [r7, #24]
 800f11e:	f000 fd81 	bl	800fc24 <xQueueReceive>
 800f122:	4603      	mov	r3, r0
 800f124:	2b01      	cmp	r3, #1
 800f126:	d009      	beq.n	800f13c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800f128:	683b      	ldr	r3, [r7, #0]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d003      	beq.n	800f136 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800f12e:	f06f 0301 	mvn.w	r3, #1
 800f132:	61fb      	str	r3, [r7, #28]
 800f134:	e002      	b.n	800f13c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800f136:	f06f 0302 	mvn.w	r3, #2
 800f13a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f13c:	69fb      	ldr	r3, [r7, #28]
}
 800f13e:	4618      	mov	r0, r3
 800f140:	3720      	adds	r7, #32
 800f142:	46bd      	mov	sp, r7
 800f144:	bd80      	pop	{r7, pc}
 800f146:	bf00      	nop
 800f148:	e000ed04 	.word	0xe000ed04

0800f14c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800f14c:	b480      	push	{r7}
 800f14e:	b085      	sub	sp, #20
 800f150:	af00      	add	r7, sp, #0
 800f152:	60f8      	str	r0, [r7, #12]
 800f154:	60b9      	str	r1, [r7, #8]
 800f156:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	4a07      	ldr	r2, [pc, #28]	; (800f178 <vApplicationGetIdleTaskMemory+0x2c>)
 800f15c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	4a06      	ldr	r2, [pc, #24]	; (800f17c <vApplicationGetIdleTaskMemory+0x30>)
 800f162:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	2280      	movs	r2, #128	; 0x80
 800f168:	601a      	str	r2, [r3, #0]
}
 800f16a:	bf00      	nop
 800f16c:	3714      	adds	r7, #20
 800f16e:	46bd      	mov	sp, r7
 800f170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f174:	4770      	bx	lr
 800f176:	bf00      	nop
 800f178:	20001588 	.word	0x20001588
 800f17c:	20001648 	.word	0x20001648

0800f180 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800f180:	b480      	push	{r7}
 800f182:	b085      	sub	sp, #20
 800f184:	af00      	add	r7, sp, #0
 800f186:	60f8      	str	r0, [r7, #12]
 800f188:	60b9      	str	r1, [r7, #8]
 800f18a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	4a07      	ldr	r2, [pc, #28]	; (800f1ac <vApplicationGetTimerTaskMemory+0x2c>)
 800f190:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	4a06      	ldr	r2, [pc, #24]	; (800f1b0 <vApplicationGetTimerTaskMemory+0x30>)
 800f196:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f19e:	601a      	str	r2, [r3, #0]
}
 800f1a0:	bf00      	nop
 800f1a2:	3714      	adds	r7, #20
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr
 800f1ac:	20001848 	.word	0x20001848
 800f1b0:	20001908 	.word	0x20001908

0800f1b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f1b4:	b480      	push	{r7}
 800f1b6:	b083      	sub	sp, #12
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f103 0208 	add.w	r2, r3, #8
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	f04f 32ff 	mov.w	r2, #4294967295
 800f1cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f103 0208 	add.w	r2, r3, #8
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f103 0208 	add.w	r2, r3, #8
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f1e8:	bf00      	nop
 800f1ea:	370c      	adds	r7, #12
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f2:	4770      	bx	lr

0800f1f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f1f4:	b480      	push	{r7}
 800f1f6:	b083      	sub	sp, #12
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2200      	movs	r2, #0
 800f200:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f202:	bf00      	nop
 800f204:	370c      	adds	r7, #12
 800f206:	46bd      	mov	sp, r7
 800f208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20c:	4770      	bx	lr

0800f20e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f20e:	b480      	push	{r7}
 800f210:	b085      	sub	sp, #20
 800f212:	af00      	add	r7, sp, #0
 800f214:	6078      	str	r0, [r7, #4]
 800f216:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	685b      	ldr	r3, [r3, #4]
 800f21c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f21e:	683b      	ldr	r3, [r7, #0]
 800f220:	68fa      	ldr	r2, [r7, #12]
 800f222:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	689a      	ldr	r2, [r3, #8]
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	689b      	ldr	r3, [r3, #8]
 800f230:	683a      	ldr	r2, [r7, #0]
 800f232:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	683a      	ldr	r2, [r7, #0]
 800f238:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	687a      	ldr	r2, [r7, #4]
 800f23e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	1c5a      	adds	r2, r3, #1
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	601a      	str	r2, [r3, #0]
}
 800f24a:	bf00      	nop
 800f24c:	3714      	adds	r7, #20
 800f24e:	46bd      	mov	sp, r7
 800f250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f254:	4770      	bx	lr

0800f256 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f256:	b480      	push	{r7}
 800f258:	b085      	sub	sp, #20
 800f25a:	af00      	add	r7, sp, #0
 800f25c:	6078      	str	r0, [r7, #4]
 800f25e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f26c:	d103      	bne.n	800f276 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	691b      	ldr	r3, [r3, #16]
 800f272:	60fb      	str	r3, [r7, #12]
 800f274:	e00c      	b.n	800f290 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	3308      	adds	r3, #8
 800f27a:	60fb      	str	r3, [r7, #12]
 800f27c:	e002      	b.n	800f284 <vListInsert+0x2e>
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	685b      	ldr	r3, [r3, #4]
 800f282:	60fb      	str	r3, [r7, #12]
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	685b      	ldr	r3, [r3, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	68ba      	ldr	r2, [r7, #8]
 800f28c:	429a      	cmp	r2, r3
 800f28e:	d2f6      	bcs.n	800f27e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	685a      	ldr	r2, [r3, #4]
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	685b      	ldr	r3, [r3, #4]
 800f29c:	683a      	ldr	r2, [r7, #0]
 800f29e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	68fa      	ldr	r2, [r7, #12]
 800f2a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	683a      	ldr	r2, [r7, #0]
 800f2aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	687a      	ldr	r2, [r7, #4]
 800f2b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	1c5a      	adds	r2, r3, #1
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	601a      	str	r2, [r3, #0]
}
 800f2bc:	bf00      	nop
 800f2be:	3714      	adds	r7, #20
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr

0800f2c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b085      	sub	sp, #20
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	691b      	ldr	r3, [r3, #16]
 800f2d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	685b      	ldr	r3, [r3, #4]
 800f2da:	687a      	ldr	r2, [r7, #4]
 800f2dc:	6892      	ldr	r2, [r2, #8]
 800f2de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	689b      	ldr	r3, [r3, #8]
 800f2e4:	687a      	ldr	r2, [r7, #4]
 800f2e6:	6852      	ldr	r2, [r2, #4]
 800f2e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	685b      	ldr	r3, [r3, #4]
 800f2ee:	687a      	ldr	r2, [r7, #4]
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d103      	bne.n	800f2fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	689a      	ldr	r2, [r3, #8]
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2200      	movs	r2, #0
 800f300:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	681b      	ldr	r3, [r3, #0]
 800f306:	1e5a      	subs	r2, r3, #1
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	681b      	ldr	r3, [r3, #0]
}
 800f310:	4618      	mov	r0, r3
 800f312:	3714      	adds	r7, #20
 800f314:	46bd      	mov	sp, r7
 800f316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31a:	4770      	bx	lr

0800f31c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b084      	sub	sp, #16
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
 800f324:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d10a      	bne.n	800f346 <xQueueGenericReset+0x2a>
	__asm volatile
 800f330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f334:	f383 8811 	msr	BASEPRI, r3
 800f338:	f3bf 8f6f 	isb	sy
 800f33c:	f3bf 8f4f 	dsb	sy
 800f340:	60bb      	str	r3, [r7, #8]
}
 800f342:	bf00      	nop
 800f344:	e7fe      	b.n	800f344 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800f346:	f003 fabd 	bl	80128c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	681a      	ldr	r2, [r3, #0]
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f352:	68f9      	ldr	r1, [r7, #12]
 800f354:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f356:	fb01 f303 	mul.w	r3, r1, r3
 800f35a:	441a      	add	r2, r3
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	2200      	movs	r2, #0
 800f364:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	68fb      	ldr	r3, [r7, #12]
 800f36c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	681a      	ldr	r2, [r3, #0]
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f376:	3b01      	subs	r3, #1
 800f378:	68f9      	ldr	r1, [r7, #12]
 800f37a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f37c:	fb01 f303 	mul.w	r3, r1, r3
 800f380:	441a      	add	r2, r3
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	22ff      	movs	r2, #255	; 0xff
 800f38a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	22ff      	movs	r2, #255	; 0xff
 800f392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d114      	bne.n	800f3c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	691b      	ldr	r3, [r3, #16]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d01a      	beq.n	800f3da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	3310      	adds	r3, #16
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f002 f8f5 	bl	8011598 <xTaskRemoveFromEventList>
 800f3ae:	4603      	mov	r3, r0
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d012      	beq.n	800f3da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f3b4:	4b0c      	ldr	r3, [pc, #48]	; (800f3e8 <xQueueGenericReset+0xcc>)
 800f3b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3ba:	601a      	str	r2, [r3, #0]
 800f3bc:	f3bf 8f4f 	dsb	sy
 800f3c0:	f3bf 8f6f 	isb	sy
 800f3c4:	e009      	b.n	800f3da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	3310      	adds	r3, #16
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f7ff fef2 	bl	800f1b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	3324      	adds	r3, #36	; 0x24
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f7ff feed 	bl	800f1b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f3da:	f003 faa3 	bl	8012924 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f3de:	2301      	movs	r3, #1
}
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3710      	adds	r7, #16
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}
 800f3e8:	e000ed04 	.word	0xe000ed04

0800f3ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b08e      	sub	sp, #56	; 0x38
 800f3f0:	af02      	add	r7, sp, #8
 800f3f2:	60f8      	str	r0, [r7, #12]
 800f3f4:	60b9      	str	r1, [r7, #8]
 800f3f6:	607a      	str	r2, [r7, #4]
 800f3f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d10a      	bne.n	800f416 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800f400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f404:	f383 8811 	msr	BASEPRI, r3
 800f408:	f3bf 8f6f 	isb	sy
 800f40c:	f3bf 8f4f 	dsb	sy
 800f410:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f412:	bf00      	nop
 800f414:	e7fe      	b.n	800f414 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d10a      	bne.n	800f432 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800f41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f420:	f383 8811 	msr	BASEPRI, r3
 800f424:	f3bf 8f6f 	isb	sy
 800f428:	f3bf 8f4f 	dsb	sy
 800f42c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f42e:	bf00      	nop
 800f430:	e7fe      	b.n	800f430 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d002      	beq.n	800f43e <xQueueGenericCreateStatic+0x52>
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d001      	beq.n	800f442 <xQueueGenericCreateStatic+0x56>
 800f43e:	2301      	movs	r3, #1
 800f440:	e000      	b.n	800f444 <xQueueGenericCreateStatic+0x58>
 800f442:	2300      	movs	r3, #0
 800f444:	2b00      	cmp	r3, #0
 800f446:	d10a      	bne.n	800f45e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800f448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f44c:	f383 8811 	msr	BASEPRI, r3
 800f450:	f3bf 8f6f 	isb	sy
 800f454:	f3bf 8f4f 	dsb	sy
 800f458:	623b      	str	r3, [r7, #32]
}
 800f45a:	bf00      	nop
 800f45c:	e7fe      	b.n	800f45c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d102      	bne.n	800f46a <xQueueGenericCreateStatic+0x7e>
 800f464:	68bb      	ldr	r3, [r7, #8]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d101      	bne.n	800f46e <xQueueGenericCreateStatic+0x82>
 800f46a:	2301      	movs	r3, #1
 800f46c:	e000      	b.n	800f470 <xQueueGenericCreateStatic+0x84>
 800f46e:	2300      	movs	r3, #0
 800f470:	2b00      	cmp	r3, #0
 800f472:	d10a      	bne.n	800f48a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800f474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f478:	f383 8811 	msr	BASEPRI, r3
 800f47c:	f3bf 8f6f 	isb	sy
 800f480:	f3bf 8f4f 	dsb	sy
 800f484:	61fb      	str	r3, [r7, #28]
}
 800f486:	bf00      	nop
 800f488:	e7fe      	b.n	800f488 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f48a:	2350      	movs	r3, #80	; 0x50
 800f48c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	2b50      	cmp	r3, #80	; 0x50
 800f492:	d00a      	beq.n	800f4aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800f494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f498:	f383 8811 	msr	BASEPRI, r3
 800f49c:	f3bf 8f6f 	isb	sy
 800f4a0:	f3bf 8f4f 	dsb	sy
 800f4a4:	61bb      	str	r3, [r7, #24]
}
 800f4a6:	bf00      	nop
 800f4a8:	e7fe      	b.n	800f4a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f4aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	d00d      	beq.n	800f4d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4b8:	2201      	movs	r2, #1
 800f4ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f4be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f4c4:	9300      	str	r3, [sp, #0]
 800f4c6:	4613      	mov	r3, r2
 800f4c8:	687a      	ldr	r2, [r7, #4]
 800f4ca:	68b9      	ldr	r1, [r7, #8]
 800f4cc:	68f8      	ldr	r0, [r7, #12]
 800f4ce:	f000 f83f 	bl	800f550 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3730      	adds	r7, #48	; 0x30
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bd80      	pop	{r7, pc}

0800f4dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f4dc:	b580      	push	{r7, lr}
 800f4de:	b08a      	sub	sp, #40	; 0x28
 800f4e0:	af02      	add	r7, sp, #8
 800f4e2:	60f8      	str	r0, [r7, #12]
 800f4e4:	60b9      	str	r1, [r7, #8]
 800f4e6:	4613      	mov	r3, r2
 800f4e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	2b00      	cmp	r3, #0
 800f4ee:	d10a      	bne.n	800f506 <xQueueGenericCreate+0x2a>
	__asm volatile
 800f4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f4:	f383 8811 	msr	BASEPRI, r3
 800f4f8:	f3bf 8f6f 	isb	sy
 800f4fc:	f3bf 8f4f 	dsb	sy
 800f500:	613b      	str	r3, [r7, #16]
}
 800f502:	bf00      	nop
 800f504:	e7fe      	b.n	800f504 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	68ba      	ldr	r2, [r7, #8]
 800f50a:	fb02 f303 	mul.w	r3, r2, r3
 800f50e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f510:	69fb      	ldr	r3, [r7, #28]
 800f512:	3350      	adds	r3, #80	; 0x50
 800f514:	4618      	mov	r0, r3
 800f516:	f003 faf7 	bl	8012b08 <pvPortMalloc>
 800f51a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f51c:	69bb      	ldr	r3, [r7, #24]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d011      	beq.n	800f546 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f522:	69bb      	ldr	r3, [r7, #24]
 800f524:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	3350      	adds	r3, #80	; 0x50
 800f52a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f52c:	69bb      	ldr	r3, [r7, #24]
 800f52e:	2200      	movs	r2, #0
 800f530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f534:	79fa      	ldrb	r2, [r7, #7]
 800f536:	69bb      	ldr	r3, [r7, #24]
 800f538:	9300      	str	r3, [sp, #0]
 800f53a:	4613      	mov	r3, r2
 800f53c:	697a      	ldr	r2, [r7, #20]
 800f53e:	68b9      	ldr	r1, [r7, #8]
 800f540:	68f8      	ldr	r0, [r7, #12]
 800f542:	f000 f805 	bl	800f550 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f546:	69bb      	ldr	r3, [r7, #24]
	}
 800f548:	4618      	mov	r0, r3
 800f54a:	3720      	adds	r7, #32
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}

0800f550 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b084      	sub	sp, #16
 800f554:	af00      	add	r7, sp, #0
 800f556:	60f8      	str	r0, [r7, #12]
 800f558:	60b9      	str	r1, [r7, #8]
 800f55a:	607a      	str	r2, [r7, #4]
 800f55c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d103      	bne.n	800f56c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f564:	69bb      	ldr	r3, [r7, #24]
 800f566:	69ba      	ldr	r2, [r7, #24]
 800f568:	601a      	str	r2, [r3, #0]
 800f56a:	e002      	b.n	800f572 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f56c:	69bb      	ldr	r3, [r7, #24]
 800f56e:	687a      	ldr	r2, [r7, #4]
 800f570:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f572:	69bb      	ldr	r3, [r7, #24]
 800f574:	68fa      	ldr	r2, [r7, #12]
 800f576:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f578:	69bb      	ldr	r3, [r7, #24]
 800f57a:	68ba      	ldr	r2, [r7, #8]
 800f57c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f57e:	2101      	movs	r1, #1
 800f580:	69b8      	ldr	r0, [r7, #24]
 800f582:	f7ff fecb 	bl	800f31c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800f586:	69bb      	ldr	r3, [r7, #24]
 800f588:	78fa      	ldrb	r2, [r7, #3]
 800f58a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f58e:	bf00      	nop
 800f590:	3710      	adds	r7, #16
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}

0800f596 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f596:	b580      	push	{r7, lr}
 800f598:	b082      	sub	sp, #8
 800f59a:	af00      	add	r7, sp, #0
 800f59c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d00e      	beq.n	800f5c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2200      	movs	r2, #0
 800f5b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f5b6:	2300      	movs	r3, #0
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	2100      	movs	r1, #0
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f000 f90b 	bl	800f7d8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f5c2:	bf00      	nop
 800f5c4:	3708      	adds	r7, #8
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	bd80      	pop	{r7, pc}

0800f5ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f5ca:	b580      	push	{r7, lr}
 800f5cc:	b086      	sub	sp, #24
 800f5ce:	af00      	add	r7, sp, #0
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	617b      	str	r3, [r7, #20]
 800f5d8:	2300      	movs	r3, #0
 800f5da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f5dc:	79fb      	ldrb	r3, [r7, #7]
 800f5de:	461a      	mov	r2, r3
 800f5e0:	6939      	ldr	r1, [r7, #16]
 800f5e2:	6978      	ldr	r0, [r7, #20]
 800f5e4:	f7ff ff7a 	bl	800f4dc <xQueueGenericCreate>
 800f5e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f5ea:	68f8      	ldr	r0, [r7, #12]
 800f5ec:	f7ff ffd3 	bl	800f596 <prvInitialiseMutex>

		return xNewQueue;
 800f5f0:	68fb      	ldr	r3, [r7, #12]
	}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3718      	adds	r7, #24
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}

0800f5fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f5fa:	b580      	push	{r7, lr}
 800f5fc:	b088      	sub	sp, #32
 800f5fe:	af02      	add	r7, sp, #8
 800f600:	4603      	mov	r3, r0
 800f602:	6039      	str	r1, [r7, #0]
 800f604:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f606:	2301      	movs	r3, #1
 800f608:	617b      	str	r3, [r7, #20]
 800f60a:	2300      	movs	r3, #0
 800f60c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f60e:	79fb      	ldrb	r3, [r7, #7]
 800f610:	9300      	str	r3, [sp, #0]
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	2200      	movs	r2, #0
 800f616:	6939      	ldr	r1, [r7, #16]
 800f618:	6978      	ldr	r0, [r7, #20]
 800f61a:	f7ff fee7 	bl	800f3ec <xQueueGenericCreateStatic>
 800f61e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f620:	68f8      	ldr	r0, [r7, #12]
 800f622:	f7ff ffb8 	bl	800f596 <prvInitialiseMutex>

		return xNewQueue;
 800f626:	68fb      	ldr	r3, [r7, #12]
	}
 800f628:	4618      	mov	r0, r3
 800f62a:	3718      	adds	r7, #24
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}

0800f630 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800f630:	b590      	push	{r4, r7, lr}
 800f632:	b087      	sub	sp, #28
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f63c:	693b      	ldr	r3, [r7, #16]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d10a      	bne.n	800f658 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800f642:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f646:	f383 8811 	msr	BASEPRI, r3
 800f64a:	f3bf 8f6f 	isb	sy
 800f64e:	f3bf 8f4f 	dsb	sy
 800f652:	60fb      	str	r3, [r7, #12]
}
 800f654:	bf00      	nop
 800f656:	e7fe      	b.n	800f656 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f658:	693b      	ldr	r3, [r7, #16]
 800f65a:	689c      	ldr	r4, [r3, #8]
 800f65c:	f002 f984 	bl	8011968 <xTaskGetCurrentTaskHandle>
 800f660:	4603      	mov	r3, r0
 800f662:	429c      	cmp	r4, r3
 800f664:	d111      	bne.n	800f68a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800f666:	693b      	ldr	r3, [r7, #16]
 800f668:	68db      	ldr	r3, [r3, #12]
 800f66a:	1e5a      	subs	r2, r3, #1
 800f66c:	693b      	ldr	r3, [r7, #16]
 800f66e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800f670:	693b      	ldr	r3, [r7, #16]
 800f672:	68db      	ldr	r3, [r3, #12]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d105      	bne.n	800f684 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800f678:	2300      	movs	r3, #0
 800f67a:	2200      	movs	r2, #0
 800f67c:	2100      	movs	r1, #0
 800f67e:	6938      	ldr	r0, [r7, #16]
 800f680:	f000 f8aa 	bl	800f7d8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800f684:	2301      	movs	r3, #1
 800f686:	617b      	str	r3, [r7, #20]
 800f688:	e001      	b.n	800f68e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800f68a:	2300      	movs	r3, #0
 800f68c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800f68e:	697b      	ldr	r3, [r7, #20]
	}
 800f690:	4618      	mov	r0, r3
 800f692:	371c      	adds	r7, #28
 800f694:	46bd      	mov	sp, r7
 800f696:	bd90      	pop	{r4, r7, pc}

0800f698 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800f698:	b590      	push	{r4, r7, lr}
 800f69a:	b087      	sub	sp, #28
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d10a      	bne.n	800f6c2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800f6ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6b0:	f383 8811 	msr	BASEPRI, r3
 800f6b4:	f3bf 8f6f 	isb	sy
 800f6b8:	f3bf 8f4f 	dsb	sy
 800f6bc:	60fb      	str	r3, [r7, #12]
}
 800f6be:	bf00      	nop
 800f6c0:	e7fe      	b.n	800f6c0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800f6c2:	693b      	ldr	r3, [r7, #16]
 800f6c4:	689c      	ldr	r4, [r3, #8]
 800f6c6:	f002 f94f 	bl	8011968 <xTaskGetCurrentTaskHandle>
 800f6ca:	4603      	mov	r3, r0
 800f6cc:	429c      	cmp	r4, r3
 800f6ce:	d107      	bne.n	800f6e0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f6d0:	693b      	ldr	r3, [r7, #16]
 800f6d2:	68db      	ldr	r3, [r3, #12]
 800f6d4:	1c5a      	adds	r2, r3, #1
 800f6d6:	693b      	ldr	r3, [r7, #16]
 800f6d8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800f6da:	2301      	movs	r3, #1
 800f6dc:	617b      	str	r3, [r7, #20]
 800f6de:	e00c      	b.n	800f6fa <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800f6e0:	6839      	ldr	r1, [r7, #0]
 800f6e2:	6938      	ldr	r0, [r7, #16]
 800f6e4:	f000 fb7e 	bl	800fde4 <xQueueSemaphoreTake>
 800f6e8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d004      	beq.n	800f6fa <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800f6f0:	693b      	ldr	r3, [r7, #16]
 800f6f2:	68db      	ldr	r3, [r3, #12]
 800f6f4:	1c5a      	adds	r2, r3, #1
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800f6fa:	697b      	ldr	r3, [r7, #20]
	}
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	371c      	adds	r7, #28
 800f700:	46bd      	mov	sp, r7
 800f702:	bd90      	pop	{r4, r7, pc}

0800f704 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800f704:	b580      	push	{r7, lr}
 800f706:	b08a      	sub	sp, #40	; 0x28
 800f708:	af02      	add	r7, sp, #8
 800f70a:	60f8      	str	r0, [r7, #12]
 800f70c:	60b9      	str	r1, [r7, #8]
 800f70e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d10a      	bne.n	800f72c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800f716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f71a:	f383 8811 	msr	BASEPRI, r3
 800f71e:	f3bf 8f6f 	isb	sy
 800f722:	f3bf 8f4f 	dsb	sy
 800f726:	61bb      	str	r3, [r7, #24]
}
 800f728:	bf00      	nop
 800f72a:	e7fe      	b.n	800f72a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f72c:	68ba      	ldr	r2, [r7, #8]
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	429a      	cmp	r2, r3
 800f732:	d90a      	bls.n	800f74a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800f734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f738:	f383 8811 	msr	BASEPRI, r3
 800f73c:	f3bf 8f6f 	isb	sy
 800f740:	f3bf 8f4f 	dsb	sy
 800f744:	617b      	str	r3, [r7, #20]
}
 800f746:	bf00      	nop
 800f748:	e7fe      	b.n	800f748 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f74a:	2302      	movs	r3, #2
 800f74c:	9300      	str	r3, [sp, #0]
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2200      	movs	r2, #0
 800f752:	2100      	movs	r1, #0
 800f754:	68f8      	ldr	r0, [r7, #12]
 800f756:	f7ff fe49 	bl	800f3ec <xQueueGenericCreateStatic>
 800f75a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800f75c:	69fb      	ldr	r3, [r7, #28]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d002      	beq.n	800f768 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f762:	69fb      	ldr	r3, [r7, #28]
 800f764:	68ba      	ldr	r2, [r7, #8]
 800f766:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f768:	69fb      	ldr	r3, [r7, #28]
	}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3720      	adds	r7, #32
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}

0800f772 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800f772:	b580      	push	{r7, lr}
 800f774:	b086      	sub	sp, #24
 800f776:	af00      	add	r7, sp, #0
 800f778:	6078      	str	r0, [r7, #4]
 800f77a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d10a      	bne.n	800f798 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800f782:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f786:	f383 8811 	msr	BASEPRI, r3
 800f78a:	f3bf 8f6f 	isb	sy
 800f78e:	f3bf 8f4f 	dsb	sy
 800f792:	613b      	str	r3, [r7, #16]
}
 800f794:	bf00      	nop
 800f796:	e7fe      	b.n	800f796 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800f798:	683a      	ldr	r2, [r7, #0]
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	429a      	cmp	r2, r3
 800f79e:	d90a      	bls.n	800f7b6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800f7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a4:	f383 8811 	msr	BASEPRI, r3
 800f7a8:	f3bf 8f6f 	isb	sy
 800f7ac:	f3bf 8f4f 	dsb	sy
 800f7b0:	60fb      	str	r3, [r7, #12]
}
 800f7b2:	bf00      	nop
 800f7b4:	e7fe      	b.n	800f7b4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800f7b6:	2202      	movs	r2, #2
 800f7b8:	2100      	movs	r1, #0
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f7ff fe8e 	bl	800f4dc <xQueueGenericCreate>
 800f7c0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d002      	beq.n	800f7ce <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	683a      	ldr	r2, [r7, #0]
 800f7cc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800f7ce:	697b      	ldr	r3, [r7, #20]
	}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3718      	adds	r7, #24
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b08e      	sub	sp, #56	; 0x38
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	60f8      	str	r0, [r7, #12]
 800f7e0:	60b9      	str	r1, [r7, #8]
 800f7e2:	607a      	str	r2, [r7, #4]
 800f7e4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f7ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d10a      	bne.n	800f80a <xQueueGenericSend+0x32>
	__asm volatile
 800f7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7f8:	f383 8811 	msr	BASEPRI, r3
 800f7fc:	f3bf 8f6f 	isb	sy
 800f800:	f3bf 8f4f 	dsb	sy
 800f804:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f806:	bf00      	nop
 800f808:	e7fe      	b.n	800f808 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f80a:	68bb      	ldr	r3, [r7, #8]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d103      	bne.n	800f818 <xQueueGenericSend+0x40>
 800f810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f814:	2b00      	cmp	r3, #0
 800f816:	d101      	bne.n	800f81c <xQueueGenericSend+0x44>
 800f818:	2301      	movs	r3, #1
 800f81a:	e000      	b.n	800f81e <xQueueGenericSend+0x46>
 800f81c:	2300      	movs	r3, #0
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d10a      	bne.n	800f838 <xQueueGenericSend+0x60>
	__asm volatile
 800f822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f826:	f383 8811 	msr	BASEPRI, r3
 800f82a:	f3bf 8f6f 	isb	sy
 800f82e:	f3bf 8f4f 	dsb	sy
 800f832:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f834:	bf00      	nop
 800f836:	e7fe      	b.n	800f836 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	2b02      	cmp	r3, #2
 800f83c:	d103      	bne.n	800f846 <xQueueGenericSend+0x6e>
 800f83e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f842:	2b01      	cmp	r3, #1
 800f844:	d101      	bne.n	800f84a <xQueueGenericSend+0x72>
 800f846:	2301      	movs	r3, #1
 800f848:	e000      	b.n	800f84c <xQueueGenericSend+0x74>
 800f84a:	2300      	movs	r3, #0
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d10a      	bne.n	800f866 <xQueueGenericSend+0x8e>
	__asm volatile
 800f850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f854:	f383 8811 	msr	BASEPRI, r3
 800f858:	f3bf 8f6f 	isb	sy
 800f85c:	f3bf 8f4f 	dsb	sy
 800f860:	623b      	str	r3, [r7, #32]
}
 800f862:	bf00      	nop
 800f864:	e7fe      	b.n	800f864 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f866:	f002 f88f 	bl	8011988 <xTaskGetSchedulerState>
 800f86a:	4603      	mov	r3, r0
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d102      	bne.n	800f876 <xQueueGenericSend+0x9e>
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d101      	bne.n	800f87a <xQueueGenericSend+0xa2>
 800f876:	2301      	movs	r3, #1
 800f878:	e000      	b.n	800f87c <xQueueGenericSend+0xa4>
 800f87a:	2300      	movs	r3, #0
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d10a      	bne.n	800f896 <xQueueGenericSend+0xbe>
	__asm volatile
 800f880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f884:	f383 8811 	msr	BASEPRI, r3
 800f888:	f3bf 8f6f 	isb	sy
 800f88c:	f3bf 8f4f 	dsb	sy
 800f890:	61fb      	str	r3, [r7, #28]
}
 800f892:	bf00      	nop
 800f894:	e7fe      	b.n	800f894 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f896:	f003 f815 	bl	80128c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f89c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8a2:	429a      	cmp	r2, r3
 800f8a4:	d302      	bcc.n	800f8ac <xQueueGenericSend+0xd4>
 800f8a6:	683b      	ldr	r3, [r7, #0]
 800f8a8:	2b02      	cmp	r3, #2
 800f8aa:	d129      	bne.n	800f900 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f8ac:	683a      	ldr	r2, [r7, #0]
 800f8ae:	68b9      	ldr	r1, [r7, #8]
 800f8b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f8b2:	f000 fc9a 	bl	80101ea <prvCopyDataToQueue>
 800f8b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	d010      	beq.n	800f8e2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c2:	3324      	adds	r3, #36	; 0x24
 800f8c4:	4618      	mov	r0, r3
 800f8c6:	f001 fe67 	bl	8011598 <xTaskRemoveFromEventList>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d013      	beq.n	800f8f8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f8d0:	4b3f      	ldr	r3, [pc, #252]	; (800f9d0 <xQueueGenericSend+0x1f8>)
 800f8d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8d6:	601a      	str	r2, [r3, #0]
 800f8d8:	f3bf 8f4f 	dsb	sy
 800f8dc:	f3bf 8f6f 	isb	sy
 800f8e0:	e00a      	b.n	800f8f8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d007      	beq.n	800f8f8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f8e8:	4b39      	ldr	r3, [pc, #228]	; (800f9d0 <xQueueGenericSend+0x1f8>)
 800f8ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8ee:	601a      	str	r2, [r3, #0]
 800f8f0:	f3bf 8f4f 	dsb	sy
 800f8f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f8f8:	f003 f814 	bl	8012924 <vPortExitCritical>
				return pdPASS;
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	e063      	b.n	800f9c8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d103      	bne.n	800f90e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f906:	f003 f80d 	bl	8012924 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f90a:	2300      	movs	r3, #0
 800f90c:	e05c      	b.n	800f9c8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f910:	2b00      	cmp	r3, #0
 800f912:	d106      	bne.n	800f922 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f914:	f107 0314 	add.w	r3, r7, #20
 800f918:	4618      	mov	r0, r3
 800f91a:	f001 fec7 	bl	80116ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f91e:	2301      	movs	r3, #1
 800f920:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f922:	f002 ffff 	bl	8012924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f926:	f001 fbe1 	bl	80110ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f92a:	f002 ffcb 	bl	80128c4 <vPortEnterCritical>
 800f92e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f930:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f934:	b25b      	sxtb	r3, r3
 800f936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f93a:	d103      	bne.n	800f944 <xQueueGenericSend+0x16c>
 800f93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f93e:	2200      	movs	r2, #0
 800f940:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f946:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f94a:	b25b      	sxtb	r3, r3
 800f94c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f950:	d103      	bne.n	800f95a <xQueueGenericSend+0x182>
 800f952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f954:	2200      	movs	r2, #0
 800f956:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f95a:	f002 ffe3 	bl	8012924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f95e:	1d3a      	adds	r2, r7, #4
 800f960:	f107 0314 	add.w	r3, r7, #20
 800f964:	4611      	mov	r1, r2
 800f966:	4618      	mov	r0, r3
 800f968:	f001 feb6 	bl	80116d8 <xTaskCheckForTimeOut>
 800f96c:	4603      	mov	r3, r0
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d124      	bne.n	800f9bc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f972:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f974:	f000 fd31 	bl	80103da <prvIsQueueFull>
 800f978:	4603      	mov	r3, r0
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d018      	beq.n	800f9b0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f980:	3310      	adds	r3, #16
 800f982:	687a      	ldr	r2, [r7, #4]
 800f984:	4611      	mov	r1, r2
 800f986:	4618      	mov	r0, r3
 800f988:	f001 fdb6 	bl	80114f8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f98c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f98e:	f000 fcbc 	bl	801030a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f992:	f001 fbb9 	bl	8011108 <xTaskResumeAll>
 800f996:	4603      	mov	r3, r0
 800f998:	2b00      	cmp	r3, #0
 800f99a:	f47f af7c 	bne.w	800f896 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800f99e:	4b0c      	ldr	r3, [pc, #48]	; (800f9d0 <xQueueGenericSend+0x1f8>)
 800f9a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9a4:	601a      	str	r2, [r3, #0]
 800f9a6:	f3bf 8f4f 	dsb	sy
 800f9aa:	f3bf 8f6f 	isb	sy
 800f9ae:	e772      	b.n	800f896 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f9b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f9b2:	f000 fcaa 	bl	801030a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f9b6:	f001 fba7 	bl	8011108 <xTaskResumeAll>
 800f9ba:	e76c      	b.n	800f896 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f9bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f9be:	f000 fca4 	bl	801030a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f9c2:	f001 fba1 	bl	8011108 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f9c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	3738      	adds	r7, #56	; 0x38
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	bd80      	pop	{r7, pc}
 800f9d0:	e000ed04 	.word	0xe000ed04

0800f9d4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b090      	sub	sp, #64	; 0x40
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	60f8      	str	r0, [r7, #12]
 800f9dc:	60b9      	str	r1, [r7, #8]
 800f9de:	607a      	str	r2, [r7, #4]
 800f9e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800f9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d10a      	bne.n	800fa02 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800f9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f0:	f383 8811 	msr	BASEPRI, r3
 800f9f4:	f3bf 8f6f 	isb	sy
 800f9f8:	f3bf 8f4f 	dsb	sy
 800f9fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f9fe:	bf00      	nop
 800fa00:	e7fe      	b.n	800fa00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d103      	bne.n	800fa10 <xQueueGenericSendFromISR+0x3c>
 800fa08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d101      	bne.n	800fa14 <xQueueGenericSendFromISR+0x40>
 800fa10:	2301      	movs	r3, #1
 800fa12:	e000      	b.n	800fa16 <xQueueGenericSendFromISR+0x42>
 800fa14:	2300      	movs	r3, #0
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d10a      	bne.n	800fa30 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800fa1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa1e:	f383 8811 	msr	BASEPRI, r3
 800fa22:	f3bf 8f6f 	isb	sy
 800fa26:	f3bf 8f4f 	dsb	sy
 800fa2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fa2c:	bf00      	nop
 800fa2e:	e7fe      	b.n	800fa2e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fa30:	683b      	ldr	r3, [r7, #0]
 800fa32:	2b02      	cmp	r3, #2
 800fa34:	d103      	bne.n	800fa3e <xQueueGenericSendFromISR+0x6a>
 800fa36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa3a:	2b01      	cmp	r3, #1
 800fa3c:	d101      	bne.n	800fa42 <xQueueGenericSendFromISR+0x6e>
 800fa3e:	2301      	movs	r3, #1
 800fa40:	e000      	b.n	800fa44 <xQueueGenericSendFromISR+0x70>
 800fa42:	2300      	movs	r3, #0
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d10a      	bne.n	800fa5e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800fa48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa4c:	f383 8811 	msr	BASEPRI, r3
 800fa50:	f3bf 8f6f 	isb	sy
 800fa54:	f3bf 8f4f 	dsb	sy
 800fa58:	623b      	str	r3, [r7, #32]
}
 800fa5a:	bf00      	nop
 800fa5c:	e7fe      	b.n	800fa5c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fa5e:	f003 f813 	bl	8012a88 <vPortValidateInterruptPriority>
	__asm volatile
 800fa62:	f3ef 8211 	mrs	r2, BASEPRI
 800fa66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa6a:	f383 8811 	msr	BASEPRI, r3
 800fa6e:	f3bf 8f6f 	isb	sy
 800fa72:	f3bf 8f4f 	dsb	sy
 800fa76:	61fa      	str	r2, [r7, #28]
 800fa78:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800fa7a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fa7c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fa7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa86:	429a      	cmp	r2, r3
 800fa88:	d302      	bcc.n	800fa90 <xQueueGenericSendFromISR+0xbc>
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	2b02      	cmp	r3, #2
 800fa8e:	d12f      	bne.n	800faf0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fa90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fa96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fa9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa9e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800faa0:	683a      	ldr	r2, [r7, #0]
 800faa2:	68b9      	ldr	r1, [r7, #8]
 800faa4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800faa6:	f000 fba0 	bl	80101ea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800faaa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800faae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fab2:	d112      	bne.n	800fada <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d016      	beq.n	800faea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fabc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fabe:	3324      	adds	r3, #36	; 0x24
 800fac0:	4618      	mov	r0, r3
 800fac2:	f001 fd69 	bl	8011598 <xTaskRemoveFromEventList>
 800fac6:	4603      	mov	r3, r0
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d00e      	beq.n	800faea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2b00      	cmp	r3, #0
 800fad0:	d00b      	beq.n	800faea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2201      	movs	r2, #1
 800fad6:	601a      	str	r2, [r3, #0]
 800fad8:	e007      	b.n	800faea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fada:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fade:	3301      	adds	r3, #1
 800fae0:	b2db      	uxtb	r3, r3
 800fae2:	b25a      	sxtb	r2, r3
 800fae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fae6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800faea:	2301      	movs	r3, #1
 800faec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800faee:	e001      	b.n	800faf4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800faf0:	2300      	movs	r3, #0
 800faf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800faf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faf6:	617b      	str	r3, [r7, #20]
	__asm volatile
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	f383 8811 	msr	BASEPRI, r3
}
 800fafe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fb00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800fb02:	4618      	mov	r0, r3
 800fb04:	3740      	adds	r7, #64	; 0x40
 800fb06:	46bd      	mov	sp, r7
 800fb08:	bd80      	pop	{r7, pc}

0800fb0a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fb0a:	b580      	push	{r7, lr}
 800fb0c:	b08e      	sub	sp, #56	; 0x38
 800fb0e:	af00      	add	r7, sp, #0
 800fb10:	6078      	str	r0, [r7, #4]
 800fb12:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fb18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d10a      	bne.n	800fb34 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800fb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb22:	f383 8811 	msr	BASEPRI, r3
 800fb26:	f3bf 8f6f 	isb	sy
 800fb2a:	f3bf 8f4f 	dsb	sy
 800fb2e:	623b      	str	r3, [r7, #32]
}
 800fb30:	bf00      	nop
 800fb32:	e7fe      	b.n	800fb32 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fb34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d00a      	beq.n	800fb52 <xQueueGiveFromISR+0x48>
	__asm volatile
 800fb3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb40:	f383 8811 	msr	BASEPRI, r3
 800fb44:	f3bf 8f6f 	isb	sy
 800fb48:	f3bf 8f4f 	dsb	sy
 800fb4c:	61fb      	str	r3, [r7, #28]
}
 800fb4e:	bf00      	nop
 800fb50:	e7fe      	b.n	800fb50 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800fb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d103      	bne.n	800fb62 <xQueueGiveFromISR+0x58>
 800fb5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb5c:	689b      	ldr	r3, [r3, #8]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d101      	bne.n	800fb66 <xQueueGiveFromISR+0x5c>
 800fb62:	2301      	movs	r3, #1
 800fb64:	e000      	b.n	800fb68 <xQueueGiveFromISR+0x5e>
 800fb66:	2300      	movs	r3, #0
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d10a      	bne.n	800fb82 <xQueueGiveFromISR+0x78>
	__asm volatile
 800fb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb70:	f383 8811 	msr	BASEPRI, r3
 800fb74:	f3bf 8f6f 	isb	sy
 800fb78:	f3bf 8f4f 	dsb	sy
 800fb7c:	61bb      	str	r3, [r7, #24]
}
 800fb7e:	bf00      	nop
 800fb80:	e7fe      	b.n	800fb80 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fb82:	f002 ff81 	bl	8012a88 <vPortValidateInterruptPriority>
	__asm volatile
 800fb86:	f3ef 8211 	mrs	r2, BASEPRI
 800fb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb8e:	f383 8811 	msr	BASEPRI, r3
 800fb92:	f3bf 8f6f 	isb	sy
 800fb96:	f3bf 8f4f 	dsb	sy
 800fb9a:	617a      	str	r2, [r7, #20]
 800fb9c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800fb9e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fba0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fba6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800fba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	d22b      	bcs.n	800fc0a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fbb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fbb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbbe:	1c5a      	adds	r2, r3, #1
 800fbc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbc2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fbc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fbc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbcc:	d112      	bne.n	800fbf4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d016      	beq.n	800fc04 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd8:	3324      	adds	r3, #36	; 0x24
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f001 fcdc 	bl	8011598 <xTaskRemoveFromEventList>
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	2b00      	cmp	r3, #0
 800fbe4:	d00e      	beq.n	800fc04 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fbe6:	683b      	ldr	r3, [r7, #0]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d00b      	beq.n	800fc04 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fbec:	683b      	ldr	r3, [r7, #0]
 800fbee:	2201      	movs	r2, #1
 800fbf0:	601a      	str	r2, [r3, #0]
 800fbf2:	e007      	b.n	800fc04 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fbf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbf8:	3301      	adds	r3, #1
 800fbfa:	b2db      	uxtb	r3, r3
 800fbfc:	b25a      	sxtb	r2, r3
 800fbfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800fc04:	2301      	movs	r3, #1
 800fc06:	637b      	str	r3, [r7, #52]	; 0x34
 800fc08:	e001      	b.n	800fc0e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	637b      	str	r3, [r7, #52]	; 0x34
 800fc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc10:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fc12:	68fb      	ldr	r3, [r7, #12]
 800fc14:	f383 8811 	msr	BASEPRI, r3
}
 800fc18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fc1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fc1c:	4618      	mov	r0, r3
 800fc1e:	3738      	adds	r7, #56	; 0x38
 800fc20:	46bd      	mov	sp, r7
 800fc22:	bd80      	pop	{r7, pc}

0800fc24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b08c      	sub	sp, #48	; 0x30
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	60f8      	str	r0, [r7, #12]
 800fc2c:	60b9      	str	r1, [r7, #8]
 800fc2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800fc30:	2300      	movs	r3, #0
 800fc32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d10a      	bne.n	800fc54 <xQueueReceive+0x30>
	__asm volatile
 800fc3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc42:	f383 8811 	msr	BASEPRI, r3
 800fc46:	f3bf 8f6f 	isb	sy
 800fc4a:	f3bf 8f4f 	dsb	sy
 800fc4e:	623b      	str	r3, [r7, #32]
}
 800fc50:	bf00      	nop
 800fc52:	e7fe      	b.n	800fc52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc54:	68bb      	ldr	r3, [r7, #8]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d103      	bne.n	800fc62 <xQueueReceive+0x3e>
 800fc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d101      	bne.n	800fc66 <xQueueReceive+0x42>
 800fc62:	2301      	movs	r3, #1
 800fc64:	e000      	b.n	800fc68 <xQueueReceive+0x44>
 800fc66:	2300      	movs	r3, #0
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d10a      	bne.n	800fc82 <xQueueReceive+0x5e>
	__asm volatile
 800fc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc70:	f383 8811 	msr	BASEPRI, r3
 800fc74:	f3bf 8f6f 	isb	sy
 800fc78:	f3bf 8f4f 	dsb	sy
 800fc7c:	61fb      	str	r3, [r7, #28]
}
 800fc7e:	bf00      	nop
 800fc80:	e7fe      	b.n	800fc80 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fc82:	f001 fe81 	bl	8011988 <xTaskGetSchedulerState>
 800fc86:	4603      	mov	r3, r0
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d102      	bne.n	800fc92 <xQueueReceive+0x6e>
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d101      	bne.n	800fc96 <xQueueReceive+0x72>
 800fc92:	2301      	movs	r3, #1
 800fc94:	e000      	b.n	800fc98 <xQueueReceive+0x74>
 800fc96:	2300      	movs	r3, #0
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d10a      	bne.n	800fcb2 <xQueueReceive+0x8e>
	__asm volatile
 800fc9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fca0:	f383 8811 	msr	BASEPRI, r3
 800fca4:	f3bf 8f6f 	isb	sy
 800fca8:	f3bf 8f4f 	dsb	sy
 800fcac:	61bb      	str	r3, [r7, #24]
}
 800fcae:	bf00      	nop
 800fcb0:	e7fe      	b.n	800fcb0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fcb2:	f002 fe07 	bl	80128c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d01f      	beq.n	800fd02 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fcc2:	68b9      	ldr	r1, [r7, #8]
 800fcc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fcc6:	f000 fafa 	bl	80102be <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fccc:	1e5a      	subs	r2, r3, #1
 800fcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd4:	691b      	ldr	r3, [r3, #16]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d00f      	beq.n	800fcfa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fcda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcdc:	3310      	adds	r3, #16
 800fcde:	4618      	mov	r0, r3
 800fce0:	f001 fc5a 	bl	8011598 <xTaskRemoveFromEventList>
 800fce4:	4603      	mov	r3, r0
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d007      	beq.n	800fcfa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fcea:	4b3d      	ldr	r3, [pc, #244]	; (800fde0 <xQueueReceive+0x1bc>)
 800fcec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcf0:	601a      	str	r2, [r3, #0]
 800fcf2:	f3bf 8f4f 	dsb	sy
 800fcf6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fcfa:	f002 fe13 	bl	8012924 <vPortExitCritical>
				return pdPASS;
 800fcfe:	2301      	movs	r3, #1
 800fd00:	e069      	b.n	800fdd6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fd02:	687b      	ldr	r3, [r7, #4]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d103      	bne.n	800fd10 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fd08:	f002 fe0c 	bl	8012924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	e062      	b.n	800fdd6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fd10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d106      	bne.n	800fd24 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fd16:	f107 0310 	add.w	r3, r7, #16
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f001 fcc6 	bl	80116ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fd20:	2301      	movs	r3, #1
 800fd22:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fd24:	f002 fdfe 	bl	8012924 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fd28:	f001 f9e0 	bl	80110ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fd2c:	f002 fdca 	bl	80128c4 <vPortEnterCritical>
 800fd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fd36:	b25b      	sxtb	r3, r3
 800fd38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd3c:	d103      	bne.n	800fd46 <xQueueReceive+0x122>
 800fd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd40:	2200      	movs	r2, #0
 800fd42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fd46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd4c:	b25b      	sxtb	r3, r3
 800fd4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd52:	d103      	bne.n	800fd5c <xQueueReceive+0x138>
 800fd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd56:	2200      	movs	r2, #0
 800fd58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fd5c:	f002 fde2 	bl	8012924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fd60:	1d3a      	adds	r2, r7, #4
 800fd62:	f107 0310 	add.w	r3, r7, #16
 800fd66:	4611      	mov	r1, r2
 800fd68:	4618      	mov	r0, r3
 800fd6a:	f001 fcb5 	bl	80116d8 <xTaskCheckForTimeOut>
 800fd6e:	4603      	mov	r3, r0
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d123      	bne.n	800fdbc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fd74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd76:	f000 fb1a 	bl	80103ae <prvIsQueueEmpty>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d017      	beq.n	800fdb0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fd80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd82:	3324      	adds	r3, #36	; 0x24
 800fd84:	687a      	ldr	r2, [r7, #4]
 800fd86:	4611      	mov	r1, r2
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f001 fbb5 	bl	80114f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fd8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fd90:	f000 fabb 	bl	801030a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fd94:	f001 f9b8 	bl	8011108 <xTaskResumeAll>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d189      	bne.n	800fcb2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800fd9e:	4b10      	ldr	r3, [pc, #64]	; (800fde0 <xQueueReceive+0x1bc>)
 800fda0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fda4:	601a      	str	r2, [r3, #0]
 800fda6:	f3bf 8f4f 	dsb	sy
 800fdaa:	f3bf 8f6f 	isb	sy
 800fdae:	e780      	b.n	800fcb2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800fdb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdb2:	f000 faaa 	bl	801030a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fdb6:	f001 f9a7 	bl	8011108 <xTaskResumeAll>
 800fdba:	e77a      	b.n	800fcb2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800fdbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdbe:	f000 faa4 	bl	801030a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fdc2:	f001 f9a1 	bl	8011108 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fdc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fdc8:	f000 faf1 	bl	80103ae <prvIsQueueEmpty>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	f43f af6f 	beq.w	800fcb2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fdd4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3730      	adds	r7, #48	; 0x30
 800fdda:	46bd      	mov	sp, r7
 800fddc:	bd80      	pop	{r7, pc}
 800fdde:	bf00      	nop
 800fde0:	e000ed04 	.word	0xe000ed04

0800fde4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b08e      	sub	sp, #56	; 0x38
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800fdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d10a      	bne.n	800fe16 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800fe00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe04:	f383 8811 	msr	BASEPRI, r3
 800fe08:	f3bf 8f6f 	isb	sy
 800fe0c:	f3bf 8f4f 	dsb	sy
 800fe10:	623b      	str	r3, [r7, #32]
}
 800fe12:	bf00      	nop
 800fe14:	e7fe      	b.n	800fe14 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800fe16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d00a      	beq.n	800fe34 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800fe1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe22:	f383 8811 	msr	BASEPRI, r3
 800fe26:	f3bf 8f6f 	isb	sy
 800fe2a:	f3bf 8f4f 	dsb	sy
 800fe2e:	61fb      	str	r3, [r7, #28]
}
 800fe30:	bf00      	nop
 800fe32:	e7fe      	b.n	800fe32 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fe34:	f001 fda8 	bl	8011988 <xTaskGetSchedulerState>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d102      	bne.n	800fe44 <xQueueSemaphoreTake+0x60>
 800fe3e:	683b      	ldr	r3, [r7, #0]
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	d101      	bne.n	800fe48 <xQueueSemaphoreTake+0x64>
 800fe44:	2301      	movs	r3, #1
 800fe46:	e000      	b.n	800fe4a <xQueueSemaphoreTake+0x66>
 800fe48:	2300      	movs	r3, #0
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d10a      	bne.n	800fe64 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800fe4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe52:	f383 8811 	msr	BASEPRI, r3
 800fe56:	f3bf 8f6f 	isb	sy
 800fe5a:	f3bf 8f4f 	dsb	sy
 800fe5e:	61bb      	str	r3, [r7, #24]
}
 800fe60:	bf00      	nop
 800fe62:	e7fe      	b.n	800fe62 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fe64:	f002 fd2e 	bl	80128c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fe68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe6c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fe6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d024      	beq.n	800febe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fe74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe76:	1e5a      	subs	r2, r3, #1
 800fe78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe7a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fe7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d104      	bne.n	800fe8e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fe84:	f001 fef6 	bl	8011c74 <pvTaskIncrementMutexHeldCount>
 800fe88:	4602      	mov	r2, r0
 800fe8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe8c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe90:	691b      	ldr	r3, [r3, #16]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d00f      	beq.n	800feb6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fe96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fe98:	3310      	adds	r3, #16
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	f001 fb7c 	bl	8011598 <xTaskRemoveFromEventList>
 800fea0:	4603      	mov	r3, r0
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d007      	beq.n	800feb6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fea6:	4b54      	ldr	r3, [pc, #336]	; (800fff8 <xQueueSemaphoreTake+0x214>)
 800fea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800feac:	601a      	str	r2, [r3, #0]
 800feae:	f3bf 8f4f 	dsb	sy
 800feb2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800feb6:	f002 fd35 	bl	8012924 <vPortExitCritical>
				return pdPASS;
 800feba:	2301      	movs	r3, #1
 800febc:	e097      	b.n	800ffee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800febe:	683b      	ldr	r3, [r7, #0]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d111      	bne.n	800fee8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800fec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d00a      	beq.n	800fee0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800feca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fece:	f383 8811 	msr	BASEPRI, r3
 800fed2:	f3bf 8f6f 	isb	sy
 800fed6:	f3bf 8f4f 	dsb	sy
 800feda:	617b      	str	r3, [r7, #20]
}
 800fedc:	bf00      	nop
 800fede:	e7fe      	b.n	800fede <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fee0:	f002 fd20 	bl	8012924 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fee4:	2300      	movs	r3, #0
 800fee6:	e082      	b.n	800ffee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800feea:	2b00      	cmp	r3, #0
 800feec:	d106      	bne.n	800fefc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800feee:	f107 030c 	add.w	r3, r7, #12
 800fef2:	4618      	mov	r0, r3
 800fef4:	f001 fbda 	bl	80116ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fef8:	2301      	movs	r3, #1
 800fefa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fefc:	f002 fd12 	bl	8012924 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ff00:	f001 f8f4 	bl	80110ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ff04:	f002 fcde 	bl	80128c4 <vPortEnterCritical>
 800ff08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ff0e:	b25b      	sxtb	r3, r3
 800ff10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff14:	d103      	bne.n	800ff1e <xQueueSemaphoreTake+0x13a>
 800ff16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff18:	2200      	movs	r2, #0
 800ff1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ff1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff20:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff24:	b25b      	sxtb	r3, r3
 800ff26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff2a:	d103      	bne.n	800ff34 <xQueueSemaphoreTake+0x150>
 800ff2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff2e:	2200      	movs	r2, #0
 800ff30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ff34:	f002 fcf6 	bl	8012924 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ff38:	463a      	mov	r2, r7
 800ff3a:	f107 030c 	add.w	r3, r7, #12
 800ff3e:	4611      	mov	r1, r2
 800ff40:	4618      	mov	r0, r3
 800ff42:	f001 fbc9 	bl	80116d8 <xTaskCheckForTimeOut>
 800ff46:	4603      	mov	r3, r0
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d132      	bne.n	800ffb2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ff4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff4e:	f000 fa2e 	bl	80103ae <prvIsQueueEmpty>
 800ff52:	4603      	mov	r3, r0
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d026      	beq.n	800ffa6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ff58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d109      	bne.n	800ff74 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800ff60:	f002 fcb0 	bl	80128c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ff64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff66:	689b      	ldr	r3, [r3, #8]
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f001 fd2b 	bl	80119c4 <xTaskPriorityInherit>
 800ff6e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ff70:	f002 fcd8 	bl	8012924 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ff74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff76:	3324      	adds	r3, #36	; 0x24
 800ff78:	683a      	ldr	r2, [r7, #0]
 800ff7a:	4611      	mov	r1, r2
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f001 fabb 	bl	80114f8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ff82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ff84:	f000 f9c1 	bl	801030a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ff88:	f001 f8be 	bl	8011108 <xTaskResumeAll>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	f47f af68 	bne.w	800fe64 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ff94:	4b18      	ldr	r3, [pc, #96]	; (800fff8 <xQueueSemaphoreTake+0x214>)
 800ff96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ff9a:	601a      	str	r2, [r3, #0]
 800ff9c:	f3bf 8f4f 	dsb	sy
 800ffa0:	f3bf 8f6f 	isb	sy
 800ffa4:	e75e      	b.n	800fe64 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ffa6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ffa8:	f000 f9af 	bl	801030a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ffac:	f001 f8ac 	bl	8011108 <xTaskResumeAll>
 800ffb0:	e758      	b.n	800fe64 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ffb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ffb4:	f000 f9a9 	bl	801030a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ffb8:	f001 f8a6 	bl	8011108 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ffbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ffbe:	f000 f9f6 	bl	80103ae <prvIsQueueEmpty>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	f43f af4d 	beq.w	800fe64 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ffca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d00d      	beq.n	800ffec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ffd0:	f002 fc78 	bl	80128c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ffd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ffd6:	f000 f8f0 	bl	80101ba <prvGetDisinheritPriorityAfterTimeout>
 800ffda:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ffdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffde:	689b      	ldr	r3, [r3, #8]
 800ffe0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	f001 fdc4 	bl	8011b70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ffe8:	f002 fc9c 	bl	8012924 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ffec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ffee:	4618      	mov	r0, r3
 800fff0:	3738      	adds	r7, #56	; 0x38
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bd80      	pop	{r7, pc}
 800fff6:	bf00      	nop
 800fff8:	e000ed04 	.word	0xe000ed04

0800fffc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b08e      	sub	sp, #56	; 0x38
 8010000:	af00      	add	r7, sp, #0
 8010002:	60f8      	str	r0, [r7, #12]
 8010004:	60b9      	str	r1, [r7, #8]
 8010006:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801000c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801000e:	2b00      	cmp	r3, #0
 8010010:	d10a      	bne.n	8010028 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010016:	f383 8811 	msr	BASEPRI, r3
 801001a:	f3bf 8f6f 	isb	sy
 801001e:	f3bf 8f4f 	dsb	sy
 8010022:	623b      	str	r3, [r7, #32]
}
 8010024:	bf00      	nop
 8010026:	e7fe      	b.n	8010026 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d103      	bne.n	8010036 <xQueueReceiveFromISR+0x3a>
 801002e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010032:	2b00      	cmp	r3, #0
 8010034:	d101      	bne.n	801003a <xQueueReceiveFromISR+0x3e>
 8010036:	2301      	movs	r3, #1
 8010038:	e000      	b.n	801003c <xQueueReceiveFromISR+0x40>
 801003a:	2300      	movs	r3, #0
 801003c:	2b00      	cmp	r3, #0
 801003e:	d10a      	bne.n	8010056 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010044:	f383 8811 	msr	BASEPRI, r3
 8010048:	f3bf 8f6f 	isb	sy
 801004c:	f3bf 8f4f 	dsb	sy
 8010050:	61fb      	str	r3, [r7, #28]
}
 8010052:	bf00      	nop
 8010054:	e7fe      	b.n	8010054 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010056:	f002 fd17 	bl	8012a88 <vPortValidateInterruptPriority>
	__asm volatile
 801005a:	f3ef 8211 	mrs	r2, BASEPRI
 801005e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010062:	f383 8811 	msr	BASEPRI, r3
 8010066:	f3bf 8f6f 	isb	sy
 801006a:	f3bf 8f4f 	dsb	sy
 801006e:	61ba      	str	r2, [r7, #24]
 8010070:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8010072:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010074:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801007a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801007c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801007e:	2b00      	cmp	r3, #0
 8010080:	d02f      	beq.n	80100e2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8010082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010084:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010088:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801008c:	68b9      	ldr	r1, [r7, #8]
 801008e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010090:	f000 f915 	bl	80102be <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8010094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010096:	1e5a      	subs	r2, r3, #1
 8010098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801009a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801009c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80100a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100a4:	d112      	bne.n	80100cc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80100a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100a8:	691b      	ldr	r3, [r3, #16]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d016      	beq.n	80100dc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80100ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b0:	3310      	adds	r3, #16
 80100b2:	4618      	mov	r0, r3
 80100b4:	f001 fa70 	bl	8011598 <xTaskRemoveFromEventList>
 80100b8:	4603      	mov	r3, r0
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d00e      	beq.n	80100dc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d00b      	beq.n	80100dc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	2201      	movs	r2, #1
 80100c8:	601a      	str	r2, [r3, #0]
 80100ca:	e007      	b.n	80100dc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80100cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100d0:	3301      	adds	r3, #1
 80100d2:	b2db      	uxtb	r3, r3
 80100d4:	b25a      	sxtb	r2, r3
 80100d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80100dc:	2301      	movs	r3, #1
 80100de:	637b      	str	r3, [r7, #52]	; 0x34
 80100e0:	e001      	b.n	80100e6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80100e2:	2300      	movs	r3, #0
 80100e4:	637b      	str	r3, [r7, #52]	; 0x34
 80100e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80100ea:	693b      	ldr	r3, [r7, #16]
 80100ec:	f383 8811 	msr	BASEPRI, r3
}
 80100f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80100f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	3738      	adds	r7, #56	; 0x38
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}

080100fc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b084      	sub	sp, #16
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2b00      	cmp	r3, #0
 8010108:	d10a      	bne.n	8010120 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 801010a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801010e:	f383 8811 	msr	BASEPRI, r3
 8010112:	f3bf 8f6f 	isb	sy
 8010116:	f3bf 8f4f 	dsb	sy
 801011a:	60bb      	str	r3, [r7, #8]
}
 801011c:	bf00      	nop
 801011e:	e7fe      	b.n	801011e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8010120:	f002 fbd0 	bl	80128c4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010128:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 801012a:	f002 fbfb 	bl	8012924 <vPortExitCritical>

	return uxReturn;
 801012e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010130:	4618      	mov	r0, r3
 8010132:	3710      	adds	r7, #16
 8010134:	46bd      	mov	sp, r7
 8010136:	bd80      	pop	{r7, pc}

08010138 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8010138:	b480      	push	{r7}
 801013a:	b087      	sub	sp, #28
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d10a      	bne.n	8010160 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 801014a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801014e:	f383 8811 	msr	BASEPRI, r3
 8010152:	f3bf 8f6f 	isb	sy
 8010156:	f3bf 8f4f 	dsb	sy
 801015a:	60fb      	str	r3, [r7, #12]
}
 801015c:	bf00      	nop
 801015e:	e7fe      	b.n	801015e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8010160:	697b      	ldr	r3, [r7, #20]
 8010162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010164:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8010166:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8010168:	4618      	mov	r0, r3
 801016a:	371c      	adds	r7, #28
 801016c:	46bd      	mov	sp, r7
 801016e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010172:	4770      	bx	lr

08010174 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b084      	sub	sp, #16
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d10a      	bne.n	801019c <vQueueDelete+0x28>
	__asm volatile
 8010186:	f04f 0350 	mov.w	r3, #80	; 0x50
 801018a:	f383 8811 	msr	BASEPRI, r3
 801018e:	f3bf 8f6f 	isb	sy
 8010192:	f3bf 8f4f 	dsb	sy
 8010196:	60bb      	str	r3, [r7, #8]
}
 8010198:	bf00      	nop
 801019a:	e7fe      	b.n	801019a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801019c:	68f8      	ldr	r0, [r7, #12]
 801019e:	f000 f95f 	bl	8010460 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d102      	bne.n	80101b2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80101ac:	68f8      	ldr	r0, [r7, #12]
 80101ae:	f002 fd7b 	bl	8012ca8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80101b2:	bf00      	nop
 80101b4:	3710      	adds	r7, #16
 80101b6:	46bd      	mov	sp, r7
 80101b8:	bd80      	pop	{r7, pc}

080101ba <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80101ba:	b480      	push	{r7}
 80101bc:	b085      	sub	sp, #20
 80101be:	af00      	add	r7, sp, #0
 80101c0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d006      	beq.n	80101d8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101ce:	681b      	ldr	r3, [r3, #0]
 80101d0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80101d4:	60fb      	str	r3, [r7, #12]
 80101d6:	e001      	b.n	80101dc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80101d8:	2300      	movs	r3, #0
 80101da:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80101dc:	68fb      	ldr	r3, [r7, #12]
	}
 80101de:	4618      	mov	r0, r3
 80101e0:	3714      	adds	r7, #20
 80101e2:	46bd      	mov	sp, r7
 80101e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e8:	4770      	bx	lr

080101ea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80101ea:	b580      	push	{r7, lr}
 80101ec:	b086      	sub	sp, #24
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	60f8      	str	r0, [r7, #12]
 80101f2:	60b9      	str	r1, [r7, #8]
 80101f4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80101f6:	2300      	movs	r3, #0
 80101f8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101fe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010204:	2b00      	cmp	r3, #0
 8010206:	d10d      	bne.n	8010224 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010208:	68fb      	ldr	r3, [r7, #12]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d14d      	bne.n	80102ac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	689b      	ldr	r3, [r3, #8]
 8010214:	4618      	mov	r0, r3
 8010216:	f001 fc3d 	bl	8011a94 <xTaskPriorityDisinherit>
 801021a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	2200      	movs	r2, #0
 8010220:	609a      	str	r2, [r3, #8]
 8010222:	e043      	b.n	80102ac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d119      	bne.n	801025e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	6858      	ldr	r0, [r3, #4]
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010232:	461a      	mov	r2, r3
 8010234:	68b9      	ldr	r1, [r7, #8]
 8010236:	f003 f9f1 	bl	801361c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	685a      	ldr	r2, [r3, #4]
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010242:	441a      	add	r2, r3
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	685a      	ldr	r2, [r3, #4]
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	689b      	ldr	r3, [r3, #8]
 8010250:	429a      	cmp	r2, r3
 8010252:	d32b      	bcc.n	80102ac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	681a      	ldr	r2, [r3, #0]
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	605a      	str	r2, [r3, #4]
 801025c:	e026      	b.n	80102ac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	68d8      	ldr	r0, [r3, #12]
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010266:	461a      	mov	r2, r3
 8010268:	68b9      	ldr	r1, [r7, #8]
 801026a:	f003 f9d7 	bl	801361c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801026e:	68fb      	ldr	r3, [r7, #12]
 8010270:	68da      	ldr	r2, [r3, #12]
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010276:	425b      	negs	r3, r3
 8010278:	441a      	add	r2, r3
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	68da      	ldr	r2, [r3, #12]
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	429a      	cmp	r2, r3
 8010288:	d207      	bcs.n	801029a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	689a      	ldr	r2, [r3, #8]
 801028e:	68fb      	ldr	r3, [r7, #12]
 8010290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010292:	425b      	negs	r3, r3
 8010294:	441a      	add	r2, r3
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2b02      	cmp	r3, #2
 801029e:	d105      	bne.n	80102ac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80102a0:	693b      	ldr	r3, [r7, #16]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d002      	beq.n	80102ac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80102a6:	693b      	ldr	r3, [r7, #16]
 80102a8:	3b01      	subs	r3, #1
 80102aa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80102ac:	693b      	ldr	r3, [r7, #16]
 80102ae:	1c5a      	adds	r2, r3, #1
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80102b4:	697b      	ldr	r3, [r7, #20]
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	3718      	adds	r7, #24
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}

080102be <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80102be:	b580      	push	{r7, lr}
 80102c0:	b082      	sub	sp, #8
 80102c2:	af00      	add	r7, sp, #0
 80102c4:	6078      	str	r0, [r7, #4]
 80102c6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d018      	beq.n	8010302 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	68da      	ldr	r2, [r3, #12]
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102d8:	441a      	add	r2, r3
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	68da      	ldr	r2, [r3, #12]
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	689b      	ldr	r3, [r3, #8]
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d303      	bcc.n	80102f2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	68d9      	ldr	r1, [r3, #12]
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80102fa:	461a      	mov	r2, r3
 80102fc:	6838      	ldr	r0, [r7, #0]
 80102fe:	f003 f98d 	bl	801361c <memcpy>
	}
}
 8010302:	bf00      	nop
 8010304:	3708      	adds	r7, #8
 8010306:	46bd      	mov	sp, r7
 8010308:	bd80      	pop	{r7, pc}

0801030a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801030a:	b580      	push	{r7, lr}
 801030c:	b084      	sub	sp, #16
 801030e:	af00      	add	r7, sp, #0
 8010310:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010312:	f002 fad7 	bl	80128c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801031c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801031e:	e011      	b.n	8010344 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010324:	2b00      	cmp	r3, #0
 8010326:	d012      	beq.n	801034e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	3324      	adds	r3, #36	; 0x24
 801032c:	4618      	mov	r0, r3
 801032e:	f001 f933 	bl	8011598 <xTaskRemoveFromEventList>
 8010332:	4603      	mov	r3, r0
 8010334:	2b00      	cmp	r3, #0
 8010336:	d001      	beq.n	801033c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010338:	f001 fa30 	bl	801179c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801033c:	7bfb      	ldrb	r3, [r7, #15]
 801033e:	3b01      	subs	r3, #1
 8010340:	b2db      	uxtb	r3, r3
 8010342:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010348:	2b00      	cmp	r3, #0
 801034a:	dce9      	bgt.n	8010320 <prvUnlockQueue+0x16>
 801034c:	e000      	b.n	8010350 <prvUnlockQueue+0x46>
					break;
 801034e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	22ff      	movs	r2, #255	; 0xff
 8010354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010358:	f002 fae4 	bl	8012924 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801035c:	f002 fab2 	bl	80128c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010366:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010368:	e011      	b.n	801038e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	691b      	ldr	r3, [r3, #16]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d012      	beq.n	8010398 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	3310      	adds	r3, #16
 8010376:	4618      	mov	r0, r3
 8010378:	f001 f90e 	bl	8011598 <xTaskRemoveFromEventList>
 801037c:	4603      	mov	r3, r0
 801037e:	2b00      	cmp	r3, #0
 8010380:	d001      	beq.n	8010386 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010382:	f001 fa0b 	bl	801179c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010386:	7bbb      	ldrb	r3, [r7, #14]
 8010388:	3b01      	subs	r3, #1
 801038a:	b2db      	uxtb	r3, r3
 801038c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801038e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010392:	2b00      	cmp	r3, #0
 8010394:	dce9      	bgt.n	801036a <prvUnlockQueue+0x60>
 8010396:	e000      	b.n	801039a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010398:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	22ff      	movs	r2, #255	; 0xff
 801039e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80103a2:	f002 fabf 	bl	8012924 <vPortExitCritical>
}
 80103a6:	bf00      	nop
 80103a8:	3710      	adds	r7, #16
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}

080103ae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80103ae:	b580      	push	{r7, lr}
 80103b0:	b084      	sub	sp, #16
 80103b2:	af00      	add	r7, sp, #0
 80103b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80103b6:	f002 fa85 	bl	80128c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d102      	bne.n	80103c8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80103c2:	2301      	movs	r3, #1
 80103c4:	60fb      	str	r3, [r7, #12]
 80103c6:	e001      	b.n	80103cc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80103c8:	2300      	movs	r3, #0
 80103ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80103cc:	f002 faaa 	bl	8012924 <vPortExitCritical>

	return xReturn;
 80103d0:	68fb      	ldr	r3, [r7, #12]
}
 80103d2:	4618      	mov	r0, r3
 80103d4:	3710      	adds	r7, #16
 80103d6:	46bd      	mov	sp, r7
 80103d8:	bd80      	pop	{r7, pc}

080103da <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80103da:	b580      	push	{r7, lr}
 80103dc:	b084      	sub	sp, #16
 80103de:	af00      	add	r7, sp, #0
 80103e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80103e2:	f002 fa6f 	bl	80128c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103ee:	429a      	cmp	r2, r3
 80103f0:	d102      	bne.n	80103f8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80103f2:	2301      	movs	r3, #1
 80103f4:	60fb      	str	r3, [r7, #12]
 80103f6:	e001      	b.n	80103fc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80103f8:	2300      	movs	r3, #0
 80103fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80103fc:	f002 fa92 	bl	8012924 <vPortExitCritical>

	return xReturn;
 8010400:	68fb      	ldr	r3, [r7, #12]
}
 8010402:	4618      	mov	r0, r3
 8010404:	3710      	adds	r7, #16
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}
	...

0801040c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801040c:	b480      	push	{r7}
 801040e:	b085      	sub	sp, #20
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010416:	2300      	movs	r3, #0
 8010418:	60fb      	str	r3, [r7, #12]
 801041a:	e014      	b.n	8010446 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801041c:	4a0f      	ldr	r2, [pc, #60]	; (801045c <vQueueAddToRegistry+0x50>)
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010424:	2b00      	cmp	r3, #0
 8010426:	d10b      	bne.n	8010440 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010428:	490c      	ldr	r1, [pc, #48]	; (801045c <vQueueAddToRegistry+0x50>)
 801042a:	68fb      	ldr	r3, [r7, #12]
 801042c:	683a      	ldr	r2, [r7, #0]
 801042e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010432:	4a0a      	ldr	r2, [pc, #40]	; (801045c <vQueueAddToRegistry+0x50>)
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	00db      	lsls	r3, r3, #3
 8010438:	4413      	add	r3, r2
 801043a:	687a      	ldr	r2, [r7, #4]
 801043c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801043e:	e006      	b.n	801044e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	3301      	adds	r3, #1
 8010444:	60fb      	str	r3, [r7, #12]
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	2b07      	cmp	r3, #7
 801044a:	d9e7      	bls.n	801041c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801044c:	bf00      	nop
 801044e:	bf00      	nop
 8010450:	3714      	adds	r7, #20
 8010452:	46bd      	mov	sp, r7
 8010454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010458:	4770      	bx	lr
 801045a:	bf00      	nop
 801045c:	20001d08 	.word	0x20001d08

08010460 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010460:	b480      	push	{r7}
 8010462:	b085      	sub	sp, #20
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010468:	2300      	movs	r3, #0
 801046a:	60fb      	str	r3, [r7, #12]
 801046c:	e016      	b.n	801049c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801046e:	4a10      	ldr	r2, [pc, #64]	; (80104b0 <vQueueUnregisterQueue+0x50>)
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	00db      	lsls	r3, r3, #3
 8010474:	4413      	add	r3, r2
 8010476:	685b      	ldr	r3, [r3, #4]
 8010478:	687a      	ldr	r2, [r7, #4]
 801047a:	429a      	cmp	r2, r3
 801047c:	d10b      	bne.n	8010496 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801047e:	4a0c      	ldr	r2, [pc, #48]	; (80104b0 <vQueueUnregisterQueue+0x50>)
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	2100      	movs	r1, #0
 8010484:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010488:	4a09      	ldr	r2, [pc, #36]	; (80104b0 <vQueueUnregisterQueue+0x50>)
 801048a:	68fb      	ldr	r3, [r7, #12]
 801048c:	00db      	lsls	r3, r3, #3
 801048e:	4413      	add	r3, r2
 8010490:	2200      	movs	r2, #0
 8010492:	605a      	str	r2, [r3, #4]
				break;
 8010494:	e006      	b.n	80104a4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	3301      	adds	r3, #1
 801049a:	60fb      	str	r3, [r7, #12]
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	2b07      	cmp	r3, #7
 80104a0:	d9e5      	bls.n	801046e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80104a2:	bf00      	nop
 80104a4:	bf00      	nop
 80104a6:	3714      	adds	r7, #20
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr
 80104b0:	20001d08 	.word	0x20001d08

080104b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b086      	sub	sp, #24
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	60f8      	str	r0, [r7, #12]
 80104bc:	60b9      	str	r1, [r7, #8]
 80104be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80104c4:	f002 f9fe 	bl	80128c4 <vPortEnterCritical>
 80104c8:	697b      	ldr	r3, [r7, #20]
 80104ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80104ce:	b25b      	sxtb	r3, r3
 80104d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104d4:	d103      	bne.n	80104de <vQueueWaitForMessageRestricted+0x2a>
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	2200      	movs	r2, #0
 80104da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80104de:	697b      	ldr	r3, [r7, #20]
 80104e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80104e4:	b25b      	sxtb	r3, r3
 80104e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104ea:	d103      	bne.n	80104f4 <vQueueWaitForMessageRestricted+0x40>
 80104ec:	697b      	ldr	r3, [r7, #20]
 80104ee:	2200      	movs	r2, #0
 80104f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80104f4:	f002 fa16 	bl	8012924 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80104f8:	697b      	ldr	r3, [r7, #20]
 80104fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d106      	bne.n	801050e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010500:	697b      	ldr	r3, [r7, #20]
 8010502:	3324      	adds	r3, #36	; 0x24
 8010504:	687a      	ldr	r2, [r7, #4]
 8010506:	68b9      	ldr	r1, [r7, #8]
 8010508:	4618      	mov	r0, r3
 801050a:	f001 f819 	bl	8011540 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801050e:	6978      	ldr	r0, [r7, #20]
 8010510:	f7ff fefb 	bl	801030a <prvUnlockQueue>
	}
 8010514:	bf00      	nop
 8010516:	3718      	adds	r7, #24
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}

0801051c <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 801051c:	b580      	push	{r7, lr}
 801051e:	b08c      	sub	sp, #48	; 0x30
 8010520:	af02      	add	r7, sp, #8
 8010522:	60f8      	str	r0, [r7, #12]
 8010524:	60b9      	str	r1, [r7, #8]
 8010526:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2b01      	cmp	r3, #1
 801052c:	d110      	bne.n	8010550 <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 801052e:	2301      	movs	r3, #1
 8010530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	2b04      	cmp	r3, #4
 8010538:	d81b      	bhi.n	8010572 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 801053a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801053e:	f383 8811 	msr	BASEPRI, r3
 8010542:	f3bf 8f6f 	isb	sy
 8010546:	f3bf 8f4f 	dsb	sy
 801054a:	61fb      	str	r3, [r7, #28]
}
 801054c:	bf00      	nop
 801054e:	e7fe      	b.n	801054e <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8010550:	2300      	movs	r3, #0
 8010552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d10a      	bne.n	8010572 <xStreamBufferGenericCreate+0x56>
	__asm volatile
 801055c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010560:	f383 8811 	msr	BASEPRI, r3
 8010564:	f3bf 8f6f 	isb	sy
 8010568:	f3bf 8f4f 	dsb	sy
 801056c:	61bb      	str	r3, [r7, #24]
}
 801056e:	bf00      	nop
 8010570:	e7fe      	b.n	8010570 <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8010572:	68ba      	ldr	r2, [r7, #8]
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	429a      	cmp	r2, r3
 8010578:	d90a      	bls.n	8010590 <xStreamBufferGenericCreate+0x74>
	__asm volatile
 801057a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801057e:	f383 8811 	msr	BASEPRI, r3
 8010582:	f3bf 8f6f 	isb	sy
 8010586:	f3bf 8f4f 	dsb	sy
 801058a:	617b      	str	r3, [r7, #20]
}
 801058c:	bf00      	nop
 801058e:	e7fe      	b.n	801058e <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d101      	bne.n	801059a <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8010596:	2301      	movs	r3, #1
 8010598:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	3301      	adds	r3, #1
 801059e:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	3324      	adds	r3, #36	; 0x24
 80105a4:	4618      	mov	r0, r3
 80105a6:	f002 faaf 	bl	8012b08 <pvPortMalloc>
 80105aa:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 80105ac:	6a3b      	ldr	r3, [r7, #32]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d00a      	beq.n	80105c8 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 80105b2:	6a3b      	ldr	r3, [r7, #32]
 80105b4:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80105b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80105bc:	9300      	str	r3, [sp, #0]
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	68fa      	ldr	r2, [r7, #12]
 80105c2:	6a38      	ldr	r0, [r7, #32]
 80105c4:	f000 fafd 	bl	8010bc2 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 80105c8:	6a3b      	ldr	r3, [r7, #32]
	}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3728      	adds	r7, #40	; 0x28
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}

080105d2 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 80105d2:	b480      	push	{r7}
 80105d4:	b087      	sub	sp, #28
 80105d6:	af00      	add	r7, sp, #0
 80105d8:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d10a      	bne.n	80105fa <xStreamBufferSpacesAvailable+0x28>
	__asm volatile
 80105e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105e8:	f383 8811 	msr	BASEPRI, r3
 80105ec:	f3bf 8f6f 	isb	sy
 80105f0:	f3bf 8f4f 	dsb	sy
 80105f4:	60fb      	str	r3, [r7, #12]
}
 80105f6:	bf00      	nop
 80105f8:	e7fe      	b.n	80105f8 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 80105fa:	693b      	ldr	r3, [r7, #16]
 80105fc:	689a      	ldr	r2, [r3, #8]
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	4413      	add	r3, r2
 8010604:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8010606:	693b      	ldr	r3, [r7, #16]
 8010608:	685b      	ldr	r3, [r3, #4]
 801060a:	697a      	ldr	r2, [r7, #20]
 801060c:	1ad3      	subs	r3, r2, r3
 801060e:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8010610:	697b      	ldr	r3, [r7, #20]
 8010612:	3b01      	subs	r3, #1
 8010614:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8010616:	693b      	ldr	r3, [r7, #16]
 8010618:	689b      	ldr	r3, [r3, #8]
 801061a:	697a      	ldr	r2, [r7, #20]
 801061c:	429a      	cmp	r2, r3
 801061e:	d304      	bcc.n	801062a <xStreamBufferSpacesAvailable+0x58>
	{
		xSpace -= pxStreamBuffer->xLength;
 8010620:	693b      	ldr	r3, [r7, #16]
 8010622:	689b      	ldr	r3, [r3, #8]
 8010624:	697a      	ldr	r2, [r7, #20]
 8010626:	1ad3      	subs	r3, r2, r3
 8010628:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 801062a:	697b      	ldr	r3, [r7, #20]
}
 801062c:	4618      	mov	r0, r3
 801062e:	371c      	adds	r7, #28
 8010630:	46bd      	mov	sp, r7
 8010632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010636:	4770      	bx	lr

08010638 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
						  const void *pvTxData,
						  size_t xDataLengthBytes,
						  TickType_t xTicksToWait )
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b090      	sub	sp, #64	; 0x40
 801063c:	af02      	add	r7, sp, #8
 801063e:	60f8      	str	r0, [r7, #12]
 8010640:	60b9      	str	r1, [r7, #8]
 8010642:	607a      	str	r2, [r7, #4]
 8010644:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	62fb      	str	r3, [r7, #44]	; 0x2c
size_t xReturn, xSpace = 0;
 801064a:	2300      	movs	r3, #0
 801064c:	637b      	str	r3, [r7, #52]	; 0x34
size_t xRequiredSpace = xDataLengthBytes;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	633b      	str	r3, [r7, #48]	; 0x30
TimeOut_t xTimeOut;

	configASSERT( pvTxData );
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d10a      	bne.n	801066e <xStreamBufferSend+0x36>
	__asm volatile
 8010658:	f04f 0350 	mov.w	r3, #80	; 0x50
 801065c:	f383 8811 	msr	BASEPRI, r3
 8010660:	f3bf 8f6f 	isb	sy
 8010664:	f3bf 8f4f 	dsb	sy
 8010668:	627b      	str	r3, [r7, #36]	; 0x24
}
 801066a:	bf00      	nop
 801066c:	e7fe      	b.n	801066c <xStreamBufferSend+0x34>
	configASSERT( pxStreamBuffer );
 801066e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010670:	2b00      	cmp	r3, #0
 8010672:	d10a      	bne.n	801068a <xStreamBufferSend+0x52>
	__asm volatile
 8010674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010678:	f383 8811 	msr	BASEPRI, r3
 801067c:	f3bf 8f6f 	isb	sy
 8010680:	f3bf 8f4f 	dsb	sy
 8010684:	623b      	str	r3, [r7, #32]
}
 8010686:	bf00      	nop
 8010688:	e7fe      	b.n	8010688 <xStreamBufferSend+0x50>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 801068a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801068c:	7f1b      	ldrb	r3, [r3, #28]
 801068e:	f003 0301 	and.w	r3, r3, #1
 8010692:	2b00      	cmp	r3, #0
 8010694:	d011      	beq.n	80106ba <xStreamBufferSend+0x82>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8010696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010698:	3304      	adds	r3, #4
 801069a:	633b      	str	r3, [r7, #48]	; 0x30

		/* Overflow? */
		configASSERT( xRequiredSpace > xDataLengthBytes );
 801069c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	429a      	cmp	r2, r3
 80106a2:	d80a      	bhi.n	80106ba <xStreamBufferSend+0x82>
	__asm volatile
 80106a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106a8:	f383 8811 	msr	BASEPRI, r3
 80106ac:	f3bf 8f6f 	isb	sy
 80106b0:	f3bf 8f4f 	dsb	sy
 80106b4:	61fb      	str	r3, [r7, #28]
}
 80106b6:	bf00      	nop
 80106b8:	e7fe      	b.n	80106b8 <xStreamBufferSend+0x80>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80106ba:	683b      	ldr	r3, [r7, #0]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d03e      	beq.n	801073e <xStreamBufferSend+0x106>
	{
		vTaskSetTimeOutState( &xTimeOut );
 80106c0:	f107 0310 	add.w	r3, r7, #16
 80106c4:	4618      	mov	r0, r3
 80106c6:	f000 ffcb 	bl	8011660 <vTaskSetTimeOutState>

		do
		{
			/* Wait until the required number of bytes are free in the message
			buffer. */
			taskENTER_CRITICAL();
 80106ca:	f002 f8fb 	bl	80128c4 <vPortEnterCritical>
			{
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80106ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106d0:	f7ff ff7f 	bl	80105d2 <xStreamBufferSpacesAvailable>
 80106d4:	6378      	str	r0, [r7, #52]	; 0x34

				if( xSpace < xRequiredSpace )
 80106d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106da:	429a      	cmp	r2, r3
 80106dc:	d217      	bcs.n	801070e <xStreamBufferSend+0xd6>
				{
					/* Clear notification state as going to wait for space. */
					( void ) xTaskNotifyStateClear( NULL );
 80106de:	2000      	movs	r0, #0
 80106e0:	f001 fbfa 	bl	8011ed8 <xTaskNotifyStateClear>

					/* Should only be one writer. */
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 80106e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106e6:	695b      	ldr	r3, [r3, #20]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d00a      	beq.n	8010702 <xStreamBufferSend+0xca>
	__asm volatile
 80106ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f0:	f383 8811 	msr	BASEPRI, r3
 80106f4:	f3bf 8f6f 	isb	sy
 80106f8:	f3bf 8f4f 	dsb	sy
 80106fc:	61bb      	str	r3, [r7, #24]
}
 80106fe:	bf00      	nop
 8010700:	e7fe      	b.n	8010700 <xStreamBufferSend+0xc8>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8010702:	f001 f931 	bl	8011968 <xTaskGetCurrentTaskHandle>
 8010706:	4602      	mov	r2, r0
 8010708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801070a:	615a      	str	r2, [r3, #20]
 801070c:	e002      	b.n	8010714 <xStreamBufferSend+0xdc>
				}
				else
				{
					taskEXIT_CRITICAL();
 801070e:	f002 f909 	bl	8012924 <vPortExitCritical>
					break;
 8010712:	e014      	b.n	801073e <xStreamBufferSend+0x106>
				}
			}
			taskEXIT_CRITICAL();
 8010714:	f002 f906 	bl	8012924 <vPortExitCritical>

			traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8010718:	683b      	ldr	r3, [r7, #0]
 801071a:	2200      	movs	r2, #0
 801071c:	2100      	movs	r1, #0
 801071e:	2000      	movs	r0, #0
 8010720:	f001 fabc 	bl	8011c9c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8010724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010726:	2200      	movs	r2, #0
 8010728:	615a      	str	r2, [r3, #20]

		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 801072a:	463a      	mov	r2, r7
 801072c:	f107 0310 	add.w	r3, r7, #16
 8010730:	4611      	mov	r1, r2
 8010732:	4618      	mov	r0, r3
 8010734:	f000 ffd0 	bl	80116d8 <xTaskCheckForTimeOut>
 8010738:	4603      	mov	r3, r0
 801073a:	2b00      	cmp	r3, #0
 801073c:	d0c5      	beq.n	80106ca <xStreamBufferSend+0x92>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	if( xSpace == ( size_t ) 0 )
 801073e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010740:	2b00      	cmp	r3, #0
 8010742:	d103      	bne.n	801074c <xStreamBufferSend+0x114>
	{
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8010744:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010746:	f7ff ff44 	bl	80105d2 <xStreamBufferSpacesAvailable>
 801074a:	6378      	str	r0, [r7, #52]	; 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 801074c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801074e:	9300      	str	r3, [sp, #0]
 8010750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010752:	687a      	ldr	r2, [r7, #4]
 8010754:	68b9      	ldr	r1, [r7, #8]
 8010756:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010758:	f000 f823 	bl	80107a2 <prvWriteMessageToBuffer>
 801075c:	62b8      	str	r0, [r7, #40]	; 0x28

	if( xReturn > ( size_t ) 0 )
 801075e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010760:	2b00      	cmp	r3, #0
 8010762:	d019      	beq.n	8010798 <xStreamBufferSend+0x160>
	{
		traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8010764:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010766:	f000 fa0c 	bl	8010b82 <prvBytesInBuffer>
 801076a:	4602      	mov	r2, r0
 801076c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801076e:	68db      	ldr	r3, [r3, #12]
 8010770:	429a      	cmp	r2, r3
 8010772:	d311      	bcc.n	8010798 <xStreamBufferSend+0x160>
		{
			sbSEND_COMPLETED( pxStreamBuffer );
 8010774:	f000 fcba 	bl	80110ec <vTaskSuspendAll>
 8010778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801077a:	691b      	ldr	r3, [r3, #16]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d009      	beq.n	8010794 <xStreamBufferSend+0x15c>
 8010780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010782:	6918      	ldr	r0, [r3, #16]
 8010784:	2300      	movs	r3, #0
 8010786:	2200      	movs	r2, #0
 8010788:	2100      	movs	r1, #0
 801078a:	f001 fae7 	bl	8011d5c <xTaskGenericNotify>
 801078e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010790:	2200      	movs	r2, #0
 8010792:	611a      	str	r2, [r3, #16]
 8010794:	f000 fcb8 	bl	8011108 <xTaskResumeAll>
	{
		mtCOVERAGE_TEST_MARKER();
		traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
	}

	return xReturn;
 8010798:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 801079a:	4618      	mov	r0, r3
 801079c:	3738      	adds	r7, #56	; 0x38
 801079e:	46bd      	mov	sp, r7
 80107a0:	bd80      	pop	{r7, pc}

080107a2 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 80107a2:	b580      	push	{r7, lr}
 80107a4:	b086      	sub	sp, #24
 80107a6:	af00      	add	r7, sp, #0
 80107a8:	60f8      	str	r0, [r7, #12]
 80107aa:	60b9      	str	r1, [r7, #8]
 80107ac:	607a      	str	r2, [r7, #4]
 80107ae:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 80107b0:	683b      	ldr	r3, [r7, #0]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d102      	bne.n	80107bc <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 80107b6:	2300      	movs	r3, #0
 80107b8:	617b      	str	r3, [r7, #20]
 80107ba:	e01d      	b.n	80107f8 <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	7f1b      	ldrb	r3, [r3, #28]
 80107c0:	f003 0301 	and.w	r3, r3, #1
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d108      	bne.n	80107da <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 80107c8:	2301      	movs	r3, #1
 80107ca:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 80107cc:	687a      	ldr	r2, [r7, #4]
 80107ce:	683b      	ldr	r3, [r7, #0]
 80107d0:	4293      	cmp	r3, r2
 80107d2:	bf28      	it	cs
 80107d4:	4613      	movcs	r3, r2
 80107d6:	607b      	str	r3, [r7, #4]
 80107d8:	e00e      	b.n	80107f8 <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 80107da:	683a      	ldr	r2, [r7, #0]
 80107dc:	6a3b      	ldr	r3, [r7, #32]
 80107de:	429a      	cmp	r2, r3
 80107e0:	d308      	bcc.n	80107f4 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 80107e2:	2301      	movs	r3, #1
 80107e4:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80107e6:	1d3b      	adds	r3, r7, #4
 80107e8:	2204      	movs	r2, #4
 80107ea:	4619      	mov	r1, r3
 80107ec:	68f8      	ldr	r0, [r7, #12]
 80107ee:	f000 f8dc 	bl	80109aa <prvWriteBytesToBuffer>
 80107f2:	e001      	b.n	80107f8 <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 80107f4:	2300      	movs	r3, #0
 80107f6:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 80107f8:	697b      	ldr	r3, [r7, #20]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d007      	beq.n	801080e <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	461a      	mov	r2, r3
 8010802:	68b9      	ldr	r1, [r7, #8]
 8010804:	68f8      	ldr	r0, [r7, #12]
 8010806:	f000 f8d0 	bl	80109aa <prvWriteBytesToBuffer>
 801080a:	6138      	str	r0, [r7, #16]
 801080c:	e001      	b.n	8010812 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 801080e:	2300      	movs	r3, #0
 8010810:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8010812:	693b      	ldr	r3, [r7, #16]
}
 8010814:	4618      	mov	r0, r3
 8010816:	3718      	adds	r7, #24
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}

0801081c <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b08e      	sub	sp, #56	; 0x38
 8010820:	af02      	add	r7, sp, #8
 8010822:	60f8      	str	r0, [r7, #12]
 8010824:	60b9      	str	r1, [r7, #8]
 8010826:	607a      	str	r2, [r7, #4]
 8010828:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 801082e:	2300      	movs	r3, #0
 8010830:	62fb      	str	r3, [r7, #44]	; 0x2c

	configASSERT( pvRxData );
 8010832:	68bb      	ldr	r3, [r7, #8]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d10a      	bne.n	801084e <xStreamBufferReceive+0x32>
	__asm volatile
 8010838:	f04f 0350 	mov.w	r3, #80	; 0x50
 801083c:	f383 8811 	msr	BASEPRI, r3
 8010840:	f3bf 8f6f 	isb	sy
 8010844:	f3bf 8f4f 	dsb	sy
 8010848:	61fb      	str	r3, [r7, #28]
}
 801084a:	bf00      	nop
 801084c:	e7fe      	b.n	801084c <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 801084e:	6a3b      	ldr	r3, [r7, #32]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d10a      	bne.n	801086a <xStreamBufferReceive+0x4e>
	__asm volatile
 8010854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010858:	f383 8811 	msr	BASEPRI, r3
 801085c:	f3bf 8f6f 	isb	sy
 8010860:	f3bf 8f4f 	dsb	sy
 8010864:	61bb      	str	r3, [r7, #24]
}
 8010866:	bf00      	nop
 8010868:	e7fe      	b.n	8010868 <xStreamBufferReceive+0x4c>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 801086a:	6a3b      	ldr	r3, [r7, #32]
 801086c:	7f1b      	ldrb	r3, [r3, #28]
 801086e:	f003 0301 	and.w	r3, r3, #1
 8010872:	2b00      	cmp	r3, #0
 8010874:	d002      	beq.n	801087c <xStreamBufferReceive+0x60>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8010876:	2304      	movs	r3, #4
 8010878:	627b      	str	r3, [r7, #36]	; 0x24
 801087a:	e001      	b.n	8010880 <xStreamBufferReceive+0x64>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 801087c:	2300      	movs	r3, #0
 801087e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8010880:	683b      	ldr	r3, [r7, #0]
 8010882:	2b00      	cmp	r3, #0
 8010884:	d034      	beq.n	80108f0 <xStreamBufferReceive+0xd4>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8010886:	f002 f81d 	bl	80128c4 <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 801088a:	6a38      	ldr	r0, [r7, #32]
 801088c:	f000 f979 	bl	8010b82 <prvBytesInBuffer>
 8010890:	62b8      	str	r0, [r7, #40]	; 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8010892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010896:	429a      	cmp	r2, r3
 8010898:	d816      	bhi.n	80108c8 <xStreamBufferReceive+0xac>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 801089a:	2000      	movs	r0, #0
 801089c:	f001 fb1c 	bl	8011ed8 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80108a0:	6a3b      	ldr	r3, [r7, #32]
 80108a2:	691b      	ldr	r3, [r3, #16]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d00a      	beq.n	80108be <xStreamBufferReceive+0xa2>
	__asm volatile
 80108a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108ac:	f383 8811 	msr	BASEPRI, r3
 80108b0:	f3bf 8f6f 	isb	sy
 80108b4:	f3bf 8f4f 	dsb	sy
 80108b8:	617b      	str	r3, [r7, #20]
}
 80108ba:	bf00      	nop
 80108bc:	e7fe      	b.n	80108bc <xStreamBufferReceive+0xa0>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 80108be:	f001 f853 	bl	8011968 <xTaskGetCurrentTaskHandle>
 80108c2:	4602      	mov	r2, r0
 80108c4:	6a3b      	ldr	r3, [r7, #32]
 80108c6:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80108c8:	f002 f82c 	bl	8012924 <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 80108cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d811      	bhi.n	80108f8 <xStreamBufferReceive+0xdc>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80108d4:	683b      	ldr	r3, [r7, #0]
 80108d6:	2200      	movs	r2, #0
 80108d8:	2100      	movs	r1, #0
 80108da:	2000      	movs	r0, #0
 80108dc:	f001 f9de 	bl	8011c9c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 80108e0:	6a3b      	ldr	r3, [r7, #32]
 80108e2:	2200      	movs	r2, #0
 80108e4:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80108e6:	6a38      	ldr	r0, [r7, #32]
 80108e8:	f000 f94b 	bl	8010b82 <prvBytesInBuffer>
 80108ec:	62b8      	str	r0, [r7, #40]	; 0x28
 80108ee:	e003      	b.n	80108f8 <xStreamBufferReceive+0xdc>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80108f0:	6a38      	ldr	r0, [r7, #32]
 80108f2:	f000 f946 	bl	8010b82 <prvBytesInBuffer>
 80108f6:	62b8      	str	r0, [r7, #40]	; 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 80108f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108fc:	429a      	cmp	r2, r3
 80108fe:	d91d      	bls.n	801093c <xStreamBufferReceive+0x120>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8010900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010902:	9300      	str	r3, [sp, #0]
 8010904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010906:	687a      	ldr	r2, [r7, #4]
 8010908:	68b9      	ldr	r1, [r7, #8]
 801090a:	6a38      	ldr	r0, [r7, #32]
 801090c:	f000 f81b 	bl	8010946 <prvReadMessageFromBuffer>
 8010910:	62f8      	str	r0, [r7, #44]	; 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 8010912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010914:	2b00      	cmp	r3, #0
 8010916:	d011      	beq.n	801093c <xStreamBufferReceive+0x120>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8010918:	f000 fbe8 	bl	80110ec <vTaskSuspendAll>
 801091c:	6a3b      	ldr	r3, [r7, #32]
 801091e:	695b      	ldr	r3, [r3, #20]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d009      	beq.n	8010938 <xStreamBufferReceive+0x11c>
 8010924:	6a3b      	ldr	r3, [r7, #32]
 8010926:	6958      	ldr	r0, [r3, #20]
 8010928:	2300      	movs	r3, #0
 801092a:	2200      	movs	r2, #0
 801092c:	2100      	movs	r1, #0
 801092e:	f001 fa15 	bl	8011d5c <xTaskGenericNotify>
 8010932:	6a3b      	ldr	r3, [r7, #32]
 8010934:	2200      	movs	r2, #0
 8010936:	615a      	str	r2, [r3, #20]
 8010938:	f000 fbe6 	bl	8011108 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 801093c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801093e:	4618      	mov	r0, r3
 8010940:	3730      	adds	r7, #48	; 0x30
 8010942:	46bd      	mov	sp, r7
 8010944:	bd80      	pop	{r7, pc}

08010946 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8010946:	b580      	push	{r7, lr}
 8010948:	b088      	sub	sp, #32
 801094a:	af00      	add	r7, sp, #0
 801094c:	60f8      	str	r0, [r7, #12]
 801094e:	60b9      	str	r1, [r7, #8]
 8010950:	607a      	str	r2, [r7, #4]
 8010952:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8010954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010956:	2b00      	cmp	r3, #0
 8010958:	d019      	beq.n	801098e <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8010960:	f107 0110 	add.w	r1, r7, #16
 8010964:	683b      	ldr	r3, [r7, #0]
 8010966:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010968:	68f8      	ldr	r0, [r7, #12]
 801096a:	f000 f890 	bl	8010a8e <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 801096e:	693b      	ldr	r3, [r7, #16]
 8010970:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 8010972:	683a      	ldr	r2, [r7, #0]
 8010974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010976:	1ad3      	subs	r3, r2, r3
 8010978:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 801097a:	69fa      	ldr	r2, [r7, #28]
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	429a      	cmp	r2, r3
 8010980:	d907      	bls.n	8010992 <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	69ba      	ldr	r2, [r7, #24]
 8010986:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8010988:	2300      	movs	r3, #0
 801098a:	61fb      	str	r3, [r7, #28]
 801098c:	e001      	b.n	8010992 <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8010992:	683b      	ldr	r3, [r7, #0]
 8010994:	69fa      	ldr	r2, [r7, #28]
 8010996:	68b9      	ldr	r1, [r7, #8]
 8010998:	68f8      	ldr	r0, [r7, #12]
 801099a:	f000 f878 	bl	8010a8e <prvReadBytesFromBuffer>
 801099e:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 80109a0:	697b      	ldr	r3, [r7, #20]
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	3720      	adds	r7, #32
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}

080109aa <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 80109aa:	b580      	push	{r7, lr}
 80109ac:	b08a      	sub	sp, #40	; 0x28
 80109ae:	af00      	add	r7, sp, #0
 80109b0:	60f8      	str	r0, [r7, #12]
 80109b2:	60b9      	str	r1, [r7, #8]
 80109b4:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d10a      	bne.n	80109d2 <prvWriteBytesToBuffer+0x28>
	__asm volatile
 80109bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109c0:	f383 8811 	msr	BASEPRI, r3
 80109c4:	f3bf 8f6f 	isb	sy
 80109c8:	f3bf 8f4f 	dsb	sy
 80109cc:	61fb      	str	r3, [r7, #28]
}
 80109ce:	bf00      	nop
 80109d0:	e7fe      	b.n	80109d0 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	685b      	ldr	r3, [r3, #4]
 80109d6:	627b      	str	r3, [r7, #36]	; 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	689a      	ldr	r2, [r3, #8]
 80109dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109de:	1ad3      	subs	r3, r2, r3
 80109e0:	687a      	ldr	r2, [r7, #4]
 80109e2:	4293      	cmp	r3, r2
 80109e4:	bf28      	it	cs
 80109e6:	4613      	movcs	r3, r2
 80109e8:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 80109ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109ec:	6a3b      	ldr	r3, [r7, #32]
 80109ee:	441a      	add	r2, r3
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	689b      	ldr	r3, [r3, #8]
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d90a      	bls.n	8010a0e <prvWriteBytesToBuffer+0x64>
	__asm volatile
 80109f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80109fc:	f383 8811 	msr	BASEPRI, r3
 8010a00:	f3bf 8f6f 	isb	sy
 8010a04:	f3bf 8f4f 	dsb	sy
 8010a08:	61bb      	str	r3, [r7, #24]
}
 8010a0a:	bf00      	nop
 8010a0c:	e7fe      	b.n	8010a0c <prvWriteBytesToBuffer+0x62>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	699a      	ldr	r2, [r3, #24]
 8010a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a14:	4413      	add	r3, r2
 8010a16:	6a3a      	ldr	r2, [r7, #32]
 8010a18:	68b9      	ldr	r1, [r7, #8]
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f002 fdfe 	bl	801361c <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8010a20:	687a      	ldr	r2, [r7, #4]
 8010a22:	6a3b      	ldr	r3, [r7, #32]
 8010a24:	429a      	cmp	r2, r3
 8010a26:	d91c      	bls.n	8010a62 <prvWriteBytesToBuffer+0xb8>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8010a28:	687a      	ldr	r2, [r7, #4]
 8010a2a:	6a3b      	ldr	r3, [r7, #32]
 8010a2c:	1ad2      	subs	r2, r2, r3
 8010a2e:	68fb      	ldr	r3, [r7, #12]
 8010a30:	689b      	ldr	r3, [r3, #8]
 8010a32:	429a      	cmp	r2, r3
 8010a34:	d90a      	bls.n	8010a4c <prvWriteBytesToBuffer+0xa2>
	__asm volatile
 8010a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a3a:	f383 8811 	msr	BASEPRI, r3
 8010a3e:	f3bf 8f6f 	isb	sy
 8010a42:	f3bf 8f4f 	dsb	sy
 8010a46:	617b      	str	r3, [r7, #20]
}
 8010a48:	bf00      	nop
 8010a4a:	e7fe      	b.n	8010a4a <prvWriteBytesToBuffer+0xa0>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	6998      	ldr	r0, [r3, #24]
 8010a50:	68ba      	ldr	r2, [r7, #8]
 8010a52:	6a3b      	ldr	r3, [r7, #32]
 8010a54:	18d1      	adds	r1, r2, r3
 8010a56:	687a      	ldr	r2, [r7, #4]
 8010a58:	6a3b      	ldr	r3, [r7, #32]
 8010a5a:	1ad3      	subs	r3, r2, r3
 8010a5c:	461a      	mov	r2, r3
 8010a5e:	f002 fddd 	bl	801361c <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8010a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	4413      	add	r3, r2
 8010a68:	627b      	str	r3, [r7, #36]	; 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	689b      	ldr	r3, [r3, #8]
 8010a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a70:	429a      	cmp	r2, r3
 8010a72:	d304      	bcc.n	8010a7e <prvWriteBytesToBuffer+0xd4>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8010a74:	68fb      	ldr	r3, [r7, #12]
 8010a76:	689b      	ldr	r3, [r3, #8]
 8010a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a7a:	1ad3      	subs	r3, r2, r3
 8010a7c:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a82:	605a      	str	r2, [r3, #4]

	return xCount;
 8010a84:	687b      	ldr	r3, [r7, #4]
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	3728      	adds	r7, #40	; 0x28
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}

08010a8e <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8010a8e:	b580      	push	{r7, lr}
 8010a90:	b08a      	sub	sp, #40	; 0x28
 8010a92:	af00      	add	r7, sp, #0
 8010a94:	60f8      	str	r0, [r7, #12]
 8010a96:	60b9      	str	r1, [r7, #8]
 8010a98:	607a      	str	r2, [r7, #4]
 8010a9a:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8010a9c:	687a      	ldr	r2, [r7, #4]
 8010a9e:	683b      	ldr	r3, [r7, #0]
 8010aa0:	4293      	cmp	r3, r2
 8010aa2:	bf28      	it	cs
 8010aa4:	4613      	movcs	r3, r2
 8010aa6:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8010aa8:	6a3b      	ldr	r3, [r7, #32]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d064      	beq.n	8010b78 <prvReadBytesFromBuffer+0xea>
	{
		xNextTail = pxStreamBuffer->xTail;
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	627b      	str	r3, [r7, #36]	; 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	689a      	ldr	r2, [r3, #8]
 8010ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aba:	1ad3      	subs	r3, r2, r3
 8010abc:	6a3a      	ldr	r2, [r7, #32]
 8010abe:	4293      	cmp	r3, r2
 8010ac0:	bf28      	it	cs
 8010ac2:	4613      	movcs	r3, r2
 8010ac4:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8010ac6:	69fa      	ldr	r2, [r7, #28]
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	429a      	cmp	r2, r3
 8010acc:	d90a      	bls.n	8010ae4 <prvReadBytesFromBuffer+0x56>
	__asm volatile
 8010ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ad2:	f383 8811 	msr	BASEPRI, r3
 8010ad6:	f3bf 8f6f 	isb	sy
 8010ada:	f3bf 8f4f 	dsb	sy
 8010ade:	61bb      	str	r3, [r7, #24]
}
 8010ae0:	bf00      	nop
 8010ae2:	e7fe      	b.n	8010ae2 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8010ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ae6:	69fb      	ldr	r3, [r7, #28]
 8010ae8:	441a      	add	r2, r3
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	689b      	ldr	r3, [r3, #8]
 8010aee:	429a      	cmp	r2, r3
 8010af0:	d90a      	bls.n	8010b08 <prvReadBytesFromBuffer+0x7a>
	__asm volatile
 8010af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af6:	f383 8811 	msr	BASEPRI, r3
 8010afa:	f3bf 8f6f 	isb	sy
 8010afe:	f3bf 8f4f 	dsb	sy
 8010b02:	617b      	str	r3, [r7, #20]
}
 8010b04:	bf00      	nop
 8010b06:	e7fe      	b.n	8010b06 <prvReadBytesFromBuffer+0x78>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	699a      	ldr	r2, [r3, #24]
 8010b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b0e:	4413      	add	r3, r2
 8010b10:	69fa      	ldr	r2, [r7, #28]
 8010b12:	4619      	mov	r1, r3
 8010b14:	68b8      	ldr	r0, [r7, #8]
 8010b16:	f002 fd81 	bl	801361c <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8010b1a:	6a3a      	ldr	r2, [r7, #32]
 8010b1c:	69fb      	ldr	r3, [r7, #28]
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	d919      	bls.n	8010b56 <prvReadBytesFromBuffer+0xc8>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8010b22:	6a3a      	ldr	r2, [r7, #32]
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	429a      	cmp	r2, r3
 8010b28:	d90a      	bls.n	8010b40 <prvReadBytesFromBuffer+0xb2>
	__asm volatile
 8010b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b2e:	f383 8811 	msr	BASEPRI, r3
 8010b32:	f3bf 8f6f 	isb	sy
 8010b36:	f3bf 8f4f 	dsb	sy
 8010b3a:	613b      	str	r3, [r7, #16]
}
 8010b3c:	bf00      	nop
 8010b3e:	e7fe      	b.n	8010b3e <prvReadBytesFromBuffer+0xb0>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8010b40:	68ba      	ldr	r2, [r7, #8]
 8010b42:	69fb      	ldr	r3, [r7, #28]
 8010b44:	18d0      	adds	r0, r2, r3
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	6999      	ldr	r1, [r3, #24]
 8010b4a:	6a3a      	ldr	r2, [r7, #32]
 8010b4c:	69fb      	ldr	r3, [r7, #28]
 8010b4e:	1ad3      	subs	r3, r2, r3
 8010b50:	461a      	mov	r2, r3
 8010b52:	f002 fd63 	bl	801361c <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 8010b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b58:	6a3b      	ldr	r3, [r7, #32]
 8010b5a:	4413      	add	r3, r2
 8010b5c:	627b      	str	r3, [r7, #36]	; 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8010b5e:	68fb      	ldr	r3, [r7, #12]
 8010b60:	689b      	ldr	r3, [r3, #8]
 8010b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d304      	bcc.n	8010b72 <prvReadBytesFromBuffer+0xe4>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	689b      	ldr	r3, [r3, #8]
 8010b6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b6e:	1ad3      	subs	r3, r2, r3
 8010b70:	627b      	str	r3, [r7, #36]	; 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b76:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8010b78:	6a3b      	ldr	r3, [r7, #32]
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	3728      	adds	r7, #40	; 0x28
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	bd80      	pop	{r7, pc}

08010b82 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8010b82:	b480      	push	{r7}
 8010b84:	b085      	sub	sp, #20
 8010b86:	af00      	add	r7, sp, #0
 8010b88:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	689a      	ldr	r2, [r3, #8]
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	685b      	ldr	r3, [r3, #4]
 8010b92:	4413      	add	r3, r2
 8010b94:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	68fa      	ldr	r2, [r7, #12]
 8010b9c:	1ad3      	subs	r3, r2, r3
 8010b9e:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	689b      	ldr	r3, [r3, #8]
 8010ba4:	68fa      	ldr	r2, [r7, #12]
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d304      	bcc.n	8010bb4 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8010baa:	687b      	ldr	r3, [r7, #4]
 8010bac:	689b      	ldr	r3, [r3, #8]
 8010bae:	68fa      	ldr	r2, [r7, #12]
 8010bb0:	1ad3      	subs	r3, r2, r3
 8010bb2:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8010bb4:	68fb      	ldr	r3, [r7, #12]
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	3714      	adds	r7, #20
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc0:	4770      	bx	lr

08010bc2 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8010bc2:	b580      	push	{r7, lr}
 8010bc4:	b086      	sub	sp, #24
 8010bc6:	af00      	add	r7, sp, #0
 8010bc8:	60f8      	str	r0, [r7, #12]
 8010bca:	60b9      	str	r1, [r7, #8]
 8010bcc:	607a      	str	r2, [r7, #4]
 8010bce:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8010bd0:	2355      	movs	r3, #85	; 0x55
 8010bd2:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8010bd4:	687a      	ldr	r2, [r7, #4]
 8010bd6:	6979      	ldr	r1, [r7, #20]
 8010bd8:	68b8      	ldr	r0, [r7, #8]
 8010bda:	f002 fd2d 	bl	8013638 <memset>
 8010bde:	4602      	mov	r2, r0
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	4293      	cmp	r3, r2
 8010be4:	d00a      	beq.n	8010bfc <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 8010be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bea:	f383 8811 	msr	BASEPRI, r3
 8010bee:	f3bf 8f6f 	isb	sy
 8010bf2:	f3bf 8f4f 	dsb	sy
 8010bf6:	613b      	str	r3, [r7, #16]
}
 8010bf8:	bf00      	nop
 8010bfa:	e7fe      	b.n	8010bfa <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8010bfc:	2224      	movs	r2, #36	; 0x24
 8010bfe:	2100      	movs	r1, #0
 8010c00:	68f8      	ldr	r0, [r7, #12]
 8010c02:	f002 fd19 	bl	8013638 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	68ba      	ldr	r2, [r7, #8]
 8010c0a:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	687a      	ldr	r2, [r7, #4]
 8010c10:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	683a      	ldr	r2, [r7, #0]
 8010c16:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8010c1e:	771a      	strb	r2, [r3, #28]
}
 8010c20:	bf00      	nop
 8010c22:	3718      	adds	r7, #24
 8010c24:	46bd      	mov	sp, r7
 8010c26:	bd80      	pop	{r7, pc}

08010c28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b08e      	sub	sp, #56	; 0x38
 8010c2c:	af04      	add	r7, sp, #16
 8010c2e:	60f8      	str	r0, [r7, #12]
 8010c30:	60b9      	str	r1, [r7, #8]
 8010c32:	607a      	str	r2, [r7, #4]
 8010c34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d10a      	bne.n	8010c52 <xTaskCreateStatic+0x2a>
	__asm volatile
 8010c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c40:	f383 8811 	msr	BASEPRI, r3
 8010c44:	f3bf 8f6f 	isb	sy
 8010c48:	f3bf 8f4f 	dsb	sy
 8010c4c:	623b      	str	r3, [r7, #32]
}
 8010c4e:	bf00      	nop
 8010c50:	e7fe      	b.n	8010c50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d10a      	bne.n	8010c6e <xTaskCreateStatic+0x46>
	__asm volatile
 8010c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c5c:	f383 8811 	msr	BASEPRI, r3
 8010c60:	f3bf 8f6f 	isb	sy
 8010c64:	f3bf 8f4f 	dsb	sy
 8010c68:	61fb      	str	r3, [r7, #28]
}
 8010c6a:	bf00      	nop
 8010c6c:	e7fe      	b.n	8010c6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010c6e:	23c0      	movs	r3, #192	; 0xc0
 8010c70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010c72:	693b      	ldr	r3, [r7, #16]
 8010c74:	2bc0      	cmp	r3, #192	; 0xc0
 8010c76:	d00a      	beq.n	8010c8e <xTaskCreateStatic+0x66>
	__asm volatile
 8010c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c7c:	f383 8811 	msr	BASEPRI, r3
 8010c80:	f3bf 8f6f 	isb	sy
 8010c84:	f3bf 8f4f 	dsb	sy
 8010c88:	61bb      	str	r3, [r7, #24]
}
 8010c8a:	bf00      	nop
 8010c8c:	e7fe      	b.n	8010c8c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010c8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d01e      	beq.n	8010cd4 <xTaskCreateStatic+0xac>
 8010c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d01b      	beq.n	8010cd4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010ca4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ca8:	2202      	movs	r2, #2
 8010caa:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010cae:	2300      	movs	r3, #0
 8010cb0:	9303      	str	r3, [sp, #12]
 8010cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cb4:	9302      	str	r3, [sp, #8]
 8010cb6:	f107 0314 	add.w	r3, r7, #20
 8010cba:	9301      	str	r3, [sp, #4]
 8010cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cbe:	9300      	str	r3, [sp, #0]
 8010cc0:	683b      	ldr	r3, [r7, #0]
 8010cc2:	687a      	ldr	r2, [r7, #4]
 8010cc4:	68b9      	ldr	r1, [r7, #8]
 8010cc6:	68f8      	ldr	r0, [r7, #12]
 8010cc8:	f000 f850 	bl	8010d6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010ccc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010cce:	f000 f8f7 	bl	8010ec0 <prvAddNewTaskToReadyList>
 8010cd2:	e001      	b.n	8010cd8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010cd4:	2300      	movs	r3, #0
 8010cd6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010cd8:	697b      	ldr	r3, [r7, #20]
	}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	3728      	adds	r7, #40	; 0x28
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd80      	pop	{r7, pc}

08010ce2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010ce2:	b580      	push	{r7, lr}
 8010ce4:	b08c      	sub	sp, #48	; 0x30
 8010ce6:	af04      	add	r7, sp, #16
 8010ce8:	60f8      	str	r0, [r7, #12]
 8010cea:	60b9      	str	r1, [r7, #8]
 8010cec:	603b      	str	r3, [r7, #0]
 8010cee:	4613      	mov	r3, r2
 8010cf0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010cf2:	88fb      	ldrh	r3, [r7, #6]
 8010cf4:	009b      	lsls	r3, r3, #2
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f001 ff06 	bl	8012b08 <pvPortMalloc>
 8010cfc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010cfe:	697b      	ldr	r3, [r7, #20]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d00e      	beq.n	8010d22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010d04:	20c0      	movs	r0, #192	; 0xc0
 8010d06:	f001 feff 	bl	8012b08 <pvPortMalloc>
 8010d0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010d0c:	69fb      	ldr	r3, [r7, #28]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d003      	beq.n	8010d1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010d12:	69fb      	ldr	r3, [r7, #28]
 8010d14:	697a      	ldr	r2, [r7, #20]
 8010d16:	631a      	str	r2, [r3, #48]	; 0x30
 8010d18:	e005      	b.n	8010d26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010d1a:	6978      	ldr	r0, [r7, #20]
 8010d1c:	f001 ffc4 	bl	8012ca8 <vPortFree>
 8010d20:	e001      	b.n	8010d26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010d22:	2300      	movs	r3, #0
 8010d24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010d26:	69fb      	ldr	r3, [r7, #28]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d017      	beq.n	8010d5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010d2c:	69fb      	ldr	r3, [r7, #28]
 8010d2e:	2200      	movs	r2, #0
 8010d30:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010d34:	88fa      	ldrh	r2, [r7, #6]
 8010d36:	2300      	movs	r3, #0
 8010d38:	9303      	str	r3, [sp, #12]
 8010d3a:	69fb      	ldr	r3, [r7, #28]
 8010d3c:	9302      	str	r3, [sp, #8]
 8010d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d40:	9301      	str	r3, [sp, #4]
 8010d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d44:	9300      	str	r3, [sp, #0]
 8010d46:	683b      	ldr	r3, [r7, #0]
 8010d48:	68b9      	ldr	r1, [r7, #8]
 8010d4a:	68f8      	ldr	r0, [r7, #12]
 8010d4c:	f000 f80e 	bl	8010d6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010d50:	69f8      	ldr	r0, [r7, #28]
 8010d52:	f000 f8b5 	bl	8010ec0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010d56:	2301      	movs	r3, #1
 8010d58:	61bb      	str	r3, [r7, #24]
 8010d5a:	e002      	b.n	8010d62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8010d60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010d62:	69bb      	ldr	r3, [r7, #24]
	}
 8010d64:	4618      	mov	r0, r3
 8010d66:	3720      	adds	r7, #32
 8010d68:	46bd      	mov	sp, r7
 8010d6a:	bd80      	pop	{r7, pc}

08010d6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b088      	sub	sp, #32
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	60f8      	str	r0, [r7, #12]
 8010d74:	60b9      	str	r1, [r7, #8]
 8010d76:	607a      	str	r2, [r7, #4]
 8010d78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	009b      	lsls	r3, r3, #2
 8010d82:	461a      	mov	r2, r3
 8010d84:	21a5      	movs	r1, #165	; 0xa5
 8010d86:	f002 fc57 	bl	8013638 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010d94:	3b01      	subs	r3, #1
 8010d96:	009b      	lsls	r3, r3, #2
 8010d98:	4413      	add	r3, r2
 8010d9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010d9c:	69bb      	ldr	r3, [r7, #24]
 8010d9e:	f023 0307 	bic.w	r3, r3, #7
 8010da2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010da4:	69bb      	ldr	r3, [r7, #24]
 8010da6:	f003 0307 	and.w	r3, r3, #7
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d00a      	beq.n	8010dc4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8010dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010db2:	f383 8811 	msr	BASEPRI, r3
 8010db6:	f3bf 8f6f 	isb	sy
 8010dba:	f3bf 8f4f 	dsb	sy
 8010dbe:	617b      	str	r3, [r7, #20]
}
 8010dc0:	bf00      	nop
 8010dc2:	e7fe      	b.n	8010dc2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010dc4:	68bb      	ldr	r3, [r7, #8]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d01f      	beq.n	8010e0a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010dca:	2300      	movs	r3, #0
 8010dcc:	61fb      	str	r3, [r7, #28]
 8010dce:	e012      	b.n	8010df6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010dd0:	68ba      	ldr	r2, [r7, #8]
 8010dd2:	69fb      	ldr	r3, [r7, #28]
 8010dd4:	4413      	add	r3, r2
 8010dd6:	7819      	ldrb	r1, [r3, #0]
 8010dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010dda:	69fb      	ldr	r3, [r7, #28]
 8010ddc:	4413      	add	r3, r2
 8010dde:	3334      	adds	r3, #52	; 0x34
 8010de0:	460a      	mov	r2, r1
 8010de2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010de4:	68ba      	ldr	r2, [r7, #8]
 8010de6:	69fb      	ldr	r3, [r7, #28]
 8010de8:	4413      	add	r3, r2
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d006      	beq.n	8010dfe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010df0:	69fb      	ldr	r3, [r7, #28]
 8010df2:	3301      	adds	r3, #1
 8010df4:	61fb      	str	r3, [r7, #28]
 8010df6:	69fb      	ldr	r3, [r7, #28]
 8010df8:	2b0f      	cmp	r3, #15
 8010dfa:	d9e9      	bls.n	8010dd0 <prvInitialiseNewTask+0x64>
 8010dfc:	e000      	b.n	8010e00 <prvInitialiseNewTask+0x94>
			{
				break;
 8010dfe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e02:	2200      	movs	r2, #0
 8010e04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010e08:	e003      	b.n	8010e12 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e14:	2b37      	cmp	r3, #55	; 0x37
 8010e16:	d901      	bls.n	8010e1c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010e18:	2337      	movs	r3, #55	; 0x37
 8010e1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e30:	3304      	adds	r3, #4
 8010e32:	4618      	mov	r0, r3
 8010e34:	f7fe f9de 	bl	800f1f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e3a:	3318      	adds	r3, #24
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f7fe f9d9 	bl	800f1f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8010e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e60:	2200      	movs	r2, #0
 8010e62:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e68:	2200      	movs	r2, #0
 8010e6a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e70:	3358      	adds	r3, #88	; 0x58
 8010e72:	2260      	movs	r2, #96	; 0x60
 8010e74:	2100      	movs	r1, #0
 8010e76:	4618      	mov	r0, r3
 8010e78:	f002 fbde 	bl	8013638 <memset>
 8010e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e7e:	4a0d      	ldr	r2, [pc, #52]	; (8010eb4 <prvInitialiseNewTask+0x148>)
 8010e80:	65da      	str	r2, [r3, #92]	; 0x5c
 8010e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e84:	4a0c      	ldr	r2, [pc, #48]	; (8010eb8 <prvInitialiseNewTask+0x14c>)
 8010e86:	661a      	str	r2, [r3, #96]	; 0x60
 8010e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e8a:	4a0c      	ldr	r2, [pc, #48]	; (8010ebc <prvInitialiseNewTask+0x150>)
 8010e8c:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010e8e:	683a      	ldr	r2, [r7, #0]
 8010e90:	68f9      	ldr	r1, [r7, #12]
 8010e92:	69b8      	ldr	r0, [r7, #24]
 8010e94:	f001 fbe8 	bl	8012668 <pxPortInitialiseStack>
 8010e98:	4602      	mov	r2, r0
 8010e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e9c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d002      	beq.n	8010eaa <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ea8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010eaa:	bf00      	nop
 8010eac:	3720      	adds	r7, #32
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	bd80      	pop	{r7, pc}
 8010eb2:	bf00      	nop
 8010eb4:	08016510 	.word	0x08016510
 8010eb8:	08016530 	.word	0x08016530
 8010ebc:	080164f0 	.word	0x080164f0

08010ec0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b082      	sub	sp, #8
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010ec8:	f001 fcfc 	bl	80128c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010ecc:	4b2d      	ldr	r3, [pc, #180]	; (8010f84 <prvAddNewTaskToReadyList+0xc4>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	3301      	adds	r3, #1
 8010ed2:	4a2c      	ldr	r2, [pc, #176]	; (8010f84 <prvAddNewTaskToReadyList+0xc4>)
 8010ed4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010ed6:	4b2c      	ldr	r3, [pc, #176]	; (8010f88 <prvAddNewTaskToReadyList+0xc8>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d109      	bne.n	8010ef2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010ede:	4a2a      	ldr	r2, [pc, #168]	; (8010f88 <prvAddNewTaskToReadyList+0xc8>)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010ee4:	4b27      	ldr	r3, [pc, #156]	; (8010f84 <prvAddNewTaskToReadyList+0xc4>)
 8010ee6:	681b      	ldr	r3, [r3, #0]
 8010ee8:	2b01      	cmp	r3, #1
 8010eea:	d110      	bne.n	8010f0e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010eec:	f000 fc7a 	bl	80117e4 <prvInitialiseTaskLists>
 8010ef0:	e00d      	b.n	8010f0e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010ef2:	4b26      	ldr	r3, [pc, #152]	; (8010f8c <prvAddNewTaskToReadyList+0xcc>)
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d109      	bne.n	8010f0e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010efa:	4b23      	ldr	r3, [pc, #140]	; (8010f88 <prvAddNewTaskToReadyList+0xc8>)
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d802      	bhi.n	8010f0e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010f08:	4a1f      	ldr	r2, [pc, #124]	; (8010f88 <prvAddNewTaskToReadyList+0xc8>)
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010f0e:	4b20      	ldr	r3, [pc, #128]	; (8010f90 <prvAddNewTaskToReadyList+0xd0>)
 8010f10:	681b      	ldr	r3, [r3, #0]
 8010f12:	3301      	adds	r3, #1
 8010f14:	4a1e      	ldr	r2, [pc, #120]	; (8010f90 <prvAddNewTaskToReadyList+0xd0>)
 8010f16:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010f18:	4b1d      	ldr	r3, [pc, #116]	; (8010f90 <prvAddNewTaskToReadyList+0xd0>)
 8010f1a:	681a      	ldr	r2, [r3, #0]
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f24:	4b1b      	ldr	r3, [pc, #108]	; (8010f94 <prvAddNewTaskToReadyList+0xd4>)
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	d903      	bls.n	8010f34 <prvAddNewTaskToReadyList+0x74>
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f30:	4a18      	ldr	r2, [pc, #96]	; (8010f94 <prvAddNewTaskToReadyList+0xd4>)
 8010f32:	6013      	str	r3, [r2, #0]
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f38:	4613      	mov	r3, r2
 8010f3a:	009b      	lsls	r3, r3, #2
 8010f3c:	4413      	add	r3, r2
 8010f3e:	009b      	lsls	r3, r3, #2
 8010f40:	4a15      	ldr	r2, [pc, #84]	; (8010f98 <prvAddNewTaskToReadyList+0xd8>)
 8010f42:	441a      	add	r2, r3
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	3304      	adds	r3, #4
 8010f48:	4619      	mov	r1, r3
 8010f4a:	4610      	mov	r0, r2
 8010f4c:	f7fe f95f 	bl	800f20e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010f50:	f001 fce8 	bl	8012924 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010f54:	4b0d      	ldr	r3, [pc, #52]	; (8010f8c <prvAddNewTaskToReadyList+0xcc>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d00e      	beq.n	8010f7a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010f5c:	4b0a      	ldr	r3, [pc, #40]	; (8010f88 <prvAddNewTaskToReadyList+0xc8>)
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f66:	429a      	cmp	r2, r3
 8010f68:	d207      	bcs.n	8010f7a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010f6a:	4b0c      	ldr	r3, [pc, #48]	; (8010f9c <prvAddNewTaskToReadyList+0xdc>)
 8010f6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f70:	601a      	str	r2, [r3, #0]
 8010f72:	f3bf 8f4f 	dsb	sy
 8010f76:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f7a:	bf00      	nop
 8010f7c:	3708      	adds	r7, #8
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}
 8010f82:	bf00      	nop
 8010f84:	2000221c 	.word	0x2000221c
 8010f88:	20001d48 	.word	0x20001d48
 8010f8c:	20002228 	.word	0x20002228
 8010f90:	20002238 	.word	0x20002238
 8010f94:	20002224 	.word	0x20002224
 8010f98:	20001d4c 	.word	0x20001d4c
 8010f9c:	e000ed04 	.word	0xe000ed04

08010fa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b084      	sub	sp, #16
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010fa8:	2300      	movs	r3, #0
 8010faa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d017      	beq.n	8010fe2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010fb2:	4b13      	ldr	r3, [pc, #76]	; (8011000 <vTaskDelay+0x60>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d00a      	beq.n	8010fd0 <vTaskDelay+0x30>
	__asm volatile
 8010fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fbe:	f383 8811 	msr	BASEPRI, r3
 8010fc2:	f3bf 8f6f 	isb	sy
 8010fc6:	f3bf 8f4f 	dsb	sy
 8010fca:	60bb      	str	r3, [r7, #8]
}
 8010fcc:	bf00      	nop
 8010fce:	e7fe      	b.n	8010fce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8010fd0:	f000 f88c 	bl	80110ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010fd4:	2100      	movs	r1, #0
 8010fd6:	6878      	ldr	r0, [r7, #4]
 8010fd8:	f000 ffa4 	bl	8011f24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010fdc:	f000 f894 	bl	8011108 <xTaskResumeAll>
 8010fe0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d107      	bne.n	8010ff8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8010fe8:	4b06      	ldr	r3, [pc, #24]	; (8011004 <vTaskDelay+0x64>)
 8010fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fee:	601a      	str	r2, [r3, #0]
 8010ff0:	f3bf 8f4f 	dsb	sy
 8010ff4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010ff8:	bf00      	nop
 8010ffa:	3710      	adds	r7, #16
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}
 8011000:	20002244 	.word	0x20002244
 8011004:	e000ed04 	.word	0xe000ed04

08011008 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b08a      	sub	sp, #40	; 0x28
 801100c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801100e:	2300      	movs	r3, #0
 8011010:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011012:	2300      	movs	r3, #0
 8011014:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011016:	463a      	mov	r2, r7
 8011018:	1d39      	adds	r1, r7, #4
 801101a:	f107 0308 	add.w	r3, r7, #8
 801101e:	4618      	mov	r0, r3
 8011020:	f7fe f894 	bl	800f14c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011024:	6839      	ldr	r1, [r7, #0]
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	68ba      	ldr	r2, [r7, #8]
 801102a:	9202      	str	r2, [sp, #8]
 801102c:	9301      	str	r3, [sp, #4]
 801102e:	2300      	movs	r3, #0
 8011030:	9300      	str	r3, [sp, #0]
 8011032:	2300      	movs	r3, #0
 8011034:	460a      	mov	r2, r1
 8011036:	4925      	ldr	r1, [pc, #148]	; (80110cc <vTaskStartScheduler+0xc4>)
 8011038:	4825      	ldr	r0, [pc, #148]	; (80110d0 <vTaskStartScheduler+0xc8>)
 801103a:	f7ff fdf5 	bl	8010c28 <xTaskCreateStatic>
 801103e:	4603      	mov	r3, r0
 8011040:	4a24      	ldr	r2, [pc, #144]	; (80110d4 <vTaskStartScheduler+0xcc>)
 8011042:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011044:	4b23      	ldr	r3, [pc, #140]	; (80110d4 <vTaskStartScheduler+0xcc>)
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d002      	beq.n	8011052 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801104c:	2301      	movs	r3, #1
 801104e:	617b      	str	r3, [r7, #20]
 8011050:	e001      	b.n	8011056 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011052:	2300      	movs	r3, #0
 8011054:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8011056:	697b      	ldr	r3, [r7, #20]
 8011058:	2b01      	cmp	r3, #1
 801105a:	d102      	bne.n	8011062 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801105c:	f000 ffb6 	bl	8011fcc <xTimerCreateTimerTask>
 8011060:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011062:	697b      	ldr	r3, [r7, #20]
 8011064:	2b01      	cmp	r3, #1
 8011066:	d11d      	bne.n	80110a4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8011068:	f04f 0350 	mov.w	r3, #80	; 0x50
 801106c:	f383 8811 	msr	BASEPRI, r3
 8011070:	f3bf 8f6f 	isb	sy
 8011074:	f3bf 8f4f 	dsb	sy
 8011078:	613b      	str	r3, [r7, #16]
}
 801107a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801107c:	4b16      	ldr	r3, [pc, #88]	; (80110d8 <vTaskStartScheduler+0xd0>)
 801107e:	681b      	ldr	r3, [r3, #0]
 8011080:	3358      	adds	r3, #88	; 0x58
 8011082:	4a16      	ldr	r2, [pc, #88]	; (80110dc <vTaskStartScheduler+0xd4>)
 8011084:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011086:	4b16      	ldr	r3, [pc, #88]	; (80110e0 <vTaskStartScheduler+0xd8>)
 8011088:	f04f 32ff 	mov.w	r2, #4294967295
 801108c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801108e:	4b15      	ldr	r3, [pc, #84]	; (80110e4 <vTaskStartScheduler+0xdc>)
 8011090:	2201      	movs	r2, #1
 8011092:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011094:	4b14      	ldr	r3, [pc, #80]	; (80110e8 <vTaskStartScheduler+0xe0>)
 8011096:	2200      	movs	r2, #0
 8011098:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 801109a:	f7f6 f949 	bl	8007330 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801109e:	f001 fb6f 	bl	8012780 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80110a2:	e00e      	b.n	80110c2 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80110a4:	697b      	ldr	r3, [r7, #20]
 80110a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110aa:	d10a      	bne.n	80110c2 <vTaskStartScheduler+0xba>
	__asm volatile
 80110ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b0:	f383 8811 	msr	BASEPRI, r3
 80110b4:	f3bf 8f6f 	isb	sy
 80110b8:	f3bf 8f4f 	dsb	sy
 80110bc:	60fb      	str	r3, [r7, #12]
}
 80110be:	bf00      	nop
 80110c0:	e7fe      	b.n	80110c0 <vTaskStartScheduler+0xb8>
}
 80110c2:	bf00      	nop
 80110c4:	3718      	adds	r7, #24
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}
 80110ca:	bf00      	nop
 80110cc:	08016264 	.word	0x08016264
 80110d0:	080117b5 	.word	0x080117b5
 80110d4:	20002240 	.word	0x20002240
 80110d8:	20001d48 	.word	0x20001d48
 80110dc:	20000020 	.word	0x20000020
 80110e0:	2000223c 	.word	0x2000223c
 80110e4:	20002228 	.word	0x20002228
 80110e8:	20002220 	.word	0x20002220

080110ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80110ec:	b480      	push	{r7}
 80110ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80110f0:	4b04      	ldr	r3, [pc, #16]	; (8011104 <vTaskSuspendAll+0x18>)
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	3301      	adds	r3, #1
 80110f6:	4a03      	ldr	r2, [pc, #12]	; (8011104 <vTaskSuspendAll+0x18>)
 80110f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80110fa:	bf00      	nop
 80110fc:	46bd      	mov	sp, r7
 80110fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011102:	4770      	bx	lr
 8011104:	20002244 	.word	0x20002244

08011108 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b084      	sub	sp, #16
 801110c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801110e:	2300      	movs	r3, #0
 8011110:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011112:	2300      	movs	r3, #0
 8011114:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011116:	4b42      	ldr	r3, [pc, #264]	; (8011220 <xTaskResumeAll+0x118>)
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	2b00      	cmp	r3, #0
 801111c:	d10a      	bne.n	8011134 <xTaskResumeAll+0x2c>
	__asm volatile
 801111e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011122:	f383 8811 	msr	BASEPRI, r3
 8011126:	f3bf 8f6f 	isb	sy
 801112a:	f3bf 8f4f 	dsb	sy
 801112e:	603b      	str	r3, [r7, #0]
}
 8011130:	bf00      	nop
 8011132:	e7fe      	b.n	8011132 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011134:	f001 fbc6 	bl	80128c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011138:	4b39      	ldr	r3, [pc, #228]	; (8011220 <xTaskResumeAll+0x118>)
 801113a:	681b      	ldr	r3, [r3, #0]
 801113c:	3b01      	subs	r3, #1
 801113e:	4a38      	ldr	r2, [pc, #224]	; (8011220 <xTaskResumeAll+0x118>)
 8011140:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011142:	4b37      	ldr	r3, [pc, #220]	; (8011220 <xTaskResumeAll+0x118>)
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d162      	bne.n	8011210 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801114a:	4b36      	ldr	r3, [pc, #216]	; (8011224 <xTaskResumeAll+0x11c>)
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d05e      	beq.n	8011210 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011152:	e02f      	b.n	80111b4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011154:	4b34      	ldr	r3, [pc, #208]	; (8011228 <xTaskResumeAll+0x120>)
 8011156:	68db      	ldr	r3, [r3, #12]
 8011158:	68db      	ldr	r3, [r3, #12]
 801115a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	3318      	adds	r3, #24
 8011160:	4618      	mov	r0, r3
 8011162:	f7fe f8b1 	bl	800f2c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	3304      	adds	r3, #4
 801116a:	4618      	mov	r0, r3
 801116c:	f7fe f8ac 	bl	800f2c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011170:	68fb      	ldr	r3, [r7, #12]
 8011172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011174:	4b2d      	ldr	r3, [pc, #180]	; (801122c <xTaskResumeAll+0x124>)
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	429a      	cmp	r2, r3
 801117a:	d903      	bls.n	8011184 <xTaskResumeAll+0x7c>
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011180:	4a2a      	ldr	r2, [pc, #168]	; (801122c <xTaskResumeAll+0x124>)
 8011182:	6013      	str	r3, [r2, #0]
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011188:	4613      	mov	r3, r2
 801118a:	009b      	lsls	r3, r3, #2
 801118c:	4413      	add	r3, r2
 801118e:	009b      	lsls	r3, r3, #2
 8011190:	4a27      	ldr	r2, [pc, #156]	; (8011230 <xTaskResumeAll+0x128>)
 8011192:	441a      	add	r2, r3
 8011194:	68fb      	ldr	r3, [r7, #12]
 8011196:	3304      	adds	r3, #4
 8011198:	4619      	mov	r1, r3
 801119a:	4610      	mov	r0, r2
 801119c:	f7fe f837 	bl	800f20e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111a4:	4b23      	ldr	r3, [pc, #140]	; (8011234 <xTaskResumeAll+0x12c>)
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111aa:	429a      	cmp	r2, r3
 80111ac:	d302      	bcc.n	80111b4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80111ae:	4b22      	ldr	r3, [pc, #136]	; (8011238 <xTaskResumeAll+0x130>)
 80111b0:	2201      	movs	r2, #1
 80111b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80111b4:	4b1c      	ldr	r3, [pc, #112]	; (8011228 <xTaskResumeAll+0x120>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d1cb      	bne.n	8011154 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d001      	beq.n	80111c6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80111c2:	f000 fbb1 	bl	8011928 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80111c6:	4b1d      	ldr	r3, [pc, #116]	; (801123c <xTaskResumeAll+0x134>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d010      	beq.n	80111f4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80111d2:	f000 f847 	bl	8011264 <xTaskIncrementTick>
 80111d6:	4603      	mov	r3, r0
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d002      	beq.n	80111e2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80111dc:	4b16      	ldr	r3, [pc, #88]	; (8011238 <xTaskResumeAll+0x130>)
 80111de:	2201      	movs	r2, #1
 80111e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	3b01      	subs	r3, #1
 80111e6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d1f1      	bne.n	80111d2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80111ee:	4b13      	ldr	r3, [pc, #76]	; (801123c <xTaskResumeAll+0x134>)
 80111f0:	2200      	movs	r2, #0
 80111f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80111f4:	4b10      	ldr	r3, [pc, #64]	; (8011238 <xTaskResumeAll+0x130>)
 80111f6:	681b      	ldr	r3, [r3, #0]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d009      	beq.n	8011210 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80111fc:	2301      	movs	r3, #1
 80111fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011200:	4b0f      	ldr	r3, [pc, #60]	; (8011240 <xTaskResumeAll+0x138>)
 8011202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011206:	601a      	str	r2, [r3, #0]
 8011208:	f3bf 8f4f 	dsb	sy
 801120c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011210:	f001 fb88 	bl	8012924 <vPortExitCritical>

	return xAlreadyYielded;
 8011214:	68bb      	ldr	r3, [r7, #8]
}
 8011216:	4618      	mov	r0, r3
 8011218:	3710      	adds	r7, #16
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}
 801121e:	bf00      	nop
 8011220:	20002244 	.word	0x20002244
 8011224:	2000221c 	.word	0x2000221c
 8011228:	200021dc 	.word	0x200021dc
 801122c:	20002224 	.word	0x20002224
 8011230:	20001d4c 	.word	0x20001d4c
 8011234:	20001d48 	.word	0x20001d48
 8011238:	20002230 	.word	0x20002230
 801123c:	2000222c 	.word	0x2000222c
 8011240:	e000ed04 	.word	0xe000ed04

08011244 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011244:	b480      	push	{r7}
 8011246:	b083      	sub	sp, #12
 8011248:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801124a:	4b05      	ldr	r3, [pc, #20]	; (8011260 <xTaskGetTickCount+0x1c>)
 801124c:	681b      	ldr	r3, [r3, #0]
 801124e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011250:	687b      	ldr	r3, [r7, #4]
}
 8011252:	4618      	mov	r0, r3
 8011254:	370c      	adds	r7, #12
 8011256:	46bd      	mov	sp, r7
 8011258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125c:	4770      	bx	lr
 801125e:	bf00      	nop
 8011260:	20002220 	.word	0x20002220

08011264 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b086      	sub	sp, #24
 8011268:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801126a:	2300      	movs	r3, #0
 801126c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801126e:	4b4f      	ldr	r3, [pc, #316]	; (80113ac <xTaskIncrementTick+0x148>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	2b00      	cmp	r3, #0
 8011274:	f040 808f 	bne.w	8011396 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011278:	4b4d      	ldr	r3, [pc, #308]	; (80113b0 <xTaskIncrementTick+0x14c>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	3301      	adds	r3, #1
 801127e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011280:	4a4b      	ldr	r2, [pc, #300]	; (80113b0 <xTaskIncrementTick+0x14c>)
 8011282:	693b      	ldr	r3, [r7, #16]
 8011284:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011286:	693b      	ldr	r3, [r7, #16]
 8011288:	2b00      	cmp	r3, #0
 801128a:	d120      	bne.n	80112ce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801128c:	4b49      	ldr	r3, [pc, #292]	; (80113b4 <xTaskIncrementTick+0x150>)
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d00a      	beq.n	80112ac <xTaskIncrementTick+0x48>
	__asm volatile
 8011296:	f04f 0350 	mov.w	r3, #80	; 0x50
 801129a:	f383 8811 	msr	BASEPRI, r3
 801129e:	f3bf 8f6f 	isb	sy
 80112a2:	f3bf 8f4f 	dsb	sy
 80112a6:	603b      	str	r3, [r7, #0]
}
 80112a8:	bf00      	nop
 80112aa:	e7fe      	b.n	80112aa <xTaskIncrementTick+0x46>
 80112ac:	4b41      	ldr	r3, [pc, #260]	; (80113b4 <xTaskIncrementTick+0x150>)
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	60fb      	str	r3, [r7, #12]
 80112b2:	4b41      	ldr	r3, [pc, #260]	; (80113b8 <xTaskIncrementTick+0x154>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	4a3f      	ldr	r2, [pc, #252]	; (80113b4 <xTaskIncrementTick+0x150>)
 80112b8:	6013      	str	r3, [r2, #0]
 80112ba:	4a3f      	ldr	r2, [pc, #252]	; (80113b8 <xTaskIncrementTick+0x154>)
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	6013      	str	r3, [r2, #0]
 80112c0:	4b3e      	ldr	r3, [pc, #248]	; (80113bc <xTaskIncrementTick+0x158>)
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	3301      	adds	r3, #1
 80112c6:	4a3d      	ldr	r2, [pc, #244]	; (80113bc <xTaskIncrementTick+0x158>)
 80112c8:	6013      	str	r3, [r2, #0]
 80112ca:	f000 fb2d 	bl	8011928 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80112ce:	4b3c      	ldr	r3, [pc, #240]	; (80113c0 <xTaskIncrementTick+0x15c>)
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	693a      	ldr	r2, [r7, #16]
 80112d4:	429a      	cmp	r2, r3
 80112d6:	d349      	bcc.n	801136c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80112d8:	4b36      	ldr	r3, [pc, #216]	; (80113b4 <xTaskIncrementTick+0x150>)
 80112da:	681b      	ldr	r3, [r3, #0]
 80112dc:	681b      	ldr	r3, [r3, #0]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d104      	bne.n	80112ec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112e2:	4b37      	ldr	r3, [pc, #220]	; (80113c0 <xTaskIncrementTick+0x15c>)
 80112e4:	f04f 32ff 	mov.w	r2, #4294967295
 80112e8:	601a      	str	r2, [r3, #0]
					break;
 80112ea:	e03f      	b.n	801136c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112ec:	4b31      	ldr	r3, [pc, #196]	; (80113b4 <xTaskIncrementTick+0x150>)
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	68db      	ldr	r3, [r3, #12]
 80112f2:	68db      	ldr	r3, [r3, #12]
 80112f4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80112f6:	68bb      	ldr	r3, [r7, #8]
 80112f8:	685b      	ldr	r3, [r3, #4]
 80112fa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80112fc:	693a      	ldr	r2, [r7, #16]
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	429a      	cmp	r2, r3
 8011302:	d203      	bcs.n	801130c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8011304:	4a2e      	ldr	r2, [pc, #184]	; (80113c0 <xTaskIncrementTick+0x15c>)
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801130a:	e02f      	b.n	801136c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801130c:	68bb      	ldr	r3, [r7, #8]
 801130e:	3304      	adds	r3, #4
 8011310:	4618      	mov	r0, r3
 8011312:	f7fd ffd9 	bl	800f2c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8011316:	68bb      	ldr	r3, [r7, #8]
 8011318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801131a:	2b00      	cmp	r3, #0
 801131c:	d004      	beq.n	8011328 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	3318      	adds	r3, #24
 8011322:	4618      	mov	r0, r3
 8011324:	f7fd ffd0 	bl	800f2c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801132c:	4b25      	ldr	r3, [pc, #148]	; (80113c4 <xTaskIncrementTick+0x160>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	429a      	cmp	r2, r3
 8011332:	d903      	bls.n	801133c <xTaskIncrementTick+0xd8>
 8011334:	68bb      	ldr	r3, [r7, #8]
 8011336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011338:	4a22      	ldr	r2, [pc, #136]	; (80113c4 <xTaskIncrementTick+0x160>)
 801133a:	6013      	str	r3, [r2, #0]
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011340:	4613      	mov	r3, r2
 8011342:	009b      	lsls	r3, r3, #2
 8011344:	4413      	add	r3, r2
 8011346:	009b      	lsls	r3, r3, #2
 8011348:	4a1f      	ldr	r2, [pc, #124]	; (80113c8 <xTaskIncrementTick+0x164>)
 801134a:	441a      	add	r2, r3
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	3304      	adds	r3, #4
 8011350:	4619      	mov	r1, r3
 8011352:	4610      	mov	r0, r2
 8011354:	f7fd ff5b 	bl	800f20e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801135c:	4b1b      	ldr	r3, [pc, #108]	; (80113cc <xTaskIncrementTick+0x168>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011362:	429a      	cmp	r2, r3
 8011364:	d3b8      	bcc.n	80112d8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011366:	2301      	movs	r3, #1
 8011368:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801136a:	e7b5      	b.n	80112d8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801136c:	4b17      	ldr	r3, [pc, #92]	; (80113cc <xTaskIncrementTick+0x168>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011372:	4915      	ldr	r1, [pc, #84]	; (80113c8 <xTaskIncrementTick+0x164>)
 8011374:	4613      	mov	r3, r2
 8011376:	009b      	lsls	r3, r3, #2
 8011378:	4413      	add	r3, r2
 801137a:	009b      	lsls	r3, r3, #2
 801137c:	440b      	add	r3, r1
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	2b01      	cmp	r3, #1
 8011382:	d901      	bls.n	8011388 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8011384:	2301      	movs	r3, #1
 8011386:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8011388:	4b11      	ldr	r3, [pc, #68]	; (80113d0 <xTaskIncrementTick+0x16c>)
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d007      	beq.n	80113a0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8011390:	2301      	movs	r3, #1
 8011392:	617b      	str	r3, [r7, #20]
 8011394:	e004      	b.n	80113a0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8011396:	4b0f      	ldr	r3, [pc, #60]	; (80113d4 <xTaskIncrementTick+0x170>)
 8011398:	681b      	ldr	r3, [r3, #0]
 801139a:	3301      	adds	r3, #1
 801139c:	4a0d      	ldr	r2, [pc, #52]	; (80113d4 <xTaskIncrementTick+0x170>)
 801139e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80113a0:	697b      	ldr	r3, [r7, #20]
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	3718      	adds	r7, #24
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}
 80113aa:	bf00      	nop
 80113ac:	20002244 	.word	0x20002244
 80113b0:	20002220 	.word	0x20002220
 80113b4:	200021d4 	.word	0x200021d4
 80113b8:	200021d8 	.word	0x200021d8
 80113bc:	20002234 	.word	0x20002234
 80113c0:	2000223c 	.word	0x2000223c
 80113c4:	20002224 	.word	0x20002224
 80113c8:	20001d4c 	.word	0x20001d4c
 80113cc:	20001d48 	.word	0x20001d48
 80113d0:	20002230 	.word	0x20002230
 80113d4:	2000222c 	.word	0x2000222c

080113d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b084      	sub	sp, #16
 80113dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80113de:	4b3e      	ldr	r3, [pc, #248]	; (80114d8 <vTaskSwitchContext+0x100>)
 80113e0:	681b      	ldr	r3, [r3, #0]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d003      	beq.n	80113ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80113e6:	4b3d      	ldr	r3, [pc, #244]	; (80114dc <vTaskSwitchContext+0x104>)
 80113e8:	2201      	movs	r2, #1
 80113ea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80113ec:	e070      	b.n	80114d0 <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 80113ee:	4b3b      	ldr	r3, [pc, #236]	; (80114dc <vTaskSwitchContext+0x104>)
 80113f0:	2200      	movs	r2, #0
 80113f2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80113f4:	f7f5 ffa3 	bl	800733e <getRunTimeCounterValue>
 80113f8:	4603      	mov	r3, r0
 80113fa:	4a39      	ldr	r2, [pc, #228]	; (80114e0 <vTaskSwitchContext+0x108>)
 80113fc:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80113fe:	4b38      	ldr	r3, [pc, #224]	; (80114e0 <vTaskSwitchContext+0x108>)
 8011400:	681a      	ldr	r2, [r3, #0]
 8011402:	4b38      	ldr	r3, [pc, #224]	; (80114e4 <vTaskSwitchContext+0x10c>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	429a      	cmp	r2, r3
 8011408:	d909      	bls.n	801141e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 801140a:	4b37      	ldr	r3, [pc, #220]	; (80114e8 <vTaskSwitchContext+0x110>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8011410:	4a33      	ldr	r2, [pc, #204]	; (80114e0 <vTaskSwitchContext+0x108>)
 8011412:	6810      	ldr	r0, [r2, #0]
 8011414:	4a33      	ldr	r2, [pc, #204]	; (80114e4 <vTaskSwitchContext+0x10c>)
 8011416:	6812      	ldr	r2, [r2, #0]
 8011418:	1a82      	subs	r2, r0, r2
 801141a:	440a      	add	r2, r1
 801141c:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 801141e:	4b30      	ldr	r3, [pc, #192]	; (80114e0 <vTaskSwitchContext+0x108>)
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	4a30      	ldr	r2, [pc, #192]	; (80114e4 <vTaskSwitchContext+0x10c>)
 8011424:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8011426:	4b30      	ldr	r3, [pc, #192]	; (80114e8 <vTaskSwitchContext+0x110>)
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	681a      	ldr	r2, [r3, #0]
 801142c:	4b2e      	ldr	r3, [pc, #184]	; (80114e8 <vTaskSwitchContext+0x110>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011432:	429a      	cmp	r2, r3
 8011434:	d808      	bhi.n	8011448 <vTaskSwitchContext+0x70>
 8011436:	4b2c      	ldr	r3, [pc, #176]	; (80114e8 <vTaskSwitchContext+0x110>)
 8011438:	681a      	ldr	r2, [r3, #0]
 801143a:	4b2b      	ldr	r3, [pc, #172]	; (80114e8 <vTaskSwitchContext+0x110>)
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	3334      	adds	r3, #52	; 0x34
 8011440:	4619      	mov	r1, r3
 8011442:	4610      	mov	r0, r2
 8011444:	f7f5 ff83 	bl	800734e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011448:	4b28      	ldr	r3, [pc, #160]	; (80114ec <vTaskSwitchContext+0x114>)
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	60fb      	str	r3, [r7, #12]
 801144e:	e010      	b.n	8011472 <vTaskSwitchContext+0x9a>
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	2b00      	cmp	r3, #0
 8011454:	d10a      	bne.n	801146c <vTaskSwitchContext+0x94>
	__asm volatile
 8011456:	f04f 0350 	mov.w	r3, #80	; 0x50
 801145a:	f383 8811 	msr	BASEPRI, r3
 801145e:	f3bf 8f6f 	isb	sy
 8011462:	f3bf 8f4f 	dsb	sy
 8011466:	607b      	str	r3, [r7, #4]
}
 8011468:	bf00      	nop
 801146a:	e7fe      	b.n	801146a <vTaskSwitchContext+0x92>
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	3b01      	subs	r3, #1
 8011470:	60fb      	str	r3, [r7, #12]
 8011472:	491f      	ldr	r1, [pc, #124]	; (80114f0 <vTaskSwitchContext+0x118>)
 8011474:	68fa      	ldr	r2, [r7, #12]
 8011476:	4613      	mov	r3, r2
 8011478:	009b      	lsls	r3, r3, #2
 801147a:	4413      	add	r3, r2
 801147c:	009b      	lsls	r3, r3, #2
 801147e:	440b      	add	r3, r1
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d0e4      	beq.n	8011450 <vTaskSwitchContext+0x78>
 8011486:	68fa      	ldr	r2, [r7, #12]
 8011488:	4613      	mov	r3, r2
 801148a:	009b      	lsls	r3, r3, #2
 801148c:	4413      	add	r3, r2
 801148e:	009b      	lsls	r3, r3, #2
 8011490:	4a17      	ldr	r2, [pc, #92]	; (80114f0 <vTaskSwitchContext+0x118>)
 8011492:	4413      	add	r3, r2
 8011494:	60bb      	str	r3, [r7, #8]
 8011496:	68bb      	ldr	r3, [r7, #8]
 8011498:	685b      	ldr	r3, [r3, #4]
 801149a:	685a      	ldr	r2, [r3, #4]
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	605a      	str	r2, [r3, #4]
 80114a0:	68bb      	ldr	r3, [r7, #8]
 80114a2:	685a      	ldr	r2, [r3, #4]
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	3308      	adds	r3, #8
 80114a8:	429a      	cmp	r2, r3
 80114aa:	d104      	bne.n	80114b6 <vTaskSwitchContext+0xde>
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	685b      	ldr	r3, [r3, #4]
 80114b0:	685a      	ldr	r2, [r3, #4]
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	605a      	str	r2, [r3, #4]
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	685b      	ldr	r3, [r3, #4]
 80114ba:	68db      	ldr	r3, [r3, #12]
 80114bc:	4a0a      	ldr	r2, [pc, #40]	; (80114e8 <vTaskSwitchContext+0x110>)
 80114be:	6013      	str	r3, [r2, #0]
 80114c0:	4a0a      	ldr	r2, [pc, #40]	; (80114ec <vTaskSwitchContext+0x114>)
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80114c6:	4b08      	ldr	r3, [pc, #32]	; (80114e8 <vTaskSwitchContext+0x110>)
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	3358      	adds	r3, #88	; 0x58
 80114cc:	4a09      	ldr	r2, [pc, #36]	; (80114f4 <vTaskSwitchContext+0x11c>)
 80114ce:	6013      	str	r3, [r2, #0]
}
 80114d0:	bf00      	nop
 80114d2:	3710      	adds	r7, #16
 80114d4:	46bd      	mov	sp, r7
 80114d6:	bd80      	pop	{r7, pc}
 80114d8:	20002244 	.word	0x20002244
 80114dc:	20002230 	.word	0x20002230
 80114e0:	2000224c 	.word	0x2000224c
 80114e4:	20002248 	.word	0x20002248
 80114e8:	20001d48 	.word	0x20001d48
 80114ec:	20002224 	.word	0x20002224
 80114f0:	20001d4c 	.word	0x20001d4c
 80114f4:	20000020 	.word	0x20000020

080114f8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b084      	sub	sp, #16
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
 8011500:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d10a      	bne.n	801151e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801150c:	f383 8811 	msr	BASEPRI, r3
 8011510:	f3bf 8f6f 	isb	sy
 8011514:	f3bf 8f4f 	dsb	sy
 8011518:	60fb      	str	r3, [r7, #12]
}
 801151a:	bf00      	nop
 801151c:	e7fe      	b.n	801151c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801151e:	4b07      	ldr	r3, [pc, #28]	; (801153c <vTaskPlaceOnEventList+0x44>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	3318      	adds	r3, #24
 8011524:	4619      	mov	r1, r3
 8011526:	6878      	ldr	r0, [r7, #4]
 8011528:	f7fd fe95 	bl	800f256 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801152c:	2101      	movs	r1, #1
 801152e:	6838      	ldr	r0, [r7, #0]
 8011530:	f000 fcf8 	bl	8011f24 <prvAddCurrentTaskToDelayedList>
}
 8011534:	bf00      	nop
 8011536:	3710      	adds	r7, #16
 8011538:	46bd      	mov	sp, r7
 801153a:	bd80      	pop	{r7, pc}
 801153c:	20001d48 	.word	0x20001d48

08011540 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011540:	b580      	push	{r7, lr}
 8011542:	b086      	sub	sp, #24
 8011544:	af00      	add	r7, sp, #0
 8011546:	60f8      	str	r0, [r7, #12]
 8011548:	60b9      	str	r1, [r7, #8]
 801154a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801154c:	68fb      	ldr	r3, [r7, #12]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d10a      	bne.n	8011568 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8011552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011556:	f383 8811 	msr	BASEPRI, r3
 801155a:	f3bf 8f6f 	isb	sy
 801155e:	f3bf 8f4f 	dsb	sy
 8011562:	617b      	str	r3, [r7, #20]
}
 8011564:	bf00      	nop
 8011566:	e7fe      	b.n	8011566 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011568:	4b0a      	ldr	r3, [pc, #40]	; (8011594 <vTaskPlaceOnEventListRestricted+0x54>)
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	3318      	adds	r3, #24
 801156e:	4619      	mov	r1, r3
 8011570:	68f8      	ldr	r0, [r7, #12]
 8011572:	f7fd fe4c 	bl	800f20e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d002      	beq.n	8011582 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801157c:	f04f 33ff 	mov.w	r3, #4294967295
 8011580:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011582:	6879      	ldr	r1, [r7, #4]
 8011584:	68b8      	ldr	r0, [r7, #8]
 8011586:	f000 fccd 	bl	8011f24 <prvAddCurrentTaskToDelayedList>
	}
 801158a:	bf00      	nop
 801158c:	3718      	adds	r7, #24
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}
 8011592:	bf00      	nop
 8011594:	20001d48 	.word	0x20001d48

08011598 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b086      	sub	sp, #24
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	68db      	ldr	r3, [r3, #12]
 80115a4:	68db      	ldr	r3, [r3, #12]
 80115a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80115a8:	693b      	ldr	r3, [r7, #16]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d10a      	bne.n	80115c4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80115ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115b2:	f383 8811 	msr	BASEPRI, r3
 80115b6:	f3bf 8f6f 	isb	sy
 80115ba:	f3bf 8f4f 	dsb	sy
 80115be:	60fb      	str	r3, [r7, #12]
}
 80115c0:	bf00      	nop
 80115c2:	e7fe      	b.n	80115c2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80115c4:	693b      	ldr	r3, [r7, #16]
 80115c6:	3318      	adds	r3, #24
 80115c8:	4618      	mov	r0, r3
 80115ca:	f7fd fe7d 	bl	800f2c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80115ce:	4b1e      	ldr	r3, [pc, #120]	; (8011648 <xTaskRemoveFromEventList+0xb0>)
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d11d      	bne.n	8011612 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80115d6:	693b      	ldr	r3, [r7, #16]
 80115d8:	3304      	adds	r3, #4
 80115da:	4618      	mov	r0, r3
 80115dc:	f7fd fe74 	bl	800f2c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80115e0:	693b      	ldr	r3, [r7, #16]
 80115e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115e4:	4b19      	ldr	r3, [pc, #100]	; (801164c <xTaskRemoveFromEventList+0xb4>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	429a      	cmp	r2, r3
 80115ea:	d903      	bls.n	80115f4 <xTaskRemoveFromEventList+0x5c>
 80115ec:	693b      	ldr	r3, [r7, #16]
 80115ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115f0:	4a16      	ldr	r2, [pc, #88]	; (801164c <xTaskRemoveFromEventList+0xb4>)
 80115f2:	6013      	str	r3, [r2, #0]
 80115f4:	693b      	ldr	r3, [r7, #16]
 80115f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115f8:	4613      	mov	r3, r2
 80115fa:	009b      	lsls	r3, r3, #2
 80115fc:	4413      	add	r3, r2
 80115fe:	009b      	lsls	r3, r3, #2
 8011600:	4a13      	ldr	r2, [pc, #76]	; (8011650 <xTaskRemoveFromEventList+0xb8>)
 8011602:	441a      	add	r2, r3
 8011604:	693b      	ldr	r3, [r7, #16]
 8011606:	3304      	adds	r3, #4
 8011608:	4619      	mov	r1, r3
 801160a:	4610      	mov	r0, r2
 801160c:	f7fd fdff 	bl	800f20e <vListInsertEnd>
 8011610:	e005      	b.n	801161e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8011612:	693b      	ldr	r3, [r7, #16]
 8011614:	3318      	adds	r3, #24
 8011616:	4619      	mov	r1, r3
 8011618:	480e      	ldr	r0, [pc, #56]	; (8011654 <xTaskRemoveFromEventList+0xbc>)
 801161a:	f7fd fdf8 	bl	800f20e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801161e:	693b      	ldr	r3, [r7, #16]
 8011620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011622:	4b0d      	ldr	r3, [pc, #52]	; (8011658 <xTaskRemoveFromEventList+0xc0>)
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011628:	429a      	cmp	r2, r3
 801162a:	d905      	bls.n	8011638 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801162c:	2301      	movs	r3, #1
 801162e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011630:	4b0a      	ldr	r3, [pc, #40]	; (801165c <xTaskRemoveFromEventList+0xc4>)
 8011632:	2201      	movs	r2, #1
 8011634:	601a      	str	r2, [r3, #0]
 8011636:	e001      	b.n	801163c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011638:	2300      	movs	r3, #0
 801163a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801163c:	697b      	ldr	r3, [r7, #20]
}
 801163e:	4618      	mov	r0, r3
 8011640:	3718      	adds	r7, #24
 8011642:	46bd      	mov	sp, r7
 8011644:	bd80      	pop	{r7, pc}
 8011646:	bf00      	nop
 8011648:	20002244 	.word	0x20002244
 801164c:	20002224 	.word	0x20002224
 8011650:	20001d4c 	.word	0x20001d4c
 8011654:	200021dc 	.word	0x200021dc
 8011658:	20001d48 	.word	0x20001d48
 801165c:	20002230 	.word	0x20002230

08011660 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b084      	sub	sp, #16
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d10a      	bne.n	8011684 <vTaskSetTimeOutState+0x24>
	__asm volatile
 801166e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011672:	f383 8811 	msr	BASEPRI, r3
 8011676:	f3bf 8f6f 	isb	sy
 801167a:	f3bf 8f4f 	dsb	sy
 801167e:	60fb      	str	r3, [r7, #12]
}
 8011680:	bf00      	nop
 8011682:	e7fe      	b.n	8011682 <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8011684:	f001 f91e 	bl	80128c4 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011688:	4b06      	ldr	r3, [pc, #24]	; (80116a4 <vTaskSetTimeOutState+0x44>)
 801168a:	681a      	ldr	r2, [r3, #0]
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8011690:	4b05      	ldr	r3, [pc, #20]	; (80116a8 <vTaskSetTimeOutState+0x48>)
 8011692:	681a      	ldr	r2, [r3, #0]
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8011698:	f001 f944 	bl	8012924 <vPortExitCritical>
}
 801169c:	bf00      	nop
 801169e:	3710      	adds	r7, #16
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}
 80116a4:	20002234 	.word	0x20002234
 80116a8:	20002220 	.word	0x20002220

080116ac <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80116ac:	b480      	push	{r7}
 80116ae:	b083      	sub	sp, #12
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80116b4:	4b06      	ldr	r3, [pc, #24]	; (80116d0 <vTaskInternalSetTimeOutState+0x24>)
 80116b6:	681a      	ldr	r2, [r3, #0]
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80116bc:	4b05      	ldr	r3, [pc, #20]	; (80116d4 <vTaskInternalSetTimeOutState+0x28>)
 80116be:	681a      	ldr	r2, [r3, #0]
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	605a      	str	r2, [r3, #4]
}
 80116c4:	bf00      	nop
 80116c6:	370c      	adds	r7, #12
 80116c8:	46bd      	mov	sp, r7
 80116ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ce:	4770      	bx	lr
 80116d0:	20002234 	.word	0x20002234
 80116d4:	20002220 	.word	0x20002220

080116d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80116d8:	b580      	push	{r7, lr}
 80116da:	b088      	sub	sp, #32
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
 80116e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d10a      	bne.n	80116fe <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80116e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116ec:	f383 8811 	msr	BASEPRI, r3
 80116f0:	f3bf 8f6f 	isb	sy
 80116f4:	f3bf 8f4f 	dsb	sy
 80116f8:	613b      	str	r3, [r7, #16]
}
 80116fa:	bf00      	nop
 80116fc:	e7fe      	b.n	80116fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80116fe:	683b      	ldr	r3, [r7, #0]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d10a      	bne.n	801171a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011708:	f383 8811 	msr	BASEPRI, r3
 801170c:	f3bf 8f6f 	isb	sy
 8011710:	f3bf 8f4f 	dsb	sy
 8011714:	60fb      	str	r3, [r7, #12]
}
 8011716:	bf00      	nop
 8011718:	e7fe      	b.n	8011718 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801171a:	f001 f8d3 	bl	80128c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801171e:	4b1d      	ldr	r3, [pc, #116]	; (8011794 <xTaskCheckForTimeOut+0xbc>)
 8011720:	681b      	ldr	r3, [r3, #0]
 8011722:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	685b      	ldr	r3, [r3, #4]
 8011728:	69ba      	ldr	r2, [r7, #24]
 801172a:	1ad3      	subs	r3, r2, r3
 801172c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801172e:	683b      	ldr	r3, [r7, #0]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011736:	d102      	bne.n	801173e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011738:	2300      	movs	r3, #0
 801173a:	61fb      	str	r3, [r7, #28]
 801173c:	e023      	b.n	8011786 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	681a      	ldr	r2, [r3, #0]
 8011742:	4b15      	ldr	r3, [pc, #84]	; (8011798 <xTaskCheckForTimeOut+0xc0>)
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	429a      	cmp	r2, r3
 8011748:	d007      	beq.n	801175a <xTaskCheckForTimeOut+0x82>
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	685b      	ldr	r3, [r3, #4]
 801174e:	69ba      	ldr	r2, [r7, #24]
 8011750:	429a      	cmp	r2, r3
 8011752:	d302      	bcc.n	801175a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011754:	2301      	movs	r3, #1
 8011756:	61fb      	str	r3, [r7, #28]
 8011758:	e015      	b.n	8011786 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801175a:	683b      	ldr	r3, [r7, #0]
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	697a      	ldr	r2, [r7, #20]
 8011760:	429a      	cmp	r2, r3
 8011762:	d20b      	bcs.n	801177c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011764:	683b      	ldr	r3, [r7, #0]
 8011766:	681a      	ldr	r2, [r3, #0]
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	1ad2      	subs	r2, r2, r3
 801176c:	683b      	ldr	r3, [r7, #0]
 801176e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	f7ff ff9b 	bl	80116ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011776:	2300      	movs	r3, #0
 8011778:	61fb      	str	r3, [r7, #28]
 801177a:	e004      	b.n	8011786 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801177c:	683b      	ldr	r3, [r7, #0]
 801177e:	2200      	movs	r2, #0
 8011780:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8011782:	2301      	movs	r3, #1
 8011784:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011786:	f001 f8cd 	bl	8012924 <vPortExitCritical>

	return xReturn;
 801178a:	69fb      	ldr	r3, [r7, #28]
}
 801178c:	4618      	mov	r0, r3
 801178e:	3720      	adds	r7, #32
 8011790:	46bd      	mov	sp, r7
 8011792:	bd80      	pop	{r7, pc}
 8011794:	20002220 	.word	0x20002220
 8011798:	20002234 	.word	0x20002234

0801179c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801179c:	b480      	push	{r7}
 801179e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80117a0:	4b03      	ldr	r3, [pc, #12]	; (80117b0 <vTaskMissedYield+0x14>)
 80117a2:	2201      	movs	r2, #1
 80117a4:	601a      	str	r2, [r3, #0]
}
 80117a6:	bf00      	nop
 80117a8:	46bd      	mov	sp, r7
 80117aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ae:	4770      	bx	lr
 80117b0:	20002230 	.word	0x20002230

080117b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b082      	sub	sp, #8
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80117bc:	f000 f852 	bl	8011864 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80117c0:	4b06      	ldr	r3, [pc, #24]	; (80117dc <prvIdleTask+0x28>)
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	2b01      	cmp	r3, #1
 80117c6:	d9f9      	bls.n	80117bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80117c8:	4b05      	ldr	r3, [pc, #20]	; (80117e0 <prvIdleTask+0x2c>)
 80117ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117ce:	601a      	str	r2, [r3, #0]
 80117d0:	f3bf 8f4f 	dsb	sy
 80117d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80117d8:	e7f0      	b.n	80117bc <prvIdleTask+0x8>
 80117da:	bf00      	nop
 80117dc:	20001d4c 	.word	0x20001d4c
 80117e0:	e000ed04 	.word	0xe000ed04

080117e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b082      	sub	sp, #8
 80117e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80117ea:	2300      	movs	r3, #0
 80117ec:	607b      	str	r3, [r7, #4]
 80117ee:	e00c      	b.n	801180a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80117f0:	687a      	ldr	r2, [r7, #4]
 80117f2:	4613      	mov	r3, r2
 80117f4:	009b      	lsls	r3, r3, #2
 80117f6:	4413      	add	r3, r2
 80117f8:	009b      	lsls	r3, r3, #2
 80117fa:	4a12      	ldr	r2, [pc, #72]	; (8011844 <prvInitialiseTaskLists+0x60>)
 80117fc:	4413      	add	r3, r2
 80117fe:	4618      	mov	r0, r3
 8011800:	f7fd fcd8 	bl	800f1b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	3301      	adds	r3, #1
 8011808:	607b      	str	r3, [r7, #4]
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2b37      	cmp	r3, #55	; 0x37
 801180e:	d9ef      	bls.n	80117f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8011810:	480d      	ldr	r0, [pc, #52]	; (8011848 <prvInitialiseTaskLists+0x64>)
 8011812:	f7fd fccf 	bl	800f1b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011816:	480d      	ldr	r0, [pc, #52]	; (801184c <prvInitialiseTaskLists+0x68>)
 8011818:	f7fd fccc 	bl	800f1b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801181c:	480c      	ldr	r0, [pc, #48]	; (8011850 <prvInitialiseTaskLists+0x6c>)
 801181e:	f7fd fcc9 	bl	800f1b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8011822:	480c      	ldr	r0, [pc, #48]	; (8011854 <prvInitialiseTaskLists+0x70>)
 8011824:	f7fd fcc6 	bl	800f1b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011828:	480b      	ldr	r0, [pc, #44]	; (8011858 <prvInitialiseTaskLists+0x74>)
 801182a:	f7fd fcc3 	bl	800f1b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801182e:	4b0b      	ldr	r3, [pc, #44]	; (801185c <prvInitialiseTaskLists+0x78>)
 8011830:	4a05      	ldr	r2, [pc, #20]	; (8011848 <prvInitialiseTaskLists+0x64>)
 8011832:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011834:	4b0a      	ldr	r3, [pc, #40]	; (8011860 <prvInitialiseTaskLists+0x7c>)
 8011836:	4a05      	ldr	r2, [pc, #20]	; (801184c <prvInitialiseTaskLists+0x68>)
 8011838:	601a      	str	r2, [r3, #0]
}
 801183a:	bf00      	nop
 801183c:	3708      	adds	r7, #8
 801183e:	46bd      	mov	sp, r7
 8011840:	bd80      	pop	{r7, pc}
 8011842:	bf00      	nop
 8011844:	20001d4c 	.word	0x20001d4c
 8011848:	200021ac 	.word	0x200021ac
 801184c:	200021c0 	.word	0x200021c0
 8011850:	200021dc 	.word	0x200021dc
 8011854:	200021f0 	.word	0x200021f0
 8011858:	20002208 	.word	0x20002208
 801185c:	200021d4 	.word	0x200021d4
 8011860:	200021d8 	.word	0x200021d8

08011864 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b082      	sub	sp, #8
 8011868:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801186a:	e019      	b.n	80118a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801186c:	f001 f82a 	bl	80128c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011870:	4b10      	ldr	r3, [pc, #64]	; (80118b4 <prvCheckTasksWaitingTermination+0x50>)
 8011872:	68db      	ldr	r3, [r3, #12]
 8011874:	68db      	ldr	r3, [r3, #12]
 8011876:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	3304      	adds	r3, #4
 801187c:	4618      	mov	r0, r3
 801187e:	f7fd fd23 	bl	800f2c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8011882:	4b0d      	ldr	r3, [pc, #52]	; (80118b8 <prvCheckTasksWaitingTermination+0x54>)
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	3b01      	subs	r3, #1
 8011888:	4a0b      	ldr	r2, [pc, #44]	; (80118b8 <prvCheckTasksWaitingTermination+0x54>)
 801188a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801188c:	4b0b      	ldr	r3, [pc, #44]	; (80118bc <prvCheckTasksWaitingTermination+0x58>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	3b01      	subs	r3, #1
 8011892:	4a0a      	ldr	r2, [pc, #40]	; (80118bc <prvCheckTasksWaitingTermination+0x58>)
 8011894:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011896:	f001 f845 	bl	8012924 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801189a:	6878      	ldr	r0, [r7, #4]
 801189c:	f000 f810 	bl	80118c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80118a0:	4b06      	ldr	r3, [pc, #24]	; (80118bc <prvCheckTasksWaitingTermination+0x58>)
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d1e1      	bne.n	801186c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80118a8:	bf00      	nop
 80118aa:	bf00      	nop
 80118ac:	3708      	adds	r7, #8
 80118ae:	46bd      	mov	sp, r7
 80118b0:	bd80      	pop	{r7, pc}
 80118b2:	bf00      	nop
 80118b4:	200021f0 	.word	0x200021f0
 80118b8:	2000221c 	.word	0x2000221c
 80118bc:	20002204 	.word	0x20002204

080118c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b084      	sub	sp, #16
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	3358      	adds	r3, #88	; 0x58
 80118cc:	4618      	mov	r0, r3
 80118ce:	f002 fc13 	bl	80140f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d108      	bne.n	80118ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118e0:	4618      	mov	r0, r3
 80118e2:	f001 f9e1 	bl	8012ca8 <vPortFree>
				vPortFree( pxTCB );
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f001 f9de 	bl	8012ca8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80118ec:	e018      	b.n	8011920 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80118f4:	2b01      	cmp	r3, #1
 80118f6:	d103      	bne.n	8011900 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80118f8:	6878      	ldr	r0, [r7, #4]
 80118fa:	f001 f9d5 	bl	8012ca8 <vPortFree>
	}
 80118fe:	e00f      	b.n	8011920 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8011906:	2b02      	cmp	r3, #2
 8011908:	d00a      	beq.n	8011920 <prvDeleteTCB+0x60>
	__asm volatile
 801190a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801190e:	f383 8811 	msr	BASEPRI, r3
 8011912:	f3bf 8f6f 	isb	sy
 8011916:	f3bf 8f4f 	dsb	sy
 801191a:	60fb      	str	r3, [r7, #12]
}
 801191c:	bf00      	nop
 801191e:	e7fe      	b.n	801191e <prvDeleteTCB+0x5e>
	}
 8011920:	bf00      	nop
 8011922:	3710      	adds	r7, #16
 8011924:	46bd      	mov	sp, r7
 8011926:	bd80      	pop	{r7, pc}

08011928 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011928:	b480      	push	{r7}
 801192a:	b083      	sub	sp, #12
 801192c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801192e:	4b0c      	ldr	r3, [pc, #48]	; (8011960 <prvResetNextTaskUnblockTime+0x38>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d104      	bne.n	8011942 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011938:	4b0a      	ldr	r3, [pc, #40]	; (8011964 <prvResetNextTaskUnblockTime+0x3c>)
 801193a:	f04f 32ff 	mov.w	r2, #4294967295
 801193e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011940:	e008      	b.n	8011954 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011942:	4b07      	ldr	r3, [pc, #28]	; (8011960 <prvResetNextTaskUnblockTime+0x38>)
 8011944:	681b      	ldr	r3, [r3, #0]
 8011946:	68db      	ldr	r3, [r3, #12]
 8011948:	68db      	ldr	r3, [r3, #12]
 801194a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	685b      	ldr	r3, [r3, #4]
 8011950:	4a04      	ldr	r2, [pc, #16]	; (8011964 <prvResetNextTaskUnblockTime+0x3c>)
 8011952:	6013      	str	r3, [r2, #0]
}
 8011954:	bf00      	nop
 8011956:	370c      	adds	r7, #12
 8011958:	46bd      	mov	sp, r7
 801195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195e:	4770      	bx	lr
 8011960:	200021d4 	.word	0x200021d4
 8011964:	2000223c 	.word	0x2000223c

08011968 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8011968:	b480      	push	{r7}
 801196a:	b083      	sub	sp, #12
 801196c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801196e:	4b05      	ldr	r3, [pc, #20]	; (8011984 <xTaskGetCurrentTaskHandle+0x1c>)
 8011970:	681b      	ldr	r3, [r3, #0]
 8011972:	607b      	str	r3, [r7, #4]

		return xReturn;
 8011974:	687b      	ldr	r3, [r7, #4]
	}
 8011976:	4618      	mov	r0, r3
 8011978:	370c      	adds	r7, #12
 801197a:	46bd      	mov	sp, r7
 801197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011980:	4770      	bx	lr
 8011982:	bf00      	nop
 8011984:	20001d48 	.word	0x20001d48

08011988 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011988:	b480      	push	{r7}
 801198a:	b083      	sub	sp, #12
 801198c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801198e:	4b0b      	ldr	r3, [pc, #44]	; (80119bc <xTaskGetSchedulerState+0x34>)
 8011990:	681b      	ldr	r3, [r3, #0]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d102      	bne.n	801199c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011996:	2301      	movs	r3, #1
 8011998:	607b      	str	r3, [r7, #4]
 801199a:	e008      	b.n	80119ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801199c:	4b08      	ldr	r3, [pc, #32]	; (80119c0 <xTaskGetSchedulerState+0x38>)
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d102      	bne.n	80119aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80119a4:	2302      	movs	r3, #2
 80119a6:	607b      	str	r3, [r7, #4]
 80119a8:	e001      	b.n	80119ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80119aa:	2300      	movs	r3, #0
 80119ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80119ae:	687b      	ldr	r3, [r7, #4]
	}
 80119b0:	4618      	mov	r0, r3
 80119b2:	370c      	adds	r7, #12
 80119b4:	46bd      	mov	sp, r7
 80119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ba:	4770      	bx	lr
 80119bc:	20002228 	.word	0x20002228
 80119c0:	20002244 	.word	0x20002244

080119c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80119c4:	b580      	push	{r7, lr}
 80119c6:	b084      	sub	sp, #16
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80119d0:	2300      	movs	r3, #0
 80119d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d051      	beq.n	8011a7e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119de:	4b2a      	ldr	r3, [pc, #168]	; (8011a88 <xTaskPriorityInherit+0xc4>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d241      	bcs.n	8011a6c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	699b      	ldr	r3, [r3, #24]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	db06      	blt.n	80119fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119f0:	4b25      	ldr	r3, [pc, #148]	; (8011a88 <xTaskPriorityInherit+0xc4>)
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80119fa:	68bb      	ldr	r3, [r7, #8]
 80119fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	6959      	ldr	r1, [r3, #20]
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a06:	4613      	mov	r3, r2
 8011a08:	009b      	lsls	r3, r3, #2
 8011a0a:	4413      	add	r3, r2
 8011a0c:	009b      	lsls	r3, r3, #2
 8011a0e:	4a1f      	ldr	r2, [pc, #124]	; (8011a8c <xTaskPriorityInherit+0xc8>)
 8011a10:	4413      	add	r3, r2
 8011a12:	4299      	cmp	r1, r3
 8011a14:	d122      	bne.n	8011a5c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a16:	68bb      	ldr	r3, [r7, #8]
 8011a18:	3304      	adds	r3, #4
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f7fd fc54 	bl	800f2c8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011a20:	4b19      	ldr	r3, [pc, #100]	; (8011a88 <xTaskPriorityInherit+0xc4>)
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a26:	68bb      	ldr	r3, [r7, #8]
 8011a28:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011a2a:	68bb      	ldr	r3, [r7, #8]
 8011a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a2e:	4b18      	ldr	r3, [pc, #96]	; (8011a90 <xTaskPriorityInherit+0xcc>)
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	429a      	cmp	r2, r3
 8011a34:	d903      	bls.n	8011a3e <xTaskPriorityInherit+0x7a>
 8011a36:	68bb      	ldr	r3, [r7, #8]
 8011a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a3a:	4a15      	ldr	r2, [pc, #84]	; (8011a90 <xTaskPriorityInherit+0xcc>)
 8011a3c:	6013      	str	r3, [r2, #0]
 8011a3e:	68bb      	ldr	r3, [r7, #8]
 8011a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a42:	4613      	mov	r3, r2
 8011a44:	009b      	lsls	r3, r3, #2
 8011a46:	4413      	add	r3, r2
 8011a48:	009b      	lsls	r3, r3, #2
 8011a4a:	4a10      	ldr	r2, [pc, #64]	; (8011a8c <xTaskPriorityInherit+0xc8>)
 8011a4c:	441a      	add	r2, r3
 8011a4e:	68bb      	ldr	r3, [r7, #8]
 8011a50:	3304      	adds	r3, #4
 8011a52:	4619      	mov	r1, r3
 8011a54:	4610      	mov	r0, r2
 8011a56:	f7fd fbda 	bl	800f20e <vListInsertEnd>
 8011a5a:	e004      	b.n	8011a66 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011a5c:	4b0a      	ldr	r3, [pc, #40]	; (8011a88 <xTaskPriorityInherit+0xc4>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a62:	68bb      	ldr	r3, [r7, #8]
 8011a64:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011a66:	2301      	movs	r3, #1
 8011a68:	60fb      	str	r3, [r7, #12]
 8011a6a:	e008      	b.n	8011a7e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a70:	4b05      	ldr	r3, [pc, #20]	; (8011a88 <xTaskPriorityInherit+0xc4>)
 8011a72:	681b      	ldr	r3, [r3, #0]
 8011a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a76:	429a      	cmp	r2, r3
 8011a78:	d201      	bcs.n	8011a7e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011a7a:	2301      	movs	r3, #1
 8011a7c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011a7e:	68fb      	ldr	r3, [r7, #12]
	}
 8011a80:	4618      	mov	r0, r3
 8011a82:	3710      	adds	r7, #16
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}
 8011a88:	20001d48 	.word	0x20001d48
 8011a8c:	20001d4c 	.word	0x20001d4c
 8011a90:	20002224 	.word	0x20002224

08011a94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011a94:	b580      	push	{r7, lr}
 8011a96:	b086      	sub	sp, #24
 8011a98:	af00      	add	r7, sp, #0
 8011a9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d056      	beq.n	8011b58 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011aaa:	4b2e      	ldr	r3, [pc, #184]	; (8011b64 <xTaskPriorityDisinherit+0xd0>)
 8011aac:	681b      	ldr	r3, [r3, #0]
 8011aae:	693a      	ldr	r2, [r7, #16]
 8011ab0:	429a      	cmp	r2, r3
 8011ab2:	d00a      	beq.n	8011aca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ab8:	f383 8811 	msr	BASEPRI, r3
 8011abc:	f3bf 8f6f 	isb	sy
 8011ac0:	f3bf 8f4f 	dsb	sy
 8011ac4:	60fb      	str	r3, [r7, #12]
}
 8011ac6:	bf00      	nop
 8011ac8:	e7fe      	b.n	8011ac8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011aca:	693b      	ldr	r3, [r7, #16]
 8011acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d10a      	bne.n	8011ae8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ad6:	f383 8811 	msr	BASEPRI, r3
 8011ada:	f3bf 8f6f 	isb	sy
 8011ade:	f3bf 8f4f 	dsb	sy
 8011ae2:	60bb      	str	r3, [r7, #8]
}
 8011ae4:	bf00      	nop
 8011ae6:	e7fe      	b.n	8011ae6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011ae8:	693b      	ldr	r3, [r7, #16]
 8011aea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011aec:	1e5a      	subs	r2, r3, #1
 8011aee:	693b      	ldr	r3, [r7, #16]
 8011af0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011af6:	693b      	ldr	r3, [r7, #16]
 8011af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011afa:	429a      	cmp	r2, r3
 8011afc:	d02c      	beq.n	8011b58 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011afe:	693b      	ldr	r3, [r7, #16]
 8011b00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d128      	bne.n	8011b58 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	3304      	adds	r3, #4
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7fd fbdc 	bl	800f2c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011b10:	693b      	ldr	r3, [r7, #16]
 8011b12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b18:	693b      	ldr	r3, [r7, #16]
 8011b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b1c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011b24:	693b      	ldr	r3, [r7, #16]
 8011b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b28:	4b0f      	ldr	r3, [pc, #60]	; (8011b68 <xTaskPriorityDisinherit+0xd4>)
 8011b2a:	681b      	ldr	r3, [r3, #0]
 8011b2c:	429a      	cmp	r2, r3
 8011b2e:	d903      	bls.n	8011b38 <xTaskPriorityDisinherit+0xa4>
 8011b30:	693b      	ldr	r3, [r7, #16]
 8011b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b34:	4a0c      	ldr	r2, [pc, #48]	; (8011b68 <xTaskPriorityDisinherit+0xd4>)
 8011b36:	6013      	str	r3, [r2, #0]
 8011b38:	693b      	ldr	r3, [r7, #16]
 8011b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b3c:	4613      	mov	r3, r2
 8011b3e:	009b      	lsls	r3, r3, #2
 8011b40:	4413      	add	r3, r2
 8011b42:	009b      	lsls	r3, r3, #2
 8011b44:	4a09      	ldr	r2, [pc, #36]	; (8011b6c <xTaskPriorityDisinherit+0xd8>)
 8011b46:	441a      	add	r2, r3
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	3304      	adds	r3, #4
 8011b4c:	4619      	mov	r1, r3
 8011b4e:	4610      	mov	r0, r2
 8011b50:	f7fd fb5d 	bl	800f20e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011b54:	2301      	movs	r3, #1
 8011b56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011b58:	697b      	ldr	r3, [r7, #20]
	}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	3718      	adds	r7, #24
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd80      	pop	{r7, pc}
 8011b62:	bf00      	nop
 8011b64:	20001d48 	.word	0x20001d48
 8011b68:	20002224 	.word	0x20002224
 8011b6c:	20001d4c 	.word	0x20001d4c

08011b70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b088      	sub	sp, #32
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
 8011b78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011b7e:	2301      	movs	r3, #1
 8011b80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d06a      	beq.n	8011c5e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011b88:	69bb      	ldr	r3, [r7, #24]
 8011b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d10a      	bne.n	8011ba6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b94:	f383 8811 	msr	BASEPRI, r3
 8011b98:	f3bf 8f6f 	isb	sy
 8011b9c:	f3bf 8f4f 	dsb	sy
 8011ba0:	60fb      	str	r3, [r7, #12]
}
 8011ba2:	bf00      	nop
 8011ba4:	e7fe      	b.n	8011ba4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011ba6:	69bb      	ldr	r3, [r7, #24]
 8011ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011baa:	683a      	ldr	r2, [r7, #0]
 8011bac:	429a      	cmp	r2, r3
 8011bae:	d902      	bls.n	8011bb6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011bb0:	683b      	ldr	r3, [r7, #0]
 8011bb2:	61fb      	str	r3, [r7, #28]
 8011bb4:	e002      	b.n	8011bbc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011bb6:	69bb      	ldr	r3, [r7, #24]
 8011bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011bba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011bbc:	69bb      	ldr	r3, [r7, #24]
 8011bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bc0:	69fa      	ldr	r2, [r7, #28]
 8011bc2:	429a      	cmp	r2, r3
 8011bc4:	d04b      	beq.n	8011c5e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011bc6:	69bb      	ldr	r3, [r7, #24]
 8011bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011bca:	697a      	ldr	r2, [r7, #20]
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d146      	bne.n	8011c5e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011bd0:	4b25      	ldr	r3, [pc, #148]	; (8011c68 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	69ba      	ldr	r2, [r7, #24]
 8011bd6:	429a      	cmp	r2, r3
 8011bd8:	d10a      	bne.n	8011bf0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bde:	f383 8811 	msr	BASEPRI, r3
 8011be2:	f3bf 8f6f 	isb	sy
 8011be6:	f3bf 8f4f 	dsb	sy
 8011bea:	60bb      	str	r3, [r7, #8]
}
 8011bec:	bf00      	nop
 8011bee:	e7fe      	b.n	8011bee <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011bf0:	69bb      	ldr	r3, [r7, #24]
 8011bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bf4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011bf6:	69bb      	ldr	r3, [r7, #24]
 8011bf8:	69fa      	ldr	r2, [r7, #28]
 8011bfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011bfc:	69bb      	ldr	r3, [r7, #24]
 8011bfe:	699b      	ldr	r3, [r3, #24]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	db04      	blt.n	8011c0e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011c04:	69fb      	ldr	r3, [r7, #28]
 8011c06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011c0a:	69bb      	ldr	r3, [r7, #24]
 8011c0c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011c0e:	69bb      	ldr	r3, [r7, #24]
 8011c10:	6959      	ldr	r1, [r3, #20]
 8011c12:	693a      	ldr	r2, [r7, #16]
 8011c14:	4613      	mov	r3, r2
 8011c16:	009b      	lsls	r3, r3, #2
 8011c18:	4413      	add	r3, r2
 8011c1a:	009b      	lsls	r3, r3, #2
 8011c1c:	4a13      	ldr	r2, [pc, #76]	; (8011c6c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011c1e:	4413      	add	r3, r2
 8011c20:	4299      	cmp	r1, r3
 8011c22:	d11c      	bne.n	8011c5e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c24:	69bb      	ldr	r3, [r7, #24]
 8011c26:	3304      	adds	r3, #4
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f7fd fb4d 	bl	800f2c8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011c2e:	69bb      	ldr	r3, [r7, #24]
 8011c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c32:	4b0f      	ldr	r3, [pc, #60]	; (8011c70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	429a      	cmp	r2, r3
 8011c38:	d903      	bls.n	8011c42 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8011c3a:	69bb      	ldr	r3, [r7, #24]
 8011c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c3e:	4a0c      	ldr	r2, [pc, #48]	; (8011c70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011c40:	6013      	str	r3, [r2, #0]
 8011c42:	69bb      	ldr	r3, [r7, #24]
 8011c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c46:	4613      	mov	r3, r2
 8011c48:	009b      	lsls	r3, r3, #2
 8011c4a:	4413      	add	r3, r2
 8011c4c:	009b      	lsls	r3, r3, #2
 8011c4e:	4a07      	ldr	r2, [pc, #28]	; (8011c6c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011c50:	441a      	add	r2, r3
 8011c52:	69bb      	ldr	r3, [r7, #24]
 8011c54:	3304      	adds	r3, #4
 8011c56:	4619      	mov	r1, r3
 8011c58:	4610      	mov	r0, r2
 8011c5a:	f7fd fad8 	bl	800f20e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011c5e:	bf00      	nop
 8011c60:	3720      	adds	r7, #32
 8011c62:	46bd      	mov	sp, r7
 8011c64:	bd80      	pop	{r7, pc}
 8011c66:	bf00      	nop
 8011c68:	20001d48 	.word	0x20001d48
 8011c6c:	20001d4c 	.word	0x20001d4c
 8011c70:	20002224 	.word	0x20002224

08011c74 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011c74:	b480      	push	{r7}
 8011c76:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011c78:	4b07      	ldr	r3, [pc, #28]	; (8011c98 <pvTaskIncrementMutexHeldCount+0x24>)
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	d004      	beq.n	8011c8a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011c80:	4b05      	ldr	r3, [pc, #20]	; (8011c98 <pvTaskIncrementMutexHeldCount+0x24>)
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c86:	3201      	adds	r2, #1
 8011c88:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8011c8a:	4b03      	ldr	r3, [pc, #12]	; (8011c98 <pvTaskIncrementMutexHeldCount+0x24>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
	}
 8011c8e:	4618      	mov	r0, r3
 8011c90:	46bd      	mov	sp, r7
 8011c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c96:	4770      	bx	lr
 8011c98:	20001d48 	.word	0x20001d48

08011c9c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b086      	sub	sp, #24
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	60f8      	str	r0, [r7, #12]
 8011ca4:	60b9      	str	r1, [r7, #8]
 8011ca6:	607a      	str	r2, [r7, #4]
 8011ca8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8011caa:	f000 fe0b 	bl	80128c4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011cae:	4b29      	ldr	r3, [pc, #164]	; (8011d54 <xTaskNotifyWait+0xb8>)
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8011cb6:	b2db      	uxtb	r3, r3
 8011cb8:	2b02      	cmp	r3, #2
 8011cba:	d01c      	beq.n	8011cf6 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8011cbc:	4b25      	ldr	r3, [pc, #148]	; (8011d54 <xTaskNotifyWait+0xb8>)
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8011cc4:	68fa      	ldr	r2, [r7, #12]
 8011cc6:	43d2      	mvns	r2, r2
 8011cc8:	400a      	ands	r2, r1
 8011cca:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8011cce:	4b21      	ldr	r3, [pc, #132]	; (8011d54 <xTaskNotifyWait+0xb8>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	2201      	movs	r2, #1
 8011cd4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 8011cd8:	683b      	ldr	r3, [r7, #0]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d00b      	beq.n	8011cf6 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011cde:	2101      	movs	r1, #1
 8011ce0:	6838      	ldr	r0, [r7, #0]
 8011ce2:	f000 f91f 	bl	8011f24 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8011ce6:	4b1c      	ldr	r3, [pc, #112]	; (8011d58 <xTaskNotifyWait+0xbc>)
 8011ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cec:	601a      	str	r2, [r3, #0]
 8011cee:	f3bf 8f4f 	dsb	sy
 8011cf2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011cf6:	f000 fe15 	bl	8012924 <vPortExitCritical>

		taskENTER_CRITICAL();
 8011cfa:	f000 fde3 	bl	80128c4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d005      	beq.n	8011d10 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8011d04:	4b13      	ldr	r3, [pc, #76]	; (8011d54 <xTaskNotifyWait+0xb8>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8011d10:	4b10      	ldr	r3, [pc, #64]	; (8011d54 <xTaskNotifyWait+0xb8>)
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8011d18:	b2db      	uxtb	r3, r3
 8011d1a:	2b02      	cmp	r3, #2
 8011d1c:	d002      	beq.n	8011d24 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8011d1e:	2300      	movs	r3, #0
 8011d20:	617b      	str	r3, [r7, #20]
 8011d22:	e00a      	b.n	8011d3a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8011d24:	4b0b      	ldr	r3, [pc, #44]	; (8011d54 <xTaskNotifyWait+0xb8>)
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 8011d2c:	68ba      	ldr	r2, [r7, #8]
 8011d2e:	43d2      	mvns	r2, r2
 8011d30:	400a      	ands	r2, r1
 8011d32:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 8011d36:	2301      	movs	r3, #1
 8011d38:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011d3a:	4b06      	ldr	r3, [pc, #24]	; (8011d54 <xTaskNotifyWait+0xb8>)
 8011d3c:	681b      	ldr	r3, [r3, #0]
 8011d3e:	2200      	movs	r2, #0
 8011d40:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 8011d44:	f000 fdee 	bl	8012924 <vPortExitCritical>

		return xReturn;
 8011d48:	697b      	ldr	r3, [r7, #20]
	}
 8011d4a:	4618      	mov	r0, r3
 8011d4c:	3718      	adds	r7, #24
 8011d4e:	46bd      	mov	sp, r7
 8011d50:	bd80      	pop	{r7, pc}
 8011d52:	bf00      	nop
 8011d54:	20001d48 	.word	0x20001d48
 8011d58:	e000ed04 	.word	0xe000ed04

08011d5c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b08a      	sub	sp, #40	; 0x28
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	60f8      	str	r0, [r7, #12]
 8011d64:	60b9      	str	r1, [r7, #8]
 8011d66:	603b      	str	r3, [r7, #0]
 8011d68:	4613      	mov	r3, r2
 8011d6a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8011d6c:	2301      	movs	r3, #1
 8011d6e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d10a      	bne.n	8011d8c <xTaskGenericNotify+0x30>
	__asm volatile
 8011d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d7a:	f383 8811 	msr	BASEPRI, r3
 8011d7e:	f3bf 8f6f 	isb	sy
 8011d82:	f3bf 8f4f 	dsb	sy
 8011d86:	61bb      	str	r3, [r7, #24]
}
 8011d88:	bf00      	nop
 8011d8a:	e7fe      	b.n	8011d8a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8011d90:	f000 fd98 	bl	80128c4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8011d94:	683b      	ldr	r3, [r7, #0]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d004      	beq.n	8011da4 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8011d9a:	6a3b      	ldr	r3, [r7, #32]
 8011d9c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8011da0:	683b      	ldr	r3, [r7, #0]
 8011da2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8011da4:	6a3b      	ldr	r3, [r7, #32]
 8011da6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8011daa:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8011dac:	6a3b      	ldr	r3, [r7, #32]
 8011dae:	2202      	movs	r2, #2
 8011db0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 8011db4:	79fb      	ldrb	r3, [r7, #7]
 8011db6:	2b04      	cmp	r3, #4
 8011db8:	d82d      	bhi.n	8011e16 <xTaskGenericNotify+0xba>
 8011dba:	a201      	add	r2, pc, #4	; (adr r2, 8011dc0 <xTaskGenericNotify+0x64>)
 8011dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dc0:	08011e39 	.word	0x08011e39
 8011dc4:	08011dd5 	.word	0x08011dd5
 8011dc8:	08011de7 	.word	0x08011de7
 8011dcc:	08011df7 	.word	0x08011df7
 8011dd0:	08011e01 	.word	0x08011e01
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8011dd4:	6a3b      	ldr	r3, [r7, #32]
 8011dd6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8011dda:	68bb      	ldr	r3, [r7, #8]
 8011ddc:	431a      	orrs	r2, r3
 8011dde:	6a3b      	ldr	r3, [r7, #32]
 8011de0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8011de4:	e02b      	b.n	8011e3e <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8011de6:	6a3b      	ldr	r3, [r7, #32]
 8011de8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011dec:	1c5a      	adds	r2, r3, #1
 8011dee:	6a3b      	ldr	r3, [r7, #32]
 8011df0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8011df4:	e023      	b.n	8011e3e <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8011df6:	6a3b      	ldr	r3, [r7, #32]
 8011df8:	68ba      	ldr	r2, [r7, #8]
 8011dfa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 8011dfe:	e01e      	b.n	8011e3e <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8011e00:	7ffb      	ldrb	r3, [r7, #31]
 8011e02:	2b02      	cmp	r3, #2
 8011e04:	d004      	beq.n	8011e10 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8011e06:	6a3b      	ldr	r3, [r7, #32]
 8011e08:	68ba      	ldr	r2, [r7, #8]
 8011e0a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8011e0e:	e016      	b.n	8011e3e <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8011e10:	2300      	movs	r3, #0
 8011e12:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8011e14:	e013      	b.n	8011e3e <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8011e16:	6a3b      	ldr	r3, [r7, #32]
 8011e18:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8011e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e20:	d00c      	beq.n	8011e3c <xTaskGenericNotify+0xe0>
	__asm volatile
 8011e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e26:	f383 8811 	msr	BASEPRI, r3
 8011e2a:	f3bf 8f6f 	isb	sy
 8011e2e:	f3bf 8f4f 	dsb	sy
 8011e32:	617b      	str	r3, [r7, #20]
}
 8011e34:	bf00      	nop
 8011e36:	e7fe      	b.n	8011e36 <xTaskGenericNotify+0xda>
					break;
 8011e38:	bf00      	nop
 8011e3a:	e000      	b.n	8011e3e <xTaskGenericNotify+0xe2>

					break;
 8011e3c:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8011e3e:	7ffb      	ldrb	r3, [r7, #31]
 8011e40:	2b01      	cmp	r3, #1
 8011e42:	d13a      	bne.n	8011eba <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011e44:	6a3b      	ldr	r3, [r7, #32]
 8011e46:	3304      	adds	r3, #4
 8011e48:	4618      	mov	r0, r3
 8011e4a:	f7fd fa3d 	bl	800f2c8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8011e4e:	6a3b      	ldr	r3, [r7, #32]
 8011e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e52:	4b1d      	ldr	r3, [pc, #116]	; (8011ec8 <xTaskGenericNotify+0x16c>)
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d903      	bls.n	8011e62 <xTaskGenericNotify+0x106>
 8011e5a:	6a3b      	ldr	r3, [r7, #32]
 8011e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e5e:	4a1a      	ldr	r2, [pc, #104]	; (8011ec8 <xTaskGenericNotify+0x16c>)
 8011e60:	6013      	str	r3, [r2, #0]
 8011e62:	6a3b      	ldr	r3, [r7, #32]
 8011e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e66:	4613      	mov	r3, r2
 8011e68:	009b      	lsls	r3, r3, #2
 8011e6a:	4413      	add	r3, r2
 8011e6c:	009b      	lsls	r3, r3, #2
 8011e6e:	4a17      	ldr	r2, [pc, #92]	; (8011ecc <xTaskGenericNotify+0x170>)
 8011e70:	441a      	add	r2, r3
 8011e72:	6a3b      	ldr	r3, [r7, #32]
 8011e74:	3304      	adds	r3, #4
 8011e76:	4619      	mov	r1, r3
 8011e78:	4610      	mov	r0, r2
 8011e7a:	f7fd f9c8 	bl	800f20e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8011e7e:	6a3b      	ldr	r3, [r7, #32]
 8011e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d00a      	beq.n	8011e9c <xTaskGenericNotify+0x140>
	__asm volatile
 8011e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e8a:	f383 8811 	msr	BASEPRI, r3
 8011e8e:	f3bf 8f6f 	isb	sy
 8011e92:	f3bf 8f4f 	dsb	sy
 8011e96:	613b      	str	r3, [r7, #16]
}
 8011e98:	bf00      	nop
 8011e9a:	e7fe      	b.n	8011e9a <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011e9c:	6a3b      	ldr	r3, [r7, #32]
 8011e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ea0:	4b0b      	ldr	r3, [pc, #44]	; (8011ed0 <xTaskGenericNotify+0x174>)
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d907      	bls.n	8011eba <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8011eaa:	4b0a      	ldr	r3, [pc, #40]	; (8011ed4 <xTaskGenericNotify+0x178>)
 8011eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011eb0:	601a      	str	r2, [r3, #0]
 8011eb2:	f3bf 8f4f 	dsb	sy
 8011eb6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8011eba:	f000 fd33 	bl	8012924 <vPortExitCritical>

		return xReturn;
 8011ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	3728      	adds	r7, #40	; 0x28
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	bd80      	pop	{r7, pc}
 8011ec8:	20002224 	.word	0x20002224
 8011ecc:	20001d4c 	.word	0x20001d4c
 8011ed0:	20001d48 	.word	0x20001d48
 8011ed4:	e000ed04 	.word	0xe000ed04

08011ed8 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b084      	sub	sp, #16
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d102      	bne.n	8011eec <xTaskNotifyStateClear+0x14>
 8011ee6:	4b0e      	ldr	r3, [pc, #56]	; (8011f20 <xTaskNotifyStateClear+0x48>)
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	e000      	b.n	8011eee <xTaskNotifyStateClear+0x16>
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8011ef0:	f000 fce8 	bl	80128c4 <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8011ef4:	68bb      	ldr	r3, [r7, #8]
 8011ef6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8011efa:	b2db      	uxtb	r3, r3
 8011efc:	2b02      	cmp	r3, #2
 8011efe:	d106      	bne.n	8011f0e <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011f00:	68bb      	ldr	r3, [r7, #8]
 8011f02:	2200      	movs	r2, #0
 8011f04:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
				xReturn = pdPASS;
 8011f08:	2301      	movs	r3, #1
 8011f0a:	60fb      	str	r3, [r7, #12]
 8011f0c:	e001      	b.n	8011f12 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8011f0e:	2300      	movs	r3, #0
 8011f10:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8011f12:	f000 fd07 	bl	8012924 <vPortExitCritical>

		return xReturn;
 8011f16:	68fb      	ldr	r3, [r7, #12]
	}
 8011f18:	4618      	mov	r0, r3
 8011f1a:	3710      	adds	r7, #16
 8011f1c:	46bd      	mov	sp, r7
 8011f1e:	bd80      	pop	{r7, pc}
 8011f20:	20001d48 	.word	0x20001d48

08011f24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b084      	sub	sp, #16
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
 8011f2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011f2e:	4b21      	ldr	r3, [pc, #132]	; (8011fb4 <prvAddCurrentTaskToDelayedList+0x90>)
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011f34:	4b20      	ldr	r3, [pc, #128]	; (8011fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	3304      	adds	r3, #4
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	f7fd f9c4 	bl	800f2c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f46:	d10a      	bne.n	8011f5e <prvAddCurrentTaskToDelayedList+0x3a>
 8011f48:	683b      	ldr	r3, [r7, #0]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d007      	beq.n	8011f5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f4e:	4b1a      	ldr	r3, [pc, #104]	; (8011fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f50:	681b      	ldr	r3, [r3, #0]
 8011f52:	3304      	adds	r3, #4
 8011f54:	4619      	mov	r1, r3
 8011f56:	4819      	ldr	r0, [pc, #100]	; (8011fbc <prvAddCurrentTaskToDelayedList+0x98>)
 8011f58:	f7fd f959 	bl	800f20e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011f5c:	e026      	b.n	8011fac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011f5e:	68fa      	ldr	r2, [r7, #12]
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	4413      	add	r3, r2
 8011f64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011f66:	4b14      	ldr	r3, [pc, #80]	; (8011fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	68ba      	ldr	r2, [r7, #8]
 8011f6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011f6e:	68ba      	ldr	r2, [r7, #8]
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	429a      	cmp	r2, r3
 8011f74:	d209      	bcs.n	8011f8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f76:	4b12      	ldr	r3, [pc, #72]	; (8011fc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011f78:	681a      	ldr	r2, [r3, #0]
 8011f7a:	4b0f      	ldr	r3, [pc, #60]	; (8011fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	3304      	adds	r3, #4
 8011f80:	4619      	mov	r1, r3
 8011f82:	4610      	mov	r0, r2
 8011f84:	f7fd f967 	bl	800f256 <vListInsert>
}
 8011f88:	e010      	b.n	8011fac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011f8a:	4b0e      	ldr	r3, [pc, #56]	; (8011fc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011f8c:	681a      	ldr	r2, [r3, #0]
 8011f8e:	4b0a      	ldr	r3, [pc, #40]	; (8011fb8 <prvAddCurrentTaskToDelayedList+0x94>)
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	3304      	adds	r3, #4
 8011f94:	4619      	mov	r1, r3
 8011f96:	4610      	mov	r0, r2
 8011f98:	f7fd f95d 	bl	800f256 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011f9c:	4b0a      	ldr	r3, [pc, #40]	; (8011fc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	68ba      	ldr	r2, [r7, #8]
 8011fa2:	429a      	cmp	r2, r3
 8011fa4:	d202      	bcs.n	8011fac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011fa6:	4a08      	ldr	r2, [pc, #32]	; (8011fc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8011fa8:	68bb      	ldr	r3, [r7, #8]
 8011faa:	6013      	str	r3, [r2, #0]
}
 8011fac:	bf00      	nop
 8011fae:	3710      	adds	r7, #16
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}
 8011fb4:	20002220 	.word	0x20002220
 8011fb8:	20001d48 	.word	0x20001d48
 8011fbc:	20002208 	.word	0x20002208
 8011fc0:	200021d8 	.word	0x200021d8
 8011fc4:	200021d4 	.word	0x200021d4
 8011fc8:	2000223c 	.word	0x2000223c

08011fcc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011fcc:	b580      	push	{r7, lr}
 8011fce:	b08a      	sub	sp, #40	; 0x28
 8011fd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011fd6:	f000 fb07 	bl	80125e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011fda:	4b1c      	ldr	r3, [pc, #112]	; (801204c <xTimerCreateTimerTask+0x80>)
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d021      	beq.n	8012026 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011fea:	1d3a      	adds	r2, r7, #4
 8011fec:	f107 0108 	add.w	r1, r7, #8
 8011ff0:	f107 030c 	add.w	r3, r7, #12
 8011ff4:	4618      	mov	r0, r3
 8011ff6:	f7fd f8c3 	bl	800f180 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011ffa:	6879      	ldr	r1, [r7, #4]
 8011ffc:	68bb      	ldr	r3, [r7, #8]
 8011ffe:	68fa      	ldr	r2, [r7, #12]
 8012000:	9202      	str	r2, [sp, #8]
 8012002:	9301      	str	r3, [sp, #4]
 8012004:	2302      	movs	r3, #2
 8012006:	9300      	str	r3, [sp, #0]
 8012008:	2300      	movs	r3, #0
 801200a:	460a      	mov	r2, r1
 801200c:	4910      	ldr	r1, [pc, #64]	; (8012050 <xTimerCreateTimerTask+0x84>)
 801200e:	4811      	ldr	r0, [pc, #68]	; (8012054 <xTimerCreateTimerTask+0x88>)
 8012010:	f7fe fe0a 	bl	8010c28 <xTaskCreateStatic>
 8012014:	4603      	mov	r3, r0
 8012016:	4a10      	ldr	r2, [pc, #64]	; (8012058 <xTimerCreateTimerTask+0x8c>)
 8012018:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801201a:	4b0f      	ldr	r3, [pc, #60]	; (8012058 <xTimerCreateTimerTask+0x8c>)
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	2b00      	cmp	r3, #0
 8012020:	d001      	beq.n	8012026 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8012022:	2301      	movs	r3, #1
 8012024:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8012026:	697b      	ldr	r3, [r7, #20]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d10a      	bne.n	8012042 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801202c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012030:	f383 8811 	msr	BASEPRI, r3
 8012034:	f3bf 8f6f 	isb	sy
 8012038:	f3bf 8f4f 	dsb	sy
 801203c:	613b      	str	r3, [r7, #16]
}
 801203e:	bf00      	nop
 8012040:	e7fe      	b.n	8012040 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8012042:	697b      	ldr	r3, [r7, #20]
}
 8012044:	4618      	mov	r0, r3
 8012046:	3718      	adds	r7, #24
 8012048:	46bd      	mov	sp, r7
 801204a:	bd80      	pop	{r7, pc}
 801204c:	20002280 	.word	0x20002280
 8012050:	08016294 	.word	0x08016294
 8012054:	08012191 	.word	0x08012191
 8012058:	20002284 	.word	0x20002284

0801205c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b08a      	sub	sp, #40	; 0x28
 8012060:	af00      	add	r7, sp, #0
 8012062:	60f8      	str	r0, [r7, #12]
 8012064:	60b9      	str	r1, [r7, #8]
 8012066:	607a      	str	r2, [r7, #4]
 8012068:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801206a:	2300      	movs	r3, #0
 801206c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d10a      	bne.n	801208a <xTimerGenericCommand+0x2e>
	__asm volatile
 8012074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012078:	f383 8811 	msr	BASEPRI, r3
 801207c:	f3bf 8f6f 	isb	sy
 8012080:	f3bf 8f4f 	dsb	sy
 8012084:	623b      	str	r3, [r7, #32]
}
 8012086:	bf00      	nop
 8012088:	e7fe      	b.n	8012088 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801208a:	4b1a      	ldr	r3, [pc, #104]	; (80120f4 <xTimerGenericCommand+0x98>)
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d02a      	beq.n	80120e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8012092:	68bb      	ldr	r3, [r7, #8]
 8012094:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801209e:	68bb      	ldr	r3, [r7, #8]
 80120a0:	2b05      	cmp	r3, #5
 80120a2:	dc18      	bgt.n	80120d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80120a4:	f7ff fc70 	bl	8011988 <xTaskGetSchedulerState>
 80120a8:	4603      	mov	r3, r0
 80120aa:	2b02      	cmp	r3, #2
 80120ac:	d109      	bne.n	80120c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80120ae:	4b11      	ldr	r3, [pc, #68]	; (80120f4 <xTimerGenericCommand+0x98>)
 80120b0:	6818      	ldr	r0, [r3, #0]
 80120b2:	f107 0110 	add.w	r1, r7, #16
 80120b6:	2300      	movs	r3, #0
 80120b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120ba:	f7fd fb8d 	bl	800f7d8 <xQueueGenericSend>
 80120be:	6278      	str	r0, [r7, #36]	; 0x24
 80120c0:	e012      	b.n	80120e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80120c2:	4b0c      	ldr	r3, [pc, #48]	; (80120f4 <xTimerGenericCommand+0x98>)
 80120c4:	6818      	ldr	r0, [r3, #0]
 80120c6:	f107 0110 	add.w	r1, r7, #16
 80120ca:	2300      	movs	r3, #0
 80120cc:	2200      	movs	r2, #0
 80120ce:	f7fd fb83 	bl	800f7d8 <xQueueGenericSend>
 80120d2:	6278      	str	r0, [r7, #36]	; 0x24
 80120d4:	e008      	b.n	80120e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80120d6:	4b07      	ldr	r3, [pc, #28]	; (80120f4 <xTimerGenericCommand+0x98>)
 80120d8:	6818      	ldr	r0, [r3, #0]
 80120da:	f107 0110 	add.w	r1, r7, #16
 80120de:	2300      	movs	r3, #0
 80120e0:	683a      	ldr	r2, [r7, #0]
 80120e2:	f7fd fc77 	bl	800f9d4 <xQueueGenericSendFromISR>
 80120e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80120e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80120ea:	4618      	mov	r0, r3
 80120ec:	3728      	adds	r7, #40	; 0x28
 80120ee:	46bd      	mov	sp, r7
 80120f0:	bd80      	pop	{r7, pc}
 80120f2:	bf00      	nop
 80120f4:	20002280 	.word	0x20002280

080120f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80120f8:	b580      	push	{r7, lr}
 80120fa:	b088      	sub	sp, #32
 80120fc:	af02      	add	r7, sp, #8
 80120fe:	6078      	str	r0, [r7, #4]
 8012100:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012102:	4b22      	ldr	r3, [pc, #136]	; (801218c <prvProcessExpiredTimer+0x94>)
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	68db      	ldr	r3, [r3, #12]
 8012108:	68db      	ldr	r3, [r3, #12]
 801210a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801210c:	697b      	ldr	r3, [r7, #20]
 801210e:	3304      	adds	r3, #4
 8012110:	4618      	mov	r0, r3
 8012112:	f7fd f8d9 	bl	800f2c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012116:	697b      	ldr	r3, [r7, #20]
 8012118:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801211c:	f003 0304 	and.w	r3, r3, #4
 8012120:	2b00      	cmp	r3, #0
 8012122:	d022      	beq.n	801216a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8012124:	697b      	ldr	r3, [r7, #20]
 8012126:	699a      	ldr	r2, [r3, #24]
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	18d1      	adds	r1, r2, r3
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	683a      	ldr	r2, [r7, #0]
 8012130:	6978      	ldr	r0, [r7, #20]
 8012132:	f000 f8d1 	bl	80122d8 <prvInsertTimerInActiveList>
 8012136:	4603      	mov	r3, r0
 8012138:	2b00      	cmp	r3, #0
 801213a:	d01f      	beq.n	801217c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801213c:	2300      	movs	r3, #0
 801213e:	9300      	str	r3, [sp, #0]
 8012140:	2300      	movs	r3, #0
 8012142:	687a      	ldr	r2, [r7, #4]
 8012144:	2100      	movs	r1, #0
 8012146:	6978      	ldr	r0, [r7, #20]
 8012148:	f7ff ff88 	bl	801205c <xTimerGenericCommand>
 801214c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801214e:	693b      	ldr	r3, [r7, #16]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d113      	bne.n	801217c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8012154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012158:	f383 8811 	msr	BASEPRI, r3
 801215c:	f3bf 8f6f 	isb	sy
 8012160:	f3bf 8f4f 	dsb	sy
 8012164:	60fb      	str	r3, [r7, #12]
}
 8012166:	bf00      	nop
 8012168:	e7fe      	b.n	8012168 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801216a:	697b      	ldr	r3, [r7, #20]
 801216c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012170:	f023 0301 	bic.w	r3, r3, #1
 8012174:	b2da      	uxtb	r2, r3
 8012176:	697b      	ldr	r3, [r7, #20]
 8012178:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801217c:	697b      	ldr	r3, [r7, #20]
 801217e:	6a1b      	ldr	r3, [r3, #32]
 8012180:	6978      	ldr	r0, [r7, #20]
 8012182:	4798      	blx	r3
}
 8012184:	bf00      	nop
 8012186:	3718      	adds	r7, #24
 8012188:	46bd      	mov	sp, r7
 801218a:	bd80      	pop	{r7, pc}
 801218c:	20002278 	.word	0x20002278

08012190 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b084      	sub	sp, #16
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8012198:	f107 0308 	add.w	r3, r7, #8
 801219c:	4618      	mov	r0, r3
 801219e:	f000 f857 	bl	8012250 <prvGetNextExpireTime>
 80121a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	4619      	mov	r1, r3
 80121a8:	68f8      	ldr	r0, [r7, #12]
 80121aa:	f000 f803 	bl	80121b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80121ae:	f000 f8d5 	bl	801235c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80121b2:	e7f1      	b.n	8012198 <prvTimerTask+0x8>

080121b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b084      	sub	sp, #16
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	6078      	str	r0, [r7, #4]
 80121bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80121be:	f7fe ff95 	bl	80110ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80121c2:	f107 0308 	add.w	r3, r7, #8
 80121c6:	4618      	mov	r0, r3
 80121c8:	f000 f866 	bl	8012298 <prvSampleTimeNow>
 80121cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80121ce:	68bb      	ldr	r3, [r7, #8]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d130      	bne.n	8012236 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80121d4:	683b      	ldr	r3, [r7, #0]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d10a      	bne.n	80121f0 <prvProcessTimerOrBlockTask+0x3c>
 80121da:	687a      	ldr	r2, [r7, #4]
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	429a      	cmp	r2, r3
 80121e0:	d806      	bhi.n	80121f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80121e2:	f7fe ff91 	bl	8011108 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80121e6:	68f9      	ldr	r1, [r7, #12]
 80121e8:	6878      	ldr	r0, [r7, #4]
 80121ea:	f7ff ff85 	bl	80120f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80121ee:	e024      	b.n	801223a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d008      	beq.n	8012208 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80121f6:	4b13      	ldr	r3, [pc, #76]	; (8012244 <prvProcessTimerOrBlockTask+0x90>)
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d101      	bne.n	8012204 <prvProcessTimerOrBlockTask+0x50>
 8012200:	2301      	movs	r3, #1
 8012202:	e000      	b.n	8012206 <prvProcessTimerOrBlockTask+0x52>
 8012204:	2300      	movs	r3, #0
 8012206:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8012208:	4b0f      	ldr	r3, [pc, #60]	; (8012248 <prvProcessTimerOrBlockTask+0x94>)
 801220a:	6818      	ldr	r0, [r3, #0]
 801220c:	687a      	ldr	r2, [r7, #4]
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	1ad3      	subs	r3, r2, r3
 8012212:	683a      	ldr	r2, [r7, #0]
 8012214:	4619      	mov	r1, r3
 8012216:	f7fe f94d 	bl	80104b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801221a:	f7fe ff75 	bl	8011108 <xTaskResumeAll>
 801221e:	4603      	mov	r3, r0
 8012220:	2b00      	cmp	r3, #0
 8012222:	d10a      	bne.n	801223a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8012224:	4b09      	ldr	r3, [pc, #36]	; (801224c <prvProcessTimerOrBlockTask+0x98>)
 8012226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801222a:	601a      	str	r2, [r3, #0]
 801222c:	f3bf 8f4f 	dsb	sy
 8012230:	f3bf 8f6f 	isb	sy
}
 8012234:	e001      	b.n	801223a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8012236:	f7fe ff67 	bl	8011108 <xTaskResumeAll>
}
 801223a:	bf00      	nop
 801223c:	3710      	adds	r7, #16
 801223e:	46bd      	mov	sp, r7
 8012240:	bd80      	pop	{r7, pc}
 8012242:	bf00      	nop
 8012244:	2000227c 	.word	0x2000227c
 8012248:	20002280 	.word	0x20002280
 801224c:	e000ed04 	.word	0xe000ed04

08012250 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8012250:	b480      	push	{r7}
 8012252:	b085      	sub	sp, #20
 8012254:	af00      	add	r7, sp, #0
 8012256:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8012258:	4b0e      	ldr	r3, [pc, #56]	; (8012294 <prvGetNextExpireTime+0x44>)
 801225a:	681b      	ldr	r3, [r3, #0]
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	2b00      	cmp	r3, #0
 8012260:	d101      	bne.n	8012266 <prvGetNextExpireTime+0x16>
 8012262:	2201      	movs	r2, #1
 8012264:	e000      	b.n	8012268 <prvGetNextExpireTime+0x18>
 8012266:	2200      	movs	r2, #0
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d105      	bne.n	8012280 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012274:	4b07      	ldr	r3, [pc, #28]	; (8012294 <prvGetNextExpireTime+0x44>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	68db      	ldr	r3, [r3, #12]
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	60fb      	str	r3, [r7, #12]
 801227e:	e001      	b.n	8012284 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8012280:	2300      	movs	r3, #0
 8012282:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8012284:	68fb      	ldr	r3, [r7, #12]
}
 8012286:	4618      	mov	r0, r3
 8012288:	3714      	adds	r7, #20
 801228a:	46bd      	mov	sp, r7
 801228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012290:	4770      	bx	lr
 8012292:	bf00      	nop
 8012294:	20002278 	.word	0x20002278

08012298 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b084      	sub	sp, #16
 801229c:	af00      	add	r7, sp, #0
 801229e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80122a0:	f7fe ffd0 	bl	8011244 <xTaskGetTickCount>
 80122a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80122a6:	4b0b      	ldr	r3, [pc, #44]	; (80122d4 <prvSampleTimeNow+0x3c>)
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	68fa      	ldr	r2, [r7, #12]
 80122ac:	429a      	cmp	r2, r3
 80122ae:	d205      	bcs.n	80122bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80122b0:	f000 f936 	bl	8012520 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	2201      	movs	r2, #1
 80122b8:	601a      	str	r2, [r3, #0]
 80122ba:	e002      	b.n	80122c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	2200      	movs	r2, #0
 80122c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80122c2:	4a04      	ldr	r2, [pc, #16]	; (80122d4 <prvSampleTimeNow+0x3c>)
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80122c8:	68fb      	ldr	r3, [r7, #12]
}
 80122ca:	4618      	mov	r0, r3
 80122cc:	3710      	adds	r7, #16
 80122ce:	46bd      	mov	sp, r7
 80122d0:	bd80      	pop	{r7, pc}
 80122d2:	bf00      	nop
 80122d4:	20002288 	.word	0x20002288

080122d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80122d8:	b580      	push	{r7, lr}
 80122da:	b086      	sub	sp, #24
 80122dc:	af00      	add	r7, sp, #0
 80122de:	60f8      	str	r0, [r7, #12]
 80122e0:	60b9      	str	r1, [r7, #8]
 80122e2:	607a      	str	r2, [r7, #4]
 80122e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80122e6:	2300      	movs	r3, #0
 80122e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	68ba      	ldr	r2, [r7, #8]
 80122ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	68fa      	ldr	r2, [r7, #12]
 80122f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80122f6:	68ba      	ldr	r2, [r7, #8]
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	429a      	cmp	r2, r3
 80122fc:	d812      	bhi.n	8012324 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122fe:	687a      	ldr	r2, [r7, #4]
 8012300:	683b      	ldr	r3, [r7, #0]
 8012302:	1ad2      	subs	r2, r2, r3
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	699b      	ldr	r3, [r3, #24]
 8012308:	429a      	cmp	r2, r3
 801230a:	d302      	bcc.n	8012312 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801230c:	2301      	movs	r3, #1
 801230e:	617b      	str	r3, [r7, #20]
 8012310:	e01b      	b.n	801234a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012312:	4b10      	ldr	r3, [pc, #64]	; (8012354 <prvInsertTimerInActiveList+0x7c>)
 8012314:	681a      	ldr	r2, [r3, #0]
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	3304      	adds	r3, #4
 801231a:	4619      	mov	r1, r3
 801231c:	4610      	mov	r0, r2
 801231e:	f7fc ff9a 	bl	800f256 <vListInsert>
 8012322:	e012      	b.n	801234a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012324:	687a      	ldr	r2, [r7, #4]
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	429a      	cmp	r2, r3
 801232a:	d206      	bcs.n	801233a <prvInsertTimerInActiveList+0x62>
 801232c:	68ba      	ldr	r2, [r7, #8]
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	429a      	cmp	r2, r3
 8012332:	d302      	bcc.n	801233a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012334:	2301      	movs	r3, #1
 8012336:	617b      	str	r3, [r7, #20]
 8012338:	e007      	b.n	801234a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801233a:	4b07      	ldr	r3, [pc, #28]	; (8012358 <prvInsertTimerInActiveList+0x80>)
 801233c:	681a      	ldr	r2, [r3, #0]
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	3304      	adds	r3, #4
 8012342:	4619      	mov	r1, r3
 8012344:	4610      	mov	r0, r2
 8012346:	f7fc ff86 	bl	800f256 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801234a:	697b      	ldr	r3, [r7, #20]
}
 801234c:	4618      	mov	r0, r3
 801234e:	3718      	adds	r7, #24
 8012350:	46bd      	mov	sp, r7
 8012352:	bd80      	pop	{r7, pc}
 8012354:	2000227c 	.word	0x2000227c
 8012358:	20002278 	.word	0x20002278

0801235c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b08e      	sub	sp, #56	; 0x38
 8012360:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012362:	e0ca      	b.n	80124fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2b00      	cmp	r3, #0
 8012368:	da18      	bge.n	801239c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801236a:	1d3b      	adds	r3, r7, #4
 801236c:	3304      	adds	r3, #4
 801236e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012372:	2b00      	cmp	r3, #0
 8012374:	d10a      	bne.n	801238c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8012376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801237a:	f383 8811 	msr	BASEPRI, r3
 801237e:	f3bf 8f6f 	isb	sy
 8012382:	f3bf 8f4f 	dsb	sy
 8012386:	61fb      	str	r3, [r7, #28]
}
 8012388:	bf00      	nop
 801238a:	e7fe      	b.n	801238a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801238c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012392:	6850      	ldr	r0, [r2, #4]
 8012394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012396:	6892      	ldr	r2, [r2, #8]
 8012398:	4611      	mov	r1, r2
 801239a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	f2c0 80aa 	blt.w	80124f8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80123a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123aa:	695b      	ldr	r3, [r3, #20]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d004      	beq.n	80123ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80123b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123b2:	3304      	adds	r3, #4
 80123b4:	4618      	mov	r0, r3
 80123b6:	f7fc ff87 	bl	800f2c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80123ba:	463b      	mov	r3, r7
 80123bc:	4618      	mov	r0, r3
 80123be:	f7ff ff6b 	bl	8012298 <prvSampleTimeNow>
 80123c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	2b09      	cmp	r3, #9
 80123c8:	f200 8097 	bhi.w	80124fa <prvProcessReceivedCommands+0x19e>
 80123cc:	a201      	add	r2, pc, #4	; (adr r2, 80123d4 <prvProcessReceivedCommands+0x78>)
 80123ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123d2:	bf00      	nop
 80123d4:	080123fd 	.word	0x080123fd
 80123d8:	080123fd 	.word	0x080123fd
 80123dc:	080123fd 	.word	0x080123fd
 80123e0:	08012471 	.word	0x08012471
 80123e4:	08012485 	.word	0x08012485
 80123e8:	080124cf 	.word	0x080124cf
 80123ec:	080123fd 	.word	0x080123fd
 80123f0:	080123fd 	.word	0x080123fd
 80123f4:	08012471 	.word	0x08012471
 80123f8:	08012485 	.word	0x08012485
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80123fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012402:	f043 0301 	orr.w	r3, r3, #1
 8012406:	b2da      	uxtb	r2, r3
 8012408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801240a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801240e:	68ba      	ldr	r2, [r7, #8]
 8012410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012412:	699b      	ldr	r3, [r3, #24]
 8012414:	18d1      	adds	r1, r2, r3
 8012416:	68bb      	ldr	r3, [r7, #8]
 8012418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801241a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801241c:	f7ff ff5c 	bl	80122d8 <prvInsertTimerInActiveList>
 8012420:	4603      	mov	r3, r0
 8012422:	2b00      	cmp	r3, #0
 8012424:	d069      	beq.n	80124fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012428:	6a1b      	ldr	r3, [r3, #32]
 801242a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801242c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801242e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012430:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012434:	f003 0304 	and.w	r3, r3, #4
 8012438:	2b00      	cmp	r3, #0
 801243a:	d05e      	beq.n	80124fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801243c:	68ba      	ldr	r2, [r7, #8]
 801243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012440:	699b      	ldr	r3, [r3, #24]
 8012442:	441a      	add	r2, r3
 8012444:	2300      	movs	r3, #0
 8012446:	9300      	str	r3, [sp, #0]
 8012448:	2300      	movs	r3, #0
 801244a:	2100      	movs	r1, #0
 801244c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801244e:	f7ff fe05 	bl	801205c <xTimerGenericCommand>
 8012452:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012454:	6a3b      	ldr	r3, [r7, #32]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d14f      	bne.n	80124fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801245a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801245e:	f383 8811 	msr	BASEPRI, r3
 8012462:	f3bf 8f6f 	isb	sy
 8012466:	f3bf 8f4f 	dsb	sy
 801246a:	61bb      	str	r3, [r7, #24]
}
 801246c:	bf00      	nop
 801246e:	e7fe      	b.n	801246e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012472:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012476:	f023 0301 	bic.w	r3, r3, #1
 801247a:	b2da      	uxtb	r2, r3
 801247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801247e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8012482:	e03a      	b.n	80124fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012486:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801248a:	f043 0301 	orr.w	r3, r3, #1
 801248e:	b2da      	uxtb	r2, r3
 8012490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012492:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012496:	68ba      	ldr	r2, [r7, #8]
 8012498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801249a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801249c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801249e:	699b      	ldr	r3, [r3, #24]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d10a      	bne.n	80124ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80124a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124a8:	f383 8811 	msr	BASEPRI, r3
 80124ac:	f3bf 8f6f 	isb	sy
 80124b0:	f3bf 8f4f 	dsb	sy
 80124b4:	617b      	str	r3, [r7, #20]
}
 80124b6:	bf00      	nop
 80124b8:	e7fe      	b.n	80124b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80124ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124bc:	699a      	ldr	r2, [r3, #24]
 80124be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c0:	18d1      	adds	r1, r2, r3
 80124c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80124c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124c8:	f7ff ff06 	bl	80122d8 <prvInsertTimerInActiveList>
					break;
 80124cc:	e015      	b.n	80124fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80124ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124d4:	f003 0302 	and.w	r3, r3, #2
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d103      	bne.n	80124e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80124dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80124de:	f000 fbe3 	bl	8012ca8 <vPortFree>
 80124e2:	e00a      	b.n	80124fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80124e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80124ea:	f023 0301 	bic.w	r3, r3, #1
 80124ee:	b2da      	uxtb	r2, r3
 80124f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80124f6:	e000      	b.n	80124fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80124f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80124fa:	4b08      	ldr	r3, [pc, #32]	; (801251c <prvProcessReceivedCommands+0x1c0>)
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	1d39      	adds	r1, r7, #4
 8012500:	2200      	movs	r2, #0
 8012502:	4618      	mov	r0, r3
 8012504:	f7fd fb8e 	bl	800fc24 <xQueueReceive>
 8012508:	4603      	mov	r3, r0
 801250a:	2b00      	cmp	r3, #0
 801250c:	f47f af2a 	bne.w	8012364 <prvProcessReceivedCommands+0x8>
	}
}
 8012510:	bf00      	nop
 8012512:	bf00      	nop
 8012514:	3730      	adds	r7, #48	; 0x30
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}
 801251a:	bf00      	nop
 801251c:	20002280 	.word	0x20002280

08012520 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012520:	b580      	push	{r7, lr}
 8012522:	b088      	sub	sp, #32
 8012524:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012526:	e048      	b.n	80125ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8012528:	4b2d      	ldr	r3, [pc, #180]	; (80125e0 <prvSwitchTimerLists+0xc0>)
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	68db      	ldr	r3, [r3, #12]
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012532:	4b2b      	ldr	r3, [pc, #172]	; (80125e0 <prvSwitchTimerLists+0xc0>)
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	68db      	ldr	r3, [r3, #12]
 8012538:	68db      	ldr	r3, [r3, #12]
 801253a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801253c:	68fb      	ldr	r3, [r7, #12]
 801253e:	3304      	adds	r3, #4
 8012540:	4618      	mov	r0, r3
 8012542:	f7fc fec1 	bl	800f2c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	6a1b      	ldr	r3, [r3, #32]
 801254a:	68f8      	ldr	r0, [r7, #12]
 801254c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012554:	f003 0304 	and.w	r3, r3, #4
 8012558:	2b00      	cmp	r3, #0
 801255a:	d02e      	beq.n	80125ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	699b      	ldr	r3, [r3, #24]
 8012560:	693a      	ldr	r2, [r7, #16]
 8012562:	4413      	add	r3, r2
 8012564:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8012566:	68ba      	ldr	r2, [r7, #8]
 8012568:	693b      	ldr	r3, [r7, #16]
 801256a:	429a      	cmp	r2, r3
 801256c:	d90e      	bls.n	801258c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	68ba      	ldr	r2, [r7, #8]
 8012572:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	68fa      	ldr	r2, [r7, #12]
 8012578:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801257a:	4b19      	ldr	r3, [pc, #100]	; (80125e0 <prvSwitchTimerLists+0xc0>)
 801257c:	681a      	ldr	r2, [r3, #0]
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	3304      	adds	r3, #4
 8012582:	4619      	mov	r1, r3
 8012584:	4610      	mov	r0, r2
 8012586:	f7fc fe66 	bl	800f256 <vListInsert>
 801258a:	e016      	b.n	80125ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801258c:	2300      	movs	r3, #0
 801258e:	9300      	str	r3, [sp, #0]
 8012590:	2300      	movs	r3, #0
 8012592:	693a      	ldr	r2, [r7, #16]
 8012594:	2100      	movs	r1, #0
 8012596:	68f8      	ldr	r0, [r7, #12]
 8012598:	f7ff fd60 	bl	801205c <xTimerGenericCommand>
 801259c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d10a      	bne.n	80125ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 80125a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125a8:	f383 8811 	msr	BASEPRI, r3
 80125ac:	f3bf 8f6f 	isb	sy
 80125b0:	f3bf 8f4f 	dsb	sy
 80125b4:	603b      	str	r3, [r7, #0]
}
 80125b6:	bf00      	nop
 80125b8:	e7fe      	b.n	80125b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80125ba:	4b09      	ldr	r3, [pc, #36]	; (80125e0 <prvSwitchTimerLists+0xc0>)
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d1b1      	bne.n	8012528 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80125c4:	4b06      	ldr	r3, [pc, #24]	; (80125e0 <prvSwitchTimerLists+0xc0>)
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80125ca:	4b06      	ldr	r3, [pc, #24]	; (80125e4 <prvSwitchTimerLists+0xc4>)
 80125cc:	681b      	ldr	r3, [r3, #0]
 80125ce:	4a04      	ldr	r2, [pc, #16]	; (80125e0 <prvSwitchTimerLists+0xc0>)
 80125d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80125d2:	4a04      	ldr	r2, [pc, #16]	; (80125e4 <prvSwitchTimerLists+0xc4>)
 80125d4:	697b      	ldr	r3, [r7, #20]
 80125d6:	6013      	str	r3, [r2, #0]
}
 80125d8:	bf00      	nop
 80125da:	3718      	adds	r7, #24
 80125dc:	46bd      	mov	sp, r7
 80125de:	bd80      	pop	{r7, pc}
 80125e0:	20002278 	.word	0x20002278
 80125e4:	2000227c 	.word	0x2000227c

080125e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80125e8:	b580      	push	{r7, lr}
 80125ea:	b082      	sub	sp, #8
 80125ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80125ee:	f000 f969 	bl	80128c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80125f2:	4b15      	ldr	r3, [pc, #84]	; (8012648 <prvCheckForValidListAndQueue+0x60>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d120      	bne.n	801263c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80125fa:	4814      	ldr	r0, [pc, #80]	; (801264c <prvCheckForValidListAndQueue+0x64>)
 80125fc:	f7fc fdda 	bl	800f1b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012600:	4813      	ldr	r0, [pc, #76]	; (8012650 <prvCheckForValidListAndQueue+0x68>)
 8012602:	f7fc fdd7 	bl	800f1b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8012606:	4b13      	ldr	r3, [pc, #76]	; (8012654 <prvCheckForValidListAndQueue+0x6c>)
 8012608:	4a10      	ldr	r2, [pc, #64]	; (801264c <prvCheckForValidListAndQueue+0x64>)
 801260a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801260c:	4b12      	ldr	r3, [pc, #72]	; (8012658 <prvCheckForValidListAndQueue+0x70>)
 801260e:	4a10      	ldr	r2, [pc, #64]	; (8012650 <prvCheckForValidListAndQueue+0x68>)
 8012610:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012612:	2300      	movs	r3, #0
 8012614:	9300      	str	r3, [sp, #0]
 8012616:	4b11      	ldr	r3, [pc, #68]	; (801265c <prvCheckForValidListAndQueue+0x74>)
 8012618:	4a11      	ldr	r2, [pc, #68]	; (8012660 <prvCheckForValidListAndQueue+0x78>)
 801261a:	2110      	movs	r1, #16
 801261c:	200a      	movs	r0, #10
 801261e:	f7fc fee5 	bl	800f3ec <xQueueGenericCreateStatic>
 8012622:	4603      	mov	r3, r0
 8012624:	4a08      	ldr	r2, [pc, #32]	; (8012648 <prvCheckForValidListAndQueue+0x60>)
 8012626:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8012628:	4b07      	ldr	r3, [pc, #28]	; (8012648 <prvCheckForValidListAndQueue+0x60>)
 801262a:	681b      	ldr	r3, [r3, #0]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d005      	beq.n	801263c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012630:	4b05      	ldr	r3, [pc, #20]	; (8012648 <prvCheckForValidListAndQueue+0x60>)
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	490b      	ldr	r1, [pc, #44]	; (8012664 <prvCheckForValidListAndQueue+0x7c>)
 8012636:	4618      	mov	r0, r3
 8012638:	f7fd fee8 	bl	801040c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801263c:	f000 f972 	bl	8012924 <vPortExitCritical>
}
 8012640:	bf00      	nop
 8012642:	46bd      	mov	sp, r7
 8012644:	bd80      	pop	{r7, pc}
 8012646:	bf00      	nop
 8012648:	20002280 	.word	0x20002280
 801264c:	20002250 	.word	0x20002250
 8012650:	20002264 	.word	0x20002264
 8012654:	20002278 	.word	0x20002278
 8012658:	2000227c 	.word	0x2000227c
 801265c:	2000232c 	.word	0x2000232c
 8012660:	2000228c 	.word	0x2000228c
 8012664:	0801629c 	.word	0x0801629c

08012668 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012668:	b480      	push	{r7}
 801266a:	b085      	sub	sp, #20
 801266c:	af00      	add	r7, sp, #0
 801266e:	60f8      	str	r0, [r7, #12]
 8012670:	60b9      	str	r1, [r7, #8]
 8012672:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	3b04      	subs	r3, #4
 8012678:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012680:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	3b04      	subs	r3, #4
 8012686:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012688:	68bb      	ldr	r3, [r7, #8]
 801268a:	f023 0201 	bic.w	r2, r3, #1
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	3b04      	subs	r3, #4
 8012696:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012698:	4a0c      	ldr	r2, [pc, #48]	; (80126cc <pxPortInitialiseStack+0x64>)
 801269a:	68fb      	ldr	r3, [r7, #12]
 801269c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	3b14      	subs	r3, #20
 80126a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80126a4:	687a      	ldr	r2, [r7, #4]
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	3b04      	subs	r3, #4
 80126ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	f06f 0202 	mvn.w	r2, #2
 80126b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	3b20      	subs	r3, #32
 80126bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80126be:	68fb      	ldr	r3, [r7, #12]
}
 80126c0:	4618      	mov	r0, r3
 80126c2:	3714      	adds	r7, #20
 80126c4:	46bd      	mov	sp, r7
 80126c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ca:	4770      	bx	lr
 80126cc:	080126d1 	.word	0x080126d1

080126d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80126d0:	b480      	push	{r7}
 80126d2:	b085      	sub	sp, #20
 80126d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80126d6:	2300      	movs	r3, #0
 80126d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80126da:	4b12      	ldr	r3, [pc, #72]	; (8012724 <prvTaskExitError+0x54>)
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126e2:	d00a      	beq.n	80126fa <prvTaskExitError+0x2a>
	__asm volatile
 80126e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126e8:	f383 8811 	msr	BASEPRI, r3
 80126ec:	f3bf 8f6f 	isb	sy
 80126f0:	f3bf 8f4f 	dsb	sy
 80126f4:	60fb      	str	r3, [r7, #12]
}
 80126f6:	bf00      	nop
 80126f8:	e7fe      	b.n	80126f8 <prvTaskExitError+0x28>
	__asm volatile
 80126fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126fe:	f383 8811 	msr	BASEPRI, r3
 8012702:	f3bf 8f6f 	isb	sy
 8012706:	f3bf 8f4f 	dsb	sy
 801270a:	60bb      	str	r3, [r7, #8]
}
 801270c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801270e:	bf00      	nop
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d0fc      	beq.n	8012710 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012716:	bf00      	nop
 8012718:	bf00      	nop
 801271a:	3714      	adds	r7, #20
 801271c:	46bd      	mov	sp, r7
 801271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012722:	4770      	bx	lr
 8012724:	2000001c 	.word	0x2000001c
	...

08012730 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012730:	4b07      	ldr	r3, [pc, #28]	; (8012750 <pxCurrentTCBConst2>)
 8012732:	6819      	ldr	r1, [r3, #0]
 8012734:	6808      	ldr	r0, [r1, #0]
 8012736:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801273a:	f380 8809 	msr	PSP, r0
 801273e:	f3bf 8f6f 	isb	sy
 8012742:	f04f 0000 	mov.w	r0, #0
 8012746:	f380 8811 	msr	BASEPRI, r0
 801274a:	4770      	bx	lr
 801274c:	f3af 8000 	nop.w

08012750 <pxCurrentTCBConst2>:
 8012750:	20001d48 	.word	0x20001d48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012754:	bf00      	nop
 8012756:	bf00      	nop

08012758 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012758:	4808      	ldr	r0, [pc, #32]	; (801277c <prvPortStartFirstTask+0x24>)
 801275a:	6800      	ldr	r0, [r0, #0]
 801275c:	6800      	ldr	r0, [r0, #0]
 801275e:	f380 8808 	msr	MSP, r0
 8012762:	f04f 0000 	mov.w	r0, #0
 8012766:	f380 8814 	msr	CONTROL, r0
 801276a:	b662      	cpsie	i
 801276c:	b661      	cpsie	f
 801276e:	f3bf 8f4f 	dsb	sy
 8012772:	f3bf 8f6f 	isb	sy
 8012776:	df00      	svc	0
 8012778:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801277a:	bf00      	nop
 801277c:	e000ed08 	.word	0xe000ed08

08012780 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b086      	sub	sp, #24
 8012784:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012786:	4b46      	ldr	r3, [pc, #280]	; (80128a0 <xPortStartScheduler+0x120>)
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	4a46      	ldr	r2, [pc, #280]	; (80128a4 <xPortStartScheduler+0x124>)
 801278c:	4293      	cmp	r3, r2
 801278e:	d10a      	bne.n	80127a6 <xPortStartScheduler+0x26>
	__asm volatile
 8012790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012794:	f383 8811 	msr	BASEPRI, r3
 8012798:	f3bf 8f6f 	isb	sy
 801279c:	f3bf 8f4f 	dsb	sy
 80127a0:	613b      	str	r3, [r7, #16]
}
 80127a2:	bf00      	nop
 80127a4:	e7fe      	b.n	80127a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80127a6:	4b3e      	ldr	r3, [pc, #248]	; (80128a0 <xPortStartScheduler+0x120>)
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	4a3f      	ldr	r2, [pc, #252]	; (80128a8 <xPortStartScheduler+0x128>)
 80127ac:	4293      	cmp	r3, r2
 80127ae:	d10a      	bne.n	80127c6 <xPortStartScheduler+0x46>
	__asm volatile
 80127b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127b4:	f383 8811 	msr	BASEPRI, r3
 80127b8:	f3bf 8f6f 	isb	sy
 80127bc:	f3bf 8f4f 	dsb	sy
 80127c0:	60fb      	str	r3, [r7, #12]
}
 80127c2:	bf00      	nop
 80127c4:	e7fe      	b.n	80127c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80127c6:	4b39      	ldr	r3, [pc, #228]	; (80128ac <xPortStartScheduler+0x12c>)
 80127c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80127ca:	697b      	ldr	r3, [r7, #20]
 80127cc:	781b      	ldrb	r3, [r3, #0]
 80127ce:	b2db      	uxtb	r3, r3
 80127d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80127d2:	697b      	ldr	r3, [r7, #20]
 80127d4:	22ff      	movs	r2, #255	; 0xff
 80127d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80127d8:	697b      	ldr	r3, [r7, #20]
 80127da:	781b      	ldrb	r3, [r3, #0]
 80127dc:	b2db      	uxtb	r3, r3
 80127de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80127e0:	78fb      	ldrb	r3, [r7, #3]
 80127e2:	b2db      	uxtb	r3, r3
 80127e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80127e8:	b2da      	uxtb	r2, r3
 80127ea:	4b31      	ldr	r3, [pc, #196]	; (80128b0 <xPortStartScheduler+0x130>)
 80127ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80127ee:	4b31      	ldr	r3, [pc, #196]	; (80128b4 <xPortStartScheduler+0x134>)
 80127f0:	2207      	movs	r2, #7
 80127f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80127f4:	e009      	b.n	801280a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80127f6:	4b2f      	ldr	r3, [pc, #188]	; (80128b4 <xPortStartScheduler+0x134>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	3b01      	subs	r3, #1
 80127fc:	4a2d      	ldr	r2, [pc, #180]	; (80128b4 <xPortStartScheduler+0x134>)
 80127fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012800:	78fb      	ldrb	r3, [r7, #3]
 8012802:	b2db      	uxtb	r3, r3
 8012804:	005b      	lsls	r3, r3, #1
 8012806:	b2db      	uxtb	r3, r3
 8012808:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801280a:	78fb      	ldrb	r3, [r7, #3]
 801280c:	b2db      	uxtb	r3, r3
 801280e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012812:	2b80      	cmp	r3, #128	; 0x80
 8012814:	d0ef      	beq.n	80127f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012816:	4b27      	ldr	r3, [pc, #156]	; (80128b4 <xPortStartScheduler+0x134>)
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	f1c3 0307 	rsb	r3, r3, #7
 801281e:	2b04      	cmp	r3, #4
 8012820:	d00a      	beq.n	8012838 <xPortStartScheduler+0xb8>
	__asm volatile
 8012822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012826:	f383 8811 	msr	BASEPRI, r3
 801282a:	f3bf 8f6f 	isb	sy
 801282e:	f3bf 8f4f 	dsb	sy
 8012832:	60bb      	str	r3, [r7, #8]
}
 8012834:	bf00      	nop
 8012836:	e7fe      	b.n	8012836 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012838:	4b1e      	ldr	r3, [pc, #120]	; (80128b4 <xPortStartScheduler+0x134>)
 801283a:	681b      	ldr	r3, [r3, #0]
 801283c:	021b      	lsls	r3, r3, #8
 801283e:	4a1d      	ldr	r2, [pc, #116]	; (80128b4 <xPortStartScheduler+0x134>)
 8012840:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012842:	4b1c      	ldr	r3, [pc, #112]	; (80128b4 <xPortStartScheduler+0x134>)
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801284a:	4a1a      	ldr	r2, [pc, #104]	; (80128b4 <xPortStartScheduler+0x134>)
 801284c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	b2da      	uxtb	r2, r3
 8012852:	697b      	ldr	r3, [r7, #20]
 8012854:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012856:	4b18      	ldr	r3, [pc, #96]	; (80128b8 <xPortStartScheduler+0x138>)
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	4a17      	ldr	r2, [pc, #92]	; (80128b8 <xPortStartScheduler+0x138>)
 801285c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012860:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012862:	4b15      	ldr	r3, [pc, #84]	; (80128b8 <xPortStartScheduler+0x138>)
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	4a14      	ldr	r2, [pc, #80]	; (80128b8 <xPortStartScheduler+0x138>)
 8012868:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801286c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801286e:	f000 f8dd 	bl	8012a2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012872:	4b12      	ldr	r3, [pc, #72]	; (80128bc <xPortStartScheduler+0x13c>)
 8012874:	2200      	movs	r2, #0
 8012876:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012878:	f000 f8fc 	bl	8012a74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801287c:	4b10      	ldr	r3, [pc, #64]	; (80128c0 <xPortStartScheduler+0x140>)
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	4a0f      	ldr	r2, [pc, #60]	; (80128c0 <xPortStartScheduler+0x140>)
 8012882:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012886:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012888:	f7ff ff66 	bl	8012758 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801288c:	f7fe fda4 	bl	80113d8 <vTaskSwitchContext>
	prvTaskExitError();
 8012890:	f7ff ff1e 	bl	80126d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012894:	2300      	movs	r3, #0
}
 8012896:	4618      	mov	r0, r3
 8012898:	3718      	adds	r7, #24
 801289a:	46bd      	mov	sp, r7
 801289c:	bd80      	pop	{r7, pc}
 801289e:	bf00      	nop
 80128a0:	e000ed00 	.word	0xe000ed00
 80128a4:	410fc271 	.word	0x410fc271
 80128a8:	410fc270 	.word	0x410fc270
 80128ac:	e000e400 	.word	0xe000e400
 80128b0:	2000237c 	.word	0x2000237c
 80128b4:	20002380 	.word	0x20002380
 80128b8:	e000ed20 	.word	0xe000ed20
 80128bc:	2000001c 	.word	0x2000001c
 80128c0:	e000ef34 	.word	0xe000ef34

080128c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80128c4:	b480      	push	{r7}
 80128c6:	b083      	sub	sp, #12
 80128c8:	af00      	add	r7, sp, #0
	__asm volatile
 80128ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128ce:	f383 8811 	msr	BASEPRI, r3
 80128d2:	f3bf 8f6f 	isb	sy
 80128d6:	f3bf 8f4f 	dsb	sy
 80128da:	607b      	str	r3, [r7, #4]
}
 80128dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80128de:	4b0f      	ldr	r3, [pc, #60]	; (801291c <vPortEnterCritical+0x58>)
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	3301      	adds	r3, #1
 80128e4:	4a0d      	ldr	r2, [pc, #52]	; (801291c <vPortEnterCritical+0x58>)
 80128e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80128e8:	4b0c      	ldr	r3, [pc, #48]	; (801291c <vPortEnterCritical+0x58>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	2b01      	cmp	r3, #1
 80128ee:	d10f      	bne.n	8012910 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80128f0:	4b0b      	ldr	r3, [pc, #44]	; (8012920 <vPortEnterCritical+0x5c>)
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	b2db      	uxtb	r3, r3
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d00a      	beq.n	8012910 <vPortEnterCritical+0x4c>
	__asm volatile
 80128fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128fe:	f383 8811 	msr	BASEPRI, r3
 8012902:	f3bf 8f6f 	isb	sy
 8012906:	f3bf 8f4f 	dsb	sy
 801290a:	603b      	str	r3, [r7, #0]
}
 801290c:	bf00      	nop
 801290e:	e7fe      	b.n	801290e <vPortEnterCritical+0x4a>
	}
}
 8012910:	bf00      	nop
 8012912:	370c      	adds	r7, #12
 8012914:	46bd      	mov	sp, r7
 8012916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291a:	4770      	bx	lr
 801291c:	2000001c 	.word	0x2000001c
 8012920:	e000ed04 	.word	0xe000ed04

08012924 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012924:	b480      	push	{r7}
 8012926:	b083      	sub	sp, #12
 8012928:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801292a:	4b12      	ldr	r3, [pc, #72]	; (8012974 <vPortExitCritical+0x50>)
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d10a      	bne.n	8012948 <vPortExitCritical+0x24>
	__asm volatile
 8012932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012936:	f383 8811 	msr	BASEPRI, r3
 801293a:	f3bf 8f6f 	isb	sy
 801293e:	f3bf 8f4f 	dsb	sy
 8012942:	607b      	str	r3, [r7, #4]
}
 8012944:	bf00      	nop
 8012946:	e7fe      	b.n	8012946 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012948:	4b0a      	ldr	r3, [pc, #40]	; (8012974 <vPortExitCritical+0x50>)
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	3b01      	subs	r3, #1
 801294e:	4a09      	ldr	r2, [pc, #36]	; (8012974 <vPortExitCritical+0x50>)
 8012950:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012952:	4b08      	ldr	r3, [pc, #32]	; (8012974 <vPortExitCritical+0x50>)
 8012954:	681b      	ldr	r3, [r3, #0]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d105      	bne.n	8012966 <vPortExitCritical+0x42>
 801295a:	2300      	movs	r3, #0
 801295c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	f383 8811 	msr	BASEPRI, r3
}
 8012964:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012966:	bf00      	nop
 8012968:	370c      	adds	r7, #12
 801296a:	46bd      	mov	sp, r7
 801296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012970:	4770      	bx	lr
 8012972:	bf00      	nop
 8012974:	2000001c 	.word	0x2000001c
	...

08012980 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012980:	f3ef 8009 	mrs	r0, PSP
 8012984:	f3bf 8f6f 	isb	sy
 8012988:	4b15      	ldr	r3, [pc, #84]	; (80129e0 <pxCurrentTCBConst>)
 801298a:	681a      	ldr	r2, [r3, #0]
 801298c:	f01e 0f10 	tst.w	lr, #16
 8012990:	bf08      	it	eq
 8012992:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012996:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801299a:	6010      	str	r0, [r2, #0]
 801299c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80129a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80129a4:	f380 8811 	msr	BASEPRI, r0
 80129a8:	f3bf 8f4f 	dsb	sy
 80129ac:	f3bf 8f6f 	isb	sy
 80129b0:	f7fe fd12 	bl	80113d8 <vTaskSwitchContext>
 80129b4:	f04f 0000 	mov.w	r0, #0
 80129b8:	f380 8811 	msr	BASEPRI, r0
 80129bc:	bc09      	pop	{r0, r3}
 80129be:	6819      	ldr	r1, [r3, #0]
 80129c0:	6808      	ldr	r0, [r1, #0]
 80129c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129c6:	f01e 0f10 	tst.w	lr, #16
 80129ca:	bf08      	it	eq
 80129cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80129d0:	f380 8809 	msr	PSP, r0
 80129d4:	f3bf 8f6f 	isb	sy
 80129d8:	4770      	bx	lr
 80129da:	bf00      	nop
 80129dc:	f3af 8000 	nop.w

080129e0 <pxCurrentTCBConst>:
 80129e0:	20001d48 	.word	0x20001d48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80129e4:	bf00      	nop
 80129e6:	bf00      	nop

080129e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b082      	sub	sp, #8
 80129ec:	af00      	add	r7, sp, #0
	__asm volatile
 80129ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129f2:	f383 8811 	msr	BASEPRI, r3
 80129f6:	f3bf 8f6f 	isb	sy
 80129fa:	f3bf 8f4f 	dsb	sy
 80129fe:	607b      	str	r3, [r7, #4]
}
 8012a00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012a02:	f7fe fc2f 	bl	8011264 <xTaskIncrementTick>
 8012a06:	4603      	mov	r3, r0
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d003      	beq.n	8012a14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012a0c:	4b06      	ldr	r3, [pc, #24]	; (8012a28 <xPortSysTickHandler+0x40>)
 8012a0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012a12:	601a      	str	r2, [r3, #0]
 8012a14:	2300      	movs	r3, #0
 8012a16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012a18:	683b      	ldr	r3, [r7, #0]
 8012a1a:	f383 8811 	msr	BASEPRI, r3
}
 8012a1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012a20:	bf00      	nop
 8012a22:	3708      	adds	r7, #8
 8012a24:	46bd      	mov	sp, r7
 8012a26:	bd80      	pop	{r7, pc}
 8012a28:	e000ed04 	.word	0xe000ed04

08012a2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012a2c:	b480      	push	{r7}
 8012a2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012a30:	4b0b      	ldr	r3, [pc, #44]	; (8012a60 <vPortSetupTimerInterrupt+0x34>)
 8012a32:	2200      	movs	r2, #0
 8012a34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012a36:	4b0b      	ldr	r3, [pc, #44]	; (8012a64 <vPortSetupTimerInterrupt+0x38>)
 8012a38:	2200      	movs	r2, #0
 8012a3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012a3c:	4b0a      	ldr	r3, [pc, #40]	; (8012a68 <vPortSetupTimerInterrupt+0x3c>)
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	4a0a      	ldr	r2, [pc, #40]	; (8012a6c <vPortSetupTimerInterrupt+0x40>)
 8012a42:	fba2 2303 	umull	r2, r3, r2, r3
 8012a46:	099b      	lsrs	r3, r3, #6
 8012a48:	4a09      	ldr	r2, [pc, #36]	; (8012a70 <vPortSetupTimerInterrupt+0x44>)
 8012a4a:	3b01      	subs	r3, #1
 8012a4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012a4e:	4b04      	ldr	r3, [pc, #16]	; (8012a60 <vPortSetupTimerInterrupt+0x34>)
 8012a50:	2207      	movs	r2, #7
 8012a52:	601a      	str	r2, [r3, #0]
}
 8012a54:	bf00      	nop
 8012a56:	46bd      	mov	sp, r7
 8012a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a5c:	4770      	bx	lr
 8012a5e:	bf00      	nop
 8012a60:	e000e010 	.word	0xe000e010
 8012a64:	e000e018 	.word	0xe000e018
 8012a68:	20000010 	.word	0x20000010
 8012a6c:	10624dd3 	.word	0x10624dd3
 8012a70:	e000e014 	.word	0xe000e014

08012a74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012a74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012a84 <vPortEnableVFP+0x10>
 8012a78:	6801      	ldr	r1, [r0, #0]
 8012a7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012a7e:	6001      	str	r1, [r0, #0]
 8012a80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012a82:	bf00      	nop
 8012a84:	e000ed88 	.word	0xe000ed88

08012a88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012a88:	b480      	push	{r7}
 8012a8a:	b085      	sub	sp, #20
 8012a8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012a8e:	f3ef 8305 	mrs	r3, IPSR
 8012a92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	2b0f      	cmp	r3, #15
 8012a98:	d914      	bls.n	8012ac4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012a9a:	4a17      	ldr	r2, [pc, #92]	; (8012af8 <vPortValidateInterruptPriority+0x70>)
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	4413      	add	r3, r2
 8012aa0:	781b      	ldrb	r3, [r3, #0]
 8012aa2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012aa4:	4b15      	ldr	r3, [pc, #84]	; (8012afc <vPortValidateInterruptPriority+0x74>)
 8012aa6:	781b      	ldrb	r3, [r3, #0]
 8012aa8:	7afa      	ldrb	r2, [r7, #11]
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d20a      	bcs.n	8012ac4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8012aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ab2:	f383 8811 	msr	BASEPRI, r3
 8012ab6:	f3bf 8f6f 	isb	sy
 8012aba:	f3bf 8f4f 	dsb	sy
 8012abe:	607b      	str	r3, [r7, #4]
}
 8012ac0:	bf00      	nop
 8012ac2:	e7fe      	b.n	8012ac2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012ac4:	4b0e      	ldr	r3, [pc, #56]	; (8012b00 <vPortValidateInterruptPriority+0x78>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012acc:	4b0d      	ldr	r3, [pc, #52]	; (8012b04 <vPortValidateInterruptPriority+0x7c>)
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	429a      	cmp	r2, r3
 8012ad2:	d90a      	bls.n	8012aea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ad8:	f383 8811 	msr	BASEPRI, r3
 8012adc:	f3bf 8f6f 	isb	sy
 8012ae0:	f3bf 8f4f 	dsb	sy
 8012ae4:	603b      	str	r3, [r7, #0]
}
 8012ae6:	bf00      	nop
 8012ae8:	e7fe      	b.n	8012ae8 <vPortValidateInterruptPriority+0x60>
	}
 8012aea:	bf00      	nop
 8012aec:	3714      	adds	r7, #20
 8012aee:	46bd      	mov	sp, r7
 8012af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af4:	4770      	bx	lr
 8012af6:	bf00      	nop
 8012af8:	e000e3f0 	.word	0xe000e3f0
 8012afc:	2000237c 	.word	0x2000237c
 8012b00:	e000ed0c 	.word	0xe000ed0c
 8012b04:	20002380 	.word	0x20002380

08012b08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b08a      	sub	sp, #40	; 0x28
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012b10:	2300      	movs	r3, #0
 8012b12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012b14:	f7fe faea 	bl	80110ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012b18:	4b5d      	ldr	r3, [pc, #372]	; (8012c90 <pvPortMalloc+0x188>)
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d101      	bne.n	8012b24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012b20:	f000 f924 	bl	8012d6c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012b24:	4b5b      	ldr	r3, [pc, #364]	; (8012c94 <pvPortMalloc+0x18c>)
 8012b26:	681a      	ldr	r2, [r3, #0]
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	4013      	ands	r3, r2
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	f040 8093 	bne.w	8012c58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d01d      	beq.n	8012b74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012b38:	2208      	movs	r2, #8
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	4413      	add	r3, r2
 8012b3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	f003 0307 	and.w	r3, r3, #7
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d014      	beq.n	8012b74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	f023 0307 	bic.w	r3, r3, #7
 8012b50:	3308      	adds	r3, #8
 8012b52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	f003 0307 	and.w	r3, r3, #7
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d00a      	beq.n	8012b74 <pvPortMalloc+0x6c>
	__asm volatile
 8012b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b62:	f383 8811 	msr	BASEPRI, r3
 8012b66:	f3bf 8f6f 	isb	sy
 8012b6a:	f3bf 8f4f 	dsb	sy
 8012b6e:	617b      	str	r3, [r7, #20]
}
 8012b70:	bf00      	nop
 8012b72:	e7fe      	b.n	8012b72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	d06e      	beq.n	8012c58 <pvPortMalloc+0x150>
 8012b7a:	4b47      	ldr	r3, [pc, #284]	; (8012c98 <pvPortMalloc+0x190>)
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	687a      	ldr	r2, [r7, #4]
 8012b80:	429a      	cmp	r2, r3
 8012b82:	d869      	bhi.n	8012c58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8012b84:	4b45      	ldr	r3, [pc, #276]	; (8012c9c <pvPortMalloc+0x194>)
 8012b86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8012b88:	4b44      	ldr	r3, [pc, #272]	; (8012c9c <pvPortMalloc+0x194>)
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012b8e:	e004      	b.n	8012b9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8012b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8012b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b9c:	685b      	ldr	r3, [r3, #4]
 8012b9e:	687a      	ldr	r2, [r7, #4]
 8012ba0:	429a      	cmp	r2, r3
 8012ba2:	d903      	bls.n	8012bac <pvPortMalloc+0xa4>
 8012ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d1f1      	bne.n	8012b90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012bac:	4b38      	ldr	r3, [pc, #224]	; (8012c90 <pvPortMalloc+0x188>)
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	d050      	beq.n	8012c58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012bb6:	6a3b      	ldr	r3, [r7, #32]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	2208      	movs	r2, #8
 8012bbc:	4413      	add	r3, r2
 8012bbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc2:	681a      	ldr	r2, [r3, #0]
 8012bc4:	6a3b      	ldr	r3, [r7, #32]
 8012bc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bca:	685a      	ldr	r2, [r3, #4]
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	1ad2      	subs	r2, r2, r3
 8012bd0:	2308      	movs	r3, #8
 8012bd2:	005b      	lsls	r3, r3, #1
 8012bd4:	429a      	cmp	r2, r3
 8012bd6:	d91f      	bls.n	8012c18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	4413      	add	r3, r2
 8012bde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012be0:	69bb      	ldr	r3, [r7, #24]
 8012be2:	f003 0307 	and.w	r3, r3, #7
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d00a      	beq.n	8012c00 <pvPortMalloc+0xf8>
	__asm volatile
 8012bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bee:	f383 8811 	msr	BASEPRI, r3
 8012bf2:	f3bf 8f6f 	isb	sy
 8012bf6:	f3bf 8f4f 	dsb	sy
 8012bfa:	613b      	str	r3, [r7, #16]
}
 8012bfc:	bf00      	nop
 8012bfe:	e7fe      	b.n	8012bfe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c02:	685a      	ldr	r2, [r3, #4]
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	1ad2      	subs	r2, r2, r3
 8012c08:	69bb      	ldr	r3, [r7, #24]
 8012c0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8012c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c0e:	687a      	ldr	r2, [r7, #4]
 8012c10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012c12:	69b8      	ldr	r0, [r7, #24]
 8012c14:	f000 f90c 	bl	8012e30 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012c18:	4b1f      	ldr	r3, [pc, #124]	; (8012c98 <pvPortMalloc+0x190>)
 8012c1a:	681a      	ldr	r2, [r3, #0]
 8012c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1e:	685b      	ldr	r3, [r3, #4]
 8012c20:	1ad3      	subs	r3, r2, r3
 8012c22:	4a1d      	ldr	r2, [pc, #116]	; (8012c98 <pvPortMalloc+0x190>)
 8012c24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012c26:	4b1c      	ldr	r3, [pc, #112]	; (8012c98 <pvPortMalloc+0x190>)
 8012c28:	681a      	ldr	r2, [r3, #0]
 8012c2a:	4b1d      	ldr	r3, [pc, #116]	; (8012ca0 <pvPortMalloc+0x198>)
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	429a      	cmp	r2, r3
 8012c30:	d203      	bcs.n	8012c3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012c32:	4b19      	ldr	r3, [pc, #100]	; (8012c98 <pvPortMalloc+0x190>)
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	4a1a      	ldr	r2, [pc, #104]	; (8012ca0 <pvPortMalloc+0x198>)
 8012c38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c3c:	685a      	ldr	r2, [r3, #4]
 8012c3e:	4b15      	ldr	r3, [pc, #84]	; (8012c94 <pvPortMalloc+0x18c>)
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	431a      	orrs	r2, r3
 8012c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012c4e:	4b15      	ldr	r3, [pc, #84]	; (8012ca4 <pvPortMalloc+0x19c>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	3301      	adds	r3, #1
 8012c54:	4a13      	ldr	r2, [pc, #76]	; (8012ca4 <pvPortMalloc+0x19c>)
 8012c56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012c58:	f7fe fa56 	bl	8011108 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8012c5c:	69fb      	ldr	r3, [r7, #28]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d101      	bne.n	8012c66 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8012c62:	f7f4 fb7f 	bl	8007364 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012c66:	69fb      	ldr	r3, [r7, #28]
 8012c68:	f003 0307 	and.w	r3, r3, #7
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d00a      	beq.n	8012c86 <pvPortMalloc+0x17e>
	__asm volatile
 8012c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c74:	f383 8811 	msr	BASEPRI, r3
 8012c78:	f3bf 8f6f 	isb	sy
 8012c7c:	f3bf 8f4f 	dsb	sy
 8012c80:	60fb      	str	r3, [r7, #12]
}
 8012c82:	bf00      	nop
 8012c84:	e7fe      	b.n	8012c84 <pvPortMalloc+0x17c>
	return pvReturn;
 8012c86:	69fb      	ldr	r3, [r7, #28]
}
 8012c88:	4618      	mov	r0, r3
 8012c8a:	3728      	adds	r7, #40	; 0x28
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	bd80      	pop	{r7, pc}
 8012c90:	2000a38c 	.word	0x2000a38c
 8012c94:	2000a3a0 	.word	0x2000a3a0
 8012c98:	2000a390 	.word	0x2000a390
 8012c9c:	2000a384 	.word	0x2000a384
 8012ca0:	2000a394 	.word	0x2000a394
 8012ca4:	2000a398 	.word	0x2000a398

08012ca8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b086      	sub	sp, #24
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d04d      	beq.n	8012d56 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8012cba:	2308      	movs	r3, #8
 8012cbc:	425b      	negs	r3, r3
 8012cbe:	697a      	ldr	r2, [r7, #20]
 8012cc0:	4413      	add	r3, r2
 8012cc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012cc4:	697b      	ldr	r3, [r7, #20]
 8012cc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012cc8:	693b      	ldr	r3, [r7, #16]
 8012cca:	685a      	ldr	r2, [r3, #4]
 8012ccc:	4b24      	ldr	r3, [pc, #144]	; (8012d60 <vPortFree+0xb8>)
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	4013      	ands	r3, r2
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d10a      	bne.n	8012cec <vPortFree+0x44>
	__asm volatile
 8012cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cda:	f383 8811 	msr	BASEPRI, r3
 8012cde:	f3bf 8f6f 	isb	sy
 8012ce2:	f3bf 8f4f 	dsb	sy
 8012ce6:	60fb      	str	r3, [r7, #12]
}
 8012ce8:	bf00      	nop
 8012cea:	e7fe      	b.n	8012cea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012cec:	693b      	ldr	r3, [r7, #16]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d00a      	beq.n	8012d0a <vPortFree+0x62>
	__asm volatile
 8012cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cf8:	f383 8811 	msr	BASEPRI, r3
 8012cfc:	f3bf 8f6f 	isb	sy
 8012d00:	f3bf 8f4f 	dsb	sy
 8012d04:	60bb      	str	r3, [r7, #8]
}
 8012d06:	bf00      	nop
 8012d08:	e7fe      	b.n	8012d08 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012d0a:	693b      	ldr	r3, [r7, #16]
 8012d0c:	685a      	ldr	r2, [r3, #4]
 8012d0e:	4b14      	ldr	r3, [pc, #80]	; (8012d60 <vPortFree+0xb8>)
 8012d10:	681b      	ldr	r3, [r3, #0]
 8012d12:	4013      	ands	r3, r2
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d01e      	beq.n	8012d56 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012d18:	693b      	ldr	r3, [r7, #16]
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d11a      	bne.n	8012d56 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012d20:	693b      	ldr	r3, [r7, #16]
 8012d22:	685a      	ldr	r2, [r3, #4]
 8012d24:	4b0e      	ldr	r3, [pc, #56]	; (8012d60 <vPortFree+0xb8>)
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	43db      	mvns	r3, r3
 8012d2a:	401a      	ands	r2, r3
 8012d2c:	693b      	ldr	r3, [r7, #16]
 8012d2e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012d30:	f7fe f9dc 	bl	80110ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012d34:	693b      	ldr	r3, [r7, #16]
 8012d36:	685a      	ldr	r2, [r3, #4]
 8012d38:	4b0a      	ldr	r3, [pc, #40]	; (8012d64 <vPortFree+0xbc>)
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	4413      	add	r3, r2
 8012d3e:	4a09      	ldr	r2, [pc, #36]	; (8012d64 <vPortFree+0xbc>)
 8012d40:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012d42:	6938      	ldr	r0, [r7, #16]
 8012d44:	f000 f874 	bl	8012e30 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012d48:	4b07      	ldr	r3, [pc, #28]	; (8012d68 <vPortFree+0xc0>)
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	3301      	adds	r3, #1
 8012d4e:	4a06      	ldr	r2, [pc, #24]	; (8012d68 <vPortFree+0xc0>)
 8012d50:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012d52:	f7fe f9d9 	bl	8011108 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012d56:	bf00      	nop
 8012d58:	3718      	adds	r7, #24
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}
 8012d5e:	bf00      	nop
 8012d60:	2000a3a0 	.word	0x2000a3a0
 8012d64:	2000a390 	.word	0x2000a390
 8012d68:	2000a39c 	.word	0x2000a39c

08012d6c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012d6c:	b480      	push	{r7}
 8012d6e:	b085      	sub	sp, #20
 8012d70:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012d76:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012d78:	4b27      	ldr	r3, [pc, #156]	; (8012e18 <prvHeapInit+0xac>)
 8012d7a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	f003 0307 	and.w	r3, r3, #7
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	d00c      	beq.n	8012da0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	3307      	adds	r3, #7
 8012d8a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	f023 0307 	bic.w	r3, r3, #7
 8012d92:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012d94:	68ba      	ldr	r2, [r7, #8]
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	1ad3      	subs	r3, r2, r3
 8012d9a:	4a1f      	ldr	r2, [pc, #124]	; (8012e18 <prvHeapInit+0xac>)
 8012d9c:	4413      	add	r3, r2
 8012d9e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012da4:	4a1d      	ldr	r2, [pc, #116]	; (8012e1c <prvHeapInit+0xb0>)
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012daa:	4b1c      	ldr	r3, [pc, #112]	; (8012e1c <prvHeapInit+0xb0>)
 8012dac:	2200      	movs	r2, #0
 8012dae:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	68ba      	ldr	r2, [r7, #8]
 8012db4:	4413      	add	r3, r2
 8012db6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012db8:	2208      	movs	r2, #8
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	1a9b      	subs	r3, r3, r2
 8012dbe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	f023 0307 	bic.w	r3, r3, #7
 8012dc6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	4a15      	ldr	r2, [pc, #84]	; (8012e20 <prvHeapInit+0xb4>)
 8012dcc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012dce:	4b14      	ldr	r3, [pc, #80]	; (8012e20 <prvHeapInit+0xb4>)
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012dd6:	4b12      	ldr	r3, [pc, #72]	; (8012e20 <prvHeapInit+0xb4>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	2200      	movs	r2, #0
 8012ddc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012de2:	683b      	ldr	r3, [r7, #0]
 8012de4:	68fa      	ldr	r2, [r7, #12]
 8012de6:	1ad2      	subs	r2, r2, r3
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012dec:	4b0c      	ldr	r3, [pc, #48]	; (8012e20 <prvHeapInit+0xb4>)
 8012dee:	681a      	ldr	r2, [r3, #0]
 8012df0:	683b      	ldr	r3, [r7, #0]
 8012df2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012df4:	683b      	ldr	r3, [r7, #0]
 8012df6:	685b      	ldr	r3, [r3, #4]
 8012df8:	4a0a      	ldr	r2, [pc, #40]	; (8012e24 <prvHeapInit+0xb8>)
 8012dfa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012dfc:	683b      	ldr	r3, [r7, #0]
 8012dfe:	685b      	ldr	r3, [r3, #4]
 8012e00:	4a09      	ldr	r2, [pc, #36]	; (8012e28 <prvHeapInit+0xbc>)
 8012e02:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012e04:	4b09      	ldr	r3, [pc, #36]	; (8012e2c <prvHeapInit+0xc0>)
 8012e06:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012e0a:	601a      	str	r2, [r3, #0]
}
 8012e0c:	bf00      	nop
 8012e0e:	3714      	adds	r7, #20
 8012e10:	46bd      	mov	sp, r7
 8012e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e16:	4770      	bx	lr
 8012e18:	20002384 	.word	0x20002384
 8012e1c:	2000a384 	.word	0x2000a384
 8012e20:	2000a38c 	.word	0x2000a38c
 8012e24:	2000a394 	.word	0x2000a394
 8012e28:	2000a390 	.word	0x2000a390
 8012e2c:	2000a3a0 	.word	0x2000a3a0

08012e30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012e30:	b480      	push	{r7}
 8012e32:	b085      	sub	sp, #20
 8012e34:	af00      	add	r7, sp, #0
 8012e36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012e38:	4b28      	ldr	r3, [pc, #160]	; (8012edc <prvInsertBlockIntoFreeList+0xac>)
 8012e3a:	60fb      	str	r3, [r7, #12]
 8012e3c:	e002      	b.n	8012e44 <prvInsertBlockIntoFreeList+0x14>
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	60fb      	str	r3, [r7, #12]
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	681b      	ldr	r3, [r3, #0]
 8012e48:	687a      	ldr	r2, [r7, #4]
 8012e4a:	429a      	cmp	r2, r3
 8012e4c:	d8f7      	bhi.n	8012e3e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	685b      	ldr	r3, [r3, #4]
 8012e56:	68ba      	ldr	r2, [r7, #8]
 8012e58:	4413      	add	r3, r2
 8012e5a:	687a      	ldr	r2, [r7, #4]
 8012e5c:	429a      	cmp	r2, r3
 8012e5e:	d108      	bne.n	8012e72 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	685a      	ldr	r2, [r3, #4]
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	685b      	ldr	r3, [r3, #4]
 8012e68:	441a      	add	r2, r3
 8012e6a:	68fb      	ldr	r3, [r7, #12]
 8012e6c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012e6e:	68fb      	ldr	r3, [r7, #12]
 8012e70:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	685b      	ldr	r3, [r3, #4]
 8012e7a:	68ba      	ldr	r2, [r7, #8]
 8012e7c:	441a      	add	r2, r3
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	429a      	cmp	r2, r3
 8012e84:	d118      	bne.n	8012eb8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	681a      	ldr	r2, [r3, #0]
 8012e8a:	4b15      	ldr	r3, [pc, #84]	; (8012ee0 <prvInsertBlockIntoFreeList+0xb0>)
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	429a      	cmp	r2, r3
 8012e90:	d00d      	beq.n	8012eae <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	685a      	ldr	r2, [r3, #4]
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	685b      	ldr	r3, [r3, #4]
 8012e9c:	441a      	add	r2, r3
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	681b      	ldr	r3, [r3, #0]
 8012ea6:	681a      	ldr	r2, [r3, #0]
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	601a      	str	r2, [r3, #0]
 8012eac:	e008      	b.n	8012ec0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012eae:	4b0c      	ldr	r3, [pc, #48]	; (8012ee0 <prvInsertBlockIntoFreeList+0xb0>)
 8012eb0:	681a      	ldr	r2, [r3, #0]
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	601a      	str	r2, [r3, #0]
 8012eb6:	e003      	b.n	8012ec0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	681a      	ldr	r2, [r3, #0]
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012ec0:	68fa      	ldr	r2, [r7, #12]
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	429a      	cmp	r2, r3
 8012ec6:	d002      	beq.n	8012ece <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	687a      	ldr	r2, [r7, #4]
 8012ecc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012ece:	bf00      	nop
 8012ed0:	3714      	adds	r7, #20
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed8:	4770      	bx	lr
 8012eda:	bf00      	nop
 8012edc:	2000a384 	.word	0x2000a384
 8012ee0:	2000a38c 	.word	0x2000a38c

08012ee4 <_ZdaPv>:
 8012ee4:	f000 b814 	b.w	8012f10 <_ZdlPv>

08012ee8 <__cxa_guard_acquire>:
 8012ee8:	6803      	ldr	r3, [r0, #0]
 8012eea:	07db      	lsls	r3, r3, #31
 8012eec:	d406      	bmi.n	8012efc <__cxa_guard_acquire+0x14>
 8012eee:	7843      	ldrb	r3, [r0, #1]
 8012ef0:	b103      	cbz	r3, 8012ef4 <__cxa_guard_acquire+0xc>
 8012ef2:	deff      	udf	#255	; 0xff
 8012ef4:	2301      	movs	r3, #1
 8012ef6:	7043      	strb	r3, [r0, #1]
 8012ef8:	4618      	mov	r0, r3
 8012efa:	4770      	bx	lr
 8012efc:	2000      	movs	r0, #0
 8012efe:	4770      	bx	lr

08012f00 <__cxa_guard_release>:
 8012f00:	2301      	movs	r3, #1
 8012f02:	6003      	str	r3, [r0, #0]
 8012f04:	4770      	bx	lr

08012f06 <_Znaj>:
 8012f06:	f000 b805 	b.w	8012f14 <_Znwj>

08012f0a <_ZSt25__throw_bad_function_callv>:
 8012f0a:	b508      	push	{r3, lr}
 8012f0c:	f000 fa44 	bl	8013398 <abort>

08012f10 <_ZdlPv>:
 8012f10:	f000 bb7c 	b.w	801360c <free>

08012f14 <_Znwj>:
 8012f14:	2801      	cmp	r0, #1
 8012f16:	bf38      	it	cc
 8012f18:	2001      	movcc	r0, #1
 8012f1a:	b510      	push	{r4, lr}
 8012f1c:	4604      	mov	r4, r0
 8012f1e:	4620      	mov	r0, r4
 8012f20:	f000 fb6c 	bl	80135fc <malloc>
 8012f24:	b930      	cbnz	r0, 8012f34 <_Znwj+0x20>
 8012f26:	f000 f807 	bl	8012f38 <_ZSt15get_new_handlerv>
 8012f2a:	b908      	cbnz	r0, 8012f30 <_Znwj+0x1c>
 8012f2c:	f000 fa34 	bl	8013398 <abort>
 8012f30:	4780      	blx	r0
 8012f32:	e7f4      	b.n	8012f1e <_Znwj+0xa>
 8012f34:	bd10      	pop	{r4, pc}
	...

08012f38 <_ZSt15get_new_handlerv>:
 8012f38:	4b02      	ldr	r3, [pc, #8]	; (8012f44 <_ZSt15get_new_handlerv+0xc>)
 8012f3a:	6818      	ldr	r0, [r3, #0]
 8012f3c:	f3bf 8f5b 	dmb	ish
 8012f40:	4770      	bx	lr
 8012f42:	bf00      	nop
 8012f44:	2000a3a4 	.word	0x2000a3a4

08012f48 <roundf>:
 8012f48:	ee10 0a10 	vmov	r0, s0
 8012f4c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8012f50:	3a7f      	subs	r2, #127	; 0x7f
 8012f52:	2a16      	cmp	r2, #22
 8012f54:	dc15      	bgt.n	8012f82 <roundf+0x3a>
 8012f56:	2a00      	cmp	r2, #0
 8012f58:	da08      	bge.n	8012f6c <roundf+0x24>
 8012f5a:	3201      	adds	r2, #1
 8012f5c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8012f60:	d101      	bne.n	8012f66 <roundf+0x1e>
 8012f62:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8012f66:	ee00 3a10 	vmov	s0, r3
 8012f6a:	4770      	bx	lr
 8012f6c:	4907      	ldr	r1, [pc, #28]	; (8012f8c <roundf+0x44>)
 8012f6e:	4111      	asrs	r1, r2
 8012f70:	4208      	tst	r0, r1
 8012f72:	d0fa      	beq.n	8012f6a <roundf+0x22>
 8012f74:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012f78:	4113      	asrs	r3, r2
 8012f7a:	4403      	add	r3, r0
 8012f7c:	ea23 0301 	bic.w	r3, r3, r1
 8012f80:	e7f1      	b.n	8012f66 <roundf+0x1e>
 8012f82:	2a80      	cmp	r2, #128	; 0x80
 8012f84:	d1f1      	bne.n	8012f6a <roundf+0x22>
 8012f86:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012f8a:	4770      	bx	lr
 8012f8c:	007fffff 	.word	0x007fffff

08012f90 <log>:
 8012f90:	b538      	push	{r3, r4, r5, lr}
 8012f92:	ed2d 8b02 	vpush	{d8}
 8012f96:	ec55 4b10 	vmov	r4, r5, d0
 8012f9a:	f000 f839 	bl	8013010 <__ieee754_log>
 8012f9e:	4622      	mov	r2, r4
 8012fa0:	462b      	mov	r3, r5
 8012fa2:	4620      	mov	r0, r4
 8012fa4:	4629      	mov	r1, r5
 8012fa6:	eeb0 8a40 	vmov.f32	s16, s0
 8012faa:	eef0 8a60 	vmov.f32	s17, s1
 8012fae:	f7ed fdbd 	bl	8000b2c <__aeabi_dcmpun>
 8012fb2:	b998      	cbnz	r0, 8012fdc <log+0x4c>
 8012fb4:	2200      	movs	r2, #0
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	4620      	mov	r0, r4
 8012fba:	4629      	mov	r1, r5
 8012fbc:	f7ed fdac 	bl	8000b18 <__aeabi_dcmpgt>
 8012fc0:	b960      	cbnz	r0, 8012fdc <log+0x4c>
 8012fc2:	2200      	movs	r2, #0
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	4620      	mov	r0, r4
 8012fc8:	4629      	mov	r1, r5
 8012fca:	f7ed fd7d 	bl	8000ac8 <__aeabi_dcmpeq>
 8012fce:	b160      	cbz	r0, 8012fea <log+0x5a>
 8012fd0:	f000 f9f0 	bl	80133b4 <__errno>
 8012fd4:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 8013000 <log+0x70>
 8012fd8:	2322      	movs	r3, #34	; 0x22
 8012fda:	6003      	str	r3, [r0, #0]
 8012fdc:	eeb0 0a48 	vmov.f32	s0, s16
 8012fe0:	eef0 0a68 	vmov.f32	s1, s17
 8012fe4:	ecbd 8b02 	vpop	{d8}
 8012fe8:	bd38      	pop	{r3, r4, r5, pc}
 8012fea:	f000 f9e3 	bl	80133b4 <__errno>
 8012fee:	ecbd 8b02 	vpop	{d8}
 8012ff2:	2321      	movs	r3, #33	; 0x21
 8012ff4:	6003      	str	r3, [r0, #0]
 8012ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ffa:	4803      	ldr	r0, [pc, #12]	; (8013008 <log+0x78>)
 8012ffc:	f000 b9c4 	b.w	8013388 <nan>
 8013000:	00000000 	.word	0x00000000
 8013004:	fff00000 	.word	0xfff00000
 8013008:	080167af 	.word	0x080167af
 801300c:	00000000 	.word	0x00000000

08013010 <__ieee754_log>:
 8013010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013014:	ec51 0b10 	vmov	r0, r1, d0
 8013018:	ed2d 8b04 	vpush	{d8-d9}
 801301c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8013020:	b083      	sub	sp, #12
 8013022:	460d      	mov	r5, r1
 8013024:	da29      	bge.n	801307a <__ieee754_log+0x6a>
 8013026:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801302a:	4303      	orrs	r3, r0
 801302c:	ee10 2a10 	vmov	r2, s0
 8013030:	d10c      	bne.n	801304c <__ieee754_log+0x3c>
 8013032:	49cf      	ldr	r1, [pc, #828]	; (8013370 <__ieee754_log+0x360>)
 8013034:	2200      	movs	r2, #0
 8013036:	2300      	movs	r3, #0
 8013038:	2000      	movs	r0, #0
 801303a:	f7ed fc07 	bl	800084c <__aeabi_ddiv>
 801303e:	ec41 0b10 	vmov	d0, r0, r1
 8013042:	b003      	add	sp, #12
 8013044:	ecbd 8b04 	vpop	{d8-d9}
 8013048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801304c:	2900      	cmp	r1, #0
 801304e:	da05      	bge.n	801305c <__ieee754_log+0x4c>
 8013050:	460b      	mov	r3, r1
 8013052:	f7ed f919 	bl	8000288 <__aeabi_dsub>
 8013056:	2200      	movs	r2, #0
 8013058:	2300      	movs	r3, #0
 801305a:	e7ee      	b.n	801303a <__ieee754_log+0x2a>
 801305c:	4bc5      	ldr	r3, [pc, #788]	; (8013374 <__ieee754_log+0x364>)
 801305e:	2200      	movs	r2, #0
 8013060:	f7ed faca 	bl	80005f8 <__aeabi_dmul>
 8013064:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8013068:	460d      	mov	r5, r1
 801306a:	4ac3      	ldr	r2, [pc, #780]	; (8013378 <__ieee754_log+0x368>)
 801306c:	4295      	cmp	r5, r2
 801306e:	dd06      	ble.n	801307e <__ieee754_log+0x6e>
 8013070:	4602      	mov	r2, r0
 8013072:	460b      	mov	r3, r1
 8013074:	f7ed f90a 	bl	800028c <__adddf3>
 8013078:	e7e1      	b.n	801303e <__ieee754_log+0x2e>
 801307a:	2300      	movs	r3, #0
 801307c:	e7f5      	b.n	801306a <__ieee754_log+0x5a>
 801307e:	152c      	asrs	r4, r5, #20
 8013080:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8013084:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8013088:	441c      	add	r4, r3
 801308a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801308e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8013092:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013096:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801309a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801309e:	ea42 0105 	orr.w	r1, r2, r5
 80130a2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80130a6:	2200      	movs	r2, #0
 80130a8:	4bb4      	ldr	r3, [pc, #720]	; (801337c <__ieee754_log+0x36c>)
 80130aa:	f7ed f8ed 	bl	8000288 <__aeabi_dsub>
 80130ae:	1cab      	adds	r3, r5, #2
 80130b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80130b4:	2b02      	cmp	r3, #2
 80130b6:	4682      	mov	sl, r0
 80130b8:	468b      	mov	fp, r1
 80130ba:	f04f 0200 	mov.w	r2, #0
 80130be:	dc53      	bgt.n	8013168 <__ieee754_log+0x158>
 80130c0:	2300      	movs	r3, #0
 80130c2:	f7ed fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 80130c6:	b1d0      	cbz	r0, 80130fe <__ieee754_log+0xee>
 80130c8:	2c00      	cmp	r4, #0
 80130ca:	f000 8122 	beq.w	8013312 <__ieee754_log+0x302>
 80130ce:	4620      	mov	r0, r4
 80130d0:	f7ed fa28 	bl	8000524 <__aeabi_i2d>
 80130d4:	a390      	add	r3, pc, #576	; (adr r3, 8013318 <__ieee754_log+0x308>)
 80130d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130da:	4606      	mov	r6, r0
 80130dc:	460f      	mov	r7, r1
 80130de:	f7ed fa8b 	bl	80005f8 <__aeabi_dmul>
 80130e2:	a38f      	add	r3, pc, #572	; (adr r3, 8013320 <__ieee754_log+0x310>)
 80130e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130e8:	4604      	mov	r4, r0
 80130ea:	460d      	mov	r5, r1
 80130ec:	4630      	mov	r0, r6
 80130ee:	4639      	mov	r1, r7
 80130f0:	f7ed fa82 	bl	80005f8 <__aeabi_dmul>
 80130f4:	4602      	mov	r2, r0
 80130f6:	460b      	mov	r3, r1
 80130f8:	4620      	mov	r0, r4
 80130fa:	4629      	mov	r1, r5
 80130fc:	e7ba      	b.n	8013074 <__ieee754_log+0x64>
 80130fe:	a38a      	add	r3, pc, #552	; (adr r3, 8013328 <__ieee754_log+0x318>)
 8013100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013104:	4650      	mov	r0, sl
 8013106:	4659      	mov	r1, fp
 8013108:	f7ed fa76 	bl	80005f8 <__aeabi_dmul>
 801310c:	4602      	mov	r2, r0
 801310e:	460b      	mov	r3, r1
 8013110:	2000      	movs	r0, #0
 8013112:	499b      	ldr	r1, [pc, #620]	; (8013380 <__ieee754_log+0x370>)
 8013114:	f7ed f8b8 	bl	8000288 <__aeabi_dsub>
 8013118:	4652      	mov	r2, sl
 801311a:	4606      	mov	r6, r0
 801311c:	460f      	mov	r7, r1
 801311e:	465b      	mov	r3, fp
 8013120:	4650      	mov	r0, sl
 8013122:	4659      	mov	r1, fp
 8013124:	f7ed fa68 	bl	80005f8 <__aeabi_dmul>
 8013128:	4602      	mov	r2, r0
 801312a:	460b      	mov	r3, r1
 801312c:	4630      	mov	r0, r6
 801312e:	4639      	mov	r1, r7
 8013130:	f7ed fa62 	bl	80005f8 <__aeabi_dmul>
 8013134:	4606      	mov	r6, r0
 8013136:	460f      	mov	r7, r1
 8013138:	b914      	cbnz	r4, 8013140 <__ieee754_log+0x130>
 801313a:	4632      	mov	r2, r6
 801313c:	463b      	mov	r3, r7
 801313e:	e0a2      	b.n	8013286 <__ieee754_log+0x276>
 8013140:	4620      	mov	r0, r4
 8013142:	f7ed f9ef 	bl	8000524 <__aeabi_i2d>
 8013146:	a374      	add	r3, pc, #464	; (adr r3, 8013318 <__ieee754_log+0x308>)
 8013148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801314c:	4680      	mov	r8, r0
 801314e:	4689      	mov	r9, r1
 8013150:	f7ed fa52 	bl	80005f8 <__aeabi_dmul>
 8013154:	a372      	add	r3, pc, #456	; (adr r3, 8013320 <__ieee754_log+0x310>)
 8013156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801315a:	4604      	mov	r4, r0
 801315c:	460d      	mov	r5, r1
 801315e:	4640      	mov	r0, r8
 8013160:	4649      	mov	r1, r9
 8013162:	f7ed fa49 	bl	80005f8 <__aeabi_dmul>
 8013166:	e0a7      	b.n	80132b8 <__ieee754_log+0x2a8>
 8013168:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801316c:	f7ed f88e 	bl	800028c <__adddf3>
 8013170:	4602      	mov	r2, r0
 8013172:	460b      	mov	r3, r1
 8013174:	4650      	mov	r0, sl
 8013176:	4659      	mov	r1, fp
 8013178:	f7ed fb68 	bl	800084c <__aeabi_ddiv>
 801317c:	ec41 0b18 	vmov	d8, r0, r1
 8013180:	4620      	mov	r0, r4
 8013182:	f7ed f9cf 	bl	8000524 <__aeabi_i2d>
 8013186:	ec53 2b18 	vmov	r2, r3, d8
 801318a:	ec41 0b19 	vmov	d9, r0, r1
 801318e:	ec51 0b18 	vmov	r0, r1, d8
 8013192:	f7ed fa31 	bl	80005f8 <__aeabi_dmul>
 8013196:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801319a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801319e:	9301      	str	r3, [sp, #4]
 80131a0:	4602      	mov	r2, r0
 80131a2:	460b      	mov	r3, r1
 80131a4:	4680      	mov	r8, r0
 80131a6:	4689      	mov	r9, r1
 80131a8:	f7ed fa26 	bl	80005f8 <__aeabi_dmul>
 80131ac:	a360      	add	r3, pc, #384	; (adr r3, 8013330 <__ieee754_log+0x320>)
 80131ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131b2:	4606      	mov	r6, r0
 80131b4:	460f      	mov	r7, r1
 80131b6:	f7ed fa1f 	bl	80005f8 <__aeabi_dmul>
 80131ba:	a35f      	add	r3, pc, #380	; (adr r3, 8013338 <__ieee754_log+0x328>)
 80131bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131c0:	f7ed f864 	bl	800028c <__adddf3>
 80131c4:	4632      	mov	r2, r6
 80131c6:	463b      	mov	r3, r7
 80131c8:	f7ed fa16 	bl	80005f8 <__aeabi_dmul>
 80131cc:	a35c      	add	r3, pc, #368	; (adr r3, 8013340 <__ieee754_log+0x330>)
 80131ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131d2:	f7ed f85b 	bl	800028c <__adddf3>
 80131d6:	4632      	mov	r2, r6
 80131d8:	463b      	mov	r3, r7
 80131da:	f7ed fa0d 	bl	80005f8 <__aeabi_dmul>
 80131de:	a35a      	add	r3, pc, #360	; (adr r3, 8013348 <__ieee754_log+0x338>)
 80131e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131e4:	f7ed f852 	bl	800028c <__adddf3>
 80131e8:	4642      	mov	r2, r8
 80131ea:	464b      	mov	r3, r9
 80131ec:	f7ed fa04 	bl	80005f8 <__aeabi_dmul>
 80131f0:	a357      	add	r3, pc, #348	; (adr r3, 8013350 <__ieee754_log+0x340>)
 80131f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80131f6:	4680      	mov	r8, r0
 80131f8:	4689      	mov	r9, r1
 80131fa:	4630      	mov	r0, r6
 80131fc:	4639      	mov	r1, r7
 80131fe:	f7ed f9fb 	bl	80005f8 <__aeabi_dmul>
 8013202:	a355      	add	r3, pc, #340	; (adr r3, 8013358 <__ieee754_log+0x348>)
 8013204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013208:	f7ed f840 	bl	800028c <__adddf3>
 801320c:	4632      	mov	r2, r6
 801320e:	463b      	mov	r3, r7
 8013210:	f7ed f9f2 	bl	80005f8 <__aeabi_dmul>
 8013214:	a352      	add	r3, pc, #328	; (adr r3, 8013360 <__ieee754_log+0x350>)
 8013216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801321a:	f7ed f837 	bl	800028c <__adddf3>
 801321e:	4632      	mov	r2, r6
 8013220:	463b      	mov	r3, r7
 8013222:	f7ed f9e9 	bl	80005f8 <__aeabi_dmul>
 8013226:	460b      	mov	r3, r1
 8013228:	4602      	mov	r2, r0
 801322a:	4649      	mov	r1, r9
 801322c:	4640      	mov	r0, r8
 801322e:	f7ed f82d 	bl	800028c <__adddf3>
 8013232:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8013236:	9b01      	ldr	r3, [sp, #4]
 8013238:	3551      	adds	r5, #81	; 0x51
 801323a:	431d      	orrs	r5, r3
 801323c:	2d00      	cmp	r5, #0
 801323e:	4680      	mov	r8, r0
 8013240:	4689      	mov	r9, r1
 8013242:	dd48      	ble.n	80132d6 <__ieee754_log+0x2c6>
 8013244:	4b4e      	ldr	r3, [pc, #312]	; (8013380 <__ieee754_log+0x370>)
 8013246:	2200      	movs	r2, #0
 8013248:	4650      	mov	r0, sl
 801324a:	4659      	mov	r1, fp
 801324c:	f7ed f9d4 	bl	80005f8 <__aeabi_dmul>
 8013250:	4652      	mov	r2, sl
 8013252:	465b      	mov	r3, fp
 8013254:	f7ed f9d0 	bl	80005f8 <__aeabi_dmul>
 8013258:	4602      	mov	r2, r0
 801325a:	460b      	mov	r3, r1
 801325c:	4606      	mov	r6, r0
 801325e:	460f      	mov	r7, r1
 8013260:	4640      	mov	r0, r8
 8013262:	4649      	mov	r1, r9
 8013264:	f7ed f812 	bl	800028c <__adddf3>
 8013268:	ec53 2b18 	vmov	r2, r3, d8
 801326c:	f7ed f9c4 	bl	80005f8 <__aeabi_dmul>
 8013270:	4680      	mov	r8, r0
 8013272:	4689      	mov	r9, r1
 8013274:	b964      	cbnz	r4, 8013290 <__ieee754_log+0x280>
 8013276:	4602      	mov	r2, r0
 8013278:	460b      	mov	r3, r1
 801327a:	4630      	mov	r0, r6
 801327c:	4639      	mov	r1, r7
 801327e:	f7ed f803 	bl	8000288 <__aeabi_dsub>
 8013282:	4602      	mov	r2, r0
 8013284:	460b      	mov	r3, r1
 8013286:	4650      	mov	r0, sl
 8013288:	4659      	mov	r1, fp
 801328a:	f7ec fffd 	bl	8000288 <__aeabi_dsub>
 801328e:	e6d6      	b.n	801303e <__ieee754_log+0x2e>
 8013290:	a321      	add	r3, pc, #132	; (adr r3, 8013318 <__ieee754_log+0x308>)
 8013292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013296:	ec51 0b19 	vmov	r0, r1, d9
 801329a:	f7ed f9ad 	bl	80005f8 <__aeabi_dmul>
 801329e:	a320      	add	r3, pc, #128	; (adr r3, 8013320 <__ieee754_log+0x310>)
 80132a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132a4:	4604      	mov	r4, r0
 80132a6:	460d      	mov	r5, r1
 80132a8:	ec51 0b19 	vmov	r0, r1, d9
 80132ac:	f7ed f9a4 	bl	80005f8 <__aeabi_dmul>
 80132b0:	4642      	mov	r2, r8
 80132b2:	464b      	mov	r3, r9
 80132b4:	f7ec ffea 	bl	800028c <__adddf3>
 80132b8:	4602      	mov	r2, r0
 80132ba:	460b      	mov	r3, r1
 80132bc:	4630      	mov	r0, r6
 80132be:	4639      	mov	r1, r7
 80132c0:	f7ec ffe2 	bl	8000288 <__aeabi_dsub>
 80132c4:	4652      	mov	r2, sl
 80132c6:	465b      	mov	r3, fp
 80132c8:	f7ec ffde 	bl	8000288 <__aeabi_dsub>
 80132cc:	4602      	mov	r2, r0
 80132ce:	460b      	mov	r3, r1
 80132d0:	4620      	mov	r0, r4
 80132d2:	4629      	mov	r1, r5
 80132d4:	e7d9      	b.n	801328a <__ieee754_log+0x27a>
 80132d6:	4602      	mov	r2, r0
 80132d8:	460b      	mov	r3, r1
 80132da:	4650      	mov	r0, sl
 80132dc:	4659      	mov	r1, fp
 80132de:	f7ec ffd3 	bl	8000288 <__aeabi_dsub>
 80132e2:	ec53 2b18 	vmov	r2, r3, d8
 80132e6:	f7ed f987 	bl	80005f8 <__aeabi_dmul>
 80132ea:	4606      	mov	r6, r0
 80132ec:	460f      	mov	r7, r1
 80132ee:	2c00      	cmp	r4, #0
 80132f0:	f43f af23 	beq.w	801313a <__ieee754_log+0x12a>
 80132f4:	a308      	add	r3, pc, #32	; (adr r3, 8013318 <__ieee754_log+0x308>)
 80132f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132fa:	ec51 0b19 	vmov	r0, r1, d9
 80132fe:	f7ed f97b 	bl	80005f8 <__aeabi_dmul>
 8013302:	a307      	add	r3, pc, #28	; (adr r3, 8013320 <__ieee754_log+0x310>)
 8013304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013308:	4604      	mov	r4, r0
 801330a:	460d      	mov	r5, r1
 801330c:	ec51 0b19 	vmov	r0, r1, d9
 8013310:	e727      	b.n	8013162 <__ieee754_log+0x152>
 8013312:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8013368 <__ieee754_log+0x358>
 8013316:	e694      	b.n	8013042 <__ieee754_log+0x32>
 8013318:	fee00000 	.word	0xfee00000
 801331c:	3fe62e42 	.word	0x3fe62e42
 8013320:	35793c76 	.word	0x35793c76
 8013324:	3dea39ef 	.word	0x3dea39ef
 8013328:	55555555 	.word	0x55555555
 801332c:	3fd55555 	.word	0x3fd55555
 8013330:	df3e5244 	.word	0xdf3e5244
 8013334:	3fc2f112 	.word	0x3fc2f112
 8013338:	96cb03de 	.word	0x96cb03de
 801333c:	3fc74664 	.word	0x3fc74664
 8013340:	94229359 	.word	0x94229359
 8013344:	3fd24924 	.word	0x3fd24924
 8013348:	55555593 	.word	0x55555593
 801334c:	3fe55555 	.word	0x3fe55555
 8013350:	d078c69f 	.word	0xd078c69f
 8013354:	3fc39a09 	.word	0x3fc39a09
 8013358:	1d8e78af 	.word	0x1d8e78af
 801335c:	3fcc71c5 	.word	0x3fcc71c5
 8013360:	9997fa04 	.word	0x9997fa04
 8013364:	3fd99999 	.word	0x3fd99999
	...
 8013370:	c3500000 	.word	0xc3500000
 8013374:	43500000 	.word	0x43500000
 8013378:	7fefffff 	.word	0x7fefffff
 801337c:	3ff00000 	.word	0x3ff00000
 8013380:	3fe00000 	.word	0x3fe00000
 8013384:	00000000 	.word	0x00000000

08013388 <nan>:
 8013388:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013390 <nan+0x8>
 801338c:	4770      	bx	lr
 801338e:	bf00      	nop
 8013390:	00000000 	.word	0x00000000
 8013394:	7ff80000 	.word	0x7ff80000

08013398 <abort>:
 8013398:	b508      	push	{r3, lr}
 801339a:	2006      	movs	r0, #6
 801339c:	f000 ff40 	bl	8014220 <raise>
 80133a0:	2001      	movs	r0, #1
 80133a2:	f7f4 fc27 	bl	8007bf4 <_exit>

080133a6 <atexit>:
 80133a6:	2300      	movs	r3, #0
 80133a8:	4601      	mov	r1, r0
 80133aa:	461a      	mov	r2, r3
 80133ac:	4618      	mov	r0, r3
 80133ae:	f000 bfa9 	b.w	8014304 <__register_exitproc>
	...

080133b4 <__errno>:
 80133b4:	4b01      	ldr	r3, [pc, #4]	; (80133bc <__errno+0x8>)
 80133b6:	6818      	ldr	r0, [r3, #0]
 80133b8:	4770      	bx	lr
 80133ba:	bf00      	nop
 80133bc:	20000020 	.word	0x20000020

080133c0 <std>:
 80133c0:	2300      	movs	r3, #0
 80133c2:	b510      	push	{r4, lr}
 80133c4:	4604      	mov	r4, r0
 80133c6:	e9c0 3300 	strd	r3, r3, [r0]
 80133ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80133ce:	6083      	str	r3, [r0, #8]
 80133d0:	8181      	strh	r1, [r0, #12]
 80133d2:	6643      	str	r3, [r0, #100]	; 0x64
 80133d4:	81c2      	strh	r2, [r0, #14]
 80133d6:	6183      	str	r3, [r0, #24]
 80133d8:	4619      	mov	r1, r3
 80133da:	2208      	movs	r2, #8
 80133dc:	305c      	adds	r0, #92	; 0x5c
 80133de:	f000 f92b 	bl	8013638 <memset>
 80133e2:	4b05      	ldr	r3, [pc, #20]	; (80133f8 <std+0x38>)
 80133e4:	6263      	str	r3, [r4, #36]	; 0x24
 80133e6:	4b05      	ldr	r3, [pc, #20]	; (80133fc <std+0x3c>)
 80133e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80133ea:	4b05      	ldr	r3, [pc, #20]	; (8013400 <std+0x40>)
 80133ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80133ee:	4b05      	ldr	r3, [pc, #20]	; (8013404 <std+0x44>)
 80133f0:	6224      	str	r4, [r4, #32]
 80133f2:	6323      	str	r3, [r4, #48]	; 0x30
 80133f4:	bd10      	pop	{r4, pc}
 80133f6:	bf00      	nop
 80133f8:	08014259 	.word	0x08014259
 80133fc:	0801427b 	.word	0x0801427b
 8013400:	080142b3 	.word	0x080142b3
 8013404:	080142d7 	.word	0x080142d7

08013408 <_cleanup_r>:
 8013408:	4901      	ldr	r1, [pc, #4]	; (8013410 <_cleanup_r+0x8>)
 801340a:	f000 b8af 	b.w	801356c <_fwalk_reent>
 801340e:	bf00      	nop
 8013410:	080151e9 	.word	0x080151e9

08013414 <__sfmoreglue>:
 8013414:	b570      	push	{r4, r5, r6, lr}
 8013416:	2268      	movs	r2, #104	; 0x68
 8013418:	1e4d      	subs	r5, r1, #1
 801341a:	4355      	muls	r5, r2
 801341c:	460e      	mov	r6, r1
 801341e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013422:	f000 f97d 	bl	8013720 <_malloc_r>
 8013426:	4604      	mov	r4, r0
 8013428:	b140      	cbz	r0, 801343c <__sfmoreglue+0x28>
 801342a:	2100      	movs	r1, #0
 801342c:	e9c0 1600 	strd	r1, r6, [r0]
 8013430:	300c      	adds	r0, #12
 8013432:	60a0      	str	r0, [r4, #8]
 8013434:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013438:	f000 f8fe 	bl	8013638 <memset>
 801343c:	4620      	mov	r0, r4
 801343e:	bd70      	pop	{r4, r5, r6, pc}

08013440 <__sfp_lock_acquire>:
 8013440:	4801      	ldr	r0, [pc, #4]	; (8013448 <__sfp_lock_acquire+0x8>)
 8013442:	f000 b8d8 	b.w	80135f6 <__retarget_lock_acquire_recursive>
 8013446:	bf00      	nop
 8013448:	2000a3aa 	.word	0x2000a3aa

0801344c <__sfp_lock_release>:
 801344c:	4801      	ldr	r0, [pc, #4]	; (8013454 <__sfp_lock_release+0x8>)
 801344e:	f000 b8d4 	b.w	80135fa <__retarget_lock_release_recursive>
 8013452:	bf00      	nop
 8013454:	2000a3aa 	.word	0x2000a3aa

08013458 <__sinit_lock_acquire>:
 8013458:	4801      	ldr	r0, [pc, #4]	; (8013460 <__sinit_lock_acquire+0x8>)
 801345a:	f000 b8cc 	b.w	80135f6 <__retarget_lock_acquire_recursive>
 801345e:	bf00      	nop
 8013460:	2000a3ab 	.word	0x2000a3ab

08013464 <__sinit_lock_release>:
 8013464:	4801      	ldr	r0, [pc, #4]	; (801346c <__sinit_lock_release+0x8>)
 8013466:	f000 b8c8 	b.w	80135fa <__retarget_lock_release_recursive>
 801346a:	bf00      	nop
 801346c:	2000a3ab 	.word	0x2000a3ab

08013470 <__sinit>:
 8013470:	b510      	push	{r4, lr}
 8013472:	4604      	mov	r4, r0
 8013474:	f7ff fff0 	bl	8013458 <__sinit_lock_acquire>
 8013478:	69a3      	ldr	r3, [r4, #24]
 801347a:	b11b      	cbz	r3, 8013484 <__sinit+0x14>
 801347c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013480:	f7ff bff0 	b.w	8013464 <__sinit_lock_release>
 8013484:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013488:	6523      	str	r3, [r4, #80]	; 0x50
 801348a:	4b13      	ldr	r3, [pc, #76]	; (80134d8 <__sinit+0x68>)
 801348c:	4a13      	ldr	r2, [pc, #76]	; (80134dc <__sinit+0x6c>)
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	62a2      	str	r2, [r4, #40]	; 0x28
 8013492:	42a3      	cmp	r3, r4
 8013494:	bf04      	itt	eq
 8013496:	2301      	moveq	r3, #1
 8013498:	61a3      	streq	r3, [r4, #24]
 801349a:	4620      	mov	r0, r4
 801349c:	f000 f820 	bl	80134e0 <__sfp>
 80134a0:	6060      	str	r0, [r4, #4]
 80134a2:	4620      	mov	r0, r4
 80134a4:	f000 f81c 	bl	80134e0 <__sfp>
 80134a8:	60a0      	str	r0, [r4, #8]
 80134aa:	4620      	mov	r0, r4
 80134ac:	f000 f818 	bl	80134e0 <__sfp>
 80134b0:	2200      	movs	r2, #0
 80134b2:	60e0      	str	r0, [r4, #12]
 80134b4:	2104      	movs	r1, #4
 80134b6:	6860      	ldr	r0, [r4, #4]
 80134b8:	f7ff ff82 	bl	80133c0 <std>
 80134bc:	68a0      	ldr	r0, [r4, #8]
 80134be:	2201      	movs	r2, #1
 80134c0:	2109      	movs	r1, #9
 80134c2:	f7ff ff7d 	bl	80133c0 <std>
 80134c6:	68e0      	ldr	r0, [r4, #12]
 80134c8:	2202      	movs	r2, #2
 80134ca:	2112      	movs	r1, #18
 80134cc:	f7ff ff78 	bl	80133c0 <std>
 80134d0:	2301      	movs	r3, #1
 80134d2:	61a3      	str	r3, [r4, #24]
 80134d4:	e7d2      	b.n	801347c <__sinit+0xc>
 80134d6:	bf00      	nop
 80134d8:	08016550 	.word	0x08016550
 80134dc:	08013409 	.word	0x08013409

080134e0 <__sfp>:
 80134e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80134e2:	4607      	mov	r7, r0
 80134e4:	f7ff ffac 	bl	8013440 <__sfp_lock_acquire>
 80134e8:	4b1e      	ldr	r3, [pc, #120]	; (8013564 <__sfp+0x84>)
 80134ea:	681e      	ldr	r6, [r3, #0]
 80134ec:	69b3      	ldr	r3, [r6, #24]
 80134ee:	b913      	cbnz	r3, 80134f6 <__sfp+0x16>
 80134f0:	4630      	mov	r0, r6
 80134f2:	f7ff ffbd 	bl	8013470 <__sinit>
 80134f6:	3648      	adds	r6, #72	; 0x48
 80134f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80134fc:	3b01      	subs	r3, #1
 80134fe:	d503      	bpl.n	8013508 <__sfp+0x28>
 8013500:	6833      	ldr	r3, [r6, #0]
 8013502:	b30b      	cbz	r3, 8013548 <__sfp+0x68>
 8013504:	6836      	ldr	r6, [r6, #0]
 8013506:	e7f7      	b.n	80134f8 <__sfp+0x18>
 8013508:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801350c:	b9d5      	cbnz	r5, 8013544 <__sfp+0x64>
 801350e:	4b16      	ldr	r3, [pc, #88]	; (8013568 <__sfp+0x88>)
 8013510:	60e3      	str	r3, [r4, #12]
 8013512:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013516:	6665      	str	r5, [r4, #100]	; 0x64
 8013518:	f000 f86c 	bl	80135f4 <__retarget_lock_init_recursive>
 801351c:	f7ff ff96 	bl	801344c <__sfp_lock_release>
 8013520:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013524:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013528:	6025      	str	r5, [r4, #0]
 801352a:	61a5      	str	r5, [r4, #24]
 801352c:	2208      	movs	r2, #8
 801352e:	4629      	mov	r1, r5
 8013530:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013534:	f000 f880 	bl	8013638 <memset>
 8013538:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801353c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013540:	4620      	mov	r0, r4
 8013542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013544:	3468      	adds	r4, #104	; 0x68
 8013546:	e7d9      	b.n	80134fc <__sfp+0x1c>
 8013548:	2104      	movs	r1, #4
 801354a:	4638      	mov	r0, r7
 801354c:	f7ff ff62 	bl	8013414 <__sfmoreglue>
 8013550:	4604      	mov	r4, r0
 8013552:	6030      	str	r0, [r6, #0]
 8013554:	2800      	cmp	r0, #0
 8013556:	d1d5      	bne.n	8013504 <__sfp+0x24>
 8013558:	f7ff ff78 	bl	801344c <__sfp_lock_release>
 801355c:	230c      	movs	r3, #12
 801355e:	603b      	str	r3, [r7, #0]
 8013560:	e7ee      	b.n	8013540 <__sfp+0x60>
 8013562:	bf00      	nop
 8013564:	08016550 	.word	0x08016550
 8013568:	ffff0001 	.word	0xffff0001

0801356c <_fwalk_reent>:
 801356c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013570:	4606      	mov	r6, r0
 8013572:	4688      	mov	r8, r1
 8013574:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013578:	2700      	movs	r7, #0
 801357a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801357e:	f1b9 0901 	subs.w	r9, r9, #1
 8013582:	d505      	bpl.n	8013590 <_fwalk_reent+0x24>
 8013584:	6824      	ldr	r4, [r4, #0]
 8013586:	2c00      	cmp	r4, #0
 8013588:	d1f7      	bne.n	801357a <_fwalk_reent+0xe>
 801358a:	4638      	mov	r0, r7
 801358c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013590:	89ab      	ldrh	r3, [r5, #12]
 8013592:	2b01      	cmp	r3, #1
 8013594:	d907      	bls.n	80135a6 <_fwalk_reent+0x3a>
 8013596:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801359a:	3301      	adds	r3, #1
 801359c:	d003      	beq.n	80135a6 <_fwalk_reent+0x3a>
 801359e:	4629      	mov	r1, r5
 80135a0:	4630      	mov	r0, r6
 80135a2:	47c0      	blx	r8
 80135a4:	4307      	orrs	r7, r0
 80135a6:	3568      	adds	r5, #104	; 0x68
 80135a8:	e7e9      	b.n	801357e <_fwalk_reent+0x12>
	...

080135ac <__libc_init_array>:
 80135ac:	b570      	push	{r4, r5, r6, lr}
 80135ae:	4d0d      	ldr	r5, [pc, #52]	; (80135e4 <__libc_init_array+0x38>)
 80135b0:	4c0d      	ldr	r4, [pc, #52]	; (80135e8 <__libc_init_array+0x3c>)
 80135b2:	1b64      	subs	r4, r4, r5
 80135b4:	10a4      	asrs	r4, r4, #2
 80135b6:	2600      	movs	r6, #0
 80135b8:	42a6      	cmp	r6, r4
 80135ba:	d109      	bne.n	80135d0 <__libc_init_array+0x24>
 80135bc:	4d0b      	ldr	r5, [pc, #44]	; (80135ec <__libc_init_array+0x40>)
 80135be:	4c0c      	ldr	r4, [pc, #48]	; (80135f0 <__libc_init_array+0x44>)
 80135c0:	f002 fd0e 	bl	8015fe0 <_init>
 80135c4:	1b64      	subs	r4, r4, r5
 80135c6:	10a4      	asrs	r4, r4, #2
 80135c8:	2600      	movs	r6, #0
 80135ca:	42a6      	cmp	r6, r4
 80135cc:	d105      	bne.n	80135da <__libc_init_array+0x2e>
 80135ce:	bd70      	pop	{r4, r5, r6, pc}
 80135d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80135d4:	4798      	blx	r3
 80135d6:	3601      	adds	r6, #1
 80135d8:	e7ee      	b.n	80135b8 <__libc_init_array+0xc>
 80135da:	f855 3b04 	ldr.w	r3, [r5], #4
 80135de:	4798      	blx	r3
 80135e0:	3601      	adds	r6, #1
 80135e2:	e7f2      	b.n	80135ca <__libc_init_array+0x1e>
 80135e4:	080168d4 	.word	0x080168d4
 80135e8:	080168d4 	.word	0x080168d4
 80135ec:	080168d4 	.word	0x080168d4
 80135f0:	080168f4 	.word	0x080168f4

080135f4 <__retarget_lock_init_recursive>:
 80135f4:	4770      	bx	lr

080135f6 <__retarget_lock_acquire_recursive>:
 80135f6:	4770      	bx	lr

080135f8 <__retarget_lock_release>:
 80135f8:	4770      	bx	lr

080135fa <__retarget_lock_release_recursive>:
 80135fa:	4770      	bx	lr

080135fc <malloc>:
 80135fc:	4b02      	ldr	r3, [pc, #8]	; (8013608 <malloc+0xc>)
 80135fe:	4601      	mov	r1, r0
 8013600:	6818      	ldr	r0, [r3, #0]
 8013602:	f000 b88d 	b.w	8013720 <_malloc_r>
 8013606:	bf00      	nop
 8013608:	20000020 	.word	0x20000020

0801360c <free>:
 801360c:	4b02      	ldr	r3, [pc, #8]	; (8013618 <free+0xc>)
 801360e:	4601      	mov	r1, r0
 8013610:	6818      	ldr	r0, [r3, #0]
 8013612:	f000 b819 	b.w	8013648 <_free_r>
 8013616:	bf00      	nop
 8013618:	20000020 	.word	0x20000020

0801361c <memcpy>:
 801361c:	440a      	add	r2, r1
 801361e:	4291      	cmp	r1, r2
 8013620:	f100 33ff 	add.w	r3, r0, #4294967295
 8013624:	d100      	bne.n	8013628 <memcpy+0xc>
 8013626:	4770      	bx	lr
 8013628:	b510      	push	{r4, lr}
 801362a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801362e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013632:	4291      	cmp	r1, r2
 8013634:	d1f9      	bne.n	801362a <memcpy+0xe>
 8013636:	bd10      	pop	{r4, pc}

08013638 <memset>:
 8013638:	4402      	add	r2, r0
 801363a:	4603      	mov	r3, r0
 801363c:	4293      	cmp	r3, r2
 801363e:	d100      	bne.n	8013642 <memset+0xa>
 8013640:	4770      	bx	lr
 8013642:	f803 1b01 	strb.w	r1, [r3], #1
 8013646:	e7f9      	b.n	801363c <memset+0x4>

08013648 <_free_r>:
 8013648:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801364a:	2900      	cmp	r1, #0
 801364c:	d044      	beq.n	80136d8 <_free_r+0x90>
 801364e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013652:	9001      	str	r0, [sp, #4]
 8013654:	2b00      	cmp	r3, #0
 8013656:	f1a1 0404 	sub.w	r4, r1, #4
 801365a:	bfb8      	it	lt
 801365c:	18e4      	addlt	r4, r4, r3
 801365e:	f001 fe15 	bl	801528c <__malloc_lock>
 8013662:	4a1e      	ldr	r2, [pc, #120]	; (80136dc <_free_r+0x94>)
 8013664:	9801      	ldr	r0, [sp, #4]
 8013666:	6813      	ldr	r3, [r2, #0]
 8013668:	b933      	cbnz	r3, 8013678 <_free_r+0x30>
 801366a:	6063      	str	r3, [r4, #4]
 801366c:	6014      	str	r4, [r2, #0]
 801366e:	b003      	add	sp, #12
 8013670:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013674:	f001 be10 	b.w	8015298 <__malloc_unlock>
 8013678:	42a3      	cmp	r3, r4
 801367a:	d908      	bls.n	801368e <_free_r+0x46>
 801367c:	6825      	ldr	r5, [r4, #0]
 801367e:	1961      	adds	r1, r4, r5
 8013680:	428b      	cmp	r3, r1
 8013682:	bf01      	itttt	eq
 8013684:	6819      	ldreq	r1, [r3, #0]
 8013686:	685b      	ldreq	r3, [r3, #4]
 8013688:	1949      	addeq	r1, r1, r5
 801368a:	6021      	streq	r1, [r4, #0]
 801368c:	e7ed      	b.n	801366a <_free_r+0x22>
 801368e:	461a      	mov	r2, r3
 8013690:	685b      	ldr	r3, [r3, #4]
 8013692:	b10b      	cbz	r3, 8013698 <_free_r+0x50>
 8013694:	42a3      	cmp	r3, r4
 8013696:	d9fa      	bls.n	801368e <_free_r+0x46>
 8013698:	6811      	ldr	r1, [r2, #0]
 801369a:	1855      	adds	r5, r2, r1
 801369c:	42a5      	cmp	r5, r4
 801369e:	d10b      	bne.n	80136b8 <_free_r+0x70>
 80136a0:	6824      	ldr	r4, [r4, #0]
 80136a2:	4421      	add	r1, r4
 80136a4:	1854      	adds	r4, r2, r1
 80136a6:	42a3      	cmp	r3, r4
 80136a8:	6011      	str	r1, [r2, #0]
 80136aa:	d1e0      	bne.n	801366e <_free_r+0x26>
 80136ac:	681c      	ldr	r4, [r3, #0]
 80136ae:	685b      	ldr	r3, [r3, #4]
 80136b0:	6053      	str	r3, [r2, #4]
 80136b2:	4421      	add	r1, r4
 80136b4:	6011      	str	r1, [r2, #0]
 80136b6:	e7da      	b.n	801366e <_free_r+0x26>
 80136b8:	d902      	bls.n	80136c0 <_free_r+0x78>
 80136ba:	230c      	movs	r3, #12
 80136bc:	6003      	str	r3, [r0, #0]
 80136be:	e7d6      	b.n	801366e <_free_r+0x26>
 80136c0:	6825      	ldr	r5, [r4, #0]
 80136c2:	1961      	adds	r1, r4, r5
 80136c4:	428b      	cmp	r3, r1
 80136c6:	bf04      	itt	eq
 80136c8:	6819      	ldreq	r1, [r3, #0]
 80136ca:	685b      	ldreq	r3, [r3, #4]
 80136cc:	6063      	str	r3, [r4, #4]
 80136ce:	bf04      	itt	eq
 80136d0:	1949      	addeq	r1, r1, r5
 80136d2:	6021      	streq	r1, [r4, #0]
 80136d4:	6054      	str	r4, [r2, #4]
 80136d6:	e7ca      	b.n	801366e <_free_r+0x26>
 80136d8:	b003      	add	sp, #12
 80136da:	bd30      	pop	{r4, r5, pc}
 80136dc:	2000a3ac 	.word	0x2000a3ac

080136e0 <sbrk_aligned>:
 80136e0:	b570      	push	{r4, r5, r6, lr}
 80136e2:	4e0e      	ldr	r6, [pc, #56]	; (801371c <sbrk_aligned+0x3c>)
 80136e4:	460c      	mov	r4, r1
 80136e6:	6831      	ldr	r1, [r6, #0]
 80136e8:	4605      	mov	r5, r0
 80136ea:	b911      	cbnz	r1, 80136f2 <sbrk_aligned+0x12>
 80136ec:	f000 fd60 	bl	80141b0 <_sbrk_r>
 80136f0:	6030      	str	r0, [r6, #0]
 80136f2:	4621      	mov	r1, r4
 80136f4:	4628      	mov	r0, r5
 80136f6:	f000 fd5b 	bl	80141b0 <_sbrk_r>
 80136fa:	1c43      	adds	r3, r0, #1
 80136fc:	d00a      	beq.n	8013714 <sbrk_aligned+0x34>
 80136fe:	1cc4      	adds	r4, r0, #3
 8013700:	f024 0403 	bic.w	r4, r4, #3
 8013704:	42a0      	cmp	r0, r4
 8013706:	d007      	beq.n	8013718 <sbrk_aligned+0x38>
 8013708:	1a21      	subs	r1, r4, r0
 801370a:	4628      	mov	r0, r5
 801370c:	f000 fd50 	bl	80141b0 <_sbrk_r>
 8013710:	3001      	adds	r0, #1
 8013712:	d101      	bne.n	8013718 <sbrk_aligned+0x38>
 8013714:	f04f 34ff 	mov.w	r4, #4294967295
 8013718:	4620      	mov	r0, r4
 801371a:	bd70      	pop	{r4, r5, r6, pc}
 801371c:	2000a3b0 	.word	0x2000a3b0

08013720 <_malloc_r>:
 8013720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013724:	1ccd      	adds	r5, r1, #3
 8013726:	f025 0503 	bic.w	r5, r5, #3
 801372a:	3508      	adds	r5, #8
 801372c:	2d0c      	cmp	r5, #12
 801372e:	bf38      	it	cc
 8013730:	250c      	movcc	r5, #12
 8013732:	2d00      	cmp	r5, #0
 8013734:	4607      	mov	r7, r0
 8013736:	db01      	blt.n	801373c <_malloc_r+0x1c>
 8013738:	42a9      	cmp	r1, r5
 801373a:	d905      	bls.n	8013748 <_malloc_r+0x28>
 801373c:	230c      	movs	r3, #12
 801373e:	603b      	str	r3, [r7, #0]
 8013740:	2600      	movs	r6, #0
 8013742:	4630      	mov	r0, r6
 8013744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013748:	4e2e      	ldr	r6, [pc, #184]	; (8013804 <_malloc_r+0xe4>)
 801374a:	f001 fd9f 	bl	801528c <__malloc_lock>
 801374e:	6833      	ldr	r3, [r6, #0]
 8013750:	461c      	mov	r4, r3
 8013752:	bb34      	cbnz	r4, 80137a2 <_malloc_r+0x82>
 8013754:	4629      	mov	r1, r5
 8013756:	4638      	mov	r0, r7
 8013758:	f7ff ffc2 	bl	80136e0 <sbrk_aligned>
 801375c:	1c43      	adds	r3, r0, #1
 801375e:	4604      	mov	r4, r0
 8013760:	d14d      	bne.n	80137fe <_malloc_r+0xde>
 8013762:	6834      	ldr	r4, [r6, #0]
 8013764:	4626      	mov	r6, r4
 8013766:	2e00      	cmp	r6, #0
 8013768:	d140      	bne.n	80137ec <_malloc_r+0xcc>
 801376a:	6823      	ldr	r3, [r4, #0]
 801376c:	4631      	mov	r1, r6
 801376e:	4638      	mov	r0, r7
 8013770:	eb04 0803 	add.w	r8, r4, r3
 8013774:	f000 fd1c 	bl	80141b0 <_sbrk_r>
 8013778:	4580      	cmp	r8, r0
 801377a:	d13a      	bne.n	80137f2 <_malloc_r+0xd2>
 801377c:	6821      	ldr	r1, [r4, #0]
 801377e:	3503      	adds	r5, #3
 8013780:	1a6d      	subs	r5, r5, r1
 8013782:	f025 0503 	bic.w	r5, r5, #3
 8013786:	3508      	adds	r5, #8
 8013788:	2d0c      	cmp	r5, #12
 801378a:	bf38      	it	cc
 801378c:	250c      	movcc	r5, #12
 801378e:	4629      	mov	r1, r5
 8013790:	4638      	mov	r0, r7
 8013792:	f7ff ffa5 	bl	80136e0 <sbrk_aligned>
 8013796:	3001      	adds	r0, #1
 8013798:	d02b      	beq.n	80137f2 <_malloc_r+0xd2>
 801379a:	6823      	ldr	r3, [r4, #0]
 801379c:	442b      	add	r3, r5
 801379e:	6023      	str	r3, [r4, #0]
 80137a0:	e00e      	b.n	80137c0 <_malloc_r+0xa0>
 80137a2:	6822      	ldr	r2, [r4, #0]
 80137a4:	1b52      	subs	r2, r2, r5
 80137a6:	d41e      	bmi.n	80137e6 <_malloc_r+0xc6>
 80137a8:	2a0b      	cmp	r2, #11
 80137aa:	d916      	bls.n	80137da <_malloc_r+0xba>
 80137ac:	1961      	adds	r1, r4, r5
 80137ae:	42a3      	cmp	r3, r4
 80137b0:	6025      	str	r5, [r4, #0]
 80137b2:	bf18      	it	ne
 80137b4:	6059      	strne	r1, [r3, #4]
 80137b6:	6863      	ldr	r3, [r4, #4]
 80137b8:	bf08      	it	eq
 80137ba:	6031      	streq	r1, [r6, #0]
 80137bc:	5162      	str	r2, [r4, r5]
 80137be:	604b      	str	r3, [r1, #4]
 80137c0:	4638      	mov	r0, r7
 80137c2:	f104 060b 	add.w	r6, r4, #11
 80137c6:	f001 fd67 	bl	8015298 <__malloc_unlock>
 80137ca:	f026 0607 	bic.w	r6, r6, #7
 80137ce:	1d23      	adds	r3, r4, #4
 80137d0:	1af2      	subs	r2, r6, r3
 80137d2:	d0b6      	beq.n	8013742 <_malloc_r+0x22>
 80137d4:	1b9b      	subs	r3, r3, r6
 80137d6:	50a3      	str	r3, [r4, r2]
 80137d8:	e7b3      	b.n	8013742 <_malloc_r+0x22>
 80137da:	6862      	ldr	r2, [r4, #4]
 80137dc:	42a3      	cmp	r3, r4
 80137de:	bf0c      	ite	eq
 80137e0:	6032      	streq	r2, [r6, #0]
 80137e2:	605a      	strne	r2, [r3, #4]
 80137e4:	e7ec      	b.n	80137c0 <_malloc_r+0xa0>
 80137e6:	4623      	mov	r3, r4
 80137e8:	6864      	ldr	r4, [r4, #4]
 80137ea:	e7b2      	b.n	8013752 <_malloc_r+0x32>
 80137ec:	4634      	mov	r4, r6
 80137ee:	6876      	ldr	r6, [r6, #4]
 80137f0:	e7b9      	b.n	8013766 <_malloc_r+0x46>
 80137f2:	230c      	movs	r3, #12
 80137f4:	603b      	str	r3, [r7, #0]
 80137f6:	4638      	mov	r0, r7
 80137f8:	f001 fd4e 	bl	8015298 <__malloc_unlock>
 80137fc:	e7a1      	b.n	8013742 <_malloc_r+0x22>
 80137fe:	6025      	str	r5, [r4, #0]
 8013800:	e7de      	b.n	80137c0 <_malloc_r+0xa0>
 8013802:	bf00      	nop
 8013804:	2000a3ac 	.word	0x2000a3ac

08013808 <__cvt>:
 8013808:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801380c:	ec55 4b10 	vmov	r4, r5, d0
 8013810:	2d00      	cmp	r5, #0
 8013812:	460e      	mov	r6, r1
 8013814:	4619      	mov	r1, r3
 8013816:	462b      	mov	r3, r5
 8013818:	bfbb      	ittet	lt
 801381a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801381e:	461d      	movlt	r5, r3
 8013820:	2300      	movge	r3, #0
 8013822:	232d      	movlt	r3, #45	; 0x2d
 8013824:	700b      	strb	r3, [r1, #0]
 8013826:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013828:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801382c:	4691      	mov	r9, r2
 801382e:	f023 0820 	bic.w	r8, r3, #32
 8013832:	bfbc      	itt	lt
 8013834:	4622      	movlt	r2, r4
 8013836:	4614      	movlt	r4, r2
 8013838:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801383c:	d005      	beq.n	801384a <__cvt+0x42>
 801383e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013842:	d100      	bne.n	8013846 <__cvt+0x3e>
 8013844:	3601      	adds	r6, #1
 8013846:	2102      	movs	r1, #2
 8013848:	e000      	b.n	801384c <__cvt+0x44>
 801384a:	2103      	movs	r1, #3
 801384c:	ab03      	add	r3, sp, #12
 801384e:	9301      	str	r3, [sp, #4]
 8013850:	ab02      	add	r3, sp, #8
 8013852:	9300      	str	r3, [sp, #0]
 8013854:	ec45 4b10 	vmov	d0, r4, r5
 8013858:	4653      	mov	r3, sl
 801385a:	4632      	mov	r2, r6
 801385c:	f000 fe50 	bl	8014500 <_dtoa_r>
 8013860:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013864:	4607      	mov	r7, r0
 8013866:	d102      	bne.n	801386e <__cvt+0x66>
 8013868:	f019 0f01 	tst.w	r9, #1
 801386c:	d022      	beq.n	80138b4 <__cvt+0xac>
 801386e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013872:	eb07 0906 	add.w	r9, r7, r6
 8013876:	d110      	bne.n	801389a <__cvt+0x92>
 8013878:	783b      	ldrb	r3, [r7, #0]
 801387a:	2b30      	cmp	r3, #48	; 0x30
 801387c:	d10a      	bne.n	8013894 <__cvt+0x8c>
 801387e:	2200      	movs	r2, #0
 8013880:	2300      	movs	r3, #0
 8013882:	4620      	mov	r0, r4
 8013884:	4629      	mov	r1, r5
 8013886:	f7ed f91f 	bl	8000ac8 <__aeabi_dcmpeq>
 801388a:	b918      	cbnz	r0, 8013894 <__cvt+0x8c>
 801388c:	f1c6 0601 	rsb	r6, r6, #1
 8013890:	f8ca 6000 	str.w	r6, [sl]
 8013894:	f8da 3000 	ldr.w	r3, [sl]
 8013898:	4499      	add	r9, r3
 801389a:	2200      	movs	r2, #0
 801389c:	2300      	movs	r3, #0
 801389e:	4620      	mov	r0, r4
 80138a0:	4629      	mov	r1, r5
 80138a2:	f7ed f911 	bl	8000ac8 <__aeabi_dcmpeq>
 80138a6:	b108      	cbz	r0, 80138ac <__cvt+0xa4>
 80138a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80138ac:	2230      	movs	r2, #48	; 0x30
 80138ae:	9b03      	ldr	r3, [sp, #12]
 80138b0:	454b      	cmp	r3, r9
 80138b2:	d307      	bcc.n	80138c4 <__cvt+0xbc>
 80138b4:	9b03      	ldr	r3, [sp, #12]
 80138b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80138b8:	1bdb      	subs	r3, r3, r7
 80138ba:	4638      	mov	r0, r7
 80138bc:	6013      	str	r3, [r2, #0]
 80138be:	b004      	add	sp, #16
 80138c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138c4:	1c59      	adds	r1, r3, #1
 80138c6:	9103      	str	r1, [sp, #12]
 80138c8:	701a      	strb	r2, [r3, #0]
 80138ca:	e7f0      	b.n	80138ae <__cvt+0xa6>

080138cc <__exponent>:
 80138cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80138ce:	4603      	mov	r3, r0
 80138d0:	2900      	cmp	r1, #0
 80138d2:	bfb8      	it	lt
 80138d4:	4249      	neglt	r1, r1
 80138d6:	f803 2b02 	strb.w	r2, [r3], #2
 80138da:	bfb4      	ite	lt
 80138dc:	222d      	movlt	r2, #45	; 0x2d
 80138de:	222b      	movge	r2, #43	; 0x2b
 80138e0:	2909      	cmp	r1, #9
 80138e2:	7042      	strb	r2, [r0, #1]
 80138e4:	dd2a      	ble.n	801393c <__exponent+0x70>
 80138e6:	f10d 0407 	add.w	r4, sp, #7
 80138ea:	46a4      	mov	ip, r4
 80138ec:	270a      	movs	r7, #10
 80138ee:	46a6      	mov	lr, r4
 80138f0:	460a      	mov	r2, r1
 80138f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80138f6:	fb07 1516 	mls	r5, r7, r6, r1
 80138fa:	3530      	adds	r5, #48	; 0x30
 80138fc:	2a63      	cmp	r2, #99	; 0x63
 80138fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8013902:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8013906:	4631      	mov	r1, r6
 8013908:	dcf1      	bgt.n	80138ee <__exponent+0x22>
 801390a:	3130      	adds	r1, #48	; 0x30
 801390c:	f1ae 0502 	sub.w	r5, lr, #2
 8013910:	f804 1c01 	strb.w	r1, [r4, #-1]
 8013914:	1c44      	adds	r4, r0, #1
 8013916:	4629      	mov	r1, r5
 8013918:	4561      	cmp	r1, ip
 801391a:	d30a      	bcc.n	8013932 <__exponent+0x66>
 801391c:	f10d 0209 	add.w	r2, sp, #9
 8013920:	eba2 020e 	sub.w	r2, r2, lr
 8013924:	4565      	cmp	r5, ip
 8013926:	bf88      	it	hi
 8013928:	2200      	movhi	r2, #0
 801392a:	4413      	add	r3, r2
 801392c:	1a18      	subs	r0, r3, r0
 801392e:	b003      	add	sp, #12
 8013930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013932:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013936:	f804 2f01 	strb.w	r2, [r4, #1]!
 801393a:	e7ed      	b.n	8013918 <__exponent+0x4c>
 801393c:	2330      	movs	r3, #48	; 0x30
 801393e:	3130      	adds	r1, #48	; 0x30
 8013940:	7083      	strb	r3, [r0, #2]
 8013942:	70c1      	strb	r1, [r0, #3]
 8013944:	1d03      	adds	r3, r0, #4
 8013946:	e7f1      	b.n	801392c <__exponent+0x60>

08013948 <_printf_float>:
 8013948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801394c:	ed2d 8b02 	vpush	{d8}
 8013950:	b08d      	sub	sp, #52	; 0x34
 8013952:	460c      	mov	r4, r1
 8013954:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013958:	4616      	mov	r6, r2
 801395a:	461f      	mov	r7, r3
 801395c:	4605      	mov	r5, r0
 801395e:	f001 fc7f 	bl	8015260 <_localeconv_r>
 8013962:	f8d0 a000 	ldr.w	sl, [r0]
 8013966:	4650      	mov	r0, sl
 8013968:	f7ec fc32 	bl	80001d0 <strlen>
 801396c:	2300      	movs	r3, #0
 801396e:	930a      	str	r3, [sp, #40]	; 0x28
 8013970:	6823      	ldr	r3, [r4, #0]
 8013972:	9305      	str	r3, [sp, #20]
 8013974:	f8d8 3000 	ldr.w	r3, [r8]
 8013978:	f894 b018 	ldrb.w	fp, [r4, #24]
 801397c:	3307      	adds	r3, #7
 801397e:	f023 0307 	bic.w	r3, r3, #7
 8013982:	f103 0208 	add.w	r2, r3, #8
 8013986:	f8c8 2000 	str.w	r2, [r8]
 801398a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801398e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013992:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013996:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801399a:	9307      	str	r3, [sp, #28]
 801399c:	f8cd 8018 	str.w	r8, [sp, #24]
 80139a0:	ee08 0a10 	vmov	s16, r0
 80139a4:	4b9f      	ldr	r3, [pc, #636]	; (8013c24 <_printf_float+0x2dc>)
 80139a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80139aa:	f04f 32ff 	mov.w	r2, #4294967295
 80139ae:	f7ed f8bd 	bl	8000b2c <__aeabi_dcmpun>
 80139b2:	bb88      	cbnz	r0, 8013a18 <_printf_float+0xd0>
 80139b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80139b8:	4b9a      	ldr	r3, [pc, #616]	; (8013c24 <_printf_float+0x2dc>)
 80139ba:	f04f 32ff 	mov.w	r2, #4294967295
 80139be:	f7ed f897 	bl	8000af0 <__aeabi_dcmple>
 80139c2:	bb48      	cbnz	r0, 8013a18 <_printf_float+0xd0>
 80139c4:	2200      	movs	r2, #0
 80139c6:	2300      	movs	r3, #0
 80139c8:	4640      	mov	r0, r8
 80139ca:	4649      	mov	r1, r9
 80139cc:	f7ed f886 	bl	8000adc <__aeabi_dcmplt>
 80139d0:	b110      	cbz	r0, 80139d8 <_printf_float+0x90>
 80139d2:	232d      	movs	r3, #45	; 0x2d
 80139d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80139d8:	4b93      	ldr	r3, [pc, #588]	; (8013c28 <_printf_float+0x2e0>)
 80139da:	4894      	ldr	r0, [pc, #592]	; (8013c2c <_printf_float+0x2e4>)
 80139dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80139e0:	bf94      	ite	ls
 80139e2:	4698      	movls	r8, r3
 80139e4:	4680      	movhi	r8, r0
 80139e6:	2303      	movs	r3, #3
 80139e8:	6123      	str	r3, [r4, #16]
 80139ea:	9b05      	ldr	r3, [sp, #20]
 80139ec:	f023 0204 	bic.w	r2, r3, #4
 80139f0:	6022      	str	r2, [r4, #0]
 80139f2:	f04f 0900 	mov.w	r9, #0
 80139f6:	9700      	str	r7, [sp, #0]
 80139f8:	4633      	mov	r3, r6
 80139fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80139fc:	4621      	mov	r1, r4
 80139fe:	4628      	mov	r0, r5
 8013a00:	f000 f9d8 	bl	8013db4 <_printf_common>
 8013a04:	3001      	adds	r0, #1
 8013a06:	f040 8090 	bne.w	8013b2a <_printf_float+0x1e2>
 8013a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8013a0e:	b00d      	add	sp, #52	; 0x34
 8013a10:	ecbd 8b02 	vpop	{d8}
 8013a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a18:	4642      	mov	r2, r8
 8013a1a:	464b      	mov	r3, r9
 8013a1c:	4640      	mov	r0, r8
 8013a1e:	4649      	mov	r1, r9
 8013a20:	f7ed f884 	bl	8000b2c <__aeabi_dcmpun>
 8013a24:	b140      	cbz	r0, 8013a38 <_printf_float+0xf0>
 8013a26:	464b      	mov	r3, r9
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	bfbc      	itt	lt
 8013a2c:	232d      	movlt	r3, #45	; 0x2d
 8013a2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8013a32:	487f      	ldr	r0, [pc, #508]	; (8013c30 <_printf_float+0x2e8>)
 8013a34:	4b7f      	ldr	r3, [pc, #508]	; (8013c34 <_printf_float+0x2ec>)
 8013a36:	e7d1      	b.n	80139dc <_printf_float+0x94>
 8013a38:	6863      	ldr	r3, [r4, #4]
 8013a3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8013a3e:	9206      	str	r2, [sp, #24]
 8013a40:	1c5a      	adds	r2, r3, #1
 8013a42:	d13f      	bne.n	8013ac4 <_printf_float+0x17c>
 8013a44:	2306      	movs	r3, #6
 8013a46:	6063      	str	r3, [r4, #4]
 8013a48:	9b05      	ldr	r3, [sp, #20]
 8013a4a:	6861      	ldr	r1, [r4, #4]
 8013a4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8013a50:	2300      	movs	r3, #0
 8013a52:	9303      	str	r3, [sp, #12]
 8013a54:	ab0a      	add	r3, sp, #40	; 0x28
 8013a56:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013a5a:	ab09      	add	r3, sp, #36	; 0x24
 8013a5c:	ec49 8b10 	vmov	d0, r8, r9
 8013a60:	9300      	str	r3, [sp, #0]
 8013a62:	6022      	str	r2, [r4, #0]
 8013a64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013a68:	4628      	mov	r0, r5
 8013a6a:	f7ff fecd 	bl	8013808 <__cvt>
 8013a6e:	9b06      	ldr	r3, [sp, #24]
 8013a70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013a72:	2b47      	cmp	r3, #71	; 0x47
 8013a74:	4680      	mov	r8, r0
 8013a76:	d108      	bne.n	8013a8a <_printf_float+0x142>
 8013a78:	1cc8      	adds	r0, r1, #3
 8013a7a:	db02      	blt.n	8013a82 <_printf_float+0x13a>
 8013a7c:	6863      	ldr	r3, [r4, #4]
 8013a7e:	4299      	cmp	r1, r3
 8013a80:	dd41      	ble.n	8013b06 <_printf_float+0x1be>
 8013a82:	f1ab 0b02 	sub.w	fp, fp, #2
 8013a86:	fa5f fb8b 	uxtb.w	fp, fp
 8013a8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013a8e:	d820      	bhi.n	8013ad2 <_printf_float+0x18a>
 8013a90:	3901      	subs	r1, #1
 8013a92:	465a      	mov	r2, fp
 8013a94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8013a98:	9109      	str	r1, [sp, #36]	; 0x24
 8013a9a:	f7ff ff17 	bl	80138cc <__exponent>
 8013a9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013aa0:	1813      	adds	r3, r2, r0
 8013aa2:	2a01      	cmp	r2, #1
 8013aa4:	4681      	mov	r9, r0
 8013aa6:	6123      	str	r3, [r4, #16]
 8013aa8:	dc02      	bgt.n	8013ab0 <_printf_float+0x168>
 8013aaa:	6822      	ldr	r2, [r4, #0]
 8013aac:	07d2      	lsls	r2, r2, #31
 8013aae:	d501      	bpl.n	8013ab4 <_printf_float+0x16c>
 8013ab0:	3301      	adds	r3, #1
 8013ab2:	6123      	str	r3, [r4, #16]
 8013ab4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d09c      	beq.n	80139f6 <_printf_float+0xae>
 8013abc:	232d      	movs	r3, #45	; 0x2d
 8013abe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ac2:	e798      	b.n	80139f6 <_printf_float+0xae>
 8013ac4:	9a06      	ldr	r2, [sp, #24]
 8013ac6:	2a47      	cmp	r2, #71	; 0x47
 8013ac8:	d1be      	bne.n	8013a48 <_printf_float+0x100>
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d1bc      	bne.n	8013a48 <_printf_float+0x100>
 8013ace:	2301      	movs	r3, #1
 8013ad0:	e7b9      	b.n	8013a46 <_printf_float+0xfe>
 8013ad2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8013ad6:	d118      	bne.n	8013b0a <_printf_float+0x1c2>
 8013ad8:	2900      	cmp	r1, #0
 8013ada:	6863      	ldr	r3, [r4, #4]
 8013adc:	dd0b      	ble.n	8013af6 <_printf_float+0x1ae>
 8013ade:	6121      	str	r1, [r4, #16]
 8013ae0:	b913      	cbnz	r3, 8013ae8 <_printf_float+0x1a0>
 8013ae2:	6822      	ldr	r2, [r4, #0]
 8013ae4:	07d0      	lsls	r0, r2, #31
 8013ae6:	d502      	bpl.n	8013aee <_printf_float+0x1a6>
 8013ae8:	3301      	adds	r3, #1
 8013aea:	440b      	add	r3, r1
 8013aec:	6123      	str	r3, [r4, #16]
 8013aee:	65a1      	str	r1, [r4, #88]	; 0x58
 8013af0:	f04f 0900 	mov.w	r9, #0
 8013af4:	e7de      	b.n	8013ab4 <_printf_float+0x16c>
 8013af6:	b913      	cbnz	r3, 8013afe <_printf_float+0x1b6>
 8013af8:	6822      	ldr	r2, [r4, #0]
 8013afa:	07d2      	lsls	r2, r2, #31
 8013afc:	d501      	bpl.n	8013b02 <_printf_float+0x1ba>
 8013afe:	3302      	adds	r3, #2
 8013b00:	e7f4      	b.n	8013aec <_printf_float+0x1a4>
 8013b02:	2301      	movs	r3, #1
 8013b04:	e7f2      	b.n	8013aec <_printf_float+0x1a4>
 8013b06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b0c:	4299      	cmp	r1, r3
 8013b0e:	db05      	blt.n	8013b1c <_printf_float+0x1d4>
 8013b10:	6823      	ldr	r3, [r4, #0]
 8013b12:	6121      	str	r1, [r4, #16]
 8013b14:	07d8      	lsls	r0, r3, #31
 8013b16:	d5ea      	bpl.n	8013aee <_printf_float+0x1a6>
 8013b18:	1c4b      	adds	r3, r1, #1
 8013b1a:	e7e7      	b.n	8013aec <_printf_float+0x1a4>
 8013b1c:	2900      	cmp	r1, #0
 8013b1e:	bfd4      	ite	le
 8013b20:	f1c1 0202 	rsble	r2, r1, #2
 8013b24:	2201      	movgt	r2, #1
 8013b26:	4413      	add	r3, r2
 8013b28:	e7e0      	b.n	8013aec <_printf_float+0x1a4>
 8013b2a:	6823      	ldr	r3, [r4, #0]
 8013b2c:	055a      	lsls	r2, r3, #21
 8013b2e:	d407      	bmi.n	8013b40 <_printf_float+0x1f8>
 8013b30:	6923      	ldr	r3, [r4, #16]
 8013b32:	4642      	mov	r2, r8
 8013b34:	4631      	mov	r1, r6
 8013b36:	4628      	mov	r0, r5
 8013b38:	47b8      	blx	r7
 8013b3a:	3001      	adds	r0, #1
 8013b3c:	d12c      	bne.n	8013b98 <_printf_float+0x250>
 8013b3e:	e764      	b.n	8013a0a <_printf_float+0xc2>
 8013b40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013b44:	f240 80e0 	bls.w	8013d08 <_printf_float+0x3c0>
 8013b48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013b4c:	2200      	movs	r2, #0
 8013b4e:	2300      	movs	r3, #0
 8013b50:	f7ec ffba 	bl	8000ac8 <__aeabi_dcmpeq>
 8013b54:	2800      	cmp	r0, #0
 8013b56:	d034      	beq.n	8013bc2 <_printf_float+0x27a>
 8013b58:	4a37      	ldr	r2, [pc, #220]	; (8013c38 <_printf_float+0x2f0>)
 8013b5a:	2301      	movs	r3, #1
 8013b5c:	4631      	mov	r1, r6
 8013b5e:	4628      	mov	r0, r5
 8013b60:	47b8      	blx	r7
 8013b62:	3001      	adds	r0, #1
 8013b64:	f43f af51 	beq.w	8013a0a <_printf_float+0xc2>
 8013b68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013b6c:	429a      	cmp	r2, r3
 8013b6e:	db02      	blt.n	8013b76 <_printf_float+0x22e>
 8013b70:	6823      	ldr	r3, [r4, #0]
 8013b72:	07d8      	lsls	r0, r3, #31
 8013b74:	d510      	bpl.n	8013b98 <_printf_float+0x250>
 8013b76:	ee18 3a10 	vmov	r3, s16
 8013b7a:	4652      	mov	r2, sl
 8013b7c:	4631      	mov	r1, r6
 8013b7e:	4628      	mov	r0, r5
 8013b80:	47b8      	blx	r7
 8013b82:	3001      	adds	r0, #1
 8013b84:	f43f af41 	beq.w	8013a0a <_printf_float+0xc2>
 8013b88:	f04f 0800 	mov.w	r8, #0
 8013b8c:	f104 091a 	add.w	r9, r4, #26
 8013b90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013b92:	3b01      	subs	r3, #1
 8013b94:	4543      	cmp	r3, r8
 8013b96:	dc09      	bgt.n	8013bac <_printf_float+0x264>
 8013b98:	6823      	ldr	r3, [r4, #0]
 8013b9a:	079b      	lsls	r3, r3, #30
 8013b9c:	f100 8105 	bmi.w	8013daa <_printf_float+0x462>
 8013ba0:	68e0      	ldr	r0, [r4, #12]
 8013ba2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013ba4:	4298      	cmp	r0, r3
 8013ba6:	bfb8      	it	lt
 8013ba8:	4618      	movlt	r0, r3
 8013baa:	e730      	b.n	8013a0e <_printf_float+0xc6>
 8013bac:	2301      	movs	r3, #1
 8013bae:	464a      	mov	r2, r9
 8013bb0:	4631      	mov	r1, r6
 8013bb2:	4628      	mov	r0, r5
 8013bb4:	47b8      	blx	r7
 8013bb6:	3001      	adds	r0, #1
 8013bb8:	f43f af27 	beq.w	8013a0a <_printf_float+0xc2>
 8013bbc:	f108 0801 	add.w	r8, r8, #1
 8013bc0:	e7e6      	b.n	8013b90 <_printf_float+0x248>
 8013bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	dc39      	bgt.n	8013c3c <_printf_float+0x2f4>
 8013bc8:	4a1b      	ldr	r2, [pc, #108]	; (8013c38 <_printf_float+0x2f0>)
 8013bca:	2301      	movs	r3, #1
 8013bcc:	4631      	mov	r1, r6
 8013bce:	4628      	mov	r0, r5
 8013bd0:	47b8      	blx	r7
 8013bd2:	3001      	adds	r0, #1
 8013bd4:	f43f af19 	beq.w	8013a0a <_printf_float+0xc2>
 8013bd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013bdc:	4313      	orrs	r3, r2
 8013bde:	d102      	bne.n	8013be6 <_printf_float+0x29e>
 8013be0:	6823      	ldr	r3, [r4, #0]
 8013be2:	07d9      	lsls	r1, r3, #31
 8013be4:	d5d8      	bpl.n	8013b98 <_printf_float+0x250>
 8013be6:	ee18 3a10 	vmov	r3, s16
 8013bea:	4652      	mov	r2, sl
 8013bec:	4631      	mov	r1, r6
 8013bee:	4628      	mov	r0, r5
 8013bf0:	47b8      	blx	r7
 8013bf2:	3001      	adds	r0, #1
 8013bf4:	f43f af09 	beq.w	8013a0a <_printf_float+0xc2>
 8013bf8:	f04f 0900 	mov.w	r9, #0
 8013bfc:	f104 0a1a 	add.w	sl, r4, #26
 8013c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c02:	425b      	negs	r3, r3
 8013c04:	454b      	cmp	r3, r9
 8013c06:	dc01      	bgt.n	8013c0c <_printf_float+0x2c4>
 8013c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c0a:	e792      	b.n	8013b32 <_printf_float+0x1ea>
 8013c0c:	2301      	movs	r3, #1
 8013c0e:	4652      	mov	r2, sl
 8013c10:	4631      	mov	r1, r6
 8013c12:	4628      	mov	r0, r5
 8013c14:	47b8      	blx	r7
 8013c16:	3001      	adds	r0, #1
 8013c18:	f43f aef7 	beq.w	8013a0a <_printf_float+0xc2>
 8013c1c:	f109 0901 	add.w	r9, r9, #1
 8013c20:	e7ee      	b.n	8013c00 <_printf_float+0x2b8>
 8013c22:	bf00      	nop
 8013c24:	7fefffff 	.word	0x7fefffff
 8013c28:	08016554 	.word	0x08016554
 8013c2c:	08016558 	.word	0x08016558
 8013c30:	08016560 	.word	0x08016560
 8013c34:	0801655c 	.word	0x0801655c
 8013c38:	08016564 	.word	0x08016564
 8013c3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013c3e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013c40:	429a      	cmp	r2, r3
 8013c42:	bfa8      	it	ge
 8013c44:	461a      	movge	r2, r3
 8013c46:	2a00      	cmp	r2, #0
 8013c48:	4691      	mov	r9, r2
 8013c4a:	dc37      	bgt.n	8013cbc <_printf_float+0x374>
 8013c4c:	f04f 0b00 	mov.w	fp, #0
 8013c50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013c54:	f104 021a 	add.w	r2, r4, #26
 8013c58:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013c5a:	9305      	str	r3, [sp, #20]
 8013c5c:	eba3 0309 	sub.w	r3, r3, r9
 8013c60:	455b      	cmp	r3, fp
 8013c62:	dc33      	bgt.n	8013ccc <_printf_float+0x384>
 8013c64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013c68:	429a      	cmp	r2, r3
 8013c6a:	db3b      	blt.n	8013ce4 <_printf_float+0x39c>
 8013c6c:	6823      	ldr	r3, [r4, #0]
 8013c6e:	07da      	lsls	r2, r3, #31
 8013c70:	d438      	bmi.n	8013ce4 <_printf_float+0x39c>
 8013c72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c74:	9a05      	ldr	r2, [sp, #20]
 8013c76:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013c78:	1a9a      	subs	r2, r3, r2
 8013c7a:	eba3 0901 	sub.w	r9, r3, r1
 8013c7e:	4591      	cmp	r9, r2
 8013c80:	bfa8      	it	ge
 8013c82:	4691      	movge	r9, r2
 8013c84:	f1b9 0f00 	cmp.w	r9, #0
 8013c88:	dc35      	bgt.n	8013cf6 <_printf_float+0x3ae>
 8013c8a:	f04f 0800 	mov.w	r8, #0
 8013c8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013c92:	f104 0a1a 	add.w	sl, r4, #26
 8013c96:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013c9a:	1a9b      	subs	r3, r3, r2
 8013c9c:	eba3 0309 	sub.w	r3, r3, r9
 8013ca0:	4543      	cmp	r3, r8
 8013ca2:	f77f af79 	ble.w	8013b98 <_printf_float+0x250>
 8013ca6:	2301      	movs	r3, #1
 8013ca8:	4652      	mov	r2, sl
 8013caa:	4631      	mov	r1, r6
 8013cac:	4628      	mov	r0, r5
 8013cae:	47b8      	blx	r7
 8013cb0:	3001      	adds	r0, #1
 8013cb2:	f43f aeaa 	beq.w	8013a0a <_printf_float+0xc2>
 8013cb6:	f108 0801 	add.w	r8, r8, #1
 8013cba:	e7ec      	b.n	8013c96 <_printf_float+0x34e>
 8013cbc:	4613      	mov	r3, r2
 8013cbe:	4631      	mov	r1, r6
 8013cc0:	4642      	mov	r2, r8
 8013cc2:	4628      	mov	r0, r5
 8013cc4:	47b8      	blx	r7
 8013cc6:	3001      	adds	r0, #1
 8013cc8:	d1c0      	bne.n	8013c4c <_printf_float+0x304>
 8013cca:	e69e      	b.n	8013a0a <_printf_float+0xc2>
 8013ccc:	2301      	movs	r3, #1
 8013cce:	4631      	mov	r1, r6
 8013cd0:	4628      	mov	r0, r5
 8013cd2:	9205      	str	r2, [sp, #20]
 8013cd4:	47b8      	blx	r7
 8013cd6:	3001      	adds	r0, #1
 8013cd8:	f43f ae97 	beq.w	8013a0a <_printf_float+0xc2>
 8013cdc:	9a05      	ldr	r2, [sp, #20]
 8013cde:	f10b 0b01 	add.w	fp, fp, #1
 8013ce2:	e7b9      	b.n	8013c58 <_printf_float+0x310>
 8013ce4:	ee18 3a10 	vmov	r3, s16
 8013ce8:	4652      	mov	r2, sl
 8013cea:	4631      	mov	r1, r6
 8013cec:	4628      	mov	r0, r5
 8013cee:	47b8      	blx	r7
 8013cf0:	3001      	adds	r0, #1
 8013cf2:	d1be      	bne.n	8013c72 <_printf_float+0x32a>
 8013cf4:	e689      	b.n	8013a0a <_printf_float+0xc2>
 8013cf6:	9a05      	ldr	r2, [sp, #20]
 8013cf8:	464b      	mov	r3, r9
 8013cfa:	4442      	add	r2, r8
 8013cfc:	4631      	mov	r1, r6
 8013cfe:	4628      	mov	r0, r5
 8013d00:	47b8      	blx	r7
 8013d02:	3001      	adds	r0, #1
 8013d04:	d1c1      	bne.n	8013c8a <_printf_float+0x342>
 8013d06:	e680      	b.n	8013a0a <_printf_float+0xc2>
 8013d08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013d0a:	2a01      	cmp	r2, #1
 8013d0c:	dc01      	bgt.n	8013d12 <_printf_float+0x3ca>
 8013d0e:	07db      	lsls	r3, r3, #31
 8013d10:	d538      	bpl.n	8013d84 <_printf_float+0x43c>
 8013d12:	2301      	movs	r3, #1
 8013d14:	4642      	mov	r2, r8
 8013d16:	4631      	mov	r1, r6
 8013d18:	4628      	mov	r0, r5
 8013d1a:	47b8      	blx	r7
 8013d1c:	3001      	adds	r0, #1
 8013d1e:	f43f ae74 	beq.w	8013a0a <_printf_float+0xc2>
 8013d22:	ee18 3a10 	vmov	r3, s16
 8013d26:	4652      	mov	r2, sl
 8013d28:	4631      	mov	r1, r6
 8013d2a:	4628      	mov	r0, r5
 8013d2c:	47b8      	blx	r7
 8013d2e:	3001      	adds	r0, #1
 8013d30:	f43f ae6b 	beq.w	8013a0a <_printf_float+0xc2>
 8013d34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013d38:	2200      	movs	r2, #0
 8013d3a:	2300      	movs	r3, #0
 8013d3c:	f7ec fec4 	bl	8000ac8 <__aeabi_dcmpeq>
 8013d40:	b9d8      	cbnz	r0, 8013d7a <_printf_float+0x432>
 8013d42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d44:	f108 0201 	add.w	r2, r8, #1
 8013d48:	3b01      	subs	r3, #1
 8013d4a:	4631      	mov	r1, r6
 8013d4c:	4628      	mov	r0, r5
 8013d4e:	47b8      	blx	r7
 8013d50:	3001      	adds	r0, #1
 8013d52:	d10e      	bne.n	8013d72 <_printf_float+0x42a>
 8013d54:	e659      	b.n	8013a0a <_printf_float+0xc2>
 8013d56:	2301      	movs	r3, #1
 8013d58:	4652      	mov	r2, sl
 8013d5a:	4631      	mov	r1, r6
 8013d5c:	4628      	mov	r0, r5
 8013d5e:	47b8      	blx	r7
 8013d60:	3001      	adds	r0, #1
 8013d62:	f43f ae52 	beq.w	8013a0a <_printf_float+0xc2>
 8013d66:	f108 0801 	add.w	r8, r8, #1
 8013d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d6c:	3b01      	subs	r3, #1
 8013d6e:	4543      	cmp	r3, r8
 8013d70:	dcf1      	bgt.n	8013d56 <_printf_float+0x40e>
 8013d72:	464b      	mov	r3, r9
 8013d74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013d78:	e6dc      	b.n	8013b34 <_printf_float+0x1ec>
 8013d7a:	f04f 0800 	mov.w	r8, #0
 8013d7e:	f104 0a1a 	add.w	sl, r4, #26
 8013d82:	e7f2      	b.n	8013d6a <_printf_float+0x422>
 8013d84:	2301      	movs	r3, #1
 8013d86:	4642      	mov	r2, r8
 8013d88:	e7df      	b.n	8013d4a <_printf_float+0x402>
 8013d8a:	2301      	movs	r3, #1
 8013d8c:	464a      	mov	r2, r9
 8013d8e:	4631      	mov	r1, r6
 8013d90:	4628      	mov	r0, r5
 8013d92:	47b8      	blx	r7
 8013d94:	3001      	adds	r0, #1
 8013d96:	f43f ae38 	beq.w	8013a0a <_printf_float+0xc2>
 8013d9a:	f108 0801 	add.w	r8, r8, #1
 8013d9e:	68e3      	ldr	r3, [r4, #12]
 8013da0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013da2:	1a5b      	subs	r3, r3, r1
 8013da4:	4543      	cmp	r3, r8
 8013da6:	dcf0      	bgt.n	8013d8a <_printf_float+0x442>
 8013da8:	e6fa      	b.n	8013ba0 <_printf_float+0x258>
 8013daa:	f04f 0800 	mov.w	r8, #0
 8013dae:	f104 0919 	add.w	r9, r4, #25
 8013db2:	e7f4      	b.n	8013d9e <_printf_float+0x456>

08013db4 <_printf_common>:
 8013db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013db8:	4616      	mov	r6, r2
 8013dba:	4699      	mov	r9, r3
 8013dbc:	688a      	ldr	r2, [r1, #8]
 8013dbe:	690b      	ldr	r3, [r1, #16]
 8013dc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013dc4:	4293      	cmp	r3, r2
 8013dc6:	bfb8      	it	lt
 8013dc8:	4613      	movlt	r3, r2
 8013dca:	6033      	str	r3, [r6, #0]
 8013dcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013dd0:	4607      	mov	r7, r0
 8013dd2:	460c      	mov	r4, r1
 8013dd4:	b10a      	cbz	r2, 8013dda <_printf_common+0x26>
 8013dd6:	3301      	adds	r3, #1
 8013dd8:	6033      	str	r3, [r6, #0]
 8013dda:	6823      	ldr	r3, [r4, #0]
 8013ddc:	0699      	lsls	r1, r3, #26
 8013dde:	bf42      	ittt	mi
 8013de0:	6833      	ldrmi	r3, [r6, #0]
 8013de2:	3302      	addmi	r3, #2
 8013de4:	6033      	strmi	r3, [r6, #0]
 8013de6:	6825      	ldr	r5, [r4, #0]
 8013de8:	f015 0506 	ands.w	r5, r5, #6
 8013dec:	d106      	bne.n	8013dfc <_printf_common+0x48>
 8013dee:	f104 0a19 	add.w	sl, r4, #25
 8013df2:	68e3      	ldr	r3, [r4, #12]
 8013df4:	6832      	ldr	r2, [r6, #0]
 8013df6:	1a9b      	subs	r3, r3, r2
 8013df8:	42ab      	cmp	r3, r5
 8013dfa:	dc26      	bgt.n	8013e4a <_printf_common+0x96>
 8013dfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013e00:	1e13      	subs	r3, r2, #0
 8013e02:	6822      	ldr	r2, [r4, #0]
 8013e04:	bf18      	it	ne
 8013e06:	2301      	movne	r3, #1
 8013e08:	0692      	lsls	r2, r2, #26
 8013e0a:	d42b      	bmi.n	8013e64 <_printf_common+0xb0>
 8013e0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013e10:	4649      	mov	r1, r9
 8013e12:	4638      	mov	r0, r7
 8013e14:	47c0      	blx	r8
 8013e16:	3001      	adds	r0, #1
 8013e18:	d01e      	beq.n	8013e58 <_printf_common+0xa4>
 8013e1a:	6823      	ldr	r3, [r4, #0]
 8013e1c:	68e5      	ldr	r5, [r4, #12]
 8013e1e:	6832      	ldr	r2, [r6, #0]
 8013e20:	f003 0306 	and.w	r3, r3, #6
 8013e24:	2b04      	cmp	r3, #4
 8013e26:	bf08      	it	eq
 8013e28:	1aad      	subeq	r5, r5, r2
 8013e2a:	68a3      	ldr	r3, [r4, #8]
 8013e2c:	6922      	ldr	r2, [r4, #16]
 8013e2e:	bf0c      	ite	eq
 8013e30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013e34:	2500      	movne	r5, #0
 8013e36:	4293      	cmp	r3, r2
 8013e38:	bfc4      	itt	gt
 8013e3a:	1a9b      	subgt	r3, r3, r2
 8013e3c:	18ed      	addgt	r5, r5, r3
 8013e3e:	2600      	movs	r6, #0
 8013e40:	341a      	adds	r4, #26
 8013e42:	42b5      	cmp	r5, r6
 8013e44:	d11a      	bne.n	8013e7c <_printf_common+0xc8>
 8013e46:	2000      	movs	r0, #0
 8013e48:	e008      	b.n	8013e5c <_printf_common+0xa8>
 8013e4a:	2301      	movs	r3, #1
 8013e4c:	4652      	mov	r2, sl
 8013e4e:	4649      	mov	r1, r9
 8013e50:	4638      	mov	r0, r7
 8013e52:	47c0      	blx	r8
 8013e54:	3001      	adds	r0, #1
 8013e56:	d103      	bne.n	8013e60 <_printf_common+0xac>
 8013e58:	f04f 30ff 	mov.w	r0, #4294967295
 8013e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e60:	3501      	adds	r5, #1
 8013e62:	e7c6      	b.n	8013df2 <_printf_common+0x3e>
 8013e64:	18e1      	adds	r1, r4, r3
 8013e66:	1c5a      	adds	r2, r3, #1
 8013e68:	2030      	movs	r0, #48	; 0x30
 8013e6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013e6e:	4422      	add	r2, r4
 8013e70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013e74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013e78:	3302      	adds	r3, #2
 8013e7a:	e7c7      	b.n	8013e0c <_printf_common+0x58>
 8013e7c:	2301      	movs	r3, #1
 8013e7e:	4622      	mov	r2, r4
 8013e80:	4649      	mov	r1, r9
 8013e82:	4638      	mov	r0, r7
 8013e84:	47c0      	blx	r8
 8013e86:	3001      	adds	r0, #1
 8013e88:	d0e6      	beq.n	8013e58 <_printf_common+0xa4>
 8013e8a:	3601      	adds	r6, #1
 8013e8c:	e7d9      	b.n	8013e42 <_printf_common+0x8e>
	...

08013e90 <_printf_i>:
 8013e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013e94:	7e0f      	ldrb	r7, [r1, #24]
 8013e96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013e98:	2f78      	cmp	r7, #120	; 0x78
 8013e9a:	4691      	mov	r9, r2
 8013e9c:	4680      	mov	r8, r0
 8013e9e:	460c      	mov	r4, r1
 8013ea0:	469a      	mov	sl, r3
 8013ea2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013ea6:	d807      	bhi.n	8013eb8 <_printf_i+0x28>
 8013ea8:	2f62      	cmp	r7, #98	; 0x62
 8013eaa:	d80a      	bhi.n	8013ec2 <_printf_i+0x32>
 8013eac:	2f00      	cmp	r7, #0
 8013eae:	f000 80d8 	beq.w	8014062 <_printf_i+0x1d2>
 8013eb2:	2f58      	cmp	r7, #88	; 0x58
 8013eb4:	f000 80a3 	beq.w	8013ffe <_printf_i+0x16e>
 8013eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013ebc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013ec0:	e03a      	b.n	8013f38 <_printf_i+0xa8>
 8013ec2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013ec6:	2b15      	cmp	r3, #21
 8013ec8:	d8f6      	bhi.n	8013eb8 <_printf_i+0x28>
 8013eca:	a101      	add	r1, pc, #4	; (adr r1, 8013ed0 <_printf_i+0x40>)
 8013ecc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013ed0:	08013f29 	.word	0x08013f29
 8013ed4:	08013f3d 	.word	0x08013f3d
 8013ed8:	08013eb9 	.word	0x08013eb9
 8013edc:	08013eb9 	.word	0x08013eb9
 8013ee0:	08013eb9 	.word	0x08013eb9
 8013ee4:	08013eb9 	.word	0x08013eb9
 8013ee8:	08013f3d 	.word	0x08013f3d
 8013eec:	08013eb9 	.word	0x08013eb9
 8013ef0:	08013eb9 	.word	0x08013eb9
 8013ef4:	08013eb9 	.word	0x08013eb9
 8013ef8:	08013eb9 	.word	0x08013eb9
 8013efc:	08014049 	.word	0x08014049
 8013f00:	08013f6d 	.word	0x08013f6d
 8013f04:	0801402b 	.word	0x0801402b
 8013f08:	08013eb9 	.word	0x08013eb9
 8013f0c:	08013eb9 	.word	0x08013eb9
 8013f10:	0801406b 	.word	0x0801406b
 8013f14:	08013eb9 	.word	0x08013eb9
 8013f18:	08013f6d 	.word	0x08013f6d
 8013f1c:	08013eb9 	.word	0x08013eb9
 8013f20:	08013eb9 	.word	0x08013eb9
 8013f24:	08014033 	.word	0x08014033
 8013f28:	682b      	ldr	r3, [r5, #0]
 8013f2a:	1d1a      	adds	r2, r3, #4
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	602a      	str	r2, [r5, #0]
 8013f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013f38:	2301      	movs	r3, #1
 8013f3a:	e0a3      	b.n	8014084 <_printf_i+0x1f4>
 8013f3c:	6820      	ldr	r0, [r4, #0]
 8013f3e:	6829      	ldr	r1, [r5, #0]
 8013f40:	0606      	lsls	r6, r0, #24
 8013f42:	f101 0304 	add.w	r3, r1, #4
 8013f46:	d50a      	bpl.n	8013f5e <_printf_i+0xce>
 8013f48:	680e      	ldr	r6, [r1, #0]
 8013f4a:	602b      	str	r3, [r5, #0]
 8013f4c:	2e00      	cmp	r6, #0
 8013f4e:	da03      	bge.n	8013f58 <_printf_i+0xc8>
 8013f50:	232d      	movs	r3, #45	; 0x2d
 8013f52:	4276      	negs	r6, r6
 8013f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013f58:	485e      	ldr	r0, [pc, #376]	; (80140d4 <_printf_i+0x244>)
 8013f5a:	230a      	movs	r3, #10
 8013f5c:	e019      	b.n	8013f92 <_printf_i+0x102>
 8013f5e:	680e      	ldr	r6, [r1, #0]
 8013f60:	602b      	str	r3, [r5, #0]
 8013f62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013f66:	bf18      	it	ne
 8013f68:	b236      	sxthne	r6, r6
 8013f6a:	e7ef      	b.n	8013f4c <_printf_i+0xbc>
 8013f6c:	682b      	ldr	r3, [r5, #0]
 8013f6e:	6820      	ldr	r0, [r4, #0]
 8013f70:	1d19      	adds	r1, r3, #4
 8013f72:	6029      	str	r1, [r5, #0]
 8013f74:	0601      	lsls	r1, r0, #24
 8013f76:	d501      	bpl.n	8013f7c <_printf_i+0xec>
 8013f78:	681e      	ldr	r6, [r3, #0]
 8013f7a:	e002      	b.n	8013f82 <_printf_i+0xf2>
 8013f7c:	0646      	lsls	r6, r0, #25
 8013f7e:	d5fb      	bpl.n	8013f78 <_printf_i+0xe8>
 8013f80:	881e      	ldrh	r6, [r3, #0]
 8013f82:	4854      	ldr	r0, [pc, #336]	; (80140d4 <_printf_i+0x244>)
 8013f84:	2f6f      	cmp	r7, #111	; 0x6f
 8013f86:	bf0c      	ite	eq
 8013f88:	2308      	moveq	r3, #8
 8013f8a:	230a      	movne	r3, #10
 8013f8c:	2100      	movs	r1, #0
 8013f8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013f92:	6865      	ldr	r5, [r4, #4]
 8013f94:	60a5      	str	r5, [r4, #8]
 8013f96:	2d00      	cmp	r5, #0
 8013f98:	bfa2      	ittt	ge
 8013f9a:	6821      	ldrge	r1, [r4, #0]
 8013f9c:	f021 0104 	bicge.w	r1, r1, #4
 8013fa0:	6021      	strge	r1, [r4, #0]
 8013fa2:	b90e      	cbnz	r6, 8013fa8 <_printf_i+0x118>
 8013fa4:	2d00      	cmp	r5, #0
 8013fa6:	d04d      	beq.n	8014044 <_printf_i+0x1b4>
 8013fa8:	4615      	mov	r5, r2
 8013faa:	fbb6 f1f3 	udiv	r1, r6, r3
 8013fae:	fb03 6711 	mls	r7, r3, r1, r6
 8013fb2:	5dc7      	ldrb	r7, [r0, r7]
 8013fb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013fb8:	4637      	mov	r7, r6
 8013fba:	42bb      	cmp	r3, r7
 8013fbc:	460e      	mov	r6, r1
 8013fbe:	d9f4      	bls.n	8013faa <_printf_i+0x11a>
 8013fc0:	2b08      	cmp	r3, #8
 8013fc2:	d10b      	bne.n	8013fdc <_printf_i+0x14c>
 8013fc4:	6823      	ldr	r3, [r4, #0]
 8013fc6:	07de      	lsls	r6, r3, #31
 8013fc8:	d508      	bpl.n	8013fdc <_printf_i+0x14c>
 8013fca:	6923      	ldr	r3, [r4, #16]
 8013fcc:	6861      	ldr	r1, [r4, #4]
 8013fce:	4299      	cmp	r1, r3
 8013fd0:	bfde      	ittt	le
 8013fd2:	2330      	movle	r3, #48	; 0x30
 8013fd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013fd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013fdc:	1b52      	subs	r2, r2, r5
 8013fde:	6122      	str	r2, [r4, #16]
 8013fe0:	f8cd a000 	str.w	sl, [sp]
 8013fe4:	464b      	mov	r3, r9
 8013fe6:	aa03      	add	r2, sp, #12
 8013fe8:	4621      	mov	r1, r4
 8013fea:	4640      	mov	r0, r8
 8013fec:	f7ff fee2 	bl	8013db4 <_printf_common>
 8013ff0:	3001      	adds	r0, #1
 8013ff2:	d14c      	bne.n	801408e <_printf_i+0x1fe>
 8013ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8013ff8:	b004      	add	sp, #16
 8013ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ffe:	4835      	ldr	r0, [pc, #212]	; (80140d4 <_printf_i+0x244>)
 8014000:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8014004:	6829      	ldr	r1, [r5, #0]
 8014006:	6823      	ldr	r3, [r4, #0]
 8014008:	f851 6b04 	ldr.w	r6, [r1], #4
 801400c:	6029      	str	r1, [r5, #0]
 801400e:	061d      	lsls	r5, r3, #24
 8014010:	d514      	bpl.n	801403c <_printf_i+0x1ac>
 8014012:	07df      	lsls	r7, r3, #31
 8014014:	bf44      	itt	mi
 8014016:	f043 0320 	orrmi.w	r3, r3, #32
 801401a:	6023      	strmi	r3, [r4, #0]
 801401c:	b91e      	cbnz	r6, 8014026 <_printf_i+0x196>
 801401e:	6823      	ldr	r3, [r4, #0]
 8014020:	f023 0320 	bic.w	r3, r3, #32
 8014024:	6023      	str	r3, [r4, #0]
 8014026:	2310      	movs	r3, #16
 8014028:	e7b0      	b.n	8013f8c <_printf_i+0xfc>
 801402a:	6823      	ldr	r3, [r4, #0]
 801402c:	f043 0320 	orr.w	r3, r3, #32
 8014030:	6023      	str	r3, [r4, #0]
 8014032:	2378      	movs	r3, #120	; 0x78
 8014034:	4828      	ldr	r0, [pc, #160]	; (80140d8 <_printf_i+0x248>)
 8014036:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801403a:	e7e3      	b.n	8014004 <_printf_i+0x174>
 801403c:	0659      	lsls	r1, r3, #25
 801403e:	bf48      	it	mi
 8014040:	b2b6      	uxthmi	r6, r6
 8014042:	e7e6      	b.n	8014012 <_printf_i+0x182>
 8014044:	4615      	mov	r5, r2
 8014046:	e7bb      	b.n	8013fc0 <_printf_i+0x130>
 8014048:	682b      	ldr	r3, [r5, #0]
 801404a:	6826      	ldr	r6, [r4, #0]
 801404c:	6961      	ldr	r1, [r4, #20]
 801404e:	1d18      	adds	r0, r3, #4
 8014050:	6028      	str	r0, [r5, #0]
 8014052:	0635      	lsls	r5, r6, #24
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	d501      	bpl.n	801405c <_printf_i+0x1cc>
 8014058:	6019      	str	r1, [r3, #0]
 801405a:	e002      	b.n	8014062 <_printf_i+0x1d2>
 801405c:	0670      	lsls	r0, r6, #25
 801405e:	d5fb      	bpl.n	8014058 <_printf_i+0x1c8>
 8014060:	8019      	strh	r1, [r3, #0]
 8014062:	2300      	movs	r3, #0
 8014064:	6123      	str	r3, [r4, #16]
 8014066:	4615      	mov	r5, r2
 8014068:	e7ba      	b.n	8013fe0 <_printf_i+0x150>
 801406a:	682b      	ldr	r3, [r5, #0]
 801406c:	1d1a      	adds	r2, r3, #4
 801406e:	602a      	str	r2, [r5, #0]
 8014070:	681d      	ldr	r5, [r3, #0]
 8014072:	6862      	ldr	r2, [r4, #4]
 8014074:	2100      	movs	r1, #0
 8014076:	4628      	mov	r0, r5
 8014078:	f7ec f8b2 	bl	80001e0 <memchr>
 801407c:	b108      	cbz	r0, 8014082 <_printf_i+0x1f2>
 801407e:	1b40      	subs	r0, r0, r5
 8014080:	6060      	str	r0, [r4, #4]
 8014082:	6863      	ldr	r3, [r4, #4]
 8014084:	6123      	str	r3, [r4, #16]
 8014086:	2300      	movs	r3, #0
 8014088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801408c:	e7a8      	b.n	8013fe0 <_printf_i+0x150>
 801408e:	6923      	ldr	r3, [r4, #16]
 8014090:	462a      	mov	r2, r5
 8014092:	4649      	mov	r1, r9
 8014094:	4640      	mov	r0, r8
 8014096:	47d0      	blx	sl
 8014098:	3001      	adds	r0, #1
 801409a:	d0ab      	beq.n	8013ff4 <_printf_i+0x164>
 801409c:	6823      	ldr	r3, [r4, #0]
 801409e:	079b      	lsls	r3, r3, #30
 80140a0:	d413      	bmi.n	80140ca <_printf_i+0x23a>
 80140a2:	68e0      	ldr	r0, [r4, #12]
 80140a4:	9b03      	ldr	r3, [sp, #12]
 80140a6:	4298      	cmp	r0, r3
 80140a8:	bfb8      	it	lt
 80140aa:	4618      	movlt	r0, r3
 80140ac:	e7a4      	b.n	8013ff8 <_printf_i+0x168>
 80140ae:	2301      	movs	r3, #1
 80140b0:	4632      	mov	r2, r6
 80140b2:	4649      	mov	r1, r9
 80140b4:	4640      	mov	r0, r8
 80140b6:	47d0      	blx	sl
 80140b8:	3001      	adds	r0, #1
 80140ba:	d09b      	beq.n	8013ff4 <_printf_i+0x164>
 80140bc:	3501      	adds	r5, #1
 80140be:	68e3      	ldr	r3, [r4, #12]
 80140c0:	9903      	ldr	r1, [sp, #12]
 80140c2:	1a5b      	subs	r3, r3, r1
 80140c4:	42ab      	cmp	r3, r5
 80140c6:	dcf2      	bgt.n	80140ae <_printf_i+0x21e>
 80140c8:	e7eb      	b.n	80140a2 <_printf_i+0x212>
 80140ca:	2500      	movs	r5, #0
 80140cc:	f104 0619 	add.w	r6, r4, #25
 80140d0:	e7f5      	b.n	80140be <_printf_i+0x22e>
 80140d2:	bf00      	nop
 80140d4:	08016566 	.word	0x08016566
 80140d8:	08016577 	.word	0x08016577

080140dc <cleanup_glue>:
 80140dc:	b538      	push	{r3, r4, r5, lr}
 80140de:	460c      	mov	r4, r1
 80140e0:	6809      	ldr	r1, [r1, #0]
 80140e2:	4605      	mov	r5, r0
 80140e4:	b109      	cbz	r1, 80140ea <cleanup_glue+0xe>
 80140e6:	f7ff fff9 	bl	80140dc <cleanup_glue>
 80140ea:	4621      	mov	r1, r4
 80140ec:	4628      	mov	r0, r5
 80140ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80140f2:	f7ff baa9 	b.w	8013648 <_free_r>
	...

080140f8 <_reclaim_reent>:
 80140f8:	4b2c      	ldr	r3, [pc, #176]	; (80141ac <_reclaim_reent+0xb4>)
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	4283      	cmp	r3, r0
 80140fe:	b570      	push	{r4, r5, r6, lr}
 8014100:	4604      	mov	r4, r0
 8014102:	d051      	beq.n	80141a8 <_reclaim_reent+0xb0>
 8014104:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8014106:	b143      	cbz	r3, 801411a <_reclaim_reent+0x22>
 8014108:	68db      	ldr	r3, [r3, #12]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d14a      	bne.n	80141a4 <_reclaim_reent+0xac>
 801410e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014110:	6819      	ldr	r1, [r3, #0]
 8014112:	b111      	cbz	r1, 801411a <_reclaim_reent+0x22>
 8014114:	4620      	mov	r0, r4
 8014116:	f7ff fa97 	bl	8013648 <_free_r>
 801411a:	6961      	ldr	r1, [r4, #20]
 801411c:	b111      	cbz	r1, 8014124 <_reclaim_reent+0x2c>
 801411e:	4620      	mov	r0, r4
 8014120:	f7ff fa92 	bl	8013648 <_free_r>
 8014124:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014126:	b111      	cbz	r1, 801412e <_reclaim_reent+0x36>
 8014128:	4620      	mov	r0, r4
 801412a:	f7ff fa8d 	bl	8013648 <_free_r>
 801412e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014130:	b111      	cbz	r1, 8014138 <_reclaim_reent+0x40>
 8014132:	4620      	mov	r0, r4
 8014134:	f7ff fa88 	bl	8013648 <_free_r>
 8014138:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801413a:	b111      	cbz	r1, 8014142 <_reclaim_reent+0x4a>
 801413c:	4620      	mov	r0, r4
 801413e:	f7ff fa83 	bl	8013648 <_free_r>
 8014142:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8014144:	b111      	cbz	r1, 801414c <_reclaim_reent+0x54>
 8014146:	4620      	mov	r0, r4
 8014148:	f7ff fa7e 	bl	8013648 <_free_r>
 801414c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801414e:	b111      	cbz	r1, 8014156 <_reclaim_reent+0x5e>
 8014150:	4620      	mov	r0, r4
 8014152:	f7ff fa79 	bl	8013648 <_free_r>
 8014156:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8014158:	b111      	cbz	r1, 8014160 <_reclaim_reent+0x68>
 801415a:	4620      	mov	r0, r4
 801415c:	f7ff fa74 	bl	8013648 <_free_r>
 8014160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014162:	b111      	cbz	r1, 801416a <_reclaim_reent+0x72>
 8014164:	4620      	mov	r0, r4
 8014166:	f7ff fa6f 	bl	8013648 <_free_r>
 801416a:	69a3      	ldr	r3, [r4, #24]
 801416c:	b1e3      	cbz	r3, 80141a8 <_reclaim_reent+0xb0>
 801416e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8014170:	4620      	mov	r0, r4
 8014172:	4798      	blx	r3
 8014174:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8014176:	b1b9      	cbz	r1, 80141a8 <_reclaim_reent+0xb0>
 8014178:	4620      	mov	r0, r4
 801417a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801417e:	f7ff bfad 	b.w	80140dc <cleanup_glue>
 8014182:	5949      	ldr	r1, [r1, r5]
 8014184:	b941      	cbnz	r1, 8014198 <_reclaim_reent+0xa0>
 8014186:	3504      	adds	r5, #4
 8014188:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801418a:	2d80      	cmp	r5, #128	; 0x80
 801418c:	68d9      	ldr	r1, [r3, #12]
 801418e:	d1f8      	bne.n	8014182 <_reclaim_reent+0x8a>
 8014190:	4620      	mov	r0, r4
 8014192:	f7ff fa59 	bl	8013648 <_free_r>
 8014196:	e7ba      	b.n	801410e <_reclaim_reent+0x16>
 8014198:	680e      	ldr	r6, [r1, #0]
 801419a:	4620      	mov	r0, r4
 801419c:	f7ff fa54 	bl	8013648 <_free_r>
 80141a0:	4631      	mov	r1, r6
 80141a2:	e7ef      	b.n	8014184 <_reclaim_reent+0x8c>
 80141a4:	2500      	movs	r5, #0
 80141a6:	e7ef      	b.n	8014188 <_reclaim_reent+0x90>
 80141a8:	bd70      	pop	{r4, r5, r6, pc}
 80141aa:	bf00      	nop
 80141ac:	20000020 	.word	0x20000020

080141b0 <_sbrk_r>:
 80141b0:	b538      	push	{r3, r4, r5, lr}
 80141b2:	4d06      	ldr	r5, [pc, #24]	; (80141cc <_sbrk_r+0x1c>)
 80141b4:	2300      	movs	r3, #0
 80141b6:	4604      	mov	r4, r0
 80141b8:	4608      	mov	r0, r1
 80141ba:	602b      	str	r3, [r5, #0]
 80141bc:	f7f3 fd92 	bl	8007ce4 <_sbrk>
 80141c0:	1c43      	adds	r3, r0, #1
 80141c2:	d102      	bne.n	80141ca <_sbrk_r+0x1a>
 80141c4:	682b      	ldr	r3, [r5, #0]
 80141c6:	b103      	cbz	r3, 80141ca <_sbrk_r+0x1a>
 80141c8:	6023      	str	r3, [r4, #0]
 80141ca:	bd38      	pop	{r3, r4, r5, pc}
 80141cc:	2000a3b4 	.word	0x2000a3b4

080141d0 <_raise_r>:
 80141d0:	291f      	cmp	r1, #31
 80141d2:	b538      	push	{r3, r4, r5, lr}
 80141d4:	4604      	mov	r4, r0
 80141d6:	460d      	mov	r5, r1
 80141d8:	d904      	bls.n	80141e4 <_raise_r+0x14>
 80141da:	2316      	movs	r3, #22
 80141dc:	6003      	str	r3, [r0, #0]
 80141de:	f04f 30ff 	mov.w	r0, #4294967295
 80141e2:	bd38      	pop	{r3, r4, r5, pc}
 80141e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80141e6:	b112      	cbz	r2, 80141ee <_raise_r+0x1e>
 80141e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80141ec:	b94b      	cbnz	r3, 8014202 <_raise_r+0x32>
 80141ee:	4620      	mov	r0, r4
 80141f0:	f000 f830 	bl	8014254 <_getpid_r>
 80141f4:	462a      	mov	r2, r5
 80141f6:	4601      	mov	r1, r0
 80141f8:	4620      	mov	r0, r4
 80141fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80141fe:	f000 b817 	b.w	8014230 <_kill_r>
 8014202:	2b01      	cmp	r3, #1
 8014204:	d00a      	beq.n	801421c <_raise_r+0x4c>
 8014206:	1c59      	adds	r1, r3, #1
 8014208:	d103      	bne.n	8014212 <_raise_r+0x42>
 801420a:	2316      	movs	r3, #22
 801420c:	6003      	str	r3, [r0, #0]
 801420e:	2001      	movs	r0, #1
 8014210:	e7e7      	b.n	80141e2 <_raise_r+0x12>
 8014212:	2400      	movs	r4, #0
 8014214:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014218:	4628      	mov	r0, r5
 801421a:	4798      	blx	r3
 801421c:	2000      	movs	r0, #0
 801421e:	e7e0      	b.n	80141e2 <_raise_r+0x12>

08014220 <raise>:
 8014220:	4b02      	ldr	r3, [pc, #8]	; (801422c <raise+0xc>)
 8014222:	4601      	mov	r1, r0
 8014224:	6818      	ldr	r0, [r3, #0]
 8014226:	f7ff bfd3 	b.w	80141d0 <_raise_r>
 801422a:	bf00      	nop
 801422c:	20000020 	.word	0x20000020

08014230 <_kill_r>:
 8014230:	b538      	push	{r3, r4, r5, lr}
 8014232:	4d07      	ldr	r5, [pc, #28]	; (8014250 <_kill_r+0x20>)
 8014234:	2300      	movs	r3, #0
 8014236:	4604      	mov	r4, r0
 8014238:	4608      	mov	r0, r1
 801423a:	4611      	mov	r1, r2
 801423c:	602b      	str	r3, [r5, #0]
 801423e:	f7f3 fcc9 	bl	8007bd4 <_kill>
 8014242:	1c43      	adds	r3, r0, #1
 8014244:	d102      	bne.n	801424c <_kill_r+0x1c>
 8014246:	682b      	ldr	r3, [r5, #0]
 8014248:	b103      	cbz	r3, 801424c <_kill_r+0x1c>
 801424a:	6023      	str	r3, [r4, #0]
 801424c:	bd38      	pop	{r3, r4, r5, pc}
 801424e:	bf00      	nop
 8014250:	2000a3b4 	.word	0x2000a3b4

08014254 <_getpid_r>:
 8014254:	f7f3 bcb6 	b.w	8007bc4 <_getpid>

08014258 <__sread>:
 8014258:	b510      	push	{r4, lr}
 801425a:	460c      	mov	r4, r1
 801425c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014260:	f001 fbba 	bl	80159d8 <_read_r>
 8014264:	2800      	cmp	r0, #0
 8014266:	bfab      	itete	ge
 8014268:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801426a:	89a3      	ldrhlt	r3, [r4, #12]
 801426c:	181b      	addge	r3, r3, r0
 801426e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014272:	bfac      	ite	ge
 8014274:	6563      	strge	r3, [r4, #84]	; 0x54
 8014276:	81a3      	strhlt	r3, [r4, #12]
 8014278:	bd10      	pop	{r4, pc}

0801427a <__swrite>:
 801427a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801427e:	461f      	mov	r7, r3
 8014280:	898b      	ldrh	r3, [r1, #12]
 8014282:	05db      	lsls	r3, r3, #23
 8014284:	4605      	mov	r5, r0
 8014286:	460c      	mov	r4, r1
 8014288:	4616      	mov	r6, r2
 801428a:	d505      	bpl.n	8014298 <__swrite+0x1e>
 801428c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014290:	2302      	movs	r3, #2
 8014292:	2200      	movs	r2, #0
 8014294:	f000 ffe8 	bl	8015268 <_lseek_r>
 8014298:	89a3      	ldrh	r3, [r4, #12]
 801429a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801429e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80142a2:	81a3      	strh	r3, [r4, #12]
 80142a4:	4632      	mov	r2, r6
 80142a6:	463b      	mov	r3, r7
 80142a8:	4628      	mov	r0, r5
 80142aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80142ae:	f000 b817 	b.w	80142e0 <_write_r>

080142b2 <__sseek>:
 80142b2:	b510      	push	{r4, lr}
 80142b4:	460c      	mov	r4, r1
 80142b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142ba:	f000 ffd5 	bl	8015268 <_lseek_r>
 80142be:	1c43      	adds	r3, r0, #1
 80142c0:	89a3      	ldrh	r3, [r4, #12]
 80142c2:	bf15      	itete	ne
 80142c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80142c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80142ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80142ce:	81a3      	strheq	r3, [r4, #12]
 80142d0:	bf18      	it	ne
 80142d2:	81a3      	strhne	r3, [r4, #12]
 80142d4:	bd10      	pop	{r4, pc}

080142d6 <__sclose>:
 80142d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80142da:	f000 b875 	b.w	80143c8 <_close_r>
	...

080142e0 <_write_r>:
 80142e0:	b538      	push	{r3, r4, r5, lr}
 80142e2:	4d07      	ldr	r5, [pc, #28]	; (8014300 <_write_r+0x20>)
 80142e4:	4604      	mov	r4, r0
 80142e6:	4608      	mov	r0, r1
 80142e8:	4611      	mov	r1, r2
 80142ea:	2200      	movs	r2, #0
 80142ec:	602a      	str	r2, [r5, #0]
 80142ee:	461a      	mov	r2, r3
 80142f0:	f7f3 fca7 	bl	8007c42 <_write>
 80142f4:	1c43      	adds	r3, r0, #1
 80142f6:	d102      	bne.n	80142fe <_write_r+0x1e>
 80142f8:	682b      	ldr	r3, [r5, #0]
 80142fa:	b103      	cbz	r3, 80142fe <_write_r+0x1e>
 80142fc:	6023      	str	r3, [r4, #0]
 80142fe:	bd38      	pop	{r3, r4, r5, pc}
 8014300:	2000a3b4 	.word	0x2000a3b4

08014304 <__register_exitproc>:
 8014304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014308:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80143c4 <__register_exitproc+0xc0>
 801430c:	4606      	mov	r6, r0
 801430e:	f8d8 0000 	ldr.w	r0, [r8]
 8014312:	461f      	mov	r7, r3
 8014314:	460d      	mov	r5, r1
 8014316:	4691      	mov	r9, r2
 8014318:	f7ff f96d 	bl	80135f6 <__retarget_lock_acquire_recursive>
 801431c:	4b25      	ldr	r3, [pc, #148]	; (80143b4 <__register_exitproc+0xb0>)
 801431e:	681c      	ldr	r4, [r3, #0]
 8014320:	b934      	cbnz	r4, 8014330 <__register_exitproc+0x2c>
 8014322:	4c25      	ldr	r4, [pc, #148]	; (80143b8 <__register_exitproc+0xb4>)
 8014324:	601c      	str	r4, [r3, #0]
 8014326:	4b25      	ldr	r3, [pc, #148]	; (80143bc <__register_exitproc+0xb8>)
 8014328:	b113      	cbz	r3, 8014330 <__register_exitproc+0x2c>
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8014330:	6863      	ldr	r3, [r4, #4]
 8014332:	2b1f      	cmp	r3, #31
 8014334:	dd07      	ble.n	8014346 <__register_exitproc+0x42>
 8014336:	f8d8 0000 	ldr.w	r0, [r8]
 801433a:	f7ff f95e 	bl	80135fa <__retarget_lock_release_recursive>
 801433e:	f04f 30ff 	mov.w	r0, #4294967295
 8014342:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014346:	b34e      	cbz	r6, 801439c <__register_exitproc+0x98>
 8014348:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801434c:	b988      	cbnz	r0, 8014372 <__register_exitproc+0x6e>
 801434e:	4b1c      	ldr	r3, [pc, #112]	; (80143c0 <__register_exitproc+0xbc>)
 8014350:	b923      	cbnz	r3, 801435c <__register_exitproc+0x58>
 8014352:	f8d8 0000 	ldr.w	r0, [r8]
 8014356:	f7ff f94f 	bl	80135f8 <__retarget_lock_release>
 801435a:	e7f0      	b.n	801433e <__register_exitproc+0x3a>
 801435c:	f44f 7084 	mov.w	r0, #264	; 0x108
 8014360:	f7ff f94c 	bl	80135fc <malloc>
 8014364:	2800      	cmp	r0, #0
 8014366:	d0f4      	beq.n	8014352 <__register_exitproc+0x4e>
 8014368:	2300      	movs	r3, #0
 801436a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801436e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8014372:	6863      	ldr	r3, [r4, #4]
 8014374:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8014378:	2201      	movs	r2, #1
 801437a:	409a      	lsls	r2, r3
 801437c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8014380:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8014384:	4313      	orrs	r3, r2
 8014386:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801438a:	2e02      	cmp	r6, #2
 801438c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8014390:	bf02      	ittt	eq
 8014392:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8014396:	4313      	orreq	r3, r2
 8014398:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 801439c:	6863      	ldr	r3, [r4, #4]
 801439e:	f8d8 0000 	ldr.w	r0, [r8]
 80143a2:	1c5a      	adds	r2, r3, #1
 80143a4:	3302      	adds	r3, #2
 80143a6:	6062      	str	r2, [r4, #4]
 80143a8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80143ac:	f7ff f925 	bl	80135fa <__retarget_lock_release_recursive>
 80143b0:	2000      	movs	r0, #0
 80143b2:	e7c6      	b.n	8014342 <__register_exitproc+0x3e>
 80143b4:	2000a444 	.word	0x2000a444
 80143b8:	2000a3b8 	.word	0x2000a3b8
 80143bc:	00000000 	.word	0x00000000
 80143c0:	080135fd 	.word	0x080135fd
 80143c4:	20000084 	.word	0x20000084

080143c8 <_close_r>:
 80143c8:	b538      	push	{r3, r4, r5, lr}
 80143ca:	4d06      	ldr	r5, [pc, #24]	; (80143e4 <_close_r+0x1c>)
 80143cc:	2300      	movs	r3, #0
 80143ce:	4604      	mov	r4, r0
 80143d0:	4608      	mov	r0, r1
 80143d2:	602b      	str	r3, [r5, #0]
 80143d4:	f7f3 fc51 	bl	8007c7a <_close>
 80143d8:	1c43      	adds	r3, r0, #1
 80143da:	d102      	bne.n	80143e2 <_close_r+0x1a>
 80143dc:	682b      	ldr	r3, [r5, #0]
 80143de:	b103      	cbz	r3, 80143e2 <_close_r+0x1a>
 80143e0:	6023      	str	r3, [r4, #0]
 80143e2:	bd38      	pop	{r3, r4, r5, pc}
 80143e4:	2000a3b4 	.word	0x2000a3b4

080143e8 <quorem>:
 80143e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143ec:	6903      	ldr	r3, [r0, #16]
 80143ee:	690c      	ldr	r4, [r1, #16]
 80143f0:	42a3      	cmp	r3, r4
 80143f2:	4607      	mov	r7, r0
 80143f4:	f2c0 8081 	blt.w	80144fa <quorem+0x112>
 80143f8:	3c01      	subs	r4, #1
 80143fa:	f101 0814 	add.w	r8, r1, #20
 80143fe:	f100 0514 	add.w	r5, r0, #20
 8014402:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8014406:	9301      	str	r3, [sp, #4]
 8014408:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801440c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8014410:	3301      	adds	r3, #1
 8014412:	429a      	cmp	r2, r3
 8014414:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8014418:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801441c:	fbb2 f6f3 	udiv	r6, r2, r3
 8014420:	d331      	bcc.n	8014486 <quorem+0x9e>
 8014422:	f04f 0e00 	mov.w	lr, #0
 8014426:	4640      	mov	r0, r8
 8014428:	46ac      	mov	ip, r5
 801442a:	46f2      	mov	sl, lr
 801442c:	f850 2b04 	ldr.w	r2, [r0], #4
 8014430:	b293      	uxth	r3, r2
 8014432:	fb06 e303 	mla	r3, r6, r3, lr
 8014436:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801443a:	b29b      	uxth	r3, r3
 801443c:	ebaa 0303 	sub.w	r3, sl, r3
 8014440:	f8dc a000 	ldr.w	sl, [ip]
 8014444:	0c12      	lsrs	r2, r2, #16
 8014446:	fa13 f38a 	uxtah	r3, r3, sl
 801444a:	fb06 e202 	mla	r2, r6, r2, lr
 801444e:	9300      	str	r3, [sp, #0]
 8014450:	9b00      	ldr	r3, [sp, #0]
 8014452:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8014456:	b292      	uxth	r2, r2
 8014458:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801445c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014460:	f8bd 3000 	ldrh.w	r3, [sp]
 8014464:	4581      	cmp	r9, r0
 8014466:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801446a:	f84c 3b04 	str.w	r3, [ip], #4
 801446e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8014472:	d2db      	bcs.n	801442c <quorem+0x44>
 8014474:	f855 300b 	ldr.w	r3, [r5, fp]
 8014478:	b92b      	cbnz	r3, 8014486 <quorem+0x9e>
 801447a:	9b01      	ldr	r3, [sp, #4]
 801447c:	3b04      	subs	r3, #4
 801447e:	429d      	cmp	r5, r3
 8014480:	461a      	mov	r2, r3
 8014482:	d32e      	bcc.n	80144e2 <quorem+0xfa>
 8014484:	613c      	str	r4, [r7, #16]
 8014486:	4638      	mov	r0, r7
 8014488:	f001 f98e 	bl	80157a8 <__mcmp>
 801448c:	2800      	cmp	r0, #0
 801448e:	db24      	blt.n	80144da <quorem+0xf2>
 8014490:	3601      	adds	r6, #1
 8014492:	4628      	mov	r0, r5
 8014494:	f04f 0c00 	mov.w	ip, #0
 8014498:	f858 2b04 	ldr.w	r2, [r8], #4
 801449c:	f8d0 e000 	ldr.w	lr, [r0]
 80144a0:	b293      	uxth	r3, r2
 80144a2:	ebac 0303 	sub.w	r3, ip, r3
 80144a6:	0c12      	lsrs	r2, r2, #16
 80144a8:	fa13 f38e 	uxtah	r3, r3, lr
 80144ac:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80144b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80144b4:	b29b      	uxth	r3, r3
 80144b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80144ba:	45c1      	cmp	r9, r8
 80144bc:	f840 3b04 	str.w	r3, [r0], #4
 80144c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80144c4:	d2e8      	bcs.n	8014498 <quorem+0xb0>
 80144c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80144ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80144ce:	b922      	cbnz	r2, 80144da <quorem+0xf2>
 80144d0:	3b04      	subs	r3, #4
 80144d2:	429d      	cmp	r5, r3
 80144d4:	461a      	mov	r2, r3
 80144d6:	d30a      	bcc.n	80144ee <quorem+0x106>
 80144d8:	613c      	str	r4, [r7, #16]
 80144da:	4630      	mov	r0, r6
 80144dc:	b003      	add	sp, #12
 80144de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144e2:	6812      	ldr	r2, [r2, #0]
 80144e4:	3b04      	subs	r3, #4
 80144e6:	2a00      	cmp	r2, #0
 80144e8:	d1cc      	bne.n	8014484 <quorem+0x9c>
 80144ea:	3c01      	subs	r4, #1
 80144ec:	e7c7      	b.n	801447e <quorem+0x96>
 80144ee:	6812      	ldr	r2, [r2, #0]
 80144f0:	3b04      	subs	r3, #4
 80144f2:	2a00      	cmp	r2, #0
 80144f4:	d1f0      	bne.n	80144d8 <quorem+0xf0>
 80144f6:	3c01      	subs	r4, #1
 80144f8:	e7eb      	b.n	80144d2 <quorem+0xea>
 80144fa:	2000      	movs	r0, #0
 80144fc:	e7ee      	b.n	80144dc <quorem+0xf4>
	...

08014500 <_dtoa_r>:
 8014500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014504:	ed2d 8b04 	vpush	{d8-d9}
 8014508:	ec57 6b10 	vmov	r6, r7, d0
 801450c:	b093      	sub	sp, #76	; 0x4c
 801450e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014510:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014514:	9106      	str	r1, [sp, #24]
 8014516:	ee10 aa10 	vmov	sl, s0
 801451a:	4604      	mov	r4, r0
 801451c:	9209      	str	r2, [sp, #36]	; 0x24
 801451e:	930c      	str	r3, [sp, #48]	; 0x30
 8014520:	46bb      	mov	fp, r7
 8014522:	b975      	cbnz	r5, 8014542 <_dtoa_r+0x42>
 8014524:	2010      	movs	r0, #16
 8014526:	f7ff f869 	bl	80135fc <malloc>
 801452a:	4602      	mov	r2, r0
 801452c:	6260      	str	r0, [r4, #36]	; 0x24
 801452e:	b920      	cbnz	r0, 801453a <_dtoa_r+0x3a>
 8014530:	4ba7      	ldr	r3, [pc, #668]	; (80147d0 <_dtoa_r+0x2d0>)
 8014532:	21ea      	movs	r1, #234	; 0xea
 8014534:	48a7      	ldr	r0, [pc, #668]	; (80147d4 <_dtoa_r+0x2d4>)
 8014536:	f001 fa61 	bl	80159fc <__assert_func>
 801453a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801453e:	6005      	str	r5, [r0, #0]
 8014540:	60c5      	str	r5, [r0, #12]
 8014542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014544:	6819      	ldr	r1, [r3, #0]
 8014546:	b151      	cbz	r1, 801455e <_dtoa_r+0x5e>
 8014548:	685a      	ldr	r2, [r3, #4]
 801454a:	604a      	str	r2, [r1, #4]
 801454c:	2301      	movs	r3, #1
 801454e:	4093      	lsls	r3, r2
 8014550:	608b      	str	r3, [r1, #8]
 8014552:	4620      	mov	r0, r4
 8014554:	f000 fee6 	bl	8015324 <_Bfree>
 8014558:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801455a:	2200      	movs	r2, #0
 801455c:	601a      	str	r2, [r3, #0]
 801455e:	1e3b      	subs	r3, r7, #0
 8014560:	bfaa      	itet	ge
 8014562:	2300      	movge	r3, #0
 8014564:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8014568:	f8c8 3000 	strge.w	r3, [r8]
 801456c:	4b9a      	ldr	r3, [pc, #616]	; (80147d8 <_dtoa_r+0x2d8>)
 801456e:	bfbc      	itt	lt
 8014570:	2201      	movlt	r2, #1
 8014572:	f8c8 2000 	strlt.w	r2, [r8]
 8014576:	ea33 030b 	bics.w	r3, r3, fp
 801457a:	d11b      	bne.n	80145b4 <_dtoa_r+0xb4>
 801457c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801457e:	f242 730f 	movw	r3, #9999	; 0x270f
 8014582:	6013      	str	r3, [r2, #0]
 8014584:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014588:	4333      	orrs	r3, r6
 801458a:	f000 8592 	beq.w	80150b2 <_dtoa_r+0xbb2>
 801458e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014590:	b963      	cbnz	r3, 80145ac <_dtoa_r+0xac>
 8014592:	4b92      	ldr	r3, [pc, #584]	; (80147dc <_dtoa_r+0x2dc>)
 8014594:	e022      	b.n	80145dc <_dtoa_r+0xdc>
 8014596:	4b92      	ldr	r3, [pc, #584]	; (80147e0 <_dtoa_r+0x2e0>)
 8014598:	9301      	str	r3, [sp, #4]
 801459a:	3308      	adds	r3, #8
 801459c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801459e:	6013      	str	r3, [r2, #0]
 80145a0:	9801      	ldr	r0, [sp, #4]
 80145a2:	b013      	add	sp, #76	; 0x4c
 80145a4:	ecbd 8b04 	vpop	{d8-d9}
 80145a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145ac:	4b8b      	ldr	r3, [pc, #556]	; (80147dc <_dtoa_r+0x2dc>)
 80145ae:	9301      	str	r3, [sp, #4]
 80145b0:	3303      	adds	r3, #3
 80145b2:	e7f3      	b.n	801459c <_dtoa_r+0x9c>
 80145b4:	2200      	movs	r2, #0
 80145b6:	2300      	movs	r3, #0
 80145b8:	4650      	mov	r0, sl
 80145ba:	4659      	mov	r1, fp
 80145bc:	f7ec fa84 	bl	8000ac8 <__aeabi_dcmpeq>
 80145c0:	ec4b ab19 	vmov	d9, sl, fp
 80145c4:	4680      	mov	r8, r0
 80145c6:	b158      	cbz	r0, 80145e0 <_dtoa_r+0xe0>
 80145c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80145ca:	2301      	movs	r3, #1
 80145cc:	6013      	str	r3, [r2, #0]
 80145ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80145d0:	2b00      	cmp	r3, #0
 80145d2:	f000 856b 	beq.w	80150ac <_dtoa_r+0xbac>
 80145d6:	4883      	ldr	r0, [pc, #524]	; (80147e4 <_dtoa_r+0x2e4>)
 80145d8:	6018      	str	r0, [r3, #0]
 80145da:	1e43      	subs	r3, r0, #1
 80145dc:	9301      	str	r3, [sp, #4]
 80145de:	e7df      	b.n	80145a0 <_dtoa_r+0xa0>
 80145e0:	ec4b ab10 	vmov	d0, sl, fp
 80145e4:	aa10      	add	r2, sp, #64	; 0x40
 80145e6:	a911      	add	r1, sp, #68	; 0x44
 80145e8:	4620      	mov	r0, r4
 80145ea:	f001 f983 	bl	80158f4 <__d2b>
 80145ee:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80145f2:	ee08 0a10 	vmov	s16, r0
 80145f6:	2d00      	cmp	r5, #0
 80145f8:	f000 8084 	beq.w	8014704 <_dtoa_r+0x204>
 80145fc:	ee19 3a90 	vmov	r3, s19
 8014600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014604:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8014608:	4656      	mov	r6, sl
 801460a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801460e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014612:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8014616:	4b74      	ldr	r3, [pc, #464]	; (80147e8 <_dtoa_r+0x2e8>)
 8014618:	2200      	movs	r2, #0
 801461a:	4630      	mov	r0, r6
 801461c:	4639      	mov	r1, r7
 801461e:	f7eb fe33 	bl	8000288 <__aeabi_dsub>
 8014622:	a365      	add	r3, pc, #404	; (adr r3, 80147b8 <_dtoa_r+0x2b8>)
 8014624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014628:	f7eb ffe6 	bl	80005f8 <__aeabi_dmul>
 801462c:	a364      	add	r3, pc, #400	; (adr r3, 80147c0 <_dtoa_r+0x2c0>)
 801462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014632:	f7eb fe2b 	bl	800028c <__adddf3>
 8014636:	4606      	mov	r6, r0
 8014638:	4628      	mov	r0, r5
 801463a:	460f      	mov	r7, r1
 801463c:	f7eb ff72 	bl	8000524 <__aeabi_i2d>
 8014640:	a361      	add	r3, pc, #388	; (adr r3, 80147c8 <_dtoa_r+0x2c8>)
 8014642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014646:	f7eb ffd7 	bl	80005f8 <__aeabi_dmul>
 801464a:	4602      	mov	r2, r0
 801464c:	460b      	mov	r3, r1
 801464e:	4630      	mov	r0, r6
 8014650:	4639      	mov	r1, r7
 8014652:	f7eb fe1b 	bl	800028c <__adddf3>
 8014656:	4606      	mov	r6, r0
 8014658:	460f      	mov	r7, r1
 801465a:	f7ec fa7d 	bl	8000b58 <__aeabi_d2iz>
 801465e:	2200      	movs	r2, #0
 8014660:	9000      	str	r0, [sp, #0]
 8014662:	2300      	movs	r3, #0
 8014664:	4630      	mov	r0, r6
 8014666:	4639      	mov	r1, r7
 8014668:	f7ec fa38 	bl	8000adc <__aeabi_dcmplt>
 801466c:	b150      	cbz	r0, 8014684 <_dtoa_r+0x184>
 801466e:	9800      	ldr	r0, [sp, #0]
 8014670:	f7eb ff58 	bl	8000524 <__aeabi_i2d>
 8014674:	4632      	mov	r2, r6
 8014676:	463b      	mov	r3, r7
 8014678:	f7ec fa26 	bl	8000ac8 <__aeabi_dcmpeq>
 801467c:	b910      	cbnz	r0, 8014684 <_dtoa_r+0x184>
 801467e:	9b00      	ldr	r3, [sp, #0]
 8014680:	3b01      	subs	r3, #1
 8014682:	9300      	str	r3, [sp, #0]
 8014684:	9b00      	ldr	r3, [sp, #0]
 8014686:	2b16      	cmp	r3, #22
 8014688:	d85a      	bhi.n	8014740 <_dtoa_r+0x240>
 801468a:	9a00      	ldr	r2, [sp, #0]
 801468c:	4b57      	ldr	r3, [pc, #348]	; (80147ec <_dtoa_r+0x2ec>)
 801468e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014696:	ec51 0b19 	vmov	r0, r1, d9
 801469a:	f7ec fa1f 	bl	8000adc <__aeabi_dcmplt>
 801469e:	2800      	cmp	r0, #0
 80146a0:	d050      	beq.n	8014744 <_dtoa_r+0x244>
 80146a2:	9b00      	ldr	r3, [sp, #0]
 80146a4:	3b01      	subs	r3, #1
 80146a6:	9300      	str	r3, [sp, #0]
 80146a8:	2300      	movs	r3, #0
 80146aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80146ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80146ae:	1b5d      	subs	r5, r3, r5
 80146b0:	1e6b      	subs	r3, r5, #1
 80146b2:	9305      	str	r3, [sp, #20]
 80146b4:	bf45      	ittet	mi
 80146b6:	f1c5 0301 	rsbmi	r3, r5, #1
 80146ba:	9304      	strmi	r3, [sp, #16]
 80146bc:	2300      	movpl	r3, #0
 80146be:	2300      	movmi	r3, #0
 80146c0:	bf4c      	ite	mi
 80146c2:	9305      	strmi	r3, [sp, #20]
 80146c4:	9304      	strpl	r3, [sp, #16]
 80146c6:	9b00      	ldr	r3, [sp, #0]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	db3d      	blt.n	8014748 <_dtoa_r+0x248>
 80146cc:	9b05      	ldr	r3, [sp, #20]
 80146ce:	9a00      	ldr	r2, [sp, #0]
 80146d0:	920a      	str	r2, [sp, #40]	; 0x28
 80146d2:	4413      	add	r3, r2
 80146d4:	9305      	str	r3, [sp, #20]
 80146d6:	2300      	movs	r3, #0
 80146d8:	9307      	str	r3, [sp, #28]
 80146da:	9b06      	ldr	r3, [sp, #24]
 80146dc:	2b09      	cmp	r3, #9
 80146de:	f200 8089 	bhi.w	80147f4 <_dtoa_r+0x2f4>
 80146e2:	2b05      	cmp	r3, #5
 80146e4:	bfc4      	itt	gt
 80146e6:	3b04      	subgt	r3, #4
 80146e8:	9306      	strgt	r3, [sp, #24]
 80146ea:	9b06      	ldr	r3, [sp, #24]
 80146ec:	f1a3 0302 	sub.w	r3, r3, #2
 80146f0:	bfcc      	ite	gt
 80146f2:	2500      	movgt	r5, #0
 80146f4:	2501      	movle	r5, #1
 80146f6:	2b03      	cmp	r3, #3
 80146f8:	f200 8087 	bhi.w	801480a <_dtoa_r+0x30a>
 80146fc:	e8df f003 	tbb	[pc, r3]
 8014700:	59383a2d 	.word	0x59383a2d
 8014704:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8014708:	441d      	add	r5, r3
 801470a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801470e:	2b20      	cmp	r3, #32
 8014710:	bfc1      	itttt	gt
 8014712:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8014716:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801471a:	fa0b f303 	lslgt.w	r3, fp, r3
 801471e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8014722:	bfda      	itte	le
 8014724:	f1c3 0320 	rsble	r3, r3, #32
 8014728:	fa06 f003 	lslle.w	r0, r6, r3
 801472c:	4318      	orrgt	r0, r3
 801472e:	f7eb fee9 	bl	8000504 <__aeabi_ui2d>
 8014732:	2301      	movs	r3, #1
 8014734:	4606      	mov	r6, r0
 8014736:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801473a:	3d01      	subs	r5, #1
 801473c:	930e      	str	r3, [sp, #56]	; 0x38
 801473e:	e76a      	b.n	8014616 <_dtoa_r+0x116>
 8014740:	2301      	movs	r3, #1
 8014742:	e7b2      	b.n	80146aa <_dtoa_r+0x1aa>
 8014744:	900b      	str	r0, [sp, #44]	; 0x2c
 8014746:	e7b1      	b.n	80146ac <_dtoa_r+0x1ac>
 8014748:	9b04      	ldr	r3, [sp, #16]
 801474a:	9a00      	ldr	r2, [sp, #0]
 801474c:	1a9b      	subs	r3, r3, r2
 801474e:	9304      	str	r3, [sp, #16]
 8014750:	4253      	negs	r3, r2
 8014752:	9307      	str	r3, [sp, #28]
 8014754:	2300      	movs	r3, #0
 8014756:	930a      	str	r3, [sp, #40]	; 0x28
 8014758:	e7bf      	b.n	80146da <_dtoa_r+0x1da>
 801475a:	2300      	movs	r3, #0
 801475c:	9308      	str	r3, [sp, #32]
 801475e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014760:	2b00      	cmp	r3, #0
 8014762:	dc55      	bgt.n	8014810 <_dtoa_r+0x310>
 8014764:	2301      	movs	r3, #1
 8014766:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801476a:	461a      	mov	r2, r3
 801476c:	9209      	str	r2, [sp, #36]	; 0x24
 801476e:	e00c      	b.n	801478a <_dtoa_r+0x28a>
 8014770:	2301      	movs	r3, #1
 8014772:	e7f3      	b.n	801475c <_dtoa_r+0x25c>
 8014774:	2300      	movs	r3, #0
 8014776:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014778:	9308      	str	r3, [sp, #32]
 801477a:	9b00      	ldr	r3, [sp, #0]
 801477c:	4413      	add	r3, r2
 801477e:	9302      	str	r3, [sp, #8]
 8014780:	3301      	adds	r3, #1
 8014782:	2b01      	cmp	r3, #1
 8014784:	9303      	str	r3, [sp, #12]
 8014786:	bfb8      	it	lt
 8014788:	2301      	movlt	r3, #1
 801478a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801478c:	2200      	movs	r2, #0
 801478e:	6042      	str	r2, [r0, #4]
 8014790:	2204      	movs	r2, #4
 8014792:	f102 0614 	add.w	r6, r2, #20
 8014796:	429e      	cmp	r6, r3
 8014798:	6841      	ldr	r1, [r0, #4]
 801479a:	d93d      	bls.n	8014818 <_dtoa_r+0x318>
 801479c:	4620      	mov	r0, r4
 801479e:	f000 fd81 	bl	80152a4 <_Balloc>
 80147a2:	9001      	str	r0, [sp, #4]
 80147a4:	2800      	cmp	r0, #0
 80147a6:	d13b      	bne.n	8014820 <_dtoa_r+0x320>
 80147a8:	4b11      	ldr	r3, [pc, #68]	; (80147f0 <_dtoa_r+0x2f0>)
 80147aa:	4602      	mov	r2, r0
 80147ac:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80147b0:	e6c0      	b.n	8014534 <_dtoa_r+0x34>
 80147b2:	2301      	movs	r3, #1
 80147b4:	e7df      	b.n	8014776 <_dtoa_r+0x276>
 80147b6:	bf00      	nop
 80147b8:	636f4361 	.word	0x636f4361
 80147bc:	3fd287a7 	.word	0x3fd287a7
 80147c0:	8b60c8b3 	.word	0x8b60c8b3
 80147c4:	3fc68a28 	.word	0x3fc68a28
 80147c8:	509f79fb 	.word	0x509f79fb
 80147cc:	3fd34413 	.word	0x3fd34413
 80147d0:	08016595 	.word	0x08016595
 80147d4:	080165ac 	.word	0x080165ac
 80147d8:	7ff00000 	.word	0x7ff00000
 80147dc:	08016591 	.word	0x08016591
 80147e0:	08016588 	.word	0x08016588
 80147e4:	08016565 	.word	0x08016565
 80147e8:	3ff80000 	.word	0x3ff80000
 80147ec:	080166a0 	.word	0x080166a0
 80147f0:	08016607 	.word	0x08016607
 80147f4:	2501      	movs	r5, #1
 80147f6:	2300      	movs	r3, #0
 80147f8:	9306      	str	r3, [sp, #24]
 80147fa:	9508      	str	r5, [sp, #32]
 80147fc:	f04f 33ff 	mov.w	r3, #4294967295
 8014800:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014804:	2200      	movs	r2, #0
 8014806:	2312      	movs	r3, #18
 8014808:	e7b0      	b.n	801476c <_dtoa_r+0x26c>
 801480a:	2301      	movs	r3, #1
 801480c:	9308      	str	r3, [sp, #32]
 801480e:	e7f5      	b.n	80147fc <_dtoa_r+0x2fc>
 8014810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014812:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8014816:	e7b8      	b.n	801478a <_dtoa_r+0x28a>
 8014818:	3101      	adds	r1, #1
 801481a:	6041      	str	r1, [r0, #4]
 801481c:	0052      	lsls	r2, r2, #1
 801481e:	e7b8      	b.n	8014792 <_dtoa_r+0x292>
 8014820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014822:	9a01      	ldr	r2, [sp, #4]
 8014824:	601a      	str	r2, [r3, #0]
 8014826:	9b03      	ldr	r3, [sp, #12]
 8014828:	2b0e      	cmp	r3, #14
 801482a:	f200 809d 	bhi.w	8014968 <_dtoa_r+0x468>
 801482e:	2d00      	cmp	r5, #0
 8014830:	f000 809a 	beq.w	8014968 <_dtoa_r+0x468>
 8014834:	9b00      	ldr	r3, [sp, #0]
 8014836:	2b00      	cmp	r3, #0
 8014838:	dd32      	ble.n	80148a0 <_dtoa_r+0x3a0>
 801483a:	4ab7      	ldr	r2, [pc, #732]	; (8014b18 <_dtoa_r+0x618>)
 801483c:	f003 030f 	and.w	r3, r3, #15
 8014840:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014844:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014848:	9b00      	ldr	r3, [sp, #0]
 801484a:	05d8      	lsls	r0, r3, #23
 801484c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8014850:	d516      	bpl.n	8014880 <_dtoa_r+0x380>
 8014852:	4bb2      	ldr	r3, [pc, #712]	; (8014b1c <_dtoa_r+0x61c>)
 8014854:	ec51 0b19 	vmov	r0, r1, d9
 8014858:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801485c:	f7eb fff6 	bl	800084c <__aeabi_ddiv>
 8014860:	f007 070f 	and.w	r7, r7, #15
 8014864:	4682      	mov	sl, r0
 8014866:	468b      	mov	fp, r1
 8014868:	2503      	movs	r5, #3
 801486a:	4eac      	ldr	r6, [pc, #688]	; (8014b1c <_dtoa_r+0x61c>)
 801486c:	b957      	cbnz	r7, 8014884 <_dtoa_r+0x384>
 801486e:	4642      	mov	r2, r8
 8014870:	464b      	mov	r3, r9
 8014872:	4650      	mov	r0, sl
 8014874:	4659      	mov	r1, fp
 8014876:	f7eb ffe9 	bl	800084c <__aeabi_ddiv>
 801487a:	4682      	mov	sl, r0
 801487c:	468b      	mov	fp, r1
 801487e:	e028      	b.n	80148d2 <_dtoa_r+0x3d2>
 8014880:	2502      	movs	r5, #2
 8014882:	e7f2      	b.n	801486a <_dtoa_r+0x36a>
 8014884:	07f9      	lsls	r1, r7, #31
 8014886:	d508      	bpl.n	801489a <_dtoa_r+0x39a>
 8014888:	4640      	mov	r0, r8
 801488a:	4649      	mov	r1, r9
 801488c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8014890:	f7eb feb2 	bl	80005f8 <__aeabi_dmul>
 8014894:	3501      	adds	r5, #1
 8014896:	4680      	mov	r8, r0
 8014898:	4689      	mov	r9, r1
 801489a:	107f      	asrs	r7, r7, #1
 801489c:	3608      	adds	r6, #8
 801489e:	e7e5      	b.n	801486c <_dtoa_r+0x36c>
 80148a0:	f000 809b 	beq.w	80149da <_dtoa_r+0x4da>
 80148a4:	9b00      	ldr	r3, [sp, #0]
 80148a6:	4f9d      	ldr	r7, [pc, #628]	; (8014b1c <_dtoa_r+0x61c>)
 80148a8:	425e      	negs	r6, r3
 80148aa:	4b9b      	ldr	r3, [pc, #620]	; (8014b18 <_dtoa_r+0x618>)
 80148ac:	f006 020f 	and.w	r2, r6, #15
 80148b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80148b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80148b8:	ec51 0b19 	vmov	r0, r1, d9
 80148bc:	f7eb fe9c 	bl	80005f8 <__aeabi_dmul>
 80148c0:	1136      	asrs	r6, r6, #4
 80148c2:	4682      	mov	sl, r0
 80148c4:	468b      	mov	fp, r1
 80148c6:	2300      	movs	r3, #0
 80148c8:	2502      	movs	r5, #2
 80148ca:	2e00      	cmp	r6, #0
 80148cc:	d17a      	bne.n	80149c4 <_dtoa_r+0x4c4>
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d1d3      	bne.n	801487a <_dtoa_r+0x37a>
 80148d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	f000 8082 	beq.w	80149de <_dtoa_r+0x4de>
 80148da:	4b91      	ldr	r3, [pc, #580]	; (8014b20 <_dtoa_r+0x620>)
 80148dc:	2200      	movs	r2, #0
 80148de:	4650      	mov	r0, sl
 80148e0:	4659      	mov	r1, fp
 80148e2:	f7ec f8fb 	bl	8000adc <__aeabi_dcmplt>
 80148e6:	2800      	cmp	r0, #0
 80148e8:	d079      	beq.n	80149de <_dtoa_r+0x4de>
 80148ea:	9b03      	ldr	r3, [sp, #12]
 80148ec:	2b00      	cmp	r3, #0
 80148ee:	d076      	beq.n	80149de <_dtoa_r+0x4de>
 80148f0:	9b02      	ldr	r3, [sp, #8]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	dd36      	ble.n	8014964 <_dtoa_r+0x464>
 80148f6:	9b00      	ldr	r3, [sp, #0]
 80148f8:	4650      	mov	r0, sl
 80148fa:	4659      	mov	r1, fp
 80148fc:	1e5f      	subs	r7, r3, #1
 80148fe:	2200      	movs	r2, #0
 8014900:	4b88      	ldr	r3, [pc, #544]	; (8014b24 <_dtoa_r+0x624>)
 8014902:	f7eb fe79 	bl	80005f8 <__aeabi_dmul>
 8014906:	9e02      	ldr	r6, [sp, #8]
 8014908:	4682      	mov	sl, r0
 801490a:	468b      	mov	fp, r1
 801490c:	3501      	adds	r5, #1
 801490e:	4628      	mov	r0, r5
 8014910:	f7eb fe08 	bl	8000524 <__aeabi_i2d>
 8014914:	4652      	mov	r2, sl
 8014916:	465b      	mov	r3, fp
 8014918:	f7eb fe6e 	bl	80005f8 <__aeabi_dmul>
 801491c:	4b82      	ldr	r3, [pc, #520]	; (8014b28 <_dtoa_r+0x628>)
 801491e:	2200      	movs	r2, #0
 8014920:	f7eb fcb4 	bl	800028c <__adddf3>
 8014924:	46d0      	mov	r8, sl
 8014926:	46d9      	mov	r9, fp
 8014928:	4682      	mov	sl, r0
 801492a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801492e:	2e00      	cmp	r6, #0
 8014930:	d158      	bne.n	80149e4 <_dtoa_r+0x4e4>
 8014932:	4b7e      	ldr	r3, [pc, #504]	; (8014b2c <_dtoa_r+0x62c>)
 8014934:	2200      	movs	r2, #0
 8014936:	4640      	mov	r0, r8
 8014938:	4649      	mov	r1, r9
 801493a:	f7eb fca5 	bl	8000288 <__aeabi_dsub>
 801493e:	4652      	mov	r2, sl
 8014940:	465b      	mov	r3, fp
 8014942:	4680      	mov	r8, r0
 8014944:	4689      	mov	r9, r1
 8014946:	f7ec f8e7 	bl	8000b18 <__aeabi_dcmpgt>
 801494a:	2800      	cmp	r0, #0
 801494c:	f040 8295 	bne.w	8014e7a <_dtoa_r+0x97a>
 8014950:	4652      	mov	r2, sl
 8014952:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014956:	4640      	mov	r0, r8
 8014958:	4649      	mov	r1, r9
 801495a:	f7ec f8bf 	bl	8000adc <__aeabi_dcmplt>
 801495e:	2800      	cmp	r0, #0
 8014960:	f040 8289 	bne.w	8014e76 <_dtoa_r+0x976>
 8014964:	ec5b ab19 	vmov	sl, fp, d9
 8014968:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801496a:	2b00      	cmp	r3, #0
 801496c:	f2c0 8148 	blt.w	8014c00 <_dtoa_r+0x700>
 8014970:	9a00      	ldr	r2, [sp, #0]
 8014972:	2a0e      	cmp	r2, #14
 8014974:	f300 8144 	bgt.w	8014c00 <_dtoa_r+0x700>
 8014978:	4b67      	ldr	r3, [pc, #412]	; (8014b18 <_dtoa_r+0x618>)
 801497a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801497e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014984:	2b00      	cmp	r3, #0
 8014986:	f280 80d5 	bge.w	8014b34 <_dtoa_r+0x634>
 801498a:	9b03      	ldr	r3, [sp, #12]
 801498c:	2b00      	cmp	r3, #0
 801498e:	f300 80d1 	bgt.w	8014b34 <_dtoa_r+0x634>
 8014992:	f040 826f 	bne.w	8014e74 <_dtoa_r+0x974>
 8014996:	4b65      	ldr	r3, [pc, #404]	; (8014b2c <_dtoa_r+0x62c>)
 8014998:	2200      	movs	r2, #0
 801499a:	4640      	mov	r0, r8
 801499c:	4649      	mov	r1, r9
 801499e:	f7eb fe2b 	bl	80005f8 <__aeabi_dmul>
 80149a2:	4652      	mov	r2, sl
 80149a4:	465b      	mov	r3, fp
 80149a6:	f7ec f8ad 	bl	8000b04 <__aeabi_dcmpge>
 80149aa:	9e03      	ldr	r6, [sp, #12]
 80149ac:	4637      	mov	r7, r6
 80149ae:	2800      	cmp	r0, #0
 80149b0:	f040 8245 	bne.w	8014e3e <_dtoa_r+0x93e>
 80149b4:	9d01      	ldr	r5, [sp, #4]
 80149b6:	2331      	movs	r3, #49	; 0x31
 80149b8:	f805 3b01 	strb.w	r3, [r5], #1
 80149bc:	9b00      	ldr	r3, [sp, #0]
 80149be:	3301      	adds	r3, #1
 80149c0:	9300      	str	r3, [sp, #0]
 80149c2:	e240      	b.n	8014e46 <_dtoa_r+0x946>
 80149c4:	07f2      	lsls	r2, r6, #31
 80149c6:	d505      	bpl.n	80149d4 <_dtoa_r+0x4d4>
 80149c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80149cc:	f7eb fe14 	bl	80005f8 <__aeabi_dmul>
 80149d0:	3501      	adds	r5, #1
 80149d2:	2301      	movs	r3, #1
 80149d4:	1076      	asrs	r6, r6, #1
 80149d6:	3708      	adds	r7, #8
 80149d8:	e777      	b.n	80148ca <_dtoa_r+0x3ca>
 80149da:	2502      	movs	r5, #2
 80149dc:	e779      	b.n	80148d2 <_dtoa_r+0x3d2>
 80149de:	9f00      	ldr	r7, [sp, #0]
 80149e0:	9e03      	ldr	r6, [sp, #12]
 80149e2:	e794      	b.n	801490e <_dtoa_r+0x40e>
 80149e4:	9901      	ldr	r1, [sp, #4]
 80149e6:	4b4c      	ldr	r3, [pc, #304]	; (8014b18 <_dtoa_r+0x618>)
 80149e8:	4431      	add	r1, r6
 80149ea:	910d      	str	r1, [sp, #52]	; 0x34
 80149ec:	9908      	ldr	r1, [sp, #32]
 80149ee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80149f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80149f6:	2900      	cmp	r1, #0
 80149f8:	d043      	beq.n	8014a82 <_dtoa_r+0x582>
 80149fa:	494d      	ldr	r1, [pc, #308]	; (8014b30 <_dtoa_r+0x630>)
 80149fc:	2000      	movs	r0, #0
 80149fe:	f7eb ff25 	bl	800084c <__aeabi_ddiv>
 8014a02:	4652      	mov	r2, sl
 8014a04:	465b      	mov	r3, fp
 8014a06:	f7eb fc3f 	bl	8000288 <__aeabi_dsub>
 8014a0a:	9d01      	ldr	r5, [sp, #4]
 8014a0c:	4682      	mov	sl, r0
 8014a0e:	468b      	mov	fp, r1
 8014a10:	4649      	mov	r1, r9
 8014a12:	4640      	mov	r0, r8
 8014a14:	f7ec f8a0 	bl	8000b58 <__aeabi_d2iz>
 8014a18:	4606      	mov	r6, r0
 8014a1a:	f7eb fd83 	bl	8000524 <__aeabi_i2d>
 8014a1e:	4602      	mov	r2, r0
 8014a20:	460b      	mov	r3, r1
 8014a22:	4640      	mov	r0, r8
 8014a24:	4649      	mov	r1, r9
 8014a26:	f7eb fc2f 	bl	8000288 <__aeabi_dsub>
 8014a2a:	3630      	adds	r6, #48	; 0x30
 8014a2c:	f805 6b01 	strb.w	r6, [r5], #1
 8014a30:	4652      	mov	r2, sl
 8014a32:	465b      	mov	r3, fp
 8014a34:	4680      	mov	r8, r0
 8014a36:	4689      	mov	r9, r1
 8014a38:	f7ec f850 	bl	8000adc <__aeabi_dcmplt>
 8014a3c:	2800      	cmp	r0, #0
 8014a3e:	d163      	bne.n	8014b08 <_dtoa_r+0x608>
 8014a40:	4642      	mov	r2, r8
 8014a42:	464b      	mov	r3, r9
 8014a44:	4936      	ldr	r1, [pc, #216]	; (8014b20 <_dtoa_r+0x620>)
 8014a46:	2000      	movs	r0, #0
 8014a48:	f7eb fc1e 	bl	8000288 <__aeabi_dsub>
 8014a4c:	4652      	mov	r2, sl
 8014a4e:	465b      	mov	r3, fp
 8014a50:	f7ec f844 	bl	8000adc <__aeabi_dcmplt>
 8014a54:	2800      	cmp	r0, #0
 8014a56:	f040 80b5 	bne.w	8014bc4 <_dtoa_r+0x6c4>
 8014a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a5c:	429d      	cmp	r5, r3
 8014a5e:	d081      	beq.n	8014964 <_dtoa_r+0x464>
 8014a60:	4b30      	ldr	r3, [pc, #192]	; (8014b24 <_dtoa_r+0x624>)
 8014a62:	2200      	movs	r2, #0
 8014a64:	4650      	mov	r0, sl
 8014a66:	4659      	mov	r1, fp
 8014a68:	f7eb fdc6 	bl	80005f8 <__aeabi_dmul>
 8014a6c:	4b2d      	ldr	r3, [pc, #180]	; (8014b24 <_dtoa_r+0x624>)
 8014a6e:	4682      	mov	sl, r0
 8014a70:	468b      	mov	fp, r1
 8014a72:	4640      	mov	r0, r8
 8014a74:	4649      	mov	r1, r9
 8014a76:	2200      	movs	r2, #0
 8014a78:	f7eb fdbe 	bl	80005f8 <__aeabi_dmul>
 8014a7c:	4680      	mov	r8, r0
 8014a7e:	4689      	mov	r9, r1
 8014a80:	e7c6      	b.n	8014a10 <_dtoa_r+0x510>
 8014a82:	4650      	mov	r0, sl
 8014a84:	4659      	mov	r1, fp
 8014a86:	f7eb fdb7 	bl	80005f8 <__aeabi_dmul>
 8014a8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014a8c:	9d01      	ldr	r5, [sp, #4]
 8014a8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8014a90:	4682      	mov	sl, r0
 8014a92:	468b      	mov	fp, r1
 8014a94:	4649      	mov	r1, r9
 8014a96:	4640      	mov	r0, r8
 8014a98:	f7ec f85e 	bl	8000b58 <__aeabi_d2iz>
 8014a9c:	4606      	mov	r6, r0
 8014a9e:	f7eb fd41 	bl	8000524 <__aeabi_i2d>
 8014aa2:	3630      	adds	r6, #48	; 0x30
 8014aa4:	4602      	mov	r2, r0
 8014aa6:	460b      	mov	r3, r1
 8014aa8:	4640      	mov	r0, r8
 8014aaa:	4649      	mov	r1, r9
 8014aac:	f7eb fbec 	bl	8000288 <__aeabi_dsub>
 8014ab0:	f805 6b01 	strb.w	r6, [r5], #1
 8014ab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ab6:	429d      	cmp	r5, r3
 8014ab8:	4680      	mov	r8, r0
 8014aba:	4689      	mov	r9, r1
 8014abc:	f04f 0200 	mov.w	r2, #0
 8014ac0:	d124      	bne.n	8014b0c <_dtoa_r+0x60c>
 8014ac2:	4b1b      	ldr	r3, [pc, #108]	; (8014b30 <_dtoa_r+0x630>)
 8014ac4:	4650      	mov	r0, sl
 8014ac6:	4659      	mov	r1, fp
 8014ac8:	f7eb fbe0 	bl	800028c <__adddf3>
 8014acc:	4602      	mov	r2, r0
 8014ace:	460b      	mov	r3, r1
 8014ad0:	4640      	mov	r0, r8
 8014ad2:	4649      	mov	r1, r9
 8014ad4:	f7ec f820 	bl	8000b18 <__aeabi_dcmpgt>
 8014ad8:	2800      	cmp	r0, #0
 8014ada:	d173      	bne.n	8014bc4 <_dtoa_r+0x6c4>
 8014adc:	4652      	mov	r2, sl
 8014ade:	465b      	mov	r3, fp
 8014ae0:	4913      	ldr	r1, [pc, #76]	; (8014b30 <_dtoa_r+0x630>)
 8014ae2:	2000      	movs	r0, #0
 8014ae4:	f7eb fbd0 	bl	8000288 <__aeabi_dsub>
 8014ae8:	4602      	mov	r2, r0
 8014aea:	460b      	mov	r3, r1
 8014aec:	4640      	mov	r0, r8
 8014aee:	4649      	mov	r1, r9
 8014af0:	f7eb fff4 	bl	8000adc <__aeabi_dcmplt>
 8014af4:	2800      	cmp	r0, #0
 8014af6:	f43f af35 	beq.w	8014964 <_dtoa_r+0x464>
 8014afa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8014afc:	1e6b      	subs	r3, r5, #1
 8014afe:	930f      	str	r3, [sp, #60]	; 0x3c
 8014b00:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014b04:	2b30      	cmp	r3, #48	; 0x30
 8014b06:	d0f8      	beq.n	8014afa <_dtoa_r+0x5fa>
 8014b08:	9700      	str	r7, [sp, #0]
 8014b0a:	e049      	b.n	8014ba0 <_dtoa_r+0x6a0>
 8014b0c:	4b05      	ldr	r3, [pc, #20]	; (8014b24 <_dtoa_r+0x624>)
 8014b0e:	f7eb fd73 	bl	80005f8 <__aeabi_dmul>
 8014b12:	4680      	mov	r8, r0
 8014b14:	4689      	mov	r9, r1
 8014b16:	e7bd      	b.n	8014a94 <_dtoa_r+0x594>
 8014b18:	080166a0 	.word	0x080166a0
 8014b1c:	08016678 	.word	0x08016678
 8014b20:	3ff00000 	.word	0x3ff00000
 8014b24:	40240000 	.word	0x40240000
 8014b28:	401c0000 	.word	0x401c0000
 8014b2c:	40140000 	.word	0x40140000
 8014b30:	3fe00000 	.word	0x3fe00000
 8014b34:	9d01      	ldr	r5, [sp, #4]
 8014b36:	4656      	mov	r6, sl
 8014b38:	465f      	mov	r7, fp
 8014b3a:	4642      	mov	r2, r8
 8014b3c:	464b      	mov	r3, r9
 8014b3e:	4630      	mov	r0, r6
 8014b40:	4639      	mov	r1, r7
 8014b42:	f7eb fe83 	bl	800084c <__aeabi_ddiv>
 8014b46:	f7ec f807 	bl	8000b58 <__aeabi_d2iz>
 8014b4a:	4682      	mov	sl, r0
 8014b4c:	f7eb fcea 	bl	8000524 <__aeabi_i2d>
 8014b50:	4642      	mov	r2, r8
 8014b52:	464b      	mov	r3, r9
 8014b54:	f7eb fd50 	bl	80005f8 <__aeabi_dmul>
 8014b58:	4602      	mov	r2, r0
 8014b5a:	460b      	mov	r3, r1
 8014b5c:	4630      	mov	r0, r6
 8014b5e:	4639      	mov	r1, r7
 8014b60:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8014b64:	f7eb fb90 	bl	8000288 <__aeabi_dsub>
 8014b68:	f805 6b01 	strb.w	r6, [r5], #1
 8014b6c:	9e01      	ldr	r6, [sp, #4]
 8014b6e:	9f03      	ldr	r7, [sp, #12]
 8014b70:	1bae      	subs	r6, r5, r6
 8014b72:	42b7      	cmp	r7, r6
 8014b74:	4602      	mov	r2, r0
 8014b76:	460b      	mov	r3, r1
 8014b78:	d135      	bne.n	8014be6 <_dtoa_r+0x6e6>
 8014b7a:	f7eb fb87 	bl	800028c <__adddf3>
 8014b7e:	4642      	mov	r2, r8
 8014b80:	464b      	mov	r3, r9
 8014b82:	4606      	mov	r6, r0
 8014b84:	460f      	mov	r7, r1
 8014b86:	f7eb ffc7 	bl	8000b18 <__aeabi_dcmpgt>
 8014b8a:	b9d0      	cbnz	r0, 8014bc2 <_dtoa_r+0x6c2>
 8014b8c:	4642      	mov	r2, r8
 8014b8e:	464b      	mov	r3, r9
 8014b90:	4630      	mov	r0, r6
 8014b92:	4639      	mov	r1, r7
 8014b94:	f7eb ff98 	bl	8000ac8 <__aeabi_dcmpeq>
 8014b98:	b110      	cbz	r0, 8014ba0 <_dtoa_r+0x6a0>
 8014b9a:	f01a 0f01 	tst.w	sl, #1
 8014b9e:	d110      	bne.n	8014bc2 <_dtoa_r+0x6c2>
 8014ba0:	4620      	mov	r0, r4
 8014ba2:	ee18 1a10 	vmov	r1, s16
 8014ba6:	f000 fbbd 	bl	8015324 <_Bfree>
 8014baa:	2300      	movs	r3, #0
 8014bac:	9800      	ldr	r0, [sp, #0]
 8014bae:	702b      	strb	r3, [r5, #0]
 8014bb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8014bb2:	3001      	adds	r0, #1
 8014bb4:	6018      	str	r0, [r3, #0]
 8014bb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	f43f acf1 	beq.w	80145a0 <_dtoa_r+0xa0>
 8014bbe:	601d      	str	r5, [r3, #0]
 8014bc0:	e4ee      	b.n	80145a0 <_dtoa_r+0xa0>
 8014bc2:	9f00      	ldr	r7, [sp, #0]
 8014bc4:	462b      	mov	r3, r5
 8014bc6:	461d      	mov	r5, r3
 8014bc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014bcc:	2a39      	cmp	r2, #57	; 0x39
 8014bce:	d106      	bne.n	8014bde <_dtoa_r+0x6de>
 8014bd0:	9a01      	ldr	r2, [sp, #4]
 8014bd2:	429a      	cmp	r2, r3
 8014bd4:	d1f7      	bne.n	8014bc6 <_dtoa_r+0x6c6>
 8014bd6:	9901      	ldr	r1, [sp, #4]
 8014bd8:	2230      	movs	r2, #48	; 0x30
 8014bda:	3701      	adds	r7, #1
 8014bdc:	700a      	strb	r2, [r1, #0]
 8014bde:	781a      	ldrb	r2, [r3, #0]
 8014be0:	3201      	adds	r2, #1
 8014be2:	701a      	strb	r2, [r3, #0]
 8014be4:	e790      	b.n	8014b08 <_dtoa_r+0x608>
 8014be6:	4ba6      	ldr	r3, [pc, #664]	; (8014e80 <_dtoa_r+0x980>)
 8014be8:	2200      	movs	r2, #0
 8014bea:	f7eb fd05 	bl	80005f8 <__aeabi_dmul>
 8014bee:	2200      	movs	r2, #0
 8014bf0:	2300      	movs	r3, #0
 8014bf2:	4606      	mov	r6, r0
 8014bf4:	460f      	mov	r7, r1
 8014bf6:	f7eb ff67 	bl	8000ac8 <__aeabi_dcmpeq>
 8014bfa:	2800      	cmp	r0, #0
 8014bfc:	d09d      	beq.n	8014b3a <_dtoa_r+0x63a>
 8014bfe:	e7cf      	b.n	8014ba0 <_dtoa_r+0x6a0>
 8014c00:	9a08      	ldr	r2, [sp, #32]
 8014c02:	2a00      	cmp	r2, #0
 8014c04:	f000 80d7 	beq.w	8014db6 <_dtoa_r+0x8b6>
 8014c08:	9a06      	ldr	r2, [sp, #24]
 8014c0a:	2a01      	cmp	r2, #1
 8014c0c:	f300 80ba 	bgt.w	8014d84 <_dtoa_r+0x884>
 8014c10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014c12:	2a00      	cmp	r2, #0
 8014c14:	f000 80b2 	beq.w	8014d7c <_dtoa_r+0x87c>
 8014c18:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8014c1c:	9e07      	ldr	r6, [sp, #28]
 8014c1e:	9d04      	ldr	r5, [sp, #16]
 8014c20:	9a04      	ldr	r2, [sp, #16]
 8014c22:	441a      	add	r2, r3
 8014c24:	9204      	str	r2, [sp, #16]
 8014c26:	9a05      	ldr	r2, [sp, #20]
 8014c28:	2101      	movs	r1, #1
 8014c2a:	441a      	add	r2, r3
 8014c2c:	4620      	mov	r0, r4
 8014c2e:	9205      	str	r2, [sp, #20]
 8014c30:	f000 fc30 	bl	8015494 <__i2b>
 8014c34:	4607      	mov	r7, r0
 8014c36:	2d00      	cmp	r5, #0
 8014c38:	dd0c      	ble.n	8014c54 <_dtoa_r+0x754>
 8014c3a:	9b05      	ldr	r3, [sp, #20]
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	dd09      	ble.n	8014c54 <_dtoa_r+0x754>
 8014c40:	42ab      	cmp	r3, r5
 8014c42:	9a04      	ldr	r2, [sp, #16]
 8014c44:	bfa8      	it	ge
 8014c46:	462b      	movge	r3, r5
 8014c48:	1ad2      	subs	r2, r2, r3
 8014c4a:	9204      	str	r2, [sp, #16]
 8014c4c:	9a05      	ldr	r2, [sp, #20]
 8014c4e:	1aed      	subs	r5, r5, r3
 8014c50:	1ad3      	subs	r3, r2, r3
 8014c52:	9305      	str	r3, [sp, #20]
 8014c54:	9b07      	ldr	r3, [sp, #28]
 8014c56:	b31b      	cbz	r3, 8014ca0 <_dtoa_r+0x7a0>
 8014c58:	9b08      	ldr	r3, [sp, #32]
 8014c5a:	2b00      	cmp	r3, #0
 8014c5c:	f000 80af 	beq.w	8014dbe <_dtoa_r+0x8be>
 8014c60:	2e00      	cmp	r6, #0
 8014c62:	dd13      	ble.n	8014c8c <_dtoa_r+0x78c>
 8014c64:	4639      	mov	r1, r7
 8014c66:	4632      	mov	r2, r6
 8014c68:	4620      	mov	r0, r4
 8014c6a:	f000 fcd3 	bl	8015614 <__pow5mult>
 8014c6e:	ee18 2a10 	vmov	r2, s16
 8014c72:	4601      	mov	r1, r0
 8014c74:	4607      	mov	r7, r0
 8014c76:	4620      	mov	r0, r4
 8014c78:	f000 fc22 	bl	80154c0 <__multiply>
 8014c7c:	ee18 1a10 	vmov	r1, s16
 8014c80:	4680      	mov	r8, r0
 8014c82:	4620      	mov	r0, r4
 8014c84:	f000 fb4e 	bl	8015324 <_Bfree>
 8014c88:	ee08 8a10 	vmov	s16, r8
 8014c8c:	9b07      	ldr	r3, [sp, #28]
 8014c8e:	1b9a      	subs	r2, r3, r6
 8014c90:	d006      	beq.n	8014ca0 <_dtoa_r+0x7a0>
 8014c92:	ee18 1a10 	vmov	r1, s16
 8014c96:	4620      	mov	r0, r4
 8014c98:	f000 fcbc 	bl	8015614 <__pow5mult>
 8014c9c:	ee08 0a10 	vmov	s16, r0
 8014ca0:	2101      	movs	r1, #1
 8014ca2:	4620      	mov	r0, r4
 8014ca4:	f000 fbf6 	bl	8015494 <__i2b>
 8014ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	4606      	mov	r6, r0
 8014cae:	f340 8088 	ble.w	8014dc2 <_dtoa_r+0x8c2>
 8014cb2:	461a      	mov	r2, r3
 8014cb4:	4601      	mov	r1, r0
 8014cb6:	4620      	mov	r0, r4
 8014cb8:	f000 fcac 	bl	8015614 <__pow5mult>
 8014cbc:	9b06      	ldr	r3, [sp, #24]
 8014cbe:	2b01      	cmp	r3, #1
 8014cc0:	4606      	mov	r6, r0
 8014cc2:	f340 8081 	ble.w	8014dc8 <_dtoa_r+0x8c8>
 8014cc6:	f04f 0800 	mov.w	r8, #0
 8014cca:	6933      	ldr	r3, [r6, #16]
 8014ccc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014cd0:	6918      	ldr	r0, [r3, #16]
 8014cd2:	f000 fb8f 	bl	80153f4 <__hi0bits>
 8014cd6:	f1c0 0020 	rsb	r0, r0, #32
 8014cda:	9b05      	ldr	r3, [sp, #20]
 8014cdc:	4418      	add	r0, r3
 8014cde:	f010 001f 	ands.w	r0, r0, #31
 8014ce2:	f000 8092 	beq.w	8014e0a <_dtoa_r+0x90a>
 8014ce6:	f1c0 0320 	rsb	r3, r0, #32
 8014cea:	2b04      	cmp	r3, #4
 8014cec:	f340 808a 	ble.w	8014e04 <_dtoa_r+0x904>
 8014cf0:	f1c0 001c 	rsb	r0, r0, #28
 8014cf4:	9b04      	ldr	r3, [sp, #16]
 8014cf6:	4403      	add	r3, r0
 8014cf8:	9304      	str	r3, [sp, #16]
 8014cfa:	9b05      	ldr	r3, [sp, #20]
 8014cfc:	4403      	add	r3, r0
 8014cfe:	4405      	add	r5, r0
 8014d00:	9305      	str	r3, [sp, #20]
 8014d02:	9b04      	ldr	r3, [sp, #16]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	dd07      	ble.n	8014d18 <_dtoa_r+0x818>
 8014d08:	ee18 1a10 	vmov	r1, s16
 8014d0c:	461a      	mov	r2, r3
 8014d0e:	4620      	mov	r0, r4
 8014d10:	f000 fcda 	bl	80156c8 <__lshift>
 8014d14:	ee08 0a10 	vmov	s16, r0
 8014d18:	9b05      	ldr	r3, [sp, #20]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	dd05      	ble.n	8014d2a <_dtoa_r+0x82a>
 8014d1e:	4631      	mov	r1, r6
 8014d20:	461a      	mov	r2, r3
 8014d22:	4620      	mov	r0, r4
 8014d24:	f000 fcd0 	bl	80156c8 <__lshift>
 8014d28:	4606      	mov	r6, r0
 8014d2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d06e      	beq.n	8014e0e <_dtoa_r+0x90e>
 8014d30:	ee18 0a10 	vmov	r0, s16
 8014d34:	4631      	mov	r1, r6
 8014d36:	f000 fd37 	bl	80157a8 <__mcmp>
 8014d3a:	2800      	cmp	r0, #0
 8014d3c:	da67      	bge.n	8014e0e <_dtoa_r+0x90e>
 8014d3e:	9b00      	ldr	r3, [sp, #0]
 8014d40:	3b01      	subs	r3, #1
 8014d42:	ee18 1a10 	vmov	r1, s16
 8014d46:	9300      	str	r3, [sp, #0]
 8014d48:	220a      	movs	r2, #10
 8014d4a:	2300      	movs	r3, #0
 8014d4c:	4620      	mov	r0, r4
 8014d4e:	f000 fb0b 	bl	8015368 <__multadd>
 8014d52:	9b08      	ldr	r3, [sp, #32]
 8014d54:	ee08 0a10 	vmov	s16, r0
 8014d58:	2b00      	cmp	r3, #0
 8014d5a:	f000 81b1 	beq.w	80150c0 <_dtoa_r+0xbc0>
 8014d5e:	2300      	movs	r3, #0
 8014d60:	4639      	mov	r1, r7
 8014d62:	220a      	movs	r2, #10
 8014d64:	4620      	mov	r0, r4
 8014d66:	f000 faff 	bl	8015368 <__multadd>
 8014d6a:	9b02      	ldr	r3, [sp, #8]
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	4607      	mov	r7, r0
 8014d70:	f300 808e 	bgt.w	8014e90 <_dtoa_r+0x990>
 8014d74:	9b06      	ldr	r3, [sp, #24]
 8014d76:	2b02      	cmp	r3, #2
 8014d78:	dc51      	bgt.n	8014e1e <_dtoa_r+0x91e>
 8014d7a:	e089      	b.n	8014e90 <_dtoa_r+0x990>
 8014d7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014d7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8014d82:	e74b      	b.n	8014c1c <_dtoa_r+0x71c>
 8014d84:	9b03      	ldr	r3, [sp, #12]
 8014d86:	1e5e      	subs	r6, r3, #1
 8014d88:	9b07      	ldr	r3, [sp, #28]
 8014d8a:	42b3      	cmp	r3, r6
 8014d8c:	bfbf      	itttt	lt
 8014d8e:	9b07      	ldrlt	r3, [sp, #28]
 8014d90:	9607      	strlt	r6, [sp, #28]
 8014d92:	1af2      	sublt	r2, r6, r3
 8014d94:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8014d96:	bfb6      	itet	lt
 8014d98:	189b      	addlt	r3, r3, r2
 8014d9a:	1b9e      	subge	r6, r3, r6
 8014d9c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8014d9e:	9b03      	ldr	r3, [sp, #12]
 8014da0:	bfb8      	it	lt
 8014da2:	2600      	movlt	r6, #0
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	bfb7      	itett	lt
 8014da8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8014dac:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8014db0:	1a9d      	sublt	r5, r3, r2
 8014db2:	2300      	movlt	r3, #0
 8014db4:	e734      	b.n	8014c20 <_dtoa_r+0x720>
 8014db6:	9e07      	ldr	r6, [sp, #28]
 8014db8:	9d04      	ldr	r5, [sp, #16]
 8014dba:	9f08      	ldr	r7, [sp, #32]
 8014dbc:	e73b      	b.n	8014c36 <_dtoa_r+0x736>
 8014dbe:	9a07      	ldr	r2, [sp, #28]
 8014dc0:	e767      	b.n	8014c92 <_dtoa_r+0x792>
 8014dc2:	9b06      	ldr	r3, [sp, #24]
 8014dc4:	2b01      	cmp	r3, #1
 8014dc6:	dc18      	bgt.n	8014dfa <_dtoa_r+0x8fa>
 8014dc8:	f1ba 0f00 	cmp.w	sl, #0
 8014dcc:	d115      	bne.n	8014dfa <_dtoa_r+0x8fa>
 8014dce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8014dd2:	b993      	cbnz	r3, 8014dfa <_dtoa_r+0x8fa>
 8014dd4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014dd8:	0d1b      	lsrs	r3, r3, #20
 8014dda:	051b      	lsls	r3, r3, #20
 8014ddc:	b183      	cbz	r3, 8014e00 <_dtoa_r+0x900>
 8014dde:	9b04      	ldr	r3, [sp, #16]
 8014de0:	3301      	adds	r3, #1
 8014de2:	9304      	str	r3, [sp, #16]
 8014de4:	9b05      	ldr	r3, [sp, #20]
 8014de6:	3301      	adds	r3, #1
 8014de8:	9305      	str	r3, [sp, #20]
 8014dea:	f04f 0801 	mov.w	r8, #1
 8014dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	f47f af6a 	bne.w	8014cca <_dtoa_r+0x7ca>
 8014df6:	2001      	movs	r0, #1
 8014df8:	e76f      	b.n	8014cda <_dtoa_r+0x7da>
 8014dfa:	f04f 0800 	mov.w	r8, #0
 8014dfe:	e7f6      	b.n	8014dee <_dtoa_r+0x8ee>
 8014e00:	4698      	mov	r8, r3
 8014e02:	e7f4      	b.n	8014dee <_dtoa_r+0x8ee>
 8014e04:	f43f af7d 	beq.w	8014d02 <_dtoa_r+0x802>
 8014e08:	4618      	mov	r0, r3
 8014e0a:	301c      	adds	r0, #28
 8014e0c:	e772      	b.n	8014cf4 <_dtoa_r+0x7f4>
 8014e0e:	9b03      	ldr	r3, [sp, #12]
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	dc37      	bgt.n	8014e84 <_dtoa_r+0x984>
 8014e14:	9b06      	ldr	r3, [sp, #24]
 8014e16:	2b02      	cmp	r3, #2
 8014e18:	dd34      	ble.n	8014e84 <_dtoa_r+0x984>
 8014e1a:	9b03      	ldr	r3, [sp, #12]
 8014e1c:	9302      	str	r3, [sp, #8]
 8014e1e:	9b02      	ldr	r3, [sp, #8]
 8014e20:	b96b      	cbnz	r3, 8014e3e <_dtoa_r+0x93e>
 8014e22:	4631      	mov	r1, r6
 8014e24:	2205      	movs	r2, #5
 8014e26:	4620      	mov	r0, r4
 8014e28:	f000 fa9e 	bl	8015368 <__multadd>
 8014e2c:	4601      	mov	r1, r0
 8014e2e:	4606      	mov	r6, r0
 8014e30:	ee18 0a10 	vmov	r0, s16
 8014e34:	f000 fcb8 	bl	80157a8 <__mcmp>
 8014e38:	2800      	cmp	r0, #0
 8014e3a:	f73f adbb 	bgt.w	80149b4 <_dtoa_r+0x4b4>
 8014e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e40:	9d01      	ldr	r5, [sp, #4]
 8014e42:	43db      	mvns	r3, r3
 8014e44:	9300      	str	r3, [sp, #0]
 8014e46:	f04f 0800 	mov.w	r8, #0
 8014e4a:	4631      	mov	r1, r6
 8014e4c:	4620      	mov	r0, r4
 8014e4e:	f000 fa69 	bl	8015324 <_Bfree>
 8014e52:	2f00      	cmp	r7, #0
 8014e54:	f43f aea4 	beq.w	8014ba0 <_dtoa_r+0x6a0>
 8014e58:	f1b8 0f00 	cmp.w	r8, #0
 8014e5c:	d005      	beq.n	8014e6a <_dtoa_r+0x96a>
 8014e5e:	45b8      	cmp	r8, r7
 8014e60:	d003      	beq.n	8014e6a <_dtoa_r+0x96a>
 8014e62:	4641      	mov	r1, r8
 8014e64:	4620      	mov	r0, r4
 8014e66:	f000 fa5d 	bl	8015324 <_Bfree>
 8014e6a:	4639      	mov	r1, r7
 8014e6c:	4620      	mov	r0, r4
 8014e6e:	f000 fa59 	bl	8015324 <_Bfree>
 8014e72:	e695      	b.n	8014ba0 <_dtoa_r+0x6a0>
 8014e74:	2600      	movs	r6, #0
 8014e76:	4637      	mov	r7, r6
 8014e78:	e7e1      	b.n	8014e3e <_dtoa_r+0x93e>
 8014e7a:	9700      	str	r7, [sp, #0]
 8014e7c:	4637      	mov	r7, r6
 8014e7e:	e599      	b.n	80149b4 <_dtoa_r+0x4b4>
 8014e80:	40240000 	.word	0x40240000
 8014e84:	9b08      	ldr	r3, [sp, #32]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	f000 80ca 	beq.w	8015020 <_dtoa_r+0xb20>
 8014e8c:	9b03      	ldr	r3, [sp, #12]
 8014e8e:	9302      	str	r3, [sp, #8]
 8014e90:	2d00      	cmp	r5, #0
 8014e92:	dd05      	ble.n	8014ea0 <_dtoa_r+0x9a0>
 8014e94:	4639      	mov	r1, r7
 8014e96:	462a      	mov	r2, r5
 8014e98:	4620      	mov	r0, r4
 8014e9a:	f000 fc15 	bl	80156c8 <__lshift>
 8014e9e:	4607      	mov	r7, r0
 8014ea0:	f1b8 0f00 	cmp.w	r8, #0
 8014ea4:	d05b      	beq.n	8014f5e <_dtoa_r+0xa5e>
 8014ea6:	6879      	ldr	r1, [r7, #4]
 8014ea8:	4620      	mov	r0, r4
 8014eaa:	f000 f9fb 	bl	80152a4 <_Balloc>
 8014eae:	4605      	mov	r5, r0
 8014eb0:	b928      	cbnz	r0, 8014ebe <_dtoa_r+0x9be>
 8014eb2:	4b87      	ldr	r3, [pc, #540]	; (80150d0 <_dtoa_r+0xbd0>)
 8014eb4:	4602      	mov	r2, r0
 8014eb6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014eba:	f7ff bb3b 	b.w	8014534 <_dtoa_r+0x34>
 8014ebe:	693a      	ldr	r2, [r7, #16]
 8014ec0:	3202      	adds	r2, #2
 8014ec2:	0092      	lsls	r2, r2, #2
 8014ec4:	f107 010c 	add.w	r1, r7, #12
 8014ec8:	300c      	adds	r0, #12
 8014eca:	f7fe fba7 	bl	801361c <memcpy>
 8014ece:	2201      	movs	r2, #1
 8014ed0:	4629      	mov	r1, r5
 8014ed2:	4620      	mov	r0, r4
 8014ed4:	f000 fbf8 	bl	80156c8 <__lshift>
 8014ed8:	9b01      	ldr	r3, [sp, #4]
 8014eda:	f103 0901 	add.w	r9, r3, #1
 8014ede:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8014ee2:	4413      	add	r3, r2
 8014ee4:	9305      	str	r3, [sp, #20]
 8014ee6:	f00a 0301 	and.w	r3, sl, #1
 8014eea:	46b8      	mov	r8, r7
 8014eec:	9304      	str	r3, [sp, #16]
 8014eee:	4607      	mov	r7, r0
 8014ef0:	4631      	mov	r1, r6
 8014ef2:	ee18 0a10 	vmov	r0, s16
 8014ef6:	f7ff fa77 	bl	80143e8 <quorem>
 8014efa:	4641      	mov	r1, r8
 8014efc:	9002      	str	r0, [sp, #8]
 8014efe:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8014f02:	ee18 0a10 	vmov	r0, s16
 8014f06:	f000 fc4f 	bl	80157a8 <__mcmp>
 8014f0a:	463a      	mov	r2, r7
 8014f0c:	9003      	str	r0, [sp, #12]
 8014f0e:	4631      	mov	r1, r6
 8014f10:	4620      	mov	r0, r4
 8014f12:	f000 fc65 	bl	80157e0 <__mdiff>
 8014f16:	68c2      	ldr	r2, [r0, #12]
 8014f18:	f109 3bff 	add.w	fp, r9, #4294967295
 8014f1c:	4605      	mov	r5, r0
 8014f1e:	bb02      	cbnz	r2, 8014f62 <_dtoa_r+0xa62>
 8014f20:	4601      	mov	r1, r0
 8014f22:	ee18 0a10 	vmov	r0, s16
 8014f26:	f000 fc3f 	bl	80157a8 <__mcmp>
 8014f2a:	4602      	mov	r2, r0
 8014f2c:	4629      	mov	r1, r5
 8014f2e:	4620      	mov	r0, r4
 8014f30:	9207      	str	r2, [sp, #28]
 8014f32:	f000 f9f7 	bl	8015324 <_Bfree>
 8014f36:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8014f3a:	ea43 0102 	orr.w	r1, r3, r2
 8014f3e:	9b04      	ldr	r3, [sp, #16]
 8014f40:	430b      	orrs	r3, r1
 8014f42:	464d      	mov	r5, r9
 8014f44:	d10f      	bne.n	8014f66 <_dtoa_r+0xa66>
 8014f46:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014f4a:	d02a      	beq.n	8014fa2 <_dtoa_r+0xaa2>
 8014f4c:	9b03      	ldr	r3, [sp, #12]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	dd02      	ble.n	8014f58 <_dtoa_r+0xa58>
 8014f52:	9b02      	ldr	r3, [sp, #8]
 8014f54:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8014f58:	f88b a000 	strb.w	sl, [fp]
 8014f5c:	e775      	b.n	8014e4a <_dtoa_r+0x94a>
 8014f5e:	4638      	mov	r0, r7
 8014f60:	e7ba      	b.n	8014ed8 <_dtoa_r+0x9d8>
 8014f62:	2201      	movs	r2, #1
 8014f64:	e7e2      	b.n	8014f2c <_dtoa_r+0xa2c>
 8014f66:	9b03      	ldr	r3, [sp, #12]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	db04      	blt.n	8014f76 <_dtoa_r+0xa76>
 8014f6c:	9906      	ldr	r1, [sp, #24]
 8014f6e:	430b      	orrs	r3, r1
 8014f70:	9904      	ldr	r1, [sp, #16]
 8014f72:	430b      	orrs	r3, r1
 8014f74:	d122      	bne.n	8014fbc <_dtoa_r+0xabc>
 8014f76:	2a00      	cmp	r2, #0
 8014f78:	ddee      	ble.n	8014f58 <_dtoa_r+0xa58>
 8014f7a:	ee18 1a10 	vmov	r1, s16
 8014f7e:	2201      	movs	r2, #1
 8014f80:	4620      	mov	r0, r4
 8014f82:	f000 fba1 	bl	80156c8 <__lshift>
 8014f86:	4631      	mov	r1, r6
 8014f88:	ee08 0a10 	vmov	s16, r0
 8014f8c:	f000 fc0c 	bl	80157a8 <__mcmp>
 8014f90:	2800      	cmp	r0, #0
 8014f92:	dc03      	bgt.n	8014f9c <_dtoa_r+0xa9c>
 8014f94:	d1e0      	bne.n	8014f58 <_dtoa_r+0xa58>
 8014f96:	f01a 0f01 	tst.w	sl, #1
 8014f9a:	d0dd      	beq.n	8014f58 <_dtoa_r+0xa58>
 8014f9c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014fa0:	d1d7      	bne.n	8014f52 <_dtoa_r+0xa52>
 8014fa2:	2339      	movs	r3, #57	; 0x39
 8014fa4:	f88b 3000 	strb.w	r3, [fp]
 8014fa8:	462b      	mov	r3, r5
 8014faa:	461d      	mov	r5, r3
 8014fac:	3b01      	subs	r3, #1
 8014fae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014fb2:	2a39      	cmp	r2, #57	; 0x39
 8014fb4:	d071      	beq.n	801509a <_dtoa_r+0xb9a>
 8014fb6:	3201      	adds	r2, #1
 8014fb8:	701a      	strb	r2, [r3, #0]
 8014fba:	e746      	b.n	8014e4a <_dtoa_r+0x94a>
 8014fbc:	2a00      	cmp	r2, #0
 8014fbe:	dd07      	ble.n	8014fd0 <_dtoa_r+0xad0>
 8014fc0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8014fc4:	d0ed      	beq.n	8014fa2 <_dtoa_r+0xaa2>
 8014fc6:	f10a 0301 	add.w	r3, sl, #1
 8014fca:	f88b 3000 	strb.w	r3, [fp]
 8014fce:	e73c      	b.n	8014e4a <_dtoa_r+0x94a>
 8014fd0:	9b05      	ldr	r3, [sp, #20]
 8014fd2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8014fd6:	4599      	cmp	r9, r3
 8014fd8:	d047      	beq.n	801506a <_dtoa_r+0xb6a>
 8014fda:	ee18 1a10 	vmov	r1, s16
 8014fde:	2300      	movs	r3, #0
 8014fe0:	220a      	movs	r2, #10
 8014fe2:	4620      	mov	r0, r4
 8014fe4:	f000 f9c0 	bl	8015368 <__multadd>
 8014fe8:	45b8      	cmp	r8, r7
 8014fea:	ee08 0a10 	vmov	s16, r0
 8014fee:	f04f 0300 	mov.w	r3, #0
 8014ff2:	f04f 020a 	mov.w	r2, #10
 8014ff6:	4641      	mov	r1, r8
 8014ff8:	4620      	mov	r0, r4
 8014ffa:	d106      	bne.n	801500a <_dtoa_r+0xb0a>
 8014ffc:	f000 f9b4 	bl	8015368 <__multadd>
 8015000:	4680      	mov	r8, r0
 8015002:	4607      	mov	r7, r0
 8015004:	f109 0901 	add.w	r9, r9, #1
 8015008:	e772      	b.n	8014ef0 <_dtoa_r+0x9f0>
 801500a:	f000 f9ad 	bl	8015368 <__multadd>
 801500e:	4639      	mov	r1, r7
 8015010:	4680      	mov	r8, r0
 8015012:	2300      	movs	r3, #0
 8015014:	220a      	movs	r2, #10
 8015016:	4620      	mov	r0, r4
 8015018:	f000 f9a6 	bl	8015368 <__multadd>
 801501c:	4607      	mov	r7, r0
 801501e:	e7f1      	b.n	8015004 <_dtoa_r+0xb04>
 8015020:	9b03      	ldr	r3, [sp, #12]
 8015022:	9302      	str	r3, [sp, #8]
 8015024:	9d01      	ldr	r5, [sp, #4]
 8015026:	ee18 0a10 	vmov	r0, s16
 801502a:	4631      	mov	r1, r6
 801502c:	f7ff f9dc 	bl	80143e8 <quorem>
 8015030:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8015034:	9b01      	ldr	r3, [sp, #4]
 8015036:	f805 ab01 	strb.w	sl, [r5], #1
 801503a:	1aea      	subs	r2, r5, r3
 801503c:	9b02      	ldr	r3, [sp, #8]
 801503e:	4293      	cmp	r3, r2
 8015040:	dd09      	ble.n	8015056 <_dtoa_r+0xb56>
 8015042:	ee18 1a10 	vmov	r1, s16
 8015046:	2300      	movs	r3, #0
 8015048:	220a      	movs	r2, #10
 801504a:	4620      	mov	r0, r4
 801504c:	f000 f98c 	bl	8015368 <__multadd>
 8015050:	ee08 0a10 	vmov	s16, r0
 8015054:	e7e7      	b.n	8015026 <_dtoa_r+0xb26>
 8015056:	9b02      	ldr	r3, [sp, #8]
 8015058:	2b00      	cmp	r3, #0
 801505a:	bfc8      	it	gt
 801505c:	461d      	movgt	r5, r3
 801505e:	9b01      	ldr	r3, [sp, #4]
 8015060:	bfd8      	it	le
 8015062:	2501      	movle	r5, #1
 8015064:	441d      	add	r5, r3
 8015066:	f04f 0800 	mov.w	r8, #0
 801506a:	ee18 1a10 	vmov	r1, s16
 801506e:	2201      	movs	r2, #1
 8015070:	4620      	mov	r0, r4
 8015072:	f000 fb29 	bl	80156c8 <__lshift>
 8015076:	4631      	mov	r1, r6
 8015078:	ee08 0a10 	vmov	s16, r0
 801507c:	f000 fb94 	bl	80157a8 <__mcmp>
 8015080:	2800      	cmp	r0, #0
 8015082:	dc91      	bgt.n	8014fa8 <_dtoa_r+0xaa8>
 8015084:	d102      	bne.n	801508c <_dtoa_r+0xb8c>
 8015086:	f01a 0f01 	tst.w	sl, #1
 801508a:	d18d      	bne.n	8014fa8 <_dtoa_r+0xaa8>
 801508c:	462b      	mov	r3, r5
 801508e:	461d      	mov	r5, r3
 8015090:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015094:	2a30      	cmp	r2, #48	; 0x30
 8015096:	d0fa      	beq.n	801508e <_dtoa_r+0xb8e>
 8015098:	e6d7      	b.n	8014e4a <_dtoa_r+0x94a>
 801509a:	9a01      	ldr	r2, [sp, #4]
 801509c:	429a      	cmp	r2, r3
 801509e:	d184      	bne.n	8014faa <_dtoa_r+0xaaa>
 80150a0:	9b00      	ldr	r3, [sp, #0]
 80150a2:	3301      	adds	r3, #1
 80150a4:	9300      	str	r3, [sp, #0]
 80150a6:	2331      	movs	r3, #49	; 0x31
 80150a8:	7013      	strb	r3, [r2, #0]
 80150aa:	e6ce      	b.n	8014e4a <_dtoa_r+0x94a>
 80150ac:	4b09      	ldr	r3, [pc, #36]	; (80150d4 <_dtoa_r+0xbd4>)
 80150ae:	f7ff ba95 	b.w	80145dc <_dtoa_r+0xdc>
 80150b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80150b4:	2b00      	cmp	r3, #0
 80150b6:	f47f aa6e 	bne.w	8014596 <_dtoa_r+0x96>
 80150ba:	4b07      	ldr	r3, [pc, #28]	; (80150d8 <_dtoa_r+0xbd8>)
 80150bc:	f7ff ba8e 	b.w	80145dc <_dtoa_r+0xdc>
 80150c0:	9b02      	ldr	r3, [sp, #8]
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	dcae      	bgt.n	8015024 <_dtoa_r+0xb24>
 80150c6:	9b06      	ldr	r3, [sp, #24]
 80150c8:	2b02      	cmp	r3, #2
 80150ca:	f73f aea8 	bgt.w	8014e1e <_dtoa_r+0x91e>
 80150ce:	e7a9      	b.n	8015024 <_dtoa_r+0xb24>
 80150d0:	08016607 	.word	0x08016607
 80150d4:	08016564 	.word	0x08016564
 80150d8:	08016588 	.word	0x08016588

080150dc <__sflush_r>:
 80150dc:	898a      	ldrh	r2, [r1, #12]
 80150de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80150e2:	4605      	mov	r5, r0
 80150e4:	0710      	lsls	r0, r2, #28
 80150e6:	460c      	mov	r4, r1
 80150e8:	d458      	bmi.n	801519c <__sflush_r+0xc0>
 80150ea:	684b      	ldr	r3, [r1, #4]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	dc05      	bgt.n	80150fc <__sflush_r+0x20>
 80150f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80150f2:	2b00      	cmp	r3, #0
 80150f4:	dc02      	bgt.n	80150fc <__sflush_r+0x20>
 80150f6:	2000      	movs	r0, #0
 80150f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80150fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80150fe:	2e00      	cmp	r6, #0
 8015100:	d0f9      	beq.n	80150f6 <__sflush_r+0x1a>
 8015102:	2300      	movs	r3, #0
 8015104:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015108:	682f      	ldr	r7, [r5, #0]
 801510a:	602b      	str	r3, [r5, #0]
 801510c:	d032      	beq.n	8015174 <__sflush_r+0x98>
 801510e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015110:	89a3      	ldrh	r3, [r4, #12]
 8015112:	075a      	lsls	r2, r3, #29
 8015114:	d505      	bpl.n	8015122 <__sflush_r+0x46>
 8015116:	6863      	ldr	r3, [r4, #4]
 8015118:	1ac0      	subs	r0, r0, r3
 801511a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801511c:	b10b      	cbz	r3, 8015122 <__sflush_r+0x46>
 801511e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015120:	1ac0      	subs	r0, r0, r3
 8015122:	2300      	movs	r3, #0
 8015124:	4602      	mov	r2, r0
 8015126:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015128:	6a21      	ldr	r1, [r4, #32]
 801512a:	4628      	mov	r0, r5
 801512c:	47b0      	blx	r6
 801512e:	1c43      	adds	r3, r0, #1
 8015130:	89a3      	ldrh	r3, [r4, #12]
 8015132:	d106      	bne.n	8015142 <__sflush_r+0x66>
 8015134:	6829      	ldr	r1, [r5, #0]
 8015136:	291d      	cmp	r1, #29
 8015138:	d82c      	bhi.n	8015194 <__sflush_r+0xb8>
 801513a:	4a2a      	ldr	r2, [pc, #168]	; (80151e4 <__sflush_r+0x108>)
 801513c:	40ca      	lsrs	r2, r1
 801513e:	07d6      	lsls	r6, r2, #31
 8015140:	d528      	bpl.n	8015194 <__sflush_r+0xb8>
 8015142:	2200      	movs	r2, #0
 8015144:	6062      	str	r2, [r4, #4]
 8015146:	04d9      	lsls	r1, r3, #19
 8015148:	6922      	ldr	r2, [r4, #16]
 801514a:	6022      	str	r2, [r4, #0]
 801514c:	d504      	bpl.n	8015158 <__sflush_r+0x7c>
 801514e:	1c42      	adds	r2, r0, #1
 8015150:	d101      	bne.n	8015156 <__sflush_r+0x7a>
 8015152:	682b      	ldr	r3, [r5, #0]
 8015154:	b903      	cbnz	r3, 8015158 <__sflush_r+0x7c>
 8015156:	6560      	str	r0, [r4, #84]	; 0x54
 8015158:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801515a:	602f      	str	r7, [r5, #0]
 801515c:	2900      	cmp	r1, #0
 801515e:	d0ca      	beq.n	80150f6 <__sflush_r+0x1a>
 8015160:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015164:	4299      	cmp	r1, r3
 8015166:	d002      	beq.n	801516e <__sflush_r+0x92>
 8015168:	4628      	mov	r0, r5
 801516a:	f7fe fa6d 	bl	8013648 <_free_r>
 801516e:	2000      	movs	r0, #0
 8015170:	6360      	str	r0, [r4, #52]	; 0x34
 8015172:	e7c1      	b.n	80150f8 <__sflush_r+0x1c>
 8015174:	6a21      	ldr	r1, [r4, #32]
 8015176:	2301      	movs	r3, #1
 8015178:	4628      	mov	r0, r5
 801517a:	47b0      	blx	r6
 801517c:	1c41      	adds	r1, r0, #1
 801517e:	d1c7      	bne.n	8015110 <__sflush_r+0x34>
 8015180:	682b      	ldr	r3, [r5, #0]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d0c4      	beq.n	8015110 <__sflush_r+0x34>
 8015186:	2b1d      	cmp	r3, #29
 8015188:	d001      	beq.n	801518e <__sflush_r+0xb2>
 801518a:	2b16      	cmp	r3, #22
 801518c:	d101      	bne.n	8015192 <__sflush_r+0xb6>
 801518e:	602f      	str	r7, [r5, #0]
 8015190:	e7b1      	b.n	80150f6 <__sflush_r+0x1a>
 8015192:	89a3      	ldrh	r3, [r4, #12]
 8015194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015198:	81a3      	strh	r3, [r4, #12]
 801519a:	e7ad      	b.n	80150f8 <__sflush_r+0x1c>
 801519c:	690f      	ldr	r7, [r1, #16]
 801519e:	2f00      	cmp	r7, #0
 80151a0:	d0a9      	beq.n	80150f6 <__sflush_r+0x1a>
 80151a2:	0793      	lsls	r3, r2, #30
 80151a4:	680e      	ldr	r6, [r1, #0]
 80151a6:	bf08      	it	eq
 80151a8:	694b      	ldreq	r3, [r1, #20]
 80151aa:	600f      	str	r7, [r1, #0]
 80151ac:	bf18      	it	ne
 80151ae:	2300      	movne	r3, #0
 80151b0:	eba6 0807 	sub.w	r8, r6, r7
 80151b4:	608b      	str	r3, [r1, #8]
 80151b6:	f1b8 0f00 	cmp.w	r8, #0
 80151ba:	dd9c      	ble.n	80150f6 <__sflush_r+0x1a>
 80151bc:	6a21      	ldr	r1, [r4, #32]
 80151be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80151c0:	4643      	mov	r3, r8
 80151c2:	463a      	mov	r2, r7
 80151c4:	4628      	mov	r0, r5
 80151c6:	47b0      	blx	r6
 80151c8:	2800      	cmp	r0, #0
 80151ca:	dc06      	bgt.n	80151da <__sflush_r+0xfe>
 80151cc:	89a3      	ldrh	r3, [r4, #12]
 80151ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80151d2:	81a3      	strh	r3, [r4, #12]
 80151d4:	f04f 30ff 	mov.w	r0, #4294967295
 80151d8:	e78e      	b.n	80150f8 <__sflush_r+0x1c>
 80151da:	4407      	add	r7, r0
 80151dc:	eba8 0800 	sub.w	r8, r8, r0
 80151e0:	e7e9      	b.n	80151b6 <__sflush_r+0xda>
 80151e2:	bf00      	nop
 80151e4:	20400001 	.word	0x20400001

080151e8 <_fflush_r>:
 80151e8:	b538      	push	{r3, r4, r5, lr}
 80151ea:	690b      	ldr	r3, [r1, #16]
 80151ec:	4605      	mov	r5, r0
 80151ee:	460c      	mov	r4, r1
 80151f0:	b913      	cbnz	r3, 80151f8 <_fflush_r+0x10>
 80151f2:	2500      	movs	r5, #0
 80151f4:	4628      	mov	r0, r5
 80151f6:	bd38      	pop	{r3, r4, r5, pc}
 80151f8:	b118      	cbz	r0, 8015202 <_fflush_r+0x1a>
 80151fa:	6983      	ldr	r3, [r0, #24]
 80151fc:	b90b      	cbnz	r3, 8015202 <_fflush_r+0x1a>
 80151fe:	f7fe f937 	bl	8013470 <__sinit>
 8015202:	4b14      	ldr	r3, [pc, #80]	; (8015254 <_fflush_r+0x6c>)
 8015204:	429c      	cmp	r4, r3
 8015206:	d11b      	bne.n	8015240 <_fflush_r+0x58>
 8015208:	686c      	ldr	r4, [r5, #4]
 801520a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801520e:	2b00      	cmp	r3, #0
 8015210:	d0ef      	beq.n	80151f2 <_fflush_r+0xa>
 8015212:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015214:	07d0      	lsls	r0, r2, #31
 8015216:	d404      	bmi.n	8015222 <_fflush_r+0x3a>
 8015218:	0599      	lsls	r1, r3, #22
 801521a:	d402      	bmi.n	8015222 <_fflush_r+0x3a>
 801521c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801521e:	f7fe f9ea 	bl	80135f6 <__retarget_lock_acquire_recursive>
 8015222:	4628      	mov	r0, r5
 8015224:	4621      	mov	r1, r4
 8015226:	f7ff ff59 	bl	80150dc <__sflush_r>
 801522a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801522c:	07da      	lsls	r2, r3, #31
 801522e:	4605      	mov	r5, r0
 8015230:	d4e0      	bmi.n	80151f4 <_fflush_r+0xc>
 8015232:	89a3      	ldrh	r3, [r4, #12]
 8015234:	059b      	lsls	r3, r3, #22
 8015236:	d4dd      	bmi.n	80151f4 <_fflush_r+0xc>
 8015238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801523a:	f7fe f9de 	bl	80135fa <__retarget_lock_release_recursive>
 801523e:	e7d9      	b.n	80151f4 <_fflush_r+0xc>
 8015240:	4b05      	ldr	r3, [pc, #20]	; (8015258 <_fflush_r+0x70>)
 8015242:	429c      	cmp	r4, r3
 8015244:	d101      	bne.n	801524a <_fflush_r+0x62>
 8015246:	68ac      	ldr	r4, [r5, #8]
 8015248:	e7df      	b.n	801520a <_fflush_r+0x22>
 801524a:	4b04      	ldr	r3, [pc, #16]	; (801525c <_fflush_r+0x74>)
 801524c:	429c      	cmp	r4, r3
 801524e:	bf08      	it	eq
 8015250:	68ec      	ldreq	r4, [r5, #12]
 8015252:	e7da      	b.n	801520a <_fflush_r+0x22>
 8015254:	08016510 	.word	0x08016510
 8015258:	08016530 	.word	0x08016530
 801525c:	080164f0 	.word	0x080164f0

08015260 <_localeconv_r>:
 8015260:	4800      	ldr	r0, [pc, #0]	; (8015264 <_localeconv_r+0x4>)
 8015262:	4770      	bx	lr
 8015264:	20000178 	.word	0x20000178

08015268 <_lseek_r>:
 8015268:	b538      	push	{r3, r4, r5, lr}
 801526a:	4d07      	ldr	r5, [pc, #28]	; (8015288 <_lseek_r+0x20>)
 801526c:	4604      	mov	r4, r0
 801526e:	4608      	mov	r0, r1
 8015270:	4611      	mov	r1, r2
 8015272:	2200      	movs	r2, #0
 8015274:	602a      	str	r2, [r5, #0]
 8015276:	461a      	mov	r2, r3
 8015278:	f7f2 fd26 	bl	8007cc8 <_lseek>
 801527c:	1c43      	adds	r3, r0, #1
 801527e:	d102      	bne.n	8015286 <_lseek_r+0x1e>
 8015280:	682b      	ldr	r3, [r5, #0]
 8015282:	b103      	cbz	r3, 8015286 <_lseek_r+0x1e>
 8015284:	6023      	str	r3, [r4, #0]
 8015286:	bd38      	pop	{r3, r4, r5, pc}
 8015288:	2000a3b4 	.word	0x2000a3b4

0801528c <__malloc_lock>:
 801528c:	4801      	ldr	r0, [pc, #4]	; (8015294 <__malloc_lock+0x8>)
 801528e:	f7fe b9b2 	b.w	80135f6 <__retarget_lock_acquire_recursive>
 8015292:	bf00      	nop
 8015294:	2000a3a9 	.word	0x2000a3a9

08015298 <__malloc_unlock>:
 8015298:	4801      	ldr	r0, [pc, #4]	; (80152a0 <__malloc_unlock+0x8>)
 801529a:	f7fe b9ae 	b.w	80135fa <__retarget_lock_release_recursive>
 801529e:	bf00      	nop
 80152a0:	2000a3a9 	.word	0x2000a3a9

080152a4 <_Balloc>:
 80152a4:	b570      	push	{r4, r5, r6, lr}
 80152a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80152a8:	4604      	mov	r4, r0
 80152aa:	460d      	mov	r5, r1
 80152ac:	b976      	cbnz	r6, 80152cc <_Balloc+0x28>
 80152ae:	2010      	movs	r0, #16
 80152b0:	f7fe f9a4 	bl	80135fc <malloc>
 80152b4:	4602      	mov	r2, r0
 80152b6:	6260      	str	r0, [r4, #36]	; 0x24
 80152b8:	b920      	cbnz	r0, 80152c4 <_Balloc+0x20>
 80152ba:	4b18      	ldr	r3, [pc, #96]	; (801531c <_Balloc+0x78>)
 80152bc:	4818      	ldr	r0, [pc, #96]	; (8015320 <_Balloc+0x7c>)
 80152be:	2166      	movs	r1, #102	; 0x66
 80152c0:	f000 fb9c 	bl	80159fc <__assert_func>
 80152c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80152c8:	6006      	str	r6, [r0, #0]
 80152ca:	60c6      	str	r6, [r0, #12]
 80152cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80152ce:	68f3      	ldr	r3, [r6, #12]
 80152d0:	b183      	cbz	r3, 80152f4 <_Balloc+0x50>
 80152d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80152d4:	68db      	ldr	r3, [r3, #12]
 80152d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80152da:	b9b8      	cbnz	r0, 801530c <_Balloc+0x68>
 80152dc:	2101      	movs	r1, #1
 80152de:	fa01 f605 	lsl.w	r6, r1, r5
 80152e2:	1d72      	adds	r2, r6, #5
 80152e4:	0092      	lsls	r2, r2, #2
 80152e6:	4620      	mov	r0, r4
 80152e8:	f000 fb60 	bl	80159ac <_calloc_r>
 80152ec:	b160      	cbz	r0, 8015308 <_Balloc+0x64>
 80152ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80152f2:	e00e      	b.n	8015312 <_Balloc+0x6e>
 80152f4:	2221      	movs	r2, #33	; 0x21
 80152f6:	2104      	movs	r1, #4
 80152f8:	4620      	mov	r0, r4
 80152fa:	f000 fb57 	bl	80159ac <_calloc_r>
 80152fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015300:	60f0      	str	r0, [r6, #12]
 8015302:	68db      	ldr	r3, [r3, #12]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d1e4      	bne.n	80152d2 <_Balloc+0x2e>
 8015308:	2000      	movs	r0, #0
 801530a:	bd70      	pop	{r4, r5, r6, pc}
 801530c:	6802      	ldr	r2, [r0, #0]
 801530e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8015312:	2300      	movs	r3, #0
 8015314:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015318:	e7f7      	b.n	801530a <_Balloc+0x66>
 801531a:	bf00      	nop
 801531c:	08016595 	.word	0x08016595
 8015320:	08016618 	.word	0x08016618

08015324 <_Bfree>:
 8015324:	b570      	push	{r4, r5, r6, lr}
 8015326:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8015328:	4605      	mov	r5, r0
 801532a:	460c      	mov	r4, r1
 801532c:	b976      	cbnz	r6, 801534c <_Bfree+0x28>
 801532e:	2010      	movs	r0, #16
 8015330:	f7fe f964 	bl	80135fc <malloc>
 8015334:	4602      	mov	r2, r0
 8015336:	6268      	str	r0, [r5, #36]	; 0x24
 8015338:	b920      	cbnz	r0, 8015344 <_Bfree+0x20>
 801533a:	4b09      	ldr	r3, [pc, #36]	; (8015360 <_Bfree+0x3c>)
 801533c:	4809      	ldr	r0, [pc, #36]	; (8015364 <_Bfree+0x40>)
 801533e:	218a      	movs	r1, #138	; 0x8a
 8015340:	f000 fb5c 	bl	80159fc <__assert_func>
 8015344:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8015348:	6006      	str	r6, [r0, #0]
 801534a:	60c6      	str	r6, [r0, #12]
 801534c:	b13c      	cbz	r4, 801535e <_Bfree+0x3a>
 801534e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8015350:	6862      	ldr	r2, [r4, #4]
 8015352:	68db      	ldr	r3, [r3, #12]
 8015354:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015358:	6021      	str	r1, [r4, #0]
 801535a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801535e:	bd70      	pop	{r4, r5, r6, pc}
 8015360:	08016595 	.word	0x08016595
 8015364:	08016618 	.word	0x08016618

08015368 <__multadd>:
 8015368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801536c:	690d      	ldr	r5, [r1, #16]
 801536e:	4607      	mov	r7, r0
 8015370:	460c      	mov	r4, r1
 8015372:	461e      	mov	r6, r3
 8015374:	f101 0c14 	add.w	ip, r1, #20
 8015378:	2000      	movs	r0, #0
 801537a:	f8dc 3000 	ldr.w	r3, [ip]
 801537e:	b299      	uxth	r1, r3
 8015380:	fb02 6101 	mla	r1, r2, r1, r6
 8015384:	0c1e      	lsrs	r6, r3, #16
 8015386:	0c0b      	lsrs	r3, r1, #16
 8015388:	fb02 3306 	mla	r3, r2, r6, r3
 801538c:	b289      	uxth	r1, r1
 801538e:	3001      	adds	r0, #1
 8015390:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015394:	4285      	cmp	r5, r0
 8015396:	f84c 1b04 	str.w	r1, [ip], #4
 801539a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801539e:	dcec      	bgt.n	801537a <__multadd+0x12>
 80153a0:	b30e      	cbz	r6, 80153e6 <__multadd+0x7e>
 80153a2:	68a3      	ldr	r3, [r4, #8]
 80153a4:	42ab      	cmp	r3, r5
 80153a6:	dc19      	bgt.n	80153dc <__multadd+0x74>
 80153a8:	6861      	ldr	r1, [r4, #4]
 80153aa:	4638      	mov	r0, r7
 80153ac:	3101      	adds	r1, #1
 80153ae:	f7ff ff79 	bl	80152a4 <_Balloc>
 80153b2:	4680      	mov	r8, r0
 80153b4:	b928      	cbnz	r0, 80153c2 <__multadd+0x5a>
 80153b6:	4602      	mov	r2, r0
 80153b8:	4b0c      	ldr	r3, [pc, #48]	; (80153ec <__multadd+0x84>)
 80153ba:	480d      	ldr	r0, [pc, #52]	; (80153f0 <__multadd+0x88>)
 80153bc:	21b5      	movs	r1, #181	; 0xb5
 80153be:	f000 fb1d 	bl	80159fc <__assert_func>
 80153c2:	6922      	ldr	r2, [r4, #16]
 80153c4:	3202      	adds	r2, #2
 80153c6:	f104 010c 	add.w	r1, r4, #12
 80153ca:	0092      	lsls	r2, r2, #2
 80153cc:	300c      	adds	r0, #12
 80153ce:	f7fe f925 	bl	801361c <memcpy>
 80153d2:	4621      	mov	r1, r4
 80153d4:	4638      	mov	r0, r7
 80153d6:	f7ff ffa5 	bl	8015324 <_Bfree>
 80153da:	4644      	mov	r4, r8
 80153dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80153e0:	3501      	adds	r5, #1
 80153e2:	615e      	str	r6, [r3, #20]
 80153e4:	6125      	str	r5, [r4, #16]
 80153e6:	4620      	mov	r0, r4
 80153e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153ec:	08016607 	.word	0x08016607
 80153f0:	08016618 	.word	0x08016618

080153f4 <__hi0bits>:
 80153f4:	0c03      	lsrs	r3, r0, #16
 80153f6:	041b      	lsls	r3, r3, #16
 80153f8:	b9d3      	cbnz	r3, 8015430 <__hi0bits+0x3c>
 80153fa:	0400      	lsls	r0, r0, #16
 80153fc:	2310      	movs	r3, #16
 80153fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8015402:	bf04      	itt	eq
 8015404:	0200      	lsleq	r0, r0, #8
 8015406:	3308      	addeq	r3, #8
 8015408:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801540c:	bf04      	itt	eq
 801540e:	0100      	lsleq	r0, r0, #4
 8015410:	3304      	addeq	r3, #4
 8015412:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8015416:	bf04      	itt	eq
 8015418:	0080      	lsleq	r0, r0, #2
 801541a:	3302      	addeq	r3, #2
 801541c:	2800      	cmp	r0, #0
 801541e:	db05      	blt.n	801542c <__hi0bits+0x38>
 8015420:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8015424:	f103 0301 	add.w	r3, r3, #1
 8015428:	bf08      	it	eq
 801542a:	2320      	moveq	r3, #32
 801542c:	4618      	mov	r0, r3
 801542e:	4770      	bx	lr
 8015430:	2300      	movs	r3, #0
 8015432:	e7e4      	b.n	80153fe <__hi0bits+0xa>

08015434 <__lo0bits>:
 8015434:	6803      	ldr	r3, [r0, #0]
 8015436:	f013 0207 	ands.w	r2, r3, #7
 801543a:	4601      	mov	r1, r0
 801543c:	d00b      	beq.n	8015456 <__lo0bits+0x22>
 801543e:	07da      	lsls	r2, r3, #31
 8015440:	d423      	bmi.n	801548a <__lo0bits+0x56>
 8015442:	0798      	lsls	r0, r3, #30
 8015444:	bf49      	itett	mi
 8015446:	085b      	lsrmi	r3, r3, #1
 8015448:	089b      	lsrpl	r3, r3, #2
 801544a:	2001      	movmi	r0, #1
 801544c:	600b      	strmi	r3, [r1, #0]
 801544e:	bf5c      	itt	pl
 8015450:	600b      	strpl	r3, [r1, #0]
 8015452:	2002      	movpl	r0, #2
 8015454:	4770      	bx	lr
 8015456:	b298      	uxth	r0, r3
 8015458:	b9a8      	cbnz	r0, 8015486 <__lo0bits+0x52>
 801545a:	0c1b      	lsrs	r3, r3, #16
 801545c:	2010      	movs	r0, #16
 801545e:	b2da      	uxtb	r2, r3
 8015460:	b90a      	cbnz	r2, 8015466 <__lo0bits+0x32>
 8015462:	3008      	adds	r0, #8
 8015464:	0a1b      	lsrs	r3, r3, #8
 8015466:	071a      	lsls	r2, r3, #28
 8015468:	bf04      	itt	eq
 801546a:	091b      	lsreq	r3, r3, #4
 801546c:	3004      	addeq	r0, #4
 801546e:	079a      	lsls	r2, r3, #30
 8015470:	bf04      	itt	eq
 8015472:	089b      	lsreq	r3, r3, #2
 8015474:	3002      	addeq	r0, #2
 8015476:	07da      	lsls	r2, r3, #31
 8015478:	d403      	bmi.n	8015482 <__lo0bits+0x4e>
 801547a:	085b      	lsrs	r3, r3, #1
 801547c:	f100 0001 	add.w	r0, r0, #1
 8015480:	d005      	beq.n	801548e <__lo0bits+0x5a>
 8015482:	600b      	str	r3, [r1, #0]
 8015484:	4770      	bx	lr
 8015486:	4610      	mov	r0, r2
 8015488:	e7e9      	b.n	801545e <__lo0bits+0x2a>
 801548a:	2000      	movs	r0, #0
 801548c:	4770      	bx	lr
 801548e:	2020      	movs	r0, #32
 8015490:	4770      	bx	lr
	...

08015494 <__i2b>:
 8015494:	b510      	push	{r4, lr}
 8015496:	460c      	mov	r4, r1
 8015498:	2101      	movs	r1, #1
 801549a:	f7ff ff03 	bl	80152a4 <_Balloc>
 801549e:	4602      	mov	r2, r0
 80154a0:	b928      	cbnz	r0, 80154ae <__i2b+0x1a>
 80154a2:	4b05      	ldr	r3, [pc, #20]	; (80154b8 <__i2b+0x24>)
 80154a4:	4805      	ldr	r0, [pc, #20]	; (80154bc <__i2b+0x28>)
 80154a6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80154aa:	f000 faa7 	bl	80159fc <__assert_func>
 80154ae:	2301      	movs	r3, #1
 80154b0:	6144      	str	r4, [r0, #20]
 80154b2:	6103      	str	r3, [r0, #16]
 80154b4:	bd10      	pop	{r4, pc}
 80154b6:	bf00      	nop
 80154b8:	08016607 	.word	0x08016607
 80154bc:	08016618 	.word	0x08016618

080154c0 <__multiply>:
 80154c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154c4:	4691      	mov	r9, r2
 80154c6:	690a      	ldr	r2, [r1, #16]
 80154c8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80154cc:	429a      	cmp	r2, r3
 80154ce:	bfb8      	it	lt
 80154d0:	460b      	movlt	r3, r1
 80154d2:	460c      	mov	r4, r1
 80154d4:	bfbc      	itt	lt
 80154d6:	464c      	movlt	r4, r9
 80154d8:	4699      	movlt	r9, r3
 80154da:	6927      	ldr	r7, [r4, #16]
 80154dc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80154e0:	68a3      	ldr	r3, [r4, #8]
 80154e2:	6861      	ldr	r1, [r4, #4]
 80154e4:	eb07 060a 	add.w	r6, r7, sl
 80154e8:	42b3      	cmp	r3, r6
 80154ea:	b085      	sub	sp, #20
 80154ec:	bfb8      	it	lt
 80154ee:	3101      	addlt	r1, #1
 80154f0:	f7ff fed8 	bl	80152a4 <_Balloc>
 80154f4:	b930      	cbnz	r0, 8015504 <__multiply+0x44>
 80154f6:	4602      	mov	r2, r0
 80154f8:	4b44      	ldr	r3, [pc, #272]	; (801560c <__multiply+0x14c>)
 80154fa:	4845      	ldr	r0, [pc, #276]	; (8015610 <__multiply+0x150>)
 80154fc:	f240 115d 	movw	r1, #349	; 0x15d
 8015500:	f000 fa7c 	bl	80159fc <__assert_func>
 8015504:	f100 0514 	add.w	r5, r0, #20
 8015508:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801550c:	462b      	mov	r3, r5
 801550e:	2200      	movs	r2, #0
 8015510:	4543      	cmp	r3, r8
 8015512:	d321      	bcc.n	8015558 <__multiply+0x98>
 8015514:	f104 0314 	add.w	r3, r4, #20
 8015518:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801551c:	f109 0314 	add.w	r3, r9, #20
 8015520:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015524:	9202      	str	r2, [sp, #8]
 8015526:	1b3a      	subs	r2, r7, r4
 8015528:	3a15      	subs	r2, #21
 801552a:	f022 0203 	bic.w	r2, r2, #3
 801552e:	3204      	adds	r2, #4
 8015530:	f104 0115 	add.w	r1, r4, #21
 8015534:	428f      	cmp	r7, r1
 8015536:	bf38      	it	cc
 8015538:	2204      	movcc	r2, #4
 801553a:	9201      	str	r2, [sp, #4]
 801553c:	9a02      	ldr	r2, [sp, #8]
 801553e:	9303      	str	r3, [sp, #12]
 8015540:	429a      	cmp	r2, r3
 8015542:	d80c      	bhi.n	801555e <__multiply+0x9e>
 8015544:	2e00      	cmp	r6, #0
 8015546:	dd03      	ble.n	8015550 <__multiply+0x90>
 8015548:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801554c:	2b00      	cmp	r3, #0
 801554e:	d05a      	beq.n	8015606 <__multiply+0x146>
 8015550:	6106      	str	r6, [r0, #16]
 8015552:	b005      	add	sp, #20
 8015554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015558:	f843 2b04 	str.w	r2, [r3], #4
 801555c:	e7d8      	b.n	8015510 <__multiply+0x50>
 801555e:	f8b3 a000 	ldrh.w	sl, [r3]
 8015562:	f1ba 0f00 	cmp.w	sl, #0
 8015566:	d024      	beq.n	80155b2 <__multiply+0xf2>
 8015568:	f104 0e14 	add.w	lr, r4, #20
 801556c:	46a9      	mov	r9, r5
 801556e:	f04f 0c00 	mov.w	ip, #0
 8015572:	f85e 2b04 	ldr.w	r2, [lr], #4
 8015576:	f8d9 1000 	ldr.w	r1, [r9]
 801557a:	fa1f fb82 	uxth.w	fp, r2
 801557e:	b289      	uxth	r1, r1
 8015580:	fb0a 110b 	mla	r1, sl, fp, r1
 8015584:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8015588:	f8d9 2000 	ldr.w	r2, [r9]
 801558c:	4461      	add	r1, ip
 801558e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8015592:	fb0a c20b 	mla	r2, sl, fp, ip
 8015596:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801559a:	b289      	uxth	r1, r1
 801559c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80155a0:	4577      	cmp	r7, lr
 80155a2:	f849 1b04 	str.w	r1, [r9], #4
 80155a6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80155aa:	d8e2      	bhi.n	8015572 <__multiply+0xb2>
 80155ac:	9a01      	ldr	r2, [sp, #4]
 80155ae:	f845 c002 	str.w	ip, [r5, r2]
 80155b2:	9a03      	ldr	r2, [sp, #12]
 80155b4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80155b8:	3304      	adds	r3, #4
 80155ba:	f1b9 0f00 	cmp.w	r9, #0
 80155be:	d020      	beq.n	8015602 <__multiply+0x142>
 80155c0:	6829      	ldr	r1, [r5, #0]
 80155c2:	f104 0c14 	add.w	ip, r4, #20
 80155c6:	46ae      	mov	lr, r5
 80155c8:	f04f 0a00 	mov.w	sl, #0
 80155cc:	f8bc b000 	ldrh.w	fp, [ip]
 80155d0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80155d4:	fb09 220b 	mla	r2, r9, fp, r2
 80155d8:	4492      	add	sl, r2
 80155da:	b289      	uxth	r1, r1
 80155dc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80155e0:	f84e 1b04 	str.w	r1, [lr], #4
 80155e4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80155e8:	f8be 1000 	ldrh.w	r1, [lr]
 80155ec:	0c12      	lsrs	r2, r2, #16
 80155ee:	fb09 1102 	mla	r1, r9, r2, r1
 80155f2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80155f6:	4567      	cmp	r7, ip
 80155f8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80155fc:	d8e6      	bhi.n	80155cc <__multiply+0x10c>
 80155fe:	9a01      	ldr	r2, [sp, #4]
 8015600:	50a9      	str	r1, [r5, r2]
 8015602:	3504      	adds	r5, #4
 8015604:	e79a      	b.n	801553c <__multiply+0x7c>
 8015606:	3e01      	subs	r6, #1
 8015608:	e79c      	b.n	8015544 <__multiply+0x84>
 801560a:	bf00      	nop
 801560c:	08016607 	.word	0x08016607
 8015610:	08016618 	.word	0x08016618

08015614 <__pow5mult>:
 8015614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015618:	4615      	mov	r5, r2
 801561a:	f012 0203 	ands.w	r2, r2, #3
 801561e:	4606      	mov	r6, r0
 8015620:	460f      	mov	r7, r1
 8015622:	d007      	beq.n	8015634 <__pow5mult+0x20>
 8015624:	4c25      	ldr	r4, [pc, #148]	; (80156bc <__pow5mult+0xa8>)
 8015626:	3a01      	subs	r2, #1
 8015628:	2300      	movs	r3, #0
 801562a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801562e:	f7ff fe9b 	bl	8015368 <__multadd>
 8015632:	4607      	mov	r7, r0
 8015634:	10ad      	asrs	r5, r5, #2
 8015636:	d03d      	beq.n	80156b4 <__pow5mult+0xa0>
 8015638:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801563a:	b97c      	cbnz	r4, 801565c <__pow5mult+0x48>
 801563c:	2010      	movs	r0, #16
 801563e:	f7fd ffdd 	bl	80135fc <malloc>
 8015642:	4602      	mov	r2, r0
 8015644:	6270      	str	r0, [r6, #36]	; 0x24
 8015646:	b928      	cbnz	r0, 8015654 <__pow5mult+0x40>
 8015648:	4b1d      	ldr	r3, [pc, #116]	; (80156c0 <__pow5mult+0xac>)
 801564a:	481e      	ldr	r0, [pc, #120]	; (80156c4 <__pow5mult+0xb0>)
 801564c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8015650:	f000 f9d4 	bl	80159fc <__assert_func>
 8015654:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015658:	6004      	str	r4, [r0, #0]
 801565a:	60c4      	str	r4, [r0, #12]
 801565c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015660:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015664:	b94c      	cbnz	r4, 801567a <__pow5mult+0x66>
 8015666:	f240 2171 	movw	r1, #625	; 0x271
 801566a:	4630      	mov	r0, r6
 801566c:	f7ff ff12 	bl	8015494 <__i2b>
 8015670:	2300      	movs	r3, #0
 8015672:	f8c8 0008 	str.w	r0, [r8, #8]
 8015676:	4604      	mov	r4, r0
 8015678:	6003      	str	r3, [r0, #0]
 801567a:	f04f 0900 	mov.w	r9, #0
 801567e:	07eb      	lsls	r3, r5, #31
 8015680:	d50a      	bpl.n	8015698 <__pow5mult+0x84>
 8015682:	4639      	mov	r1, r7
 8015684:	4622      	mov	r2, r4
 8015686:	4630      	mov	r0, r6
 8015688:	f7ff ff1a 	bl	80154c0 <__multiply>
 801568c:	4639      	mov	r1, r7
 801568e:	4680      	mov	r8, r0
 8015690:	4630      	mov	r0, r6
 8015692:	f7ff fe47 	bl	8015324 <_Bfree>
 8015696:	4647      	mov	r7, r8
 8015698:	106d      	asrs	r5, r5, #1
 801569a:	d00b      	beq.n	80156b4 <__pow5mult+0xa0>
 801569c:	6820      	ldr	r0, [r4, #0]
 801569e:	b938      	cbnz	r0, 80156b0 <__pow5mult+0x9c>
 80156a0:	4622      	mov	r2, r4
 80156a2:	4621      	mov	r1, r4
 80156a4:	4630      	mov	r0, r6
 80156a6:	f7ff ff0b 	bl	80154c0 <__multiply>
 80156aa:	6020      	str	r0, [r4, #0]
 80156ac:	f8c0 9000 	str.w	r9, [r0]
 80156b0:	4604      	mov	r4, r0
 80156b2:	e7e4      	b.n	801567e <__pow5mult+0x6a>
 80156b4:	4638      	mov	r0, r7
 80156b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80156ba:	bf00      	nop
 80156bc:	08016768 	.word	0x08016768
 80156c0:	08016595 	.word	0x08016595
 80156c4:	08016618 	.word	0x08016618

080156c8 <__lshift>:
 80156c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156cc:	460c      	mov	r4, r1
 80156ce:	6849      	ldr	r1, [r1, #4]
 80156d0:	6923      	ldr	r3, [r4, #16]
 80156d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80156d6:	68a3      	ldr	r3, [r4, #8]
 80156d8:	4607      	mov	r7, r0
 80156da:	4691      	mov	r9, r2
 80156dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80156e0:	f108 0601 	add.w	r6, r8, #1
 80156e4:	42b3      	cmp	r3, r6
 80156e6:	db0b      	blt.n	8015700 <__lshift+0x38>
 80156e8:	4638      	mov	r0, r7
 80156ea:	f7ff fddb 	bl	80152a4 <_Balloc>
 80156ee:	4605      	mov	r5, r0
 80156f0:	b948      	cbnz	r0, 8015706 <__lshift+0x3e>
 80156f2:	4602      	mov	r2, r0
 80156f4:	4b2a      	ldr	r3, [pc, #168]	; (80157a0 <__lshift+0xd8>)
 80156f6:	482b      	ldr	r0, [pc, #172]	; (80157a4 <__lshift+0xdc>)
 80156f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80156fc:	f000 f97e 	bl	80159fc <__assert_func>
 8015700:	3101      	adds	r1, #1
 8015702:	005b      	lsls	r3, r3, #1
 8015704:	e7ee      	b.n	80156e4 <__lshift+0x1c>
 8015706:	2300      	movs	r3, #0
 8015708:	f100 0114 	add.w	r1, r0, #20
 801570c:	f100 0210 	add.w	r2, r0, #16
 8015710:	4618      	mov	r0, r3
 8015712:	4553      	cmp	r3, sl
 8015714:	db37      	blt.n	8015786 <__lshift+0xbe>
 8015716:	6920      	ldr	r0, [r4, #16]
 8015718:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801571c:	f104 0314 	add.w	r3, r4, #20
 8015720:	f019 091f 	ands.w	r9, r9, #31
 8015724:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015728:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801572c:	d02f      	beq.n	801578e <__lshift+0xc6>
 801572e:	f1c9 0e20 	rsb	lr, r9, #32
 8015732:	468a      	mov	sl, r1
 8015734:	f04f 0c00 	mov.w	ip, #0
 8015738:	681a      	ldr	r2, [r3, #0]
 801573a:	fa02 f209 	lsl.w	r2, r2, r9
 801573e:	ea42 020c 	orr.w	r2, r2, ip
 8015742:	f84a 2b04 	str.w	r2, [sl], #4
 8015746:	f853 2b04 	ldr.w	r2, [r3], #4
 801574a:	4298      	cmp	r0, r3
 801574c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8015750:	d8f2      	bhi.n	8015738 <__lshift+0x70>
 8015752:	1b03      	subs	r3, r0, r4
 8015754:	3b15      	subs	r3, #21
 8015756:	f023 0303 	bic.w	r3, r3, #3
 801575a:	3304      	adds	r3, #4
 801575c:	f104 0215 	add.w	r2, r4, #21
 8015760:	4290      	cmp	r0, r2
 8015762:	bf38      	it	cc
 8015764:	2304      	movcc	r3, #4
 8015766:	f841 c003 	str.w	ip, [r1, r3]
 801576a:	f1bc 0f00 	cmp.w	ip, #0
 801576e:	d001      	beq.n	8015774 <__lshift+0xac>
 8015770:	f108 0602 	add.w	r6, r8, #2
 8015774:	3e01      	subs	r6, #1
 8015776:	4638      	mov	r0, r7
 8015778:	612e      	str	r6, [r5, #16]
 801577a:	4621      	mov	r1, r4
 801577c:	f7ff fdd2 	bl	8015324 <_Bfree>
 8015780:	4628      	mov	r0, r5
 8015782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015786:	f842 0f04 	str.w	r0, [r2, #4]!
 801578a:	3301      	adds	r3, #1
 801578c:	e7c1      	b.n	8015712 <__lshift+0x4a>
 801578e:	3904      	subs	r1, #4
 8015790:	f853 2b04 	ldr.w	r2, [r3], #4
 8015794:	f841 2f04 	str.w	r2, [r1, #4]!
 8015798:	4298      	cmp	r0, r3
 801579a:	d8f9      	bhi.n	8015790 <__lshift+0xc8>
 801579c:	e7ea      	b.n	8015774 <__lshift+0xac>
 801579e:	bf00      	nop
 80157a0:	08016607 	.word	0x08016607
 80157a4:	08016618 	.word	0x08016618

080157a8 <__mcmp>:
 80157a8:	b530      	push	{r4, r5, lr}
 80157aa:	6902      	ldr	r2, [r0, #16]
 80157ac:	690c      	ldr	r4, [r1, #16]
 80157ae:	1b12      	subs	r2, r2, r4
 80157b0:	d10e      	bne.n	80157d0 <__mcmp+0x28>
 80157b2:	f100 0314 	add.w	r3, r0, #20
 80157b6:	3114      	adds	r1, #20
 80157b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80157bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80157c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80157c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80157c8:	42a5      	cmp	r5, r4
 80157ca:	d003      	beq.n	80157d4 <__mcmp+0x2c>
 80157cc:	d305      	bcc.n	80157da <__mcmp+0x32>
 80157ce:	2201      	movs	r2, #1
 80157d0:	4610      	mov	r0, r2
 80157d2:	bd30      	pop	{r4, r5, pc}
 80157d4:	4283      	cmp	r3, r0
 80157d6:	d3f3      	bcc.n	80157c0 <__mcmp+0x18>
 80157d8:	e7fa      	b.n	80157d0 <__mcmp+0x28>
 80157da:	f04f 32ff 	mov.w	r2, #4294967295
 80157de:	e7f7      	b.n	80157d0 <__mcmp+0x28>

080157e0 <__mdiff>:
 80157e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157e4:	460c      	mov	r4, r1
 80157e6:	4606      	mov	r6, r0
 80157e8:	4611      	mov	r1, r2
 80157ea:	4620      	mov	r0, r4
 80157ec:	4690      	mov	r8, r2
 80157ee:	f7ff ffdb 	bl	80157a8 <__mcmp>
 80157f2:	1e05      	subs	r5, r0, #0
 80157f4:	d110      	bne.n	8015818 <__mdiff+0x38>
 80157f6:	4629      	mov	r1, r5
 80157f8:	4630      	mov	r0, r6
 80157fa:	f7ff fd53 	bl	80152a4 <_Balloc>
 80157fe:	b930      	cbnz	r0, 801580e <__mdiff+0x2e>
 8015800:	4b3a      	ldr	r3, [pc, #232]	; (80158ec <__mdiff+0x10c>)
 8015802:	4602      	mov	r2, r0
 8015804:	f240 2132 	movw	r1, #562	; 0x232
 8015808:	4839      	ldr	r0, [pc, #228]	; (80158f0 <__mdiff+0x110>)
 801580a:	f000 f8f7 	bl	80159fc <__assert_func>
 801580e:	2301      	movs	r3, #1
 8015810:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015814:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015818:	bfa4      	itt	ge
 801581a:	4643      	movge	r3, r8
 801581c:	46a0      	movge	r8, r4
 801581e:	4630      	mov	r0, r6
 8015820:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015824:	bfa6      	itte	ge
 8015826:	461c      	movge	r4, r3
 8015828:	2500      	movge	r5, #0
 801582a:	2501      	movlt	r5, #1
 801582c:	f7ff fd3a 	bl	80152a4 <_Balloc>
 8015830:	b920      	cbnz	r0, 801583c <__mdiff+0x5c>
 8015832:	4b2e      	ldr	r3, [pc, #184]	; (80158ec <__mdiff+0x10c>)
 8015834:	4602      	mov	r2, r0
 8015836:	f44f 7110 	mov.w	r1, #576	; 0x240
 801583a:	e7e5      	b.n	8015808 <__mdiff+0x28>
 801583c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015840:	6926      	ldr	r6, [r4, #16]
 8015842:	60c5      	str	r5, [r0, #12]
 8015844:	f104 0914 	add.w	r9, r4, #20
 8015848:	f108 0514 	add.w	r5, r8, #20
 801584c:	f100 0e14 	add.w	lr, r0, #20
 8015850:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015854:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015858:	f108 0210 	add.w	r2, r8, #16
 801585c:	46f2      	mov	sl, lr
 801585e:	2100      	movs	r1, #0
 8015860:	f859 3b04 	ldr.w	r3, [r9], #4
 8015864:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015868:	fa1f f883 	uxth.w	r8, r3
 801586c:	fa11 f18b 	uxtah	r1, r1, fp
 8015870:	0c1b      	lsrs	r3, r3, #16
 8015872:	eba1 0808 	sub.w	r8, r1, r8
 8015876:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801587a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801587e:	fa1f f888 	uxth.w	r8, r8
 8015882:	1419      	asrs	r1, r3, #16
 8015884:	454e      	cmp	r6, r9
 8015886:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801588a:	f84a 3b04 	str.w	r3, [sl], #4
 801588e:	d8e7      	bhi.n	8015860 <__mdiff+0x80>
 8015890:	1b33      	subs	r3, r6, r4
 8015892:	3b15      	subs	r3, #21
 8015894:	f023 0303 	bic.w	r3, r3, #3
 8015898:	3304      	adds	r3, #4
 801589a:	3415      	adds	r4, #21
 801589c:	42a6      	cmp	r6, r4
 801589e:	bf38      	it	cc
 80158a0:	2304      	movcc	r3, #4
 80158a2:	441d      	add	r5, r3
 80158a4:	4473      	add	r3, lr
 80158a6:	469e      	mov	lr, r3
 80158a8:	462e      	mov	r6, r5
 80158aa:	4566      	cmp	r6, ip
 80158ac:	d30e      	bcc.n	80158cc <__mdiff+0xec>
 80158ae:	f10c 0203 	add.w	r2, ip, #3
 80158b2:	1b52      	subs	r2, r2, r5
 80158b4:	f022 0203 	bic.w	r2, r2, #3
 80158b8:	3d03      	subs	r5, #3
 80158ba:	45ac      	cmp	ip, r5
 80158bc:	bf38      	it	cc
 80158be:	2200      	movcc	r2, #0
 80158c0:	441a      	add	r2, r3
 80158c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80158c6:	b17b      	cbz	r3, 80158e8 <__mdiff+0x108>
 80158c8:	6107      	str	r7, [r0, #16]
 80158ca:	e7a3      	b.n	8015814 <__mdiff+0x34>
 80158cc:	f856 8b04 	ldr.w	r8, [r6], #4
 80158d0:	fa11 f288 	uxtah	r2, r1, r8
 80158d4:	1414      	asrs	r4, r2, #16
 80158d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80158da:	b292      	uxth	r2, r2
 80158dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80158e0:	f84e 2b04 	str.w	r2, [lr], #4
 80158e4:	1421      	asrs	r1, r4, #16
 80158e6:	e7e0      	b.n	80158aa <__mdiff+0xca>
 80158e8:	3f01      	subs	r7, #1
 80158ea:	e7ea      	b.n	80158c2 <__mdiff+0xe2>
 80158ec:	08016607 	.word	0x08016607
 80158f0:	08016618 	.word	0x08016618

080158f4 <__d2b>:
 80158f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80158f8:	4689      	mov	r9, r1
 80158fa:	2101      	movs	r1, #1
 80158fc:	ec57 6b10 	vmov	r6, r7, d0
 8015900:	4690      	mov	r8, r2
 8015902:	f7ff fccf 	bl	80152a4 <_Balloc>
 8015906:	4604      	mov	r4, r0
 8015908:	b930      	cbnz	r0, 8015918 <__d2b+0x24>
 801590a:	4602      	mov	r2, r0
 801590c:	4b25      	ldr	r3, [pc, #148]	; (80159a4 <__d2b+0xb0>)
 801590e:	4826      	ldr	r0, [pc, #152]	; (80159a8 <__d2b+0xb4>)
 8015910:	f240 310a 	movw	r1, #778	; 0x30a
 8015914:	f000 f872 	bl	80159fc <__assert_func>
 8015918:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801591c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015920:	bb35      	cbnz	r5, 8015970 <__d2b+0x7c>
 8015922:	2e00      	cmp	r6, #0
 8015924:	9301      	str	r3, [sp, #4]
 8015926:	d028      	beq.n	801597a <__d2b+0x86>
 8015928:	4668      	mov	r0, sp
 801592a:	9600      	str	r6, [sp, #0]
 801592c:	f7ff fd82 	bl	8015434 <__lo0bits>
 8015930:	9900      	ldr	r1, [sp, #0]
 8015932:	b300      	cbz	r0, 8015976 <__d2b+0x82>
 8015934:	9a01      	ldr	r2, [sp, #4]
 8015936:	f1c0 0320 	rsb	r3, r0, #32
 801593a:	fa02 f303 	lsl.w	r3, r2, r3
 801593e:	430b      	orrs	r3, r1
 8015940:	40c2      	lsrs	r2, r0
 8015942:	6163      	str	r3, [r4, #20]
 8015944:	9201      	str	r2, [sp, #4]
 8015946:	9b01      	ldr	r3, [sp, #4]
 8015948:	61a3      	str	r3, [r4, #24]
 801594a:	2b00      	cmp	r3, #0
 801594c:	bf14      	ite	ne
 801594e:	2202      	movne	r2, #2
 8015950:	2201      	moveq	r2, #1
 8015952:	6122      	str	r2, [r4, #16]
 8015954:	b1d5      	cbz	r5, 801598c <__d2b+0x98>
 8015956:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801595a:	4405      	add	r5, r0
 801595c:	f8c9 5000 	str.w	r5, [r9]
 8015960:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015964:	f8c8 0000 	str.w	r0, [r8]
 8015968:	4620      	mov	r0, r4
 801596a:	b003      	add	sp, #12
 801596c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015970:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015974:	e7d5      	b.n	8015922 <__d2b+0x2e>
 8015976:	6161      	str	r1, [r4, #20]
 8015978:	e7e5      	b.n	8015946 <__d2b+0x52>
 801597a:	a801      	add	r0, sp, #4
 801597c:	f7ff fd5a 	bl	8015434 <__lo0bits>
 8015980:	9b01      	ldr	r3, [sp, #4]
 8015982:	6163      	str	r3, [r4, #20]
 8015984:	2201      	movs	r2, #1
 8015986:	6122      	str	r2, [r4, #16]
 8015988:	3020      	adds	r0, #32
 801598a:	e7e3      	b.n	8015954 <__d2b+0x60>
 801598c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015990:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015994:	f8c9 0000 	str.w	r0, [r9]
 8015998:	6918      	ldr	r0, [r3, #16]
 801599a:	f7ff fd2b 	bl	80153f4 <__hi0bits>
 801599e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80159a2:	e7df      	b.n	8015964 <__d2b+0x70>
 80159a4:	08016607 	.word	0x08016607
 80159a8:	08016618 	.word	0x08016618

080159ac <_calloc_r>:
 80159ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80159ae:	fba1 2402 	umull	r2, r4, r1, r2
 80159b2:	b94c      	cbnz	r4, 80159c8 <_calloc_r+0x1c>
 80159b4:	4611      	mov	r1, r2
 80159b6:	9201      	str	r2, [sp, #4]
 80159b8:	f7fd feb2 	bl	8013720 <_malloc_r>
 80159bc:	9a01      	ldr	r2, [sp, #4]
 80159be:	4605      	mov	r5, r0
 80159c0:	b930      	cbnz	r0, 80159d0 <_calloc_r+0x24>
 80159c2:	4628      	mov	r0, r5
 80159c4:	b003      	add	sp, #12
 80159c6:	bd30      	pop	{r4, r5, pc}
 80159c8:	220c      	movs	r2, #12
 80159ca:	6002      	str	r2, [r0, #0]
 80159cc:	2500      	movs	r5, #0
 80159ce:	e7f8      	b.n	80159c2 <_calloc_r+0x16>
 80159d0:	4621      	mov	r1, r4
 80159d2:	f7fd fe31 	bl	8013638 <memset>
 80159d6:	e7f4      	b.n	80159c2 <_calloc_r+0x16>

080159d8 <_read_r>:
 80159d8:	b538      	push	{r3, r4, r5, lr}
 80159da:	4d07      	ldr	r5, [pc, #28]	; (80159f8 <_read_r+0x20>)
 80159dc:	4604      	mov	r4, r0
 80159de:	4608      	mov	r0, r1
 80159e0:	4611      	mov	r1, r2
 80159e2:	2200      	movs	r2, #0
 80159e4:	602a      	str	r2, [r5, #0]
 80159e6:	461a      	mov	r2, r3
 80159e8:	f7f2 f90e 	bl	8007c08 <_read>
 80159ec:	1c43      	adds	r3, r0, #1
 80159ee:	d102      	bne.n	80159f6 <_read_r+0x1e>
 80159f0:	682b      	ldr	r3, [r5, #0]
 80159f2:	b103      	cbz	r3, 80159f6 <_read_r+0x1e>
 80159f4:	6023      	str	r3, [r4, #0]
 80159f6:	bd38      	pop	{r3, r4, r5, pc}
 80159f8:	2000a3b4 	.word	0x2000a3b4

080159fc <__assert_func>:
 80159fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80159fe:	4614      	mov	r4, r2
 8015a00:	461a      	mov	r2, r3
 8015a02:	4b09      	ldr	r3, [pc, #36]	; (8015a28 <__assert_func+0x2c>)
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	4605      	mov	r5, r0
 8015a08:	68d8      	ldr	r0, [r3, #12]
 8015a0a:	b14c      	cbz	r4, 8015a20 <__assert_func+0x24>
 8015a0c:	4b07      	ldr	r3, [pc, #28]	; (8015a2c <__assert_func+0x30>)
 8015a0e:	9100      	str	r1, [sp, #0]
 8015a10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015a14:	4906      	ldr	r1, [pc, #24]	; (8015a30 <__assert_func+0x34>)
 8015a16:	462b      	mov	r3, r5
 8015a18:	f000 f80e 	bl	8015a38 <fiprintf>
 8015a1c:	f7fd fcbc 	bl	8013398 <abort>
 8015a20:	4b04      	ldr	r3, [pc, #16]	; (8015a34 <__assert_func+0x38>)
 8015a22:	461c      	mov	r4, r3
 8015a24:	e7f3      	b.n	8015a0e <__assert_func+0x12>
 8015a26:	bf00      	nop
 8015a28:	20000020 	.word	0x20000020
 8015a2c:	08016774 	.word	0x08016774
 8015a30:	08016781 	.word	0x08016781
 8015a34:	080167af 	.word	0x080167af

08015a38 <fiprintf>:
 8015a38:	b40e      	push	{r1, r2, r3}
 8015a3a:	b503      	push	{r0, r1, lr}
 8015a3c:	4601      	mov	r1, r0
 8015a3e:	ab03      	add	r3, sp, #12
 8015a40:	4805      	ldr	r0, [pc, #20]	; (8015a58 <fiprintf+0x20>)
 8015a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8015a46:	6800      	ldr	r0, [r0, #0]
 8015a48:	9301      	str	r3, [sp, #4]
 8015a4a:	f000 f843 	bl	8015ad4 <_vfiprintf_r>
 8015a4e:	b002      	add	sp, #8
 8015a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8015a54:	b003      	add	sp, #12
 8015a56:	4770      	bx	lr
 8015a58:	20000020 	.word	0x20000020

08015a5c <__ascii_mbtowc>:
 8015a5c:	b082      	sub	sp, #8
 8015a5e:	b901      	cbnz	r1, 8015a62 <__ascii_mbtowc+0x6>
 8015a60:	a901      	add	r1, sp, #4
 8015a62:	b142      	cbz	r2, 8015a76 <__ascii_mbtowc+0x1a>
 8015a64:	b14b      	cbz	r3, 8015a7a <__ascii_mbtowc+0x1e>
 8015a66:	7813      	ldrb	r3, [r2, #0]
 8015a68:	600b      	str	r3, [r1, #0]
 8015a6a:	7812      	ldrb	r2, [r2, #0]
 8015a6c:	1e10      	subs	r0, r2, #0
 8015a6e:	bf18      	it	ne
 8015a70:	2001      	movne	r0, #1
 8015a72:	b002      	add	sp, #8
 8015a74:	4770      	bx	lr
 8015a76:	4610      	mov	r0, r2
 8015a78:	e7fb      	b.n	8015a72 <__ascii_mbtowc+0x16>
 8015a7a:	f06f 0001 	mvn.w	r0, #1
 8015a7e:	e7f8      	b.n	8015a72 <__ascii_mbtowc+0x16>

08015a80 <__sfputc_r>:
 8015a80:	6893      	ldr	r3, [r2, #8]
 8015a82:	3b01      	subs	r3, #1
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	b410      	push	{r4}
 8015a88:	6093      	str	r3, [r2, #8]
 8015a8a:	da08      	bge.n	8015a9e <__sfputc_r+0x1e>
 8015a8c:	6994      	ldr	r4, [r2, #24]
 8015a8e:	42a3      	cmp	r3, r4
 8015a90:	db01      	blt.n	8015a96 <__sfputc_r+0x16>
 8015a92:	290a      	cmp	r1, #10
 8015a94:	d103      	bne.n	8015a9e <__sfputc_r+0x1e>
 8015a96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015a9a:	f000 b94b 	b.w	8015d34 <__swbuf_r>
 8015a9e:	6813      	ldr	r3, [r2, #0]
 8015aa0:	1c58      	adds	r0, r3, #1
 8015aa2:	6010      	str	r0, [r2, #0]
 8015aa4:	7019      	strb	r1, [r3, #0]
 8015aa6:	4608      	mov	r0, r1
 8015aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015aac:	4770      	bx	lr

08015aae <__sfputs_r>:
 8015aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ab0:	4606      	mov	r6, r0
 8015ab2:	460f      	mov	r7, r1
 8015ab4:	4614      	mov	r4, r2
 8015ab6:	18d5      	adds	r5, r2, r3
 8015ab8:	42ac      	cmp	r4, r5
 8015aba:	d101      	bne.n	8015ac0 <__sfputs_r+0x12>
 8015abc:	2000      	movs	r0, #0
 8015abe:	e007      	b.n	8015ad0 <__sfputs_r+0x22>
 8015ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ac4:	463a      	mov	r2, r7
 8015ac6:	4630      	mov	r0, r6
 8015ac8:	f7ff ffda 	bl	8015a80 <__sfputc_r>
 8015acc:	1c43      	adds	r3, r0, #1
 8015ace:	d1f3      	bne.n	8015ab8 <__sfputs_r+0xa>
 8015ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015ad4 <_vfiprintf_r>:
 8015ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ad8:	460d      	mov	r5, r1
 8015ada:	b09d      	sub	sp, #116	; 0x74
 8015adc:	4614      	mov	r4, r2
 8015ade:	4698      	mov	r8, r3
 8015ae0:	4606      	mov	r6, r0
 8015ae2:	b118      	cbz	r0, 8015aec <_vfiprintf_r+0x18>
 8015ae4:	6983      	ldr	r3, [r0, #24]
 8015ae6:	b90b      	cbnz	r3, 8015aec <_vfiprintf_r+0x18>
 8015ae8:	f7fd fcc2 	bl	8013470 <__sinit>
 8015aec:	4b89      	ldr	r3, [pc, #548]	; (8015d14 <_vfiprintf_r+0x240>)
 8015aee:	429d      	cmp	r5, r3
 8015af0:	d11b      	bne.n	8015b2a <_vfiprintf_r+0x56>
 8015af2:	6875      	ldr	r5, [r6, #4]
 8015af4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015af6:	07d9      	lsls	r1, r3, #31
 8015af8:	d405      	bmi.n	8015b06 <_vfiprintf_r+0x32>
 8015afa:	89ab      	ldrh	r3, [r5, #12]
 8015afc:	059a      	lsls	r2, r3, #22
 8015afe:	d402      	bmi.n	8015b06 <_vfiprintf_r+0x32>
 8015b00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015b02:	f7fd fd78 	bl	80135f6 <__retarget_lock_acquire_recursive>
 8015b06:	89ab      	ldrh	r3, [r5, #12]
 8015b08:	071b      	lsls	r3, r3, #28
 8015b0a:	d501      	bpl.n	8015b10 <_vfiprintf_r+0x3c>
 8015b0c:	692b      	ldr	r3, [r5, #16]
 8015b0e:	b9eb      	cbnz	r3, 8015b4c <_vfiprintf_r+0x78>
 8015b10:	4629      	mov	r1, r5
 8015b12:	4630      	mov	r0, r6
 8015b14:	f000 f96e 	bl	8015df4 <__swsetup_r>
 8015b18:	b1c0      	cbz	r0, 8015b4c <_vfiprintf_r+0x78>
 8015b1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015b1c:	07dc      	lsls	r4, r3, #31
 8015b1e:	d50e      	bpl.n	8015b3e <_vfiprintf_r+0x6a>
 8015b20:	f04f 30ff 	mov.w	r0, #4294967295
 8015b24:	b01d      	add	sp, #116	; 0x74
 8015b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b2a:	4b7b      	ldr	r3, [pc, #492]	; (8015d18 <_vfiprintf_r+0x244>)
 8015b2c:	429d      	cmp	r5, r3
 8015b2e:	d101      	bne.n	8015b34 <_vfiprintf_r+0x60>
 8015b30:	68b5      	ldr	r5, [r6, #8]
 8015b32:	e7df      	b.n	8015af4 <_vfiprintf_r+0x20>
 8015b34:	4b79      	ldr	r3, [pc, #484]	; (8015d1c <_vfiprintf_r+0x248>)
 8015b36:	429d      	cmp	r5, r3
 8015b38:	bf08      	it	eq
 8015b3a:	68f5      	ldreq	r5, [r6, #12]
 8015b3c:	e7da      	b.n	8015af4 <_vfiprintf_r+0x20>
 8015b3e:	89ab      	ldrh	r3, [r5, #12]
 8015b40:	0598      	lsls	r0, r3, #22
 8015b42:	d4ed      	bmi.n	8015b20 <_vfiprintf_r+0x4c>
 8015b44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015b46:	f7fd fd58 	bl	80135fa <__retarget_lock_release_recursive>
 8015b4a:	e7e9      	b.n	8015b20 <_vfiprintf_r+0x4c>
 8015b4c:	2300      	movs	r3, #0
 8015b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8015b50:	2320      	movs	r3, #32
 8015b52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015b56:	f8cd 800c 	str.w	r8, [sp, #12]
 8015b5a:	2330      	movs	r3, #48	; 0x30
 8015b5c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015d20 <_vfiprintf_r+0x24c>
 8015b60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015b64:	f04f 0901 	mov.w	r9, #1
 8015b68:	4623      	mov	r3, r4
 8015b6a:	469a      	mov	sl, r3
 8015b6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015b70:	b10a      	cbz	r2, 8015b76 <_vfiprintf_r+0xa2>
 8015b72:	2a25      	cmp	r2, #37	; 0x25
 8015b74:	d1f9      	bne.n	8015b6a <_vfiprintf_r+0x96>
 8015b76:	ebba 0b04 	subs.w	fp, sl, r4
 8015b7a:	d00b      	beq.n	8015b94 <_vfiprintf_r+0xc0>
 8015b7c:	465b      	mov	r3, fp
 8015b7e:	4622      	mov	r2, r4
 8015b80:	4629      	mov	r1, r5
 8015b82:	4630      	mov	r0, r6
 8015b84:	f7ff ff93 	bl	8015aae <__sfputs_r>
 8015b88:	3001      	adds	r0, #1
 8015b8a:	f000 80aa 	beq.w	8015ce2 <_vfiprintf_r+0x20e>
 8015b8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015b90:	445a      	add	r2, fp
 8015b92:	9209      	str	r2, [sp, #36]	; 0x24
 8015b94:	f89a 3000 	ldrb.w	r3, [sl]
 8015b98:	2b00      	cmp	r3, #0
 8015b9a:	f000 80a2 	beq.w	8015ce2 <_vfiprintf_r+0x20e>
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8015ba4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015ba8:	f10a 0a01 	add.w	sl, sl, #1
 8015bac:	9304      	str	r3, [sp, #16]
 8015bae:	9307      	str	r3, [sp, #28]
 8015bb0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015bb4:	931a      	str	r3, [sp, #104]	; 0x68
 8015bb6:	4654      	mov	r4, sl
 8015bb8:	2205      	movs	r2, #5
 8015bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015bbe:	4858      	ldr	r0, [pc, #352]	; (8015d20 <_vfiprintf_r+0x24c>)
 8015bc0:	f7ea fb0e 	bl	80001e0 <memchr>
 8015bc4:	9a04      	ldr	r2, [sp, #16]
 8015bc6:	b9d8      	cbnz	r0, 8015c00 <_vfiprintf_r+0x12c>
 8015bc8:	06d1      	lsls	r1, r2, #27
 8015bca:	bf44      	itt	mi
 8015bcc:	2320      	movmi	r3, #32
 8015bce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015bd2:	0713      	lsls	r3, r2, #28
 8015bd4:	bf44      	itt	mi
 8015bd6:	232b      	movmi	r3, #43	; 0x2b
 8015bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015bdc:	f89a 3000 	ldrb.w	r3, [sl]
 8015be0:	2b2a      	cmp	r3, #42	; 0x2a
 8015be2:	d015      	beq.n	8015c10 <_vfiprintf_r+0x13c>
 8015be4:	9a07      	ldr	r2, [sp, #28]
 8015be6:	4654      	mov	r4, sl
 8015be8:	2000      	movs	r0, #0
 8015bea:	f04f 0c0a 	mov.w	ip, #10
 8015bee:	4621      	mov	r1, r4
 8015bf0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015bf4:	3b30      	subs	r3, #48	; 0x30
 8015bf6:	2b09      	cmp	r3, #9
 8015bf8:	d94e      	bls.n	8015c98 <_vfiprintf_r+0x1c4>
 8015bfa:	b1b0      	cbz	r0, 8015c2a <_vfiprintf_r+0x156>
 8015bfc:	9207      	str	r2, [sp, #28]
 8015bfe:	e014      	b.n	8015c2a <_vfiprintf_r+0x156>
 8015c00:	eba0 0308 	sub.w	r3, r0, r8
 8015c04:	fa09 f303 	lsl.w	r3, r9, r3
 8015c08:	4313      	orrs	r3, r2
 8015c0a:	9304      	str	r3, [sp, #16]
 8015c0c:	46a2      	mov	sl, r4
 8015c0e:	e7d2      	b.n	8015bb6 <_vfiprintf_r+0xe2>
 8015c10:	9b03      	ldr	r3, [sp, #12]
 8015c12:	1d19      	adds	r1, r3, #4
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	9103      	str	r1, [sp, #12]
 8015c18:	2b00      	cmp	r3, #0
 8015c1a:	bfbb      	ittet	lt
 8015c1c:	425b      	neglt	r3, r3
 8015c1e:	f042 0202 	orrlt.w	r2, r2, #2
 8015c22:	9307      	strge	r3, [sp, #28]
 8015c24:	9307      	strlt	r3, [sp, #28]
 8015c26:	bfb8      	it	lt
 8015c28:	9204      	strlt	r2, [sp, #16]
 8015c2a:	7823      	ldrb	r3, [r4, #0]
 8015c2c:	2b2e      	cmp	r3, #46	; 0x2e
 8015c2e:	d10c      	bne.n	8015c4a <_vfiprintf_r+0x176>
 8015c30:	7863      	ldrb	r3, [r4, #1]
 8015c32:	2b2a      	cmp	r3, #42	; 0x2a
 8015c34:	d135      	bne.n	8015ca2 <_vfiprintf_r+0x1ce>
 8015c36:	9b03      	ldr	r3, [sp, #12]
 8015c38:	1d1a      	adds	r2, r3, #4
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	9203      	str	r2, [sp, #12]
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	bfb8      	it	lt
 8015c42:	f04f 33ff 	movlt.w	r3, #4294967295
 8015c46:	3402      	adds	r4, #2
 8015c48:	9305      	str	r3, [sp, #20]
 8015c4a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015d30 <_vfiprintf_r+0x25c>
 8015c4e:	7821      	ldrb	r1, [r4, #0]
 8015c50:	2203      	movs	r2, #3
 8015c52:	4650      	mov	r0, sl
 8015c54:	f7ea fac4 	bl	80001e0 <memchr>
 8015c58:	b140      	cbz	r0, 8015c6c <_vfiprintf_r+0x198>
 8015c5a:	2340      	movs	r3, #64	; 0x40
 8015c5c:	eba0 000a 	sub.w	r0, r0, sl
 8015c60:	fa03 f000 	lsl.w	r0, r3, r0
 8015c64:	9b04      	ldr	r3, [sp, #16]
 8015c66:	4303      	orrs	r3, r0
 8015c68:	3401      	adds	r4, #1
 8015c6a:	9304      	str	r3, [sp, #16]
 8015c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015c70:	482c      	ldr	r0, [pc, #176]	; (8015d24 <_vfiprintf_r+0x250>)
 8015c72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015c76:	2206      	movs	r2, #6
 8015c78:	f7ea fab2 	bl	80001e0 <memchr>
 8015c7c:	2800      	cmp	r0, #0
 8015c7e:	d03f      	beq.n	8015d00 <_vfiprintf_r+0x22c>
 8015c80:	4b29      	ldr	r3, [pc, #164]	; (8015d28 <_vfiprintf_r+0x254>)
 8015c82:	bb1b      	cbnz	r3, 8015ccc <_vfiprintf_r+0x1f8>
 8015c84:	9b03      	ldr	r3, [sp, #12]
 8015c86:	3307      	adds	r3, #7
 8015c88:	f023 0307 	bic.w	r3, r3, #7
 8015c8c:	3308      	adds	r3, #8
 8015c8e:	9303      	str	r3, [sp, #12]
 8015c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015c92:	443b      	add	r3, r7
 8015c94:	9309      	str	r3, [sp, #36]	; 0x24
 8015c96:	e767      	b.n	8015b68 <_vfiprintf_r+0x94>
 8015c98:	fb0c 3202 	mla	r2, ip, r2, r3
 8015c9c:	460c      	mov	r4, r1
 8015c9e:	2001      	movs	r0, #1
 8015ca0:	e7a5      	b.n	8015bee <_vfiprintf_r+0x11a>
 8015ca2:	2300      	movs	r3, #0
 8015ca4:	3401      	adds	r4, #1
 8015ca6:	9305      	str	r3, [sp, #20]
 8015ca8:	4619      	mov	r1, r3
 8015caa:	f04f 0c0a 	mov.w	ip, #10
 8015cae:	4620      	mov	r0, r4
 8015cb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015cb4:	3a30      	subs	r2, #48	; 0x30
 8015cb6:	2a09      	cmp	r2, #9
 8015cb8:	d903      	bls.n	8015cc2 <_vfiprintf_r+0x1ee>
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d0c5      	beq.n	8015c4a <_vfiprintf_r+0x176>
 8015cbe:	9105      	str	r1, [sp, #20]
 8015cc0:	e7c3      	b.n	8015c4a <_vfiprintf_r+0x176>
 8015cc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8015cc6:	4604      	mov	r4, r0
 8015cc8:	2301      	movs	r3, #1
 8015cca:	e7f0      	b.n	8015cae <_vfiprintf_r+0x1da>
 8015ccc:	ab03      	add	r3, sp, #12
 8015cce:	9300      	str	r3, [sp, #0]
 8015cd0:	462a      	mov	r2, r5
 8015cd2:	4b16      	ldr	r3, [pc, #88]	; (8015d2c <_vfiprintf_r+0x258>)
 8015cd4:	a904      	add	r1, sp, #16
 8015cd6:	4630      	mov	r0, r6
 8015cd8:	f7fd fe36 	bl	8013948 <_printf_float>
 8015cdc:	4607      	mov	r7, r0
 8015cde:	1c78      	adds	r0, r7, #1
 8015ce0:	d1d6      	bne.n	8015c90 <_vfiprintf_r+0x1bc>
 8015ce2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015ce4:	07d9      	lsls	r1, r3, #31
 8015ce6:	d405      	bmi.n	8015cf4 <_vfiprintf_r+0x220>
 8015ce8:	89ab      	ldrh	r3, [r5, #12]
 8015cea:	059a      	lsls	r2, r3, #22
 8015cec:	d402      	bmi.n	8015cf4 <_vfiprintf_r+0x220>
 8015cee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015cf0:	f7fd fc83 	bl	80135fa <__retarget_lock_release_recursive>
 8015cf4:	89ab      	ldrh	r3, [r5, #12]
 8015cf6:	065b      	lsls	r3, r3, #25
 8015cf8:	f53f af12 	bmi.w	8015b20 <_vfiprintf_r+0x4c>
 8015cfc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015cfe:	e711      	b.n	8015b24 <_vfiprintf_r+0x50>
 8015d00:	ab03      	add	r3, sp, #12
 8015d02:	9300      	str	r3, [sp, #0]
 8015d04:	462a      	mov	r2, r5
 8015d06:	4b09      	ldr	r3, [pc, #36]	; (8015d2c <_vfiprintf_r+0x258>)
 8015d08:	a904      	add	r1, sp, #16
 8015d0a:	4630      	mov	r0, r6
 8015d0c:	f7fe f8c0 	bl	8013e90 <_printf_i>
 8015d10:	e7e4      	b.n	8015cdc <_vfiprintf_r+0x208>
 8015d12:	bf00      	nop
 8015d14:	08016510 	.word	0x08016510
 8015d18:	08016530 	.word	0x08016530
 8015d1c:	080164f0 	.word	0x080164f0
 8015d20:	080167ba 	.word	0x080167ba
 8015d24:	080167c4 	.word	0x080167c4
 8015d28:	08013949 	.word	0x08013949
 8015d2c:	08015aaf 	.word	0x08015aaf
 8015d30:	080167c0 	.word	0x080167c0

08015d34 <__swbuf_r>:
 8015d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d36:	460e      	mov	r6, r1
 8015d38:	4614      	mov	r4, r2
 8015d3a:	4605      	mov	r5, r0
 8015d3c:	b118      	cbz	r0, 8015d46 <__swbuf_r+0x12>
 8015d3e:	6983      	ldr	r3, [r0, #24]
 8015d40:	b90b      	cbnz	r3, 8015d46 <__swbuf_r+0x12>
 8015d42:	f7fd fb95 	bl	8013470 <__sinit>
 8015d46:	4b21      	ldr	r3, [pc, #132]	; (8015dcc <__swbuf_r+0x98>)
 8015d48:	429c      	cmp	r4, r3
 8015d4a:	d12b      	bne.n	8015da4 <__swbuf_r+0x70>
 8015d4c:	686c      	ldr	r4, [r5, #4]
 8015d4e:	69a3      	ldr	r3, [r4, #24]
 8015d50:	60a3      	str	r3, [r4, #8]
 8015d52:	89a3      	ldrh	r3, [r4, #12]
 8015d54:	071a      	lsls	r2, r3, #28
 8015d56:	d52f      	bpl.n	8015db8 <__swbuf_r+0x84>
 8015d58:	6923      	ldr	r3, [r4, #16]
 8015d5a:	b36b      	cbz	r3, 8015db8 <__swbuf_r+0x84>
 8015d5c:	6923      	ldr	r3, [r4, #16]
 8015d5e:	6820      	ldr	r0, [r4, #0]
 8015d60:	1ac0      	subs	r0, r0, r3
 8015d62:	6963      	ldr	r3, [r4, #20]
 8015d64:	b2f6      	uxtb	r6, r6
 8015d66:	4283      	cmp	r3, r0
 8015d68:	4637      	mov	r7, r6
 8015d6a:	dc04      	bgt.n	8015d76 <__swbuf_r+0x42>
 8015d6c:	4621      	mov	r1, r4
 8015d6e:	4628      	mov	r0, r5
 8015d70:	f7ff fa3a 	bl	80151e8 <_fflush_r>
 8015d74:	bb30      	cbnz	r0, 8015dc4 <__swbuf_r+0x90>
 8015d76:	68a3      	ldr	r3, [r4, #8]
 8015d78:	3b01      	subs	r3, #1
 8015d7a:	60a3      	str	r3, [r4, #8]
 8015d7c:	6823      	ldr	r3, [r4, #0]
 8015d7e:	1c5a      	adds	r2, r3, #1
 8015d80:	6022      	str	r2, [r4, #0]
 8015d82:	701e      	strb	r6, [r3, #0]
 8015d84:	6963      	ldr	r3, [r4, #20]
 8015d86:	3001      	adds	r0, #1
 8015d88:	4283      	cmp	r3, r0
 8015d8a:	d004      	beq.n	8015d96 <__swbuf_r+0x62>
 8015d8c:	89a3      	ldrh	r3, [r4, #12]
 8015d8e:	07db      	lsls	r3, r3, #31
 8015d90:	d506      	bpl.n	8015da0 <__swbuf_r+0x6c>
 8015d92:	2e0a      	cmp	r6, #10
 8015d94:	d104      	bne.n	8015da0 <__swbuf_r+0x6c>
 8015d96:	4621      	mov	r1, r4
 8015d98:	4628      	mov	r0, r5
 8015d9a:	f7ff fa25 	bl	80151e8 <_fflush_r>
 8015d9e:	b988      	cbnz	r0, 8015dc4 <__swbuf_r+0x90>
 8015da0:	4638      	mov	r0, r7
 8015da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015da4:	4b0a      	ldr	r3, [pc, #40]	; (8015dd0 <__swbuf_r+0x9c>)
 8015da6:	429c      	cmp	r4, r3
 8015da8:	d101      	bne.n	8015dae <__swbuf_r+0x7a>
 8015daa:	68ac      	ldr	r4, [r5, #8]
 8015dac:	e7cf      	b.n	8015d4e <__swbuf_r+0x1a>
 8015dae:	4b09      	ldr	r3, [pc, #36]	; (8015dd4 <__swbuf_r+0xa0>)
 8015db0:	429c      	cmp	r4, r3
 8015db2:	bf08      	it	eq
 8015db4:	68ec      	ldreq	r4, [r5, #12]
 8015db6:	e7ca      	b.n	8015d4e <__swbuf_r+0x1a>
 8015db8:	4621      	mov	r1, r4
 8015dba:	4628      	mov	r0, r5
 8015dbc:	f000 f81a 	bl	8015df4 <__swsetup_r>
 8015dc0:	2800      	cmp	r0, #0
 8015dc2:	d0cb      	beq.n	8015d5c <__swbuf_r+0x28>
 8015dc4:	f04f 37ff 	mov.w	r7, #4294967295
 8015dc8:	e7ea      	b.n	8015da0 <__swbuf_r+0x6c>
 8015dca:	bf00      	nop
 8015dcc:	08016510 	.word	0x08016510
 8015dd0:	08016530 	.word	0x08016530
 8015dd4:	080164f0 	.word	0x080164f0

08015dd8 <__ascii_wctomb>:
 8015dd8:	b149      	cbz	r1, 8015dee <__ascii_wctomb+0x16>
 8015dda:	2aff      	cmp	r2, #255	; 0xff
 8015ddc:	bf85      	ittet	hi
 8015dde:	238a      	movhi	r3, #138	; 0x8a
 8015de0:	6003      	strhi	r3, [r0, #0]
 8015de2:	700a      	strbls	r2, [r1, #0]
 8015de4:	f04f 30ff 	movhi.w	r0, #4294967295
 8015de8:	bf98      	it	ls
 8015dea:	2001      	movls	r0, #1
 8015dec:	4770      	bx	lr
 8015dee:	4608      	mov	r0, r1
 8015df0:	4770      	bx	lr
	...

08015df4 <__swsetup_r>:
 8015df4:	4b32      	ldr	r3, [pc, #200]	; (8015ec0 <__swsetup_r+0xcc>)
 8015df6:	b570      	push	{r4, r5, r6, lr}
 8015df8:	681d      	ldr	r5, [r3, #0]
 8015dfa:	4606      	mov	r6, r0
 8015dfc:	460c      	mov	r4, r1
 8015dfe:	b125      	cbz	r5, 8015e0a <__swsetup_r+0x16>
 8015e00:	69ab      	ldr	r3, [r5, #24]
 8015e02:	b913      	cbnz	r3, 8015e0a <__swsetup_r+0x16>
 8015e04:	4628      	mov	r0, r5
 8015e06:	f7fd fb33 	bl	8013470 <__sinit>
 8015e0a:	4b2e      	ldr	r3, [pc, #184]	; (8015ec4 <__swsetup_r+0xd0>)
 8015e0c:	429c      	cmp	r4, r3
 8015e0e:	d10f      	bne.n	8015e30 <__swsetup_r+0x3c>
 8015e10:	686c      	ldr	r4, [r5, #4]
 8015e12:	89a3      	ldrh	r3, [r4, #12]
 8015e14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015e18:	0719      	lsls	r1, r3, #28
 8015e1a:	d42c      	bmi.n	8015e76 <__swsetup_r+0x82>
 8015e1c:	06dd      	lsls	r5, r3, #27
 8015e1e:	d411      	bmi.n	8015e44 <__swsetup_r+0x50>
 8015e20:	2309      	movs	r3, #9
 8015e22:	6033      	str	r3, [r6, #0]
 8015e24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015e28:	81a3      	strh	r3, [r4, #12]
 8015e2a:	f04f 30ff 	mov.w	r0, #4294967295
 8015e2e:	e03e      	b.n	8015eae <__swsetup_r+0xba>
 8015e30:	4b25      	ldr	r3, [pc, #148]	; (8015ec8 <__swsetup_r+0xd4>)
 8015e32:	429c      	cmp	r4, r3
 8015e34:	d101      	bne.n	8015e3a <__swsetup_r+0x46>
 8015e36:	68ac      	ldr	r4, [r5, #8]
 8015e38:	e7eb      	b.n	8015e12 <__swsetup_r+0x1e>
 8015e3a:	4b24      	ldr	r3, [pc, #144]	; (8015ecc <__swsetup_r+0xd8>)
 8015e3c:	429c      	cmp	r4, r3
 8015e3e:	bf08      	it	eq
 8015e40:	68ec      	ldreq	r4, [r5, #12]
 8015e42:	e7e6      	b.n	8015e12 <__swsetup_r+0x1e>
 8015e44:	0758      	lsls	r0, r3, #29
 8015e46:	d512      	bpl.n	8015e6e <__swsetup_r+0x7a>
 8015e48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e4a:	b141      	cbz	r1, 8015e5e <__swsetup_r+0x6a>
 8015e4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e50:	4299      	cmp	r1, r3
 8015e52:	d002      	beq.n	8015e5a <__swsetup_r+0x66>
 8015e54:	4630      	mov	r0, r6
 8015e56:	f7fd fbf7 	bl	8013648 <_free_r>
 8015e5a:	2300      	movs	r3, #0
 8015e5c:	6363      	str	r3, [r4, #52]	; 0x34
 8015e5e:	89a3      	ldrh	r3, [r4, #12]
 8015e60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015e64:	81a3      	strh	r3, [r4, #12]
 8015e66:	2300      	movs	r3, #0
 8015e68:	6063      	str	r3, [r4, #4]
 8015e6a:	6923      	ldr	r3, [r4, #16]
 8015e6c:	6023      	str	r3, [r4, #0]
 8015e6e:	89a3      	ldrh	r3, [r4, #12]
 8015e70:	f043 0308 	orr.w	r3, r3, #8
 8015e74:	81a3      	strh	r3, [r4, #12]
 8015e76:	6923      	ldr	r3, [r4, #16]
 8015e78:	b94b      	cbnz	r3, 8015e8e <__swsetup_r+0x9a>
 8015e7a:	89a3      	ldrh	r3, [r4, #12]
 8015e7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015e84:	d003      	beq.n	8015e8e <__swsetup_r+0x9a>
 8015e86:	4621      	mov	r1, r4
 8015e88:	4630      	mov	r0, r6
 8015e8a:	f000 f847 	bl	8015f1c <__smakebuf_r>
 8015e8e:	89a0      	ldrh	r0, [r4, #12]
 8015e90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015e94:	f010 0301 	ands.w	r3, r0, #1
 8015e98:	d00a      	beq.n	8015eb0 <__swsetup_r+0xbc>
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	60a3      	str	r3, [r4, #8]
 8015e9e:	6963      	ldr	r3, [r4, #20]
 8015ea0:	425b      	negs	r3, r3
 8015ea2:	61a3      	str	r3, [r4, #24]
 8015ea4:	6923      	ldr	r3, [r4, #16]
 8015ea6:	b943      	cbnz	r3, 8015eba <__swsetup_r+0xc6>
 8015ea8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015eac:	d1ba      	bne.n	8015e24 <__swsetup_r+0x30>
 8015eae:	bd70      	pop	{r4, r5, r6, pc}
 8015eb0:	0781      	lsls	r1, r0, #30
 8015eb2:	bf58      	it	pl
 8015eb4:	6963      	ldrpl	r3, [r4, #20]
 8015eb6:	60a3      	str	r3, [r4, #8]
 8015eb8:	e7f4      	b.n	8015ea4 <__swsetup_r+0xb0>
 8015eba:	2000      	movs	r0, #0
 8015ebc:	e7f7      	b.n	8015eae <__swsetup_r+0xba>
 8015ebe:	bf00      	nop
 8015ec0:	20000020 	.word	0x20000020
 8015ec4:	08016510 	.word	0x08016510
 8015ec8:	08016530 	.word	0x08016530
 8015ecc:	080164f0 	.word	0x080164f0

08015ed0 <__swhatbuf_r>:
 8015ed0:	b570      	push	{r4, r5, r6, lr}
 8015ed2:	460e      	mov	r6, r1
 8015ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ed8:	2900      	cmp	r1, #0
 8015eda:	b096      	sub	sp, #88	; 0x58
 8015edc:	4614      	mov	r4, r2
 8015ede:	461d      	mov	r5, r3
 8015ee0:	da08      	bge.n	8015ef4 <__swhatbuf_r+0x24>
 8015ee2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015ee6:	2200      	movs	r2, #0
 8015ee8:	602a      	str	r2, [r5, #0]
 8015eea:	061a      	lsls	r2, r3, #24
 8015eec:	d410      	bmi.n	8015f10 <__swhatbuf_r+0x40>
 8015eee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015ef2:	e00e      	b.n	8015f12 <__swhatbuf_r+0x42>
 8015ef4:	466a      	mov	r2, sp
 8015ef6:	f000 f851 	bl	8015f9c <_fstat_r>
 8015efa:	2800      	cmp	r0, #0
 8015efc:	dbf1      	blt.n	8015ee2 <__swhatbuf_r+0x12>
 8015efe:	9a01      	ldr	r2, [sp, #4]
 8015f00:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015f04:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015f08:	425a      	negs	r2, r3
 8015f0a:	415a      	adcs	r2, r3
 8015f0c:	602a      	str	r2, [r5, #0]
 8015f0e:	e7ee      	b.n	8015eee <__swhatbuf_r+0x1e>
 8015f10:	2340      	movs	r3, #64	; 0x40
 8015f12:	2000      	movs	r0, #0
 8015f14:	6023      	str	r3, [r4, #0]
 8015f16:	b016      	add	sp, #88	; 0x58
 8015f18:	bd70      	pop	{r4, r5, r6, pc}
	...

08015f1c <__smakebuf_r>:
 8015f1c:	898b      	ldrh	r3, [r1, #12]
 8015f1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015f20:	079d      	lsls	r5, r3, #30
 8015f22:	4606      	mov	r6, r0
 8015f24:	460c      	mov	r4, r1
 8015f26:	d507      	bpl.n	8015f38 <__smakebuf_r+0x1c>
 8015f28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015f2c:	6023      	str	r3, [r4, #0]
 8015f2e:	6123      	str	r3, [r4, #16]
 8015f30:	2301      	movs	r3, #1
 8015f32:	6163      	str	r3, [r4, #20]
 8015f34:	b002      	add	sp, #8
 8015f36:	bd70      	pop	{r4, r5, r6, pc}
 8015f38:	ab01      	add	r3, sp, #4
 8015f3a:	466a      	mov	r2, sp
 8015f3c:	f7ff ffc8 	bl	8015ed0 <__swhatbuf_r>
 8015f40:	9900      	ldr	r1, [sp, #0]
 8015f42:	4605      	mov	r5, r0
 8015f44:	4630      	mov	r0, r6
 8015f46:	f7fd fbeb 	bl	8013720 <_malloc_r>
 8015f4a:	b948      	cbnz	r0, 8015f60 <__smakebuf_r+0x44>
 8015f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f50:	059a      	lsls	r2, r3, #22
 8015f52:	d4ef      	bmi.n	8015f34 <__smakebuf_r+0x18>
 8015f54:	f023 0303 	bic.w	r3, r3, #3
 8015f58:	f043 0302 	orr.w	r3, r3, #2
 8015f5c:	81a3      	strh	r3, [r4, #12]
 8015f5e:	e7e3      	b.n	8015f28 <__smakebuf_r+0xc>
 8015f60:	4b0d      	ldr	r3, [pc, #52]	; (8015f98 <__smakebuf_r+0x7c>)
 8015f62:	62b3      	str	r3, [r6, #40]	; 0x28
 8015f64:	89a3      	ldrh	r3, [r4, #12]
 8015f66:	6020      	str	r0, [r4, #0]
 8015f68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f6c:	81a3      	strh	r3, [r4, #12]
 8015f6e:	9b00      	ldr	r3, [sp, #0]
 8015f70:	6163      	str	r3, [r4, #20]
 8015f72:	9b01      	ldr	r3, [sp, #4]
 8015f74:	6120      	str	r0, [r4, #16]
 8015f76:	b15b      	cbz	r3, 8015f90 <__smakebuf_r+0x74>
 8015f78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015f7c:	4630      	mov	r0, r6
 8015f7e:	f000 f81f 	bl	8015fc0 <_isatty_r>
 8015f82:	b128      	cbz	r0, 8015f90 <__smakebuf_r+0x74>
 8015f84:	89a3      	ldrh	r3, [r4, #12]
 8015f86:	f023 0303 	bic.w	r3, r3, #3
 8015f8a:	f043 0301 	orr.w	r3, r3, #1
 8015f8e:	81a3      	strh	r3, [r4, #12]
 8015f90:	89a0      	ldrh	r0, [r4, #12]
 8015f92:	4305      	orrs	r5, r0
 8015f94:	81a5      	strh	r5, [r4, #12]
 8015f96:	e7cd      	b.n	8015f34 <__smakebuf_r+0x18>
 8015f98:	08013409 	.word	0x08013409

08015f9c <_fstat_r>:
 8015f9c:	b538      	push	{r3, r4, r5, lr}
 8015f9e:	4d07      	ldr	r5, [pc, #28]	; (8015fbc <_fstat_r+0x20>)
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	4604      	mov	r4, r0
 8015fa4:	4608      	mov	r0, r1
 8015fa6:	4611      	mov	r1, r2
 8015fa8:	602b      	str	r3, [r5, #0]
 8015faa:	f7f1 fe72 	bl	8007c92 <_fstat>
 8015fae:	1c43      	adds	r3, r0, #1
 8015fb0:	d102      	bne.n	8015fb8 <_fstat_r+0x1c>
 8015fb2:	682b      	ldr	r3, [r5, #0]
 8015fb4:	b103      	cbz	r3, 8015fb8 <_fstat_r+0x1c>
 8015fb6:	6023      	str	r3, [r4, #0]
 8015fb8:	bd38      	pop	{r3, r4, r5, pc}
 8015fba:	bf00      	nop
 8015fbc:	2000a3b4 	.word	0x2000a3b4

08015fc0 <_isatty_r>:
 8015fc0:	b538      	push	{r3, r4, r5, lr}
 8015fc2:	4d06      	ldr	r5, [pc, #24]	; (8015fdc <_isatty_r+0x1c>)
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	4604      	mov	r4, r0
 8015fc8:	4608      	mov	r0, r1
 8015fca:	602b      	str	r3, [r5, #0]
 8015fcc:	f7f1 fe71 	bl	8007cb2 <_isatty>
 8015fd0:	1c43      	adds	r3, r0, #1
 8015fd2:	d102      	bne.n	8015fda <_isatty_r+0x1a>
 8015fd4:	682b      	ldr	r3, [r5, #0]
 8015fd6:	b103      	cbz	r3, 8015fda <_isatty_r+0x1a>
 8015fd8:	6023      	str	r3, [r4, #0]
 8015fda:	bd38      	pop	{r3, r4, r5, pc}
 8015fdc:	2000a3b4 	.word	0x2000a3b4

08015fe0 <_init>:
 8015fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fe2:	bf00      	nop
 8015fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015fe6:	bc08      	pop	{r3}
 8015fe8:	469e      	mov	lr, r3
 8015fea:	4770      	bx	lr

08015fec <_fini>:
 8015fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fee:	bf00      	nop
 8015ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015ff2:	bc08      	pop	{r3}
 8015ff4:	469e      	mov	lr, r3
 8015ff6:	4770      	bx	lr
