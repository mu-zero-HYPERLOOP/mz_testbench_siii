
sensor_ecu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017010  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000094c  080171a0  080171a0  000271a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017aec  08017aec  00030204  2**0
                  CONTENTS
  4 .ARM          00000008  08017aec  08017aec  00027aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017af4  08017af4  00030204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000002c  08017af4  08017af4  00027af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08017b20  08017b20  00027b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08017b28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030204  2**0
                  CONTENTS
 10 .bss          0000a13c  20000208  20000208  00030208  2**3
                  ALLOC
 11 ._user_heap_stack 00000c04  2000a344  2000a344  00030208  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005675a  00000000  00000000  00030234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000cf8b  00000000  00000000  0008698e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003868  00000000  00000000  00093920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000034b8  00000000  00000000  00097188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003357a  00000000  00000000  0009a640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000480dc  00000000  00000000  000cdbba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010589d  00000000  00000000  00115c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0021b533  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00010230  00000000  00000000  0021b584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000208 	.word	0x20000208
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017188 	.word	0x08017188

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	08017188 	.word	0x08017188

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <_ZN3can11MessageBaseC1Emhb>:
        uint8_t dlc;
        const bool isExtendedId;
        uint64_t intel;
        uint64_t motorola;

        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt) : id{_id}, dlc{_dlc}, isExtendedId{_isExt}, intel{0}, motorola{0} {}
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	461a      	mov	r2, r3
 8000efa:	460b      	mov	r3, r1
 8000efc:	71fb      	strb	r3, [r7, #7]
 8000efe:	4613      	mov	r3, r2
 8000f00:	71bb      	strb	r3, [r7, #6]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	79fa      	ldrb	r2, [r7, #7]
 8000f0c:	711a      	strb	r2, [r3, #4]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	79ba      	ldrb	r2, [r7, #6]
 8000f12:	715a      	strb	r2, [r3, #5]
 8000f14:	68f9      	ldr	r1, [r7, #12]
 8000f16:	f04f 0200 	mov.w	r2, #0
 8000f1a:	f04f 0300 	mov.w	r3, #0
 8000f1e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000f22:	68f9      	ldr	r1, [r7, #12]
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	f04f 0300 	mov.w	r3, #0
 8000f2c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4618      	mov	r0, r3
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>:
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
        }


        // Convert message to STM32 CAN_TxHeaderTypeDef and txBuf
        void toBuf(CAN_TxHeaderTypeDef& txHeader, uint8_t txBuf[8], CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8000f3e:	b490      	push	{r4, r7}
 8000f40:	b084      	sub	sp, #16
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	603b      	str	r3, [r7, #0]
            if(isExtendedId) {
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	795b      	ldrb	r3, [r3, #5]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d00a      	beq.n	8000f6a <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x2c>
                txHeader.StdId = 0;
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = id;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_EXT;
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	2204      	movs	r2, #4
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	e009      	b.n	8000f7e <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm+0x40>
            } else {
                txHeader.StdId = id;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	601a      	str	r2, [r3, #0]
                txHeader.ExtId = 0;
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	2200      	movs	r2, #0
 8000f76:	605a      	str	r2, [r3, #4]
                txHeader.IDE = CAN_ID_STD;
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
            }
            txHeader.RTR = bus + CAN_RTR_DATA; // Upper 16-bit contain bus. Lower 16-bit contain RTR
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	60da      	str	r2, [r3, #12]
            txHeader.DLC = dlc;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	791b      	ldrb	r3, [r3, #4]
 8000f88:	461a      	mov	r2, r3
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	611a      	str	r2, [r3, #16]
            txHeader.TransmitGlobalTime = DISABLE;
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	2200      	movs	r2, #0
 8000f92:	751a      	strb	r2, [r3, #20]
            txBuf[0] = (intel & 0xFF) | ((motorola >> 56) & 0xFF);
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f9a:	b2d4      	uxtb	r4, r2
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	f04f 0300 	mov.w	r3, #0
 8000faa:	0e0a      	lsrs	r2, r1, #24
 8000fac:	2300      	movs	r3, #0
 8000fae:	b2d3      	uxtb	r3, r2
 8000fb0:	4323      	orrs	r3, r4
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	701a      	strb	r2, [r3, #0]
            txBuf[1] = ((intel >> 8) & 0xFF) | ((motorola >> 48) & 0xFF);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000fbe:	f04f 0200 	mov.w	r2, #0
 8000fc2:	f04f 0300 	mov.w	r3, #0
 8000fc6:	0a02      	lsrs	r2, r0, #8
 8000fc8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000fcc:	0a0b      	lsrs	r3, r1, #8
 8000fce:	b2d4      	uxtb	r4, r2
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000fd6:	f04f 0200 	mov.w	r2, #0
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	0c0a      	lsrs	r2, r1, #16
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	4322      	orrs	r2, r4
 8000fea:	b2d2      	uxtb	r2, r2
 8000fec:	701a      	strb	r2, [r3, #0]
            txBuf[2] = ((intel >> 16) & 0xFF) | ((motorola >> 40) & 0xFF);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8000ff4:	f04f 0200 	mov.w	r2, #0
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	0c02      	lsrs	r2, r0, #16
 8000ffe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001002:	0c0b      	lsrs	r3, r1, #16
 8001004:	b2d4      	uxtb	r4, r2
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	f04f 0300 	mov.w	r3, #0
 8001014:	0a0a      	lsrs	r2, r1, #8
 8001016:	2300      	movs	r3, #0
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3302      	adds	r3, #2
 800101e:	4322      	orrs	r2, r4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	701a      	strb	r2, [r3, #0]
            txBuf[3] = ((intel >> 24) & 0xFF) | ((motorola >> 32) & 0xFF);
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	0e02      	lsrs	r2, r0, #24
 8001034:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001038:	0e0b      	lsrs	r3, r1, #24
 800103a:	b2d4      	uxtb	r4, r2
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	000a      	movs	r2, r1
 800104c:	2300      	movs	r3, #0
 800104e:	b2d2      	uxtb	r2, r2
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3303      	adds	r3, #3
 8001054:	4322      	orrs	r2, r4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	701a      	strb	r2, [r3, #0]
            txBuf[4] = ((intel >> 32) & 0xFF) | ((motorola >> 24) & 0xFF);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001060:	f04f 0200 	mov.w	r2, #0
 8001064:	f04f 0300 	mov.w	r3, #0
 8001068:	000a      	movs	r2, r1
 800106a:	2300      	movs	r3, #0
 800106c:	b2d4      	uxtb	r4, r2
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001074:	f04f 0200 	mov.w	r2, #0
 8001078:	f04f 0300 	mov.w	r3, #0
 800107c:	0e02      	lsrs	r2, r0, #24
 800107e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001082:	0e0b      	lsrs	r3, r1, #24
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3304      	adds	r3, #4
 800108a:	4322      	orrs	r2, r4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]
            txBuf[5] = ((intel >> 40) & 0xFF) | ((motorola >> 16) & 0xFF);
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001096:	f04f 0200 	mov.w	r2, #0
 800109a:	f04f 0300 	mov.w	r3, #0
 800109e:	0a0a      	lsrs	r2, r1, #8
 80010a0:	2300      	movs	r3, #0
 80010a2:	b2d4      	uxtb	r4, r2
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	f04f 0300 	mov.w	r3, #0
 80010b2:	0c02      	lsrs	r2, r0, #16
 80010b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010b8:	0c0b      	lsrs	r3, r1, #16
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3305      	adds	r3, #5
 80010c0:	4322      	orrs	r2, r4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	701a      	strb	r2, [r3, #0]
            txBuf[6] = ((intel >> 48) & 0xFF) | ((motorola >> 8) & 0xFF);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	0c0a      	lsrs	r2, r1, #16
 80010d6:	2300      	movs	r3, #0
 80010d8:	b2d4      	uxtb	r4, r2
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80010e0:	f04f 0200 	mov.w	r2, #0
 80010e4:	f04f 0300 	mov.w	r3, #0
 80010e8:	0a02      	lsrs	r2, r0, #8
 80010ea:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80010ee:	0a0b      	lsrs	r3, r1, #8
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3306      	adds	r3, #6
 80010f6:	4322      	orrs	r2, r4
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	701a      	strb	r2, [r3, #0]
            txBuf[7] = ((intel >> 56) & 0xFF) | (motorola & 0xFF);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	f04f 0300 	mov.w	r3, #0
 800110a:	0e0a      	lsrs	r2, r1, #24
 800110c:	2300      	movs	r3, #0
 800110e:	b2d1      	uxtb	r1, r2
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3307      	adds	r3, #7
 800111c:	430a      	orrs	r2, r1
 800111e:	b2d2      	uxtb	r2, r2
 8001120:	701a      	strb	r2, [r3, #0]
        }
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bc90      	pop	{r4, r7}
 800112a:	4770      	bx	lr

0800112c <_ZN9TxMessageC1Ev>:
struct RxMessage {
	CAN_RxHeaderTypeDef rxHeader;
	uint8_t rxBuf[8];
};

struct TxMessage {
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	461a      	mov	r2, r3
 8001138:	2300      	movs	r3, #0
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	6053      	str	r3, [r2, #4]
 800113e:	6093      	str	r3, [r2, #8]
 8001140:	60d3      	str	r3, [r2, #12]
 8001142:	6113      	str	r3, [r2, #16]
 8001144:	6153      	str	r3, [r2, #20]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <_ZNK3can11MessageBase12getTxMessageEm>:
        void toBuf(TxMessage& txMsg, CAN_BusTypeDef bus = buses::ANY) const noexcept {
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
        }

        // Convert message to CANzero TxMessage and return created struct
        TxMessage getTxMessage(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
            TxMessage txMsg;
 8001160:	68f8      	ldr	r0, [r7, #12]
 8001162:	f7ff ffe3 	bl	800112c <_ZN9TxMessageC1Ev>
            toBuf(txMsg.txHeader, txMsg.txBuf, bus);
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f103 0218 	add.w	r2, r3, #24
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68f9      	ldr	r1, [r7, #12]
 8001170:	68b8      	ldr	r0, [r7, #8]
 8001172:	f7ff fee4 	bl	8000f3e <_ZNK3can11MessageBase5toBufER19CAN_TxHeaderTypeDefPhm>
            return txMsg;
 8001176:	bf00      	nop
        }
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <_ZNK3can11MessageBase4sendEm>:

        // Use this function to send a message over the queue to the CAN bus
        void send(CAN_BusTypeDef bus = buses::ANY) const noexcept {
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
            TxMessage sendTxMessage = getTxMessage(bus);
 800118a:	f107 0308 	add.w	r3, r7, #8
 800118e:	683a      	ldr	r2, [r7, #0]
 8001190:	6879      	ldr	r1, [r7, #4]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff ffde 	bl	8001154 <_ZNK3can11MessageBase12getTxMessageEm>
            if(osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0) != osOK) {
 8001198:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <_ZNK3can11MessageBase4sendEm+0x54>)
 800119a:	6818      	ldr	r0, [r3, #0]
 800119c:	f107 0108 	add.w	r1, r7, #8
 80011a0:	2300      	movs	r3, #0
 80011a2:	2200      	movs	r2, #0
 80011a4:	f00f fb94 	bl	80108d0 <osMessageQueuePut>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	bf14      	ite	ne
 80011ae:	2301      	movne	r3, #1
 80011b0:	2300      	moveq	r3, #0
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d008      	beq.n	80011ca <_ZNK3can11MessageBase4sendEm+0x4a>
                printDebug("Failed sending message %lu because queue is full!\n", sendTxMessage.txHeader.StdId);
 80011b8:	f012 fe84 	bl	8013ec4 <vPortEnterCritical>
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <_ZNK3can11MessageBase4sendEm+0x58>)
 80011c2:	f00f f86f 	bl	80102a4 <printf_>
 80011c6:	f012 fead 	bl	8013f24 <vPortExitCritical>
            }
        }
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200007b4 	.word	0x200007b4
 80011d8:	080171a0 	.word	0x080171a0

080011dc <_ZN3can7MessageINS_8messages12SensorF_EMCYEEC1Ev>:
    public:

        ~Message() noexcept = default;

        // Constructor for sending a message
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	2300      	movs	r3, #0
 80011e8:	2204      	movs	r2, #4
 80011ea:	2181      	movs	r1, #129	; 0x81
 80011ec:	f7ff fe7e 	bl	8000eec <_ZN3can11MessageBaseC1Emhb>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <_ZN7canzero9emergency14consumer_entryEPv>:
#include "task.h"

TaskHandle_t emergencyTaskHandle;


void canzero::emergency::consumer_entry(void* argv){
 80011fc:	b5b0      	push	{r4, r5, r7, lr}
 80011fe:	b08c      	sub	sp, #48	; 0x30
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	emergencyTaskHandle = xTaskGetCurrentTaskHandle();
 8001204:	f011 feb0 	bl	8012f68 <xTaskGetCurrentTaskHandle>
 8001208:	4603      	mov	r3, r0
 800120a:	4a19      	ldr	r2, [pc, #100]	; (8001270 <_ZN7canzero9emergency14consumer_entryEPv+0x74>)
 800120c:	6013      	str	r3, [r2, #0]

	// Timeout for waiting for an emergency notification
	constexpr uint32_t EMERGENCY_WAIT_TIMEOUT_MS = 500;
 800120e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28

	can::Message<can::messages::CANZERO_EMCY> emcyMessage;
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ffdf 	bl	80011dc <_ZN3can7MessageINS_8messages12SensorF_EMCYEEC1Ev>


	uint32_t emergencyBuffer = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
	uint32_t lastEmergencyBuffer = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (true) {
		// Wait for notifications with a timeout without clearing flags
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 8001226:	f107 020c 	add.w	r2, r7, #12
 800122a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800122e:	2100      	movs	r1, #0
 8001230:	2000      	movs	r0, #0
 8001232:	f012 f833 	bl	801329c <xTaskNotifyWait>

		// When there was a change, call the user handler function
		if (emergencyBuffer != lastEmergencyBuffer) {
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800123a:	429a      	cmp	r2, r3
 800123c:	d001      	beq.n	8001242 <_ZN7canzero9emergency14consumer_entryEPv+0x46>
			//TODO: pass warning parameter.
			canzero::handle_emergency_warning();
 800123e:	f001 f845 	bl	80022cc <_ZN7canzero24handle_emergency_warningEv>
			//canzero::handle_emergency_warning(emergencyBuffer, lastEmergencyBuffer);
		}

		// Send CAN message when there was a change or when there is an error / warning present
		if (emergencyBuffer != 0 || emergencyBuffer != lastEmergencyBuffer) {
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d103      	bne.n	8001250 <_ZN7canzero9emergency14consumer_entryEPv+0x54>
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800124c:	429a      	cmp	r2, r3
 800124e:	d00b      	beq.n	8001268 <_ZN7canzero9emergency14consumer_entryEPv+0x6c>
			emcyMessage.intel = emergencyBuffer;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2200      	movs	r2, #0
 8001254:	461c      	mov	r4, r3
 8001256:	4615      	mov	r5, r2
 8001258:	e9c7 4506 	strd	r4, r5, [r7, #24]
			emcyMessage.send();
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff ff8c 	bl	8001180 <_ZNK3can11MessageBase4sendEm>
		}

		lastEmergencyBuffer = emergencyBuffer;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	62fb      	str	r3, [r7, #44]	; 0x2c
		xTaskNotifyWait(0, 0, &emergencyBuffer, pdMS_TO_TICKS(EMERGENCY_WAIT_TIMEOUT_MS));
 800126c:	e7db      	b.n	8001226 <_ZN7canzero9emergency14consumer_entryEPv+0x2a>
 800126e:	bf00      	nop
 8001270:	20000224 	.word	0x20000224

08001274 <_ZN7canzero9heartbeat14producer_entryEPv>:
static constexpr size_t MSG_BUFFER_NUM_MESSAGES = 5;	// Number of messages to store in the message buffer
static constexpr size_t MSG_BUFFER_SIZE = MSG_BUFFER_NUM_MESSAGES * (sizeof(RxMessage) + 4); 	// 4 bytes overhead to store the size_t

static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);

void canzero::heartbeat::producer_entry(void* argv){
 8001274:	b580      	push	{r7, lr}
 8001276:	b08c      	sub	sp, #48	; 0x30
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	//TODO setup callback logic for processRx.

	TxMessage hbTxMessage;
 800127c:	f107 030c 	add.w	r3, r7, #12
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff53 	bl	800112c <_ZN9TxMessageC1Ev>
	hbTxMessage.txHeader.StdId = can::messages::CANZERO_Heartbeat::id;
 8001286:	f240 7301 	movw	r3, #1793	; 0x701
 800128a:	60fb      	str	r3, [r7, #12]
	hbTxMessage.txHeader.DLC = can::messages::CANZERO_Heartbeat::dlc;
 800128c:	2301      	movs	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
	unsigned int frame = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (1) {
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 8001294:	f000 ff24 	bl	80020e0 <_ZN7canzero9getStatusEv>
 8001298:	4603      	mov	r3, r0
 800129a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		osMessageQueuePut(czSendQueue, &hbTxMessage, 0, 0);
 800129e:	4b0d      	ldr	r3, [pc, #52]	; (80012d4 <_ZN7canzero9heartbeat14producer_entryEPv+0x60>)
 80012a0:	6818      	ldr	r0, [r3, #0]
 80012a2:	f107 010c 	add.w	r1, r7, #12
 80012a6:	2300      	movs	r3, #0
 80012a8:	2200      	movs	r2, #0
 80012aa:	f00f fb11 	bl	80108d0 <osMessageQueuePut>
		osDelay(pdMS_TO_TICKS(canzero::heartbeat::getInterval()));
 80012ae:	f000 f843 	bl	8001338 <_ZN7canzero9heartbeat11getIntervalEv>
 80012b2:	4603      	mov	r3, r0
 80012b4:	461a      	mov	r2, r3
 80012b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ba:	fb02 f303 	mul.w	r3, r2, r3
 80012be:	4a06      	ldr	r2, [pc, #24]	; (80012d8 <_ZN7canzero9heartbeat14producer_entryEPv+0x64>)
 80012c0:	fba2 2303 	umull	r2, r3, r2, r3
 80012c4:	099b      	lsrs	r3, r3, #6
 80012c6:	4618      	mov	r0, r3
 80012c8:	f00f f966 	bl	8010598 <osDelay>
		frame ++;
 80012cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ce:	3301      	adds	r3, #1
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
		hbTxMessage.txBuf[0] = (uint8_t) canzero::getStatus();
 80012d2:	e7df      	b.n	8001294 <_ZN7canzero9heartbeat14producer_entryEPv+0x20>
 80012d4:	200007b4 	.word	0x200007b4
 80012d8:	10624dd3 	.word	0x10624dd3

080012dc <_ZN7canzero9heartbeat14consumer_entryEPv>:
	}
}

void canzero::heartbeat::consumer_entry(void* argv){
 80012dc:	b590      	push	{r4, r7, lr}
 80012de:	b08d      	sub	sp, #52	; 0x34
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (true) {
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <_ZN7canzero9heartbeat14consumer_entryEPv+0x54>)
 80012e6:	681c      	ldr	r4, [r3, #0]
 80012e8:	f000 f826 	bl	8001338 <_ZN7canzero9heartbeat11getIntervalEv>
 80012ec:	4603      	mov	r3, r0
 80012ee:	3305      	adds	r3, #5
 80012f0:	461a      	mov	r2, r3
 80012f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f6:	fb02 f303 	mul.w	r3, r2, r3
 80012fa:	4a0e      	ldr	r2, [pc, #56]	; (8001334 <_ZN7canzero9heartbeat14consumer_entryEPv+0x58>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	099b      	lsrs	r3, r3, #6
 8001302:	f107 010c 	add.w	r1, r7, #12
 8001306:	2224      	movs	r2, #36	; 0x24
 8001308:	4620      	mov	r0, r4
 800130a:	f010 fd87 	bl	8011e1c <xStreamBufferReceive>
 800130e:	4603      	mov	r3, r0
				pdMS_TO_TICKS(canzero::heartbeat::getInterval() + 5)) != 0) {
 8001310:	2b00      	cmp	r3, #0
 8001312:	bf14      	ite	ne
 8001314:	2301      	movne	r3, #1
 8001316:	2300      	moveq	r3, #0
 8001318:	b2db      	uxtb	r3, r3
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <_ZN7canzero9heartbeat14consumer_entryEPv+0x4e>
			canzero::setStatus((cz_status)message.rxBuf[0]);
 800131e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001322:	4618      	mov	r0, r3
 8001324:	f000 fec0 	bl	80020a8 <_ZN7canzero9setStatusE9cz_status>
 8001328:	e7dc      	b.n	80012e4 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
		}
		else{
			canzero::handle_heartbeat_miss();
 800132a:	f000 ffd6 	bl	80022da <_ZN7canzero21handle_heartbeat_missEv>
		if (xMessageBufferReceive( heartbeatMessageBuffer, &message, sizeof(message),
 800132e:	e7d9      	b.n	80012e4 <_ZN7canzero9heartbeat14consumer_entryEPv+0x8>
 8001330:	20000228 	.word	0x20000228
 8001334:	10624dd3 	.word	0x10624dd3

08001338 <_ZN7canzero9heartbeat11getIntervalEv>:

void canzero::heartbeat::setInterval(uint16_t value){
	OD_HeartbeatInterval_set(value);
}

uint16_t canzero::heartbeat::getInterval(){
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	return OD_HeartbeatInterval_get();
 800133c:	f004 ff98 	bl	8006270 <_Z24OD_HeartbeatInterval_getv>
 8001340:	4603      	mov	r3, r0
}
 8001342:	4618      	mov	r0, r3
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <_Z41__static_initialization_and_destruction_0ii>:
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d10c      	bne.n	8001372 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800135e:	4293      	cmp	r3, r2
 8001360:	d107      	bne.n	8001372 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 8001362:	2201      	movs	r2, #1
 8001364:	2100      	movs	r1, #0
 8001366:	20c8      	movs	r0, #200	; 0xc8
 8001368:	f010 fbd8 	bl	8011b1c <xStreamBufferGenericCreate>
 800136c:	4603      	mov	r3, r0
 800136e:	4a03      	ldr	r2, [pc, #12]	; (800137c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001370:	6013      	str	r3, [r2, #0]
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000228 	.word	0x20000228

08001380 <_GLOBAL__sub_I__ZN7canzero9heartbeat14producer_entryEPv>:
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
 8001384:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001388:	2001      	movs	r0, #1
 800138a:	f7ff ffdd 	bl	8001348 <_Z41__static_initialization_and_destruction_0ii>
 800138e:	bd80      	pop	{r7, pc}

08001390 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d005      	beq.n	80013c8 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	2203      	movs	r2, #3
 80013c6:	4798      	blx	r3
    }
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	bf0c      	ite	eq
 80013e2:	2301      	moveq	r3, #1
 80013e4:	2300      	movne	r3, #0
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	4618      	mov	r0, r3
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <_ZNSt8functionIFvR9RxMessageEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ffd4 	bl	80013ac <_ZNSt14_Function_baseD1Ev>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <_ZN7canzero10receiver_tC1Ev>:

namespace canzero {

static unsigned int receiverIdAcc = 0;

struct receiver_t {
 800140e:	b580      	push	{r7, lr}
 8001410:	b082      	sub	sp, #8
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f8e9 	bl	80015f0 <_ZNSt8functionIFvR9RxMessageEEC1Ev>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <_ZN7canzero10receiver_tD1Ev>:
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff ffde 	bl	80013f4 <_ZNSt8functionIFvR9RxMessageEED1Ev>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <_ZN7canzero10receiver_taSERKS0_>:
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
 800144a:	6039      	str	r1, [r7, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	683a      	ldr	r2, [r7, #0]
 8001450:	4611      	mov	r1, r2
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f8fb 	bl	800164e <_ZNSt8functionIFvR9RxMessageEEaSERKS3_>
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	691a      	ldr	r2, [r3, #16]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	611a      	str	r2, [r3, #16]
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	7d1a      	ldrb	r2, [r3, #20]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	751a      	strb	r2, [r3, #20]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	699a      	ldr	r2, [r3, #24]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	619a      	str	r2, [r3, #24]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4618      	mov	r0, r3
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>:
};

static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
uint32_t g_size = 0;

unsigned int registerMessageReceiverInternal(std::function<void(RxMessage&)> receiver, uint32_t msgId, bool extendedId){
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b08d      	sub	sp, #52	; 0x34
 8001480:	af00      	add	r7, sp, #0
 8001482:	60f8      	str	r0, [r7, #12]
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	4613      	mov	r3, r2
 8001488:	71fb      	strb	r3, [r7, #7]
	printf("registered Message receiver for id = %u\n", msgId);
 800148a:	68b9      	ldr	r1, [r7, #8]
 800148c:	481a      	ldr	r0, [pc, #104]	; (80014f8 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x7c>)
 800148e:	f00e ff09 	bl	80102a4 <printf_>
	taskENTER_CRITICAL();
 8001492:	f012 fd17 	bl	8013ec4 <vPortEnterCritical>
	const unsigned int id = receiverIdAcc++;
 8001496:	4b19      	ldr	r3, [pc, #100]	; (80014fc <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x80>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	4917      	ldr	r1, [pc, #92]	; (80014fc <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x80>)
 800149e:	600a      	str	r2, [r1, #0]
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	const receiver_t recv = {
		.m_callback = receiver,
		.m_id = msgId,
		.m_extendedId = extendedId,
		.m_receiverId = id
	};
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	68f9      	ldr	r1, [r7, #12]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 f8ae 	bl	800160a <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	623b      	str	r3, [r7, #32]
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80014b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ba:	62bb      	str	r3, [r7, #40]	; 0x28
	g_receivers[g_size++] = recv;
 80014bc:	4b10      	ldr	r3, [pc, #64]	; (8001500 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x84>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	1c53      	adds	r3, r2, #1
 80014c2:	490f      	ldr	r1, [pc, #60]	; (8001500 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x84>)
 80014c4:	600b      	str	r3, [r1, #0]
 80014c6:	4613      	mov	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	1a9b      	subs	r3, r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4a0d      	ldr	r2, [pc, #52]	; (8001504 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x88>)
 80014d0:	4413      	add	r3, r2
 80014d2:	f107 0210 	add.w	r2, r7, #16
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ffb2 	bl	8001442 <_ZN7canzero10receiver_taSERKS0_>
	taskEXIT_CRITICAL();
 80014de:	f012 fd21 	bl	8013f24 <vPortExitCritical>
	return id;
 80014e2:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	};
 80014e4:	f107 0310 	add.w	r3, r7, #16
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff9d 	bl	8001428 <_ZN7canzero10receiver_tD1Ev>
	return id;
 80014ee:	4623      	mov	r3, r4
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3734      	adds	r7, #52	; 0x34
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd90      	pop	{r4, r7, pc}
 80014f8:	080171d4 	.word	0x080171d4
 80014fc:	2000022c 	.word	0x2000022c
 8001500:	200007a8 	.word	0x200007a8
 8001504:	20000230 	.word	0x20000230

08001508 <_ZN7canzero24processRxMessageReceiverER9RxMessage>:

bool processRxMessageReceiver(RxMessage& message){
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
	bool foundReceiver = false;
 8001510:	2300      	movs	r3, #0
 8001512:	75fb      	strb	r3, [r7, #23]
	if(message.rxHeader.IDE == CAN_ID_STD){
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d12f      	bne.n	800157c <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x74>
		for(uint32_t i = 0;i<g_size;i++){
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	4b31      	ldr	r3, [pc, #196]	; (80015e8 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	429a      	cmp	r2, r3
 8001528:	d258      	bcs.n	80015dc <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == false) && (message.rxHeader.StdId == g_receivers[i].m_id)){
 800152a:	4930      	ldr	r1, [pc, #192]	; (80015ec <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 800152c:	693a      	ldr	r2, [r7, #16]
 800152e:	4613      	mov	r3, r2
 8001530:	00db      	lsls	r3, r3, #3
 8001532:	1a9b      	subs	r3, r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	440b      	add	r3, r1
 8001538:	3314      	adds	r3, #20
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d119      	bne.n	8001574 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6819      	ldr	r1, [r3, #0]
 8001544:	4829      	ldr	r0, [pc, #164]	; (80015ec <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	1a9b      	subs	r3, r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4403      	add	r3, r0
 8001552:	3310      	adds	r3, #16
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4299      	cmp	r1, r3
 8001558:	d10c      	bne.n	8001574 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x6c>
				g_receivers[i].m_callback(message);
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4613      	mov	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	1a9b      	subs	r3, r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	4a21      	ldr	r2, [pc, #132]	; (80015ec <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 8001566:	4413      	add	r3, r2
 8001568:	6879      	ldr	r1, [r7, #4]
 800156a:	4618      	mov	r0, r3
 800156c:	f000 f88a 	bl	8001684 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 8001570:	2301      	movs	r3, #1
 8001572:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	3301      	adds	r3, #1
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	e7d1      	b.n	8001520 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x18>
			}
		}
	}else{
		for(uint32_t i = 0;i<g_size;i++){
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	4b19      	ldr	r3, [pc, #100]	; (80015e8 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	429a      	cmp	r2, r3
 8001588:	d228      	bcs.n	80015dc <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xd4>
			if((g_receivers[i].m_extendedId == true) && (message.rxHeader.ExtId == g_receivers[i].m_id)){
 800158a:	4918      	ldr	r1, [pc, #96]	; (80015ec <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	4613      	mov	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	1a9b      	subs	r3, r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	3314      	adds	r3, #20
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d119      	bne.n	80015d4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6859      	ldr	r1, [r3, #4]
 80015a4:	4811      	ldr	r0, [pc, #68]	; (80015ec <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	4613      	mov	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4403      	add	r3, r0
 80015b2:	3310      	adds	r3, #16
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4299      	cmp	r1, r3
 80015b8:	d10c      	bne.n	80015d4 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xcc>
				g_receivers[i].m_callback(message);
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4613      	mov	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	1a9b      	subs	r3, r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4a09      	ldr	r2, [pc, #36]	; (80015ec <_ZN7canzero24processRxMessageReceiverER9RxMessage+0xe4>)
 80015c6:	4413      	add	r3, r2
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f000 f85a 	bl	8001684 <_ZNKSt8functionIFvR9RxMessageEEclES1_>
				foundReceiver = true;
 80015d0:	2301      	movs	r3, #1
 80015d2:	75fb      	strb	r3, [r7, #23]
		for(uint32_t i = 0;i<g_size;i++){
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	3301      	adds	r3, #1
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	e7d1      	b.n	8001580 <_ZN7canzero24processRxMessageReceiverER9RxMessage+0x78>
			}
		}
	}
	return foundReceiver;
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200007a8 	.word	0x200007a8
 80015ec:	20000230 	.word	0x20000230

080015f0 <_ZNSt8functionIFvR9RxMessageEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff fec8 	bl	8001390 <_ZNSt14_Function_baseC1Ev>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	6039      	str	r1, [r7, #0]
    function(const function& __x)
    : _Function_base()
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff feba 	bl	8001390 <_ZNSt14_Function_baseC1Ev>
    {
      if (static_cast<bool>(__x))
 800161c:	6838      	ldr	r0, [r7, #0]
 800161e:	f000 f84d 	bl	80016bc <_ZNKSt8functionIFvR9RxMessageEEcvbEv>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00d      	beq.n	8001644 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_+0x3a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	6839      	ldr	r1, [r7, #0]
 8001630:	2202      	movs	r2, #2
 8001632:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68da      	ldr	r2, [r3, #12]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	609a      	str	r2, [r3, #8]
	}
    }
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <_ZNSt8functionIFvR9RxMessageEEaSERKS3_>:
      operator=(const function& __x)
 800164e:	b580      	push	{r7, lr}
 8001650:	b086      	sub	sp, #24
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
 8001656:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	6839      	ldr	r1, [r7, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff ffd3 	bl	800160a <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	4618      	mov	r0, r3
 800166c:	f000 f836 	bl	80016dc <_ZNSt8functionIFvR9RxMessageEE4swapERS3_>
 8001670:	f107 0308 	add.w	r3, r7, #8
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff febd 	bl	80013f4 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	return *this;
 800167a:	687b      	ldr	r3, [r7, #4]
      }
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}

08001684 <_ZNKSt8functionIFvR9RxMessageEEclES1_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8001684:	b5b0      	push	{r4, r5, r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fe9e 	bl	80013d2 <_ZNKSt14_Function_base8_M_emptyEv>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <_ZNKSt8functionIFvR9RxMessageEEclES1_+0x1c>
	__throw_bad_function_call();
 800169c:	f012 ff31 	bl	8014502 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68dc      	ldr	r4, [r3, #12]
 80016a4:	687d      	ldr	r5, [r7, #4]
 80016a6:	6838      	ldr	r0, [r7, #0]
 80016a8:	f000 f839 	bl	800171e <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 80016ac:	4603      	mov	r3, r0
 80016ae:	4619      	mov	r1, r3
 80016b0:	4628      	mov	r0, r5
 80016b2:	47a0      	blx	r4
 80016b4:	bf00      	nop
    }
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bdb0      	pop	{r4, r5, r7, pc}

080016bc <_ZNKSt8functionIFvR9RxMessageEEcvbEv>:
      explicit operator bool() const noexcept
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fe83 	bl	80013d2 <_ZNKSt14_Function_base8_M_emptyEv>
 80016cc:	4603      	mov	r3, r0
 80016ce:	f083 0301 	eor.w	r3, r3, #1
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <_ZNSt8functionIFvR9RxMessageEE4swapERS3_>:
      void swap(function& __x) noexcept
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f000 f82c 	bl	800174a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f103 0208 	add.w	r2, r3, #8
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	3308      	adds	r3, #8
 80016fc:	4619      	mov	r1, r3
 80016fe:	4610      	mov	r0, r2
 8001700:	f000 f855 	bl	80017ae <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f103 020c 	add.w	r2, r3, #12
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	330c      	adds	r3, #12
 800170e:	4619      	mov	r1, r3
 8001710:	4610      	mov	r0, r2
 8001712:	f000 f876 	bl	8001802 <_ZSt4swapIPFvRKSt9_Any_dataR9RxMessageEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
      }
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800171e:	b480      	push	{r7}
 8001720:	b083      	sub	sp, #12
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800174a:	b580      	push	{r7, lr}
 800174c:	b084      	sub	sp, #16
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
 8001752:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ffed 	bl	8001734 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800175a:	4602      	mov	r2, r0
 800175c:	f107 0308 	add.w	r3, r7, #8
 8001760:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001764:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8001768:	6838      	ldr	r0, [r7, #0]
 800176a:	f7ff ffe3 	bl	8001734 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800176e:	4602      	mov	r2, r0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001776:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800177a:	f107 0308 	add.w	r3, r7, #8
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ffd8 	bl	8001734 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001784:	4602      	mov	r2, r0
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	e892 0003 	ldmia.w	r2, {r0, r1}
 800178c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8001790:	bf00      	nop
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4618      	mov	r0, r3
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr

080017ae <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b084      	sub	sp, #16
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f7ff ffed 	bl	8001798 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80017be:	4603      	mov	r3, r0
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80017c4:	6838      	ldr	r0, [r7, #0]
 80017c6:	f7ff ffe7 	bl	8001798 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80017ca:	4603      	mov	r3, r0
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff ffde 	bl	8001798 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80017dc:	4603      	mov	r3, r0
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	601a      	str	r2, [r3, #0]
    }
 80017e4:	bf00      	nop
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <_ZSt4swapIPFvRKSt9_Any_dataR9RxMessageEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8001802:	b580      	push	{r7, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ffed 	bl	80017ec <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 8001812:	4603      	mov	r3, r0
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8001818:	6838      	ldr	r0, [r7, #0]
 800181a:	f7ff ffe7 	bl	80017ec <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 800181e:	4603      	mov	r3, r0
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001826:	f107 030c 	add.w	r3, r7, #12
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ffde 	bl	80017ec <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 8001830:	4603      	mov	r3, r0
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	601a      	str	r2, [r3, #0]
    }
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
	taskEXIT_CRITICAL();
}

}
 8001840:	b5b0      	push	{r4, r5, r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d10f      	bne.n	8001870 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001856:	4293      	cmp	r3, r2
 8001858:	d10a      	bne.n	8001870 <_Z41__static_initialization_and_destruction_0ii+0x30>
static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800185c:	2431      	movs	r4, #49	; 0x31
 800185e:	461d      	mov	r5, r3
 8001860:	2c00      	cmp	r4, #0
 8001862:	db05      	blt.n	8001870 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8001864:	4628      	mov	r0, r5
 8001866:	f7ff fdd2 	bl	800140e <_ZN7canzero10receiver_tC1Ev>
 800186a:	351c      	adds	r5, #28
 800186c:	3c01      	subs	r4, #1
 800186e:	e7f7      	b.n	8001860 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10d      	bne.n	8001892 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800187c:	4293      	cmp	r3, r2
 800187e:	d108      	bne.n	8001892 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001880:	4c07      	ldr	r4, [pc, #28]	; (80018a0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001884:	429c      	cmp	r4, r3
 8001886:	d004      	beq.n	8001892 <_Z41__static_initialization_and_destruction_0ii+0x52>
 8001888:	3c1c      	subs	r4, #28
 800188a:	4620      	mov	r0, r4
 800188c:	f7ff fdcc 	bl	8001428 <_ZN7canzero10receiver_tD1Ev>
 8001890:	e7f7      	b.n	8001882 <_Z41__static_initialization_and_destruction_0ii+0x42>
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bdb0      	pop	{r4, r5, r7, pc}
 800189a:	bf00      	nop
 800189c:	20000230 	.word	0x20000230
 80018a0:	200007a8 	.word	0x200007a8

080018a4 <_GLOBAL__sub_I__ZN7canzero6g_sizeE>:
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80018ac:	2001      	movs	r0, #1
 80018ae:	f7ff ffc7 	bl	8001840 <_Z41__static_initialization_and_destruction_0ii>
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <_GLOBAL__sub_D__ZN7canzero6g_sizeE>:
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80018bc:	2000      	movs	r0, #0
 80018be:	f7ff ffbf 	bl	8001840 <_Z41__static_initialization_and_destruction_0ii>
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <_Z9processRX9RxMessage>:
/**
 * @brief function that process all node specific messages
 *
 * @param message
 */
void processRX(RxMessage message) {
 80018c4:	b084      	sub	sp, #16
 80018c6:	b580      	push	{r7, lr}
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	f107 0c08 	add.w	ip, r7, #8
 80018ce:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (can::checkRxMessage<can::messages::CANZERO_RX_PDO1>(message)) {
 80018d2:	f107 0008 	add.w	r0, r7, #8
 80018d6:	f000 f81b 	bl	8001910 <_ZN3can14checkRxMessageINS_8messages15SensorF_RX_PDO1EEEbRK9RxMessage>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <_Z9processRX9RxMessage+0x2e>
		xMessageBufferSend(handlePDO1MessageBuffer, &message, sizeof(message),
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <_Z9processRX9RxMessage+0x48>)
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	230a      	movs	r3, #10
 80018e6:	2224      	movs	r2, #36	; 0x24
 80018e8:	f107 0108 	add.w	r1, r7, #8
 80018ec:	f010 f9a4 	bl	8011c38 <xStreamBufferSend>
	 else {
	 printDebug("unknown/unhandled CAN Ext-ID: %lu\n", message.rxHeader.ExtId);
	 }
	 }
	 */
}
 80018f0:	e005      	b.n	80018fe <_Z9processRX9RxMessage+0x3a>
	} else if (canzero::processRxMessageReceiver(message)) {
 80018f2:	f107 0008 	add.w	r0, r7, #8
 80018f6:	f7ff fe07 	bl	8001508 <_ZN7canzero24processRxMessageReceiverER9RxMessage>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
}
 80018fe:	bf00      	nop
 8001900:	46bd      	mov	sp, r7
 8001902:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001906:	b004      	add	sp, #16
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	200007ac 	.word	0x200007ac

08001910 <_ZN3can14checkRxMessageINS_8messages15SensorF_RX_PDO1EEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d109      	bne.n	8001934 <_ZN3can14checkRxMessageINS_8messages15SensorF_RX_PDO1EEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f240 12c1 	movw	r2, #449	; 0x1c1
 8001928:	4293      	cmp	r3, r2
 800192a:	bf0c      	ite	eq
 800192c:	2301      	moveq	r3, #1
 800192e:	2300      	movne	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	e000      	b.n	8001936 <_ZN3can14checkRxMessageINS_8messages15SensorF_RX_PDO1EEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001934:	2300      	movs	r3, #0
    }
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <_Z41__static_initialization_and_destruction_0ii>:
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d10c      	bne.n	800196e <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800195a:	4293      	cmp	r3, r2
 800195c:	d107      	bne.n	800196e <_Z41__static_initialization_and_destruction_0ii+0x2a>
MessageBufferHandle_t handlePDO1MessageBuffer = xMessageBufferCreate(
 800195e:	2201      	movs	r2, #1
 8001960:	2100      	movs	r1, #0
 8001962:	20c8      	movs	r0, #200	; 0xc8
 8001964:	f010 f8da 	bl	8011b1c <xStreamBufferGenericCreate>
 8001968:	4603      	mov	r3, r0
 800196a:	4a03      	ldr	r2, [pc, #12]	; (8001978 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800196c:	6013      	str	r3, [r2, #0]
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	200007ac 	.word	0x200007ac

0800197c <_GLOBAL__sub_I_handlePDO1MessageBuffer>:
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
 8001980:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001984:	2001      	movs	r0, #1
 8001986:	f7ff ffdd 	bl	8001944 <_Z41__static_initialization_and_destruction_0ii>
 800198a:	bd80      	pop	{r7, pc}

0800198c <_Z41__static_initialization_and_destruction_0ii>:
 */
#include "cz_receive_queue.hpp"
#include "cz_typedefinitions.hpp"

static const osMessageQueueAttr_t czReceiveQueueAttr = {"czReceiveQueue",0,NULL,0,NULL,0};
osMessageQueueId_t czReceiveQueue = osMessageQueueNew(16, sizeof(RxMessage), &czReceiveQueueAttr);
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2b01      	cmp	r3, #1
 800199a:	d10c      	bne.n	80019b6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d107      	bne.n	80019b6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80019a6:	4a06      	ldr	r2, [pc, #24]	; (80019c0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80019a8:	2124      	movs	r1, #36	; 0x24
 80019aa:	2010      	movs	r0, #16
 80019ac:	f00e ff1d 	bl	80107ea <osMessageQueueNew>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4a04      	ldr	r2, [pc, #16]	; (80019c4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	08017450 	.word	0x08017450
 80019c4:	200007b0 	.word	0x200007b0

080019c8 <_GLOBAL__sub_I_czReceiveQueue>:
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80019d0:	2001      	movs	r0, #1
 80019d2:	f7ff ffdb 	bl	800198c <_Z41__static_initialization_and_destruction_0ii>
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019dc:	f3bf 8f4f 	dsb	sy
}
 80019e0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <__NVIC_SystemReset+0x24>)
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80019ea:	4904      	ldr	r1, [pc, #16]	; (80019fc <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <__NVIC_SystemReset+0x28>)
 80019ee:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80019f0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80019f2:	f3bf 8f4f 	dsb	sy
}
 80019f6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80019f8:	bf00      	nop
 80019fa:	e7fd      	b.n	80019f8 <__NVIC_SystemReset+0x20>
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	05fa0004 	.word	0x05fa0004

08001a04 <_Z15cz_receive_taskPv>:
#include "FreeRTOS.h"
#include "message_buffer.h"
#include "estdio.hpp"


void cz_receive_task(void* argv) {
 8001a04:	b5b0      	push	{r4, r5, r7, lr}
 8001a06:	b092      	sub	sp, #72	; 0x48
 8001a08:	af06      	add	r7, sp, #24
 8001a0a:	6078      	str	r0, [r7, #4]
	RxMessage message;
	while (1) {
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8001a0c:	4b26      	ldr	r3, [pc, #152]	; (8001aa8 <_Z15cz_receive_taskPv+0xa4>)
 8001a0e:	6818      	ldr	r0, [r3, #0]
 8001a10:	f107 010c 	add.w	r1, r7, #12
 8001a14:	f04f 33ff 	mov.w	r3, #4294967295
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f00e ffb9 	bl	8010990 <osMessageQueueGet>
		if (message.rxHeader.RTR == CAN_RTR_DATA) {
 8001a1e:	69bb      	ldr	r3, [r7, #24]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d136      	bne.n	8001a92 <_Z15cz_receive_taskPv+0x8e>
 			if(can::checkRxMessage<can::messages::CANZERO_BTL_RX>(message)) {
 8001a24:	f107 030c 	add.w	r3, r7, #12
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 f8e3 	bl	8001bf4 <_ZN3can14checkRxMessageINS_8messages14SensorF_BTL_RXEEEbRK9RxMessage>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <_Z15cz_receive_taskPv+0x3c>
				if(message.rxBuf[0]==0xff) {
 8001a34:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001a38:	2bff      	cmp	r3, #255	; 0xff
 8001a3a:	d1e7      	bne.n	8001a0c <_Z15cz_receive_taskPv+0x8>
					NVIC_SystemReset();
 8001a3c:	f7ff ffcc 	bl	80019d8 <__NVIC_SystemReset>
				}
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Up>(message)) {
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	4618      	mov	r0, r3
 8001a46:	f000 f8ee 	bl	8001c26 <_ZN3can14checkRxMessageINS_8messages18SensorF_SDO_Req_UpEEEbRK9RxMessage>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d005      	beq.n	8001a5c <_Z15cz_receive_taskPv+0x58>
				handleSDORequestUpload(message);
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	4618      	mov	r0, r3
 8001a56:	f003 fd21 	bl	800549c <_Z22handleSDORequestUploadRK9RxMessage>
 8001a5a:	e7d7      	b.n	8001a0c <_Z15cz_receive_taskPv+0x8>
			} else if(can::checkRxMessage<can::messages::CANZERO_SDO_Req_Down>(message)) {
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	4618      	mov	r0, r3
 8001a62:	f000 f8f9 	bl	8001c58 <_ZN3can14checkRxMessageINS_8messages20SensorF_SDO_Req_DownEEEbRK9RxMessage>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <_Z15cz_receive_taskPv+0x74>
				handleSDORequestDownload(message);
 8001a6c:	f107 030c 	add.w	r3, r7, #12
 8001a70:	4618      	mov	r0, r3
 8001a72:	f002 ff8c 	bl	800498e <_Z24handleSDORequestDownloadRK9RxMessage>
 8001a76:	e7c9      	b.n	8001a0c <_Z15cz_receive_taskPv+0x8>
			} else {
				processRX(message);
 8001a78:	466d      	mov	r5, sp
 8001a7a:	f107 041c 	add.w	r4, r7, #28
 8001a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a82:	6823      	ldr	r3, [r4, #0]
 8001a84:	602b      	str	r3, [r5, #0]
 8001a86:	f107 030c 	add.w	r3, r7, #12
 8001a8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a8c:	f7ff ff1a 	bl	80018c4 <_Z9processRX9RxMessage>
 8001a90:	e7bc      	b.n	8001a0c <_Z15cz_receive_taskPv+0x8>
			}
		}
		else if (message.rxHeader.RTR == CAN_RTR_REMOTE) {
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	2b02      	cmp	r3, #2
 8001a96:	d1b9      	bne.n	8001a0c <_Z15cz_receive_taskPv+0x8>
			printDebug("RTR must not be used!\n");
 8001a98:	f012 fa14 	bl	8013ec4 <vPortEnterCritical>
 8001a9c:	4803      	ldr	r0, [pc, #12]	; (8001aac <_Z15cz_receive_taskPv+0xa8>)
 8001a9e:	f00e fc01 	bl	80102a4 <printf_>
 8001aa2:	f012 fa3f 	bl	8013f24 <vPortExitCritical>
		osMessageQueueGet(czReceiveQueue, (void*) &message, NULL, osWaitForever);
 8001aa6:	e7b1      	b.n	8001a0c <_Z15cz_receive_taskPv+0x8>
 8001aa8:	200007b0 	.word	0x200007b0
 8001aac:	08017210 	.word	0x08017210

08001ab0 <HAL_CAN_RxFifo0MsgPendingCallback>:
		}
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001ab0:	b5b0      	push	{r4, r5, r7, lr}
 8001ab2:	b096      	sub	sp, #88	; 0x58
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001ab8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001abc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f009 fc2c 	bl	800b320 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001ac8:	f107 040c 	add.w	r4, r7, #12
 8001acc:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ad4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ad8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001adc:	2300      	movs	r3, #0
 8001ade:	657b      	str	r3, [r7, #84]	; 0x54
 8001ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ae2:	2b07      	cmp	r3, #7
 8001ae4:	dc0e      	bgt.n	8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001ae6:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001aec:	4413      	add	r3, r2
 8001aee:	7819      	ldrb	r1, [r3, #0]
 8001af0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001af6:	4413      	add	r3, r2
 8001af8:	460a      	mov	r2, r1
 8001afa:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001afe:	3301      	adds	r3, #1
 8001b00:	657b      	str	r3, [r7, #84]	; 0x54
 8001b02:	e7ed      	b.n	8001ae0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8001b06:	6818      	ldr	r0, [r3, #0]
 8001b08:	f107 010c 	add.w	r1, r7, #12
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f00e fede 	bl	80108d0 <osMessageQueuePut>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0

	}
}
 8001b18:	bf00      	nop
 8001b1a:	3758      	adds	r7, #88	; 0x58
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8001b20:	200007b0 	.word	0x200007b0

08001b24 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8001b24:	b5b0      	push	{r4, r5, r7, lr}
 8001b26:	b096      	sub	sp, #88	; 0x58
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8001b2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b30:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001b34:	2101      	movs	r1, #1
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f009 fbf2 	bl	800b320 <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001b3c:	f107 040c 	add.w	r4, r7, #12
 8001b40:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001b44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 8001b50:	2300      	movs	r3, #0
 8001b52:	657b      	str	r3, [r7, #84]	; 0x54
 8001b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b56:	2b07      	cmp	r3, #7
 8001b58:	dc0e      	bgt.n	8001b78 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001b5a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b60:	4413      	add	r3, r2
 8001b62:	7819      	ldrb	r1, [r3, #0]
 8001b64:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	4413      	add	r3, r2
 8001b6c:	460a      	mov	r2, r1
 8001b6e:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 8001b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b72:	3301      	adds	r3, #1
 8001b74:	657b      	str	r3, [r7, #84]	; 0x54
 8001b76:	e7ed      	b.n	8001b54 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	f107 010c 	add.w	r1, r7, #12
 8001b80:	2300      	movs	r3, #0
 8001b82:	2200      	movs	r2, #0
 8001b84:	f00e fea4 	bl	80108d0 <osMessageQueuePut>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0

	}
}
 8001b8c:	bf00      	nop
 8001b8e:	3758      	adds	r7, #88	; 0x58
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bdb0      	pop	{r4, r5, r7, pc}
 8001b94:	200007b0 	.word	0x200007b0

08001b98 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	HAL_CAN_ResetError(hcan);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f009 ff06 	bl	800b9b2 <HAL_CAN_ResetError>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001ba6:	f3ef 8211 	mrs	r2, BASEPRI
 8001baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bae:	f383 8811 	msr	BASEPRI, r3
 8001bb2:	f3bf 8f6f 	isb	sy
 8001bb6:	f3bf 8f4f 	dsb	sy
 8001bba:	60fa      	str	r2, [r7, #12]
 8001bbc:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
	printDebugISR("CAN Errors got reseted!\n");
 8001bc0:	617b      	str	r3, [r7, #20]
 8001bc2:	4806      	ldr	r0, [pc, #24]	; (8001bdc <HAL_CAN_ErrorCallback+0x44>)
 8001bc4:	f00e fb6e 	bl	80102a4 <printf_>
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001bd2:	bf00      	nop
}
 8001bd4:	bf00      	nop
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	08017228 	.word	0x08017228

08001be0 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	//LED_RGB_Write(100, 0, 0);
}
 8001be8:	bf00      	nop
 8001bea:	370c      	adds	r7, #12
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <_ZN3can14checkRxMessageINS_8messages14SensorF_BTL_RXEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d109      	bne.n	8001c18 <_ZN3can14checkRxMessageINS_8messages14SensorF_BTL_RXEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f240 7281 	movw	r2, #1921	; 0x781
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	bf0c      	ite	eq
 8001c10:	2301      	moveq	r3, #1
 8001c12:	2300      	movne	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	e000      	b.n	8001c1a <_ZN3can14checkRxMessageINS_8messages14SensorF_BTL_RXEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001c18:	2300      	movs	r3, #0
    }
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <_ZN3can14checkRxMessageINS_8messages18SensorF_SDO_Req_UpEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d109      	bne.n	8001c4a <_ZN3can14checkRxMessageINS_8messages18SensorF_SDO_Req_UpEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f240 52c1 	movw	r2, #1473	; 0x5c1
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	bf0c      	ite	eq
 8001c42:	2301      	moveq	r3, #1
 8001c44:	2300      	movne	r3, #0
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	e000      	b.n	8001c4c <_ZN3can14checkRxMessageINS_8messages18SensorF_SDO_Req_UpEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001c4a:	2300      	movs	r3, #0
    }
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_ZN3can14checkRxMessageINS_8messages20SensorF_SDO_Req_DownEEEbRK9RxMessage>:
    inline bool checkRxMessage(const RxMessage& message) {
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
        if (message.rxHeader.IDE == CAN_ID_STD) {
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d109      	bne.n	8001c7c <_ZN3can14checkRxMessageINS_8messages20SensorF_SDO_Req_DownEEEbRK9RxMessage+0x24>
            return (MESSAGE::isExtendedId == false) && (message.rxHeader.StdId == MESSAGE::id);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f240 6201 	movw	r2, #1537	; 0x601
 8001c70:	4293      	cmp	r3, r2
 8001c72:	bf0c      	ite	eq
 8001c74:	2301      	moveq	r3, #1
 8001c76:	2300      	movne	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	e000      	b.n	8001c7e <_ZN3can14checkRxMessageINS_8messages20SensorF_SDO_Req_DownEEEbRK9RxMessage+0x26>
            return (MESSAGE::isExtendedId == true) && (message.rxHeader.ExtId == MESSAGE::id);
 8001c7c:	2300      	movs	r3, #0
    }
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <_Z41__static_initialization_and_destruction_0ii>:
#include "cz_typedefinitions.hpp"


static const osMessageQueueAttr_t czSendQueueAttr = {"czSendQueue",0,NULL,0,NULL,0};

osMessageQueueId_t czSendQueue = osMessageQueueNew(16, sizeof(TxMessage), &czSendQueueAttr);
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d10c      	bne.n	8001cb6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d107      	bne.n	8001cb6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001ca6:	4a06      	ldr	r2, [pc, #24]	; (8001cc0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001ca8:	2120      	movs	r1, #32
 8001caa:	2010      	movs	r0, #16
 8001cac:	f00e fd9d 	bl	80107ea <osMessageQueueNew>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	4a04      	ldr	r2, [pc, #16]	; (8001cc4 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	08017468 	.word	0x08017468
 8001cc4:	200007b4 	.word	0x200007b4

08001cc8 <_GLOBAL__sub_I_czSendQueue>:
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f7ff ffdb 	bl	8001c8c <_Z41__static_initialization_and_destruction_0ii>
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_Z13cz_send_entryPv>:
#include "FreeRTOS.h"
#include "message_buffer.h"
#include "cmsis_os.h"


void cz_send_entry(void* argv){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08e      	sub	sp, #56	; 0x38
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	TxMessage sendMessage;
 8001ce0:	f107 030c 	add.w	r3, r7, #12
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fa21 	bl	800112c <_ZN9TxMessageC1Ev>
	uint32_t TxMailbox;
	CAN_HandleTypeDef* hcanModule;

	unsigned int frame = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	633b      	str	r3, [r7, #48]	; 0x30
	while(true){
		if(osMessageQueueGet(czSendQueue,&sendMessage,NULL,osWaitForever) != osOK){
 8001cee:	4b53      	ldr	r3, [pc, #332]	; (8001e3c <_Z13cz_send_entryPv+0x164>)
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	f107 010c 	add.w	r1, r7, #12
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f00e fe48 	bl	8010990 <osMessageQueueGet>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	bf14      	ite	ne
 8001d06:	2301      	movne	r3, #1
 8001d08:	2300      	moveq	r3, #0
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <_Z13cz_send_entryPv+0x3c>
			Error_Handler();
 8001d10:	f007 fe16 	bl	8009940 <Error_Handler>
		}

		//uint32_t* buf = reinterpret_cast<uint32_t*>(&(sendMessage.txBuf[0]));
		//printf("%u\n", *buf);

		if(sendMessage.txHeader.DLC>8){
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d901      	bls.n	8001d1e <_Z13cz_send_entryPv+0x46>
			Error_Handler();
 8001d1a:	f007 fe11 	bl	8009940 <Error_Handler>
		}

		// Extract the bus flag from the RTR field and then clear the flag bits
		can::CAN_BusTypeDef canBus = sendMessage.txHeader.RTR & can::buses::mask;
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	0c1b      	lsrs	r3, r3, #16
 8001d22:	041b      	lsls	r3, r3, #16
 8001d24:	62fb      	str	r3, [r7, #44]	; 0x2c
		sendMessage.txHeader.RTR &= ~(can::buses::mask);
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	61bb      	str	r3, [r7, #24]

		if(canBus == can::buses::BUS1) {
 8001d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d32:	d102      	bne.n	8001d3a <_Z13cz_send_entryPv+0x62>
			hcanModule = &hcan1;
 8001d34:	4b42      	ldr	r3, [pc, #264]	; (8001e40 <_Z13cz_send_entryPv+0x168>)
 8001d36:	637b      	str	r3, [r7, #52]	; 0x34
 8001d38:	e010      	b.n	8001d5c <_Z13cz_send_entryPv+0x84>
		} else if(canBus == can::buses::BUS2) {
 8001d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d40:	d102      	bne.n	8001d48 <_Z13cz_send_entryPv+0x70>
			hcanModule = &hcan2;
 8001d42:	4b40      	ldr	r3, [pc, #256]	; (8001e44 <_Z13cz_send_entryPv+0x16c>)
 8001d44:	637b      	str	r3, [r7, #52]	; 0x34
 8001d46:	e009      	b.n	8001d5c <_Z13cz_send_entryPv+0x84>
		} else {
			// Decide on the ID
			if (sendMessage.txHeader.StdId % 2 == 0){
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d102      	bne.n	8001d58 <_Z13cz_send_entryPv+0x80>
				hcanModule = &hcan1;
 8001d52:	4b3b      	ldr	r3, [pc, #236]	; (8001e40 <_Z13cz_send_entryPv+0x168>)
 8001d54:	637b      	str	r3, [r7, #52]	; 0x34
 8001d56:	e001      	b.n	8001d5c <_Z13cz_send_entryPv+0x84>
			} else{
				hcanModule = &hcan2;
 8001d58:	4b3a      	ldr	r3, [pc, #232]	; (8001e44 <_Z13cz_send_entryPv+0x16c>)
 8001d5a:	637b      	str	r3, [r7, #52]	; 0x34
			}
		}

		// If there is a mailbox free on the requested CAN, just send the message
		if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001d5c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d5e:	f009 faaa 	bl	800b2b6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	bf14      	ite	ne
 8001d68:	2301      	movne	r3, #1
 8001d6a:	2300      	moveq	r3, #0
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d016      	beq.n	8001da0 <_Z13cz_send_entryPv+0xc8>
			if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001d72:	f107 0008 	add.w	r0, r7, #8
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	f103 0218 	add.w	r2, r3, #24
 8001d7e:	f107 010c 	add.w	r1, r7, #12
 8001d82:	4603      	mov	r3, r0
 8001d84:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001d86:	f009 f9bb 	bl	800b100 <HAL_CAN_AddTxMessage>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	bf14      	ite	ne
 8001d90:	2301      	movne	r3, #1
 8001d92:	2300      	moveq	r3, #0
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d04b      	beq.n	8001e32 <_Z13cz_send_entryPv+0x15a>
				/* Transmission request Error */
				Error_Handler();
 8001d9a:	f007 fdd1 	bl	8009940 <Error_Handler>
 8001d9e:	e048      	b.n	8001e32 <_Z13cz_send_entryPv+0x15a>
			}
		} else {	// No mailbox free on requested CAN bus
			// Count delayed messages
			if(hcanModule == &hcan1) {
 8001da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da2:	4a27      	ldr	r2, [pc, #156]	; (8001e40 <_Z13cz_send_entryPv+0x168>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d105      	bne.n	8001db4 <_Z13cz_send_entryPv+0xdc>
				OD_CAN1_DelayedTxMessages++;
 8001da8:	4b27      	ldr	r3, [pc, #156]	; (8001e48 <_Z13cz_send_entryPv+0x170>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	3301      	adds	r3, #1
 8001dae:	4a26      	ldr	r2, [pc, #152]	; (8001e48 <_Z13cz_send_entryPv+0x170>)
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e004      	b.n	8001dbe <_Z13cz_send_entryPv+0xe6>
				//printDebug("WARNING :: can1 tx mailbox overflow.\n")
			} else {
				OD_CAN2_DelayedTxMessages++;
 8001db4:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <_Z13cz_send_entryPv+0x174>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	3301      	adds	r3, #1
 8001dba:	4a24      	ldr	r2, [pc, #144]	; (8001e4c <_Z13cz_send_entryPv+0x174>)
 8001dbc:	6013      	str	r3, [r2, #0]
				//printDebug("WARNING :: can2 tx mailbox overflow.\n")
			}

			osDelay(1);		// Use smallest delay possible
 8001dbe:	2001      	movs	r0, #1
 8001dc0:	f00e fbea 	bl	8010598 <osDelay>

			// Try again
			if(HAL_CAN_GetTxMailboxesFreeLevel(hcanModule) > 0) {
 8001dc4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001dc6:	f009 fa76 	bl	800b2b6 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bf14      	ite	ne
 8001dd0:	2301      	movne	r3, #1
 8001dd2:	2300      	moveq	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d016      	beq.n	8001e08 <_Z13cz_send_entryPv+0x130>
				if (HAL_CAN_AddTxMessage(hcanModule, &sendMessage.txHeader, sendMessage.txBuf, &TxMailbox) != HAL_OK) {
 8001dda:	f107 0008 	add.w	r0, r7, #8
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	f103 0218 	add.w	r2, r3, #24
 8001de6:	f107 010c 	add.w	r1, r7, #12
 8001dea:	4603      	mov	r3, r0
 8001dec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001dee:	f009 f987 	bl	800b100 <HAL_CAN_AddTxMessage>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bf14      	ite	ne
 8001df8:	2301      	movne	r3, #1
 8001dfa:	2300      	moveq	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d017      	beq.n	8001e32 <_Z13cz_send_entryPv+0x15a>
					/* Transmission request Error */
					canzero::handle_trasmission_request_error();
 8001e02:	f000 fa7b 	bl	80022fc <_ZN7canzero32handle_trasmission_request_errorEv>
 8001e06:	e014      	b.n	8001e32 <_Z13cz_send_entryPv+0x15a>
				}
			} else {
				// Discard message
				if(hcanModule == &hcan1) {
 8001e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e0a:	4a0d      	ldr	r2, [pc, #52]	; (8001e40 <_Z13cz_send_entryPv+0x168>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d108      	bne.n	8001e22 <_Z13cz_send_entryPv+0x14a>
					OD_CAN1_DiscardedTxMessages++;
 8001e10:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <_Z13cz_send_entryPv+0x178>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	3301      	adds	r3, #1
 8001e16:	4a0e      	ldr	r2, [pc, #56]	; (8001e50 <_Z13cz_send_entryPv+0x178>)
 8001e18:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan1);
 8001e1a:	4809      	ldr	r0, [pc, #36]	; (8001e40 <_Z13cz_send_entryPv+0x168>)
 8001e1c:	f000 fa64 	bl	80022e8 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
 8001e20:	e007      	b.n	8001e32 <_Z13cz_send_entryPv+0x15a>
				} else {
					OD_CAN2_DiscardedTxMessages++;
 8001e22:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <_Z13cz_send_entryPv+0x17c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	3301      	adds	r3, #1
 8001e28:	4a0a      	ldr	r2, [pc, #40]	; (8001e54 <_Z13cz_send_entryPv+0x17c>)
 8001e2a:	6013      	str	r3, [r2, #0]
					canzero::handle_txmailbox_overflow(&hcan2);
 8001e2c:	4805      	ldr	r0, [pc, #20]	; (8001e44 <_Z13cz_send_entryPv+0x16c>)
 8001e2e:	f000 fa5b 	bl	80022e8 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>
				}
			}
		}
		frame ++;
 8001e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e34:	3301      	adds	r3, #1
 8001e36:	633b      	str	r3, [r7, #48]	; 0x30
	}
 8001e38:	e759      	b.n	8001cee <_Z13cz_send_entryPv+0x16>
 8001e3a:	bf00      	nop
 8001e3c:	200007b4 	.word	0x200007b4
 8001e40:	20000d4c 	.word	0x20000d4c
 8001e44:	20000d74 	.word	0x20000d74
 8001e48:	2000080c 	.word	0x2000080c
 8001e4c:	20000824 	.word	0x20000824
 8001e50:	20000804 	.word	0x20000804
 8001e54:	2000081c 	.word	0x2000081c

08001e58 <_ZN7canzero4initEv>:
static const osMutexAttr_t nodeStateMutexAttr = {"nodeStateMutex",(osMutexPrioInherit|osMutexRobust),NULL,0,};
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);

static cz_status nodeStatus;

void canzero::init(){
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08c      	sub	sp, #48	; 0x30
 8001e5c:	af00      	add	r7, sp, #0
	setStatus(cz_status::reset);
 8001e5e:	2080      	movs	r0, #128	; 0x80
 8001e60:	f000 f922 	bl	80020a8 <_ZN7canzero9setStatusE9cz_status>
	static_assert(can::filters::num_std <= 28, "Number of CAN Std-ID filter generated by dbc2cpp exceeds 28!");
	static_assert(can::filters::num_ext * 2 + can::filters::num_std <= 28, "Too many CAN filters configured by dbc2cpp!");
	static_assert(can::filters::num_ext != 0 || can::filters::num_std != 0, "No CAN filters were generated by dbc2cpp!");

	// Configure filters in 32-bit mode to receive Extended IDs (29-bit)
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001e64:	2300      	movs	r3, #0
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	dc4f      	bgt.n	8001f0e <_ZN7canzero4initEv+0xb6>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
		sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001e72:	2301      	movs	r3, #1
 8001e74:	61fb      	str	r3, [r7, #28]

		// A 29-bit ID consists of the 11-bit Base-ID (MSB) and 18-bit Sub-ID (LSB)
		// So STID[10:0] == EXID[28:18]

		// ID high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: id_ext[28:13]
		sFilterConfig.FilterIdHigh = ((can::filters::id_ext[i] & 0x1FFFE000ul) >> 13);
 8001e76:	4b86      	ldr	r3, [pc, #536]	; (8002090 <_ZN7canzero4initEv+0x238>)
 8001e78:	0b5b      	lsrs	r3, r3, #13
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	603b      	str	r3, [r7, #0]

		// ID low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: id[23:11] 1 0 0
		sFilterConfig.FilterIdLow = ((can::filters::id_ext[i] & 0x1FFF) << 3) | 4;
 8001e7e:	4b84      	ldr	r3, [pc, #528]	; (8002090 <_ZN7canzero4initEv+0x238>)
 8001e80:	00db      	lsls	r3, r3, #3
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	f043 0304 	orr.w	r3, r3, #4
 8001e88:	607b      	str	r3, [r7, #4]

		// Mask high consists of: STID[10:3] STID[2:0] EXID[17:13]  =>  so for us: mask_ext[28:13]
		sFilterConfig.FilterMaskIdHigh = ((can::filters::mask_ext[i] & 0x1FFFE000ul) >> 13);
 8001e8a:	4b82      	ldr	r3, [pc, #520]	; (8002094 <_ZN7canzero4initEv+0x23c>)
 8001e8c:	0b5b      	lsrs	r3, r3, #13
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	60bb      	str	r3, [r7, #8]

		// Mask low consists of: EXID[12:5] EXID[4:0] IDE RTR 0  =>  so for us: mask[23:11] 1 1 0
		sFilterConfig.FilterMaskIdLow = ((can::filters::mask_ext[i] & 0x1FFF) << 3) | 6;
 8001e92:	4b80      	ldr	r3, [pc, #512]	; (8002094 <_ZN7canzero4initEv+0x23c>)
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	f043 0306 	orr.w	r3, r3, #6
 8001e9c:	60fb      	str	r3, [r7, #12]


		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8001e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea0:	0fda      	lsrs	r2, r3, #31
 8001ea2:	4413      	add	r3, r2
 8001ea4:	105b      	asrs	r3, r3, #1
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d102      	bne.n	8001eb4 <_ZN7canzero4initEv+0x5c>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	e001      	b.n	8001eb8 <_ZN7canzero4initEv+0x60>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8001ebc:	230e      	movs	r3, #14
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		sFilterConfig.FilterBank = i;
 8001ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec2:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001ec4:	463b      	mov	r3, r7
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4873      	ldr	r0, [pc, #460]	; (8002098 <_ZN7canzero4initEv+0x240>)
 8001eca:	f008 fff5 	bl	800aeb8 <HAL_CAN_ConfigFilter>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	bf14      	ite	ne
 8001ed4:	2301      	movne	r3, #1
 8001ed6:	2300      	moveq	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <_ZN7canzero4initEv+0x8a>
			Error_Handler(); /* Filter configuration Error */
 8001ede:	f007 fd2f 	bl	8009940 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + i;
 8001ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ee4:	330e      	adds	r3, #14
 8001ee6:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001ee8:	463b      	mov	r3, r7
 8001eea:	4619      	mov	r1, r3
 8001eec:	486b      	ldr	r0, [pc, #428]	; (800209c <_ZN7canzero4initEv+0x244>)
 8001eee:	f008 ffe3 	bl	800aeb8 <HAL_CAN_ConfigFilter>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	bf14      	ite	ne
 8001ef8:	2301      	movne	r3, #1
 8001efa:	2300      	moveq	r3, #0
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <_ZN7canzero4initEv+0xae>
			Error_Handler(); /* Filter configuration Error */
 8001f02:	f007 fd1d 	bl	8009940 <Error_Handler>
	for(int i = 0; i < can::filters::num_ext; i++) {
 8001f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f08:	3301      	adds	r3, #1
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f0c:	e7ac      	b.n	8001e68 <_ZN7canzero4initEv+0x10>
		}
	}


	// Configure filters in 16-bit mode to receive Standard IDs (11-bit)
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8001f0e:	2300      	movs	r3, #0
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f14:	2b19      	cmp	r3, #25
 8001f16:	dc6a      	bgt.n	8001fee <_ZN7canzero4initEv+0x196>
		CAN_FilterTypeDef sFilterConfig;
		sFilterConfig.FilterBank = can::filters::num_ext + i / 2;	// Each STM32 filterbank has two filters in 16-bit mode, so divide by 2.
 8001f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f1a:	0fda      	lsrs	r2, r3, #31
 8001f1c:	4413      	add	r3, r2
 8001f1e:	105b      	asrs	r3, r3, #1
 8001f20:	3301      	adds	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
		sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001f24:	2300      	movs	r3, #0
 8001f26:	61bb      	str	r3, [r7, #24]

		// All values are shifted by 5 bits, because the internal layout is: STDID[10:0], RTR, IDE, EXID[17:15] for a 16-bit filter.
		sFilterConfig.FilterIdHigh = can::filters::id_std[i] << 5;
 8001f28:	4a5d      	ldr	r2, [pc, #372]	; (80020a0 <_ZN7canzero4initEv+0x248>)
 8001f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f30:	015b      	lsls	r3, r3, #5
 8001f32:	603b      	str	r3, [r7, #0]
		sFilterConfig.FilterMaskIdHigh = (can::filters::mask_std[i] << 5) | 0x18;  // Set bit 3 and 4, so no remote frame and 11-bit ID.
 8001f34:	4a5b      	ldr	r2, [pc, #364]	; (80020a4 <_ZN7canzero4initEv+0x24c>)
 8001f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3c:	015b      	lsls	r3, r3, #5
 8001f3e:	f043 0318 	orr.w	r3, r3, #24
 8001f42:	60bb      	str	r3, [r7, #8]

		// If number of filters is odd, configure last filter in 32-bit mode.
		if (i == can::filters::num_std - 1) {
 8001f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f46:	2b19      	cmp	r3, #25
 8001f48:	d106      	bne.n	8001f58 <_ZN7canzero4initEv+0x100>
			// Odd number of filters and last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = 0;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = 0x6; // Set bit 1 and 2, so ignore remote frames and only receive standard-ID frames
 8001f52:	2306      	movs	r3, #6
 8001f54:	60fb      	str	r3, [r7, #12]
 8001f56:	e011      	b.n	8001f7c <_ZN7canzero4initEv+0x124>
		} else {
			// Even number of filters or odd number and not last filter.
			sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]

			sFilterConfig.FilterIdLow = can::filters::id_std[i+1] << 5;
 8001f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5e:	3301      	adds	r3, #1
 8001f60:	4a4f      	ldr	r2, [pc, #316]	; (80020a0 <_ZN7canzero4initEv+0x248>)
 8001f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f66:	015b      	lsls	r3, r3, #5
 8001f68:	607b      	str	r3, [r7, #4]
			sFilterConfig.FilterMaskIdLow = (can::filters::mask_std[i+1] << 5) | 0x18;  // Set bit 3 and 4, so only receive standard-ID frames and ignore remote frames
 8001f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	4a4d      	ldr	r2, [pc, #308]	; (80020a4 <_ZN7canzero4initEv+0x24c>)
 8001f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f74:	015b      	lsls	r3, r3, #5
 8001f76:	f043 0318 	orr.w	r3, r3, #24
 8001f7a:	60fb      	str	r3, [r7, #12]
		}

		// Alternate between receive FIFO0 and FIFO1 to fill both buffers.
		if ((i / 2) % 2 == 0) {
 8001f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f7e:	0fda      	lsrs	r2, r3, #31
 8001f80:	4413      	add	r3, r2
 8001f82:	105b      	asrs	r3, r3, #1
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <_ZN7canzero4initEv+0x13a>
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	e001      	b.n	8001f96 <_ZN7canzero4initEv+0x13e>
		} else {
			sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001f92:	2301      	movs	r3, #1
 8001f94:	613b      	str	r3, [r7, #16]
		}

		sFilterConfig.FilterActivation = ENABLE;
 8001f96:	2301      	movs	r3, #1
 8001f98:	623b      	str	r3, [r7, #32]
		sFilterConfig.SlaveStartFilterBank = 14;	// Filter 0-13 for CAN1, 14-27 for CAN2.
 8001f9a:	230e      	movs	r3, #14
 8001f9c:	627b      	str	r3, [r7, #36]	; 0x24

		// Configure the filter for both CAN1 and CAN2
		if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001f9e:	463b      	mov	r3, r7
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	483d      	ldr	r0, [pc, #244]	; (8002098 <_ZN7canzero4initEv+0x240>)
 8001fa4:	f008 ff88 	bl	800aeb8 <HAL_CAN_ConfigFilter>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	bf14      	ite	ne
 8001fae:	2301      	movne	r3, #1
 8001fb0:	2300      	moveq	r3, #0
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <_ZN7canzero4initEv+0x164>
			Error_Handler(); /* Filter configuration Error */
 8001fb8:	f007 fcc2 	bl	8009940 <Error_Handler>
		}

		sFilterConfig.FilterBank = 14 + can::filters::num_ext + i / 2;
 8001fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fbe:	0fda      	lsrs	r2, r3, #31
 8001fc0:	4413      	add	r3, r2
 8001fc2:	105b      	asrs	r3, r3, #1
 8001fc4:	330f      	adds	r3, #15
 8001fc6:	617b      	str	r3, [r7, #20]
		if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8001fc8:	463b      	mov	r3, r7
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4833      	ldr	r0, [pc, #204]	; (800209c <_ZN7canzero4initEv+0x244>)
 8001fce:	f008 ff73 	bl	800aeb8 <HAL_CAN_ConfigFilter>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	bf14      	ite	ne
 8001fd8:	2301      	movne	r3, #1
 8001fda:	2300      	moveq	r3, #0
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <_ZN7canzero4initEv+0x18e>
			Error_Handler(); /* Filter configuration Error */
 8001fe2:	f007 fcad 	bl	8009940 <Error_Handler>
	for(int i = 0; i < can::filters::num_std; i+=2) {
 8001fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe8:	3302      	adds	r3, #2
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fec:	e791      	b.n	8001f12 <_ZN7canzero4initEv+0xba>
		}
	}

	if (HAL_CAN_Start(&hcan1) != HAL_OK || HAL_CAN_Start(&hcan2) != HAL_OK) {
 8001fee:	482a      	ldr	r0, [pc, #168]	; (8002098 <_ZN7canzero4initEv+0x240>)
 8001ff0:	f009 f842 	bl	800b078 <HAL_CAN_Start>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d105      	bne.n	8002006 <_ZN7canzero4initEv+0x1ae>
 8001ffa:	4828      	ldr	r0, [pc, #160]	; (800209c <_ZN7canzero4initEv+0x244>)
 8001ffc:	f009 f83c 	bl	800b078 <HAL_CAN_Start>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <_ZN7canzero4initEv+0x1b2>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <_ZN7canzero4initEv+0x1b4>
 800200a:	2300      	movs	r3, #0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <_ZN7canzero4initEv+0x1bc>
		Error_Handler(); /* Start Error */
 8002010:	f007 fc96 	bl	8009940 <Error_Handler>
	}
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8002014:	2102      	movs	r1, #2
 8002016:	4820      	ldr	r0, [pc, #128]	; (8002098 <_ZN7canzero4initEv+0x240>)
 8002018:	f009 fa94 	bl	800b544 <HAL_CAN_ActivateNotification>
 800201c:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10e      	bne.n	8002040 <_ZN7canzero4initEv+0x1e8>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 8002022:	2110      	movs	r1, #16
 8002024:	481c      	ldr	r0, [pc, #112]	; (8002098 <_ZN7canzero4initEv+0x240>)
 8002026:	f009 fa8d 	bl	800b544 <HAL_CAN_ActivateNotification>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d107      	bne.n	8002040 <_ZN7canzero4initEv+0x1e8>
			|| HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8002030:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002034:	4818      	ldr	r0, [pc, #96]	; (8002098 <_ZN7canzero4initEv+0x240>)
 8002036:	f009 fa85 	bl	800b544 <HAL_CAN_ActivateNotification>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <_ZN7canzero4initEv+0x1ec>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <_ZN7canzero4initEv+0x1ee>
 8002044:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <_ZN7canzero4initEv+0x1f6>
		Error_Handler();
 800204a:	f007 fc79 	bl	8009940 <Error_Handler>
	}

	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 800204e:	2102      	movs	r1, #2
 8002050:	4812      	ldr	r0, [pc, #72]	; (800209c <_ZN7canzero4initEv+0x244>)
 8002052:	f009 fa77 	bl	800b544 <HAL_CAN_ActivateNotification>
 8002056:	4603      	mov	r3, r0
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 8002058:	2b00      	cmp	r3, #0
 800205a:	d10e      	bne.n	800207a <_ZN7canzero4initEv+0x222>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING)!= HAL_OK
 800205c:	2110      	movs	r1, #16
 800205e:	480f      	ldr	r0, [pc, #60]	; (800209c <_ZN7canzero4initEv+0x244>)
 8002060:	f009 fa70 	bl	800b544 <HAL_CAN_ActivateNotification>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d107      	bne.n	800207a <_ZN7canzero4initEv+0x222>
			|| HAL_CAN_ActivateNotification(&hcan2, CAN_IT_ERROR_PASSIVE)!=HAL_OK) {
 800206a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800206e:	480b      	ldr	r0, [pc, #44]	; (800209c <_ZN7canzero4initEv+0x244>)
 8002070:	f009 fa68 	bl	800b544 <HAL_CAN_ActivateNotification>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <_ZN7canzero4initEv+0x226>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <_ZN7canzero4initEv+0x228>
 800207e:	2300      	movs	r3, #0
	if (HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING)!= HAL_OK
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <_ZN7canzero4initEv+0x230>
		Error_Handler();
 8002084:	f007 fc5c 	bl	8009940 <Error_Handler>
	}
}
 8002088:	bf00      	nop
 800208a:	3730      	adds	r7, #48	; 0x30
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	01109212 	.word	0x01109212
 8002094:	01109213 	.word	0x01109213
 8002098:	20000d4c 	.word	0x20000d4c
 800209c:	20000d74 	.word	0x20000d74
 80020a0:	080174e8 	.word	0x080174e8
 80020a4:	08017480 	.word	0x08017480

080020a8 <_ZN7canzero9setStatusE9cz_status>:

void canzero::setStatus(cz_status new_status){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
	osMutexAcquire(nodeStateMutex, osWaitForever);
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <_ZN7canzero9setStatusE9cz_status+0x30>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f04f 31ff 	mov.w	r1, #4294967295
 80020ba:	4618      	mov	r0, r3
 80020bc:	f00e fb0d 	bl	80106da <osMutexAcquire>
	nodeStatus = new_status;
 80020c0:	4a06      	ldr	r2, [pc, #24]	; (80020dc <_ZN7canzero9setStatusE9cz_status+0x34>)
 80020c2:	79fb      	ldrb	r3, [r7, #7]
 80020c4:	7013      	strb	r3, [r2, #0]
	osMutexRelease(nodeStateMutex);
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <_ZN7canzero9setStatusE9cz_status+0x30>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f00e fb50 	bl	8010770 <osMutexRelease>
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	200007b8 	.word	0x200007b8
 80020dc:	200007bc 	.word	0x200007bc

080020e0 <_ZN7canzero9getStatusEv>:


cz_status canzero::getStatus(){
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
	osMutexAcquire(nodeStateMutex, osWaitForever);
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <_ZN7canzero9getStatusEv+0x30>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f04f 31ff 	mov.w	r1, #4294967295
 80020ee:	4618      	mov	r0, r3
 80020f0:	f00e faf3 	bl	80106da <osMutexAcquire>
	cz_status returnValue = (cz_status) nodeStatus;
 80020f4:	4b07      	ldr	r3, [pc, #28]	; (8002114 <_ZN7canzero9getStatusEv+0x34>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	71fb      	strb	r3, [r7, #7]
	osMutexRelease(nodeStateMutex);
 80020fa:	4b05      	ldr	r3, [pc, #20]	; (8002110 <_ZN7canzero9getStatusEv+0x30>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4618      	mov	r0, r3
 8002100:	f00e fb36 	bl	8010770 <osMutexRelease>
	return returnValue;
 8002104:	79fb      	ldrb	r3, [r7, #7]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200007b8 	.word	0x200007b8
 8002114:	200007bc 	.word	0x200007bc

08002118 <_Z41__static_initialization_and_destruction_0ii>:
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b01      	cmp	r3, #1
 8002126:	d10a      	bne.n	800213e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800212e:	4293      	cmp	r3, r2
 8002130:	d105      	bne.n	800213e <_Z41__static_initialization_and_destruction_0ii+0x26>
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);
 8002132:	4805      	ldr	r0, [pc, #20]	; (8002148 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8002134:	f00e fa4b 	bl	80105ce <osMutexNew>
 8002138:	4603      	mov	r3, r0
 800213a:	4a04      	ldr	r2, [pc, #16]	; (800214c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800213c:	6013      	str	r3, [r2, #0]
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	08017550 	.word	0x08017550
 800214c:	200007b8 	.word	0x200007b8

08002150 <_GLOBAL__sub_I__ZN7canzero4initEv>:
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
 8002154:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002158:	2001      	movs	r0, #1
 800215a:	f7ff ffdd 	bl	8002118 <_Z41__static_initialization_and_destruction_0ii>
 800215e:	bd80      	pop	{r7, pc}

08002160 <canzero_start>:

#ifdef __cplusplus
extern "C" {
#endif

void canzero_start(void *argv) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b090      	sub	sp, #64	; 0x40
 8002164:	af02      	add	r7, sp, #8
 8002166:	6078      	str	r0, [r7, #4]
	canzero::init();
 8002168:	f7ff fe76 	bl	8001e58 <_ZN7canzero4initEv>

	TaskHandle_t sendTaskHandle = nullptr;
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]
	BaseType_t sendStatus = xTaskCreate(cz_send_entry, "cz_send", 256, NULL,
 8002170:	f107 031c 	add.w	r3, r7, #28
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	2320      	movs	r3, #32
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2300      	movs	r3, #0
 800217c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002180:	4942      	ldr	r1, [pc, #264]	; (800228c <canzero_start+0x12c>)
 8002182:	4843      	ldr	r0, [pc, #268]	; (8002290 <canzero_start+0x130>)
 8002184:	f010 f8ad 	bl	80122e2 <xTaskCreate>
 8002188:	6378      	str	r0, [r7, #52]	; 0x34
			osPriorityAboveNormal, &sendTaskHandle);
	if (sendStatus != pdPASS) {
 800218a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218c:	2b01      	cmp	r3, #1
 800218e:	d006      	beq.n	800219e <canzero_start+0x3e>
		printDebug("Failed to start canzero send task");
 8002190:	f011 fe98 	bl	8013ec4 <vPortEnterCritical>
 8002194:	483f      	ldr	r0, [pc, #252]	; (8002294 <canzero_start+0x134>)
 8002196:	f00e f885 	bl	80102a4 <printf_>
 800219a:	f011 fec3 	bl	8013f24 <vPortExitCritical>
	}

	TaskHandle_t recvTaskHandle = nullptr;
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
	BaseType_t recvStatus = xTaskCreate(cz_receive_task, "cz_receive", 512, NULL,
 80021a2:	f107 0318 	add.w	r3, r7, #24
 80021a6:	9301      	str	r3, [sp, #4]
 80021a8:	2318      	movs	r3, #24
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2300      	movs	r3, #0
 80021ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021b2:	4939      	ldr	r1, [pc, #228]	; (8002298 <canzero_start+0x138>)
 80021b4:	4839      	ldr	r0, [pc, #228]	; (800229c <canzero_start+0x13c>)
 80021b6:	f010 f894 	bl	80122e2 <xTaskCreate>
 80021ba:	6338      	str	r0, [r7, #48]	; 0x30
			osPriorityNormal, &recvTaskHandle);
	if (recvStatus != pdPASS) {
 80021bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d006      	beq.n	80021d0 <canzero_start+0x70>
		printDebug("Failed to start canzero receive task");
 80021c2:	f011 fe7f 	bl	8013ec4 <vPortEnterCritical>
 80021c6:	4836      	ldr	r0, [pc, #216]	; (80022a0 <canzero_start+0x140>)
 80021c8:	f00e f86c 	bl	80102a4 <printf_>
 80021cc:	f011 feaa 	bl	8013f24 <vPortExitCritical>
	}
	TaskHandle_t heartbeatConsumerTaskHandle = nullptr;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
	BaseType_t heartbeatConsumerStatus = xTaskCreate(
 80021d4:	f107 0314 	add.w	r3, r7, #20
 80021d8:	9301      	str	r3, [sp, #4]
 80021da:	2318      	movs	r3, #24
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	2300      	movs	r3, #0
 80021e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021e4:	492f      	ldr	r1, [pc, #188]	; (80022a4 <canzero_start+0x144>)
 80021e6:	4830      	ldr	r0, [pc, #192]	; (80022a8 <canzero_start+0x148>)
 80021e8:	f010 f87b 	bl	80122e2 <xTaskCreate>
 80021ec:	62f8      	str	r0, [r7, #44]	; 0x2c
			canzero::heartbeat::consumer_entry, "cz_ht_con", 256, NULL,
			osPriorityNormal, &heartbeatConsumerTaskHandle);
	if(heartbeatConsumerStatus != pdPASS){
 80021ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d006      	beq.n	8002202 <canzero_start+0xa2>
		printDebug("Failed to start canzero heartbeat consumer task");
 80021f4:	f011 fe66 	bl	8013ec4 <vPortEnterCritical>
 80021f8:	482c      	ldr	r0, [pc, #176]	; (80022ac <canzero_start+0x14c>)
 80021fa:	f00e f853 	bl	80102a4 <printf_>
 80021fe:	f011 fe91 	bl	8013f24 <vPortExitCritical>
	}

	TaskHandle_t heartbeatProducerTaskHandle = nullptr;
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
	BaseType_t heartbeatProducerStatus = xTaskCreate(
 8002206:	f107 0310 	add.w	r3, r7, #16
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	2318      	movs	r3, #24
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	2300      	movs	r3, #0
 8002212:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002216:	4926      	ldr	r1, [pc, #152]	; (80022b0 <canzero_start+0x150>)
 8002218:	4826      	ldr	r0, [pc, #152]	; (80022b4 <canzero_start+0x154>)
 800221a:	f010 f862 	bl	80122e2 <xTaskCreate>
 800221e:	62b8      	str	r0, [r7, #40]	; 0x28
			canzero::heartbeat::producer_entry, "cz_ht_pro", 256, NULL,
			osPriorityNormal, &heartbeatProducerTaskHandle
			);
	if(heartbeatProducerStatus != pdPASS){
 8002220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002222:	2b01      	cmp	r3, #1
 8002224:	d006      	beq.n	8002234 <canzero_start+0xd4>
		printDebug("Failed to start canzero heartbeat producer task");
 8002226:	f011 fe4d 	bl	8013ec4 <vPortEnterCritical>
 800222a:	4823      	ldr	r0, [pc, #140]	; (80022b8 <canzero_start+0x158>)
 800222c:	f00e f83a 	bl	80102a4 <printf_>
 8002230:	f011 fe78 	bl	8013f24 <vPortExitCritical>
	}

	TaskHandle_t emcyTaskHandle = nullptr;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
	BaseType_t emcyStatus = xTaskCreate(canzero::emergency::consumer_entry, "cz_emcy", 256, NULL,
 8002238:	f107 030c 	add.w	r3, r7, #12
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	2328      	movs	r3, #40	; 0x28
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	2300      	movs	r3, #0
 8002244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002248:	491c      	ldr	r1, [pc, #112]	; (80022bc <canzero_start+0x15c>)
 800224a:	481d      	ldr	r0, [pc, #116]	; (80022c0 <canzero_start+0x160>)
 800224c:	f010 f849 	bl	80122e2 <xTaskCreate>
 8002250:	6278      	str	r0, [r7, #36]	; 0x24
			osPriorityHigh, &emcyTaskHandle);
	if(emcyStatus != pdPASS){
 8002252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002254:	2b01      	cmp	r3, #1
 8002256:	d001      	beq.n	800225c <canzero_start+0xfc>
		Error_Handler();
 8002258:	f007 fb72 	bl	8009940 <Error_Handler>
	}

	TaskHandle_t sendOdEntriesHandle = nullptr;
 800225c:	2300      	movs	r3, #0
 800225e:	60bb      	str	r3, [r7, #8]
	BaseType_t sendOdEntriesStatus = xTaskCreate(sendOdEntriesTask, "cz_sendod", 128, NULL,
 8002260:	f107 0308 	add.w	r3, r7, #8
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	2310      	movs	r3, #16
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	2300      	movs	r3, #0
 800226c:	2280      	movs	r2, #128	; 0x80
 800226e:	4915      	ldr	r1, [pc, #84]	; (80022c4 <canzero_start+0x164>)
 8002270:	4815      	ldr	r0, [pc, #84]	; (80022c8 <canzero_start+0x168>)
 8002272:	f010 f836 	bl	80122e2 <xTaskCreate>
 8002276:	6238      	str	r0, [r7, #32]
			osPriorityBelowNormal, &sendOdEntriesHandle);
	if(sendOdEntriesStatus != pdPASS){
 8002278:	6a3b      	ldr	r3, [r7, #32]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d001      	beq.n	8002282 <canzero_start+0x122>
		Error_Handler();
 800227e:	f007 fb5f 	bl	8009940 <Error_Handler>
	}


	while (true) {
		osDelay(osWaitForever);
 8002282:	f04f 30ff 	mov.w	r0, #4294967295
 8002286:	f00e f987 	bl	8010598 <osDelay>
 800228a:	e7fa      	b.n	8002282 <canzero_start+0x122>
 800228c:	08017260 	.word	0x08017260
 8002290:	08001cd9 	.word	0x08001cd9
 8002294:	08017268 	.word	0x08017268
 8002298:	0801728c 	.word	0x0801728c
 800229c:	08001a05 	.word	0x08001a05
 80022a0:	08017298 	.word	0x08017298
 80022a4:	080172c0 	.word	0x080172c0
 80022a8:	080012dd 	.word	0x080012dd
 80022ac:	080172cc 	.word	0x080172cc
 80022b0:	080172fc 	.word	0x080172fc
 80022b4:	08001275 	.word	0x08001275
 80022b8:	08017308 	.word	0x08017308
 80022bc:	08017338 	.word	0x08017338
 80022c0:	080011fd 	.word	0x080011fd
 80022c4:	08017340 	.word	0x08017340
 80022c8:	080071a5 	.word	0x080071a5

080022cc <_ZN7canzero24handle_emergency_warningEv>:
#define CANZERO_STATIC_SRC_CZ_WEAK_CPP_

#include "cz_weak.hpp"


void __attribute__((weak)) canzero::handle_emergency_warning(){
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <_ZN7canzero21handle_heartbeat_missEv>:


void __attribute__((weak)) canzero::handle_heartbeat_miss(){
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <_ZN7canzero25handle_txmailbox_overflowEP19__CAN_HandleTypeDef>:

void __attribute__((weak)) canzero::handle_txmailbox_overflow(CAN_HandleTypeDef* hcan){
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
	//TODO missing default implementation.
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <_ZN7canzero32handle_trasmission_request_errorEv>:

void __attribute__((weak)) canzero::handle_trasmission_request_error(){
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
	//TODO missing default implementation.
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr

0800230a <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
 8002310:	ed87 0a01 	vstr	s0, [r7, #4]
 8002314:	ed97 0a01 	vldr	s0, [r7, #4]
 8002318:	f012 f8f6 	bl	8014508 <roundf>
 800231c:	eef0 7a40 	vmov.f32	s15, s0
 8002320:	eeb0 0a67 	vmov.f32	s0, s15
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <_ZN3can11MessageBaseC1EmhbPKh>:
        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt, const uint8_t rxBuf[8]) noexcept : id{_id}, dlc{_dlc}, isExtendedId{_isExt} {
 800232a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800232e:	b0a2      	sub	sp, #136	; 0x88
 8002330:	af00      	add	r7, sp, #0
 8002332:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8002336:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800233a:	4619      	mov	r1, r3
 800233c:	4613      	mov	r3, r2
 800233e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002342:	460b      	mov	r3, r1
 8002344:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8002348:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800234c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002356:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800235a:	7113      	strb	r3, [r2, #4]
 800235c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002360:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 8002364:	7153      	strb	r3, [r2, #5]
            intel = static_cast<uint32_t>(rxBuf[0]) + (static_cast<uint32_t>(rxBuf[1]) << 8) + (static_cast<uint32_t>(rxBuf[2]) << 16) + (static_cast<uint32_t>(rxBuf[3]) << 24);
 8002366:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	461a      	mov	r2, r3
 800236e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002372:	3301      	adds	r3, #1
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	021b      	lsls	r3, r3, #8
 8002378:	441a      	add	r2, r3
 800237a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800237e:	3302      	adds	r3, #2
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	041b      	lsls	r3, r3, #16
 8002384:	441a      	add	r2, r3
 8002386:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800238a:	3303      	adds	r3, #3
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	061b      	lsls	r3, r3, #24
 8002390:	4413      	add	r3, r2
 8002392:	2200      	movs	r2, #0
 8002394:	461c      	mov	r4, r3
 8002396:	4615      	mov	r5, r2
 8002398:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800239c:	e9c3 4502 	strd	r4, r5, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[4]) << 32) + (static_cast<uint64_t>(rxBuf[5]) << 40);
 80023a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023a4:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80023a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023ac:	3304      	adds	r3, #4
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2200      	movs	r2, #0
 80023b4:	673b      	str	r3, [r7, #112]	; 0x70
 80023b6:	677a      	str	r2, [r7, #116]	; 0x74
 80023b8:	f04f 0000 	mov.w	r0, #0
 80023bc:	f04f 0100 	mov.w	r1, #0
 80023c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023c2:	0019      	movs	r1, r3
 80023c4:	2000      	movs	r0, #0
 80023c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023ca:	3305      	adds	r3, #5
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2200      	movs	r2, #0
 80023d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80023d4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 80023e0:	0233      	lsls	r3, r6, #8
 80023e2:	2200      	movs	r2, #0
 80023e4:	eb10 0802 	adds.w	r8, r0, r2
 80023e8:	eb41 0903 	adc.w	r9, r1, r3
 80023ec:	eb14 0308 	adds.w	r3, r4, r8
 80023f0:	663b      	str	r3, [r7, #96]	; 0x60
 80023f2:	eb45 0309 	adc.w	r3, r5, r9
 80023f6:	667b      	str	r3, [r7, #100]	; 0x64
 80023f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023fc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8002400:	e9c3 1202 	strd	r1, r2, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[6]) << 48) + (static_cast<uint64_t>(rxBuf[7]) << 56);
 8002404:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002408:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800240c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002410:	3306      	adds	r3, #6
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2200      	movs	r2, #0
 8002418:	65bb      	str	r3, [r7, #88]	; 0x58
 800241a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800241c:	f04f 0000 	mov.w	r0, #0
 8002420:	f04f 0100 	mov.w	r1, #0
 8002424:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002426:	0419      	lsls	r1, r3, #16
 8002428:	2000      	movs	r0, #0
 800242a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800242e:	3307      	adds	r3, #7
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2200      	movs	r2, #0
 8002436:	653b      	str	r3, [r7, #80]	; 0x50
 8002438:	657a      	str	r2, [r7, #84]	; 0x54
 800243a:	f04f 0200 	mov.w	r2, #0
 800243e:	f04f 0300 	mov.w	r3, #0
 8002442:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8002444:	0633      	lsls	r3, r6, #24
 8002446:	2200      	movs	r2, #0
 8002448:	eb10 0a02 	adds.w	sl, r0, r2
 800244c:	eb41 0b03 	adc.w	fp, r1, r3
 8002450:	eb14 030a 	adds.w	r3, r4, sl
 8002454:	64bb      	str	r3, [r7, #72]	; 0x48
 8002456:	eb45 030b 	adc.w	r3, r5, fp
 800245a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800245c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002460:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8002464:	e9c3 1202 	strd	r1, r2, [r3, #8]
            motorola = static_cast<uint32_t>(rxBuf[7]) + (static_cast<uint32_t>(rxBuf[6]) << 8) + (static_cast<uint32_t>(rxBuf[5]) << 16) + (static_cast<uint32_t>(rxBuf[4]) << 24);
 8002468:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800246c:	3307      	adds	r3, #7
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	461a      	mov	r2, r3
 8002472:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002476:	3306      	adds	r3, #6
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	441a      	add	r2, r3
 800247e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002482:	3305      	adds	r3, #5
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	441a      	add	r2, r3
 800248a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800248e:	3304      	adds	r3, #4
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	061b      	lsls	r3, r3, #24
 8002494:	4413      	add	r3, r2
 8002496:	2200      	movs	r2, #0
 8002498:	643b      	str	r3, [r7, #64]	; 0x40
 800249a:	647a      	str	r2, [r7, #68]	; 0x44
 800249c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024a0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80024a4:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[3]) << 32) + (static_cast<uint64_t>(rxBuf[2]) << 40);
 80024a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024ac:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80024b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024b4:	3303      	adds	r3, #3
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	2200      	movs	r2, #0
 80024bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80024be:	63fa      	str	r2, [r7, #60]	; 0x3c
 80024c0:	f04f 0000 	mov.w	r0, #0
 80024c4:	f04f 0100 	mov.w	r1, #0
 80024c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024ca:	0019      	movs	r1, r3
 80024cc:	2000      	movs	r0, #0
 80024ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80024d2:	3302      	adds	r3, #2
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2200      	movs	r2, #0
 80024da:	633b      	str	r3, [r7, #48]	; 0x30
 80024dc:	637a      	str	r2, [r7, #52]	; 0x34
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	f04f 0300 	mov.w	r3, #0
 80024e6:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80024e8:	0233      	lsls	r3, r6, #8
 80024ea:	2200      	movs	r2, #0
 80024ec:	1886      	adds	r6, r0, r2
 80024ee:	62be      	str	r6, [r7, #40]	; 0x28
 80024f0:	eb41 0303 	adc.w	r3, r1, r3
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024f6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80024fa:	460b      	mov	r3, r1
 80024fc:	18e3      	adds	r3, r4, r3
 80024fe:	623b      	str	r3, [r7, #32]
 8002500:	4613      	mov	r3, r2
 8002502:	eb45 0303 	adc.w	r3, r5, r3
 8002506:	627b      	str	r3, [r7, #36]	; 0x24
 8002508:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800250c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002510:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[1]) << 48) + (static_cast<uint64_t>(rxBuf[0]) << 56);
 8002514:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002518:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800251c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002520:	3301      	adds	r3, #1
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2200      	movs	r2, #0
 8002528:	61bb      	str	r3, [r7, #24]
 800252a:	61fa      	str	r2, [r7, #28]
 800252c:	f04f 0000 	mov.w	r0, #0
 8002530:	f04f 0100 	mov.w	r1, #0
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	0419      	lsls	r1, r3, #16
 8002538:	2000      	movs	r0, #0
 800253a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2200      	movs	r2, #0
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	617a      	str	r2, [r7, #20]
 8002548:	f04f 0200 	mov.w	r2, #0
 800254c:	f04f 0300 	mov.w	r3, #0
 8002550:	693e      	ldr	r6, [r7, #16]
 8002552:	0633      	lsls	r3, r6, #24
 8002554:	2200      	movs	r2, #0
 8002556:	1886      	adds	r6, r0, r2
 8002558:	60be      	str	r6, [r7, #8]
 800255a:	eb41 0303 	adc.w	r3, r1, r3
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002564:	460b      	mov	r3, r1
 8002566:	18e3      	adds	r3, r4, r3
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	4613      	mov	r3, r2
 800256c:	eb45 0303 	adc.w	r3, r5, r3
 8002570:	607b      	str	r3, [r7, #4]
 8002572:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002576:	e9d7 1200 	ldrd	r1, r2, [r7]
 800257a:	e9c3 1204 	strd	r1, r2, [r3, #16]
        };
 800257e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002582:	4618      	mov	r0, r3
 8002584:	3788      	adds	r7, #136	; 0x88
 8002586:	46bd      	mov	sp, r7
 8002588:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800258c:	4770      	bx	lr

0800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 3;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1, 0x601 };
            constexpr static uint16_t min = static_cast<uint16_t>(0);
            constexpr static uint16_t max = static_cast<uint16_t>(4095);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800258e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002592:	b087      	sub	sp, #28
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
 800259c:	807b      	strh	r3, [r7, #2]
                if (value > max) {
 800259e:	887b      	ldrh	r3, [r7, #2]
 80025a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025a4:	d302      	bcc.n	80025ac <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht+0x1e>
                    value = max;
 80025a6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80025aa:	807b      	strh	r3, [r7, #2]
                }
                if (value < min) {
                    value = min;
                }
                uint16_t rawValue = (value);
 80025ac:	887b      	ldrh	r3, [r7, #2]
 80025ae:	82fb      	strh	r3, [r7, #22]
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b6:	8af9      	ldrh	r1, [r7, #22]
 80025b8:	2000      	movs	r0, #0
 80025ba:	468a      	mov	sl, r1
 80025bc:	4683      	mov	fp, r0
 80025be:	f3ca 040b 	ubfx	r4, sl, #0, #12
 80025c2:	2500      	movs	r5, #0
 80025c4:	ea42 0804 	orr.w	r8, r2, r4
 80025c8:	ea43 0905 	orr.w	r9, r3, r5
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	e9c3 8900 	strd	r8, r9, [r3]
            }
 80025d2:	bf00      	nop
 80025d4:	371c      	adds	r7, #28
 80025d6:	46bd      	mov	sp, r7
 80025d8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80025dc:	4770      	bx	lr

080025de <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80025de:	b480      	push	{r7}
 80025e0:	b085      	sub	sp, #20
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
 80025e6:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	b293      	uxth	r3, r2
 80025f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f4:	81fb      	strh	r3, [r7, #14]
                return value;
 80025f6:	89fb      	ldrh	r3, [r7, #14]
            }
 80025f8:	4618      	mov	r0, r3
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <_ZN3can7signals20SensorF_SDO_RespCode3setERyS2_Rhh>:
        class SensorF_SDO_RespCode {
            public:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 1;
            constexpr static uint32_t ids[] = { 0x581 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8002604:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002608:	b087      	sub	sp, #28
 800260a:	af00      	add	r7, sp, #0
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	607a      	str	r2, [r7, #4]
 8002612:	70fb      	strb	r3, [r7, #3]
                uint8_t rawValue = (value);
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xF000ull;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800261e:	7dfb      	ldrb	r3, [r7, #23]
 8002620:	2200      	movs	r2, #0
 8002622:	4698      	mov	r8, r3
 8002624:	4691      	mov	r9, r2
 8002626:	f04f 0200 	mov.w	r2, #0
 800262a:	f04f 0300 	mov.w	r3, #0
 800262e:	ea4f 3309 	mov.w	r3, r9, lsl #12
 8002632:	ea43 5318 	orr.w	r3, r3, r8, lsr #20
 8002636:	ea4f 3208 	mov.w	r2, r8, lsl #12
 800263a:	b294      	uxth	r4, r2
 800263c:	2500      	movs	r5, #0
 800263e:	ea40 0a04 	orr.w	sl, r0, r4
 8002642:	ea41 0b05 	orr.w	fp, r1, r5
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	e9c3 ab00 	strd	sl, fp, [r3]
            }
 800264c:	bf00      	nop
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002656:	4770      	bx	lr

08002658 <_ZN3can7signals19SensorF_OD_SetReset3getERKyS3_>:
                SensorF_SDO_ID::set(intel, motorola, dlc, 2320);
                uint8_t rawValue = (value);
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
                dlc = 3;
            }
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2320) {
 8002662:	6839      	ldr	r1, [r7, #0]
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7ff ffba 	bl	80025de <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 800266a:	4603      	mov	r3, r0
 800266c:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8002670:	bf14      	ite	ne
 8002672:	2301      	movne	r3, #1
 8002674:	2300      	moveq	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d000      	beq.n	800267e <_ZN3can7signals19SensorF_OD_SetReset3getERKyS3_+0x26>
                    while(1);
 800267c:	e7fe      	b.n	800267c <_ZN3can7signals19SensorF_OD_SetReset3getERKyS3_+0x24>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002684:	f04f 0200 	mov.w	r2, #0
 8002688:	f04f 0300 	mov.w	r3, #0
 800268c:	0c02      	lsrs	r2, r0, #16
 800268e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002692:	0c0b      	lsrs	r3, r1, #16
 8002694:	4613      	mov	r3, r2
 8002696:	73fb      	strb	r3, [r7, #15]
                return value;
 8002698:	7bfb      	ldrb	r3, [r7, #15]
            }
 800269a:	4618      	mov	r0, r3
 800269c:	3710      	adds	r7, #16
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
	...

080026a4 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80026a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026a8:	b088      	sub	sp, #32
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6178      	str	r0, [r7, #20]
 80026ae:	6139      	str	r1, [r7, #16]
 80026b0:	60fa      	str	r2, [r7, #12]
 80026b2:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80026b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80026ba:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002758 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xb4>
 80026be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c6:	dd01      	ble.n	80026cc <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0x28>
                    value = max;
 80026c8:	4b24      	ldr	r3, [pc, #144]	; (800275c <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xb8>)
 80026ca:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80026cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80026d0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002760 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xbc>
 80026d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026dc:	d501      	bpl.n	80026e2 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0x3e>
                    value = min;
 80026de:	4b21      	ldr	r3, [pc, #132]	; (8002764 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xc0>)
 80026e0:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 3329);
 80026e2:	f640 5301 	movw	r3, #3329	; 0xd01
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	6939      	ldr	r1, [r7, #16]
 80026ea:	6978      	ldr	r0, [r7, #20]
 80026ec:	f7ff ff4f 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 80026f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80026f4:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002768 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xc4>
 80026f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026fc:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800276c <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf+0xc8>
 8002700:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002704:	eeb0 0a47 	vmov.f32	s0, s14
 8002708:	f7ff fdff 	bl	800230a <_ZSt5roundf>
 800270c:	eef0 7a40 	vmov.f32	s15, s0
 8002710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002714:	ee17 3a90 	vmov	r3, s15
 8002718:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002720:	8bf9      	ldrh	r1, [r7, #30]
 8002722:	2000      	movs	r0, #0
 8002724:	4688      	mov	r8, r1
 8002726:	4681      	mov	r9, r0
 8002728:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800272c:	6079      	str	r1, [r7, #4]
 800272e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002732:	6039      	str	r1, [r7, #0]
 8002734:	683c      	ldr	r4, [r7, #0]
 8002736:	2500      	movs	r5, #0
 8002738:	ea42 0a04 	orr.w	sl, r2, r4
 800273c:	ea43 0b05 	orr.w	fp, r3, r5
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2204      	movs	r2, #4
 800274a:	701a      	strb	r2, [r3, #0]
            }
 800274c:	bf00      	nop
 800274e:	3720      	adds	r7, #32
 8002750:	46bd      	mov	sp, r7
 8002752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002756:	bf00      	nop
 8002758:	440ad666 	.word	0x440ad666
 800275c:	440ad666 	.word	0x440ad666
 8002760:	c2c80000 	.word	0xc2c80000
 8002764:	c2c80000 	.word	0xc2c80000
 8002768:	42c80000 	.word	0x42c80000
 800276c:	3c23d70a 	.word	0x3c23d70a

08002770 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002774:	b088      	sub	sp, #32
 8002776:	af00      	add	r7, sp, #0
 8002778:	6178      	str	r0, [r7, #20]
 800277a:	6139      	str	r1, [r7, #16]
 800277c:	60fa      	str	r2, [r7, #12]
 800277e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002782:	edd7 7a02 	vldr	s15, [r7, #8]
 8002786:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002824 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xb4>
 800278a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800278e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002792:	dd01      	ble.n	8002798 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0x28>
                    value = max;
 8002794:	4b24      	ldr	r3, [pc, #144]	; (8002828 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xb8>)
 8002796:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002798:	edd7 7a02 	vldr	s15, [r7, #8]
 800279c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800282c <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xbc>
 80027a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a8:	d501      	bpl.n	80027ae <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0x3e>
                    value = min;
 80027aa:	4b21      	ldr	r3, [pc, #132]	; (8002830 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xc0>)
 80027ac:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 3328);
 80027ae:	f44f 6350 	mov.w	r3, #3328	; 0xd00
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	6939      	ldr	r1, [r7, #16]
 80027b6:	6978      	ldr	r0, [r7, #20]
 80027b8:	f7ff fee9 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 80027bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80027c0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002834 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xc4>
 80027c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027c8:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002838 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf+0xc8>
 80027cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80027d0:	eeb0 0a47 	vmov.f32	s0, s14
 80027d4:	f7ff fd99 	bl	800230a <_ZSt5roundf>
 80027d8:	eef0 7a40 	vmov.f32	s15, s0
 80027dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027e0:	ee17 3a90 	vmov	r3, s15
 80027e4:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ec:	8bf9      	ldrh	r1, [r7, #30]
 80027ee:	2000      	movs	r0, #0
 80027f0:	4688      	mov	r8, r1
 80027f2:	4681      	mov	r9, r0
 80027f4:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80027f8:	6079      	str	r1, [r7, #4]
 80027fa:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80027fe:	6039      	str	r1, [r7, #0]
 8002800:	683c      	ldr	r4, [r7, #0]
 8002802:	2500      	movs	r5, #0
 8002804:	ea42 0a04 	orr.w	sl, r2, r4
 8002808:	ea43 0b05 	orr.w	fp, r3, r5
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2204      	movs	r2, #4
 8002816:	701a      	strb	r2, [r3, #0]
            }
 8002818:	bf00      	nop
 800281a:	3720      	adds	r7, #32
 800281c:	46bd      	mov	sp, r7
 800281e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002822:	bf00      	nop
 8002824:	440ad666 	.word	0x440ad666
 8002828:	440ad666 	.word	0x440ad666
 800282c:	c2c80000 	.word	0xc2c80000
 8002830:	c2c80000 	.word	0xc2c80000
 8002834:	42c80000 	.word	0x42c80000
 8002838:	3c23d70a 	.word	0x3c23d70a

0800283c <_ZN3can7signals30SensorF_OD_FiducialLeftCounter3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 3073            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800283c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002840:	b088      	sub	sp, #32
 8002842:	af00      	add	r7, sp, #0
 8002844:	6178      	str	r0, [r7, #20]
 8002846:	6139      	str	r1, [r7, #16]
 8002848:	60fa      	str	r2, [r7, #12]
 800284a:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 3073);
 800284c:	f640 4301 	movw	r3, #3073	; 0xc01
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	6939      	ldr	r1, [r7, #16]
 8002854:	6978      	ldr	r0, [r7, #20]
 8002856:	f7ff fe9a 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800285a:	897b      	ldrh	r3, [r7, #10]
 800285c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002864:	8bf9      	ldrh	r1, [r7, #30]
 8002866:	2000      	movs	r0, #0
 8002868:	4688      	mov	r8, r1
 800286a:	4681      	mov	r9, r0
 800286c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002870:	6079      	str	r1, [r7, #4]
 8002872:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002876:	6039      	str	r1, [r7, #0]
 8002878:	683c      	ldr	r4, [r7, #0]
 800287a:	2500      	movs	r5, #0
 800287c:	ea42 0a04 	orr.w	sl, r2, r4
 8002880:	ea43 0b05 	orr.w	fp, r3, r5
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2204      	movs	r2, #4
 800288e:	701a      	strb	r2, [r3, #0]
            }
 8002890:	bf00      	nop
 8002892:	3720      	adds	r7, #32
 8002894:	46bd      	mov	sp, r7
 8002896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800289a <_ZN3can7signals31SensorF_OD_FiducialRightCounter3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 3072            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800289a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6178      	str	r0, [r7, #20]
 80028a4:	6139      	str	r1, [r7, #16]
 80028a6:	60fa      	str	r2, [r7, #12]
 80028a8:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 3072);
 80028aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	6939      	ldr	r1, [r7, #16]
 80028b2:	6978      	ldr	r0, [r7, #20]
 80028b4:	f7ff fe6b 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80028b8:	897b      	ldrh	r3, [r7, #10]
 80028ba:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c2:	8bf9      	ldrh	r1, [r7, #30]
 80028c4:	2000      	movs	r0, #0
 80028c6:	4688      	mov	r8, r1
 80028c8:	4681      	mov	r9, r0
 80028ca:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80028ce:	6079      	str	r1, [r7, #4]
 80028d0:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80028d4:	6039      	str	r1, [r7, #0]
 80028d6:	683c      	ldr	r4, [r7, #0]
 80028d8:	2500      	movs	r5, #0
 80028da:	ea42 0a04 	orr.w	sl, r2, r4
 80028de:	ea43 0b05 	orr.w	fp, r3, r5
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2204      	movs	r2, #4
 80028ec:	701a      	strb	r2, [r3, #0]
            }
 80028ee:	bf00      	nop
 80028f0:	3720      	adds	r7, #32
 80028f2:	46bd      	mov	sp, r7
 80028f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080028f8 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80028f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028fc:	b088      	sub	sp, #32
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6178      	str	r0, [r7, #20]
 8002902:	6139      	str	r1, [r7, #16]
 8002904:	60fa      	str	r2, [r7, #12]
 8002906:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 800290a:	edd7 7a02 	vldr	s15, [r7, #8]
 800290e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80029ac <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xb4>
 8002912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291a:	dd01      	ble.n	8002920 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0x28>
                    value = max;
 800291c:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xb8>)
 800291e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002920:	edd7 7a02 	vldr	s15, [r7, #8]
 8002924:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80029b4 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xbc>
 8002928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800292c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002930:	d501      	bpl.n	8002936 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0x3e>
                    value = min;
 8002932:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xc0>)
 8002934:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2816);
 8002936:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	6939      	ldr	r1, [r7, #16]
 800293e:	6978      	ldr	r0, [r7, #20]
 8002940:	f7ff fe25 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002944:	edd7 7a02 	vldr	s15, [r7, #8]
 8002948:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80029bc <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xc4>
 800294c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002950:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80029c0 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf+0xc8>
 8002954:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002958:	eeb0 0a47 	vmov.f32	s0, s14
 800295c:	f7ff fcd5 	bl	800230a <_ZSt5roundf>
 8002960:	eef0 7a40 	vmov.f32	s15, s0
 8002964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002968:	ee17 3a90 	vmov	r3, s15
 800296c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002974:	8bf9      	ldrh	r1, [r7, #30]
 8002976:	2000      	movs	r0, #0
 8002978:	4688      	mov	r8, r1
 800297a:	4681      	mov	r9, r0
 800297c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002980:	6079      	str	r1, [r7, #4]
 8002982:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002986:	6039      	str	r1, [r7, #0]
 8002988:	683c      	ldr	r4, [r7, #0]
 800298a:	2500      	movs	r5, #0
 800298c:	ea42 0a04 	orr.w	sl, r2, r4
 8002990:	ea43 0b05 	orr.w	fp, r3, r5
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2204      	movs	r2, #4
 800299e:	701a      	strb	r2, [r3, #0]
            }
 80029a0:	bf00      	nop
 80029a2:	3720      	adds	r7, #32
 80029a4:	46bd      	mov	sp, r7
 80029a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029aa:	bf00      	nop
 80029ac:	440ad666 	.word	0x440ad666
 80029b0:	440ad666 	.word	0x440ad666
 80029b4:	c2c80000 	.word	0xc2c80000
 80029b8:	c2c80000 	.word	0xc2c80000
 80029bc:	42c80000 	.word	0x42c80000
 80029c0:	3c23d70a 	.word	0x3c23d70a

080029c4 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80029c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c8:	b088      	sub	sp, #32
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6178      	str	r0, [r7, #20]
 80029ce:	6139      	str	r1, [r7, #16]
 80029d0:	60fa      	str	r2, [r7, #12]
 80029d2:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80029d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80029da:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002a78 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xb4>
 80029de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e6:	dd01      	ble.n	80029ec <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0x28>
                    value = max;
 80029e8:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xb8>)
 80029ea:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80029ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80029f0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002a80 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xbc>
 80029f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029fc:	d501      	bpl.n	8002a02 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0x3e>
                    value = min;
 80029fe:	4b21      	ldr	r3, [pc, #132]	; (8002a84 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xc0>)
 8002a00:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2611);
 8002a02:	f640 2333 	movw	r3, #2611	; 0xa33
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	6939      	ldr	r1, [r7, #16]
 8002a0a:	6978      	ldr	r0, [r7, #20]
 8002a0c:	f7ff fdbf 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002a10:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a14:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002a88 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xc4>
 8002a18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a1c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002a8c <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf+0xc8>
 8002a20:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002a24:	eeb0 0a47 	vmov.f32	s0, s14
 8002a28:	f7ff fc6f 	bl	800230a <_ZSt5roundf>
 8002a2c:	eef0 7a40 	vmov.f32	s15, s0
 8002a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a34:	ee17 3a90 	vmov	r3, s15
 8002a38:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a40:	8bf9      	ldrh	r1, [r7, #30]
 8002a42:	2000      	movs	r0, #0
 8002a44:	4688      	mov	r8, r1
 8002a46:	4681      	mov	r9, r0
 8002a48:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002a4c:	6079      	str	r1, [r7, #4]
 8002a4e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002a52:	6039      	str	r1, [r7, #0]
 8002a54:	683c      	ldr	r4, [r7, #0]
 8002a56:	2500      	movs	r5, #0
 8002a58:	ea42 0a04 	orr.w	sl, r2, r4
 8002a5c:	ea43 0b05 	orr.w	fp, r3, r5
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2204      	movs	r2, #4
 8002a6a:	701a      	strb	r2, [r3, #0]
            }
 8002a6c:	bf00      	nop
 8002a6e:	3720      	adds	r7, #32
 8002a70:	46bd      	mov	sp, r7
 8002a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a76:	bf00      	nop
 8002a78:	440ad666 	.word	0x440ad666
 8002a7c:	440ad666 	.word	0x440ad666
 8002a80:	c2c80000 	.word	0xc2c80000
 8002a84:	c2c80000 	.word	0xc2c80000
 8002a88:	42c80000 	.word	0x42c80000
 8002a8c:	3c23d70a 	.word	0x3c23d70a

08002a90 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a94:	b088      	sub	sp, #32
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6178      	str	r0, [r7, #20]
 8002a9a:	6139      	str	r1, [r7, #16]
 8002a9c:	60fa      	str	r2, [r7, #12]
 8002a9e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002aa2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002aa6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002b44 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xb4>
 8002aaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab2:	dd01      	ble.n	8002ab8 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0x28>
                    value = max;
 8002ab4:	4b24      	ldr	r3, [pc, #144]	; (8002b48 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xb8>)
 8002ab6:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002ab8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002abc:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002b4c <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xbc>
 8002ac0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac8:	d501      	bpl.n	8002ace <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0x3e>
                    value = min;
 8002aca:	4b21      	ldr	r3, [pc, #132]	; (8002b50 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xc0>)
 8002acc:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2610);
 8002ace:	f640 2332 	movw	r3, #2610	; 0xa32
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	6939      	ldr	r1, [r7, #16]
 8002ad6:	6978      	ldr	r0, [r7, #20]
 8002ad8:	f7ff fd59 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002adc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ae0:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002b54 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xc4>
 8002ae4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ae8:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002b58 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf+0xc8>
 8002aec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002af0:	eeb0 0a47 	vmov.f32	s0, s14
 8002af4:	f7ff fc09 	bl	800230a <_ZSt5roundf>
 8002af8:	eef0 7a40 	vmov.f32	s15, s0
 8002afc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b00:	ee17 3a90 	vmov	r3, s15
 8002b04:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0c:	8bf9      	ldrh	r1, [r7, #30]
 8002b0e:	2000      	movs	r0, #0
 8002b10:	4688      	mov	r8, r1
 8002b12:	4681      	mov	r9, r0
 8002b14:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002b18:	6079      	str	r1, [r7, #4]
 8002b1a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002b1e:	6039      	str	r1, [r7, #0]
 8002b20:	683c      	ldr	r4, [r7, #0]
 8002b22:	2500      	movs	r5, #0
 8002b24:	ea42 0a04 	orr.w	sl, r2, r4
 8002b28:	ea43 0b05 	orr.w	fp, r3, r5
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2204      	movs	r2, #4
 8002b36:	701a      	strb	r2, [r3, #0]
            }
 8002b38:	bf00      	nop
 8002b3a:	3720      	adds	r7, #32
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b42:	bf00      	nop
 8002b44:	440ad666 	.word	0x440ad666
 8002b48:	440ad666 	.word	0x440ad666
 8002b4c:	c2c80000 	.word	0xc2c80000
 8002b50:	c2c80000 	.word	0xc2c80000
 8002b54:	42c80000 	.word	0x42c80000
 8002b58:	3c23d70a 	.word	0x3c23d70a

08002b5c <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b60:	b088      	sub	sp, #32
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6178      	str	r0, [r7, #20]
 8002b66:	6139      	str	r1, [r7, #16]
 8002b68:	60fa      	str	r2, [r7, #12]
 8002b6a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002b6e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b72:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002c10 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xb4>
 8002b76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7e:	dd01      	ble.n	8002b84 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0x28>
                    value = max;
 8002b80:	4b24      	ldr	r3, [pc, #144]	; (8002c14 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xb8>)
 8002b82:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002b84:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b88:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002c18 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xbc>
 8002b8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b94:	d501      	bpl.n	8002b9a <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0x3e>
                    value = min;
 8002b96:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xc0>)
 8002b98:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2609);
 8002b9a:	f640 2331 	movw	r3, #2609	; 0xa31
 8002b9e:	68fa      	ldr	r2, [r7, #12]
 8002ba0:	6939      	ldr	r1, [r7, #16]
 8002ba2:	6978      	ldr	r0, [r7, #20]
 8002ba4:	f7ff fcf3 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002ba8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002bac:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002c20 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xc4>
 8002bb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bb4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002c24 <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf+0xc8>
 8002bb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002bbc:	eeb0 0a47 	vmov.f32	s0, s14
 8002bc0:	f7ff fba3 	bl	800230a <_ZSt5roundf>
 8002bc4:	eef0 7a40 	vmov.f32	s15, s0
 8002bc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bcc:	ee17 3a90 	vmov	r3, s15
 8002bd0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd8:	8bf9      	ldrh	r1, [r7, #30]
 8002bda:	2000      	movs	r0, #0
 8002bdc:	4688      	mov	r8, r1
 8002bde:	4681      	mov	r9, r0
 8002be0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002be4:	6079      	str	r1, [r7, #4]
 8002be6:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002bea:	6039      	str	r1, [r7, #0]
 8002bec:	683c      	ldr	r4, [r7, #0]
 8002bee:	2500      	movs	r5, #0
 8002bf0:	ea42 0a04 	orr.w	sl, r2, r4
 8002bf4:	ea43 0b05 	orr.w	fp, r3, r5
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2204      	movs	r2, #4
 8002c02:	701a      	strb	r2, [r3, #0]
            }
 8002c04:	bf00      	nop
 8002c06:	3720      	adds	r7, #32
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c0e:	bf00      	nop
 8002c10:	440ad666 	.word	0x440ad666
 8002c14:	440ad666 	.word	0x440ad666
 8002c18:	c2c80000 	.word	0xc2c80000
 8002c1c:	c2c80000 	.word	0xc2c80000
 8002c20:	42c80000 	.word	0x42c80000
 8002c24:	3c23d70a 	.word	0x3c23d70a

08002c28 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c2c:	b088      	sub	sp, #32
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6178      	str	r0, [r7, #20]
 8002c32:	6139      	str	r1, [r7, #16]
 8002c34:	60fa      	str	r2, [r7, #12]
 8002c36:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002c3a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c3e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002cdc <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xb4>
 8002c42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c4a:	dd01      	ble.n	8002c50 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0x28>
                    value = max;
 8002c4c:	4b24      	ldr	r3, [pc, #144]	; (8002ce0 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xb8>)
 8002c4e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002c50:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c54:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002ce4 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xbc>
 8002c58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c60:	d501      	bpl.n	8002c66 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0x3e>
                    value = min;
 8002c62:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xc0>)
 8002c64:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2608);
 8002c66:	f44f 6323 	mov.w	r3, #2608	; 0xa30
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	6939      	ldr	r1, [r7, #16]
 8002c6e:	6978      	ldr	r0, [r7, #20]
 8002c70:	f7ff fc8d 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002c74:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c78:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002cec <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xc4>
 8002c7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c80:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002cf0 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf+0xc8>
 8002c84:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002c88:	eeb0 0a47 	vmov.f32	s0, s14
 8002c8c:	f7ff fb3d 	bl	800230a <_ZSt5roundf>
 8002c90:	eef0 7a40 	vmov.f32	s15, s0
 8002c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c98:	ee17 3a90 	vmov	r3, s15
 8002c9c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca4:	8bf9      	ldrh	r1, [r7, #30]
 8002ca6:	2000      	movs	r0, #0
 8002ca8:	4688      	mov	r8, r1
 8002caa:	4681      	mov	r9, r0
 8002cac:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002cb0:	6079      	str	r1, [r7, #4]
 8002cb2:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002cb6:	6039      	str	r1, [r7, #0]
 8002cb8:	683c      	ldr	r4, [r7, #0]
 8002cba:	2500      	movs	r5, #0
 8002cbc:	ea42 0a04 	orr.w	sl, r2, r4
 8002cc0:	ea43 0b05 	orr.w	fp, r3, r5
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2204      	movs	r2, #4
 8002cce:	701a      	strb	r2, [r3, #0]
            }
 8002cd0:	bf00      	nop
 8002cd2:	3720      	adds	r7, #32
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cda:	bf00      	nop
 8002cdc:	440ad666 	.word	0x440ad666
 8002ce0:	440ad666 	.word	0x440ad666
 8002ce4:	c2c80000 	.word	0xc2c80000
 8002ce8:	c2c80000 	.word	0xc2c80000
 8002cec:	42c80000 	.word	0x42c80000
 8002cf0:	3c23d70a 	.word	0x3c23d70a

08002cf4 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cf8:	b088      	sub	sp, #32
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6178      	str	r0, [r7, #20]
 8002cfe:	6139      	str	r1, [r7, #16]
 8002d00:	60fa      	str	r2, [r7, #12]
 8002d02:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002d06:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d0a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002da8 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xb4>
 8002d0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d16:	dd01      	ble.n	8002d1c <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0x28>
                    value = max;
 8002d18:	4b24      	ldr	r3, [pc, #144]	; (8002dac <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xb8>)
 8002d1a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002d1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d20:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002db0 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xbc>
 8002d24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d2c:	d501      	bpl.n	8002d32 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0x3e>
                    value = min;
 8002d2e:	4b21      	ldr	r3, [pc, #132]	; (8002db4 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xc0>)
 8002d30:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2601);
 8002d32:	f640 2329 	movw	r3, #2601	; 0xa29
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	6939      	ldr	r1, [r7, #16]
 8002d3a:	6978      	ldr	r0, [r7, #20]
 8002d3c:	f7ff fc27 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002d40:	edd7 7a02 	vldr	s15, [r7, #8]
 8002d44:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002db8 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xc4>
 8002d48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d4c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002dbc <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf+0xc8>
 8002d50:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002d54:	eeb0 0a47 	vmov.f32	s0, s14
 8002d58:	f7ff fad7 	bl	800230a <_ZSt5roundf>
 8002d5c:	eef0 7a40 	vmov.f32	s15, s0
 8002d60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d64:	ee17 3a90 	vmov	r3, s15
 8002d68:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	8bf9      	ldrh	r1, [r7, #30]
 8002d72:	2000      	movs	r0, #0
 8002d74:	4688      	mov	r8, r1
 8002d76:	4681      	mov	r9, r0
 8002d78:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002d7c:	6079      	str	r1, [r7, #4]
 8002d7e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002d82:	6039      	str	r1, [r7, #0]
 8002d84:	683c      	ldr	r4, [r7, #0]
 8002d86:	2500      	movs	r5, #0
 8002d88:	ea42 0a04 	orr.w	sl, r2, r4
 8002d8c:	ea43 0b05 	orr.w	fp, r3, r5
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2204      	movs	r2, #4
 8002d9a:	701a      	strb	r2, [r3, #0]
            }
 8002d9c:	bf00      	nop
 8002d9e:	3720      	adds	r7, #32
 8002da0:	46bd      	mov	sp, r7
 8002da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002da6:	bf00      	nop
 8002da8:	440ad666 	.word	0x440ad666
 8002dac:	440ad666 	.word	0x440ad666
 8002db0:	c2c80000 	.word	0xc2c80000
 8002db4:	c2c80000 	.word	0xc2c80000
 8002db8:	42c80000 	.word	0x42c80000
 8002dbc:	3c23d70a 	.word	0x3c23d70a

08002dc0 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dc4:	b088      	sub	sp, #32
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6178      	str	r0, [r7, #20]
 8002dca:	6139      	str	r1, [r7, #16]
 8002dcc:	60fa      	str	r2, [r7, #12]
 8002dce:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002dd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dd6:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002e74 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xb4>
 8002dda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de2:	dd01      	ble.n	8002de8 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0x28>
                    value = max;
 8002de4:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xb8>)
 8002de6:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002de8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002dec:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002e7c <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xbc>
 8002df0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002df8:	d501      	bpl.n	8002dfe <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0x3e>
                    value = min;
 8002dfa:	4b21      	ldr	r3, [pc, #132]	; (8002e80 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xc0>)
 8002dfc:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2600);
 8002dfe:	f640 2328 	movw	r3, #2600	; 0xa28
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	6939      	ldr	r1, [r7, #16]
 8002e06:	6978      	ldr	r0, [r7, #20]
 8002e08:	f7ff fbc1 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002e0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e10:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002e84 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xc4>
 8002e14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e18:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002e88 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf+0xc8>
 8002e1c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002e20:	eeb0 0a47 	vmov.f32	s0, s14
 8002e24:	f7ff fa71 	bl	800230a <_ZSt5roundf>
 8002e28:	eef0 7a40 	vmov.f32	s15, s0
 8002e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e30:	ee17 3a90 	vmov	r3, s15
 8002e34:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3c:	8bf9      	ldrh	r1, [r7, #30]
 8002e3e:	2000      	movs	r0, #0
 8002e40:	4688      	mov	r8, r1
 8002e42:	4681      	mov	r9, r0
 8002e44:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002e48:	6079      	str	r1, [r7, #4]
 8002e4a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002e4e:	6039      	str	r1, [r7, #0]
 8002e50:	683c      	ldr	r4, [r7, #0]
 8002e52:	2500      	movs	r5, #0
 8002e54:	ea42 0a04 	orr.w	sl, r2, r4
 8002e58:	ea43 0b05 	orr.w	fp, r3, r5
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2204      	movs	r2, #4
 8002e66:	701a      	strb	r2, [r3, #0]
            }
 8002e68:	bf00      	nop
 8002e6a:	3720      	adds	r7, #32
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e72:	bf00      	nop
 8002e74:	440ad666 	.word	0x440ad666
 8002e78:	440ad666 	.word	0x440ad666
 8002e7c:	c2c80000 	.word	0xc2c80000
 8002e80:	c2c80000 	.word	0xc2c80000
 8002e84:	42c80000 	.word	0x42c80000
 8002e88:	3c23d70a 	.word	0x3c23d70a

08002e8c <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e90:	b088      	sub	sp, #32
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6178      	str	r0, [r7, #20]
 8002e96:	6139      	str	r1, [r7, #16]
 8002e98:	60fa      	str	r2, [r7, #12]
 8002e9a:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002e9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ea2:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002f40 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xb4>
 8002ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eae:	dd01      	ble.n	8002eb4 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 8002eb0:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xb8>)
 8002eb2:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002eb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002eb8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002f48 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xbc>
 8002ebc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ec4:	d501      	bpl.n	8002eca <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 8002ec6:	4b21      	ldr	r3, [pc, #132]	; (8002f4c <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xc0>)
 8002ec8:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2599);
 8002eca:	f640 2327 	movw	r3, #2599	; 0xa27
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	6939      	ldr	r1, [r7, #16]
 8002ed2:	6978      	ldr	r0, [r7, #20]
 8002ed4:	f7ff fb5b 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002ed8:	edd7 7a02 	vldr	s15, [r7, #8]
 8002edc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002f50 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xc4>
 8002ee0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002ee4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002f54 <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf+0xc8>
 8002ee8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002eec:	eeb0 0a47 	vmov.f32	s0, s14
 8002ef0:	f7ff fa0b 	bl	800230a <_ZSt5roundf>
 8002ef4:	eef0 7a40 	vmov.f32	s15, s0
 8002ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002efc:	ee17 3a90 	vmov	r3, s15
 8002f00:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f08:	8bf9      	ldrh	r1, [r7, #30]
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	4688      	mov	r8, r1
 8002f0e:	4681      	mov	r9, r0
 8002f10:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002f14:	6079      	str	r1, [r7, #4]
 8002f16:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002f1a:	6039      	str	r1, [r7, #0]
 8002f1c:	683c      	ldr	r4, [r7, #0]
 8002f1e:	2500      	movs	r5, #0
 8002f20:	ea42 0a04 	orr.w	sl, r2, r4
 8002f24:	ea43 0b05 	orr.w	fp, r3, r5
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2204      	movs	r2, #4
 8002f32:	701a      	strb	r2, [r3, #0]
            }
 8002f34:	bf00      	nop
 8002f36:	3720      	adds	r7, #32
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f3e:	bf00      	nop
 8002f40:	440ad666 	.word	0x440ad666
 8002f44:	440ad666 	.word	0x440ad666
 8002f48:	c2c80000 	.word	0xc2c80000
 8002f4c:	c2c80000 	.word	0xc2c80000
 8002f50:	42c80000 	.word	0x42c80000
 8002f54:	3c23d70a 	.word	0x3c23d70a

08002f58 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8002f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f5c:	b088      	sub	sp, #32
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6178      	str	r0, [r7, #20]
 8002f62:	6139      	str	r1, [r7, #16]
 8002f64:	60fa      	str	r2, [r7, #12]
 8002f66:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8002f6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f6e:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800300c <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xb4>
 8002f72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7a:	dd01      	ble.n	8002f80 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 8002f7c:	4b24      	ldr	r3, [pc, #144]	; (8003010 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xb8>)
 8002f7e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8002f80:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f84:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8003014 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xbc>
 8002f88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f90:	d501      	bpl.n	8002f96 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 8002f92:	4b21      	ldr	r3, [pc, #132]	; (8003018 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xc0>)
 8002f94:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2598);
 8002f96:	f640 2326 	movw	r3, #2598	; 0xa26
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	6939      	ldr	r1, [r7, #16]
 8002f9e:	6978      	ldr	r0, [r7, #20]
 8002fa0:	f7ff faf5 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8002fa4:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fa8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800301c <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xc4>
 8002fac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fb0:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8003020 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf+0xc8>
 8002fb4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002fb8:	eeb0 0a47 	vmov.f32	s0, s14
 8002fbc:	f7ff f9a5 	bl	800230a <_ZSt5roundf>
 8002fc0:	eef0 7a40 	vmov.f32	s15, s0
 8002fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fc8:	ee17 3a90 	vmov	r3, s15
 8002fcc:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd4:	8bf9      	ldrh	r1, [r7, #30]
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	4688      	mov	r8, r1
 8002fda:	4681      	mov	r9, r0
 8002fdc:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8002fe0:	6079      	str	r1, [r7, #4]
 8002fe2:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8002fe6:	6039      	str	r1, [r7, #0]
 8002fe8:	683c      	ldr	r4, [r7, #0]
 8002fea:	2500      	movs	r5, #0
 8002fec:	ea42 0a04 	orr.w	sl, r2, r4
 8002ff0:	ea43 0b05 	orr.w	fp, r3, r5
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2204      	movs	r2, #4
 8002ffe:	701a      	strb	r2, [r3, #0]
            }
 8003000:	bf00      	nop
 8003002:	3720      	adds	r7, #32
 8003004:	46bd      	mov	sp, r7
 8003006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800300a:	bf00      	nop
 800300c:	440ad666 	.word	0x440ad666
 8003010:	440ad666 	.word	0x440ad666
 8003014:	c2c80000 	.word	0xc2c80000
 8003018:	c2c80000 	.word	0xc2c80000
 800301c:	42c80000 	.word	0x42c80000
 8003020:	3c23d70a 	.word	0x3c23d70a

08003024 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-100);
            constexpr static float max = static_cast<float>(555.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8003024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003028:	b088      	sub	sp, #32
 800302a:	af00      	add	r7, sp, #0
 800302c:	6178      	str	r0, [r7, #20]
 800302e:	6139      	str	r1, [r7, #16]
 8003030:	60fa      	str	r2, [r7, #12]
 8003032:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8003036:	edd7 7a02 	vldr	s15, [r7, #8]
 800303a:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80030d8 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xb4>
 800303e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003046:	dd01      	ble.n	800304c <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0x28>
                    value = max;
 8003048:	4b24      	ldr	r3, [pc, #144]	; (80030dc <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xb8>)
 800304a:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 800304c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003050:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80030e0 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xbc>
 8003054:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800305c:	d501      	bpl.n	8003062 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0x3e>
                    value = min;
 800305e:	4b21      	ldr	r3, [pc, #132]	; (80030e4 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xc0>)
 8003060:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2597);
 8003062:	f640 2325 	movw	r3, #2597	; 0xa25
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	6939      	ldr	r1, [r7, #16]
 800306a:	6978      	ldr	r0, [r7, #20]
 800306c:	f7ff fa8f 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-100.0f)) / (0.01f)));
 8003070:	edd7 7a02 	vldr	s15, [r7, #8]
 8003074:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80030e8 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xc4>
 8003078:	ee77 7a87 	vadd.f32	s15, s15, s14
 800307c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80030ec <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf+0xc8>
 8003080:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003084:	eeb0 0a47 	vmov.f32	s0, s14
 8003088:	f7ff f93f 	bl	800230a <_ZSt5roundf>
 800308c:	eef0 7a40 	vmov.f32	s15, s0
 8003090:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003094:	ee17 3a90 	vmov	r3, s15
 8003098:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a0:	8bf9      	ldrh	r1, [r7, #30]
 80030a2:	2000      	movs	r0, #0
 80030a4:	4688      	mov	r8, r1
 80030a6:	4681      	mov	r9, r0
 80030a8:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80030ac:	6079      	str	r1, [r7, #4]
 80030ae:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80030b2:	6039      	str	r1, [r7, #0]
 80030b4:	683c      	ldr	r4, [r7, #0]
 80030b6:	2500      	movs	r5, #0
 80030b8:	ea42 0a04 	orr.w	sl, r2, r4
 80030bc:	ea43 0b05 	orr.w	fp, r3, r5
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2204      	movs	r2, #4
 80030ca:	701a      	strb	r2, [r3, #0]
            }
 80030cc:	bf00      	nop
 80030ce:	3720      	adds	r7, #32
 80030d0:	46bd      	mov	sp, r7
 80030d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030d6:	bf00      	nop
 80030d8:	440ad666 	.word	0x440ad666
 80030dc:	440ad666 	.word	0x440ad666
 80030e0:	c2c80000 	.word	0xc2c80000
 80030e4:	c2c80000 	.word	0xc2c80000
 80030e8:	42c80000 	.word	0x42c80000
 80030ec:	3c23d70a 	.word	0x3c23d70a

080030f0 <_ZN3can7signals21SensorF_OD_IMU_number3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2592            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80030f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030f4:	b086      	sub	sp, #24
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	60f8      	str	r0, [r7, #12]
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
 80030fe:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2592);
 8003100:	f44f 6322 	mov.w	r3, #2592	; 0xa20
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	68b9      	ldr	r1, [r7, #8]
 8003108:	68f8      	ldr	r0, [r7, #12]
 800310a:	f7ff fa40 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003118:	7dfb      	ldrb	r3, [r7, #23]
 800311a:	2200      	movs	r2, #0
 800311c:	4698      	mov	r8, r3
 800311e:	4691      	mov	r9, r2
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800312c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003130:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003134:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003138:	2500      	movs	r5, #0
 800313a:	ea40 0a04 	orr.w	sl, r0, r4
 800313e:	ea41 0b05 	orr.w	fp, r1, r5
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2203      	movs	r2, #3
 800314c:	701a      	strb	r2, [r3, #0]
            }
 800314e:	bf00      	nop
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003158 <_ZN3can7signals31SensorF_OD_EncoderResetPosition3getERKyS3_>:
                SensorF_SDO_ID::set(intel, motorola, dlc, 2309);
                uint8_t rawValue = (value);
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
                dlc = 3;
            }
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2309) {
 8003162:	6839      	ldr	r1, [r7, #0]
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff fa3a 	bl	80025de <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 800316a:	4603      	mov	r3, r0
 800316c:	461a      	mov	r2, r3
 800316e:	f640 1305 	movw	r3, #2309	; 0x905
 8003172:	429a      	cmp	r2, r3
 8003174:	bf14      	ite	ne
 8003176:	2301      	movne	r3, #1
 8003178:	2300      	moveq	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d000      	beq.n	8003182 <_ZN3can7signals31SensorF_OD_EncoderResetPosition3getERKyS3_+0x2a>
                    while(1);
 8003180:	e7fe      	b.n	8003180 <_ZN3can7signals31SensorF_OD_EncoderResetPosition3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	0c02      	lsrs	r2, r0, #16
 8003192:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003196:	0c0b      	lsrs	r3, r1, #16
 8003198:	4613      	mov	r3, r2
 800319a:	73fb      	strb	r3, [r7, #15]
                return value;
 800319c:	7bfb      	ldrb	r3, [r7, #15]
            }
 800319e:	4618      	mov	r0, r3
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(1);
            constexpr static float max = static_cast<float>(300);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80031a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031ac:	b088      	sub	sp, #32
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6178      	str	r0, [r7, #20]
 80031b2:	6139      	str	r1, [r7, #16]
 80031b4:	60fa      	str	r2, [r7, #12]
 80031b6:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80031ba:	edd7 7a02 	vldr	s15, [r7, #8]
 80031be:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003254 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0xac>
 80031c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ca:	dd01      	ble.n	80031d0 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0x28>
                    value = max;
 80031cc:	4b22      	ldr	r3, [pc, #136]	; (8003258 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0xb0>)
 80031ce:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80031d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80031d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80031d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e0:	d502      	bpl.n	80031e8 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0x40>
                    value = min;
 80031e2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80031e6:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2308);
 80031e8:	f640 1304 	movw	r3, #2308	; 0x904
 80031ec:	68fa      	ldr	r2, [r7, #12]
 80031ee:	6939      	ldr	r1, [r7, #16]
 80031f0:	6978      	ldr	r0, [r7, #20]
 80031f2:	f7ff f9cc 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.005f)));
 80031f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80031fa:	eddf 6a18 	vldr	s13, [pc, #96]	; 800325c <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf+0xb4>
 80031fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003202:	eeb0 0a47 	vmov.f32	s0, s14
 8003206:	f7ff f880 	bl	800230a <_ZSt5roundf>
 800320a:	eef0 7a40 	vmov.f32	s15, s0
 800320e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003212:	ee17 3a90 	vmov	r3, s15
 8003216:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321e:	8bf9      	ldrh	r1, [r7, #30]
 8003220:	2000      	movs	r0, #0
 8003222:	4688      	mov	r8, r1
 8003224:	4681      	mov	r9, r0
 8003226:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800322a:	6079      	str	r1, [r7, #4]
 800322c:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003230:	6039      	str	r1, [r7, #0]
 8003232:	683c      	ldr	r4, [r7, #0]
 8003234:	2500      	movs	r5, #0
 8003236:	ea42 0a04 	orr.w	sl, r2, r4
 800323a:	ea43 0b05 	orr.w	fp, r3, r5
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2204      	movs	r2, #4
 8003248:	701a      	strb	r2, [r3, #0]
            }
 800324a:	bf00      	nop
 800324c:	3720      	adds	r7, #32
 800324e:	46bd      	mov	sp, r7
 8003250:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003254:	43960000 	.word	0x43960000
 8003258:	43960000 	.word	0x43960000
 800325c:	3ba3d70a 	.word	0x3ba3d70a

08003260 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2308) {
 800326a:	6839      	ldr	r1, [r7, #0]
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7ff f9b6 	bl	80025de <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003272:	4603      	mov	r3, r0
 8003274:	461a      	mov	r2, r3
 8003276:	f640 1304 	movw	r3, #2308	; 0x904
 800327a:	429a      	cmp	r2, r3
 800327c:	bf14      	ite	ne
 800327e:	2301      	movne	r3, #1
 8003280:	2300      	moveq	r3, #0
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b00      	cmp	r3, #0
 8003286:	d000      	beq.n	800328a <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_+0x2a>
                    while(1);
 8003288:	e7fe      	b.n	8003288 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	0c02      	lsrs	r2, r0, #16
 800329a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800329e:	0c0b      	lsrs	r3, r1, #16
 80032a0:	4613      	mov	r3, r2
 80032a2:	81fb      	strh	r3, [r7, #14]
                return value * (0.005f);
 80032a4:	89fb      	ldrh	r3, [r7, #14]
 80032a6:	ee07 3a90 	vmov	s15, r3
 80032aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032ae:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80032c0 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_+0x60>
 80032b2:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 80032b6:	eeb0 0a67 	vmov.f32	s0, s15
 80032ba:	3710      	adds	r7, #16
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	3ba3d70a 	.word	0x3ba3d70a

080032c4 <_ZN3can7signals24SensorF_OD_HVBatteryMode3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2307            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80032c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032c8:	b086      	sub	sp, #24
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
 80032d2:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2307);
 80032d4:	f640 1303 	movw	r3, #2307	; 0x903
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	68b9      	ldr	r1, [r7, #8]
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f7ff f956 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80032e2:	78fb      	ldrb	r3, [r7, #3]
 80032e4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032ec:	7dfb      	ldrb	r3, [r7, #23]
 80032ee:	2200      	movs	r2, #0
 80032f0:	4698      	mov	r8, r3
 80032f2:	4691      	mov	r9, r2
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003300:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003304:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003308:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800330c:	2500      	movs	r5, #0
 800330e:	ea40 0a04 	orr.w	sl, r0, r4
 8003312:	ea41 0b05 	orr.w	fp, r1, r5
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2203      	movs	r2, #3
 8003320:	701a      	strb	r2, [r3, #0]
            }
 8003322:	bf00      	nop
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800332c <_ZN3can7signals24SensorF_OD_HVBatteryMode3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2307) {
 8003336:	6839      	ldr	r1, [r7, #0]
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff f950 	bl	80025de <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 800333e:	4603      	mov	r3, r0
 8003340:	461a      	mov	r2, r3
 8003342:	f640 1303 	movw	r3, #2307	; 0x903
 8003346:	429a      	cmp	r2, r3
 8003348:	bf14      	ite	ne
 800334a:	2301      	movne	r3, #1
 800334c:	2300      	moveq	r3, #0
 800334e:	b2db      	uxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d000      	beq.n	8003356 <_ZN3can7signals24SensorF_OD_HVBatteryMode3getERKyS3_+0x2a>
                    while(1);
 8003354:	e7fe      	b.n	8003354 <_ZN3can7signals24SensorF_OD_HVBatteryMode3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	e9d3 0100 	ldrd	r0, r1, [r3]
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	0c02      	lsrs	r2, r0, #16
 8003366:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800336a:	0c0b      	lsrs	r3, r1, #16
 800336c:	4613      	mov	r3, r2
 800336e:	73fb      	strb	r3, [r7, #15]
                return value;
 8003370:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <_ZN3can7signals31SensorF_OD_StateMachineActivate3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2306            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800337a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800337e:	b086      	sub	sp, #24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
 8003388:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2306);
 800338a:	f640 1302 	movw	r3, #2306	; 0x902
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	68b9      	ldr	r1, [r7, #8]
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f7ff f8fb 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80033a2:	7dfb      	ldrb	r3, [r7, #23]
 80033a4:	2200      	movs	r2, #0
 80033a6:	4698      	mov	r8, r3
 80033a8:	4691      	mov	r9, r2
 80033aa:	f04f 0200 	mov.w	r2, #0
 80033ae:	f04f 0300 	mov.w	r3, #0
 80033b2:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80033b6:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80033ba:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80033be:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80033c2:	2500      	movs	r5, #0
 80033c4:	ea40 0a04 	orr.w	sl, r0, r4
 80033c8:	ea41 0b05 	orr.w	fp, r1, r5
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2203      	movs	r2, #3
 80033d6:	701a      	strb	r2, [r3, #0]
            }
 80033d8:	bf00      	nop
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080033e2 <_ZN3can7signals31SensorF_OD_StateMachineActivate3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b084      	sub	sp, #16
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
 80033ea:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2306) {
 80033ec:	6839      	ldr	r1, [r7, #0]
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7ff f8f5 	bl	80025de <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 80033f4:	4603      	mov	r3, r0
 80033f6:	461a      	mov	r2, r3
 80033f8:	f640 1302 	movw	r3, #2306	; 0x902
 80033fc:	429a      	cmp	r2, r3
 80033fe:	bf14      	ite	ne
 8003400:	2301      	movne	r3, #1
 8003402:	2300      	moveq	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d000      	beq.n	800340c <_ZN3can7signals31SensorF_OD_StateMachineActivate3getERKyS3_+0x2a>
                    while(1);
 800340a:	e7fe      	b.n	800340a <_ZN3can7signals31SensorF_OD_StateMachineActivate3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	0c02      	lsrs	r2, r0, #16
 800341c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003420:	0c0b      	lsrs	r3, r1, #16
 8003422:	4613      	mov	r3, r2
 8003424:	73fb      	strb	r3, [r7, #15]
                return value;
 8003426:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <_ZN3can7signals31SensorF_OD_StateMachineInterval3setERyS2_Rhh>:
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint8_t min = static_cast<uint8_t>(5);
            constexpr static uint8_t max = static_cast<uint8_t>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003430:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003434:	b086      	sub	sp, #24
 8003436:	af00      	add	r7, sp, #0
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	60b9      	str	r1, [r7, #8]
 800343c:	607a      	str	r2, [r7, #4]
 800343e:	70fb      	strb	r3, [r7, #3]
                if (value > max) {
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <_ZN3can7signals31SensorF_OD_StateMachineInterval3setERyS2_Rhh+0x1a>
                    value = max;
 8003446:	2364      	movs	r3, #100	; 0x64
 8003448:	70fb      	strb	r3, [r7, #3]
                }
                if (value < min) {
 800344a:	78fb      	ldrb	r3, [r7, #3]
 800344c:	2b04      	cmp	r3, #4
 800344e:	d801      	bhi.n	8003454 <_ZN3can7signals31SensorF_OD_StateMachineInterval3setERyS2_Rhh+0x24>
                    value = min;
 8003450:	2305      	movs	r3, #5
 8003452:	70fb      	strb	r3, [r7, #3]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2305);
 8003454:	f640 1301 	movw	r3, #2305	; 0x901
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	68b9      	ldr	r1, [r7, #8]
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f7ff f896 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003462:	78fb      	ldrb	r3, [r7, #3]
 8003464:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	e9d3 0100 	ldrd	r0, r1, [r3]
 800346c:	7dfb      	ldrb	r3, [r7, #23]
 800346e:	2200      	movs	r2, #0
 8003470:	4698      	mov	r8, r3
 8003472:	4691      	mov	r9, r2
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003480:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003484:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003488:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800348c:	2500      	movs	r5, #0
 800348e:	ea40 0a04 	orr.w	sl, r0, r4
 8003492:	ea41 0b05 	orr.w	fp, r1, r5
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2203      	movs	r2, #3
 80034a0:	701a      	strb	r2, [r3, #0]
            }
 80034a2:	bf00      	nop
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080034ac <_ZN3can7signals31SensorF_OD_StateMachineInterval3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2305) {
 80034b6:	6839      	ldr	r1, [r7, #0]
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7ff f890 	bl	80025de <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 80034be:	4603      	mov	r3, r0
 80034c0:	461a      	mov	r2, r3
 80034c2:	f640 1301 	movw	r3, #2305	; 0x901
 80034c6:	429a      	cmp	r2, r3
 80034c8:	bf14      	ite	ne
 80034ca:	2301      	movne	r3, #1
 80034cc:	2300      	moveq	r3, #0
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d000      	beq.n	80034d6 <_ZN3can7signals31SensorF_OD_StateMachineInterval3getERKyS3_+0x2a>
                    while(1);
 80034d4:	e7fe      	b.n	80034d4 <_ZN3can7signals31SensorF_OD_StateMachineInterval3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	0c02      	lsrs	r2, r0, #16
 80034e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80034ea:	0c0b      	lsrs	r3, r1, #16
 80034ec:	4613      	mov	r3, r2
 80034ee:	73fb      	strb	r3, [r7, #15]
                return value;
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
            }
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <_ZN3can7signals28SensorF_OD_TelemetryCommands3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2304            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80034fa:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
 8003508:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2304);
 800350a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	68b9      	ldr	r1, [r7, #8]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f7ff f83b 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003522:	7dfb      	ldrb	r3, [r7, #23]
 8003524:	2200      	movs	r2, #0
 8003526:	4698      	mov	r8, r3
 8003528:	4691      	mov	r9, r2
 800352a:	f04f 0200 	mov.w	r2, #0
 800352e:	f04f 0300 	mov.w	r3, #0
 8003532:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003536:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800353a:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800353e:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003542:	2500      	movs	r5, #0
 8003544:	ea40 0a04 	orr.w	sl, r0, r4
 8003548:	ea41 0b05 	orr.w	fp, r1, r5
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2203      	movs	r2, #3
 8003556:	701a      	strb	r2, [r3, #0]
            }
 8003558:	bf00      	nop
 800355a:	3718      	adds	r7, #24
 800355c:	46bd      	mov	sp, r7
 800355e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003562 <_ZN3can7signals28SensorF_OD_TelemetryCommands3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
 800356a:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2304) {
 800356c:	6839      	ldr	r1, [r7, #0]
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f7ff f835 	bl	80025de <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003574:	4603      	mov	r3, r0
 8003576:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 800357a:	bf14      	ite	ne
 800357c:	2301      	movne	r3, #1
 800357e:	2300      	moveq	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d000      	beq.n	8003588 <_ZN3can7signals28SensorF_OD_TelemetryCommands3getERKyS3_+0x26>
                    while(1);
 8003586:	e7fe      	b.n	8003586 <_ZN3can7signals28SensorF_OD_TelemetryCommands3getERKyS3_+0x24>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800358e:	f04f 0200 	mov.w	r2, #0
 8003592:	f04f 0300 	mov.w	r3, #0
 8003596:	0c02      	lsrs	r2, r0, #16
 8003598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800359c:	0c0b      	lsrs	r3, r1, #16
 800359e:	4613      	mov	r3, r2
 80035a0:	73fb      	strb	r3, [r7, #15]
                return value;
 80035a2:	7bfb      	ldrb	r3, [r7, #15]
            }
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0.01);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80035ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035b0:	b088      	sub	sp, #32
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6178      	str	r0, [r7, #20]
 80035b6:	6139      	str	r1, [r7, #16]
 80035b8:	60fa      	str	r2, [r7, #12]
 80035ba:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80035be:	edd7 7a02 	vldr	s15, [r7, #8]
 80035c2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003658 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xac>
 80035c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ce:	dd01      	ble.n	80035d4 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0x28>
                    value = max;
 80035d0:	4b22      	ldr	r3, [pc, #136]	; (800365c <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xb0>)
 80035d2:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80035d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80035d8:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003660 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xb4>
 80035dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e4:	d501      	bpl.n	80035ea <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0x3e>
                    value = min;
 80035e6:	4b1f      	ldr	r3, [pc, #124]	; (8003664 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xb8>)
 80035e8:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 2048);
 80035ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	6939      	ldr	r1, [r7, #16]
 80035f2:	6978      	ldr	r0, [r7, #20]
 80035f4:	f7fe ffcb 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.01f)));
 80035f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80035fc:	eddf 6a18 	vldr	s13, [pc, #96]	; 8003660 <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf+0xb4>
 8003600:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003604:	eeb0 0a47 	vmov.f32	s0, s14
 8003608:	f7fe fe7f 	bl	800230a <_ZSt5roundf>
 800360c:	eef0 7a40 	vmov.f32	s15, s0
 8003610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003614:	ee17 3a90 	vmov	r3, s15
 8003618:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003620:	8bf9      	ldrh	r1, [r7, #30]
 8003622:	2000      	movs	r0, #0
 8003624:	4688      	mov	r8, r1
 8003626:	4681      	mov	r9, r0
 8003628:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800362c:	6079      	str	r1, [r7, #4]
 800362e:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003632:	6039      	str	r1, [r7, #0]
 8003634:	683c      	ldr	r4, [r7, #0]
 8003636:	2500      	movs	r5, #0
 8003638:	ea42 0a04 	orr.w	sl, r2, r4
 800363c:	ea43 0b05 	orr.w	fp, r3, r5
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2204      	movs	r2, #4
 800364a:	701a      	strb	r2, [r3, #0]
            }
 800364c:	bf00      	nop
 800364e:	3720      	adds	r7, #32
 8003650:	46bd      	mov	sp, r7
 8003652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003656:	bf00      	nop
 8003658:	42c80000 	.word	0x42c80000
 800365c:	42c80000 	.word	0x42c80000
 8003660:	3c23d70a 	.word	0x3c23d70a
 8003664:	3c23d70a 	.word	0x3c23d70a

08003668 <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_>:
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 2048) {
 8003672:	6839      	ldr	r1, [r7, #0]
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f7fe ffb2 	bl	80025de <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 800367a:	4603      	mov	r3, r0
 800367c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003680:	bf14      	ite	ne
 8003682:	2301      	movne	r3, #1
 8003684:	2300      	moveq	r3, #0
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d000      	beq.n	800368e <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_+0x26>
                    while(1);
 800368c:	e7fe      	b.n	800368c <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_+0x24>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	f04f 0300 	mov.w	r3, #0
 800369c:	0c02      	lsrs	r2, r0, #16
 800369e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80036a2:	0c0b      	lsrs	r3, r1, #16
 80036a4:	4613      	mov	r3, r2
 80036a6:	81fb      	strh	r3, [r7, #14]
                return value * (0.01f);
 80036a8:	89fb      	ldrh	r3, [r7, #14]
 80036aa:	ee07 3a90 	vmov	s15, r3
 80036ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036b2:	ed9f 7a04 	vldr	s14, [pc, #16]	; 80036c4 <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_+0x5c>
 80036b6:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 80036ba:	eeb0 0a67 	vmov.f32	s0, s15
 80036be:	3710      	adds	r7, #16
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	3c23d70a 	.word	0x3c23d70a

080036c8 <_ZN3can7signals33SensorF_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80036c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036cc:	b088      	sub	sp, #32
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6178      	str	r0, [r7, #20]
 80036d2:	6139      	str	r1, [r7, #16]
 80036d4:	60fa      	str	r2, [r7, #12]
 80036d6:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036de:	d302      	bcc.n	80036e6 <_ZN3can7signals33SensorF_OD_CAN2_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80036e0:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80036e4:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1129);
 80036e6:	f240 4369 	movw	r3, #1129	; 0x469
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	6939      	ldr	r1, [r7, #16]
 80036ee:	6978      	ldr	r0, [r7, #20]
 80036f0:	f7fe ff4d 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	69f9      	ldr	r1, [r7, #28]
 8003700:	2000      	movs	r0, #0
 8003702:	468a      	mov	sl, r1
 8003704:	4683      	mov	fp, r0
 8003706:	ea4f 491a 	mov.w	r9, sl, lsr #16
 800370a:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800370e:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8003712:	0424      	lsls	r4, r4, #16
 8003714:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8003718:	ea42 0104 	orr.w	r1, r2, r4
 800371c:	6039      	str	r1, [r7, #0]
 800371e:	432b      	orrs	r3, r5
 8003720:	607b      	str	r3, [r7, #4]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003728:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2205      	movs	r2, #5
 8003730:	701a      	strb	r2, [r3, #0]
            }
 8003732:	bf00      	nop
 8003734:	3720      	adds	r7, #32
 8003736:	46bd      	mov	sp, r7
 8003738:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800373c <_ZN3can7signals27SensorF_OD_CAN2_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1128            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800373c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003740:	b086      	sub	sp, #24
 8003742:	af00      	add	r7, sp, #0
 8003744:	60f8      	str	r0, [r7, #12]
 8003746:	60b9      	str	r1, [r7, #8]
 8003748:	607a      	str	r2, [r7, #4]
 800374a:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1128);
 800374c:	f44f 638d 	mov.w	r3, #1128	; 0x468
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	68b9      	ldr	r1, [r7, #8]
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f7fe ff1a 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 800375a:	78fb      	ldrb	r3, [r7, #3]
 800375c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003764:	7dfb      	ldrb	r3, [r7, #23]
 8003766:	2200      	movs	r2, #0
 8003768:	4698      	mov	r8, r3
 800376a:	4691      	mov	r9, r2
 800376c:	f04f 0200 	mov.w	r2, #0
 8003770:	f04f 0300 	mov.w	r3, #0
 8003774:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003778:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800377c:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003780:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003784:	2500      	movs	r5, #0
 8003786:	ea40 0a04 	orr.w	sl, r0, r4
 800378a:	ea41 0b05 	orr.w	fp, r1, r5
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2203      	movs	r2, #3
 8003798:	701a      	strb	r2, [r3, #0]
            }
 800379a:	bf00      	nop
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080037a4 <_ZN3can7signals35SensorF_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80037a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a8:	b088      	sub	sp, #32
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6178      	str	r0, [r7, #20]
 80037ae:	6139      	str	r1, [r7, #16]
 80037b0:	60fa      	str	r2, [r7, #12]
 80037b2:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037ba:	d302      	bcc.n	80037c2 <_ZN3can7signals35SensorF_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 80037bc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 80037c0:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1127);
 80037c2:	f240 4367 	movw	r3, #1127	; 0x467
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	6939      	ldr	r1, [r7, #16]
 80037ca:	6978      	ldr	r0, [r7, #20]
 80037cc:	f7fe fedf 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037da:	69f9      	ldr	r1, [r7, #28]
 80037dc:	2000      	movs	r0, #0
 80037de:	468a      	mov	sl, r1
 80037e0:	4683      	mov	fp, r0
 80037e2:	ea4f 491a 	mov.w	r9, sl, lsr #16
 80037e6:	ea4f 480a 	mov.w	r8, sl, lsl #16
 80037ea:	ea4f 4418 	mov.w	r4, r8, lsr #16
 80037ee:	0424      	lsls	r4, r4, #16
 80037f0:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 80037f4:	ea42 0104 	orr.w	r1, r2, r4
 80037f8:	6039      	str	r1, [r7, #0]
 80037fa:	432b      	orrs	r3, r5
 80037fc:	607b      	str	r3, [r7, #4]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003804:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2205      	movs	r2, #5
 800380c:	701a      	strb	r2, [r3, #0]
            }
 800380e:	bf00      	nop
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003818 <_ZN3can7signals22SensorF_OD_CAN2_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1126            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800381c:	b086      	sub	sp, #24
 800381e:	af00      	add	r7, sp, #0
 8003820:	60f8      	str	r0, [r7, #12]
 8003822:	60b9      	str	r1, [r7, #8]
 8003824:	607a      	str	r2, [r7, #4]
 8003826:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1126);
 8003828:	f240 4366 	movw	r3, #1126	; 0x466
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	68b9      	ldr	r1, [r7, #8]
 8003830:	68f8      	ldr	r0, [r7, #12]
 8003832:	f7fe feac 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003836:	78fb      	ldrb	r3, [r7, #3]
 8003838:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003840:	7dfb      	ldrb	r3, [r7, #23]
 8003842:	2200      	movs	r2, #0
 8003844:	4698      	mov	r8, r3
 8003846:	4691      	mov	r9, r2
 8003848:	f04f 0200 	mov.w	r2, #0
 800384c:	f04f 0300 	mov.w	r3, #0
 8003850:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003854:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003858:	ea4f 4208 	mov.w	r2, r8, lsl #16
 800385c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003860:	2500      	movs	r5, #0
 8003862:	ea40 0a04 	orr.w	sl, r0, r4
 8003866:	ea41 0b05 	orr.w	fp, r1, r5
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2203      	movs	r2, #3
 8003874:	701a      	strb	r2, [r3, #0]
            }
 8003876:	bf00      	nop
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003880 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003880:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003884:	b088      	sub	sp, #32
 8003886:	af00      	add	r7, sp, #0
 8003888:	6178      	str	r0, [r7, #20]
 800388a:	6139      	str	r1, [r7, #16]
 800388c:	60fa      	str	r2, [r7, #12]
 800388e:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8003890:	897b      	ldrh	r3, [r7, #10]
 8003892:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003896:	d902      	bls.n	800389e <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8003898:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800389c:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 800389e:	897b      	ldrh	r3, [r7, #10]
 80038a0:	2b7c      	cmp	r3, #124	; 0x7c
 80038a2:	d801      	bhi.n	80038a8 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 80038a4:	237d      	movs	r3, #125	; 0x7d
 80038a6:	817b      	strh	r3, [r7, #10]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1124);
 80038a8:	f240 4364 	movw	r3, #1124	; 0x464
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	6939      	ldr	r1, [r7, #16]
 80038b0:	6978      	ldr	r0, [r7, #20]
 80038b2:	f7fe fe6c 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80038b6:	897b      	ldrh	r3, [r7, #10]
 80038b8:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c0:	8bf9      	ldrh	r1, [r7, #30]
 80038c2:	2000      	movs	r0, #0
 80038c4:	4688      	mov	r8, r1
 80038c6:	4681      	mov	r9, r0
 80038c8:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80038cc:	6079      	str	r1, [r7, #4]
 80038ce:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80038d2:	6039      	str	r1, [r7, #0]
 80038d4:	683c      	ldr	r4, [r7, #0]
 80038d6:	2500      	movs	r5, #0
 80038d8:	ea42 0a04 	orr.w	sl, r2, r4
 80038dc:	ea43 0b05 	orr.w	fp, r3, r5
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2204      	movs	r2, #4
 80038ea:	701a      	strb	r2, [r3, #0]
            }
 80038ec:	bf00      	nop
 80038ee:	3720      	adds	r7, #32
 80038f0:	46bd      	mov	sp, r7
 80038f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080038f6 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80038f6:	b580      	push	{r7, lr}
 80038f8:	b084      	sub	sp, #16
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
 80038fe:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 1124) {
 8003900:	6839      	ldr	r1, [r7, #0]
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f7fe fe6b 	bl	80025de <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003908:	4603      	mov	r3, r0
 800390a:	461a      	mov	r2, r3
 800390c:	f240 4364 	movw	r3, #1124	; 0x464
 8003910:	429a      	cmp	r2, r3
 8003912:	bf14      	ite	ne
 8003914:	2301      	movne	r3, #1
 8003916:	2300      	moveq	r3, #0
 8003918:	b2db      	uxtb	r3, r3
 800391a:	2b00      	cmp	r3, #0
 800391c:	d000      	beq.n	8003920 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3getERKyS3_+0x2a>
                    while(1);
 800391e:	e7fe      	b.n	800391e <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	0c02      	lsrs	r2, r0, #16
 8003930:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003934:	0c0b      	lsrs	r3, r1, #16
 8003936:	4613      	mov	r3, r2
 8003938:	81fb      	strh	r3, [r7, #14]
                return value;
 800393a:	89fb      	ldrh	r3, [r7, #14]
            }
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1123            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003948:	b086      	sub	sp, #24
 800394a:	af00      	add	r7, sp, #0
 800394c:	60f8      	str	r0, [r7, #12]
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
 8003952:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1123);
 8003954:	f240 4363 	movw	r3, #1123	; 0x463
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	68b9      	ldr	r1, [r7, #8]
 800395c:	68f8      	ldr	r0, [r7, #12]
 800395e:	f7fe fe16 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003962:	78fb      	ldrb	r3, [r7, #3]
 8003964:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	e9d3 0100 	ldrd	r0, r1, [r3]
 800396c:	7dfb      	ldrb	r3, [r7, #23]
 800396e:	2200      	movs	r2, #0
 8003970:	4698      	mov	r8, r3
 8003972:	4691      	mov	r9, r2
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003980:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003984:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003988:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800398c:	2500      	movs	r5, #0
 800398e:	ea40 0a04 	orr.w	sl, r0, r4
 8003992:	ea41 0b05 	orr.w	fp, r1, r5
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2203      	movs	r2, #3
 80039a0:	701a      	strb	r2, [r3, #0]
            }
 80039a2:	bf00      	nop
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080039ac <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 1123) {
 80039b6:	6839      	ldr	r1, [r7, #0]
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	f7fe fe10 	bl	80025de <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 80039be:	4603      	mov	r3, r0
 80039c0:	461a      	mov	r2, r3
 80039c2:	f240 4363 	movw	r3, #1123	; 0x463
 80039c6:	429a      	cmp	r2, r3
 80039c8:	bf14      	ite	ne
 80039ca:	2301      	movne	r3, #1
 80039cc:	2300      	moveq	r3, #0
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d000      	beq.n	80039d6 <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 80039d4:	e7fe      	b.n	80039d4 <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	0c02      	lsrs	r2, r0, #16
 80039e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80039ea:	0c0b      	lsrs	r3, r1, #16
 80039ec:	4613      	mov	r3, r2
 80039ee:	73fb      	strb	r3, [r7, #15]
                return value;
 80039f0:	7bfb      	ldrb	r3, [r7, #15]
            }
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <_ZN3can7signals29SensorF_OD_CAN2_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1122            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 80039fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a00:	b088      	sub	sp, #32
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6178      	str	r0, [r7, #20]
 8003a06:	6139      	str	r1, [r7, #16]
 8003a08:	60fa      	str	r2, [r7, #12]
 8003a0a:	60bb      	str	r3, [r7, #8]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1122);
 8003a0c:	f240 4362 	movw	r3, #1122	; 0x462
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	6939      	ldr	r1, [r7, #16]
 8003a14:	6978      	ldr	r0, [r7, #20]
 8003a16:	f7fe fdba 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	69f9      	ldr	r1, [r7, #28]
 8003a26:	2000      	movs	r0, #0
 8003a28:	468a      	mov	sl, r1
 8003a2a:	4683      	mov	fp, r0
 8003a2c:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003a30:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003a34:	480c      	ldr	r0, [pc, #48]	; (8003a68 <_ZN3can7signals29SensorF_OD_CAN2_lastErrorCode3setERyS2_Rhm+0x6c>)
 8003a36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003a3a:	ea08 0400 	and.w	r4, r8, r0
 8003a3e:	ea09 0501 	and.w	r5, r9, r1
 8003a42:	ea42 0104 	orr.w	r1, r2, r4
 8003a46:	6039      	str	r1, [r7, #0]
 8003a48:	432b      	orrs	r3, r5
 8003a4a:	607b      	str	r3, [r7, #4]
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003a52:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2206      	movs	r2, #6
 8003a5a:	701a      	strb	r2, [r3, #0]
            }
 8003a5c:	bf00      	nop
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a66:	bf00      	nop
 8003a68:	ffff0000 	.word	0xffff0000

08003a6c <_ZN3can7signals24SensorF_OD_CAN2_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1121            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003a6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a70:	b086      	sub	sp, #24
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	60f8      	str	r0, [r7, #12]
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	607a      	str	r2, [r7, #4]
 8003a7a:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1121);
 8003a7c:	f240 4361 	movw	r3, #1121	; 0x461
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f7fe fd82 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003a8a:	78fb      	ldrb	r3, [r7, #3]
 8003a8c:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	2200      	movs	r2, #0
 8003a98:	4698      	mov	r8, r3
 8003a9a:	4691      	mov	r9, r2
 8003a9c:	f04f 0200 	mov.w	r2, #0
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003aa8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003aac:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003ab0:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003ab4:	2500      	movs	r5, #0
 8003ab6:	ea40 0a04 	orr.w	sl, r0, r4
 8003aba:	ea41 0b05 	orr.w	fp, r1, r5
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	701a      	strb	r2, [r3, #0]
            }
 8003aca:	bf00      	nop
 8003acc:	3718      	adds	r7, #24
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003ad4 <_ZN3can7signals24SensorF_OD_CAN2_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1120            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ad8:	b086      	sub	sp, #24
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	60f8      	str	r0, [r7, #12]
 8003ade:	60b9      	str	r1, [r7, #8]
 8003ae0:	607a      	str	r2, [r7, #4]
 8003ae2:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1120);
 8003ae4:	f44f 638c 	mov.w	r3, #1120	; 0x460
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f7fe fd4e 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003af2:	78fb      	ldrb	r3, [r7, #3]
 8003af4:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003afc:	7dfb      	ldrb	r3, [r7, #23]
 8003afe:	2200      	movs	r2, #0
 8003b00:	4698      	mov	r8, r3
 8003b02:	4691      	mov	r9, r2
 8003b04:	f04f 0200 	mov.w	r2, #0
 8003b08:	f04f 0300 	mov.w	r3, #0
 8003b0c:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003b10:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003b14:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003b18:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003b1c:	2500      	movs	r5, #0
 8003b1e:	ea40 0a04 	orr.w	sl, r0, r4
 8003b22:	ea41 0b05 	orr.w	fp, r1, r5
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2203      	movs	r2, #3
 8003b30:	701a      	strb	r2, [r3, #0]
            }
 8003b32:	bf00      	nop
 8003b34:	3718      	adds	r7, #24
 8003b36:	46bd      	mov	sp, r7
 8003b38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003b3c <_ZN3can7signals33SensorF_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b40:	b088      	sub	sp, #32
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6178      	str	r0, [r7, #20]
 8003b46:	6139      	str	r1, [r7, #16]
 8003b48:	60fa      	str	r2, [r7, #12]
 8003b4a:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b52:	d302      	bcc.n	8003b5a <_ZN3can7signals33SensorF_OD_CAN1_DelayedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8003b54:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003b58:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1113);
 8003b5a:	f240 4359 	movw	r3, #1113	; 0x459
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	6939      	ldr	r1, [r7, #16]
 8003b62:	6978      	ldr	r0, [r7, #20]
 8003b64:	f7fe fd13 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b72:	69f9      	ldr	r1, [r7, #28]
 8003b74:	2000      	movs	r0, #0
 8003b76:	468a      	mov	sl, r1
 8003b78:	4683      	mov	fp, r0
 8003b7a:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003b7e:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003b82:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8003b86:	0424      	lsls	r4, r4, #16
 8003b88:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8003b8c:	ea42 0104 	orr.w	r1, r2, r4
 8003b90:	6039      	str	r1, [r7, #0]
 8003b92:	432b      	orrs	r3, r5
 8003b94:	607b      	str	r3, [r7, #4]
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003b9c:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2205      	movs	r2, #5
 8003ba4:	701a      	strb	r2, [r3, #0]
            }
 8003ba6:	bf00      	nop
 8003ba8:	3720      	adds	r7, #32
 8003baa:	46bd      	mov	sp, r7
 8003bac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003bb0 <_ZN3can7signals27SensorF_OD_CAN1_ErrorStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1112            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb4:	b086      	sub	sp, #24
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
 8003bbe:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1112);
 8003bc0:	f44f 638b 	mov.w	r3, #1112	; 0x458
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	68b9      	ldr	r1, [r7, #8]
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f7fe fce0 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003bce:	78fb      	ldrb	r3, [r7, #3]
 8003bd0:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bd8:	7dfb      	ldrb	r3, [r7, #23]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	4698      	mov	r8, r3
 8003bde:	4691      	mov	r9, r2
 8003be0:	f04f 0200 	mov.w	r2, #0
 8003be4:	f04f 0300 	mov.w	r3, #0
 8003be8:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003bec:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003bf0:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003bf4:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003bf8:	2500      	movs	r5, #0
 8003bfa:	ea40 0a04 	orr.w	sl, r0, r4
 8003bfe:	ea41 0b05 	orr.w	fp, r1, r5
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	701a      	strb	r2, [r3, #0]
            }
 8003c0e:	bf00      	nop
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003c18 <_ZN3can7signals35SensorF_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003c18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c1c:	b088      	sub	sp, #32
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6178      	str	r0, [r7, #20]
 8003c22:	6139      	str	r1, [r7, #16]
 8003c24:	60fa      	str	r2, [r7, #12]
 8003c26:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c2e:	d302      	bcc.n	8003c36 <_ZN3can7signals35SensorF_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm+0x1e>
                    value = max;
 8003c30:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003c34:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1111);
 8003c36:	f240 4357 	movw	r3, #1111	; 0x457
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	6939      	ldr	r1, [r7, #16]
 8003c3e:	6978      	ldr	r0, [r7, #20]
 8003c40:	f7fe fca5 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4e:	69f9      	ldr	r1, [r7, #28]
 8003c50:	2000      	movs	r0, #0
 8003c52:	468a      	mov	sl, r1
 8003c54:	4683      	mov	fp, r0
 8003c56:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003c5a:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003c5e:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8003c62:	0424      	lsls	r4, r4, #16
 8003c64:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8003c68:	ea42 0104 	orr.w	r1, r2, r4
 8003c6c:	6039      	str	r1, [r7, #0]
 8003c6e:	432b      	orrs	r3, r5
 8003c70:	607b      	str	r3, [r7, #4]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003c78:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2205      	movs	r2, #5
 8003c80:	701a      	strb	r2, [r3, #0]
            }
 8003c82:	bf00      	nop
 8003c84:	3720      	adds	r7, #32
 8003c86:	46bd      	mov	sp, r7
 8003c88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003c8c <_ZN3can7signals22SensorF_OD_CAN1_Status3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1110            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c90:	b086      	sub	sp, #24
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	607a      	str	r2, [r7, #4]
 8003c9a:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1110);
 8003c9c:	f240 4356 	movw	r3, #1110	; 0x456
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	68f8      	ldr	r0, [r7, #12]
 8003ca6:	f7fe fc72 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003caa:	78fb      	ldrb	r3, [r7, #3]
 8003cac:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003cb4:	7dfb      	ldrb	r3, [r7, #23]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	4698      	mov	r8, r3
 8003cba:	4691      	mov	r9, r2
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003cc8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003ccc:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003cd0:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003cd4:	2500      	movs	r5, #0
 8003cd6:	ea40 0a04 	orr.w	sl, r0, r4
 8003cda:	ea41 0b05 	orr.w	fp, r1, r5
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2203      	movs	r2, #3
 8003ce8:	701a      	strb	r2, [r3, #0]
            }
 8003cea:	bf00      	nop
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003cf4 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3setERyS2_Rht>:
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint16_t min = static_cast<uint16_t>(125);
            constexpr static uint16_t max = static_cast<uint16_t>(1000);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8003cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cf8:	b088      	sub	sp, #32
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6178      	str	r0, [r7, #20]
 8003cfe:	6139      	str	r1, [r7, #16]
 8003d00:	60fa      	str	r2, [r7, #12]
 8003d02:	817b      	strh	r3, [r7, #10]
                if (value > max) {
 8003d04:	897b      	ldrh	r3, [r7, #10]
 8003d06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d0a:	d902      	bls.n	8003d12 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3setERyS2_Rht+0x1e>
                    value = max;
 8003d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d10:	817b      	strh	r3, [r7, #10]
                }
                if (value < min) {
 8003d12:	897b      	ldrh	r3, [r7, #10]
 8003d14:	2b7c      	cmp	r3, #124	; 0x7c
 8003d16:	d801      	bhi.n	8003d1c <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3setERyS2_Rht+0x28>
                    value = min;
 8003d18:	237d      	movs	r3, #125	; 0x7d
 8003d1a:	817b      	strh	r3, [r7, #10]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1108);
 8003d1c:	f240 4354 	movw	r3, #1108	; 0x454
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	6939      	ldr	r1, [r7, #16]
 8003d24:	6978      	ldr	r0, [r7, #20]
 8003d26:	f7fe fc32 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8003d2a:	897b      	ldrh	r3, [r7, #10]
 8003d2c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d34:	8bf9      	ldrh	r1, [r7, #30]
 8003d36:	2000      	movs	r0, #0
 8003d38:	4688      	mov	r8, r1
 8003d3a:	4681      	mov	r9, r0
 8003d3c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8003d40:	6079      	str	r1, [r7, #4]
 8003d42:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8003d46:	6039      	str	r1, [r7, #0]
 8003d48:	683c      	ldr	r4, [r7, #0]
 8003d4a:	2500      	movs	r5, #0
 8003d4c:	ea42 0a04 	orr.w	sl, r2, r4
 8003d50:	ea43 0b05 	orr.w	fp, r3, r5
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2204      	movs	r2, #4
 8003d5e:	701a      	strb	r2, [r3, #0]
            }
 8003d60:	bf00      	nop
 8003d62:	3720      	adds	r7, #32
 8003d64:	46bd      	mov	sp, r7
 8003d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003d6a <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b084      	sub	sp, #16
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 1108) {
 8003d74:	6839      	ldr	r1, [r7, #0]
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fe fc31 	bl	80025de <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f240 4354 	movw	r3, #1108	; 0x454
 8003d84:	429a      	cmp	r2, r3
 8003d86:	bf14      	ite	ne
 8003d88:	2301      	movne	r3, #1
 8003d8a:	2300      	moveq	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d000      	beq.n	8003d94 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3getERKyS3_+0x2a>
                    while(1);
 8003d92:	e7fe      	b.n	8003d92 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3getERKyS3_+0x28>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	0c02      	lsrs	r2, r0, #16
 8003da4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003da8:	0c0b      	lsrs	r3, r1, #16
 8003daa:	4613      	mov	r3, r2
 8003dac:	81fb      	strh	r3, [r7, #14]
                return value;
 8003dae:	89fb      	ldrh	r3, [r7, #14]
            }
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1107            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dbc:	b086      	sub	sp, #24
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	607a      	str	r2, [r7, #4]
 8003dc6:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1107);
 8003dc8:	f240 4353 	movw	r3, #1107	; 0x453
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	68b9      	ldr	r1, [r7, #8]
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f7fe fbdc 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003dd6:	78fb      	ldrb	r3, [r7, #3]
 8003dd8:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003de0:	7dfb      	ldrb	r3, [r7, #23]
 8003de2:	2200      	movs	r2, #0
 8003de4:	4698      	mov	r8, r3
 8003de6:	4691      	mov	r9, r2
 8003de8:	f04f 0200 	mov.w	r2, #0
 8003dec:	f04f 0300 	mov.w	r3, #0
 8003df0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003df4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003df8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003dfc:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003e00:	2500      	movs	r5, #0
 8003e02:	ea40 0a04 	orr.w	sl, r0, r4
 8003e06:	ea41 0b05 	orr.w	fp, r1, r5
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2203      	movs	r2, #3
 8003e14:	701a      	strb	r2, [r3, #0]
            }
 8003e16:	bf00      	nop
 8003e18:	3718      	adds	r7, #24
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e20 <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 1107) {
 8003e2a:	6839      	ldr	r1, [r7, #0]
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7fe fbd6 	bl	80025de <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8003e32:	4603      	mov	r3, r0
 8003e34:	461a      	mov	r2, r3
 8003e36:	f240 4353 	movw	r3, #1107	; 0x453
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	bf14      	ite	ne
 8003e3e:	2301      	movne	r3, #1
 8003e40:	2300      	moveq	r3, #0
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d000      	beq.n	8003e4a <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3getERKyS3_+0x2a>
                    while(1);
 8003e48:	e7fe      	b.n	8003e48 <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3getERKyS3_+0x28>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	0c02      	lsrs	r2, r0, #16
 8003e5a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003e5e:	0c0b      	lsrs	r3, r1, #16
 8003e60:	4613      	mov	r3, r2
 8003e62:	73fb      	strb	r3, [r7, #15]
                return value;
 8003e64:	7bfb      	ldrb	r3, [r7, #15]
            }
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
	...

08003e70 <_ZN3can7signals29SensorF_OD_CAN1_lastErrorCode3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1106            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e74:	b088      	sub	sp, #32
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6178      	str	r0, [r7, #20]
 8003e7a:	6139      	str	r1, [r7, #16]
 8003e7c:	60fa      	str	r2, [r7, #12]
 8003e7e:	60bb      	str	r3, [r7, #8]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1106);
 8003e80:	f240 4352 	movw	r3, #1106	; 0x452
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	6939      	ldr	r1, [r7, #16]
 8003e88:	6978      	ldr	r0, [r7, #20]
 8003e8a:	f7fe fb80 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e98:	69f9      	ldr	r1, [r7, #28]
 8003e9a:	2000      	movs	r0, #0
 8003e9c:	468a      	mov	sl, r1
 8003e9e:	4683      	mov	fp, r0
 8003ea0:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003ea4:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003ea8:	480c      	ldr	r0, [pc, #48]	; (8003edc <_ZN3can7signals29SensorF_OD_CAN1_lastErrorCode3setERyS2_Rhm+0x6c>)
 8003eaa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003eae:	ea08 0400 	and.w	r4, r8, r0
 8003eb2:	ea09 0501 	and.w	r5, r9, r1
 8003eb6:	ea42 0104 	orr.w	r1, r2, r4
 8003eba:	6039      	str	r1, [r7, #0]
 8003ebc:	432b      	orrs	r3, r5
 8003ebe:	607b      	str	r3, [r7, #4]
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003ec6:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2206      	movs	r2, #6
 8003ece:	701a      	strb	r2, [r3, #0]
            }
 8003ed0:	bf00      	nop
 8003ed2:	3720      	adds	r7, #32
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eda:	bf00      	nop
 8003edc:	ffff0000 	.word	0xffff0000

08003ee0 <_ZN3can7signals24SensorF_OD_CAN1_RxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1105            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ee4:	b086      	sub	sp, #24
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]
 8003eee:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1105);
 8003ef0:	f240 4351 	movw	r3, #1105	; 0x451
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	68b9      	ldr	r1, [r7, #8]
 8003ef8:	68f8      	ldr	r0, [r7, #12]
 8003efa:	f7fe fb48 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f08:	7dfb      	ldrb	r3, [r7, #23]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	4698      	mov	r8, r3
 8003f0e:	4691      	mov	r9, r2
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003f1c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003f20:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003f24:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003f28:	2500      	movs	r5, #0
 8003f2a:	ea40 0a04 	orr.w	sl, r0, r4
 8003f2e:	ea41 0b05 	orr.w	fp, r1, r5
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	701a      	strb	r2, [r3, #0]
            }
 8003f3e:	bf00      	nop
 8003f40:	3718      	adds	r7, #24
 8003f42:	46bd      	mov	sp, r7
 8003f44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003f48 <_ZN3can7signals24SensorF_OD_CAN1_TxErrCnt3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1104            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8003f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f4c:	b086      	sub	sp, #24
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	60f8      	str	r0, [r7, #12]
 8003f52:	60b9      	str	r1, [r7, #8]
 8003f54:	607a      	str	r2, [r7, #4]
 8003f56:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1104);
 8003f58:	f44f 638a 	mov.w	r3, #1104	; 0x450
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	68b9      	ldr	r1, [r7, #8]
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f7fe fb14 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8003f66:	78fb      	ldrb	r3, [r7, #3]
 8003f68:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f70:	7dfb      	ldrb	r3, [r7, #23]
 8003f72:	2200      	movs	r2, #0
 8003f74:	4698      	mov	r8, r3
 8003f76:	4691      	mov	r9, r2
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	f04f 0300 	mov.w	r3, #0
 8003f80:	ea4f 4309 	mov.w	r3, r9, lsl #16
 8003f84:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8003f88:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8003f8c:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8003f90:	2500      	movs	r5, #0
 8003f92:	ea40 0a04 	orr.w	sl, r0, r4
 8003f96:	ea41 0b05 	orr.w	fp, r1, r5
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	701a      	strb	r2, [r3, #0]
            }
 8003fa6:	bf00      	nop
 8003fa8:	3718      	adds	r7, #24
 8003faa:	46bd      	mov	sp, r7
 8003fac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003fb0 <_ZN3can7signals20SensorF_OD_BuildTime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8003fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb4:	b088      	sub	sp, #32
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	6178      	str	r0, [r7, #20]
 8003fba:	6139      	str	r1, [r7, #16]
 8003fbc:	60fa      	str	r2, [r7, #12]
 8003fbe:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fc6:	d302      	bcc.n	8003fce <_ZN3can7signals20SensorF_OD_BuildTime3setERyS2_Rhm+0x1e>
                    value = max;
 8003fc8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8003fcc:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1073);
 8003fce:	f240 4331 	movw	r3, #1073	; 0x431
 8003fd2:	68fa      	ldr	r2, [r7, #12]
 8003fd4:	6939      	ldr	r1, [r7, #16]
 8003fd6:	6978      	ldr	r0, [r7, #20]
 8003fd8:	f7fe fad9 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe6:	69f9      	ldr	r1, [r7, #28]
 8003fe8:	2000      	movs	r0, #0
 8003fea:	468a      	mov	sl, r1
 8003fec:	4683      	mov	fp, r0
 8003fee:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8003ff2:	ea4f 480a 	mov.w	r8, sl, lsl #16
 8003ff6:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8003ffa:	0424      	lsls	r4, r4, #16
 8003ffc:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8004000:	ea42 0104 	orr.w	r1, r2, r4
 8004004:	6039      	str	r1, [r7, #0]
 8004006:	432b      	orrs	r3, r5
 8004008:	607b      	str	r3, [r7, #4]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004010:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2205      	movs	r2, #5
 8004018:	701a      	strb	r2, [r3, #0]
            }
 800401a:	bf00      	nop
 800401c:	3720      	adds	r7, #32
 800401e:	46bd      	mov	sp, r7
 8004020:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004024 <_ZN3can7signals20SensorF_OD_BuildDate3setERyS2_Rhm>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1072            
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8004024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004028:	b088      	sub	sp, #32
 800402a:	af00      	add	r7, sp, #0
 800402c:	6178      	str	r0, [r7, #20]
 800402e:	6139      	str	r1, [r7, #16]
 8004030:	60fa      	str	r2, [r7, #12]
 8004032:	60bb      	str	r3, [r7, #8]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1072);
 8004034:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	6939      	ldr	r1, [r7, #16]
 800403c:	6978      	ldr	r0, [r7, #20]
 800403e:	f7fe faa6 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFF0000ull;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800404c:	69f9      	ldr	r1, [r7, #28]
 800404e:	2000      	movs	r0, #0
 8004050:	468a      	mov	sl, r1
 8004052:	4683      	mov	fp, r0
 8004054:	ea4f 491a 	mov.w	r9, sl, lsr #16
 8004058:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800405c:	480c      	ldr	r0, [pc, #48]	; (8004090 <_ZN3can7signals20SensorF_OD_BuildDate3setERyS2_Rhm+0x6c>)
 800405e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004062:	ea08 0400 	and.w	r4, r8, r0
 8004066:	ea09 0501 	and.w	r5, r9, r1
 800406a:	ea42 0104 	orr.w	r1, r2, r4
 800406e:	6039      	str	r1, [r7, #0]
 8004070:	432b      	orrs	r3, r5
 8004072:	607b      	str	r3, [r7, #4]
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	e9d7 1200 	ldrd	r1, r2, [r7]
 800407a:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 6;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2206      	movs	r2, #6
 8004082:	701a      	strb	r2, [r3, #0]
            }
 8004084:	bf00      	nop
 8004086:	3720      	adds	r7, #32
 8004088:	46bd      	mov	sp, r7
 800408a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800408e:	bf00      	nop
 8004090:	ffff0000 	.word	0xffff0000

08004094 <_ZN3can7signals19SensorF_OD_ChipUID23setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8004094:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004098:	b086      	sub	sp, #24
 800409a:	af00      	add	r7, sp, #0
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	607a      	str	r2, [r7, #4]
                if (value > max) {
 80040a2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80040a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040aa:	d305      	bcc.n	80040b8 <_ZN3can7signals19SensorF_OD_ChipUID23setERyS2_Rhy+0x24>
                    value = max;
 80040ac:	f04f 32ff 	mov.w	r2, #4294967295
 80040b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040b4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1057);
 80040b8:	f240 4321 	movw	r3, #1057	; 0x421
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f7fe fa64 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 80040c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80040ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80040d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	040b      	lsls	r3, r1, #16
 80040e2:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80040e6:	0402      	lsls	r2, r0, #16
 80040e8:	ea48 0402 	orr.w	r4, r8, r2
 80040ec:	ea49 0503 	orr.w	r5, r9, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2208      	movs	r2, #8
 80040fa:	701a      	strb	r2, [r3, #0]
            }
 80040fc:	bf00      	nop
 80040fe:	3718      	adds	r7, #24
 8004100:	46bd      	mov	sp, r7
 8004102:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004106 <_ZN3can7signals19SensorF_OD_ChipUID13setERyS2_Rhy>:
            using dataType = uint64_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint64_t min = static_cast<uint64_t>(0);
            constexpr static uint64_t max = static_cast<uint64_t>(281474976710655);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint64_t value) noexcept {
 8004106:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	607a      	str	r2, [r7, #4]
                if (value > max) {
 8004114:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800411c:	d305      	bcc.n	800412a <_ZN3can7signals19SensorF_OD_ChipUID13setERyS2_Rhy+0x24>
                    value = max;
 800411e:	f04f 32ff 	mov.w	r2, #4294967295
 8004122:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004126:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1056);
 800412a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	68b9      	ldr	r1, [r7, #8]
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f7fe fa2b 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint64_t rawValue = (value);
 8004138:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800413c:	e9c7 2304 	strd	r2, r3, [r7, #16]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFFFFFFFF0000ull;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004146:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800414a:	f04f 0200 	mov.w	r2, #0
 800414e:	f04f 0300 	mov.w	r3, #0
 8004152:	040b      	lsls	r3, r1, #16
 8004154:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8004158:	0402      	lsls	r2, r0, #16
 800415a:	ea48 0402 	orr.w	r4, r8, r2
 800415e:	ea49 0503 	orr.w	r5, r9, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	e9c3 4500 	strd	r4, r5, [r3]
                dlc = 8;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2208      	movs	r2, #8
 800416c:	701a      	strb	r2, [r3, #0]
            }
 800416e:	bf00      	nop
 8004170:	3718      	adds	r7, #24
 8004172:	46bd      	mov	sp, r7
 8004174:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004178 <_ZN3can7signals17SensorF_OD_SdcOut3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1046            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8004178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800417c:	b086      	sub	sp, #24
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
 8004186:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1046);
 8004188:	f240 4316 	movw	r3, #1046	; 0x416
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	68b9      	ldr	r1, [r7, #8]
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f7fe f9fc 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80041a0:	7dfb      	ldrb	r3, [r7, #23]
 80041a2:	2200      	movs	r2, #0
 80041a4:	4698      	mov	r8, r3
 80041a6:	4691      	mov	r9, r2
 80041a8:	f04f 0200 	mov.w	r2, #0
 80041ac:	f04f 0300 	mov.w	r3, #0
 80041b0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80041b4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80041b8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80041bc:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80041c0:	2500      	movs	r5, #0
 80041c2:	ea40 0a04 	orr.w	sl, r0, r4
 80041c6:	ea41 0b05 	orr.w	fp, r1, r5
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2203      	movs	r2, #3
 80041d4:	701a      	strb	r2, [r3, #0]
            }
 80041d6:	bf00      	nop
 80041d8:	3718      	adds	r7, #24
 80041da:	46bd      	mov	sp, r7
 80041dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080041e0 <_ZN3can7signals16SensorF_OD_SdcIn3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1045            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80041e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e4:	b086      	sub	sp, #24
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	607a      	str	r2, [r7, #4]
 80041ee:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1045);
 80041f0:	f240 4315 	movw	r3, #1045	; 0x415
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	68b9      	ldr	r1, [r7, #8]
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f7fe f9c8 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80041fe:	78fb      	ldrb	r3, [r7, #3]
 8004200:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004208:	7dfb      	ldrb	r3, [r7, #23]
 800420a:	2200      	movs	r2, #0
 800420c:	4698      	mov	r8, r3
 800420e:	4691      	mov	r9, r2
 8004210:	f04f 0200 	mov.w	r2, #0
 8004214:	f04f 0300 	mov.w	r3, #0
 8004218:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800421c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004220:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004224:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8004228:	2500      	movs	r5, #0
 800422a:	ea40 0a04 	orr.w	sl, r0, r4
 800422e:	ea41 0b05 	orr.w	fp, r1, r5
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2203      	movs	r2, #3
 800423c:	701a      	strb	r2, [r3, #0]
            }
 800423e:	bf00      	nop
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004248 <_ZN3can7signals18SensorF_OD_runtime3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(16777215);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8004248:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800424c:	b088      	sub	sp, #32
 800424e:	af00      	add	r7, sp, #0
 8004250:	6178      	str	r0, [r7, #20]
 8004252:	6139      	str	r1, [r7, #16]
 8004254:	60fa      	str	r2, [r7, #12]
 8004256:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800425e:	d302      	bcc.n	8004266 <_ZN3can7signals18SensorF_OD_runtime3setERyS2_Rhm+0x1e>
                    value = max;
 8004260:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8004264:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1044);
 8004266:	f240 4314 	movw	r3, #1044	; 0x414
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	6939      	ldr	r1, [r7, #16]
 800426e:	6978      	ldr	r0, [r7, #20]
 8004270:	f7fe f98d 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = (value);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFFFF0000ull;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427e:	69f9      	ldr	r1, [r7, #28]
 8004280:	2000      	movs	r0, #0
 8004282:	468a      	mov	sl, r1
 8004284:	4683      	mov	fp, r0
 8004286:	ea4f 491a 	mov.w	r9, sl, lsr #16
 800428a:	ea4f 480a 	mov.w	r8, sl, lsl #16
 800428e:	ea4f 4418 	mov.w	r4, r8, lsr #16
 8004292:	0424      	lsls	r4, r4, #16
 8004294:	f009 05ff 	and.w	r5, r9, #255	; 0xff
 8004298:	ea42 0104 	orr.w	r1, r2, r4
 800429c:	6039      	str	r1, [r7, #0]
 800429e:	432b      	orrs	r3, r5
 80042a0:	607b      	str	r3, [r7, #4]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80042a8:	e9c3 1200 	strd	r1, r2, [r3]
                dlc = 5;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2205      	movs	r2, #5
 80042b0:	701a      	strb	r2, [r3, #0]
            }
 80042b2:	bf00      	nop
 80042b4:	3720      	adds	r7, #32
 80042b6:	46bd      	mov	sp, r7
 80042b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080042bc <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(65.535);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80042bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042c0:	b088      	sub	sp, #32
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6178      	str	r0, [r7, #20]
 80042c6:	6139      	str	r1, [r7, #16]
 80042c8:	60fa      	str	r2, [r7, #12]
 80042ca:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80042ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80042d2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8004364 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0xa8>
 80042d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042de:	dd01      	ble.n	80042e4 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0x28>
                    value = max;
 80042e0:	4b21      	ldr	r3, [pc, #132]	; (8004368 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0xac>)
 80042e2:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80042e4:	edd7 7a02 	vldr	s15, [r7, #8]
 80042e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80042ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f0:	d502      	bpl.n	80042f8 <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0x3c>
                    value = min;
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1043);
 80042f8:	f240 4313 	movw	r3, #1043	; 0x413
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	6939      	ldr	r1, [r7, #16]
 8004300:	6978      	ldr	r0, [r7, #20]
 8004302:	f7fe f944 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.001f)));
 8004306:	edd7 7a02 	vldr	s15, [r7, #8]
 800430a:	eddf 6a18 	vldr	s13, [pc, #96]	; 800436c <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf+0xb0>
 800430e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004312:	eeb0 0a47 	vmov.f32	s0, s14
 8004316:	f7fd fff8 	bl	800230a <_ZSt5roundf>
 800431a:	eef0 7a40 	vmov.f32	s15, s0
 800431e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004322:	ee17 3a90 	vmov	r3, s15
 8004326:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432e:	8bf9      	ldrh	r1, [r7, #30]
 8004330:	2000      	movs	r0, #0
 8004332:	4688      	mov	r8, r1
 8004334:	4681      	mov	r9, r0
 8004336:	ea4f 4118 	mov.w	r1, r8, lsr #16
 800433a:	6079      	str	r1, [r7, #4]
 800433c:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004340:	6039      	str	r1, [r7, #0]
 8004342:	683c      	ldr	r4, [r7, #0]
 8004344:	2500      	movs	r5, #0
 8004346:	ea42 0a04 	orr.w	sl, r2, r4
 800434a:	ea43 0b05 	orr.w	fp, r3, r5
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2204      	movs	r2, #4
 8004358:	701a      	strb	r2, [r3, #0]
            }
 800435a:	bf00      	nop
 800435c:	3720      	adds	r7, #32
 800435e:	46bd      	mov	sp, r7
 8004360:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004364:	428311ec 	.word	0x428311ec
 8004368:	428311ec 	.word	0x428311ec
 800436c:	3a83126f 	.word	0x3a83126f

08004370 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(-30);
            constexpr static float max = static_cast<float>(625.35);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 8004370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004374:	b088      	sub	sp, #32
 8004376:	af00      	add	r7, sp, #0
 8004378:	6178      	str	r0, [r7, #20]
 800437a:	6139      	str	r1, [r7, #16]
 800437c:	60fa      	str	r2, [r7, #12]
 800437e:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 8004382:	edd7 7a02 	vldr	s15, [r7, #8]
 8004386:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004424 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0xb4>
 800438a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800438e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004392:	dd01      	ble.n	8004398 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0x28>
                    value = max;
 8004394:	4b24      	ldr	r3, [pc, #144]	; (8004428 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0xb8>)
 8004396:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 8004398:	edd7 7a02 	vldr	s15, [r7, #8]
 800439c:	eebb 7a0e 	vmov.f32	s14, #190	; 0xc1f00000 -30.0
 80043a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a8:	d501      	bpl.n	80043ae <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0x3e>
                    value = min;
 80043aa:	4b20      	ldr	r3, [pc, #128]	; (800442c <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0xbc>)
 80043ac:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1042);
 80043ae:	f240 4312 	movw	r3, #1042	; 0x412
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	6939      	ldr	r1, [r7, #16]
 80043b6:	6978      	ldr	r0, [r7, #20]
 80043b8:	f7fe f8e9 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value - (-30.0f)) / (0.01f)));
 80043bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80043c0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80043c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80043c8:	eddf 6a19 	vldr	s13, [pc, #100]	; 8004430 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf+0xc0>
 80043cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80043d0:	eeb0 0a47 	vmov.f32	s0, s14
 80043d4:	f7fd ff99 	bl	800230a <_ZSt5roundf>
 80043d8:	eef0 7a40 	vmov.f32	s15, s0
 80043dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80043e0:	ee17 3a90 	vmov	r3, s15
 80043e4:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	8bf9      	ldrh	r1, [r7, #30]
 80043ee:	2000      	movs	r0, #0
 80043f0:	4688      	mov	r8, r1
 80043f2:	4681      	mov	r9, r0
 80043f4:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80043f8:	6079      	str	r1, [r7, #4]
 80043fa:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80043fe:	6039      	str	r1, [r7, #0]
 8004400:	683c      	ldr	r4, [r7, #0]
 8004402:	2500      	movs	r5, #0
 8004404:	ea42 0a04 	orr.w	sl, r2, r4
 8004408:	ea43 0b05 	orr.w	fp, r3, r5
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2204      	movs	r2, #4
 8004416:	701a      	strb	r2, [r3, #0]
            }
 8004418:	bf00      	nop
 800441a:	3720      	adds	r7, #32
 800441c:	46bd      	mov	sp, r7
 800441e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004422:	bf00      	nop
 8004424:	441c5666 	.word	0x441c5666
 8004428:	441c5666 	.word	0x441c5666
 800442c:	c1f00000 	.word	0xc1f00000
 8004430:	3c23d70a 	.word	0x3c23d70a

08004434 <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm>:
            using dataType = uint32_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static uint32_t min = static_cast<uint32_t>(0);
            constexpr static uint32_t max = static_cast<uint32_t>(262140);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint32_t value) noexcept {
 8004434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004438:	b088      	sub	sp, #32
 800443a:	af00      	add	r7, sp, #0
 800443c:	6178      	str	r0, [r7, #20]
 800443e:	6139      	str	r1, [r7, #16]
 8004440:	60fa      	str	r2, [r7, #12]
 8004442:	60bb      	str	r3, [r7, #8]
                if (value > max) {
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4a16      	ldr	r2, [pc, #88]	; (80044a0 <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm+0x6c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d901      	bls.n	8004450 <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm+0x1c>
                    value = max;
 800444c:	4b14      	ldr	r3, [pc, #80]	; (80044a0 <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm+0x6c>)
 800444e:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
                    value = min;
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1041);
 8004450:	f240 4311 	movw	r3, #1041	; 0x411
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	6939      	ldr	r1, [r7, #16]
 8004458:	6978      	ldr	r0, [r7, #20]
 800445a:	f7fe f898 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint32_t rawValue = static_cast<uint32_t>((value) / (4));
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	089b      	lsrs	r3, r3, #2
 8004462:	61fb      	str	r3, [r7, #28]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800446a:	69f9      	ldr	r1, [r7, #28]
 800446c:	2000      	movs	r0, #0
 800446e:	4688      	mov	r8, r1
 8004470:	4681      	mov	r9, r0
 8004472:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004476:	6079      	str	r1, [r7, #4]
 8004478:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800447c:	6039      	str	r1, [r7, #0]
 800447e:	683c      	ldr	r4, [r7, #0]
 8004480:	2500      	movs	r5, #0
 8004482:	ea42 0a04 	orr.w	sl, r2, r4
 8004486:	ea43 0b05 	orr.w	fp, r3, r5
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2204      	movs	r2, #4
 8004494:	701a      	strb	r2, [r3, #0]
            }
 8004496:	bf00      	nop
 8004498:	3720      	adds	r7, #32
 800449a:	46bd      	mov	sp, r7
 800449c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044a0:	0003fffc 	.word	0x0003fffc

080044a4 <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf>:
            using dataType = float;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static float min = static_cast<float>(0);
            constexpr static float max = static_cast<float>(100);
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, float value) noexcept {
 80044a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a8:	b088      	sub	sp, #32
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6178      	str	r0, [r7, #20]
 80044ae:	6139      	str	r1, [r7, #16]
 80044b0:	60fa      	str	r2, [r7, #12]
 80044b2:	ed87 0a02 	vstr	s0, [r7, #8]
                if (value > max) {
 80044b6:	edd7 7a02 	vldr	s15, [r7, #8]
 80044ba:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8004558 <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf+0xb4>
 80044be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c6:	dd01      	ble.n	80044cc <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf+0x28>
                    value = max;
 80044c8:	4b24      	ldr	r3, [pc, #144]	; (800455c <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf+0xb8>)
 80044ca:	60bb      	str	r3, [r7, #8]
                }
                if (value < min) {
 80044cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80044d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80044d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d8:	d502      	bpl.n	80044e0 <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf+0x3c>
                    value = min;
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	60bb      	str	r3, [r7, #8]
                }
                SensorF_SDO_ID::set(intel, motorola, dlc, 1040);
 80044e0:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	6939      	ldr	r1, [r7, #16]
 80044e8:	6978      	ldr	r0, [r7, #20]
 80044ea:	f7fe f850 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = static_cast<uint8_t>(STD_ROUND((value) / (0.5f)));
 80044ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80044f2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80044f6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80044fa:	eeb0 0a47 	vmov.f32	s0, s14
 80044fe:	f7fd ff04 	bl	800230a <_ZSt5roundf>
 8004502:	eef0 7a40 	vmov.f32	s15, s0
 8004506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800450a:	edc7 7a01 	vstr	s15, [r7, #4]
 800450e:	793b      	ldrb	r3, [r7, #4]
 8004510:	77fb      	strb	r3, [r7, #31]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004518:	7ffb      	ldrb	r3, [r7, #31]
 800451a:	2200      	movs	r2, #0
 800451c:	4698      	mov	r8, r3
 800451e:	4691      	mov	r9, r2
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800452c:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004530:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004534:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8004538:	2500      	movs	r5, #0
 800453a:	ea40 0a04 	orr.w	sl, r0, r4
 800453e:	ea41 0b05 	orr.w	fp, r1, r5
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2203      	movs	r2, #3
 800454c:	701a      	strb	r2, [r3, #0]
            }
 800454e:	bf00      	nop
 8004550:	3720      	adds	r7, #32
 8004552:	46bd      	mov	sp, r7
 8004554:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004558:	42c80000 	.word	0x42c80000
 800455c:	42c80000 	.word	0x42c80000

08004560 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 33            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8004560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004564:	b088      	sub	sp, #32
 8004566:	af00      	add	r7, sp, #0
 8004568:	6178      	str	r0, [r7, #20]
 800456a:	6139      	str	r1, [r7, #16]
 800456c:	60fa      	str	r2, [r7, #12]
 800456e:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 33);
 8004570:	2321      	movs	r3, #33	; 0x21
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	6939      	ldr	r1, [r7, #16]
 8004576:	6978      	ldr	r0, [r7, #20]
 8004578:	f7fe f809 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800457c:	897b      	ldrh	r3, [r7, #10]
 800457e:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	8bf9      	ldrh	r1, [r7, #30]
 8004588:	2000      	movs	r0, #0
 800458a:	4688      	mov	r8, r1
 800458c:	4681      	mov	r9, r0
 800458e:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004592:	6079      	str	r1, [r7, #4]
 8004594:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004598:	6039      	str	r1, [r7, #0]
 800459a:	683c      	ldr	r4, [r7, #0]
 800459c:	2500      	movs	r5, #0
 800459e:	ea42 0a04 	orr.w	sl, r2, r4
 80045a2:	ea43 0b05 	orr.w	fp, r3, r5
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2204      	movs	r2, #4
 80045b0:	701a      	strb	r2, [r3, #0]
            }
 80045b2:	bf00      	nop
 80045b4:	3720      	adds	r7, #32
 80045b6:	46bd      	mov	sp, r7
 80045b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080045bc <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 33) {
 80045c6:	6839      	ldr	r1, [r7, #0]
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7fe f808 	bl	80025de <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b21      	cmp	r3, #33	; 0x21
 80045d2:	bf14      	ite	ne
 80045d4:	2301      	movne	r3, #1
 80045d6:	2300      	moveq	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d000      	beq.n	80045e0 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3getERKyS3_+0x24>
                    while(1);
 80045de:	e7fe      	b.n	80045de <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	0c02      	lsrs	r2, r0, #16
 80045f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80045f4:	0c0b      	lsrs	r3, r1, #16
 80045f6:	4613      	mov	r3, r2
 80045f8:	81fb      	strh	r3, [r7, #14]
                return value;
 80045fa:	89fb      	ldrh	r3, [r7, #14]
            }
 80045fc:	4618      	mov	r0, r3
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <_ZN3can7signals25SensorF_OD_SendOdOnBootup3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 32            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 8004604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004608:	b086      	sub	sp, #24
 800460a:	af00      	add	r7, sp, #0
 800460c:	60f8      	str	r0, [r7, #12]
 800460e:	60b9      	str	r1, [r7, #8]
 8004610:	607a      	str	r2, [r7, #4]
 8004612:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 32);
 8004614:	2320      	movs	r3, #32
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	68b9      	ldr	r1, [r7, #8]
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f7fd ffb7 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	e9d3 0100 	ldrd	r0, r1, [r3]
 800462a:	7dfb      	ldrb	r3, [r7, #23]
 800462c:	2200      	movs	r2, #0
 800462e:	4698      	mov	r8, r3
 8004630:	4691      	mov	r9, r2
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	f04f 0300 	mov.w	r3, #0
 800463a:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800463e:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8004642:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004646:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 800464a:	2500      	movs	r5, #0
 800464c:	ea40 0a04 	orr.w	sl, r0, r4
 8004650:	ea41 0b05 	orr.w	fp, r1, r5
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2203      	movs	r2, #3
 800465e:	701a      	strb	r2, [r3, #0]
            }
 8004660:	bf00      	nop
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800466a <_ZN3can7signals25SensorF_OD_SendOdOnBootup3getERKyS3_>:
            constexpr static inline uint8_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800466a:	b580      	push	{r7, lr}
 800466c:	b084      	sub	sp, #16
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 32) {
 8004674:	6839      	ldr	r1, [r7, #0]
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fd ffb1 	bl	80025de <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 800467c:	4603      	mov	r3, r0
 800467e:	2b20      	cmp	r3, #32
 8004680:	bf14      	ite	ne
 8004682:	2301      	movne	r3, #1
 8004684:	2300      	moveq	r3, #0
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d000      	beq.n	800468e <_ZN3can7signals25SensorF_OD_SendOdOnBootup3getERKyS3_+0x24>
                    while(1);
 800468c:	e7fe      	b.n	800468c <_ZN3can7signals25SensorF_OD_SendOdOnBootup3getERKyS3_+0x22>
                }
                uint8_t value = static_cast<uint8_t>((intel & 0xFF0000ull) >> 16);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004694:	f04f 0200 	mov.w	r2, #0
 8004698:	f04f 0300 	mov.w	r3, #0
 800469c:	0c02      	lsrs	r2, r0, #16
 800469e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80046a2:	0c0b      	lsrs	r3, r1, #16
 80046a4:	4613      	mov	r3, r2
 80046a6:	73fb      	strb	r3, [r7, #15]
                return value;
 80046a8:	7bfb      	ldrb	r3, [r7, #15]
            }
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <_ZN3can7signals28SensorF_OD_HeartbeatInterval3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 16            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80046b2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6178      	str	r0, [r7, #20]
 80046bc:	6139      	str	r1, [r7, #16]
 80046be:	60fa      	str	r2, [r7, #12]
 80046c0:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 16);
 80046c2:	2310      	movs	r3, #16
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	6939      	ldr	r1, [r7, #16]
 80046c8:	6978      	ldr	r0, [r7, #20]
 80046ca:	f7fd ff60 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80046ce:	897b      	ldrh	r3, [r7, #10]
 80046d0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d8:	8bf9      	ldrh	r1, [r7, #30]
 80046da:	2000      	movs	r0, #0
 80046dc:	4688      	mov	r8, r1
 80046de:	4681      	mov	r9, r0
 80046e0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80046e4:	6079      	str	r1, [r7, #4]
 80046e6:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80046ea:	6039      	str	r1, [r7, #0]
 80046ec:	683c      	ldr	r4, [r7, #0]
 80046ee:	2500      	movs	r5, #0
 80046f0:	ea42 0a04 	orr.w	sl, r2, r4
 80046f4:	ea43 0b05 	orr.w	fp, r3, r5
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2204      	movs	r2, #4
 8004702:	701a      	strb	r2, [r3, #0]
            }
 8004704:	bf00      	nop
 8004706:	3720      	adds	r7, #32
 8004708:	46bd      	mov	sp, r7
 800470a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800470e <_ZN3can7signals28SensorF_OD_HeartbeatInterval3getERKyS3_>:
            constexpr static inline uint16_t get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800470e:	b580      	push	{r7, lr}
 8004710:	b084      	sub	sp, #16
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
 8004716:	6039      	str	r1, [r7, #0]
                if (SensorF_SDO_ID::get(intel, motorola) != 16) {
 8004718:	6839      	ldr	r1, [r7, #0]
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fd ff5f 	bl	80025de <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8004720:	4603      	mov	r3, r0
 8004722:	2b10      	cmp	r3, #16
 8004724:	bf14      	ite	ne
 8004726:	2301      	movne	r3, #1
 8004728:	2300      	moveq	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d000      	beq.n	8004732 <_ZN3can7signals28SensorF_OD_HeartbeatInterval3getERKyS3_+0x24>
                    while(1);
 8004730:	e7fe      	b.n	8004730 <_ZN3can7signals28SensorF_OD_HeartbeatInterval3getERKyS3_+0x22>
                }
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFF0000ull) >> 16);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	0c02      	lsrs	r2, r0, #16
 8004742:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004746:	0c0b      	lsrs	r3, r1, #16
 8004748:	4613      	mov	r3, r2
 800474a:	81fb      	strh	r3, [r7, #14]
                return value;
 800474c:	89fb      	ldrh	r3, [r7, #14]
            }
 800474e:	4618      	mov	r0, r3
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <_ZN3can7signals21SensorF_OD_DbcVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 5            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 8004756:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af00      	add	r7, sp, #0
 800475e:	6178      	str	r0, [r7, #20]
 8004760:	6139      	str	r1, [r7, #16]
 8004762:	60fa      	str	r2, [r7, #12]
 8004764:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 5);
 8004766:	2305      	movs	r3, #5
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	6939      	ldr	r1, [r7, #16]
 800476c:	6978      	ldr	r0, [r7, #20]
 800476e:	f7fd ff0e 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 8004772:	897b      	ldrh	r3, [r7, #10]
 8004774:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800477c:	8bf9      	ldrh	r1, [r7, #30]
 800477e:	2000      	movs	r0, #0
 8004780:	4688      	mov	r8, r1
 8004782:	4681      	mov	r9, r0
 8004784:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004788:	6079      	str	r1, [r7, #4]
 800478a:	ea4f 4108 	mov.w	r1, r8, lsl #16
 800478e:	6039      	str	r1, [r7, #0]
 8004790:	683c      	ldr	r4, [r7, #0]
 8004792:	2500      	movs	r5, #0
 8004794:	ea42 0a04 	orr.w	sl, r2, r4
 8004798:	ea43 0b05 	orr.w	fp, r3, r5
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2204      	movs	r2, #4
 80047a6:	701a      	strb	r2, [r3, #0]
            }
 80047a8:	bf00      	nop
 80047aa:	3720      	adds	r7, #32
 80047ac:	46bd      	mov	sp, r7
 80047ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080047b2 <_ZN3can7signals23SensorF_OD_StackVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 4            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 80047b2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b6:	b088      	sub	sp, #32
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6178      	str	r0, [r7, #20]
 80047bc:	6139      	str	r1, [r7, #16]
 80047be:	60fa      	str	r2, [r7, #12]
 80047c0:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 4);
 80047c2:	2304      	movs	r3, #4
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	6939      	ldr	r1, [r7, #16]
 80047c8:	6978      	ldr	r0, [r7, #20]
 80047ca:	f7fd fee0 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 80047ce:	897b      	ldrh	r3, [r7, #10]
 80047d0:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d8:	8bf9      	ldrh	r1, [r7, #30]
 80047da:	2000      	movs	r0, #0
 80047dc:	4688      	mov	r8, r1
 80047de:	4681      	mov	r9, r0
 80047e0:	ea4f 4118 	mov.w	r1, r8, lsr #16
 80047e4:	6079      	str	r1, [r7, #4]
 80047e6:	ea4f 4108 	mov.w	r1, r8, lsl #16
 80047ea:	6039      	str	r1, [r7, #0]
 80047ec:	683c      	ldr	r4, [r7, #0]
 80047ee:	2500      	movs	r5, #0
 80047f0:	ea42 0a04 	orr.w	sl, r2, r4
 80047f4:	ea43 0b05 	orr.w	fp, r3, r5
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2204      	movs	r2, #4
 8004802:	701a      	strb	r2, [r3, #0]
            }
 8004804:	bf00      	nop
 8004806:	3720      	adds	r7, #32
 8004808:	46bd      	mov	sp, r7
 800480a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800480e <_ZN3can7signals26SensorF_OD_ProtocolVersion3setERyS2_Rht>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 3            
            using dataType = uint16_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint16_t value) noexcept {
 800480e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af00      	add	r7, sp, #0
 8004816:	6178      	str	r0, [r7, #20]
 8004818:	6139      	str	r1, [r7, #16]
 800481a:	60fa      	str	r2, [r7, #12]
 800481c:	817b      	strh	r3, [r7, #10]
                SensorF_SDO_ID::set(intel, motorola, dlc, 3);
 800481e:	2303      	movs	r3, #3
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	6939      	ldr	r1, [r7, #16]
 8004824:	6978      	ldr	r0, [r7, #20]
 8004826:	f7fd feb2 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint16_t rawValue = (value);
 800482a:	897b      	ldrh	r3, [r7, #10]
 800482c:	83fb      	strh	r3, [r7, #30]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFFF0000ull;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004834:	8bf9      	ldrh	r1, [r7, #30]
 8004836:	2000      	movs	r0, #0
 8004838:	4688      	mov	r8, r1
 800483a:	4681      	mov	r9, r0
 800483c:	ea4f 4118 	mov.w	r1, r8, lsr #16
 8004840:	6079      	str	r1, [r7, #4]
 8004842:	ea4f 4108 	mov.w	r1, r8, lsl #16
 8004846:	6039      	str	r1, [r7, #0]
 8004848:	683c      	ldr	r4, [r7, #0]
 800484a:	2500      	movs	r5, #0
 800484c:	ea42 0a04 	orr.w	sl, r2, r4
 8004850:	ea43 0b05 	orr.w	fp, r3, r5
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 4;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2204      	movs	r2, #4
 800485e:	701a      	strb	r2, [r3, #0]
            }
 8004860:	bf00      	nop
 8004862:	3720      	adds	r7, #32
 8004864:	46bd      	mov	sp, r7
 8004866:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800486a <_ZN3can7signals21SensorF_OD_NodeStatus3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 2            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 800486a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800486e:	b086      	sub	sp, #24
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
 8004878:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 2);
 800487a:	2302      	movs	r3, #2
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	68b9      	ldr	r1, [r7, #8]
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f7fd fe84 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 8004886:	78fb      	ldrb	r3, [r7, #3]
 8004888:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004890:	7dfb      	ldrb	r3, [r7, #23]
 8004892:	2200      	movs	r2, #0
 8004894:	4698      	mov	r8, r3
 8004896:	4691      	mov	r9, r2
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80048a4:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80048a8:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80048ac:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 80048b0:	2500      	movs	r5, #0
 80048b2:	ea40 0a04 	orr.w	sl, r0, r4
 80048b6:	ea41 0b05 	orr.w	fp, r1, r5
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2203      	movs	r2, #3
 80048c4:	701a      	strb	r2, [r3, #0]
            }
 80048c6:	bf00      	nop
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080048d0 <_ZN3can7signals17SensorF_OD_NodeID3setERyS2_Rhh>:
            public:
            // This signal is multiplexed by SensorF_SDO_ID == 1            
            using dataType = uint8_t;
            constexpr static uint8_t numIds = 2;
            constexpr static uint32_t ids[] = { 0x581, 0x5C1 };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, uint8_t value) noexcept {
 80048d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048d4:	b086      	sub	sp, #24
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	607a      	str	r2, [r7, #4]
 80048de:	70fb      	strb	r3, [r7, #3]
                SensorF_SDO_ID::set(intel, motorola, dlc, 1);
 80048e0:	2301      	movs	r3, #1
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	68b9      	ldr	r1, [r7, #8]
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f7fd fe51 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
                uint8_t rawValue = (value);
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	75fb      	strb	r3, [r7, #23]
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFF0000ull;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048f6:	7dfb      	ldrb	r3, [r7, #23]
 80048f8:	2200      	movs	r2, #0
 80048fa:	4698      	mov	r8, r3
 80048fc:	4691      	mov	r9, r2
 80048fe:	f04f 0200 	mov.w	r2, #0
 8004902:	f04f 0300 	mov.w	r3, #0
 8004906:	ea4f 4309 	mov.w	r3, r9, lsl #16
 800490a:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 800490e:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8004912:	f402 047f 	and.w	r4, r2, #16711680	; 0xff0000
 8004916:	2500      	movs	r5, #0
 8004918:	ea40 0a04 	orr.w	sl, r0, r4
 800491c:	ea41 0b05 	orr.w	fp, r1, r5
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	e9c3 ab00 	strd	sl, fp, [r3]
                dlc = 3;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2203      	movs	r2, #3
 800492a:	701a      	strb	r2, [r3, #0]
            }
 800492c:	bf00      	nop
 800492e:	3718      	adds	r7, #24
 8004930:	46bd      	mov	sp, r7
 8004932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004936 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8004936:	b580      	push	{r7, lr}
 8004938:	b086      	sub	sp, #24
 800493a:	af02      	add	r7, sp, #8
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	607a      	str	r2, [r7, #4]
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	2300      	movs	r3, #0
 800494a:	2202      	movs	r2, #2
 800494c:	f240 6101 	movw	r1, #1537	; 0x601
 8004950:	f7fd fceb 	bl	800232a <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8004958:	f240 6201 	movw	r2, #1537	; 0x601
 800495c:	4293      	cmp	r3, r2
 800495e:	d000      	beq.n	8004962 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8004960:	e7fe      	b.n	8004960 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
 8004976:	6839      	ldr	r1, [r7, #0]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	331c      	adds	r3, #28
 800497c:	461a      	mov	r2, r3
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff ffd9 	bl	8004936 <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4618      	mov	r0, r3
 8004988:	3708      	adds	r7, #8
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <_Z24handleSDORequestDownloadRK9RxMessage>:


/**************************************************************************
* Functions to handle a SDO download and upload request.                  *
***************************************************************************/
void handleSDORequestDownload(const RxMessage& rxMsgSdoReq) {
 800498e:	b580      	push	{r7, lr}
 8004990:	b08a      	sub	sp, #40	; 0x28
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SensorF_SDO_Req_Down> msgSdoReq(rxMsgSdoReq);
 8004996:	f107 0308 	add.w	r3, r7, #8
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff ffe5 	bl	800496c <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEEC1ERK9RxMessage>
    uint16_t sdoId = msgSdoReq.get<can::signals::SensorF_SDO_ID>();
 80049a2:	f107 0308 	add.w	r3, r7, #8
 80049a6:	4618      	mov	r0, r3
 80049a8:	f002 fc48 	bl	800723c <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEE3getINS_7signals14SensorF_SDO_IDEEENT_8dataTypeEv>
 80049ac:	4603      	mov	r3, r0
 80049ae:	84fb      	strh	r3, [r7, #38]	; 0x26
    handleSDORequestDownloadBySDOID(sdoId);
 80049b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 f814 	bl	80049e0 <_Z31handleSDORequestDownloadBySDOIDt>
}
 80049b8:	bf00      	nop
 80049ba:	3728      	adds	r7, #40	; 0x28
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEEC1Ev>:
        constexpr Message() : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId} {}
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	2300      	movs	r3, #0
 80049cc:	2208      	movs	r2, #8
 80049ce:	f240 5181 	movw	r1, #1409	; 0x581
 80049d2:	f7fc fa8b 	bl	8000eec <_ZN3can11MessageBaseC1Emhb>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <_Z31handleSDORequestDownloadBySDOIDt>:
void handleSDORequestDownloadBySDOID(const uint16_t sdoId) {    
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b092      	sub	sp, #72	; 0x48
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	80fb      	strh	r3, [r7, #6]
    can::Message<can::messages::SensorF_SDO_Resp> msgSdoResp;
 80049ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7ff ffe6 	bl	80049c0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SensorF_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 80049f4:	2301      	movs	r3, #1
 80049f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    switch (sdoId) {
 80049fa:	88fb      	ldrh	r3, [r7, #6]
 80049fc:	f640 5201 	movw	r2, #3329	; 0xd01
 8004a00:	4293      	cmp	r3, r2
 8004a02:	f000 84e9 	beq.w	80053d8 <_Z31handleSDORequestDownloadBySDOIDt+0x9f8>
 8004a06:	f640 5201 	movw	r2, #3329	; 0xd01
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	f300 84f3 	bgt.w	80053f6 <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004a10:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004a14:	f000 84d1 	beq.w	80053ba <_Z31handleSDORequestDownloadBySDOIDt+0x9da>
 8004a18:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 8004a1c:	f300 84eb 	bgt.w	80053f6 <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004a20:	f640 4201 	movw	r2, #3073	; 0xc01
 8004a24:	4293      	cmp	r3, r2
 8004a26:	f000 84ba 	beq.w	800539e <_Z31handleSDORequestDownloadBySDOIDt+0x9be>
 8004a2a:	f640 4201 	movw	r2, #3073	; 0xc01
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	f300 84e1 	bgt.w	80053f6 <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004a34:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a38:	f000 84a3 	beq.w	8005382 <_Z31handleSDORequestDownloadBySDOIDt+0x9a2>
 8004a3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a40:	f300 84d9 	bgt.w	80053f6 <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004a44:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004a48:	f000 848c 	beq.w	8005364 <_Z31handleSDORequestDownloadBySDOIDt+0x984>
 8004a4c:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8004a50:	f300 84d1 	bgt.w	80053f6 <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004a54:	f640 2233 	movw	r2, #2611	; 0xa33
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	f300 84cc 	bgt.w	80053f6 <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004a5e:	f5b3 6f22 	cmp.w	r3, #2592	; 0xa20
 8004a62:	da16      	bge.n	8004a92 <_Z31handleSDORequestDownloadBySDOIDt+0xb2>
 8004a64:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8004a68:	f300 84c5 	bgt.w	80053f6 <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004a6c:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8004a70:	da40      	bge.n	8004af4 <_Z31handleSDORequestDownloadBySDOIDt+0x114>
 8004a72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a76:	f000 8374 	beq.w	8005162 <_Z31handleSDORequestDownloadBySDOIDt+0x782>
 8004a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a7e:	f300 84ba 	bgt.w	80053f6 <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004a82:	2b21      	cmp	r3, #33	; 0x21
 8004a84:	f300 8166 	bgt.w	8004d54 <_Z31handleSDORequestDownloadBySDOIDt+0x374>
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f300 8119 	bgt.w	8004cc0 <_Z31handleSDORequestDownloadBySDOIDt+0x2e0>
 8004a8e:	f000 bcb2 	b.w	80053f6 <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004a92:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 8004a96:	2b13      	cmp	r3, #19
 8004a98:	f200 84ad 	bhi.w	80053f6 <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004a9c:	a201      	add	r2, pc, #4	; (adr r2, 8004aa4 <_Z31handleSDORequestDownloadBySDOIDt+0xc4>)
 8004a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa2:	bf00      	nop
 8004aa4:	0800523b 	.word	0x0800523b
 8004aa8:	080053f7 	.word	0x080053f7
 8004aac:	080053f7 	.word	0x080053f7
 8004ab0:	080053f7 	.word	0x080053f7
 8004ab4:	080053f7 	.word	0x080053f7
 8004ab8:	08005257 	.word	0x08005257
 8004abc:	08005275 	.word	0x08005275
 8004ac0:	08005293 	.word	0x08005293
 8004ac4:	080052b1 	.word	0x080052b1
 8004ac8:	080052cf 	.word	0x080052cf
 8004acc:	080053f7 	.word	0x080053f7
 8004ad0:	080053f7 	.word	0x080053f7
 8004ad4:	080053f7 	.word	0x080053f7
 8004ad8:	080053f7 	.word	0x080053f7
 8004adc:	080053f7 	.word	0x080053f7
 8004ae0:	080053f7 	.word	0x080053f7
 8004ae4:	080052ed 	.word	0x080052ed
 8004ae8:	0800530b 	.word	0x0800530b
 8004aec:	08005329 	.word	0x08005329
 8004af0:	08005347 	.word	0x08005347
 8004af4:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 8004af8:	2b10      	cmp	r3, #16
 8004afa:	f200 847c 	bhi.w	80053f6 <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004afe:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <_Z31handleSDORequestDownloadBySDOIDt+0x124>)
 8004b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b04:	08005181 	.word	0x08005181
 8004b08:	0800519d 	.word	0x0800519d
 8004b0c:	080051b9 	.word	0x080051b9
 8004b10:	080051d5 	.word	0x080051d5
 8004b14:	080051f1 	.word	0x080051f1
 8004b18:	0800520f 	.word	0x0800520f
 8004b1c:	080053f7 	.word	0x080053f7
 8004b20:	080053f7 	.word	0x080053f7
 8004b24:	080053f7 	.word	0x080053f7
 8004b28:	080053f7 	.word	0x080053f7
 8004b2c:	080053f7 	.word	0x080053f7
 8004b30:	080053f7 	.word	0x080053f7
 8004b34:	080053f7 	.word	0x080053f7
 8004b38:	080053f7 	.word	0x080053f7
 8004b3c:	080053f7 	.word	0x080053f7
 8004b40:	080053f7 	.word	0x080053f7
 8004b44:	08005225 	.word	0x08005225
 8004b48:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8004b4c:	2b59      	cmp	r3, #89	; 0x59
 8004b4e:	f200 8452 	bhi.w	80053f6 <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004b52:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <_Z31handleSDORequestDownloadBySDOIDt+0x178>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004e49 	.word	0x08004e49
 8004b5c:	08004e67 	.word	0x08004e67
 8004b60:	08004e81 	.word	0x08004e81
 8004b64:	08004e9f 	.word	0x08004e9f
 8004b68:	08004ebd 	.word	0x08004ebd
 8004b6c:	08004ed7 	.word	0x08004ed7
 8004b70:	08004ef3 	.word	0x08004ef3
 8004b74:	080053f7 	.word	0x080053f7
 8004b78:	080053f7 	.word	0x080053f7
 8004b7c:	080053f7 	.word	0x080053f7
 8004b80:	080053f7 	.word	0x080053f7
 8004b84:	080053f7 	.word	0x080053f7
 8004b88:	080053f7 	.word	0x080053f7
 8004b8c:	080053f7 	.word	0x080053f7
 8004b90:	080053f7 	.word	0x080053f7
 8004b94:	080053f7 	.word	0x080053f7
 8004b98:	08004f0f 	.word	0x08004f0f
 8004b9c:	08004f29 	.word	0x08004f29
 8004ba0:	080053f7 	.word	0x080053f7
 8004ba4:	080053f7 	.word	0x080053f7
 8004ba8:	080053f7 	.word	0x080053f7
 8004bac:	080053f7 	.word	0x080053f7
 8004bb0:	080053f7 	.word	0x080053f7
 8004bb4:	080053f7 	.word	0x080053f7
 8004bb8:	080053f7 	.word	0x080053f7
 8004bbc:	080053f7 	.word	0x080053f7
 8004bc0:	080053f7 	.word	0x080053f7
 8004bc4:	080053f7 	.word	0x080053f7
 8004bc8:	080053f7 	.word	0x080053f7
 8004bcc:	080053f7 	.word	0x080053f7
 8004bd0:	080053f7 	.word	0x080053f7
 8004bd4:	080053f7 	.word	0x080053f7
 8004bd8:	08004f43 	.word	0x08004f43
 8004bdc:	08004f5d 	.word	0x08004f5d
 8004be0:	080053f7 	.word	0x080053f7
 8004be4:	080053f7 	.word	0x080053f7
 8004be8:	080053f7 	.word	0x080053f7
 8004bec:	080053f7 	.word	0x080053f7
 8004bf0:	080053f7 	.word	0x080053f7
 8004bf4:	080053f7 	.word	0x080053f7
 8004bf8:	080053f7 	.word	0x080053f7
 8004bfc:	080053f7 	.word	0x080053f7
 8004c00:	080053f7 	.word	0x080053f7
 8004c04:	080053f7 	.word	0x080053f7
 8004c08:	080053f7 	.word	0x080053f7
 8004c0c:	080053f7 	.word	0x080053f7
 8004c10:	080053f7 	.word	0x080053f7
 8004c14:	080053f7 	.word	0x080053f7
 8004c18:	080053f7 	.word	0x080053f7
 8004c1c:	080053f7 	.word	0x080053f7
 8004c20:	080053f7 	.word	0x080053f7
 8004c24:	080053f7 	.word	0x080053f7
 8004c28:	080053f7 	.word	0x080053f7
 8004c2c:	080053f7 	.word	0x080053f7
 8004c30:	080053f7 	.word	0x080053f7
 8004c34:	080053f7 	.word	0x080053f7
 8004c38:	080053f7 	.word	0x080053f7
 8004c3c:	080053f7 	.word	0x080053f7
 8004c40:	080053f7 	.word	0x080053f7
 8004c44:	080053f7 	.word	0x080053f7
 8004c48:	080053f7 	.word	0x080053f7
 8004c4c:	080053f7 	.word	0x080053f7
 8004c50:	080053f7 	.word	0x080053f7
 8004c54:	080053f7 	.word	0x080053f7
 8004c58:	08004f77 	.word	0x08004f77
 8004c5c:	08004f93 	.word	0x08004f93
 8004c60:	08004faf 	.word	0x08004faf
 8004c64:	08004fc9 	.word	0x08004fc9
 8004c68:	08004fe5 	.word	0x08004fe5
 8004c6c:	080053f7 	.word	0x080053f7
 8004c70:	08005001 	.word	0x08005001
 8004c74:	0800501d 	.word	0x0800501d
 8004c78:	08005037 	.word	0x08005037
 8004c7c:	08005053 	.word	0x08005053
 8004c80:	080053f7 	.word	0x080053f7
 8004c84:	080053f7 	.word	0x080053f7
 8004c88:	080053f7 	.word	0x080053f7
 8004c8c:	080053f7 	.word	0x080053f7
 8004c90:	080053f7 	.word	0x080053f7
 8004c94:	080053f7 	.word	0x080053f7
 8004c98:	0800506d 	.word	0x0800506d
 8004c9c:	08005089 	.word	0x08005089
 8004ca0:	080050a5 	.word	0x080050a5
 8004ca4:	080050bf 	.word	0x080050bf
 8004ca8:	080050db 	.word	0x080050db
 8004cac:	080053f7 	.word	0x080053f7
 8004cb0:	080050f7 	.word	0x080050f7
 8004cb4:	08005113 	.word	0x08005113
 8004cb8:	0800512d 	.word	0x0800512d
 8004cbc:	08005149 	.word	0x08005149
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	2b20      	cmp	r3, #32
 8004cc4:	f200 8397 	bhi.w	80053f6 <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004cc8:	a201      	add	r2, pc, #4	; (adr r2, 8004cd0 <_Z31handleSDORequestDownloadBySDOIDt+0x2f0>)
 8004cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cce:	bf00      	nop
 8004cd0:	08004d69 	.word	0x08004d69
 8004cd4:	08004d85 	.word	0x08004d85
 8004cd8:	08004da1 	.word	0x08004da1
 8004cdc:	08004dbd 	.word	0x08004dbd
 8004ce0:	08004dd9 	.word	0x08004dd9
 8004ce4:	080053f7 	.word	0x080053f7
 8004ce8:	080053f7 	.word	0x080053f7
 8004cec:	080053f7 	.word	0x080053f7
 8004cf0:	080053f7 	.word	0x080053f7
 8004cf4:	080053f7 	.word	0x080053f7
 8004cf8:	080053f7 	.word	0x080053f7
 8004cfc:	080053f7 	.word	0x080053f7
 8004d00:	080053f7 	.word	0x080053f7
 8004d04:	080053f7 	.word	0x080053f7
 8004d08:	080053f7 	.word	0x080053f7
 8004d0c:	08004df5 	.word	0x08004df5
 8004d10:	080053f7 	.word	0x080053f7
 8004d14:	080053f7 	.word	0x080053f7
 8004d18:	080053f7 	.word	0x080053f7
 8004d1c:	080053f7 	.word	0x080053f7
 8004d20:	080053f7 	.word	0x080053f7
 8004d24:	080053f7 	.word	0x080053f7
 8004d28:	080053f7 	.word	0x080053f7
 8004d2c:	080053f7 	.word	0x080053f7
 8004d30:	080053f7 	.word	0x080053f7
 8004d34:	080053f7 	.word	0x080053f7
 8004d38:	080053f7 	.word	0x080053f7
 8004d3c:	080053f7 	.word	0x080053f7
 8004d40:	080053f7 	.word	0x080053f7
 8004d44:	080053f7 	.word	0x080053f7
 8004d48:	080053f7 	.word	0x080053f7
 8004d4c:	08004e11 	.word	0x08004e11
 8004d50:	08004e2d 	.word	0x08004e2d
 8004d54:	f240 4269 	movw	r2, #1129	; 0x469
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	f300 834c 	bgt.w	80053f6 <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
 8004d5e:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 8004d62:	f6bf aef1 	bge.w	8004b48 <_Z31handleSDORequestDownloadBySDOIDt+0x168>
 8004d66:	e346      	b.n	80053f6 <_Z31handleSDORequestDownloadBySDOIDt+0xa16>
        case 0x1:    // OD_NodeID
            msgSdoResp.set<can::signals::SensorF_OD_NodeID>(OD_NodeID_get());
 8004d68:	f001 f9f6 	bl	8006158 <_Z13OD_NodeID_getv>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d74:	4611      	mov	r1, r2
 8004d76:	4618      	mov	r0, r3
 8004d78:	f002 fa72 	bl	8007260 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_NodeIDEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004d82:	e340      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x2:    // OD_NodeStatus
            msgSdoResp.set<can::signals::SensorF_OD_NodeStatus>(OD_NodeStatus_get());
 8004d84:	f001 fa04 	bl	8006190 <_Z17OD_NodeStatus_getv>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d90:	4611      	mov	r1, r2
 8004d92:	4618      	mov	r0, r3
 8004d94:	f002 fa79 	bl	800728a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_NodeStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004d9e:	e332      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x3:    // OD_ProtocolVersion
            msgSdoResp.set<can::signals::SensorF_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8004da0:	f001 fa12 	bl	80061c8 <_Z22OD_ProtocolVersion_getv>
 8004da4:	4603      	mov	r3, r0
 8004da6:	461a      	mov	r2, r3
 8004da8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004dac:	4611      	mov	r1, r2
 8004dae:	4618      	mov	r0, r3
 8004db0:	f002 fa80 	bl	80072b4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_ProtocolVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004dba:	e324      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x4:    // OD_StackVersion
            msgSdoResp.set<can::signals::SensorF_OD_StackVersion>(OD_StackVersion_get());
 8004dbc:	f001 fa20 	bl	8006200 <_Z19OD_StackVersion_getv>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004dc8:	4611      	mov	r1, r2
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f002 fa87 	bl	80072de <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_StackVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004dd6:	e316      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x5:    // OD_DbcVersion
            msgSdoResp.set<can::signals::SensorF_OD_DbcVersion>(OD_DbcVersion_get());
 8004dd8:	f001 fa2e 	bl	8006238 <_Z17OD_DbcVersion_getv>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	461a      	mov	r2, r3
 8004de0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004de4:	4611      	mov	r1, r2
 8004de6:	4618      	mov	r0, r3
 8004de8:	f002 fa8e 	bl	8007308 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_DbcVersionEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004df2:	e308      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x10:    // OD_HeartbeatInterval
            msgSdoResp.set<can::signals::SensorF_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 8004df4:	f001 fa3c 	bl	8006270 <_Z24OD_HeartbeatInterval_getv>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e00:	4611      	mov	r1, r2
 8004e02:	4618      	mov	r0, r3
 8004e04:	f002 fa95 	bl	8007332 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004e0e:	e2fa      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x20:    // OD_SendOdOnBootup
            msgSdoResp.set<can::signals::SensorF_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8004e10:	f001 fa66 	bl	80062e0 <_Z21OD_SendOdOnBootup_getv>
 8004e14:	4603      	mov	r3, r0
 8004e16:	461a      	mov	r2, r3
 8004e18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f002 fa9c 	bl	800735c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals25SensorF_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004e24:	2300      	movs	r3, #0
 8004e26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004e2a:	e2ec      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x21:    // OD_OdEntrySendInterval
            msgSdoResp.set<can::signals::SensorF_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8004e2c:	f001 fa90 	bl	8006350 <_Z26OD_OdEntrySendInterval_getv>
 8004e30:	4603      	mov	r3, r0
 8004e32:	461a      	mov	r2, r3
 8004e34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e38:	4611      	mov	r1, r2
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f002 faa3 	bl	8007386 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004e46:	e2de      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x410:    // OD_CpuUsage
            msgSdoResp.set<can::signals::SensorF_OD_CpuUsage>(OD_CpuUsage_get());
 8004e48:	f001 faba 	bl	80063c0 <_Z15OD_CpuUsage_getv>
 8004e4c:	eef0 7a40 	vmov.f32	s15, s0
 8004e50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e54:	eeb0 0a67 	vmov.f32	s0, s15
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f002 faa9 	bl	80073b0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_CpuUsageEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004e64:	e2cf      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x411:    // OD_MemFree
            msgSdoResp.set<can::signals::SensorF_OD_MemFree>(OD_MemFree_get());
 8004e66:	f001 fac9 	bl	80063fc <_Z14OD_MemFree_getv>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e70:	4611      	mov	r1, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f002 fab3 	bl	80073de <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_MemFreeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004e7e:	e2c2      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x412:    // OD_BoardTemp
            msgSdoResp.set<can::signals::SensorF_OD_BoardTemp>(OD_BoardTemp_get());
 8004e80:	f001 fad8 	bl	8006434 <_Z16OD_BoardTemp_getv>
 8004e84:	eef0 7a40 	vmov.f32	s15, s0
 8004e88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8004e90:	4618      	mov	r0, r3
 8004e92:	f002 fab8 	bl	8007406 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BoardTempEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004e96:	2300      	movs	r3, #0
 8004e98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004e9c:	e2b3      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x413:    // OD_InputVoltage
            msgSdoResp.set<can::signals::SensorF_OD_InputVoltage>(OD_InputVoltage_get());
 8004e9e:	f001 fae7 	bl	8006470 <_Z19OD_InputVoltage_getv>
 8004ea2:	eef0 7a40 	vmov.f32	s15, s0
 8004ea6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004eaa:	eeb0 0a67 	vmov.f32	s0, s15
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f002 fac0 	bl	8007434 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_InputVoltageEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004eba:	e2a4      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x414:    // OD_runtime
            msgSdoResp.set<can::signals::SensorF_OD_runtime>(OD_runtime_get());
 8004ebc:	f001 faf6 	bl	80064ac <_Z14OD_runtime_getv>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f002 faca 	bl	8007462 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_runtimeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004ed4:	e297      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x415:    // OD_SdcIn
            msgSdoResp.set<can::signals::SensorF_OD_SdcIn>(OD_SdcIn_get());
 8004ed6:	f001 fb05 	bl	80064e4 <_Z12OD_SdcIn_getv>
 8004eda:	4603      	mov	r3, r0
 8004edc:	461a      	mov	r2, r3
 8004ede:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f002 fad0 	bl	800748a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals16SensorF_OD_SdcInEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004ef0:	e289      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x416:    // OD_SdcOut
            msgSdoResp.set<can::signals::SensorF_OD_SdcOut>(OD_SdcOut_get());
 8004ef2:	f001 fb13 	bl	800651c <_Z13OD_SdcOut_getv>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	461a      	mov	r2, r3
 8004efa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004efe:	4611      	mov	r1, r2
 8004f00:	4618      	mov	r0, r3
 8004f02:	f002 fad7 	bl	80074b4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_SdcOutEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f0c:	e27b      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x420:    // OD_ChipUID1
            msgSdoResp.set<can::signals::SensorF_OD_ChipUID1>(OD_ChipUID1_get());
 8004f0e:	f001 fb21 	bl	8006554 <_Z15OD_ChipUID1_getv>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004f1a:	4608      	mov	r0, r1
 8004f1c:	f002 fadf 	bl	80074de <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID1EEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f20:	2300      	movs	r3, #0
 8004f22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f26:	e26e      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x421:    // OD_ChipUID2
            msgSdoResp.set<can::signals::SensorF_OD_ChipUID2>(OD_ChipUID2_get());
 8004f28:	f001 fb34 	bl	8006594 <_Z15OD_ChipUID2_getv>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004f34:	4608      	mov	r0, r1
 8004f36:	f002 faeb 	bl	8007510 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID2EEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f40:	e261      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x430:    // OD_BuildDate
            msgSdoResp.set<can::signals::SensorF_OD_BuildDate>(OD_BuildDate_get());
 8004f42:	f001 fb47 	bl	80065d4 <_Z16OD_BuildDate_getv>
 8004f46:	4602      	mov	r2, r0
 8004f48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f4c:	4611      	mov	r1, r2
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f002 faf7 	bl	8007542 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildDateEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f54:	2300      	movs	r3, #0
 8004f56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f5a:	e254      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x431:    // OD_BuildTime
            msgSdoResp.set<can::signals::SensorF_OD_BuildTime>(OD_BuildTime_get());
 8004f5c:	f001 fb56 	bl	800660c <_Z16OD_BuildTime_getv>
 8004f60:	4602      	mov	r2, r0
 8004f62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f66:	4611      	mov	r1, r2
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f002 fafe 	bl	800756a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildTimeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f74:	e247      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x450:    // OD_CAN1_TxErrCnt
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 8004f76:	f001 fb65 	bl	8006644 <_Z20OD_CAN1_TxErrCnt_getv>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f82:	4611      	mov	r1, r2
 8004f84:	4618      	mov	r0, r3
 8004f86:	f002 fb04 	bl	8007592 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004f90:	e239      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x451:    // OD_CAN1_RxErrCnt
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 8004f92:	f001 fb73 	bl	800667c <_Z20OD_CAN1_RxErrCnt_getv>
 8004f96:	4603      	mov	r3, r0
 8004f98:	461a      	mov	r2, r3
 8004f9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f002 fb0b 	bl	80075bc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004fac:	e22b      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x452:    // OD_CAN1_lastErrorCode
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 8004fae:	f001 fb81 	bl	80066b4 <_Z25OD_CAN1_lastErrorCode_getv>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fb8:	4611      	mov	r1, r2
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f002 fb13 	bl	80075e6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004fc6:	e21e      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x453:    // OD_CAN1_autoErrorReset
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 8004fc8:	f001 fb90 	bl	80066ec <_Z26OD_CAN1_autoErrorReset_getv>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fd4:	4611      	mov	r1, r2
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f002 fb19 	bl	800760e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004fe2:	e210      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x454:    // OD_CAN1_Baudrate
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 8004fe4:	f001 fbba 	bl	800675c <_Z20OD_CAN1_Baudrate_getv>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	461a      	mov	r2, r3
 8004fec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004ff0:	4611      	mov	r1, r2
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f002 fb20 	bl	8007638 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8004ffe:	e202      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x456:    // OD_CAN1_Status
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_Status>(OD_CAN1_Status_get());
 8005000:	f001 fbe4 	bl	80067cc <_Z18OD_CAN1_Status_getv>
 8005004:	4603      	mov	r3, r0
 8005006:	461a      	mov	r2, r3
 8005008:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800500c:	4611      	mov	r1, r2
 800500e:	4618      	mov	r0, r3
 8005010:	f002 fb27 	bl	8007662 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN1_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005014:	2300      	movs	r3, #0
 8005016:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800501a:	e1f4      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x457:    // OD_CAN1_DiscardedTxMessages
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 800501c:	f001 fbf2 	bl	8006804 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 8005020:	4602      	mov	r2, r0
 8005022:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005026:	4611      	mov	r1, r2
 8005028:	4618      	mov	r0, r3
 800502a:	f002 fb2f 	bl	800768c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800502e:	2300      	movs	r3, #0
 8005030:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005034:	e1e7      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x458:    // OD_CAN1_ErrorStatus
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 8005036:	f001 fc01 	bl	800683c <_Z23OD_CAN1_ErrorStatus_getv>
 800503a:	4603      	mov	r3, r0
 800503c:	461a      	mov	r2, r3
 800503e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005042:	4611      	mov	r1, r2
 8005044:	4618      	mov	r0, r3
 8005046:	f002 fb35 	bl	80076b4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800504a:	2300      	movs	r3, #0
 800504c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005050:	e1d9      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x459:    // OD_CAN1_DelayedTxMessages
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 8005052:	f001 fc0f 	bl	8006874 <_Z29OD_CAN1_DelayedTxMessages_getv>
 8005056:	4602      	mov	r2, r0
 8005058:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800505c:	4611      	mov	r1, r2
 800505e:	4618      	mov	r0, r3
 8005060:	f002 fb3d 	bl	80076de <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005064:	2300      	movs	r3, #0
 8005066:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800506a:	e1cc      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x460:    // OD_CAN2_TxErrCnt
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 800506c:	f001 fc1e 	bl	80068ac <_Z20OD_CAN2_TxErrCnt_getv>
 8005070:	4603      	mov	r3, r0
 8005072:	461a      	mov	r2, r3
 8005074:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005078:	4611      	mov	r1, r2
 800507a:	4618      	mov	r0, r3
 800507c:	f002 fb43 	bl	8007706 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005080:	2300      	movs	r3, #0
 8005082:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005086:	e1be      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x461:    // OD_CAN2_RxErrCnt
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8005088:	f001 fc2c 	bl	80068e4 <_Z20OD_CAN2_RxErrCnt_getv>
 800508c:	4603      	mov	r3, r0
 800508e:	461a      	mov	r2, r3
 8005090:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005094:	4611      	mov	r1, r2
 8005096:	4618      	mov	r0, r3
 8005098:	f002 fb4a 	bl	8007730 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800509c:	2300      	movs	r3, #0
 800509e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80050a2:	e1b0      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x462:    // OD_CAN2_lastErrorCode
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 80050a4:	f001 fc3a 	bl	800691c <_Z25OD_CAN2_lastErrorCode_getv>
 80050a8:	4602      	mov	r2, r0
 80050aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050ae:	4611      	mov	r1, r2
 80050b0:	4618      	mov	r0, r3
 80050b2:	f002 fb52 	bl	800775a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80050b6:	2300      	movs	r3, #0
 80050b8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80050bc:	e1a3      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x463:    // OD_CAN2_autoErrorReset
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 80050be:	f001 fc49 	bl	8006954 <_Z26OD_CAN2_autoErrorReset_getv>
 80050c2:	4603      	mov	r3, r0
 80050c4:	461a      	mov	r2, r3
 80050c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050ca:	4611      	mov	r1, r2
 80050cc:	4618      	mov	r0, r3
 80050ce:	f002 fb58 	bl	8007782 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80050d2:	2300      	movs	r3, #0
 80050d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80050d8:	e195      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x464:    // OD_CAN2_Baudrate
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 80050da:	f001 fc73 	bl	80069c4 <_Z20OD_CAN2_Baudrate_getv>
 80050de:	4603      	mov	r3, r0
 80050e0:	461a      	mov	r2, r3
 80050e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80050e6:	4611      	mov	r1, r2
 80050e8:	4618      	mov	r0, r3
 80050ea:	f002 fb5f 	bl	80077ac <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80050ee:	2300      	movs	r3, #0
 80050f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80050f4:	e187      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x466:    // OD_CAN2_Status
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_Status>(OD_CAN2_Status_get());
 80050f6:	f001 fc9d 	bl	8006a34 <_Z18OD_CAN2_Status_getv>
 80050fa:	4603      	mov	r3, r0
 80050fc:	461a      	mov	r2, r3
 80050fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005102:	4611      	mov	r1, r2
 8005104:	4618      	mov	r0, r3
 8005106:	f002 fb66 	bl	80077d6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN2_StatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800510a:	2300      	movs	r3, #0
 800510c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005110:	e179      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x467:    // OD_CAN2_DiscardedTxMessages
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 8005112:	f001 fcab 	bl	8006a6c <_Z31OD_CAN2_DiscardedTxMessages_getv>
 8005116:	4602      	mov	r2, r0
 8005118:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800511c:	4611      	mov	r1, r2
 800511e:	4618      	mov	r0, r3
 8005120:	f002 fb6e 	bl	8007800 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005124:	2300      	movs	r3, #0
 8005126:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800512a:	e16c      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x468:    // OD_CAN2_ErrorStatus
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 800512c:	f001 fcba 	bl	8006aa4 <_Z23OD_CAN2_ErrorStatus_getv>
 8005130:	4603      	mov	r3, r0
 8005132:	461a      	mov	r2, r3
 8005134:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005138:	4611      	mov	r1, r2
 800513a:	4618      	mov	r0, r3
 800513c:	f002 fb74 	bl	8007828 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005140:	2300      	movs	r3, #0
 8005142:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005146:	e15e      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x469:    // OD_CAN2_DelayedTxMessages
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8005148:	f001 fcc8 	bl	8006adc <_Z29OD_CAN2_DelayedTxMessages_getv>
 800514c:	4602      	mov	r2, r0
 800514e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005152:	4611      	mov	r1, r2
 8005154:	4618      	mov	r0, r3
 8005156:	f002 fb7c 	bl	8007852 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800515a:	2300      	movs	r3, #0
 800515c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005160:	e151      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x800:    // OD_samplingInterval
            msgSdoResp.set<can::signals::SensorF_OD_samplingInterval>(OD_samplingInterval_get());
 8005162:	f001 fcd7 	bl	8006b14 <_Z23OD_samplingInterval_getv>
 8005166:	eef0 7a40 	vmov.f32	s15, s0
 800516a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800516e:	eeb0 0a67 	vmov.f32	s0, s15
 8005172:	4618      	mov	r0, r3
 8005174:	f002 fb81 	bl	800787a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_samplingIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005178:	2300      	movs	r3, #0
 800517a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800517e:	e142      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x900:    // OD_TelemetryCommands
            msgSdoResp.set<can::signals::SensorF_OD_TelemetryCommands>(OD_TelemetryCommands_get());
 8005180:	f001 fd02 	bl	8006b88 <_Z24OD_TelemetryCommands_getv>
 8005184:	4603      	mov	r3, r0
 8005186:	461a      	mov	r2, r3
 8005188:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800518c:	4611      	mov	r1, r2
 800518e:	4618      	mov	r0, r3
 8005190:	f002 fb8a 	bl	80078a8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_TelemetryCommandsEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005194:	2300      	movs	r3, #0
 8005196:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800519a:	e134      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x901:    // OD_StateMachineInterval
            msgSdoResp.set<can::signals::SensorF_OD_StateMachineInterval>(OD_StateMachineInterval_get());
 800519c:	f001 fd2c 	bl	8006bf8 <_Z27OD_StateMachineInterval_getv>
 80051a0:	4603      	mov	r3, r0
 80051a2:	461a      	mov	r2, r3
 80051a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051a8:	4611      	mov	r1, r2
 80051aa:	4618      	mov	r0, r3
 80051ac:	f002 fb91 	bl	80078d2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineIntervalEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80051b0:	2300      	movs	r3, #0
 80051b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80051b6:	e126      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x902:    // OD_StateMachineActivate
            msgSdoResp.set<can::signals::SensorF_OD_StateMachineActivate>(OD_StateMachineActivate_get());
 80051b8:	f001 fd56 	bl	8006c68 <_Z27OD_StateMachineActivate_getv>
 80051bc:	4603      	mov	r3, r0
 80051be:	461a      	mov	r2, r3
 80051c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051c4:	4611      	mov	r1, r2
 80051c6:	4618      	mov	r0, r3
 80051c8:	f002 fb98 	bl	80078fc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineActivateEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80051d2:	e118      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x903:    // OD_HVBatteryMode
            msgSdoResp.set<can::signals::SensorF_OD_HVBatteryMode>(OD_HVBatteryMode_get());
 80051d4:	f001 fd80 	bl	8006cd8 <_Z20OD_HVBatteryMode_getv>
 80051d8:	4603      	mov	r3, r0
 80051da:	461a      	mov	r2, r3
 80051dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051e0:	4611      	mov	r1, r2
 80051e2:	4618      	mov	r0, r3
 80051e4:	f002 fb9f 	bl	8007926 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_HVBatteryModeEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80051e8:	2300      	movs	r3, #0
 80051ea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80051ee:	e10a      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x904:    // OD_EncoderWheelDiameter
            msgSdoResp.set<can::signals::SensorF_OD_EncoderWheelDiameter>(OD_EncoderWheelDiameter_get());
 80051f0:	f001 fdaa 	bl	8006d48 <_Z27OD_EncoderWheelDiameter_getv>
 80051f4:	eef0 7a40 	vmov.f32	s15, s0
 80051f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051fc:	eeb0 0a67 	vmov.f32	s0, s15
 8005200:	4618      	mov	r0, r3
 8005202:	f002 fba5 	bl	8007950 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_EncoderWheelDiameterEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005206:	2300      	movs	r3, #0
 8005208:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800520c:	e0fb      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x905:    // OD_EncoderResetPosition
            respCode = can::signals::SensorF_SDO_RespCode::ERR_WRITE_ONLY_OBJECT;
 800520e:	2302      	movs	r3, #2
 8005210:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(0x905);
 8005214:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005218:	f640 1105 	movw	r1, #2309	; 0x905
 800521c:	4618      	mov	r0, r3
 800521e:	f002 fbae 	bl	800797e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 8005222:	e0f0      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0x910:    // OD_SetReset
            respCode = can::signals::SensorF_SDO_RespCode::ERR_WRITE_ONLY_OBJECT;
 8005224:	2302      	movs	r3, #2
 8005226:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(0x910);
 800522a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800522e:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8005232:	4618      	mov	r0, r3
 8005234:	f002 fba3 	bl	800797e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 8005238:	e0e5      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xA20:    // OD_IMU_number
            msgSdoResp.set<can::signals::SensorF_OD_IMU_number>(OD_IMU_number_get());
 800523a:	f001 fdf7 	bl	8006e2c <_Z17OD_IMU_number_getv>
 800523e:	4603      	mov	r3, r0
 8005240:	461a      	mov	r2, r3
 8005242:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005246:	4611      	mov	r1, r2
 8005248:	4618      	mov	r0, r3
 800524a:	f002 fbad 	bl	80079a8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_numberEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800524e:	2300      	movs	r3, #0
 8005250:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005254:	e0d7      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xA25:    // OD_IMU1_Temperature
            msgSdoResp.set<can::signals::SensorF_OD_IMU1_Temperature>(OD_IMU1_Temperature_get());
 8005256:	f001 fe05 	bl	8006e64 <_Z23OD_IMU1_Temperature_getv>
 800525a:	eef0 7a40 	vmov.f32	s15, s0
 800525e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005262:	eeb0 0a67 	vmov.f32	s0, s15
 8005266:	4618      	mov	r0, r3
 8005268:	f002 fbb3 	bl	80079d2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU1_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800526c:	2300      	movs	r3, #0
 800526e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005272:	e0c8      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xA26:    // OD_IMU2_Temperature
            msgSdoResp.set<can::signals::SensorF_OD_IMU2_Temperature>(OD_IMU2_Temperature_get());
 8005274:	f001 fe14 	bl	8006ea0 <_Z23OD_IMU2_Temperature_getv>
 8005278:	eef0 7a40 	vmov.f32	s15, s0
 800527c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005280:	eeb0 0a67 	vmov.f32	s0, s15
 8005284:	4618      	mov	r0, r3
 8005286:	f002 fbbb 	bl	8007a00 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU2_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800528a:	2300      	movs	r3, #0
 800528c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005290:	e0b9      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xA27:    // OD_IMU3_Temperature
            msgSdoResp.set<can::signals::SensorF_OD_IMU3_Temperature>(OD_IMU3_Temperature_get());
 8005292:	f001 fe23 	bl	8006edc <_Z23OD_IMU3_Temperature_getv>
 8005296:	eef0 7a40 	vmov.f32	s15, s0
 800529a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800529e:	eeb0 0a67 	vmov.f32	s0, s15
 80052a2:	4618      	mov	r0, r3
 80052a4:	f002 fbc3 	bl	8007a2e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU3_TemperatureEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80052a8:	2300      	movs	r3, #0
 80052aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80052ae:	e0aa      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xA28:    // OD_IMU_AccelX
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelX>(OD_IMU_AccelX_get());
 80052b0:	f001 fe32 	bl	8006f18 <_Z17OD_IMU_AccelX_getv>
 80052b4:	eef0 7a40 	vmov.f32	s15, s0
 80052b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052bc:	eeb0 0a67 	vmov.f32	s0, s15
 80052c0:	4618      	mov	r0, r3
 80052c2:	f002 fbcb 	bl	8007a5c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelXEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80052c6:	2300      	movs	r3, #0
 80052c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80052cc:	e09b      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xA29:    // OD_IMU_AccelY
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelY>(OD_IMU_AccelY_get());
 80052ce:	f001 fe41 	bl	8006f54 <_Z17OD_IMU_AccelY_getv>
 80052d2:	eef0 7a40 	vmov.f32	s15, s0
 80052d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052da:	eeb0 0a67 	vmov.f32	s0, s15
 80052de:	4618      	mov	r0, r3
 80052e0:	f002 fbd3 	bl	8007a8a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelYEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80052e4:	2300      	movs	r3, #0
 80052e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80052ea:	e08c      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xA30:    // OD_IMU_AccelZ
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelZ>(OD_IMU_AccelZ_get());
 80052ec:	f001 fe50 	bl	8006f90 <_Z17OD_IMU_AccelZ_getv>
 80052f0:	eef0 7a40 	vmov.f32	s15, s0
 80052f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052f8:	eeb0 0a67 	vmov.f32	s0, s15
 80052fc:	4618      	mov	r0, r3
 80052fe:	f002 fbdb 	bl	8007ab8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelZEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005302:	2300      	movs	r3, #0
 8005304:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005308:	e07d      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xA31:    // OD_IMU_GyroX
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroX>(OD_IMU_GyroX_get());
 800530a:	f001 fe5f 	bl	8006fcc <_Z16OD_IMU_GyroX_getv>
 800530e:	eef0 7a40 	vmov.f32	s15, s0
 8005312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005316:	eeb0 0a67 	vmov.f32	s0, s15
 800531a:	4618      	mov	r0, r3
 800531c:	f002 fbe3 	bl	8007ae6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroXEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005320:	2300      	movs	r3, #0
 8005322:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005326:	e06e      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xA32:    // OD_IMU_GyroY
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroY>(OD_IMU_GyroY_get());
 8005328:	f001 fe6e 	bl	8007008 <_Z16OD_IMU_GyroY_getv>
 800532c:	eef0 7a40 	vmov.f32	s15, s0
 8005330:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005334:	eeb0 0a67 	vmov.f32	s0, s15
 8005338:	4618      	mov	r0, r3
 800533a:	f002 fbeb 	bl	8007b14 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroYEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800533e:	2300      	movs	r3, #0
 8005340:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005344:	e05f      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xA33:    // OD_IMU_GyroZ
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroZ>(OD_IMU_GyroZ_get());
 8005346:	f001 fe7d 	bl	8007044 <_Z16OD_IMU_GyroZ_getv>
 800534a:	eef0 7a40 	vmov.f32	s15, s0
 800534e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005352:	eeb0 0a67 	vmov.f32	s0, s15
 8005356:	4618      	mov	r0, r3
 8005358:	f002 fbf3 	bl	8007b42 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroZEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800535c:	2300      	movs	r3, #0
 800535e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005362:	e050      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xB00:    // OD_CoolingPressure
            msgSdoResp.set<can::signals::SensorF_OD_CoolingPressure>(OD_CoolingPressure_get());
 8005364:	f001 fe8c 	bl	8007080 <_Z22OD_CoolingPressure_getv>
 8005368:	eef0 7a40 	vmov.f32	s15, s0
 800536c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005370:	eeb0 0a67 	vmov.f32	s0, s15
 8005374:	4618      	mov	r0, r3
 8005376:	f002 fbfb 	bl	8007b70 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_CoolingPressureEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 800537a:	2300      	movs	r3, #0
 800537c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 8005380:	e041      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xC00:    // OD_FiducialRightCounter
            msgSdoResp.set<can::signals::SensorF_OD_FiducialRightCounter>(OD_FiducialRightCounter_get());
 8005382:	f001 fe9b 	bl	80070bc <_Z27OD_FiducialRightCounter_getv>
 8005386:	4603      	mov	r3, r0
 8005388:	461a      	mov	r2, r3
 800538a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800538e:	4611      	mov	r1, r2
 8005390:	4618      	mov	r0, r3
 8005392:	f002 fc04 	bl	8007b9e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_FiducialRightCounterEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005396:	2300      	movs	r3, #0
 8005398:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 800539c:	e033      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xC01:    // OD_FiducialLeftCounter
            msgSdoResp.set<can::signals::SensorF_OD_FiducialLeftCounter>(OD_FiducialLeftCounter_get());
 800539e:	f001 fea9 	bl	80070f4 <_Z26OD_FiducialLeftCounter_getv>
 80053a2:	4603      	mov	r3, r0
 80053a4:	461a      	mov	r2, r3
 80053a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053aa:	4611      	mov	r1, r2
 80053ac:	4618      	mov	r0, r3
 80053ae:	f002 fc0b 	bl	8007bc8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_FiducialLeftCounterEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80053b8:	e025      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xD00:    // OD_Position
            msgSdoResp.set<can::signals::SensorF_OD_Position>(OD_Position_get());
 80053ba:	f001 feb7 	bl	800712c <_Z15OD_Position_getv>
 80053be:	eef0 7a40 	vmov.f32	s15, s0
 80053c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053c6:	eeb0 0a67 	vmov.f32	s0, s15
 80053ca:	4618      	mov	r0, r3
 80053cc:	f002 fc11 	bl	8007bf2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_PositionEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80053d0:	2300      	movs	r3, #0
 80053d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80053d6:	e016      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        case 0xD01:    // OD_Velocity
            msgSdoResp.set<can::signals::SensorF_OD_Velocity>(OD_Velocity_get());
 80053d8:	f001 fec6 	bl	8007168 <_Z15OD_Velocity_getv>
 80053dc:	eef0 7a40 	vmov.f32	s15, s0
 80053e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053e4:	eeb0 0a67 	vmov.f32	s0, s15
 80053e8:	4618      	mov	r0, r3
 80053ea:	f002 fc19 	bl	8007c20 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_VelocityEEEvNT_8dataTypeE>
            respCode = can::signals::SensorF_SDO_RespCode::OK;
 80053ee:	2300      	movs	r3, #0
 80053f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
            break;
 80053f4:	e007      	b.n	8005406 <_Z31handleSDORequestDownloadBySDOIDt+0xa26>
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(sdoId);
 80053f6:	88fa      	ldrh	r2, [r7, #6]
 80053f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053fc:	4611      	mov	r1, r2
 80053fe:	4618      	mov	r0, r3
 8005400:	f002 fabd 	bl	800797e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 8005404:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SensorF_SDO_RespCode>(respCode);
 8005406:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 800540a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800540e:	4611      	mov	r1, r2
 8005410:	4618      	mov	r0, r3
 8005412:	f002 fc1c 	bl	8007c4e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 8005416:	f107 0308 	add.w	r3, r7, #8
 800541a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800541e:	2200      	movs	r2, #0
 8005420:	4618      	mov	r0, r3
 8005422:	f7fb fe97 	bl	8001154 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 8005426:	4b06      	ldr	r3, [pc, #24]	; (8005440 <_Z31handleSDORequestDownloadBySDOIDt+0xa60>)
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	f107 0108 	add.w	r1, r7, #8
 800542e:	2300      	movs	r3, #0
 8005430:	2200      	movs	r2, #0
 8005432:	f00b fa4d 	bl	80108d0 <osMessageQueuePut>
}
 8005436:	bf00      	nop
 8005438:	3748      	adds	r7, #72	; 0x48
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	200007b4 	.word	0x200007b4

08005444 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af02      	add	r7, sp, #8
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	2300      	movs	r3, #0
 8005458:	2208      	movs	r2, #8
 800545a:	f240 51c1 	movw	r1, #1473	; 0x5c1
 800545e:	f7fc ff64 	bl	800232a <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 8005466:	f240 52c1 	movw	r2, #1473	; 0x5c1
 800546a:	4293      	cmp	r3, r2
 800546c:	d000      	beq.n	8005470 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 800546e:	e7fe      	b.n	800546e <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4618      	mov	r0, r3
 8005474:	3710      	adds	r7, #16
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 800547a:	b580      	push	{r7, lr}
 800547c:	b082      	sub	sp, #8
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	6039      	str	r1, [r7, #0]
 8005484:	6839      	ldr	r1, [r7, #0]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	331c      	adds	r3, #28
 800548a:	461a      	mov	r2, r3
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7ff ffd9 	bl	8005444 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK19CAN_RxHeaderTypeDefPKh>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4618      	mov	r0, r3
 8005496:	3708      	adds	r7, #8
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <_Z22handleSDORequestUploadRK9RxMessage>:

void handleSDORequestUpload(const RxMessage& rxMsgSdoReq) {
 800549c:	b580      	push	{r7, lr}
 800549e:	b0a0      	sub	sp, #128	; 0x80
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
    can::Message<can::messages::SensorF_SDO_Req_Up> msgSdoReq(rxMsgSdoReq);
 80054a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80054a8:	6879      	ldr	r1, [r7, #4]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7ff ffe5 	bl	800547a <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEEC1ERK9RxMessage>
    can::Message<can::messages::SensorF_SDO_Resp> msgSdoResp;
 80054b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff fa83 	bl	80049c0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEEC1Ev>
    uint8_t respCode = can::signals::SensorF_SDO_RespCode::ERR_NON_EXISTING_OBJECT;
 80054ba:	2301      	movs	r3, #1
 80054bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    uint16_t sdoId = msgSdoReq.get<can::signals::SensorF_SDO_ID>();
 80054c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80054c4:	4618      	mov	r0, r3
 80054c6:	f002 fbd7 	bl	8007c78 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals14SensorF_SDO_IDEEENT_8dataTypeEv>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

    switch (sdoId) {
 80054d0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80054d4:	f640 5201 	movw	r2, #3329	; 0xd01
 80054d8:	4293      	cmp	r3, r2
 80054da:	f000 8607 	beq.w	80060ec <_Z22handleSDORequestUploadRK9RxMessage+0xc50>
 80054de:	f640 5201 	movw	r2, #3329	; 0xd01
 80054e2:	4293      	cmp	r3, r2
 80054e4:	f300 8611 	bgt.w	800610a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 80054e8:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80054ec:	f000 85e9 	beq.w	80060c2 <_Z22handleSDORequestUploadRK9RxMessage+0xc26>
 80054f0:	f5b3 6f50 	cmp.w	r3, #3328	; 0xd00
 80054f4:	f300 8609 	bgt.w	800610a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 80054f8:	f640 4201 	movw	r2, #3073	; 0xc01
 80054fc:	4293      	cmp	r3, r2
 80054fe:	f000 85d2 	beq.w	80060a6 <_Z22handleSDORequestUploadRK9RxMessage+0xc0a>
 8005502:	f640 4201 	movw	r2, #3073	; 0xc01
 8005506:	4293      	cmp	r3, r2
 8005508:	f300 85ff 	bgt.w	800610a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 800550c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005510:	f000 85bb 	beq.w	800608a <_Z22handleSDORequestUploadRK9RxMessage+0xbee>
 8005514:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005518:	f300 85f7 	bgt.w	800610a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 800551c:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8005520:	f000 85a4 	beq.w	800606c <_Z22handleSDORequestUploadRK9RxMessage+0xbd0>
 8005524:	f5b3 6f30 	cmp.w	r3, #2816	; 0xb00
 8005528:	f300 85ef 	bgt.w	800610a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 800552c:	f640 2233 	movw	r2, #2611	; 0xa33
 8005530:	4293      	cmp	r3, r2
 8005532:	f300 85ea 	bgt.w	800610a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005536:	f5b3 6f22 	cmp.w	r3, #2592	; 0xa20
 800553a:	da16      	bge.n	800556a <_Z22handleSDORequestUploadRK9RxMessage+0xce>
 800553c:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8005540:	f300 85e3 	bgt.w	800610a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005544:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8005548:	da40      	bge.n	80055cc <_Z22handleSDORequestUploadRK9RxMessage+0x130>
 800554a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800554e:	f000 83f0 	beq.w	8005d32 <_Z22handleSDORequestUploadRK9RxMessage+0x896>
 8005552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005556:	f300 85d8 	bgt.w	800610a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 800555a:	2b21      	cmp	r3, #33	; 0x21
 800555c:	f300 8166 	bgt.w	800582c <_Z22handleSDORequestUploadRK9RxMessage+0x390>
 8005560:	2b00      	cmp	r3, #0
 8005562:	f300 8119 	bgt.w	8005798 <_Z22handleSDORequestUploadRK9RxMessage+0x2fc>
 8005566:	f000 bdd0 	b.w	800610a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 800556a:	f5a3 6322 	sub.w	r3, r3, #2592	; 0xa20
 800556e:	2b13      	cmp	r3, #19
 8005570:	f200 85cb 	bhi.w	800610a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005574:	a201      	add	r2, pc, #4	; (adr r2, 800557c <_Z22handleSDORequestUploadRK9RxMessage+0xe0>)
 8005576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557a:	bf00      	nop
 800557c:	08005f43 	.word	0x08005f43
 8005580:	0800610b 	.word	0x0800610b
 8005584:	0800610b 	.word	0x0800610b
 8005588:	0800610b 	.word	0x0800610b
 800558c:	0800610b 	.word	0x0800610b
 8005590:	08005f5f 	.word	0x08005f5f
 8005594:	08005f7d 	.word	0x08005f7d
 8005598:	08005f9b 	.word	0x08005f9b
 800559c:	08005fb9 	.word	0x08005fb9
 80055a0:	08005fd7 	.word	0x08005fd7
 80055a4:	0800610b 	.word	0x0800610b
 80055a8:	0800610b 	.word	0x0800610b
 80055ac:	0800610b 	.word	0x0800610b
 80055b0:	0800610b 	.word	0x0800610b
 80055b4:	0800610b 	.word	0x0800610b
 80055b8:	0800610b 	.word	0x0800610b
 80055bc:	08005ff5 	.word	0x08005ff5
 80055c0:	08006013 	.word	0x08006013
 80055c4:	08006031 	.word	0x08006031
 80055c8:	0800604f 	.word	0x0800604f
 80055cc:	f5a3 6310 	sub.w	r3, r3, #2304	; 0x900
 80055d0:	2b10      	cmp	r3, #16
 80055d2:	f200 859a 	bhi.w	800610a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 80055d6:	a201      	add	r2, pc, #4	; (adr r2, 80055dc <_Z22handleSDORequestUploadRK9RxMessage+0x140>)
 80055d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055dc:	08005d93 	.word	0x08005d93
 80055e0:	08005dc9 	.word	0x08005dc9
 80055e4:	08005e17 	.word	0x08005e17
 80055e8:	08005e4d 	.word	0x08005e4d
 80055ec:	08005e83 	.word	0x08005e83
 80055f0:	08005ee3 	.word	0x08005ee3
 80055f4:	0800610b 	.word	0x0800610b
 80055f8:	0800610b 	.word	0x0800610b
 80055fc:	0800610b 	.word	0x0800610b
 8005600:	0800610b 	.word	0x0800610b
 8005604:	0800610b 	.word	0x0800610b
 8005608:	0800610b 	.word	0x0800610b
 800560c:	0800610b 	.word	0x0800610b
 8005610:	0800610b 	.word	0x0800610b
 8005614:	0800610b 	.word	0x0800610b
 8005618:	0800610b 	.word	0x0800610b
 800561c:	08005f13 	.word	0x08005f13
 8005620:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 8005624:	2b59      	cmp	r3, #89	; 0x59
 8005626:	f200 8570 	bhi.w	800610a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 800562a:	a201      	add	r2, pc, #4	; (adr r2, 8005630 <_Z22handleSDORequestUploadRK9RxMessage+0x194>)
 800562c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005630:	0800597d 	.word	0x0800597d
 8005634:	0800599b 	.word	0x0800599b
 8005638:	080059b5 	.word	0x080059b5
 800563c:	080059d3 	.word	0x080059d3
 8005640:	080059f1 	.word	0x080059f1
 8005644:	08005a0b 	.word	0x08005a0b
 8005648:	08005a27 	.word	0x08005a27
 800564c:	0800610b 	.word	0x0800610b
 8005650:	0800610b 	.word	0x0800610b
 8005654:	0800610b 	.word	0x0800610b
 8005658:	0800610b 	.word	0x0800610b
 800565c:	0800610b 	.word	0x0800610b
 8005660:	0800610b 	.word	0x0800610b
 8005664:	0800610b 	.word	0x0800610b
 8005668:	0800610b 	.word	0x0800610b
 800566c:	0800610b 	.word	0x0800610b
 8005670:	08005a43 	.word	0x08005a43
 8005674:	08005a5d 	.word	0x08005a5d
 8005678:	0800610b 	.word	0x0800610b
 800567c:	0800610b 	.word	0x0800610b
 8005680:	0800610b 	.word	0x0800610b
 8005684:	0800610b 	.word	0x0800610b
 8005688:	0800610b 	.word	0x0800610b
 800568c:	0800610b 	.word	0x0800610b
 8005690:	0800610b 	.word	0x0800610b
 8005694:	0800610b 	.word	0x0800610b
 8005698:	0800610b 	.word	0x0800610b
 800569c:	0800610b 	.word	0x0800610b
 80056a0:	0800610b 	.word	0x0800610b
 80056a4:	0800610b 	.word	0x0800610b
 80056a8:	0800610b 	.word	0x0800610b
 80056ac:	0800610b 	.word	0x0800610b
 80056b0:	08005a77 	.word	0x08005a77
 80056b4:	08005a91 	.word	0x08005a91
 80056b8:	0800610b 	.word	0x0800610b
 80056bc:	0800610b 	.word	0x0800610b
 80056c0:	0800610b 	.word	0x0800610b
 80056c4:	0800610b 	.word	0x0800610b
 80056c8:	0800610b 	.word	0x0800610b
 80056cc:	0800610b 	.word	0x0800610b
 80056d0:	0800610b 	.word	0x0800610b
 80056d4:	0800610b 	.word	0x0800610b
 80056d8:	0800610b 	.word	0x0800610b
 80056dc:	0800610b 	.word	0x0800610b
 80056e0:	0800610b 	.word	0x0800610b
 80056e4:	0800610b 	.word	0x0800610b
 80056e8:	0800610b 	.word	0x0800610b
 80056ec:	0800610b 	.word	0x0800610b
 80056f0:	0800610b 	.word	0x0800610b
 80056f4:	0800610b 	.word	0x0800610b
 80056f8:	0800610b 	.word	0x0800610b
 80056fc:	0800610b 	.word	0x0800610b
 8005700:	0800610b 	.word	0x0800610b
 8005704:	0800610b 	.word	0x0800610b
 8005708:	0800610b 	.word	0x0800610b
 800570c:	0800610b 	.word	0x0800610b
 8005710:	0800610b 	.word	0x0800610b
 8005714:	0800610b 	.word	0x0800610b
 8005718:	0800610b 	.word	0x0800610b
 800571c:	0800610b 	.word	0x0800610b
 8005720:	0800610b 	.word	0x0800610b
 8005724:	0800610b 	.word	0x0800610b
 8005728:	0800610b 	.word	0x0800610b
 800572c:	0800610b 	.word	0x0800610b
 8005730:	08005aab 	.word	0x08005aab
 8005734:	08005ac7 	.word	0x08005ac7
 8005738:	08005ae3 	.word	0x08005ae3
 800573c:	08005afd 	.word	0x08005afd
 8005740:	08005b33 	.word	0x08005b33
 8005744:	0800610b 	.word	0x0800610b
 8005748:	08005b83 	.word	0x08005b83
 800574c:	08005b9f 	.word	0x08005b9f
 8005750:	08005bb9 	.word	0x08005bb9
 8005754:	08005bd5 	.word	0x08005bd5
 8005758:	0800610b 	.word	0x0800610b
 800575c:	0800610b 	.word	0x0800610b
 8005760:	0800610b 	.word	0x0800610b
 8005764:	0800610b 	.word	0x0800610b
 8005768:	0800610b 	.word	0x0800610b
 800576c:	0800610b 	.word	0x0800610b
 8005770:	08005bef 	.word	0x08005bef
 8005774:	08005c0b 	.word	0x08005c0b
 8005778:	08005c27 	.word	0x08005c27
 800577c:	08005c41 	.word	0x08005c41
 8005780:	08005c77 	.word	0x08005c77
 8005784:	0800610b 	.word	0x0800610b
 8005788:	08005cc7 	.word	0x08005cc7
 800578c:	08005ce3 	.word	0x08005ce3
 8005790:	08005cfd 	.word	0x08005cfd
 8005794:	08005d19 	.word	0x08005d19
 8005798:	3b01      	subs	r3, #1
 800579a:	2b20      	cmp	r3, #32
 800579c:	f200 84b5 	bhi.w	800610a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 80057a0:	a201      	add	r2, pc, #4	; (adr r2, 80057a8 <_Z22handleSDORequestUploadRK9RxMessage+0x30c>)
 80057a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a6:	bf00      	nop
 80057a8:	08005843 	.word	0x08005843
 80057ac:	08005861 	.word	0x08005861
 80057b0:	0800587f 	.word	0x0800587f
 80057b4:	0800589d 	.word	0x0800589d
 80057b8:	080058bb 	.word	0x080058bb
 80057bc:	0800610b 	.word	0x0800610b
 80057c0:	0800610b 	.word	0x0800610b
 80057c4:	0800610b 	.word	0x0800610b
 80057c8:	0800610b 	.word	0x0800610b
 80057cc:	0800610b 	.word	0x0800610b
 80057d0:	0800610b 	.word	0x0800610b
 80057d4:	0800610b 	.word	0x0800610b
 80057d8:	0800610b 	.word	0x0800610b
 80057dc:	0800610b 	.word	0x0800610b
 80057e0:	0800610b 	.word	0x0800610b
 80057e4:	080058d9 	.word	0x080058d9
 80057e8:	0800610b 	.word	0x0800610b
 80057ec:	0800610b 	.word	0x0800610b
 80057f0:	0800610b 	.word	0x0800610b
 80057f4:	0800610b 	.word	0x0800610b
 80057f8:	0800610b 	.word	0x0800610b
 80057fc:	0800610b 	.word	0x0800610b
 8005800:	0800610b 	.word	0x0800610b
 8005804:	0800610b 	.word	0x0800610b
 8005808:	0800610b 	.word	0x0800610b
 800580c:	0800610b 	.word	0x0800610b
 8005810:	0800610b 	.word	0x0800610b
 8005814:	0800610b 	.word	0x0800610b
 8005818:	0800610b 	.word	0x0800610b
 800581c:	0800610b 	.word	0x0800610b
 8005820:	0800610b 	.word	0x0800610b
 8005824:	08005911 	.word	0x08005911
 8005828:	08005947 	.word	0x08005947
 800582c:	f240 4269 	movw	r2, #1129	; 0x469
 8005830:	4293      	cmp	r3, r2
 8005832:	f300 846a 	bgt.w	800610a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
 8005836:	f5b3 6f82 	cmp.w	r3, #1040	; 0x410
 800583a:	f6bf aef1 	bge.w	8005620 <_Z22handleSDORequestUploadRK9RxMessage+0x184>
 800583e:	f000 bc64 	b.w	800610a <_Z22handleSDORequestUploadRK9RxMessage+0xc6e>
        case 0x1: {   // OD_NodeID
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005842:	2303      	movs	r3, #3
 8005844:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_NodeID>(OD_NodeID_get());
 8005848:	f000 fc86 	bl	8006158 <_Z13OD_NodeID_getv>
 800584c:	4603      	mov	r3, r0
 800584e:	461a      	mov	r2, r3
 8005850:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005854:	4611      	mov	r1, r2
 8005856:	4618      	mov	r0, r3
 8005858:	f001 fd02 	bl	8007260 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_NodeIDEEEvNT_8dataTypeE>
            break;
 800585c:	f000 bc5e 	b.w	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x2: {   // OD_NodeStatus
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005860:	2303      	movs	r3, #3
 8005862:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_NodeStatus>(OD_NodeStatus_get());
 8005866:	f000 fc93 	bl	8006190 <_Z17OD_NodeStatus_getv>
 800586a:	4603      	mov	r3, r0
 800586c:	461a      	mov	r2, r3
 800586e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005872:	4611      	mov	r1, r2
 8005874:	4618      	mov	r0, r3
 8005876:	f001 fd08 	bl	800728a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_NodeStatusEEEvNT_8dataTypeE>
            break;
 800587a:	f000 bc4f 	b.w	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x3: {   // OD_ProtocolVersion
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800587e:	2303      	movs	r3, #3
 8005880:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_ProtocolVersion>(OD_ProtocolVersion_get());
 8005884:	f000 fca0 	bl	80061c8 <_Z22OD_ProtocolVersion_getv>
 8005888:	4603      	mov	r3, r0
 800588a:	461a      	mov	r2, r3
 800588c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005890:	4611      	mov	r1, r2
 8005892:	4618      	mov	r0, r3
 8005894:	f001 fd0e 	bl	80072b4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_ProtocolVersionEEEvNT_8dataTypeE>
            break;
 8005898:	f000 bc40 	b.w	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x4: {   // OD_StackVersion
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800589c:	2303      	movs	r3, #3
 800589e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_StackVersion>(OD_StackVersion_get());
 80058a2:	f000 fcad 	bl	8006200 <_Z19OD_StackVersion_getv>
 80058a6:	4603      	mov	r3, r0
 80058a8:	461a      	mov	r2, r3
 80058aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058ae:	4611      	mov	r1, r2
 80058b0:	4618      	mov	r0, r3
 80058b2:	f001 fd14 	bl	80072de <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_StackVersionEEEvNT_8dataTypeE>
            break;
 80058b6:	f000 bc31 	b.w	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x5: {   // OD_DbcVersion
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_DbcVersion>(OD_DbcVersion_get());
 80058c0:	f000 fcba 	bl	8006238 <_Z17OD_DbcVersion_getv>
 80058c4:	4603      	mov	r3, r0
 80058c6:	461a      	mov	r2, r3
 80058c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80058cc:	4611      	mov	r1, r2
 80058ce:	4618      	mov	r0, r3
 80058d0:	f001 fd1a 	bl	8007308 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_DbcVersionEEEvNT_8dataTypeE>
            break;
 80058d4:	f000 bc22 	b.w	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x10: {   // OD_HeartbeatInterval
            uint16_t value = msgSdoReq.get<can::signals::SensorF_OD_HeartbeatInterval>();
 80058d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80058dc:	4618      	mov	r0, r3
 80058de:	f002 f9dd 	bl	8007c9c <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals28SensorF_OD_HeartbeatIntervalEEENT_8dataTypeEv>
 80058e2:	4603      	mov	r3, r0
 80058e4:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                OD_HeartbeatInterval_set(value);
 80058e8:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 fcdb 	bl	80062a8 <_Z24OD_HeartbeatInterval_sett>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 80058f2:	2300      	movs	r3, #0
 80058f4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_HeartbeatInterval>(OD_HeartbeatInterval_get());
 80058f8:	f000 fcba 	bl	8006270 <_Z24OD_HeartbeatInterval_getv>
 80058fc:	4603      	mov	r3, r0
 80058fe:	461a      	mov	r2, r3
 8005900:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005904:	4611      	mov	r1, r2
 8005906:	4618      	mov	r0, r3
 8005908:	f001 fd13 	bl	8007332 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_HeartbeatIntervalEEEvNT_8dataTypeE>
            break;
 800590c:	f000 bc06 	b.w	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x20: {   // OD_SendOdOnBootup
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_SendOdOnBootup>();
 8005910:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005914:	4618      	mov	r0, r3
 8005916:	f002 f9d3 	bl	8007cc0 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals25SensorF_OD_SendOdOnBootupEEENT_8dataTypeEv>
 800591a:	4603      	mov	r3, r0
 800591c:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
                OD_SendOdOnBootup_set(value);
 8005920:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8005924:	4618      	mov	r0, r3
 8005926:	f000 fcf7 	bl	8006318 <_Z21OD_SendOdOnBootup_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 800592a:	2300      	movs	r3, #0
 800592c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_SendOdOnBootup>(OD_SendOdOnBootup_get());
 8005930:	f000 fcd6 	bl	80062e0 <_Z21OD_SendOdOnBootup_getv>
 8005934:	4603      	mov	r3, r0
 8005936:	461a      	mov	r2, r3
 8005938:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800593c:	4611      	mov	r1, r2
 800593e:	4618      	mov	r0, r3
 8005940:	f001 fd0c 	bl	800735c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals25SensorF_OD_SendOdOnBootupEEEvNT_8dataTypeE>
            break;
 8005944:	e3ea      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x21: {   // OD_OdEntrySendInterval
            uint16_t value = msgSdoReq.get<can::signals::SensorF_OD_OdEntrySendInterval>();
 8005946:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800594a:	4618      	mov	r0, r3
 800594c:	f002 f9ca 	bl	8007ce4 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_OdEntrySendIntervalEEENT_8dataTypeEv>
 8005950:	4603      	mov	r3, r0
 8005952:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
                OD_OdEntrySendInterval_set(value);
 8005956:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fd14 	bl	8006388 <_Z26OD_OdEntrySendInterval_sett>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005960:	2300      	movs	r3, #0
 8005962:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_OdEntrySendInterval>(OD_OdEntrySendInterval_get());
 8005966:	f000 fcf3 	bl	8006350 <_Z26OD_OdEntrySendInterval_getv>
 800596a:	4603      	mov	r3, r0
 800596c:	461a      	mov	r2, r3
 800596e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005972:	4611      	mov	r1, r2
 8005974:	4618      	mov	r0, r3
 8005976:	f001 fd06 	bl	8007386 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>
            break;
 800597a:	e3cf      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x410: {   // OD_CpuUsage
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800597c:	2303      	movs	r3, #3
 800597e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CpuUsage>(OD_CpuUsage_get());
 8005982:	f000 fd1d 	bl	80063c0 <_Z15OD_CpuUsage_getv>
 8005986:	eef0 7a40 	vmov.f32	s15, s0
 800598a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800598e:	eeb0 0a67 	vmov.f32	s0, s15
 8005992:	4618      	mov	r0, r3
 8005994:	f001 fd0c 	bl	80073b0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_CpuUsageEEEvNT_8dataTypeE>
            break;
 8005998:	e3c0      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x411: {   // OD_MemFree
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800599a:	2303      	movs	r3, #3
 800599c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_MemFree>(OD_MemFree_get());
 80059a0:	f000 fd2c 	bl	80063fc <_Z14OD_MemFree_getv>
 80059a4:	4602      	mov	r2, r0
 80059a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059aa:	4611      	mov	r1, r2
 80059ac:	4618      	mov	r0, r3
 80059ae:	f001 fd16 	bl	80073de <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_MemFreeEEEvNT_8dataTypeE>
            break;
 80059b2:	e3b3      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x412: {   // OD_BoardTemp
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80059b4:	2303      	movs	r3, #3
 80059b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_BoardTemp>(OD_BoardTemp_get());
 80059ba:	f000 fd3b 	bl	8006434 <_Z16OD_BoardTemp_getv>
 80059be:	eef0 7a40 	vmov.f32	s15, s0
 80059c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059c6:	eeb0 0a67 	vmov.f32	s0, s15
 80059ca:	4618      	mov	r0, r3
 80059cc:	f001 fd1b 	bl	8007406 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BoardTempEEEvNT_8dataTypeE>
            break;
 80059d0:	e3a4      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x413: {   // OD_InputVoltage
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80059d2:	2303      	movs	r3, #3
 80059d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_InputVoltage>(OD_InputVoltage_get());
 80059d8:	f000 fd4a 	bl	8006470 <_Z19OD_InputVoltage_getv>
 80059dc:	eef0 7a40 	vmov.f32	s15, s0
 80059e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80059e4:	eeb0 0a67 	vmov.f32	s0, s15
 80059e8:	4618      	mov	r0, r3
 80059ea:	f001 fd23 	bl	8007434 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_InputVoltageEEEvNT_8dataTypeE>
            break;
 80059ee:	e395      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x414: {   // OD_runtime
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_runtime>(OD_runtime_get());
 80059f6:	f000 fd59 	bl	80064ac <_Z14OD_runtime_getv>
 80059fa:	4602      	mov	r2, r0
 80059fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a00:	4611      	mov	r1, r2
 8005a02:	4618      	mov	r0, r3
 8005a04:	f001 fd2d 	bl	8007462 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_runtimeEEEvNT_8dataTypeE>
            break;
 8005a08:	e388      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x415: {   // OD_SdcIn
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_SdcIn>(OD_SdcIn_get());
 8005a10:	f000 fd68 	bl	80064e4 <_Z12OD_SdcIn_getv>
 8005a14:	4603      	mov	r3, r0
 8005a16:	461a      	mov	r2, r3
 8005a18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f001 fd33 	bl	800748a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals16SensorF_OD_SdcInEEEvNT_8dataTypeE>
            break;
 8005a24:	e37a      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x416: {   // OD_SdcOut
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_SdcOut>(OD_SdcOut_get());
 8005a2c:	f000 fd76 	bl	800651c <_Z13OD_SdcOut_getv>
 8005a30:	4603      	mov	r3, r0
 8005a32:	461a      	mov	r2, r3
 8005a34:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a38:	4611      	mov	r1, r2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f001 fd3a 	bl	80074b4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_SdcOutEEEvNT_8dataTypeE>
            break;
 8005a40:	e36c      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x420: {   // OD_ChipUID1
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_ChipUID1>(OD_ChipUID1_get());
 8005a48:	f000 fd84 	bl	8006554 <_Z15OD_ChipUID1_getv>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005a54:	4608      	mov	r0, r1
 8005a56:	f001 fd42 	bl	80074de <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID1EEEvNT_8dataTypeE>
            break;
 8005a5a:	e35f      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x421: {   // OD_ChipUID2
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005a5c:	2303      	movs	r3, #3
 8005a5e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_ChipUID2>(OD_ChipUID2_get());
 8005a62:	f000 fd97 	bl	8006594 <_Z15OD_ChipUID2_getv>
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8005a6e:	4608      	mov	r0, r1
 8005a70:	f001 fd4e 	bl	8007510 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID2EEEvNT_8dataTypeE>
            break;
 8005a74:	e352      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x430: {   // OD_BuildDate
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_BuildDate>(OD_BuildDate_get());
 8005a7c:	f000 fdaa 	bl	80065d4 <_Z16OD_BuildDate_getv>
 8005a80:	4602      	mov	r2, r0
 8005a82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a86:	4611      	mov	r1, r2
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f001 fd5a 	bl	8007542 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildDateEEEvNT_8dataTypeE>
            break;
 8005a8e:	e345      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x431: {   // OD_BuildTime
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_BuildTime>(OD_BuildTime_get());
 8005a96:	f000 fdb9 	bl	800660c <_Z16OD_BuildTime_getv>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f001 fd61 	bl	800756a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildTimeEEEvNT_8dataTypeE>
            break;
 8005aa8:	e338      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x450: {   // OD_CAN1_TxErrCnt
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_TxErrCnt>(OD_CAN1_TxErrCnt_get());
 8005ab0:	f000 fdc8 	bl	8006644 <_Z20OD_CAN1_TxErrCnt_getv>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005abc:	4611      	mov	r1, r2
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f001 fd67 	bl	8007592 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>
            break;
 8005ac4:	e32a      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x451: {   // OD_CAN1_RxErrCnt
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_RxErrCnt>(OD_CAN1_RxErrCnt_get());
 8005acc:	f000 fdd6 	bl	800667c <_Z20OD_CAN1_RxErrCnt_getv>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ad8:	4611      	mov	r1, r2
 8005ada:	4618      	mov	r0, r3
 8005adc:	f001 fd6e 	bl	80075bc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>
            break;
 8005ae0:	e31c      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x452: {   // OD_CAN1_lastErrorCode
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005ae2:	2303      	movs	r3, #3
 8005ae4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_lastErrorCode>(OD_CAN1_lastErrorCode_get());
 8005ae8:	f000 fde4 	bl	80066b4 <_Z25OD_CAN1_lastErrorCode_getv>
 8005aec:	4602      	mov	r2, r0
 8005aee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005af2:	4611      	mov	r1, r2
 8005af4:	4618      	mov	r0, r3
 8005af6:	f001 fd76 	bl	80075e6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8005afa:	e30f      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x453: {   // OD_CAN1_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_CAN1_autoErrorReset>();
 8005afc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005b00:	4618      	mov	r0, r3
 8005b02:	f002 f901 	bl	8007d08 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>
 8005b06:	4603      	mov	r3, r0
 8005b08:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
                OD_CAN1_autoErrorReset_set(value);
 8005b0c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005b10:	4618      	mov	r0, r3
 8005b12:	f000 fe07 	bl	8006724 <_Z26OD_CAN1_autoErrorReset_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_autoErrorReset>(OD_CAN1_autoErrorReset_get());
 8005b1c:	f000 fde6 	bl	80066ec <_Z26OD_CAN1_autoErrorReset_getv>
 8005b20:	4603      	mov	r3, r0
 8005b22:	461a      	mov	r2, r3
 8005b24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b28:	4611      	mov	r1, r2
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f001 fd6f 	bl	800760e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8005b30:	e2f4      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x454: {   // OD_CAN1_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SensorF_OD_CAN1_Baudrate>();
 8005b32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005b36:	4618      	mov	r0, r3
 8005b38:	f002 f8f8 	bl	8007d2c <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_CAN1_BaudrateEEENT_8dataTypeEv>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
if (value < 125 || value > 1000) {
 8005b42:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005b46:	2b7c      	cmp	r3, #124	; 0x7c
 8005b48:	d904      	bls.n	8005b54 <_Z22handleSDORequestUploadRK9RxMessage+0x6b8>
 8005b4a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005b4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b52:	d903      	bls.n	8005b5c <_Z22handleSDORequestUploadRK9RxMessage+0x6c0>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8005b54:	2305      	movs	r3, #5
 8005b56:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005b5a:	e007      	b.n	8005b6c <_Z22handleSDORequestUploadRK9RxMessage+0x6d0>
            }
            else {
                OD_CAN1_Baudrate_set(value);
 8005b5c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fe17 	bl	8006794 <_Z20OD_CAN1_Baudrate_sett>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_Baudrate>(OD_CAN1_Baudrate_get());
 8005b6c:	f000 fdf6 	bl	800675c <_Z20OD_CAN1_Baudrate_getv>
 8005b70:	4603      	mov	r3, r0
 8005b72:	461a      	mov	r2, r3
 8005b74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b78:	4611      	mov	r1, r2
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f001 fd5c 	bl	8007638 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_BaudrateEEEvNT_8dataTypeE>
            break;
 8005b80:	e2cc      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x456: {   // OD_CAN1_Status
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005b82:	2303      	movs	r3, #3
 8005b84:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_Status>(OD_CAN1_Status_get());
 8005b88:	f000 fe20 	bl	80067cc <_Z18OD_CAN1_Status_getv>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005b94:	4611      	mov	r1, r2
 8005b96:	4618      	mov	r0, r3
 8005b98:	f001 fd63 	bl	8007662 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN1_StatusEEEvNT_8dataTypeE>
            break;
 8005b9c:	e2be      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x457: {   // OD_CAN1_DiscardedTxMessages
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_DiscardedTxMessages>(OD_CAN1_DiscardedTxMessages_get());
 8005ba4:	f000 fe2e 	bl	8006804 <_Z31OD_CAN1_DiscardedTxMessages_getv>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bae:	4611      	mov	r1, r2
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f001 fd6b 	bl	800768c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8005bb6:	e2b1      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x458: {   // OD_CAN1_ErrorStatus
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_ErrorStatus>(OD_CAN1_ErrorStatus_get());
 8005bbe:	f000 fe3d 	bl	800683c <_Z23OD_CAN1_ErrorStatus_getv>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005bca:	4611      	mov	r1, r2
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f001 fd71 	bl	80076b4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>
            break;
 8005bd2:	e2a3      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x459: {   // OD_CAN1_DelayedTxMessages
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005bd4:	2303      	movs	r3, #3
 8005bd6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN1_DelayedTxMessages>(OD_CAN1_DelayedTxMessages_get());
 8005bda:	f000 fe4b 	bl	8006874 <_Z29OD_CAN1_DelayedTxMessages_getv>
 8005bde:	4602      	mov	r2, r0
 8005be0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005be4:	4611      	mov	r1, r2
 8005be6:	4618      	mov	r0, r3
 8005be8:	f001 fd79 	bl	80076de <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 8005bec:	e296      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x460: {   // OD_CAN2_TxErrCnt
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005bee:	2303      	movs	r3, #3
 8005bf0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_TxErrCnt>(OD_CAN2_TxErrCnt_get());
 8005bf4:	f000 fe5a 	bl	80068ac <_Z20OD_CAN2_TxErrCnt_getv>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c00:	4611      	mov	r1, r2
 8005c02:	4618      	mov	r0, r3
 8005c04:	f001 fd7f 	bl	8007706 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>
            break;
 8005c08:	e288      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x461: {   // OD_CAN2_RxErrCnt
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_RxErrCnt>(OD_CAN2_RxErrCnt_get());
 8005c10:	f000 fe68 	bl	80068e4 <_Z20OD_CAN2_RxErrCnt_getv>
 8005c14:	4603      	mov	r3, r0
 8005c16:	461a      	mov	r2, r3
 8005c18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f001 fd86 	bl	8007730 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>
            break;
 8005c24:	e27a      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x462: {   // OD_CAN2_lastErrorCode
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_lastErrorCode>(OD_CAN2_lastErrorCode_get());
 8005c2c:	f000 fe76 	bl	800691c <_Z25OD_CAN2_lastErrorCode_getv>
 8005c30:	4602      	mov	r2, r0
 8005c32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c36:	4611      	mov	r1, r2
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f001 fd8e 	bl	800775a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>
            break;
 8005c3e:	e26d      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x463: {   // OD_CAN2_autoErrorReset
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_CAN2_autoErrorReset>();
 8005c40:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c44:	4618      	mov	r0, r3
 8005c46:	f002 f883 	bl	8007d50 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
                OD_CAN2_autoErrorReset_set(value);
 8005c50:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8005c54:	4618      	mov	r0, r3
 8005c56:	f000 fe99 	bl	800698c <_Z26OD_CAN2_autoErrorReset_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_autoErrorReset>(OD_CAN2_autoErrorReset_get());
 8005c60:	f000 fe78 	bl	8006954 <_Z26OD_CAN2_autoErrorReset_getv>
 8005c64:	4603      	mov	r3, r0
 8005c66:	461a      	mov	r2, r3
 8005c68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005c6c:	4611      	mov	r1, r2
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f001 fd87 	bl	8007782 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>
            break;
 8005c74:	e252      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x464: {   // OD_CAN2_Baudrate
            uint16_t value = msgSdoReq.get<can::signals::SensorF_OD_CAN2_Baudrate>();
 8005c76:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f002 f87a 	bl	8007d74 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_CAN2_BaudrateEEENT_8dataTypeEv>
 8005c80:	4603      	mov	r3, r0
 8005c82:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
if (value < 125 || value > 1000) {
 8005c86:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005c8a:	2b7c      	cmp	r3, #124	; 0x7c
 8005c8c:	d904      	bls.n	8005c98 <_Z22handleSDORequestUploadRK9RxMessage+0x7fc>
 8005c8e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005c92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c96:	d903      	bls.n	8005ca0 <_Z22handleSDORequestUploadRK9RxMessage+0x804>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8005c98:	2305      	movs	r3, #5
 8005c9a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005c9e:	e007      	b.n	8005cb0 <_Z22handleSDORequestUploadRK9RxMessage+0x814>
            }
            else {
                OD_CAN2_Baudrate_set(value);
 8005ca0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f000 fea9 	bl	80069fc <_Z20OD_CAN2_Baudrate_sett>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_Baudrate>(OD_CAN2_Baudrate_get());
 8005cb0:	f000 fe88 	bl	80069c4 <_Z20OD_CAN2_Baudrate_getv>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f001 fd74 	bl	80077ac <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_BaudrateEEEvNT_8dataTypeE>
            break;
 8005cc4:	e22a      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x466: {   // OD_CAN2_Status
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_Status>(OD_CAN2_Status_get());
 8005ccc:	f000 feb2 	bl	8006a34 <_Z18OD_CAN2_Status_getv>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cd8:	4611      	mov	r1, r2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f001 fd7b 	bl	80077d6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN2_StatusEEEvNT_8dataTypeE>
            break;
 8005ce0:	e21c      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x467: {   // OD_CAN2_DiscardedTxMessages
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_DiscardedTxMessages>(OD_CAN2_DiscardedTxMessages_get());
 8005ce8:	f000 fec0 	bl	8006a6c <_Z31OD_CAN2_DiscardedTxMessages_getv>
 8005cec:	4602      	mov	r2, r0
 8005cee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f001 fd83 	bl	8007800 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>
            break;
 8005cfa:	e20f      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x468: {   // OD_CAN2_ErrorStatus
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_ErrorStatus>(OD_CAN2_ErrorStatus_get());
 8005d02:	f000 fecf 	bl	8006aa4 <_Z23OD_CAN2_ErrorStatus_getv>
 8005d06:	4603      	mov	r3, r0
 8005d08:	461a      	mov	r2, r3
 8005d0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d0e:	4611      	mov	r1, r2
 8005d10:	4618      	mov	r0, r3
 8005d12:	f001 fd89 	bl	8007828 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>
            break;
 8005d16:	e201      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x469: {   // OD_CAN2_DelayedTxMessages
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CAN2_DelayedTxMessages>(OD_CAN2_DelayedTxMessages_get());
 8005d1e:	f000 fedd 	bl	8006adc <_Z29OD_CAN2_DelayedTxMessages_getv>
 8005d22:	4602      	mov	r2, r0
 8005d24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d28:	4611      	mov	r1, r2
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f001 fd91 	bl	8007852 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>
            break;
 8005d30:	e1f4      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x800: {   // OD_samplingInterval
            float value = msgSdoReq.get<can::signals::SensorF_OD_samplingInterval>();
 8005d32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d36:	4618      	mov	r0, r3
 8005d38:	f002 f82e 	bl	8007d98 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals27SensorF_OD_samplingIntervalEEENT_8dataTypeEv>
 8005d3c:	ed87 0a1b 	vstr	s0, [r7, #108]	; 0x6c
if (value < 0.01f || value > 100.0f) {
 8005d40:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005d44:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 80060e0 <_Z22handleSDORequestUploadRK9RxMessage+0xc44>
 8005d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d50:	d408      	bmi.n	8005d64 <_Z22handleSDORequestUploadRK9RxMessage+0x8c8>
 8005d52:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005d56:	ed9f 7ae3 	vldr	s14, [pc, #908]	; 80060e4 <_Z22handleSDORequestUploadRK9RxMessage+0xc48>
 8005d5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d62:	dd03      	ble.n	8005d6c <_Z22handleSDORequestUploadRK9RxMessage+0x8d0>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8005d64:	2305      	movs	r3, #5
 8005d66:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005d6a:	e006      	b.n	8005d7a <_Z22handleSDORequestUploadRK9RxMessage+0x8de>
            }
            else {
                OD_samplingInterval_set(value);
 8005d6c:	ed97 0a1b 	vldr	s0, [r7, #108]	; 0x6c
 8005d70:	f000 feee 	bl	8006b50 <_Z23OD_samplingInterval_setf>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005d74:	2300      	movs	r3, #0
 8005d76:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_samplingInterval>(OD_samplingInterval_get());
 8005d7a:	f000 fecb 	bl	8006b14 <_Z23OD_samplingInterval_getv>
 8005d7e:	eef0 7a40 	vmov.f32	s15, s0
 8005d82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d86:	eeb0 0a67 	vmov.f32	s0, s15
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f001 fd75 	bl	800787a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_samplingIntervalEEEvNT_8dataTypeE>
            break;
 8005d90:	e1c4      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x900: {   // OD_TelemetryCommands
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_TelemetryCommands>();
 8005d92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005d96:	4618      	mov	r0, r3
 8005d98:	f002 f812 	bl	8007dc0 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals28SensorF_OD_TelemetryCommandsEEENT_8dataTypeEv>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
                OD_TelemetryCommands_set(value);
 8005da2:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 ff0a 	bl	8006bc0 <_Z24OD_TelemetryCommands_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005dac:	2300      	movs	r3, #0
 8005dae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_TelemetryCommands>(OD_TelemetryCommands_get());
 8005db2:	f000 fee9 	bl	8006b88 <_Z24OD_TelemetryCommands_getv>
 8005db6:	4603      	mov	r3, r0
 8005db8:	461a      	mov	r2, r3
 8005dba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f001 fd71 	bl	80078a8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_TelemetryCommandsEEEvNT_8dataTypeE>
            break;
 8005dc6:	e1a9      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x901: {   // OD_StateMachineInterval
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_StateMachineInterval>();
 8005dc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f002 f809 	bl	8007de4 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_StateMachineIntervalEEENT_8dataTypeEv>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
if (value < 5 || value > 100) {
 8005dd8:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	d903      	bls.n	8005de8 <_Z22handleSDORequestUploadRK9RxMessage+0x94c>
 8005de0:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8005de4:	2b64      	cmp	r3, #100	; 0x64
 8005de6:	d903      	bls.n	8005df0 <_Z22handleSDORequestUploadRK9RxMessage+0x954>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8005de8:	2305      	movs	r3, #5
 8005dea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005dee:	e007      	b.n	8005e00 <_Z22handleSDORequestUploadRK9RxMessage+0x964>
            }
            else {
                OD_StateMachineInterval_set(value);
 8005df0:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8005df4:	4618      	mov	r0, r3
 8005df6:	f000 ff1b 	bl	8006c30 <_Z27OD_StateMachineInterval_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_StateMachineInterval>(OD_StateMachineInterval_get());
 8005e00:	f000 fefa 	bl	8006bf8 <_Z27OD_StateMachineInterval_getv>
 8005e04:	4603      	mov	r3, r0
 8005e06:	461a      	mov	r2, r3
 8005e08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f001 fd5f 	bl	80078d2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineIntervalEEEvNT_8dataTypeE>
            break;
 8005e14:	e182      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x902: {   // OD_StateMachineActivate
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_StateMachineActivate>();
 8005e16:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f001 fff4 	bl	8007e08 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_StateMachineActivateEEENT_8dataTypeEv>
 8005e20:	4603      	mov	r3, r0
 8005e22:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
                OD_StateMachineActivate_set(value);
 8005e26:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 ff38 	bl	8006ca0 <_Z27OD_StateMachineActivate_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_StateMachineActivate>(OD_StateMachineActivate_get());
 8005e36:	f000 ff17 	bl	8006c68 <_Z27OD_StateMachineActivate_getv>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e42:	4611      	mov	r1, r2
 8005e44:	4618      	mov	r0, r3
 8005e46:	f001 fd59 	bl	80078fc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineActivateEEEvNT_8dataTypeE>
            break;
 8005e4a:	e167      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x903: {   // OD_HVBatteryMode
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_HVBatteryMode>();
 8005e4c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 ffeb 	bl	8007e2c <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_HVBatteryModeEEENT_8dataTypeEv>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
                OD_HVBatteryMode_set(value);
 8005e5c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 ff55 	bl	8006d10 <_Z20OD_HVBatteryMode_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_HVBatteryMode>(OD_HVBatteryMode_get());
 8005e6c:	f000 ff34 	bl	8006cd8 <_Z20OD_HVBatteryMode_getv>
 8005e70:	4603      	mov	r3, r0
 8005e72:	461a      	mov	r2, r3
 8005e74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005e78:	4611      	mov	r1, r2
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f001 fd53 	bl	8007926 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_HVBatteryModeEEEvNT_8dataTypeE>
            break;
 8005e80:	e14c      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x904: {   // OD_EncoderWheelDiameter
            float value = msgSdoReq.get<can::signals::SensorF_OD_EncoderWheelDiameter>();
 8005e82:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e86:	4618      	mov	r0, r3
 8005e88:	f001 ffe2 	bl	8007e50 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_EncoderWheelDiameterEEENT_8dataTypeEv>
 8005e8c:	ed87 0a1d 	vstr	s0, [r7, #116]	; 0x74
if (value < 1.0f || value > 300.0f) {
 8005e90:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005e94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea0:	d408      	bmi.n	8005eb4 <_Z22handleSDORequestUploadRK9RxMessage+0xa18>
 8005ea2:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 8005ea6:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80060e8 <_Z22handleSDORequestUploadRK9RxMessage+0xc4c>
 8005eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eb2:	dd03      	ble.n	8005ebc <_Z22handleSDORequestUploadRK9RxMessage+0xa20>
                respCode = can::signals::SensorF_SDO_RespCode::ERR_OUT_OF_RANGE;
 8005eb4:	2305      	movs	r3, #5
 8005eb6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005eba:	e006      	b.n	8005eca <_Z22handleSDORequestUploadRK9RxMessage+0xa2e>
            }
            else {
                OD_EncoderWheelDiameter_set(value);
 8005ebc:	ed97 0a1d 	vldr	s0, [r7, #116]	; 0x74
 8005ec0:	f000 ff60 	bl	8006d84 <_Z27OD_EncoderWheelDiameter_setf>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            }
            msgSdoResp.set<can::signals::SensorF_OD_EncoderWheelDiameter>(OD_EncoderWheelDiameter_get());
 8005eca:	f000 ff3d 	bl	8006d48 <_Z27OD_EncoderWheelDiameter_getv>
 8005ece:	eef0 7a40 	vmov.f32	s15, s0
 8005ed2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8005eda:	4618      	mov	r0, r3
 8005edc:	f001 fd38 	bl	8007950 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_EncoderWheelDiameterEEEvNT_8dataTypeE>
            break;
 8005ee0:	e11c      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x905: {   // OD_EncoderResetPosition
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_EncoderResetPosition>();
 8005ee2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f001 ffc6 	bl	8007e78 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_EncoderResetPositionEEENT_8dataTypeEv>
 8005eec:	4603      	mov	r3, r0
 8005eee:	f887 307a 	strb.w	r3, [r7, #122]	; 0x7a
                OD_EncoderResetPosition_set(value);
 8005ef2:	f897 307a 	ldrb.w	r3, [r7, #122]	; 0x7a
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f000 ff60 	bl	8006dbc <_Z27OD_EncoderResetPosition_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005efc:	2300      	movs	r3, #0
 8005efe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(0x905);
 8005f02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f06:	f640 1105 	movw	r1, #2309	; 0x905
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f001 fd37 	bl	800797e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 8005f10:	e104      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0x910: {   // OD_SetReset
            uint8_t value = msgSdoReq.get<can::signals::SensorF_OD_SetReset>();
 8005f12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005f16:	4618      	mov	r0, r3
 8005f18:	f001 ffc0 	bl	8007e9c <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals19SensorF_OD_SetResetEEENT_8dataTypeEv>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
                OD_SetReset_set(value);
 8005f22:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 ff64 	bl	8006df4 <_Z15OD_SetReset_seth>
                respCode = can::signals::SensorF_SDO_RespCode::OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(0x910);
 8005f32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f36:	f44f 6111 	mov.w	r1, #2320	; 0x910
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f001 fd1f 	bl	800797e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 8005f40:	e0ec      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA20: {   // OD_IMU_number
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_number>(OD_IMU_number_get());
 8005f48:	f000 ff70 	bl	8006e2c <_Z17OD_IMU_number_getv>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f54:	4611      	mov	r1, r2
 8005f56:	4618      	mov	r0, r3
 8005f58:	f001 fd26 	bl	80079a8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_numberEEEvNT_8dataTypeE>
            break;
 8005f5c:	e0de      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA25: {   // OD_IMU1_Temperature
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU1_Temperature>(OD_IMU1_Temperature_get());
 8005f64:	f000 ff7e 	bl	8006e64 <_Z23OD_IMU1_Temperature_getv>
 8005f68:	eef0 7a40 	vmov.f32	s15, s0
 8005f6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f70:	eeb0 0a67 	vmov.f32	s0, s15
 8005f74:	4618      	mov	r0, r3
 8005f76:	f001 fd2c 	bl	80079d2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU1_TemperatureEEEvNT_8dataTypeE>
            break;
 8005f7a:	e0cf      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA26: {   // OD_IMU2_Temperature
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU2_Temperature>(OD_IMU2_Temperature_get());
 8005f82:	f000 ff8d 	bl	8006ea0 <_Z23OD_IMU2_Temperature_getv>
 8005f86:	eef0 7a40 	vmov.f32	s15, s0
 8005f8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8005f92:	4618      	mov	r0, r3
 8005f94:	f001 fd34 	bl	8007a00 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU2_TemperatureEEEvNT_8dataTypeE>
            break;
 8005f98:	e0c0      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA27: {   // OD_IMU3_Temperature
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU3_Temperature>(OD_IMU3_Temperature_get());
 8005fa0:	f000 ff9c 	bl	8006edc <_Z23OD_IMU3_Temperature_getv>
 8005fa4:	eef0 7a40 	vmov.f32	s15, s0
 8005fa8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005fac:	eeb0 0a67 	vmov.f32	s0, s15
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f001 fd3c 	bl	8007a2e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU3_TemperatureEEEvNT_8dataTypeE>
            break;
 8005fb6:	e0b1      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA28: {   // OD_IMU_AccelX
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005fb8:	2303      	movs	r3, #3
 8005fba:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelX>(OD_IMU_AccelX_get());
 8005fbe:	f000 ffab 	bl	8006f18 <_Z17OD_IMU_AccelX_getv>
 8005fc2:	eef0 7a40 	vmov.f32	s15, s0
 8005fc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005fca:	eeb0 0a67 	vmov.f32	s0, s15
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f001 fd44 	bl	8007a5c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelXEEEvNT_8dataTypeE>
            break;
 8005fd4:	e0a2      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA29: {   // OD_IMU_AccelY
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelY>(OD_IMU_AccelY_get());
 8005fdc:	f000 ffba 	bl	8006f54 <_Z17OD_IMU_AccelY_getv>
 8005fe0:	eef0 7a40 	vmov.f32	s15, s0
 8005fe4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8005fec:	4618      	mov	r0, r3
 8005fee:	f001 fd4c 	bl	8007a8a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelYEEEvNT_8dataTypeE>
            break;
 8005ff2:	e093      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA30: {   // OD_IMU_AccelZ
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8005ff4:	2303      	movs	r3, #3
 8005ff6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_AccelZ>(OD_IMU_AccelZ_get());
 8005ffa:	f000 ffc9 	bl	8006f90 <_Z17OD_IMU_AccelZ_getv>
 8005ffe:	eef0 7a40 	vmov.f32	s15, s0
 8006002:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006006:	eeb0 0a67 	vmov.f32	s0, s15
 800600a:	4618      	mov	r0, r3
 800600c:	f001 fd54 	bl	8007ab8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelZEEEvNT_8dataTypeE>
            break;
 8006010:	e084      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA31: {   // OD_IMU_GyroX
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006012:	2303      	movs	r3, #3
 8006014:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroX>(OD_IMU_GyroX_get());
 8006018:	f000 ffd8 	bl	8006fcc <_Z16OD_IMU_GyroX_getv>
 800601c:	eef0 7a40 	vmov.f32	s15, s0
 8006020:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006024:	eeb0 0a67 	vmov.f32	s0, s15
 8006028:	4618      	mov	r0, r3
 800602a:	f001 fd5c 	bl	8007ae6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroXEEEvNT_8dataTypeE>
            break;
 800602e:	e075      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA32: {   // OD_IMU_GyroY
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 8006030:	2303      	movs	r3, #3
 8006032:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroY>(OD_IMU_GyroY_get());
 8006036:	f000 ffe7 	bl	8007008 <_Z16OD_IMU_GyroY_getv>
 800603a:	eef0 7a40 	vmov.f32	s15, s0
 800603e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006042:	eeb0 0a67 	vmov.f32	s0, s15
 8006046:	4618      	mov	r0, r3
 8006048:	f001 fd64 	bl	8007b14 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroYEEEvNT_8dataTypeE>
            break;
 800604c:	e066      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xA33: {   // OD_IMU_GyroZ
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800604e:	2303      	movs	r3, #3
 8006050:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_IMU_GyroZ>(OD_IMU_GyroZ_get());
 8006054:	f000 fff6 	bl	8007044 <_Z16OD_IMU_GyroZ_getv>
 8006058:	eef0 7a40 	vmov.f32	s15, s0
 800605c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006060:	eeb0 0a67 	vmov.f32	s0, s15
 8006064:	4618      	mov	r0, r3
 8006066:	f001 fd6c 	bl	8007b42 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroZEEEvNT_8dataTypeE>
            break;
 800606a:	e057      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xB00: {   // OD_CoolingPressure
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800606c:	2303      	movs	r3, #3
 800606e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_CoolingPressure>(OD_CoolingPressure_get());
 8006072:	f001 f805 	bl	8007080 <_Z22OD_CoolingPressure_getv>
 8006076:	eef0 7a40 	vmov.f32	s15, s0
 800607a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800607e:	eeb0 0a67 	vmov.f32	s0, s15
 8006082:	4618      	mov	r0, r3
 8006084:	f001 fd74 	bl	8007b70 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_CoolingPressureEEEvNT_8dataTypeE>
            break;
 8006088:	e048      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xC00: {   // OD_FiducialRightCounter
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 800608a:	2303      	movs	r3, #3
 800608c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_FiducialRightCounter>(OD_FiducialRightCounter_get());
 8006090:	f001 f814 	bl	80070bc <_Z27OD_FiducialRightCounter_getv>
 8006094:	4603      	mov	r3, r0
 8006096:	461a      	mov	r2, r3
 8006098:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800609c:	4611      	mov	r1, r2
 800609e:	4618      	mov	r0, r3
 80060a0:	f001 fd7d 	bl	8007b9e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_FiducialRightCounterEEEvNT_8dataTypeE>
            break;
 80060a4:	e03a      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xC01: {   // OD_FiducialLeftCounter
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_FiducialLeftCounter>(OD_FiducialLeftCounter_get());
 80060ac:	f001 f822 	bl	80070f4 <_Z26OD_FiducialLeftCounter_getv>
 80060b0:	4603      	mov	r3, r0
 80060b2:	461a      	mov	r2, r3
 80060b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060b8:	4611      	mov	r1, r2
 80060ba:	4618      	mov	r0, r3
 80060bc:	f001 fd84 	bl	8007bc8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_FiducialLeftCounterEEEvNT_8dataTypeE>
            break;
 80060c0:	e02c      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        case 0xD00: {   // OD_Position
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_Position>(OD_Position_get());
 80060c8:	f001 f830 	bl	800712c <_Z15OD_Position_getv>
 80060cc:	eef0 7a40 	vmov.f32	s15, s0
 80060d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060d4:	eeb0 0a67 	vmov.f32	s0, s15
 80060d8:	4618      	mov	r0, r3
 80060da:	f001 fd8a 	bl	8007bf2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_PositionEEEvNT_8dataTypeE>
            break;
 80060de:	e01d      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
 80060e0:	3c23d70a 	.word	0x3c23d70a
 80060e4:	42c80000 	.word	0x42c80000
 80060e8:	43960000 	.word	0x43960000
        }
        case 0xD01: {   // OD_Velocity
            respCode = can::signals::SensorF_SDO_RespCode::ERR_READ_ONLY_OBJECT;
 80060ec:	2303      	movs	r3, #3
 80060ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
            msgSdoResp.set<can::signals::SensorF_OD_Velocity>(OD_Velocity_get());
 80060f2:	f001 f839 	bl	8007168 <_Z15OD_Velocity_getv>
 80060f6:	eef0 7a40 	vmov.f32	s15, s0
 80060fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80060fe:	eeb0 0a67 	vmov.f32	s0, s15
 8006102:	4618      	mov	r0, r3
 8006104:	f001 fd8c 	bl	8007c20 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_VelocityEEEvNT_8dataTypeE>
            break;
 8006108:	e008      	b.n	800611c <_Z22handleSDORequestUploadRK9RxMessage+0xc80>
        }
        default:
            // Unknown SDO-ID, just reply unknown ID
            msgSdoResp.set<can::signals::SensorF_SDO_ID>(sdoId);
 800610a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800610e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006112:	4611      	mov	r1, r2
 8006114:	4618      	mov	r0, r3
 8006116:	f001 fc32 	bl	800797e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>
            break;
 800611a:	bf00      	nop
    }

    msgSdoResp.set<can::signals::SensorF_SDO_RespCode>(respCode);
 800611c:	f897 207f 	ldrb.w	r2, [r7, #127]	; 0x7f
 8006120:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006124:	4611      	mov	r1, r2
 8006126:	4618      	mov	r0, r3
 8006128:	f001 fd91 	bl	8007c4e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_SDO_RespCodeEEEvNT_8dataTypeE>

    // Send response message
    extern osMessageQueueId_t czSendQueue;
    TxMessage sendTxMessage = msgSdoResp.getTxMessage();
 800612c:	f107 0308 	add.w	r3, r7, #8
 8006130:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006134:	2200      	movs	r2, #0
 8006136:	4618      	mov	r0, r3
 8006138:	f7fb f80c 	bl	8001154 <_ZNK3can11MessageBase12getTxMessageEm>
    osMessageQueuePut(czSendQueue, &sendTxMessage, 0, 0);
 800613c:	4b05      	ldr	r3, [pc, #20]	; (8006154 <_Z22handleSDORequestUploadRK9RxMessage+0xcb8>)
 800613e:	6818      	ldr	r0, [r3, #0]
 8006140:	f107 0108 	add.w	r1, r7, #8
 8006144:	2300      	movs	r3, #0
 8006146:	2200      	movs	r2, #0
 8006148:	f00a fbc2 	bl	80108d0 <osMessageQueuePut>
}
 800614c:	bf00      	nop
 800614e:	3780      	adds	r7, #128	; 0x80
 8006150:	46bd      	mov	sp, r7
 8006152:	bd80      	pop	{r7, pc}
 8006154:	200007b4 	.word	0x200007b4

08006158 <_Z13OD_NodeID_getv>:
* or to trigger another function (e.g. enter debug mode).                 *
* ATTENTION: Then the threadsafe access has to be handled by the user,    *
* e.g with using the provided mutex.                                      *
***************************************************************************/
#ifndef OD_NodeID_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeID_get() {
 8006158:	b580      	push	{r7, lr}
 800615a:	b082      	sub	sp, #8
 800615c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeID, portMAX_DELAY);
 800615e:	4b0a      	ldr	r3, [pc, #40]	; (8006188 <_Z13OD_NodeID_getv+0x30>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f04f 31ff 	mov.w	r1, #4294967295
 8006166:	4618      	mov	r0, r3
 8006168:	f00a fab7 	bl	80106da <osMutexAcquire>
    uint8_t value = OD_NodeID;
 800616c:	4b07      	ldr	r3, [pc, #28]	; (800618c <_Z13OD_NodeID_getv+0x34>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeID);
 8006172:	4b05      	ldr	r3, [pc, #20]	; (8006188 <_Z13OD_NodeID_getv+0x30>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4618      	mov	r0, r3
 8006178:	f00a fafa 	bl	8010770 <osMutexRelease>
    return value;
 800617c:	79fb      	ldrb	r3, [r7, #7]
}
 800617e:	4618      	mov	r0, r3
 8006180:	3708      	adds	r7, #8
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20000860 	.word	0x20000860
 800618c:	200007bd 	.word	0x200007bd

08006190 <_Z17OD_NodeStatus_getv>:
    osMutexRelease(mutex_OD_NodeID);
}
#endif

#ifndef OD_NodeStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_NodeStatus_get() {
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_NodeStatus, portMAX_DELAY);
 8006196:	4b0a      	ldr	r3, [pc, #40]	; (80061c0 <_Z17OD_NodeStatus_getv+0x30>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f04f 31ff 	mov.w	r1, #4294967295
 800619e:	4618      	mov	r0, r3
 80061a0:	f00a fa9b 	bl	80106da <osMutexAcquire>
    uint8_t value = OD_NodeStatus;
 80061a4:	4b07      	ldr	r3, [pc, #28]	; (80061c4 <_Z17OD_NodeStatus_getv+0x34>)
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_NodeStatus);
 80061aa:	4b05      	ldr	r3, [pc, #20]	; (80061c0 <_Z17OD_NodeStatus_getv+0x30>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f00a fade 	bl	8010770 <osMutexRelease>
    return value;
 80061b4:	79fb      	ldrb	r3, [r7, #7]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3708      	adds	r7, #8
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	20000864 	.word	0x20000864
 80061c4:	200007be 	.word	0x200007be

080061c8 <_Z22OD_ProtocolVersion_getv>:
    osMutexRelease(mutex_OD_NodeStatus);
}
#endif

#ifndef OD_ProtocolVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_ProtocolVersion_get() {
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ProtocolVersion, portMAX_DELAY);
 80061ce:	4b0a      	ldr	r3, [pc, #40]	; (80061f8 <_Z22OD_ProtocolVersion_getv+0x30>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f04f 31ff 	mov.w	r1, #4294967295
 80061d6:	4618      	mov	r0, r3
 80061d8:	f00a fa7f 	bl	80106da <osMutexAcquire>
    uint16_t value = OD_ProtocolVersion;
 80061dc:	4b07      	ldr	r3, [pc, #28]	; (80061fc <_Z22OD_ProtocolVersion_getv+0x34>)
 80061de:	881b      	ldrh	r3, [r3, #0]
 80061e0:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_ProtocolVersion);
 80061e2:	4b05      	ldr	r3, [pc, #20]	; (80061f8 <_Z22OD_ProtocolVersion_getv+0x30>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f00a fac2 	bl	8010770 <osMutexRelease>
    return value;
 80061ec:	88fb      	ldrh	r3, [r7, #6]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	20000868 	.word	0x20000868
 80061fc:	20000000 	.word	0x20000000

08006200 <_Z19OD_StackVersion_getv>:
    osMutexRelease(mutex_OD_ProtocolVersion);
}
#endif

#ifndef OD_StackVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_StackVersion_get() {
 8006200:	b580      	push	{r7, lr}
 8006202:	b082      	sub	sp, #8
 8006204:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StackVersion, portMAX_DELAY);
 8006206:	4b0a      	ldr	r3, [pc, #40]	; (8006230 <_Z19OD_StackVersion_getv+0x30>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f04f 31ff 	mov.w	r1, #4294967295
 800620e:	4618      	mov	r0, r3
 8006210:	f00a fa63 	bl	80106da <osMutexAcquire>
    uint16_t value = OD_StackVersion;
 8006214:	4b07      	ldr	r3, [pc, #28]	; (8006234 <_Z19OD_StackVersion_getv+0x34>)
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_StackVersion);
 800621a:	4b05      	ldr	r3, [pc, #20]	; (8006230 <_Z19OD_StackVersion_getv+0x30>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4618      	mov	r0, r3
 8006220:	f00a faa6 	bl	8010770 <osMutexRelease>
    return value;
 8006224:	88fb      	ldrh	r3, [r7, #6]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3708      	adds	r7, #8
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	2000086c 	.word	0x2000086c
 8006234:	200007c0 	.word	0x200007c0

08006238 <_Z17OD_DbcVersion_getv>:
    osMutexRelease(mutex_OD_StackVersion);
}
#endif

#ifndef OD_DbcVersion_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_DbcVersion_get() {
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_DbcVersion, portMAX_DELAY);
 800623e:	4b0a      	ldr	r3, [pc, #40]	; (8006268 <_Z17OD_DbcVersion_getv+0x30>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f04f 31ff 	mov.w	r1, #4294967295
 8006246:	4618      	mov	r0, r3
 8006248:	f00a fa47 	bl	80106da <osMutexAcquire>
    uint16_t value = OD_DbcVersion;
 800624c:	4b07      	ldr	r3, [pc, #28]	; (800626c <_Z17OD_DbcVersion_getv+0x34>)
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_DbcVersion);
 8006252:	4b05      	ldr	r3, [pc, #20]	; (8006268 <_Z17OD_DbcVersion_getv+0x30>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4618      	mov	r0, r3
 8006258:	f00a fa8a 	bl	8010770 <osMutexRelease>
    return value;
 800625c:	88fb      	ldrh	r3, [r7, #6]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	20000870 	.word	0x20000870
 800626c:	200007c2 	.word	0x200007c2

08006270 <_Z24OD_HeartbeatInterval_getv>:
    osMutexRelease(mutex_OD_DbcVersion);
}
#endif

#ifndef OD_HeartbeatInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_HeartbeatInterval_get() {
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 8006276:	4b0a      	ldr	r3, [pc, #40]	; (80062a0 <_Z24OD_HeartbeatInterval_getv+0x30>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f04f 31ff 	mov.w	r1, #4294967295
 800627e:	4618      	mov	r0, r3
 8006280:	f00a fa2b 	bl	80106da <osMutexAcquire>
    uint16_t value = OD_HeartbeatInterval;
 8006284:	4b07      	ldr	r3, [pc, #28]	; (80062a4 <_Z24OD_HeartbeatInterval_getv+0x34>)
 8006286:	881b      	ldrh	r3, [r3, #0]
 8006288:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 800628a:	4b05      	ldr	r3, [pc, #20]	; (80062a0 <_Z24OD_HeartbeatInterval_getv+0x30>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4618      	mov	r0, r3
 8006290:	f00a fa6e 	bl	8010770 <osMutexRelease>
    return value;
 8006294:	88fb      	ldrh	r3, [r7, #6]
}
 8006296:	4618      	mov	r0, r3
 8006298:	3708      	adds	r7, #8
 800629a:	46bd      	mov	sp, r7
 800629c:	bd80      	pop	{r7, pc}
 800629e:	bf00      	nop
 80062a0:	20000874 	.word	0x20000874
 80062a4:	20000002 	.word	0x20000002

080062a8 <_Z24OD_HeartbeatInterval_sett>:
#endif
#ifndef OD_HeartbeatInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_HeartbeatInterval_set(const uint16_t value) {
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	4603      	mov	r3, r0
 80062b0:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_HeartbeatInterval, portMAX_DELAY);
 80062b2:	4b09      	ldr	r3, [pc, #36]	; (80062d8 <_Z24OD_HeartbeatInterval_sett+0x30>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f04f 31ff 	mov.w	r1, #4294967295
 80062ba:	4618      	mov	r0, r3
 80062bc:	f00a fa0d 	bl	80106da <osMutexAcquire>
    OD_HeartbeatInterval = value;
 80062c0:	4a06      	ldr	r2, [pc, #24]	; (80062dc <_Z24OD_HeartbeatInterval_sett+0x34>)
 80062c2:	88fb      	ldrh	r3, [r7, #6]
 80062c4:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_HeartbeatInterval);
 80062c6:	4b04      	ldr	r3, [pc, #16]	; (80062d8 <_Z24OD_HeartbeatInterval_sett+0x30>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f00a fa50 	bl	8010770 <osMutexRelease>
}
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	20000874 	.word	0x20000874
 80062dc:	20000002 	.word	0x20000002

080062e0 <_Z21OD_SendOdOnBootup_getv>:
#endif

#ifndef OD_SendOdOnBootup_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SendOdOnBootup_get() {
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 80062e6:	4b0a      	ldr	r3, [pc, #40]	; (8006310 <_Z21OD_SendOdOnBootup_getv+0x30>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f04f 31ff 	mov.w	r1, #4294967295
 80062ee:	4618      	mov	r0, r3
 80062f0:	f00a f9f3 	bl	80106da <osMutexAcquire>
    uint8_t value = OD_SendOdOnBootup;
 80062f4:	4b07      	ldr	r3, [pc, #28]	; (8006314 <_Z21OD_SendOdOnBootup_getv+0x34>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 80062fa:	4b05      	ldr	r3, [pc, #20]	; (8006310 <_Z21OD_SendOdOnBootup_getv+0x30>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4618      	mov	r0, r3
 8006300:	f00a fa36 	bl	8010770 <osMutexRelease>
    return value;
 8006304:	79fb      	ldrb	r3, [r7, #7]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20000878 	.word	0x20000878
 8006314:	200007c4 	.word	0x200007c4

08006318 <_Z21OD_SendOdOnBootup_seth>:
#endif
#ifndef OD_SendOdOnBootup_SET_OVERWRITE
void WEAK_SYMBOL OD_SendOdOnBootup_set(const uint8_t value) {
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	4603      	mov	r3, r0
 8006320:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_SendOdOnBootup, portMAX_DELAY);
 8006322:	4b09      	ldr	r3, [pc, #36]	; (8006348 <_Z21OD_SendOdOnBootup_seth+0x30>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f04f 31ff 	mov.w	r1, #4294967295
 800632a:	4618      	mov	r0, r3
 800632c:	f00a f9d5 	bl	80106da <osMutexAcquire>
    OD_SendOdOnBootup = value;
 8006330:	4a06      	ldr	r2, [pc, #24]	; (800634c <_Z21OD_SendOdOnBootup_seth+0x34>)
 8006332:	79fb      	ldrb	r3, [r7, #7]
 8006334:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_SendOdOnBootup);
 8006336:	4b04      	ldr	r3, [pc, #16]	; (8006348 <_Z21OD_SendOdOnBootup_seth+0x30>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4618      	mov	r0, r3
 800633c:	f00a fa18 	bl	8010770 <osMutexRelease>
}
 8006340:	bf00      	nop
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	20000878 	.word	0x20000878
 800634c:	200007c4 	.word	0x200007c4

08006350 <_Z26OD_OdEntrySendInterval_getv>:
#endif

#ifndef OD_OdEntrySendInterval_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_OdEntrySendInterval_get() {
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8006356:	4b0a      	ldr	r3, [pc, #40]	; (8006380 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f04f 31ff 	mov.w	r1, #4294967295
 800635e:	4618      	mov	r0, r3
 8006360:	f00a f9bb 	bl	80106da <osMutexAcquire>
    uint16_t value = OD_OdEntrySendInterval;
 8006364:	4b07      	ldr	r3, [pc, #28]	; (8006384 <_Z26OD_OdEntrySendInterval_getv+0x34>)
 8006366:	881b      	ldrh	r3, [r3, #0]
 8006368:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 800636a:	4b05      	ldr	r3, [pc, #20]	; (8006380 <_Z26OD_OdEntrySendInterval_getv+0x30>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	f00a f9fe 	bl	8010770 <osMutexRelease>
    return value;
 8006374:	88fb      	ldrh	r3, [r7, #6]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	2000087c 	.word	0x2000087c
 8006384:	20000004 	.word	0x20000004

08006388 <_Z26OD_OdEntrySendInterval_sett>:
#endif
#ifndef OD_OdEntrySendInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_OdEntrySendInterval_set(const uint16_t value) {
 8006388:	b580      	push	{r7, lr}
 800638a:	b082      	sub	sp, #8
 800638c:	af00      	add	r7, sp, #0
 800638e:	4603      	mov	r3, r0
 8006390:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_OdEntrySendInterval, portMAX_DELAY);
 8006392:	4b09      	ldr	r3, [pc, #36]	; (80063b8 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f04f 31ff 	mov.w	r1, #4294967295
 800639a:	4618      	mov	r0, r3
 800639c:	f00a f99d 	bl	80106da <osMutexAcquire>
    OD_OdEntrySendInterval = value;
 80063a0:	4a06      	ldr	r2, [pc, #24]	; (80063bc <_Z26OD_OdEntrySendInterval_sett+0x34>)
 80063a2:	88fb      	ldrh	r3, [r7, #6]
 80063a4:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_OdEntrySendInterval);
 80063a6:	4b04      	ldr	r3, [pc, #16]	; (80063b8 <_Z26OD_OdEntrySendInterval_sett+0x30>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4618      	mov	r0, r3
 80063ac:	f00a f9e0 	bl	8010770 <osMutexRelease>
}
 80063b0:	bf00      	nop
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	2000087c 	.word	0x2000087c
 80063bc:	20000004 	.word	0x20000004

080063c0 <_Z15OD_CpuUsage_getv>:
#endif

#ifndef OD_CpuUsage_GET_OVERWRITE
float WEAK_SYMBOL OD_CpuUsage_get() {
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CpuUsage, portMAX_DELAY);
 80063c6:	4b0b      	ldr	r3, [pc, #44]	; (80063f4 <_Z15OD_CpuUsage_getv+0x34>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f04f 31ff 	mov.w	r1, #4294967295
 80063ce:	4618      	mov	r0, r3
 80063d0:	f00a f983 	bl	80106da <osMutexAcquire>
    float value = OD_CpuUsage;
 80063d4:	4b08      	ldr	r3, [pc, #32]	; (80063f8 <_Z15OD_CpuUsage_getv+0x38>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CpuUsage);
 80063da:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <_Z15OD_CpuUsage_getv+0x34>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4618      	mov	r0, r3
 80063e0:	f00a f9c6 	bl	8010770 <osMutexRelease>
    return value;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	ee07 3a90 	vmov	s15, r3
}
 80063ea:	eeb0 0a67 	vmov.f32	s0, s15
 80063ee:	3708      	adds	r7, #8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	20000880 	.word	0x20000880
 80063f8:	200007c8 	.word	0x200007c8

080063fc <_Z14OD_MemFree_getv>:
    osMutexRelease(mutex_OD_CpuUsage);
}
#endif

#ifndef OD_MemFree_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_MemFree_get() {
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_MemFree, portMAX_DELAY);
 8006402:	4b0a      	ldr	r3, [pc, #40]	; (800642c <_Z14OD_MemFree_getv+0x30>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f04f 31ff 	mov.w	r1, #4294967295
 800640a:	4618      	mov	r0, r3
 800640c:	f00a f965 	bl	80106da <osMutexAcquire>
    uint32_t value = OD_MemFree;
 8006410:	4b07      	ldr	r3, [pc, #28]	; (8006430 <_Z14OD_MemFree_getv+0x34>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_MemFree);
 8006416:	4b05      	ldr	r3, [pc, #20]	; (800642c <_Z14OD_MemFree_getv+0x30>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4618      	mov	r0, r3
 800641c:	f00a f9a8 	bl	8010770 <osMutexRelease>
    return value;
 8006420:	687b      	ldr	r3, [r7, #4]
}
 8006422:	4618      	mov	r0, r3
 8006424:	3708      	adds	r7, #8
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	20000884 	.word	0x20000884
 8006430:	200007cc 	.word	0x200007cc

08006434 <_Z16OD_BoardTemp_getv>:
    osMutexRelease(mutex_OD_MemFree);
}
#endif

#ifndef OD_BoardTemp_GET_OVERWRITE
float WEAK_SYMBOL OD_BoardTemp_get() {
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BoardTemp, portMAX_DELAY);
 800643a:	4b0b      	ldr	r3, [pc, #44]	; (8006468 <_Z16OD_BoardTemp_getv+0x34>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f04f 31ff 	mov.w	r1, #4294967295
 8006442:	4618      	mov	r0, r3
 8006444:	f00a f949 	bl	80106da <osMutexAcquire>
    float value = OD_BoardTemp;
 8006448:	4b08      	ldr	r3, [pc, #32]	; (800646c <_Z16OD_BoardTemp_getv+0x38>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BoardTemp);
 800644e:	4b06      	ldr	r3, [pc, #24]	; (8006468 <_Z16OD_BoardTemp_getv+0x34>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4618      	mov	r0, r3
 8006454:	f00a f98c 	bl	8010770 <osMutexRelease>
    return value;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	ee07 3a90 	vmov	s15, r3
}
 800645e:	eeb0 0a67 	vmov.f32	s0, s15
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	20000888 	.word	0x20000888
 800646c:	200007d0 	.word	0x200007d0

08006470 <_Z19OD_InputVoltage_getv>:
    osMutexRelease(mutex_OD_BoardTemp);
}
#endif

#ifndef OD_InputVoltage_GET_OVERWRITE
float WEAK_SYMBOL OD_InputVoltage_get() {
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_InputVoltage, portMAX_DELAY);
 8006476:	4b0b      	ldr	r3, [pc, #44]	; (80064a4 <_Z19OD_InputVoltage_getv+0x34>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f04f 31ff 	mov.w	r1, #4294967295
 800647e:	4618      	mov	r0, r3
 8006480:	f00a f92b 	bl	80106da <osMutexAcquire>
    float value = OD_InputVoltage;
 8006484:	4b08      	ldr	r3, [pc, #32]	; (80064a8 <_Z19OD_InputVoltage_getv+0x38>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_InputVoltage);
 800648a:	4b06      	ldr	r3, [pc, #24]	; (80064a4 <_Z19OD_InputVoltage_getv+0x34>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4618      	mov	r0, r3
 8006490:	f00a f96e 	bl	8010770 <osMutexRelease>
    return value;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	ee07 3a90 	vmov	s15, r3
}
 800649a:	eeb0 0a67 	vmov.f32	s0, s15
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	2000088c 	.word	0x2000088c
 80064a8:	200007d4 	.word	0x200007d4

080064ac <_Z14OD_runtime_getv>:
    osMutexRelease(mutex_OD_InputVoltage);
}
#endif

#ifndef OD_runtime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_runtime_get() {
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b082      	sub	sp, #8
 80064b0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_runtime, portMAX_DELAY);
 80064b2:	4b0a      	ldr	r3, [pc, #40]	; (80064dc <_Z14OD_runtime_getv+0x30>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f04f 31ff 	mov.w	r1, #4294967295
 80064ba:	4618      	mov	r0, r3
 80064bc:	f00a f90d 	bl	80106da <osMutexAcquire>
    uint32_t value = OD_runtime;
 80064c0:	4b07      	ldr	r3, [pc, #28]	; (80064e0 <_Z14OD_runtime_getv+0x34>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_runtime);
 80064c6:	4b05      	ldr	r3, [pc, #20]	; (80064dc <_Z14OD_runtime_getv+0x30>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4618      	mov	r0, r3
 80064cc:	f00a f950 	bl	8010770 <osMutexRelease>
    return value;
 80064d0:	687b      	ldr	r3, [r7, #4]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	20000890 	.word	0x20000890
 80064e0:	200007d8 	.word	0x200007d8

080064e4 <_Z12OD_SdcIn_getv>:
    osMutexRelease(mutex_OD_runtime);
}
#endif

#ifndef OD_SdcIn_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcIn_get() {
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcIn, portMAX_DELAY);
 80064ea:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <_Z12OD_SdcIn_getv+0x30>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f04f 31ff 	mov.w	r1, #4294967295
 80064f2:	4618      	mov	r0, r3
 80064f4:	f00a f8f1 	bl	80106da <osMutexAcquire>
    uint8_t value = OD_SdcIn;
 80064f8:	4b07      	ldr	r3, [pc, #28]	; (8006518 <_Z12OD_SdcIn_getv+0x34>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcIn);
 80064fe:	4b05      	ldr	r3, [pc, #20]	; (8006514 <_Z12OD_SdcIn_getv+0x30>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4618      	mov	r0, r3
 8006504:	f00a f934 	bl	8010770 <osMutexRelease>
    return value;
 8006508:	79fb      	ldrb	r3, [r7, #7]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3708      	adds	r7, #8
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	20000894 	.word	0x20000894
 8006518:	200007dc 	.word	0x200007dc

0800651c <_Z13OD_SdcOut_getv>:
    osMutexRelease(mutex_OD_SdcIn);
}
#endif

#ifndef OD_SdcOut_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_SdcOut_get() {
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_SdcOut, portMAX_DELAY);
 8006522:	4b0a      	ldr	r3, [pc, #40]	; (800654c <_Z13OD_SdcOut_getv+0x30>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f04f 31ff 	mov.w	r1, #4294967295
 800652a:	4618      	mov	r0, r3
 800652c:	f00a f8d5 	bl	80106da <osMutexAcquire>
    uint8_t value = OD_SdcOut;
 8006530:	4b07      	ldr	r3, [pc, #28]	; (8006550 <_Z13OD_SdcOut_getv+0x34>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_SdcOut);
 8006536:	4b05      	ldr	r3, [pc, #20]	; (800654c <_Z13OD_SdcOut_getv+0x30>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4618      	mov	r0, r3
 800653c:	f00a f918 	bl	8010770 <osMutexRelease>
    return value;
 8006540:	79fb      	ldrb	r3, [r7, #7]
}
 8006542:	4618      	mov	r0, r3
 8006544:	3708      	adds	r7, #8
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	20000898 	.word	0x20000898
 8006550:	200007dd 	.word	0x200007dd

08006554 <_Z15OD_ChipUID1_getv>:
    osMutexRelease(mutex_OD_SdcOut);
}
#endif

#ifndef OD_ChipUID1_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID1_get() {
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID1, portMAX_DELAY);
 800655a:	4b0c      	ldr	r3, [pc, #48]	; (800658c <_Z15OD_ChipUID1_getv+0x38>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f04f 31ff 	mov.w	r1, #4294967295
 8006562:	4618      	mov	r0, r3
 8006564:	f00a f8b9 	bl	80106da <osMutexAcquire>
    uint64_t value = OD_ChipUID1;
 8006568:	4b09      	ldr	r3, [pc, #36]	; (8006590 <_Z15OD_ChipUID1_getv+0x3c>)
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID1);
 8006572:	4b06      	ldr	r3, [pc, #24]	; (800658c <_Z15OD_ChipUID1_getv+0x38>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4618      	mov	r0, r3
 8006578:	f00a f8fa 	bl	8010770 <osMutexRelease>
    return value;
 800657c:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8006580:	4610      	mov	r0, r2
 8006582:	4619      	mov	r1, r3
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	2000089c 	.word	0x2000089c
 8006590:	200007e0 	.word	0x200007e0

08006594 <_Z15OD_ChipUID2_getv>:
    osMutexRelease(mutex_OD_ChipUID1);
}
#endif

#ifndef OD_ChipUID2_GET_OVERWRITE
uint64_t WEAK_SYMBOL OD_ChipUID2_get() {
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_ChipUID2, portMAX_DELAY);
 800659a:	4b0c      	ldr	r3, [pc, #48]	; (80065cc <_Z15OD_ChipUID2_getv+0x38>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f04f 31ff 	mov.w	r1, #4294967295
 80065a2:	4618      	mov	r0, r3
 80065a4:	f00a f899 	bl	80106da <osMutexAcquire>
    uint64_t value = OD_ChipUID2;
 80065a8:	4b09      	ldr	r3, [pc, #36]	; (80065d0 <_Z15OD_ChipUID2_getv+0x3c>)
 80065aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ae:	e9c7 2300 	strd	r2, r3, [r7]
    osMutexRelease(mutex_OD_ChipUID2);
 80065b2:	4b06      	ldr	r3, [pc, #24]	; (80065cc <_Z15OD_ChipUID2_getv+0x38>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4618      	mov	r0, r3
 80065b8:	f00a f8da 	bl	8010770 <osMutexRelease>
    return value;
 80065bc:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80065c0:	4610      	mov	r0, r2
 80065c2:	4619      	mov	r1, r3
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	bf00      	nop
 80065cc:	200008a0 	.word	0x200008a0
 80065d0:	200007e8 	.word	0x200007e8

080065d4 <_Z16OD_BuildDate_getv>:
    osMutexRelease(mutex_OD_ChipUID2);
}
#endif

#ifndef OD_BuildDate_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildDate_get() {
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildDate, portMAX_DELAY);
 80065da:	4b0a      	ldr	r3, [pc, #40]	; (8006604 <_Z16OD_BuildDate_getv+0x30>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f04f 31ff 	mov.w	r1, #4294967295
 80065e2:	4618      	mov	r0, r3
 80065e4:	f00a f879 	bl	80106da <osMutexAcquire>
    uint32_t value = OD_BuildDate;
 80065e8:	4b07      	ldr	r3, [pc, #28]	; (8006608 <_Z16OD_BuildDate_getv+0x34>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildDate);
 80065ee:	4b05      	ldr	r3, [pc, #20]	; (8006604 <_Z16OD_BuildDate_getv+0x30>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4618      	mov	r0, r3
 80065f4:	f00a f8bc 	bl	8010770 <osMutexRelease>
    return value;
 80065f8:	687b      	ldr	r3, [r7, #4]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3708      	adds	r7, #8
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop
 8006604:	200008a4 	.word	0x200008a4
 8006608:	200007f0 	.word	0x200007f0

0800660c <_Z16OD_BuildTime_getv>:
    osMutexRelease(mutex_OD_BuildDate);
}
#endif

#ifndef OD_BuildTime_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_BuildTime_get() {
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_BuildTime, portMAX_DELAY);
 8006612:	4b0a      	ldr	r3, [pc, #40]	; (800663c <_Z16OD_BuildTime_getv+0x30>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f04f 31ff 	mov.w	r1, #4294967295
 800661a:	4618      	mov	r0, r3
 800661c:	f00a f85d 	bl	80106da <osMutexAcquire>
    uint32_t value = OD_BuildTime;
 8006620:	4b07      	ldr	r3, [pc, #28]	; (8006640 <_Z16OD_BuildTime_getv+0x34>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_BuildTime);
 8006626:	4b05      	ldr	r3, [pc, #20]	; (800663c <_Z16OD_BuildTime_getv+0x30>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4618      	mov	r0, r3
 800662c:	f00a f8a0 	bl	8010770 <osMutexRelease>
    return value;
 8006630:	687b      	ldr	r3, [r7, #4]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3708      	adds	r7, #8
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	200008a8 	.word	0x200008a8
 8006640:	200007f4 	.word	0x200007f4

08006644 <_Z20OD_CAN1_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_BuildTime);
}
#endif

#ifndef OD_CAN1_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_TxErrCnt_get() {
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_TxErrCnt, portMAX_DELAY);
 800664a:	4b0a      	ldr	r3, [pc, #40]	; (8006674 <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f04f 31ff 	mov.w	r1, #4294967295
 8006652:	4618      	mov	r0, r3
 8006654:	f00a f841 	bl	80106da <osMutexAcquire>
    uint8_t value = OD_CAN1_TxErrCnt;
 8006658:	4b07      	ldr	r3, [pc, #28]	; (8006678 <_Z20OD_CAN1_TxErrCnt_getv+0x34>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
 800665e:	4b05      	ldr	r3, [pc, #20]	; (8006674 <_Z20OD_CAN1_TxErrCnt_getv+0x30>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4618      	mov	r0, r3
 8006664:	f00a f884 	bl	8010770 <osMutexRelease>
    return value;
 8006668:	79fb      	ldrb	r3, [r7, #7]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3708      	adds	r7, #8
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
 8006672:	bf00      	nop
 8006674:	200008ac 	.word	0x200008ac
 8006678:	200007f8 	.word	0x200007f8

0800667c <_Z20OD_CAN1_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_TxErrCnt);
}
#endif

#ifndef OD_CAN1_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_RxErrCnt_get() {
 800667c:	b580      	push	{r7, lr}
 800667e:	b082      	sub	sp, #8
 8006680:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_RxErrCnt, portMAX_DELAY);
 8006682:	4b0a      	ldr	r3, [pc, #40]	; (80066ac <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f04f 31ff 	mov.w	r1, #4294967295
 800668a:	4618      	mov	r0, r3
 800668c:	f00a f825 	bl	80106da <osMutexAcquire>
    uint8_t value = OD_CAN1_RxErrCnt;
 8006690:	4b07      	ldr	r3, [pc, #28]	; (80066b0 <_Z20OD_CAN1_RxErrCnt_getv+0x34>)
 8006692:	781b      	ldrb	r3, [r3, #0]
 8006694:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
 8006696:	4b05      	ldr	r3, [pc, #20]	; (80066ac <_Z20OD_CAN1_RxErrCnt_getv+0x30>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4618      	mov	r0, r3
 800669c:	f00a f868 	bl	8010770 <osMutexRelease>
    return value;
 80066a0:	79fb      	ldrb	r3, [r7, #7]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3708      	adds	r7, #8
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	200008b0 	.word	0x200008b0
 80066b0:	200007f9 	.word	0x200007f9

080066b4 <_Z25OD_CAN1_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN1_RxErrCnt);
}
#endif

#ifndef OD_CAN1_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_lastErrorCode_get() {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_lastErrorCode, portMAX_DELAY);
 80066ba:	4b0a      	ldr	r3, [pc, #40]	; (80066e4 <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f04f 31ff 	mov.w	r1, #4294967295
 80066c2:	4618      	mov	r0, r3
 80066c4:	f00a f809 	bl	80106da <osMutexAcquire>
    uint32_t value = OD_CAN1_lastErrorCode;
 80066c8:	4b07      	ldr	r3, [pc, #28]	; (80066e8 <_Z25OD_CAN1_lastErrorCode_getv+0x34>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
 80066ce:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <_Z25OD_CAN1_lastErrorCode_getv+0x30>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f00a f84c 	bl	8010770 <osMutexRelease>
    return value;
 80066d8:	687b      	ldr	r3, [r7, #4]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3708      	adds	r7, #8
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	200008b4 	.word	0x200008b4
 80066e8:	200007fc 	.word	0x200007fc

080066ec <_Z26OD_CAN1_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN1_lastErrorCode);
}
#endif

#ifndef OD_CAN1_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_autoErrorReset_get() {
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 80066f2:	4b0a      	ldr	r3, [pc, #40]	; (800671c <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f04f 31ff 	mov.w	r1, #4294967295
 80066fa:	4618      	mov	r0, r3
 80066fc:	f009 ffed 	bl	80106da <osMutexAcquire>
    uint8_t value = OD_CAN1_autoErrorReset;
 8006700:	4b07      	ldr	r3, [pc, #28]	; (8006720 <_Z26OD_CAN1_autoErrorReset_getv+0x34>)
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 8006706:	4b05      	ldr	r3, [pc, #20]	; (800671c <_Z26OD_CAN1_autoErrorReset_getv+0x30>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4618      	mov	r0, r3
 800670c:	f00a f830 	bl	8010770 <osMutexRelease>
    return value;
 8006710:	79fb      	ldrb	r3, [r7, #7]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	200008b8 	.word	0x200008b8
 8006720:	20000006 	.word	0x20000006

08006724 <_Z26OD_CAN1_autoErrorReset_seth>:
#endif
#ifndef OD_CAN1_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_autoErrorReset_set(const uint8_t value) {
 8006724:	b580      	push	{r7, lr}
 8006726:	b082      	sub	sp, #8
 8006728:	af00      	add	r7, sp, #0
 800672a:	4603      	mov	r3, r0
 800672c:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN1_autoErrorReset, portMAX_DELAY);
 800672e:	4b09      	ldr	r3, [pc, #36]	; (8006754 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f04f 31ff 	mov.w	r1, #4294967295
 8006736:	4618      	mov	r0, r3
 8006738:	f009 ffcf 	bl	80106da <osMutexAcquire>
    OD_CAN1_autoErrorReset = value;
 800673c:	4a06      	ldr	r2, [pc, #24]	; (8006758 <_Z26OD_CAN1_autoErrorReset_seth+0x34>)
 800673e:	79fb      	ldrb	r3, [r7, #7]
 8006740:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_autoErrorReset);
 8006742:	4b04      	ldr	r3, [pc, #16]	; (8006754 <_Z26OD_CAN1_autoErrorReset_seth+0x30>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4618      	mov	r0, r3
 8006748:	f00a f812 	bl	8010770 <osMutexRelease>
}
 800674c:	bf00      	nop
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	200008b8 	.word	0x200008b8
 8006758:	20000006 	.word	0x20000006

0800675c <_Z20OD_CAN1_Baudrate_getv>:
#endif

#ifndef OD_CAN1_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN1_Baudrate_get() {
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 8006762:	4b0a      	ldr	r3, [pc, #40]	; (800678c <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f04f 31ff 	mov.w	r1, #4294967295
 800676a:	4618      	mov	r0, r3
 800676c:	f009 ffb5 	bl	80106da <osMutexAcquire>
    uint16_t value = OD_CAN1_Baudrate;
 8006770:	4b07      	ldr	r3, [pc, #28]	; (8006790 <_Z20OD_CAN1_Baudrate_getv+0x34>)
 8006772:	881b      	ldrh	r3, [r3, #0]
 8006774:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 8006776:	4b05      	ldr	r3, [pc, #20]	; (800678c <_Z20OD_CAN1_Baudrate_getv+0x30>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4618      	mov	r0, r3
 800677c:	f009 fff8 	bl	8010770 <osMutexRelease>
    return value;
 8006780:	88fb      	ldrh	r3, [r7, #6]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	200008bc 	.word	0x200008bc
 8006790:	20000008 	.word	0x20000008

08006794 <_Z20OD_CAN1_Baudrate_sett>:
#endif
#ifndef OD_CAN1_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN1_Baudrate_set(const uint16_t value) {
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	4603      	mov	r3, r0
 800679c:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN1_Baudrate, portMAX_DELAY);
 800679e:	4b09      	ldr	r3, [pc, #36]	; (80067c4 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f04f 31ff 	mov.w	r1, #4294967295
 80067a6:	4618      	mov	r0, r3
 80067a8:	f009 ff97 	bl	80106da <osMutexAcquire>
    OD_CAN1_Baudrate = value;
 80067ac:	4a06      	ldr	r2, [pc, #24]	; (80067c8 <_Z20OD_CAN1_Baudrate_sett+0x34>)
 80067ae:	88fb      	ldrh	r3, [r7, #6]
 80067b0:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN1_Baudrate);
 80067b2:	4b04      	ldr	r3, [pc, #16]	; (80067c4 <_Z20OD_CAN1_Baudrate_sett+0x30>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4618      	mov	r0, r3
 80067b8:	f009 ffda 	bl	8010770 <osMutexRelease>
}
 80067bc:	bf00      	nop
 80067be:	3708      	adds	r7, #8
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	200008bc 	.word	0x200008bc
 80067c8:	20000008 	.word	0x20000008

080067cc <_Z18OD_CAN1_Status_getv>:
#endif

#ifndef OD_CAN1_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_Status_get() {
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b082      	sub	sp, #8
 80067d0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_Status, portMAX_DELAY);
 80067d2:	4b0a      	ldr	r3, [pc, #40]	; (80067fc <_Z18OD_CAN1_Status_getv+0x30>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f04f 31ff 	mov.w	r1, #4294967295
 80067da:	4618      	mov	r0, r3
 80067dc:	f009 ff7d 	bl	80106da <osMutexAcquire>
    uint8_t value = OD_CAN1_Status;
 80067e0:	4b07      	ldr	r3, [pc, #28]	; (8006800 <_Z18OD_CAN1_Status_getv+0x34>)
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_Status);
 80067e6:	4b05      	ldr	r3, [pc, #20]	; (80067fc <_Z18OD_CAN1_Status_getv+0x30>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4618      	mov	r0, r3
 80067ec:	f009 ffc0 	bl	8010770 <osMutexRelease>
    return value;
 80067f0:	79fb      	ldrb	r3, [r7, #7]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	200008c0 	.word	0x200008c0
 8006800:	20000800 	.word	0x20000800

08006804 <_Z31OD_CAN1_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_Status);
}
#endif

#ifndef OD_CAN1_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DiscardedTxMessages_get() {
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DiscardedTxMessages, portMAX_DELAY);
 800680a:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f04f 31ff 	mov.w	r1, #4294967295
 8006812:	4618      	mov	r0, r3
 8006814:	f009 ff61 	bl	80106da <osMutexAcquire>
    uint32_t value = OD_CAN1_DiscardedTxMessages;
 8006818:	4b07      	ldr	r3, [pc, #28]	; (8006838 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x34>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
 800681e:	4b05      	ldr	r3, [pc, #20]	; (8006834 <_Z31OD_CAN1_DiscardedTxMessages_getv+0x30>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4618      	mov	r0, r3
 8006824:	f009 ffa4 	bl	8010770 <osMutexRelease>
    return value;
 8006828:	687b      	ldr	r3, [r7, #4]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	200008c4 	.word	0x200008c4
 8006838:	20000804 	.word	0x20000804

0800683c <_Z23OD_CAN1_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN1_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN1_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN1_ErrorStatus_get() {
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_ErrorStatus, portMAX_DELAY);
 8006842:	4b0a      	ldr	r3, [pc, #40]	; (800686c <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f04f 31ff 	mov.w	r1, #4294967295
 800684a:	4618      	mov	r0, r3
 800684c:	f009 ff45 	bl	80106da <osMutexAcquire>
    uint8_t value = OD_CAN1_ErrorStatus;
 8006850:	4b07      	ldr	r3, [pc, #28]	; (8006870 <_Z23OD_CAN1_ErrorStatus_getv+0x34>)
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
 8006856:	4b05      	ldr	r3, [pc, #20]	; (800686c <_Z23OD_CAN1_ErrorStatus_getv+0x30>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4618      	mov	r0, r3
 800685c:	f009 ff88 	bl	8010770 <osMutexRelease>
    return value;
 8006860:	79fb      	ldrb	r3, [r7, #7]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3708      	adds	r7, #8
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	200008c8 	.word	0x200008c8
 8006870:	20000808 	.word	0x20000808

08006874 <_Z29OD_CAN1_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN1_ErrorStatus);
}
#endif

#ifndef OD_CAN1_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN1_DelayedTxMessages_get() {
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN1_DelayedTxMessages, portMAX_DELAY);
 800687a:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f04f 31ff 	mov.w	r1, #4294967295
 8006882:	4618      	mov	r0, r3
 8006884:	f009 ff29 	bl	80106da <osMutexAcquire>
    uint32_t value = OD_CAN1_DelayedTxMessages;
 8006888:	4b07      	ldr	r3, [pc, #28]	; (80068a8 <_Z29OD_CAN1_DelayedTxMessages_getv+0x34>)
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
 800688e:	4b05      	ldr	r3, [pc, #20]	; (80068a4 <_Z29OD_CAN1_DelayedTxMessages_getv+0x30>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f009 ff6c 	bl	8010770 <osMutexRelease>
    return value;
 8006898:	687b      	ldr	r3, [r7, #4]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3708      	adds	r7, #8
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	200008cc 	.word	0x200008cc
 80068a8:	2000080c 	.word	0x2000080c

080068ac <_Z20OD_CAN2_TxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN1_DelayedTxMessages);
}
#endif

#ifndef OD_CAN2_TxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_TxErrCnt_get() {
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_TxErrCnt, portMAX_DELAY);
 80068b2:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f04f 31ff 	mov.w	r1, #4294967295
 80068ba:	4618      	mov	r0, r3
 80068bc:	f009 ff0d 	bl	80106da <osMutexAcquire>
    uint8_t value = OD_CAN2_TxErrCnt;
 80068c0:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <_Z20OD_CAN2_TxErrCnt_getv+0x34>)
 80068c2:	781b      	ldrb	r3, [r3, #0]
 80068c4:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
 80068c6:	4b05      	ldr	r3, [pc, #20]	; (80068dc <_Z20OD_CAN2_TxErrCnt_getv+0x30>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f009 ff50 	bl	8010770 <osMutexRelease>
    return value;
 80068d0:	79fb      	ldrb	r3, [r7, #7]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	200008d0 	.word	0x200008d0
 80068e0:	20000810 	.word	0x20000810

080068e4 <_Z20OD_CAN2_RxErrCnt_getv>:
    osMutexRelease(mutex_OD_CAN2_TxErrCnt);
}
#endif

#ifndef OD_CAN2_RxErrCnt_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_RxErrCnt_get() {
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_RxErrCnt, portMAX_DELAY);
 80068ea:	4b0a      	ldr	r3, [pc, #40]	; (8006914 <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f04f 31ff 	mov.w	r1, #4294967295
 80068f2:	4618      	mov	r0, r3
 80068f4:	f009 fef1 	bl	80106da <osMutexAcquire>
    uint8_t value = OD_CAN2_RxErrCnt;
 80068f8:	4b07      	ldr	r3, [pc, #28]	; (8006918 <_Z20OD_CAN2_RxErrCnt_getv+0x34>)
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
 80068fe:	4b05      	ldr	r3, [pc, #20]	; (8006914 <_Z20OD_CAN2_RxErrCnt_getv+0x30>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4618      	mov	r0, r3
 8006904:	f009 ff34 	bl	8010770 <osMutexRelease>
    return value;
 8006908:	79fb      	ldrb	r3, [r7, #7]
}
 800690a:	4618      	mov	r0, r3
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	200008d4 	.word	0x200008d4
 8006918:	20000811 	.word	0x20000811

0800691c <_Z25OD_CAN2_lastErrorCode_getv>:
    osMutexRelease(mutex_OD_CAN2_RxErrCnt);
}
#endif

#ifndef OD_CAN2_lastErrorCode_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_lastErrorCode_get() {
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_lastErrorCode, portMAX_DELAY);
 8006922:	4b0a      	ldr	r3, [pc, #40]	; (800694c <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f04f 31ff 	mov.w	r1, #4294967295
 800692a:	4618      	mov	r0, r3
 800692c:	f009 fed5 	bl	80106da <osMutexAcquire>
    uint32_t value = OD_CAN2_lastErrorCode;
 8006930:	4b07      	ldr	r3, [pc, #28]	; (8006950 <_Z25OD_CAN2_lastErrorCode_getv+0x34>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
 8006936:	4b05      	ldr	r3, [pc, #20]	; (800694c <_Z25OD_CAN2_lastErrorCode_getv+0x30>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4618      	mov	r0, r3
 800693c:	f009 ff18 	bl	8010770 <osMutexRelease>
    return value;
 8006940:	687b      	ldr	r3, [r7, #4]
}
 8006942:	4618      	mov	r0, r3
 8006944:	3708      	adds	r7, #8
 8006946:	46bd      	mov	sp, r7
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	200008d8 	.word	0x200008d8
 8006950:	20000814 	.word	0x20000814

08006954 <_Z26OD_CAN2_autoErrorReset_getv>:
    osMutexRelease(mutex_OD_CAN2_lastErrorCode);
}
#endif

#ifndef OD_CAN2_autoErrorReset_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_autoErrorReset_get() {
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 800695a:	4b0a      	ldr	r3, [pc, #40]	; (8006984 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f04f 31ff 	mov.w	r1, #4294967295
 8006962:	4618      	mov	r0, r3
 8006964:	f009 feb9 	bl	80106da <osMutexAcquire>
    uint8_t value = OD_CAN2_autoErrorReset;
 8006968:	4b07      	ldr	r3, [pc, #28]	; (8006988 <_Z26OD_CAN2_autoErrorReset_getv+0x34>)
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 800696e:	4b05      	ldr	r3, [pc, #20]	; (8006984 <_Z26OD_CAN2_autoErrorReset_getv+0x30>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4618      	mov	r0, r3
 8006974:	f009 fefc 	bl	8010770 <osMutexRelease>
    return value;
 8006978:	79fb      	ldrb	r3, [r7, #7]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	200008dc 	.word	0x200008dc
 8006988:	2000000a 	.word	0x2000000a

0800698c <_Z26OD_CAN2_autoErrorReset_seth>:
#endif
#ifndef OD_CAN2_autoErrorReset_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_autoErrorReset_set(const uint8_t value) {
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	4603      	mov	r3, r0
 8006994:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_CAN2_autoErrorReset, portMAX_DELAY);
 8006996:	4b09      	ldr	r3, [pc, #36]	; (80069bc <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f04f 31ff 	mov.w	r1, #4294967295
 800699e:	4618      	mov	r0, r3
 80069a0:	f009 fe9b 	bl	80106da <osMutexAcquire>
    OD_CAN2_autoErrorReset = value;
 80069a4:	4a06      	ldr	r2, [pc, #24]	; (80069c0 <_Z26OD_CAN2_autoErrorReset_seth+0x34>)
 80069a6:	79fb      	ldrb	r3, [r7, #7]
 80069a8:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_autoErrorReset);
 80069aa:	4b04      	ldr	r3, [pc, #16]	; (80069bc <_Z26OD_CAN2_autoErrorReset_seth+0x30>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f009 fede 	bl	8010770 <osMutexRelease>
}
 80069b4:	bf00      	nop
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	200008dc 	.word	0x200008dc
 80069c0:	2000000a 	.word	0x2000000a

080069c4 <_Z20OD_CAN2_Baudrate_getv>:
#endif

#ifndef OD_CAN2_Baudrate_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_CAN2_Baudrate_get() {
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 80069ca:	4b0a      	ldr	r3, [pc, #40]	; (80069f4 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f04f 31ff 	mov.w	r1, #4294967295
 80069d2:	4618      	mov	r0, r3
 80069d4:	f009 fe81 	bl	80106da <osMutexAcquire>
    uint16_t value = OD_CAN2_Baudrate;
 80069d8:	4b07      	ldr	r3, [pc, #28]	; (80069f8 <_Z20OD_CAN2_Baudrate_getv+0x34>)
 80069da:	881b      	ldrh	r3, [r3, #0]
 80069dc:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 80069de:	4b05      	ldr	r3, [pc, #20]	; (80069f4 <_Z20OD_CAN2_Baudrate_getv+0x30>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f009 fec4 	bl	8010770 <osMutexRelease>
    return value;
 80069e8:	88fb      	ldrh	r3, [r7, #6]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	200008e0 	.word	0x200008e0
 80069f8:	2000000c 	.word	0x2000000c

080069fc <_Z20OD_CAN2_Baudrate_sett>:
#endif
#ifndef OD_CAN2_Baudrate_SET_OVERWRITE
void WEAK_SYMBOL OD_CAN2_Baudrate_set(const uint16_t value) {
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	4603      	mov	r3, r0
 8006a04:	80fb      	strh	r3, [r7, #6]
    osMutexAcquire(mutex_OD_CAN2_Baudrate, portMAX_DELAY);
 8006a06:	4b09      	ldr	r3, [pc, #36]	; (8006a2c <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f04f 31ff 	mov.w	r1, #4294967295
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f009 fe63 	bl	80106da <osMutexAcquire>
    OD_CAN2_Baudrate = value;
 8006a14:	4a06      	ldr	r2, [pc, #24]	; (8006a30 <_Z20OD_CAN2_Baudrate_sett+0x34>)
 8006a16:	88fb      	ldrh	r3, [r7, #6]
 8006a18:	8013      	strh	r3, [r2, #0]
    osMutexRelease(mutex_OD_CAN2_Baudrate);
 8006a1a:	4b04      	ldr	r3, [pc, #16]	; (8006a2c <_Z20OD_CAN2_Baudrate_sett+0x30>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f009 fea6 	bl	8010770 <osMutexRelease>
}
 8006a24:	bf00      	nop
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	200008e0 	.word	0x200008e0
 8006a30:	2000000c 	.word	0x2000000c

08006a34 <_Z18OD_CAN2_Status_getv>:
#endif

#ifndef OD_CAN2_Status_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_Status_get() {
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_Status, portMAX_DELAY);
 8006a3a:	4b0a      	ldr	r3, [pc, #40]	; (8006a64 <_Z18OD_CAN2_Status_getv+0x30>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f04f 31ff 	mov.w	r1, #4294967295
 8006a42:	4618      	mov	r0, r3
 8006a44:	f009 fe49 	bl	80106da <osMutexAcquire>
    uint8_t value = OD_CAN2_Status;
 8006a48:	4b07      	ldr	r3, [pc, #28]	; (8006a68 <_Z18OD_CAN2_Status_getv+0x34>)
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_Status);
 8006a4e:	4b05      	ldr	r3, [pc, #20]	; (8006a64 <_Z18OD_CAN2_Status_getv+0x30>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f009 fe8c 	bl	8010770 <osMutexRelease>
    return value;
 8006a58:	79fb      	ldrb	r3, [r7, #7]
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	200008e4 	.word	0x200008e4
 8006a68:	20000818 	.word	0x20000818

08006a6c <_Z31OD_CAN2_DiscardedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_Status);
}
#endif

#ifndef OD_CAN2_DiscardedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DiscardedTxMessages_get() {
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DiscardedTxMessages, portMAX_DELAY);
 8006a72:	4b0a      	ldr	r3, [pc, #40]	; (8006a9c <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f04f 31ff 	mov.w	r1, #4294967295
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f009 fe2d 	bl	80106da <osMutexAcquire>
    uint32_t value = OD_CAN2_DiscardedTxMessages;
 8006a80:	4b07      	ldr	r3, [pc, #28]	; (8006aa0 <_Z31OD_CAN2_DiscardedTxMessages_getv+0x34>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
 8006a86:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <_Z31OD_CAN2_DiscardedTxMessages_getv+0x30>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f009 fe70 	bl	8010770 <osMutexRelease>
    return value;
 8006a90:	687b      	ldr	r3, [r7, #4]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3708      	adds	r7, #8
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	200008e8 	.word	0x200008e8
 8006aa0:	2000081c 	.word	0x2000081c

08006aa4 <_Z23OD_CAN2_ErrorStatus_getv>:
    osMutexRelease(mutex_OD_CAN2_DiscardedTxMessages);
}
#endif

#ifndef OD_CAN2_ErrorStatus_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_CAN2_ErrorStatus_get() {
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_ErrorStatus, portMAX_DELAY);
 8006aaa:	4b0a      	ldr	r3, [pc, #40]	; (8006ad4 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f04f 31ff 	mov.w	r1, #4294967295
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f009 fe11 	bl	80106da <osMutexAcquire>
    uint8_t value = OD_CAN2_ErrorStatus;
 8006ab8:	4b07      	ldr	r3, [pc, #28]	; (8006ad8 <_Z23OD_CAN2_ErrorStatus_getv+0x34>)
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
 8006abe:	4b05      	ldr	r3, [pc, #20]	; (8006ad4 <_Z23OD_CAN2_ErrorStatus_getv+0x30>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f009 fe54 	bl	8010770 <osMutexRelease>
    return value;
 8006ac8:	79fb      	ldrb	r3, [r7, #7]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	200008ec 	.word	0x200008ec
 8006ad8:	20000820 	.word	0x20000820

08006adc <_Z29OD_CAN2_DelayedTxMessages_getv>:
    osMutexRelease(mutex_OD_CAN2_ErrorStatus);
}
#endif

#ifndef OD_CAN2_DelayedTxMessages_GET_OVERWRITE
uint32_t WEAK_SYMBOL OD_CAN2_DelayedTxMessages_get() {
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CAN2_DelayedTxMessages, portMAX_DELAY);
 8006ae2:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f04f 31ff 	mov.w	r1, #4294967295
 8006aea:	4618      	mov	r0, r3
 8006aec:	f009 fdf5 	bl	80106da <osMutexAcquire>
    uint32_t value = OD_CAN2_DelayedTxMessages;
 8006af0:	4b07      	ldr	r3, [pc, #28]	; (8006b10 <_Z29OD_CAN2_DelayedTxMessages_getv+0x34>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
 8006af6:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <_Z29OD_CAN2_DelayedTxMessages_getv+0x30>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f009 fe38 	bl	8010770 <osMutexRelease>
    return value;
 8006b00:	687b      	ldr	r3, [r7, #4]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	200008f0 	.word	0x200008f0
 8006b10:	20000824 	.word	0x20000824

08006b14 <_Z23OD_samplingInterval_getv>:
    osMutexRelease(mutex_OD_CAN2_DelayedTxMessages);
}
#endif

#ifndef OD_samplingInterval_GET_OVERWRITE
float WEAK_SYMBOL OD_samplingInterval_get() {
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_samplingInterval, portMAX_DELAY);
 8006b1a:	4b0b      	ldr	r3, [pc, #44]	; (8006b48 <_Z23OD_samplingInterval_getv+0x34>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f04f 31ff 	mov.w	r1, #4294967295
 8006b22:	4618      	mov	r0, r3
 8006b24:	f009 fdd9 	bl	80106da <osMutexAcquire>
    float value = OD_samplingInterval;
 8006b28:	4b08      	ldr	r3, [pc, #32]	; (8006b4c <_Z23OD_samplingInterval_getv+0x38>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_samplingInterval);
 8006b2e:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <_Z23OD_samplingInterval_getv+0x34>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f009 fe1c 	bl	8010770 <osMutexRelease>
    return value;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	ee07 3a90 	vmov	s15, r3
}
 8006b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8006b42:	3708      	adds	r7, #8
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}
 8006b48:	200008f4 	.word	0x200008f4
 8006b4c:	20000010 	.word	0x20000010

08006b50 <_Z23OD_samplingInterval_setf>:
#endif
#ifndef OD_samplingInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_samplingInterval_set(const float value) {
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_samplingInterval, portMAX_DELAY);
 8006b5a:	4b09      	ldr	r3, [pc, #36]	; (8006b80 <_Z23OD_samplingInterval_setf+0x30>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f04f 31ff 	mov.w	r1, #4294967295
 8006b62:	4618      	mov	r0, r3
 8006b64:	f009 fdb9 	bl	80106da <osMutexAcquire>
    OD_samplingInterval = value;
 8006b68:	4a06      	ldr	r2, [pc, #24]	; (8006b84 <_Z23OD_samplingInterval_setf+0x34>)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_samplingInterval);
 8006b6e:	4b04      	ldr	r3, [pc, #16]	; (8006b80 <_Z23OD_samplingInterval_setf+0x30>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f009 fdfc 	bl	8010770 <osMutexRelease>
}
 8006b78:	bf00      	nop
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}
 8006b80:	200008f4 	.word	0x200008f4
 8006b84:	20000010 	.word	0x20000010

08006b88 <_Z24OD_TelemetryCommands_getv>:
#endif

#ifndef OD_TelemetryCommands_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_TelemetryCommands_get() {
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_TelemetryCommands, portMAX_DELAY);
 8006b8e:	4b0a      	ldr	r3, [pc, #40]	; (8006bb8 <_Z24OD_TelemetryCommands_getv+0x30>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f04f 31ff 	mov.w	r1, #4294967295
 8006b96:	4618      	mov	r0, r3
 8006b98:	f009 fd9f 	bl	80106da <osMutexAcquire>
    uint8_t value = OD_TelemetryCommands;
 8006b9c:	4b07      	ldr	r3, [pc, #28]	; (8006bbc <_Z24OD_TelemetryCommands_getv+0x34>)
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_TelemetryCommands);
 8006ba2:	4b05      	ldr	r3, [pc, #20]	; (8006bb8 <_Z24OD_TelemetryCommands_getv+0x30>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f009 fde2 	bl	8010770 <osMutexRelease>
    return value;
 8006bac:	79fb      	ldrb	r3, [r7, #7]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	200008f8 	.word	0x200008f8
 8006bbc:	20000828 	.word	0x20000828

08006bc0 <_Z24OD_TelemetryCommands_seth>:
#endif
#ifndef OD_TelemetryCommands_SET_OVERWRITE
void WEAK_SYMBOL OD_TelemetryCommands_set(const uint8_t value) {
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_TelemetryCommands, portMAX_DELAY);
 8006bca:	4b09      	ldr	r3, [pc, #36]	; (8006bf0 <_Z24OD_TelemetryCommands_seth+0x30>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f04f 31ff 	mov.w	r1, #4294967295
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f009 fd81 	bl	80106da <osMutexAcquire>
    OD_TelemetryCommands = value;
 8006bd8:	4a06      	ldr	r2, [pc, #24]	; (8006bf4 <_Z24OD_TelemetryCommands_seth+0x34>)
 8006bda:	79fb      	ldrb	r3, [r7, #7]
 8006bdc:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_TelemetryCommands);
 8006bde:	4b04      	ldr	r3, [pc, #16]	; (8006bf0 <_Z24OD_TelemetryCommands_seth+0x30>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f009 fdc4 	bl	8010770 <osMutexRelease>
}
 8006be8:	bf00      	nop
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	200008f8 	.word	0x200008f8
 8006bf4:	20000828 	.word	0x20000828

08006bf8 <_Z27OD_StateMachineInterval_getv>:
#endif

#ifndef OD_StateMachineInterval_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_StateMachineInterval_get() {
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StateMachineInterval, portMAX_DELAY);
 8006bfe:	4b0a      	ldr	r3, [pc, #40]	; (8006c28 <_Z27OD_StateMachineInterval_getv+0x30>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f04f 31ff 	mov.w	r1, #4294967295
 8006c06:	4618      	mov	r0, r3
 8006c08:	f009 fd67 	bl	80106da <osMutexAcquire>
    uint8_t value = OD_StateMachineInterval;
 8006c0c:	4b07      	ldr	r3, [pc, #28]	; (8006c2c <_Z27OD_StateMachineInterval_getv+0x34>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_StateMachineInterval);
 8006c12:	4b05      	ldr	r3, [pc, #20]	; (8006c28 <_Z27OD_StateMachineInterval_getv+0x30>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4618      	mov	r0, r3
 8006c18:	f009 fdaa 	bl	8010770 <osMutexRelease>
    return value;
 8006c1c:	79fb      	ldrb	r3, [r7, #7]
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3708      	adds	r7, #8
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	200008fc 	.word	0x200008fc
 8006c2c:	20000014 	.word	0x20000014

08006c30 <_Z27OD_StateMachineInterval_seth>:
#endif
#ifndef OD_StateMachineInterval_SET_OVERWRITE
void WEAK_SYMBOL OD_StateMachineInterval_set(const uint8_t value) {
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	4603      	mov	r3, r0
 8006c38:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_StateMachineInterval, portMAX_DELAY);
 8006c3a:	4b09      	ldr	r3, [pc, #36]	; (8006c60 <_Z27OD_StateMachineInterval_seth+0x30>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f04f 31ff 	mov.w	r1, #4294967295
 8006c42:	4618      	mov	r0, r3
 8006c44:	f009 fd49 	bl	80106da <osMutexAcquire>
    OD_StateMachineInterval = value;
 8006c48:	4a06      	ldr	r2, [pc, #24]	; (8006c64 <_Z27OD_StateMachineInterval_seth+0x34>)
 8006c4a:	79fb      	ldrb	r3, [r7, #7]
 8006c4c:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_StateMachineInterval);
 8006c4e:	4b04      	ldr	r3, [pc, #16]	; (8006c60 <_Z27OD_StateMachineInterval_seth+0x30>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4618      	mov	r0, r3
 8006c54:	f009 fd8c 	bl	8010770 <osMutexRelease>
}
 8006c58:	bf00      	nop
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	200008fc 	.word	0x200008fc
 8006c64:	20000014 	.word	0x20000014

08006c68 <_Z27OD_StateMachineActivate_getv>:
#endif

#ifndef OD_StateMachineActivate_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_StateMachineActivate_get() {
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_StateMachineActivate, portMAX_DELAY);
 8006c6e:	4b0a      	ldr	r3, [pc, #40]	; (8006c98 <_Z27OD_StateMachineActivate_getv+0x30>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f04f 31ff 	mov.w	r1, #4294967295
 8006c76:	4618      	mov	r0, r3
 8006c78:	f009 fd2f 	bl	80106da <osMutexAcquire>
    uint8_t value = OD_StateMachineActivate;
 8006c7c:	4b07      	ldr	r3, [pc, #28]	; (8006c9c <_Z27OD_StateMachineActivate_getv+0x34>)
 8006c7e:	781b      	ldrb	r3, [r3, #0]
 8006c80:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_StateMachineActivate);
 8006c82:	4b05      	ldr	r3, [pc, #20]	; (8006c98 <_Z27OD_StateMachineActivate_getv+0x30>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4618      	mov	r0, r3
 8006c88:	f009 fd72 	bl	8010770 <osMutexRelease>
    return value;
 8006c8c:	79fb      	ldrb	r3, [r7, #7]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20000900 	.word	0x20000900
 8006c9c:	20000829 	.word	0x20000829

08006ca0 <_Z27OD_StateMachineActivate_seth>:
#endif
#ifndef OD_StateMachineActivate_SET_OVERWRITE
void WEAK_SYMBOL OD_StateMachineActivate_set(const uint8_t value) {
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_StateMachineActivate, portMAX_DELAY);
 8006caa:	4b09      	ldr	r3, [pc, #36]	; (8006cd0 <_Z27OD_StateMachineActivate_seth+0x30>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f04f 31ff 	mov.w	r1, #4294967295
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f009 fd11 	bl	80106da <osMutexAcquire>
    OD_StateMachineActivate = value;
 8006cb8:	4a06      	ldr	r2, [pc, #24]	; (8006cd4 <_Z27OD_StateMachineActivate_seth+0x34>)
 8006cba:	79fb      	ldrb	r3, [r7, #7]
 8006cbc:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_StateMachineActivate);
 8006cbe:	4b04      	ldr	r3, [pc, #16]	; (8006cd0 <_Z27OD_StateMachineActivate_seth+0x30>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f009 fd54 	bl	8010770 <osMutexRelease>
}
 8006cc8:	bf00      	nop
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	20000900 	.word	0x20000900
 8006cd4:	20000829 	.word	0x20000829

08006cd8 <_Z20OD_HVBatteryMode_getv>:
#endif

#ifndef OD_HVBatteryMode_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_HVBatteryMode_get() {
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_HVBatteryMode, portMAX_DELAY);
 8006cde:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <_Z20OD_HVBatteryMode_getv+0x30>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f04f 31ff 	mov.w	r1, #4294967295
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f009 fcf7 	bl	80106da <osMutexAcquire>
    uint8_t value = OD_HVBatteryMode;
 8006cec:	4b07      	ldr	r3, [pc, #28]	; (8006d0c <_Z20OD_HVBatteryMode_getv+0x34>)
 8006cee:	781b      	ldrb	r3, [r3, #0]
 8006cf0:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_HVBatteryMode);
 8006cf2:	4b05      	ldr	r3, [pc, #20]	; (8006d08 <_Z20OD_HVBatteryMode_getv+0x30>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f009 fd3a 	bl	8010770 <osMutexRelease>
    return value;
 8006cfc:	79fb      	ldrb	r3, [r7, #7]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	20000904 	.word	0x20000904
 8006d0c:	2000082a 	.word	0x2000082a

08006d10 <_Z20OD_HVBatteryMode_seth>:
#endif
#ifndef OD_HVBatteryMode_SET_OVERWRITE
void WEAK_SYMBOL OD_HVBatteryMode_set(const uint8_t value) {
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	4603      	mov	r3, r0
 8006d18:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_HVBatteryMode, portMAX_DELAY);
 8006d1a:	4b09      	ldr	r3, [pc, #36]	; (8006d40 <_Z20OD_HVBatteryMode_seth+0x30>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f04f 31ff 	mov.w	r1, #4294967295
 8006d22:	4618      	mov	r0, r3
 8006d24:	f009 fcd9 	bl	80106da <osMutexAcquire>
    OD_HVBatteryMode = value;
 8006d28:	4a06      	ldr	r2, [pc, #24]	; (8006d44 <_Z20OD_HVBatteryMode_seth+0x34>)
 8006d2a:	79fb      	ldrb	r3, [r7, #7]
 8006d2c:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_HVBatteryMode);
 8006d2e:	4b04      	ldr	r3, [pc, #16]	; (8006d40 <_Z20OD_HVBatteryMode_seth+0x30>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f009 fd1c 	bl	8010770 <osMutexRelease>
}
 8006d38:	bf00      	nop
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	20000904 	.word	0x20000904
 8006d44:	2000082a 	.word	0x2000082a

08006d48 <_Z27OD_EncoderWheelDiameter_getv>:
#endif

#ifndef OD_EncoderWheelDiameter_GET_OVERWRITE
float WEAK_SYMBOL OD_EncoderWheelDiameter_get() {
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_EncoderWheelDiameter, portMAX_DELAY);
 8006d4e:	4b0b      	ldr	r3, [pc, #44]	; (8006d7c <_Z27OD_EncoderWheelDiameter_getv+0x34>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f04f 31ff 	mov.w	r1, #4294967295
 8006d56:	4618      	mov	r0, r3
 8006d58:	f009 fcbf 	bl	80106da <osMutexAcquire>
    float value = OD_EncoderWheelDiameter;
 8006d5c:	4b08      	ldr	r3, [pc, #32]	; (8006d80 <_Z27OD_EncoderWheelDiameter_getv+0x38>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_EncoderWheelDiameter);
 8006d62:	4b06      	ldr	r3, [pc, #24]	; (8006d7c <_Z27OD_EncoderWheelDiameter_getv+0x34>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4618      	mov	r0, r3
 8006d68:	f009 fd02 	bl	8010770 <osMutexRelease>
    return value;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	ee07 3a90 	vmov	s15, r3
}
 8006d72:	eeb0 0a67 	vmov.f32	s0, s15
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	20000908 	.word	0x20000908
 8006d80:	20000018 	.word	0x20000018

08006d84 <_Z27OD_EncoderWheelDiameter_setf>:
#endif
#ifndef OD_EncoderWheelDiameter_SET_OVERWRITE
void WEAK_SYMBOL OD_EncoderWheelDiameter_set(const float value) {
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	ed87 0a01 	vstr	s0, [r7, #4]
    osMutexAcquire(mutex_OD_EncoderWheelDiameter, portMAX_DELAY);
 8006d8e:	4b09      	ldr	r3, [pc, #36]	; (8006db4 <_Z27OD_EncoderWheelDiameter_setf+0x30>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f04f 31ff 	mov.w	r1, #4294967295
 8006d96:	4618      	mov	r0, r3
 8006d98:	f009 fc9f 	bl	80106da <osMutexAcquire>
    OD_EncoderWheelDiameter = value;
 8006d9c:	4a06      	ldr	r2, [pc, #24]	; (8006db8 <_Z27OD_EncoderWheelDiameter_setf+0x34>)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6013      	str	r3, [r2, #0]
    osMutexRelease(mutex_OD_EncoderWheelDiameter);
 8006da2:	4b04      	ldr	r3, [pc, #16]	; (8006db4 <_Z27OD_EncoderWheelDiameter_setf+0x30>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f009 fce2 	bl	8010770 <osMutexRelease>
}
 8006dac:	bf00      	nop
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	20000908 	.word	0x20000908
 8006db8:	20000018 	.word	0x20000018

08006dbc <_Z27OD_EncoderResetPosition_seth>:
    osMutexRelease(mutex_OD_EncoderResetPosition);
    return value;
}
#endif
#ifndef OD_EncoderResetPosition_SET_OVERWRITE
void WEAK_SYMBOL OD_EncoderResetPosition_set(const uint8_t value) {
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_EncoderResetPosition, portMAX_DELAY);
 8006dc6:	4b09      	ldr	r3, [pc, #36]	; (8006dec <_Z27OD_EncoderResetPosition_seth+0x30>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f04f 31ff 	mov.w	r1, #4294967295
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f009 fc83 	bl	80106da <osMutexAcquire>
    OD_EncoderResetPosition = value;
 8006dd4:	4a06      	ldr	r2, [pc, #24]	; (8006df0 <_Z27OD_EncoderResetPosition_seth+0x34>)
 8006dd6:	79fb      	ldrb	r3, [r7, #7]
 8006dd8:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_EncoderResetPosition);
 8006dda:	4b04      	ldr	r3, [pc, #16]	; (8006dec <_Z27OD_EncoderResetPosition_seth+0x30>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4618      	mov	r0, r3
 8006de0:	f009 fcc6 	bl	8010770 <osMutexRelease>
}
 8006de4:	bf00      	nop
 8006de6:	3708      	adds	r7, #8
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}
 8006dec:	2000090c 	.word	0x2000090c
 8006df0:	2000082b 	.word	0x2000082b

08006df4 <_Z15OD_SetReset_seth>:
    osMutexRelease(mutex_OD_SetReset);
    return value;
}
#endif
#ifndef OD_SetReset_SET_OVERWRITE
void WEAK_SYMBOL OD_SetReset_set(const uint8_t value) {
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(mutex_OD_SetReset, portMAX_DELAY);
 8006dfe:	4b09      	ldr	r3, [pc, #36]	; (8006e24 <_Z15OD_SetReset_seth+0x30>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f04f 31ff 	mov.w	r1, #4294967295
 8006e06:	4618      	mov	r0, r3
 8006e08:	f009 fc67 	bl	80106da <osMutexAcquire>
    OD_SetReset = value;
 8006e0c:	4a06      	ldr	r2, [pc, #24]	; (8006e28 <_Z15OD_SetReset_seth+0x34>)
 8006e0e:	79fb      	ldrb	r3, [r7, #7]
 8006e10:	7013      	strb	r3, [r2, #0]
    osMutexRelease(mutex_OD_SetReset);
 8006e12:	4b04      	ldr	r3, [pc, #16]	; (8006e24 <_Z15OD_SetReset_seth+0x30>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4618      	mov	r0, r3
 8006e18:	f009 fcaa 	bl	8010770 <osMutexRelease>
}
 8006e1c:	bf00      	nop
 8006e1e:	3708      	adds	r7, #8
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}
 8006e24:	20000910 	.word	0x20000910
 8006e28:	2000082c 	.word	0x2000082c

08006e2c <_Z17OD_IMU_number_getv>:
#endif

#ifndef OD_IMU_number_GET_OVERWRITE
uint8_t WEAK_SYMBOL OD_IMU_number_get() {
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_number, portMAX_DELAY);
 8006e32:	4b0a      	ldr	r3, [pc, #40]	; (8006e5c <_Z17OD_IMU_number_getv+0x30>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f04f 31ff 	mov.w	r1, #4294967295
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f009 fc4d 	bl	80106da <osMutexAcquire>
    uint8_t value = OD_IMU_number;
 8006e40:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <_Z17OD_IMU_number_getv+0x34>)
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	71fb      	strb	r3, [r7, #7]
    osMutexRelease(mutex_OD_IMU_number);
 8006e46:	4b05      	ldr	r3, [pc, #20]	; (8006e5c <_Z17OD_IMU_number_getv+0x30>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f009 fc90 	bl	8010770 <osMutexRelease>
    return value;
 8006e50:	79fb      	ldrb	r3, [r7, #7]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	20000914 	.word	0x20000914
 8006e60:	2000082d 	.word	0x2000082d

08006e64 <_Z23OD_IMU1_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU_number);
}
#endif

#ifndef OD_IMU1_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU1_Temperature_get() {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU1_Temperature, portMAX_DELAY);
 8006e6a:	4b0b      	ldr	r3, [pc, #44]	; (8006e98 <_Z23OD_IMU1_Temperature_getv+0x34>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f04f 31ff 	mov.w	r1, #4294967295
 8006e72:	4618      	mov	r0, r3
 8006e74:	f009 fc31 	bl	80106da <osMutexAcquire>
    float value = OD_IMU1_Temperature;
 8006e78:	4b08      	ldr	r3, [pc, #32]	; (8006e9c <_Z23OD_IMU1_Temperature_getv+0x38>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU1_Temperature);
 8006e7e:	4b06      	ldr	r3, [pc, #24]	; (8006e98 <_Z23OD_IMU1_Temperature_getv+0x34>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	4618      	mov	r0, r3
 8006e84:	f009 fc74 	bl	8010770 <osMutexRelease>
    return value;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	ee07 3a90 	vmov	s15, r3
}
 8006e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8006e92:	3708      	adds	r7, #8
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	20000918 	.word	0x20000918
 8006e9c:	20000830 	.word	0x20000830

08006ea0 <_Z23OD_IMU2_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU1_Temperature);
}
#endif

#ifndef OD_IMU2_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU2_Temperature_get() {
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b082      	sub	sp, #8
 8006ea4:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU2_Temperature, portMAX_DELAY);
 8006ea6:	4b0b      	ldr	r3, [pc, #44]	; (8006ed4 <_Z23OD_IMU2_Temperature_getv+0x34>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f04f 31ff 	mov.w	r1, #4294967295
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f009 fc13 	bl	80106da <osMutexAcquire>
    float value = OD_IMU2_Temperature;
 8006eb4:	4b08      	ldr	r3, [pc, #32]	; (8006ed8 <_Z23OD_IMU2_Temperature_getv+0x38>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU2_Temperature);
 8006eba:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <_Z23OD_IMU2_Temperature_getv+0x34>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f009 fc56 	bl	8010770 <osMutexRelease>
    return value;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	ee07 3a90 	vmov	s15, r3
}
 8006eca:	eeb0 0a67 	vmov.f32	s0, s15
 8006ece:	3708      	adds	r7, #8
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}
 8006ed4:	2000091c 	.word	0x2000091c
 8006ed8:	20000834 	.word	0x20000834

08006edc <_Z23OD_IMU3_Temperature_getv>:
    osMutexRelease(mutex_OD_IMU2_Temperature);
}
#endif

#ifndef OD_IMU3_Temperature_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU3_Temperature_get() {
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU3_Temperature, portMAX_DELAY);
 8006ee2:	4b0b      	ldr	r3, [pc, #44]	; (8006f10 <_Z23OD_IMU3_Temperature_getv+0x34>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f04f 31ff 	mov.w	r1, #4294967295
 8006eea:	4618      	mov	r0, r3
 8006eec:	f009 fbf5 	bl	80106da <osMutexAcquire>
    float value = OD_IMU3_Temperature;
 8006ef0:	4b08      	ldr	r3, [pc, #32]	; (8006f14 <_Z23OD_IMU3_Temperature_getv+0x38>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU3_Temperature);
 8006ef6:	4b06      	ldr	r3, [pc, #24]	; (8006f10 <_Z23OD_IMU3_Temperature_getv+0x34>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f009 fc38 	bl	8010770 <osMutexRelease>
    return value;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	ee07 3a90 	vmov	s15, r3
}
 8006f06:	eeb0 0a67 	vmov.f32	s0, s15
 8006f0a:	3708      	adds	r7, #8
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	20000920 	.word	0x20000920
 8006f14:	20000838 	.word	0x20000838

08006f18 <_Z17OD_IMU_AccelX_getv>:
    osMutexRelease(mutex_OD_IMU3_Temperature);
}
#endif

#ifndef OD_IMU_AccelX_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_AccelX_get() {
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_AccelX, portMAX_DELAY);
 8006f1e:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <_Z17OD_IMU_AccelX_getv+0x34>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f04f 31ff 	mov.w	r1, #4294967295
 8006f26:	4618      	mov	r0, r3
 8006f28:	f009 fbd7 	bl	80106da <osMutexAcquire>
    float value = OD_IMU_AccelX;
 8006f2c:	4b08      	ldr	r3, [pc, #32]	; (8006f50 <_Z17OD_IMU_AccelX_getv+0x38>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_AccelX);
 8006f32:	4b06      	ldr	r3, [pc, #24]	; (8006f4c <_Z17OD_IMU_AccelX_getv+0x34>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4618      	mov	r0, r3
 8006f38:	f009 fc1a 	bl	8010770 <osMutexRelease>
    return value;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	ee07 3a90 	vmov	s15, r3
}
 8006f42:	eeb0 0a67 	vmov.f32	s0, s15
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	20000924 	.word	0x20000924
 8006f50:	2000083c 	.word	0x2000083c

08006f54 <_Z17OD_IMU_AccelY_getv>:
    osMutexRelease(mutex_OD_IMU_AccelX);
}
#endif

#ifndef OD_IMU_AccelY_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_AccelY_get() {
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_AccelY, portMAX_DELAY);
 8006f5a:	4b0b      	ldr	r3, [pc, #44]	; (8006f88 <_Z17OD_IMU_AccelY_getv+0x34>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f04f 31ff 	mov.w	r1, #4294967295
 8006f62:	4618      	mov	r0, r3
 8006f64:	f009 fbb9 	bl	80106da <osMutexAcquire>
    float value = OD_IMU_AccelY;
 8006f68:	4b08      	ldr	r3, [pc, #32]	; (8006f8c <_Z17OD_IMU_AccelY_getv+0x38>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_AccelY);
 8006f6e:	4b06      	ldr	r3, [pc, #24]	; (8006f88 <_Z17OD_IMU_AccelY_getv+0x34>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f009 fbfc 	bl	8010770 <osMutexRelease>
    return value;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	ee07 3a90 	vmov	s15, r3
}
 8006f7e:	eeb0 0a67 	vmov.f32	s0, s15
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	20000928 	.word	0x20000928
 8006f8c:	20000840 	.word	0x20000840

08006f90 <_Z17OD_IMU_AccelZ_getv>:
    osMutexRelease(mutex_OD_IMU_AccelY);
}
#endif

#ifndef OD_IMU_AccelZ_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_AccelZ_get() {
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_AccelZ, portMAX_DELAY);
 8006f96:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <_Z17OD_IMU_AccelZ_getv+0x34>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f04f 31ff 	mov.w	r1, #4294967295
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f009 fb9b 	bl	80106da <osMutexAcquire>
    float value = OD_IMU_AccelZ;
 8006fa4:	4b08      	ldr	r3, [pc, #32]	; (8006fc8 <_Z17OD_IMU_AccelZ_getv+0x38>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_AccelZ);
 8006faa:	4b06      	ldr	r3, [pc, #24]	; (8006fc4 <_Z17OD_IMU_AccelZ_getv+0x34>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f009 fbde 	bl	8010770 <osMutexRelease>
    return value;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	ee07 3a90 	vmov	s15, r3
}
 8006fba:	eeb0 0a67 	vmov.f32	s0, s15
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	2000092c 	.word	0x2000092c
 8006fc8:	20000844 	.word	0x20000844

08006fcc <_Z16OD_IMU_GyroX_getv>:
    osMutexRelease(mutex_OD_IMU_AccelZ);
}
#endif

#ifndef OD_IMU_GyroX_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_GyroX_get() {
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b082      	sub	sp, #8
 8006fd0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_GyroX, portMAX_DELAY);
 8006fd2:	4b0b      	ldr	r3, [pc, #44]	; (8007000 <_Z16OD_IMU_GyroX_getv+0x34>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f04f 31ff 	mov.w	r1, #4294967295
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f009 fb7d 	bl	80106da <osMutexAcquire>
    float value = OD_IMU_GyroX;
 8006fe0:	4b08      	ldr	r3, [pc, #32]	; (8007004 <_Z16OD_IMU_GyroX_getv+0x38>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_GyroX);
 8006fe6:	4b06      	ldr	r3, [pc, #24]	; (8007000 <_Z16OD_IMU_GyroX_getv+0x34>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f009 fbc0 	bl	8010770 <osMutexRelease>
    return value;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	ee07 3a90 	vmov	s15, r3
}
 8006ff6:	eeb0 0a67 	vmov.f32	s0, s15
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20000930 	.word	0x20000930
 8007004:	20000848 	.word	0x20000848

08007008 <_Z16OD_IMU_GyroY_getv>:
    osMutexRelease(mutex_OD_IMU_GyroX);
}
#endif

#ifndef OD_IMU_GyroY_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_GyroY_get() {
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_GyroY, portMAX_DELAY);
 800700e:	4b0b      	ldr	r3, [pc, #44]	; (800703c <_Z16OD_IMU_GyroY_getv+0x34>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f04f 31ff 	mov.w	r1, #4294967295
 8007016:	4618      	mov	r0, r3
 8007018:	f009 fb5f 	bl	80106da <osMutexAcquire>
    float value = OD_IMU_GyroY;
 800701c:	4b08      	ldr	r3, [pc, #32]	; (8007040 <_Z16OD_IMU_GyroY_getv+0x38>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_GyroY);
 8007022:	4b06      	ldr	r3, [pc, #24]	; (800703c <_Z16OD_IMU_GyroY_getv+0x34>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4618      	mov	r0, r3
 8007028:	f009 fba2 	bl	8010770 <osMutexRelease>
    return value;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	ee07 3a90 	vmov	s15, r3
}
 8007032:	eeb0 0a67 	vmov.f32	s0, s15
 8007036:	3708      	adds	r7, #8
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	20000934 	.word	0x20000934
 8007040:	2000084c 	.word	0x2000084c

08007044 <_Z16OD_IMU_GyroZ_getv>:
    osMutexRelease(mutex_OD_IMU_GyroY);
}
#endif

#ifndef OD_IMU_GyroZ_GET_OVERWRITE
float WEAK_SYMBOL OD_IMU_GyroZ_get() {
 8007044:	b580      	push	{r7, lr}
 8007046:	b082      	sub	sp, #8
 8007048:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_IMU_GyroZ, portMAX_DELAY);
 800704a:	4b0b      	ldr	r3, [pc, #44]	; (8007078 <_Z16OD_IMU_GyroZ_getv+0x34>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f04f 31ff 	mov.w	r1, #4294967295
 8007052:	4618      	mov	r0, r3
 8007054:	f009 fb41 	bl	80106da <osMutexAcquire>
    float value = OD_IMU_GyroZ;
 8007058:	4b08      	ldr	r3, [pc, #32]	; (800707c <_Z16OD_IMU_GyroZ_getv+0x38>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_IMU_GyroZ);
 800705e:	4b06      	ldr	r3, [pc, #24]	; (8007078 <_Z16OD_IMU_GyroZ_getv+0x34>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4618      	mov	r0, r3
 8007064:	f009 fb84 	bl	8010770 <osMutexRelease>
    return value;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	ee07 3a90 	vmov	s15, r3
}
 800706e:	eeb0 0a67 	vmov.f32	s0, s15
 8007072:	3708      	adds	r7, #8
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	20000938 	.word	0x20000938
 800707c:	20000850 	.word	0x20000850

08007080 <_Z22OD_CoolingPressure_getv>:
    osMutexRelease(mutex_OD_IMU_GyroZ);
}
#endif

#ifndef OD_CoolingPressure_GET_OVERWRITE
float WEAK_SYMBOL OD_CoolingPressure_get() {
 8007080:	b580      	push	{r7, lr}
 8007082:	b082      	sub	sp, #8
 8007084:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_CoolingPressure, portMAX_DELAY);
 8007086:	4b0b      	ldr	r3, [pc, #44]	; (80070b4 <_Z22OD_CoolingPressure_getv+0x34>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f04f 31ff 	mov.w	r1, #4294967295
 800708e:	4618      	mov	r0, r3
 8007090:	f009 fb23 	bl	80106da <osMutexAcquire>
    float value = OD_CoolingPressure;
 8007094:	4b08      	ldr	r3, [pc, #32]	; (80070b8 <_Z22OD_CoolingPressure_getv+0x38>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_CoolingPressure);
 800709a:	4b06      	ldr	r3, [pc, #24]	; (80070b4 <_Z22OD_CoolingPressure_getv+0x34>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4618      	mov	r0, r3
 80070a0:	f009 fb66 	bl	8010770 <osMutexRelease>
    return value;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	ee07 3a90 	vmov	s15, r3
}
 80070aa:	eeb0 0a67 	vmov.f32	s0, s15
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	2000093c 	.word	0x2000093c
 80070b8:	2000001c 	.word	0x2000001c

080070bc <_Z27OD_FiducialRightCounter_getv>:
    osMutexRelease(mutex_OD_CoolingPressure);
}
#endif

#ifndef OD_FiducialRightCounter_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_FiducialRightCounter_get() {
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_FiducialRightCounter, portMAX_DELAY);
 80070c2:	4b0a      	ldr	r3, [pc, #40]	; (80070ec <_Z27OD_FiducialRightCounter_getv+0x30>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f04f 31ff 	mov.w	r1, #4294967295
 80070ca:	4618      	mov	r0, r3
 80070cc:	f009 fb05 	bl	80106da <osMutexAcquire>
    uint16_t value = OD_FiducialRightCounter;
 80070d0:	4b07      	ldr	r3, [pc, #28]	; (80070f0 <_Z27OD_FiducialRightCounter_getv+0x34>)
 80070d2:	881b      	ldrh	r3, [r3, #0]
 80070d4:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_FiducialRightCounter);
 80070d6:	4b05      	ldr	r3, [pc, #20]	; (80070ec <_Z27OD_FiducialRightCounter_getv+0x30>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4618      	mov	r0, r3
 80070dc:	f009 fb48 	bl	8010770 <osMutexRelease>
    return value;
 80070e0:	88fb      	ldrh	r3, [r7, #6]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20000940 	.word	0x20000940
 80070f0:	20000854 	.word	0x20000854

080070f4 <_Z26OD_FiducialLeftCounter_getv>:
    osMutexRelease(mutex_OD_FiducialRightCounter);
}
#endif

#ifndef OD_FiducialLeftCounter_GET_OVERWRITE
uint16_t WEAK_SYMBOL OD_FiducialLeftCounter_get() {
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_FiducialLeftCounter, portMAX_DELAY);
 80070fa:	4b0a      	ldr	r3, [pc, #40]	; (8007124 <_Z26OD_FiducialLeftCounter_getv+0x30>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f04f 31ff 	mov.w	r1, #4294967295
 8007102:	4618      	mov	r0, r3
 8007104:	f009 fae9 	bl	80106da <osMutexAcquire>
    uint16_t value = OD_FiducialLeftCounter;
 8007108:	4b07      	ldr	r3, [pc, #28]	; (8007128 <_Z26OD_FiducialLeftCounter_getv+0x34>)
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	80fb      	strh	r3, [r7, #6]
    osMutexRelease(mutex_OD_FiducialLeftCounter);
 800710e:	4b05      	ldr	r3, [pc, #20]	; (8007124 <_Z26OD_FiducialLeftCounter_getv+0x30>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4618      	mov	r0, r3
 8007114:	f009 fb2c 	bl	8010770 <osMutexRelease>
    return value;
 8007118:	88fb      	ldrh	r3, [r7, #6]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3708      	adds	r7, #8
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	20000944 	.word	0x20000944
 8007128:	20000856 	.word	0x20000856

0800712c <_Z15OD_Position_getv>:
    osMutexRelease(mutex_OD_FiducialLeftCounter);
}
#endif

#ifndef OD_Position_GET_OVERWRITE
float WEAK_SYMBOL OD_Position_get() {
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_Position, portMAX_DELAY);
 8007132:	4b0b      	ldr	r3, [pc, #44]	; (8007160 <_Z15OD_Position_getv+0x34>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f04f 31ff 	mov.w	r1, #4294967295
 800713a:	4618      	mov	r0, r3
 800713c:	f009 facd 	bl	80106da <osMutexAcquire>
    float value = OD_Position;
 8007140:	4b08      	ldr	r3, [pc, #32]	; (8007164 <_Z15OD_Position_getv+0x38>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_Position);
 8007146:	4b06      	ldr	r3, [pc, #24]	; (8007160 <_Z15OD_Position_getv+0x34>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4618      	mov	r0, r3
 800714c:	f009 fb10 	bl	8010770 <osMutexRelease>
    return value;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	ee07 3a90 	vmov	s15, r3
}
 8007156:	eeb0 0a67 	vmov.f32	s0, s15
 800715a:	3708      	adds	r7, #8
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	20000948 	.word	0x20000948
 8007164:	20000858 	.word	0x20000858

08007168 <_Z15OD_Velocity_getv>:
    osMutexRelease(mutex_OD_Position);
}
#endif

#ifndef OD_Velocity_GET_OVERWRITE
float WEAK_SYMBOL OD_Velocity_get() {
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
    osMutexAcquire(mutex_OD_Velocity, portMAX_DELAY);
 800716e:	4b0b      	ldr	r3, [pc, #44]	; (800719c <_Z15OD_Velocity_getv+0x34>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f04f 31ff 	mov.w	r1, #4294967295
 8007176:	4618      	mov	r0, r3
 8007178:	f009 faaf 	bl	80106da <osMutexAcquire>
    float value = OD_Velocity;
 800717c:	4b08      	ldr	r3, [pc, #32]	; (80071a0 <_Z15OD_Velocity_getv+0x38>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	607b      	str	r3, [r7, #4]
    osMutexRelease(mutex_OD_Velocity);
 8007182:	4b06      	ldr	r3, [pc, #24]	; (800719c <_Z15OD_Velocity_getv+0x34>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4618      	mov	r0, r3
 8007188:	f009 faf2 	bl	8010770 <osMutexRelease>
    return value;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	ee07 3a90 	vmov	s15, r3
}
 8007192:	eeb0 0a67 	vmov.f32	s0, s15
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	2000094c 	.word	0x2000094c
 80071a0:	2000085c 	.word	0x2000085c

080071a4 <_Z17sendOdEntriesTaskPv>:
    0xD00,    0xD01 
};
constexpr uint16_t NUMBER_OF_READABLE_SDO_IDS = 58;
extern RNG_HandleTypeDef hrng;

void sendOdEntriesTask(void *pvParameters) {
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b086      	sub	sp, #24
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
    // Delay for random amount so that not all nodes send exactly at the same time
    uint32_t randomDelayMs;
    HAL_RNG_GenerateRandomNumber(&hrng, &randomDelayMs);
 80071ac:	f107 030c 	add.w	r3, r7, #12
 80071b0:	4619      	mov	r1, r3
 80071b2:	481f      	ldr	r0, [pc, #124]	; (8007230 <_Z17sendOdEntriesTaskPv+0x8c>)
 80071b4:	f006 f80c 	bl	800d1d0 <HAL_RNG_GenerateRandomNumber>
    randomDelayMs = randomDelayMs & 0xFF;   // Use only lower byte, so delay will be 255ms at maximum
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	60fb      	str	r3, [r7, #12]
    osDelay(pdMS_TO_TICKS(randomDelayMs));
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80071c4:	fb02 f303 	mul.w	r3, r2, r3
 80071c8:	4a1a      	ldr	r2, [pc, #104]	; (8007234 <_Z17sendOdEntriesTaskPv+0x90>)
 80071ca:	fba2 2303 	umull	r2, r3, r2, r3
 80071ce:	099b      	lsrs	r3, r3, #6
 80071d0:	4618      	mov	r0, r3
 80071d2:	f009 f9e1 	bl	8010598 <osDelay>

    uint16_t currentSdoListPos = 0;
 80071d6:	2300      	movs	r3, #0
 80071d8:	82fb      	strh	r3, [r7, #22]

    while(1) {
        uint16_t delayInterval = OD_OdEntrySendInterval_get();
 80071da:	f7ff f8b9 	bl	8006350 <_Z26OD_OdEntrySendInterval_getv>
 80071de:	4603      	mov	r3, r0
 80071e0:	82bb      	strh	r3, [r7, #20]
        if(delayInterval >= 5) {    // Periodically sending of all readable OD entries is enabled
 80071e2:	8abb      	ldrh	r3, [r7, #20]
 80071e4:	2b04      	cmp	r3, #4
 80071e6:	d91d      	bls.n	8007224 <_Z17sendOdEntriesTaskPv+0x80>
            uint16_t sdoId = READABLE_SDO_IDS[currentSdoListPos];
 80071e8:	8afb      	ldrh	r3, [r7, #22]
 80071ea:	4a13      	ldr	r2, [pc, #76]	; (8007238 <_Z17sendOdEntriesTaskPv+0x94>)
 80071ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071f0:	827b      	strh	r3, [r7, #18]

            currentSdoListPos++;
 80071f2:	8afb      	ldrh	r3, [r7, #22]
 80071f4:	3301      	adds	r3, #1
 80071f6:	82fb      	strh	r3, [r7, #22]
            if (currentSdoListPos >= NUMBER_OF_READABLE_SDO_IDS) {
 80071f8:	8afb      	ldrh	r3, [r7, #22]
 80071fa:	2b39      	cmp	r3, #57	; 0x39
 80071fc:	d901      	bls.n	8007202 <_Z17sendOdEntriesTaskPv+0x5e>
                currentSdoListPos = 0;
 80071fe:	2300      	movs	r3, #0
 8007200:	82fb      	strh	r3, [r7, #22]
            }

            handleSDORequestDownloadBySDOID(sdoId);
 8007202:	8a7b      	ldrh	r3, [r7, #18]
 8007204:	4618      	mov	r0, r3
 8007206:	f7fd fbeb 	bl	80049e0 <_Z31handleSDORequestDownloadBySDOIDt>

            osDelay(pdMS_TO_TICKS(delayInterval));
 800720a:	8abb      	ldrh	r3, [r7, #20]
 800720c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007210:	fb02 f303 	mul.w	r3, r2, r3
 8007214:	4a07      	ldr	r2, [pc, #28]	; (8007234 <_Z17sendOdEntriesTaskPv+0x90>)
 8007216:	fba2 2303 	umull	r2, r3, r2, r3
 800721a:	099b      	lsrs	r3, r3, #6
 800721c:	4618      	mov	r0, r3
 800721e:	f009 f9bb 	bl	8010598 <osDelay>
 8007222:	e7da      	b.n	80071da <_Z17sendOdEntriesTaskPv+0x36>

        } else {    // Sending OD entries is disabled, sleep for one second and then check again
            osDelay(pdMS_TO_TICKS(1000));
 8007224:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007228:	f009 f9b6 	bl	8010598 <osDelay>
        }
    }
 800722c:	e7d5      	b.n	80071da <_Z17sendOdEntriesTaskPv+0x36>
 800722e:	bf00      	nop
 8007230:	200010d4 	.word	0x200010d4
 8007234:	10624dd3 	.word	0x10624dd3
 8007238:	08017560 	.word	0x08017560

0800723c <_ZN3can7MessageINS_8messages20SensorF_SDO_Req_DownEE3getINS_7signals14SensorF_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f103 0208 	add.w	r2, r3, #8
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	3310      	adds	r3, #16
 800724e:	4619      	mov	r1, r3
 8007250:	4610      	mov	r0, r2
 8007252:	f7fb f9c4 	bl	80025de <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8007256:	4603      	mov	r3, r0
        }
 8007258:	4618      	mov	r0, r3
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_NodeIDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f103 0008 	add.w	r0, r3, #8
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f103 0110 	add.w	r1, r3, #16
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	1d1a      	adds	r2, r3, #4
 800727c:	78fb      	ldrb	r3, [r7, #3]
 800727e:	f7fd fb27 	bl	80048d0 <_ZN3can7signals17SensorF_OD_NodeID3setERyS2_Rhh>
        }
 8007282:	bf00      	nop
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_NodeStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800728a:	b580      	push	{r7, lr}
 800728c:	b082      	sub	sp, #8
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
 8007292:	460b      	mov	r3, r1
 8007294:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f103 0008 	add.w	r0, r3, #8
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f103 0110 	add.w	r1, r3, #16
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	1d1a      	adds	r2, r3, #4
 80072a6:	78fb      	ldrb	r3, [r7, #3]
 80072a8:	f7fd fadf 	bl	800486a <_ZN3can7signals21SensorF_OD_NodeStatus3setERyS2_Rhh>
        }
 80072ac:	bf00      	nop
 80072ae:	3708      	adds	r7, #8
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_ProtocolVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f103 0008 	add.w	r0, r3, #8
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f103 0110 	add.w	r1, r3, #16
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	1d1a      	adds	r2, r3, #4
 80072d0:	887b      	ldrh	r3, [r7, #2]
 80072d2:	f7fd fa9c 	bl	800480e <_ZN3can7signals26SensorF_OD_ProtocolVersion3setERyS2_Rht>
        }
 80072d6:	bf00      	nop
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}

080072de <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_StackVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80072de:	b580      	push	{r7, lr}
 80072e0:	b082      	sub	sp, #8
 80072e2:	af00      	add	r7, sp, #0
 80072e4:	6078      	str	r0, [r7, #4]
 80072e6:	460b      	mov	r3, r1
 80072e8:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f103 0008 	add.w	r0, r3, #8
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f103 0110 	add.w	r1, r3, #16
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	1d1a      	adds	r2, r3, #4
 80072fa:	887b      	ldrh	r3, [r7, #2]
 80072fc:	f7fd fa59 	bl	80047b2 <_ZN3can7signals23SensorF_OD_StackVersion3setERyS2_Rht>
        }
 8007300:	bf00      	nop
 8007302:	3708      	adds	r7, #8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_DbcVersionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f103 0008 	add.w	r0, r3, #8
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f103 0110 	add.w	r1, r3, #16
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	1d1a      	adds	r2, r3, #4
 8007324:	887b      	ldrh	r3, [r7, #2]
 8007326:	f7fd fa16 	bl	8004756 <_ZN3can7signals21SensorF_OD_DbcVersion3setERyS2_Rht>
        }
 800732a:	bf00      	nop
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_HeartbeatIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007332:	b580      	push	{r7, lr}
 8007334:	b082      	sub	sp, #8
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	460b      	mov	r3, r1
 800733c:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f103 0008 	add.w	r0, r3, #8
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f103 0110 	add.w	r1, r3, #16
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	1d1a      	adds	r2, r3, #4
 800734e:	887b      	ldrh	r3, [r7, #2]
 8007350:	f7fd f9af 	bl	80046b2 <_ZN3can7signals28SensorF_OD_HeartbeatInterval3setERyS2_Rht>
        }
 8007354:	bf00      	nop
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals25SensorF_OD_SendOdOnBootupEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	460b      	mov	r3, r1
 8007366:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f103 0008 	add.w	r0, r3, #8
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f103 0110 	add.w	r1, r3, #16
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	1d1a      	adds	r2, r3, #4
 8007378:	78fb      	ldrb	r3, [r7, #3]
 800737a:	f7fd f943 	bl	8004604 <_ZN3can7signals25SensorF_OD_SendOdOnBootup3setERyS2_Rhh>
        }
 800737e:	bf00      	nop
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_OdEntrySendIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007386:	b580      	push	{r7, lr}
 8007388:	b082      	sub	sp, #8
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	460b      	mov	r3, r1
 8007390:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f103 0008 	add.w	r0, r3, #8
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f103 0110 	add.w	r1, r3, #16
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	1d1a      	adds	r2, r3, #4
 80073a2:	887b      	ldrh	r3, [r7, #2]
 80073a4:	f7fd f8dc 	bl	8004560 <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3setERyS2_Rht>
        }
 80073a8:	bf00      	nop
 80073aa:	3708      	adds	r7, #8
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_CpuUsageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f103 0008 	add.w	r0, r3, #8
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f103 0110 	add.w	r1, r3, #16
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	3304      	adds	r3, #4
 80073cc:	ed97 0a00 	vldr	s0, [r7]
 80073d0:	461a      	mov	r2, r3
 80073d2:	f7fd f867 	bl	80044a4 <_ZN3can7signals19SensorF_OD_CpuUsage3setERyS2_Rhf>
        }
 80073d6:	bf00      	nop
 80073d8:	3708      	adds	r7, #8
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_MemFreeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80073de:	b580      	push	{r7, lr}
 80073e0:	b082      	sub	sp, #8
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f103 0008 	add.w	r0, r3, #8
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f103 0110 	add.w	r1, r3, #16
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	1d1a      	adds	r2, r3, #4
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	f7fd f81b 	bl	8004434 <_ZN3can7signals18SensorF_OD_MemFree3setERyS2_Rhm>
        }
 80073fe:	bf00      	nop
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BoardTempEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007406:	b580      	push	{r7, lr}
 8007408:	b082      	sub	sp, #8
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f103 0008 	add.w	r0, r3, #8
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f103 0110 	add.w	r1, r3, #16
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	3304      	adds	r3, #4
 8007422:	ed97 0a00 	vldr	s0, [r7]
 8007426:	461a      	mov	r2, r3
 8007428:	f7fc ffa2 	bl	8004370 <_ZN3can7signals20SensorF_OD_BoardTemp3setERyS2_Rhf>
        }
 800742c:	bf00      	nop
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals23SensorF_OD_InputVoltageEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f103 0008 	add.w	r0, r3, #8
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	f103 0110 	add.w	r1, r3, #16
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3304      	adds	r3, #4
 8007450:	ed97 0a00 	vldr	s0, [r7]
 8007454:	461a      	mov	r2, r3
 8007456:	f7fc ff31 	bl	80042bc <_ZN3can7signals23SensorF_OD_InputVoltage3setERyS2_Rhf>
        }
 800745a:	bf00      	nop
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals18SensorF_OD_runtimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007462:	b580      	push	{r7, lr}
 8007464:	b082      	sub	sp, #8
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f103 0008 	add.w	r0, r3, #8
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f103 0110 	add.w	r1, r3, #16
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	1d1a      	adds	r2, r3, #4
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	f7fc fee3 	bl	8004248 <_ZN3can7signals18SensorF_OD_runtime3setERyS2_Rhm>
        }
 8007482:	bf00      	nop
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals16SensorF_OD_SdcInEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	460b      	mov	r3, r1
 8007494:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f103 0008 	add.w	r0, r3, #8
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f103 0110 	add.w	r1, r3, #16
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	1d1a      	adds	r2, r3, #4
 80074a6:	78fb      	ldrb	r3, [r7, #3]
 80074a8:	f7fc fe9a 	bl	80041e0 <_ZN3can7signals16SensorF_OD_SdcIn3setERyS2_Rhh>
        }
 80074ac:	bf00      	nop
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals17SensorF_OD_SdcOutEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
 80074bc:	460b      	mov	r3, r1
 80074be:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f103 0008 	add.w	r0, r3, #8
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f103 0110 	add.w	r1, r3, #16
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	1d1a      	adds	r2, r3, #4
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	f7fc fe51 	bl	8004178 <_ZN3can7signals17SensorF_OD_SdcOut3setERyS2_Rhh>
        }
 80074d6:	bf00      	nop
 80074d8:	3708      	adds	r7, #8
 80074da:	46bd      	mov	sp, r7
 80074dc:	bd80      	pop	{r7, pc}

080074de <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID1EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80074de:	b590      	push	{r4, r7, lr}
 80074e0:	b087      	sub	sp, #28
 80074e2:	af02      	add	r7, sp, #8
 80074e4:	60f8      	str	r0, [r7, #12]
 80074e6:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	f103 0008 	add.w	r0, r3, #8
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	f103 0110 	add.w	r1, r3, #16
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	1d1c      	adds	r4, r3, #4
 80074fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074fe:	e9cd 2300 	strd	r2, r3, [sp]
 8007502:	4622      	mov	r2, r4
 8007504:	f7fc fdff 	bl	8004106 <_ZN3can7signals19SensorF_OD_ChipUID13setERyS2_Rhy>
        }
 8007508:	bf00      	nop
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	bd90      	pop	{r4, r7, pc}

08007510 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_ChipUID2EEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007510:	b590      	push	{r4, r7, lr}
 8007512:	b087      	sub	sp, #28
 8007514:	af02      	add	r7, sp, #8
 8007516:	60f8      	str	r0, [r7, #12]
 8007518:	e9c7 2300 	strd	r2, r3, [r7]
            T::set(intel, motorola, dlc, value);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f103 0008 	add.w	r0, r3, #8
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f103 0110 	add.w	r1, r3, #16
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	1d1c      	adds	r4, r3, #4
 800752c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007530:	e9cd 2300 	strd	r2, r3, [sp]
 8007534:	4622      	mov	r2, r4
 8007536:	f7fc fdad 	bl	8004094 <_ZN3can7signals19SensorF_OD_ChipUID23setERyS2_Rhy>
        }
 800753a:	bf00      	nop
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	bd90      	pop	{r4, r7, pc}

08007542 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildDateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007542:	b580      	push	{r7, lr}
 8007544:	b082      	sub	sp, #8
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
 800754a:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f103 0008 	add.w	r0, r3, #8
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f103 0110 	add.w	r1, r3, #16
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	1d1a      	adds	r2, r3, #4
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	f7fc fd61 	bl	8004024 <_ZN3can7signals20SensorF_OD_BuildDate3setERyS2_Rhm>
        }
 8007562:	bf00      	nop
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_BuildTimeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800756a:	b580      	push	{r7, lr}
 800756c:	b082      	sub	sp, #8
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f103 0008 	add.w	r0, r3, #8
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f103 0110 	add.w	r1, r3, #16
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	1d1a      	adds	r2, r3, #4
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	f7fc fd13 	bl	8003fb0 <_ZN3can7signals20SensorF_OD_BuildTime3setERyS2_Rhm>
        }
 800758a:	bf00      	nop
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007592:	b580      	push	{r7, lr}
 8007594:	b082      	sub	sp, #8
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	460b      	mov	r3, r1
 800759c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f103 0008 	add.w	r0, r3, #8
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f103 0110 	add.w	r1, r3, #16
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	1d1a      	adds	r2, r3, #4
 80075ae:	78fb      	ldrb	r3, [r7, #3]
 80075b0:	f7fc fcca 	bl	8003f48 <_ZN3can7signals24SensorF_OD_CAN1_TxErrCnt3setERyS2_Rhh>
        }
 80075b4:	bf00      	nop
 80075b6:	3708      	adds	r7, #8
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80075bc:	b580      	push	{r7, lr}
 80075be:	b082      	sub	sp, #8
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	460b      	mov	r3, r1
 80075c6:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f103 0008 	add.w	r0, r3, #8
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f103 0110 	add.w	r1, r3, #16
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	1d1a      	adds	r2, r3, #4
 80075d8:	78fb      	ldrb	r3, [r7, #3]
 80075da:	f7fc fc81 	bl	8003ee0 <_ZN3can7signals24SensorF_OD_CAN1_RxErrCnt3setERyS2_Rhh>
        }
 80075de:	bf00      	nop
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN1_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b082      	sub	sp, #8
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f103 0008 	add.w	r0, r3, #8
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f103 0110 	add.w	r1, r3, #16
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	1d1a      	adds	r2, r3, #4
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	f7fc fc35 	bl	8003e70 <_ZN3can7signals29SensorF_OD_CAN1_lastErrorCode3setERyS2_Rhm>
        }
 8007606:	bf00      	nop
 8007608:	3708      	adds	r7, #8
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}

0800760e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN1_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800760e:	b580      	push	{r7, lr}
 8007610:	b082      	sub	sp, #8
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	460b      	mov	r3, r1
 8007618:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f103 0008 	add.w	r0, r3, #8
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f103 0110 	add.w	r1, r3, #16
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	1d1a      	adds	r2, r3, #4
 800762a:	78fb      	ldrb	r3, [r7, #3]
 800762c:	f7fc fbc4 	bl	8003db8 <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3setERyS2_Rhh>
        }
 8007630:	bf00      	nop
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN1_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
 8007640:	460b      	mov	r3, r1
 8007642:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f103 0008 	add.w	r0, r3, #8
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f103 0110 	add.w	r1, r3, #16
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	1d1a      	adds	r2, r3, #4
 8007654:	887b      	ldrh	r3, [r7, #2]
 8007656:	f7fc fb4d 	bl	8003cf4 <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3setERyS2_Rht>
        }
 800765a:	bf00      	nop
 800765c:	3708      	adds	r7, #8
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN1_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	460b      	mov	r3, r1
 800766c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f103 0008 	add.w	r0, r3, #8
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f103 0110 	add.w	r1, r3, #16
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	1d1a      	adds	r2, r3, #4
 800767e:	78fb      	ldrb	r3, [r7, #3]
 8007680:	f7fc fb04 	bl	8003c8c <_ZN3can7signals22SensorF_OD_CAN1_Status3setERyS2_Rhh>
        }
 8007684:	bf00      	nop
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN1_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f103 0008 	add.w	r0, r3, #8
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f103 0110 	add.w	r1, r3, #16
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	1d1a      	adds	r2, r3, #4
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	f7fc fab6 	bl	8003c18 <_ZN3can7signals35SensorF_OD_CAN1_DiscardedTxMessages3setERyS2_Rhm>
        }
 80076ac:	bf00      	nop
 80076ae:	3708      	adds	r7, #8
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN1_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f103 0008 	add.w	r0, r3, #8
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f103 0110 	add.w	r1, r3, #16
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	1d1a      	adds	r2, r3, #4
 80076d0:	78fb      	ldrb	r3, [r7, #3]
 80076d2:	f7fc fa6d 	bl	8003bb0 <_ZN3can7signals27SensorF_OD_CAN1_ErrorStatus3setERyS2_Rhh>
        }
 80076d6:	bf00      	nop
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN1_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80076de:	b580      	push	{r7, lr}
 80076e0:	b082      	sub	sp, #8
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f103 0008 	add.w	r0, r3, #8
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f103 0110 	add.w	r1, r3, #16
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	1d1a      	adds	r2, r3, #4
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	f7fc fa1f 	bl	8003b3c <_ZN3can7signals33SensorF_OD_CAN1_DelayedTxMessages3setERyS2_Rhm>
        }
 80076fe:	bf00      	nop
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_TxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
 800770e:	460b      	mov	r3, r1
 8007710:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f103 0008 	add.w	r0, r3, #8
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f103 0110 	add.w	r1, r3, #16
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	1d1a      	adds	r2, r3, #4
 8007722:	78fb      	ldrb	r3, [r7, #3]
 8007724:	f7fc f9d6 	bl	8003ad4 <_ZN3can7signals24SensorF_OD_CAN2_TxErrCnt3setERyS2_Rhh>
        }
 8007728:	bf00      	nop
 800772a:	3708      	adds	r7, #8
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}

08007730 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_RxErrCntEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	460b      	mov	r3, r1
 800773a:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f103 0008 	add.w	r0, r3, #8
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f103 0110 	add.w	r1, r3, #16
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	1d1a      	adds	r2, r3, #4
 800774c:	78fb      	ldrb	r3, [r7, #3]
 800774e:	f7fc f98d 	bl	8003a6c <_ZN3can7signals24SensorF_OD_CAN2_RxErrCnt3setERyS2_Rhh>
        }
 8007752:	bf00      	nop
 8007754:	3708      	adds	r7, #8
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals29SensorF_OD_CAN2_lastErrorCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800775a:	b580      	push	{r7, lr}
 800775c:	b082      	sub	sp, #8
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f103 0008 	add.w	r0, r3, #8
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f103 0110 	add.w	r1, r3, #16
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	1d1a      	adds	r2, r3, #4
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	f7fc f941 	bl	80039fc <_ZN3can7signals29SensorF_OD_CAN2_lastErrorCode3setERyS2_Rhm>
        }
 800777a:	bf00      	nop
 800777c:	3708      	adds	r7, #8
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_CAN2_autoErrorResetEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007782:	b580      	push	{r7, lr}
 8007784:	b082      	sub	sp, #8
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
 800778a:	460b      	mov	r3, r1
 800778c:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f103 0008 	add.w	r0, r3, #8
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f103 0110 	add.w	r1, r3, #16
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	1d1a      	adds	r2, r3, #4
 800779e:	78fb      	ldrb	r3, [r7, #3]
 80077a0:	f7fc f8d0 	bl	8003944 <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3setERyS2_Rhh>
        }
 80077a4:	bf00      	nop
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_CAN2_BaudrateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f103 0008 	add.w	r0, r3, #8
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f103 0110 	add.w	r1, r3, #16
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	1d1a      	adds	r2, r3, #4
 80077c8:	887b      	ldrh	r3, [r7, #2]
 80077ca:	f7fc f859 	bl	8003880 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3setERyS2_Rht>
        }
 80077ce:	bf00      	nop
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals22SensorF_OD_CAN2_StatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b082      	sub	sp, #8
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	460b      	mov	r3, r1
 80077e0:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f103 0008 	add.w	r0, r3, #8
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f103 0110 	add.w	r1, r3, #16
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	1d1a      	adds	r2, r3, #4
 80077f2:	78fb      	ldrb	r3, [r7, #3]
 80077f4:	f7fc f810 	bl	8003818 <_ZN3can7signals22SensorF_OD_CAN2_Status3setERyS2_Rhh>
        }
 80077f8:	bf00      	nop
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals35SensorF_OD_CAN2_DiscardedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f103 0008 	add.w	r0, r3, #8
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f103 0110 	add.w	r1, r3, #16
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	1d1a      	adds	r2, r3, #4
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	f7fb ffc2 	bl	80037a4 <_ZN3can7signals35SensorF_OD_CAN2_DiscardedTxMessages3setERyS2_Rhm>
        }
 8007820:	bf00      	nop
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_CAN2_ErrorStatusEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	460b      	mov	r3, r1
 8007832:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f103 0008 	add.w	r0, r3, #8
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f103 0110 	add.w	r1, r3, #16
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	1d1a      	adds	r2, r3, #4
 8007844:	78fb      	ldrb	r3, [r7, #3]
 8007846:	f7fb ff79 	bl	800373c <_ZN3can7signals27SensorF_OD_CAN2_ErrorStatus3setERyS2_Rhh>
        }
 800784a:	bf00      	nop
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}

08007852 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals33SensorF_OD_CAN2_DelayedTxMessagesEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007852:	b580      	push	{r7, lr}
 8007854:	b082      	sub	sp, #8
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
 800785a:	6039      	str	r1, [r7, #0]
            T::set(intel, motorola, dlc, value);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f103 0008 	add.w	r0, r3, #8
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f103 0110 	add.w	r1, r3, #16
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	1d1a      	adds	r2, r3, #4
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	f7fb ff2b 	bl	80036c8 <_ZN3can7signals33SensorF_OD_CAN2_DelayedTxMessages3setERyS2_Rhm>
        }
 8007872:	bf00      	nop
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_samplingIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800787a:	b580      	push	{r7, lr}
 800787c:	b082      	sub	sp, #8
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
 8007882:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f103 0008 	add.w	r0, r3, #8
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f103 0110 	add.w	r1, r3, #16
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	3304      	adds	r3, #4
 8007896:	ed97 0a00 	vldr	s0, [r7]
 800789a:	461a      	mov	r2, r3
 800789c:	f7fb fe86 	bl	80035ac <_ZN3can7signals27SensorF_OD_samplingInterval3setERyS2_Rhf>
        }
 80078a0:	bf00      	nop
 80078a2:	3708      	adds	r7, #8
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals28SensorF_OD_TelemetryCommandsEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b082      	sub	sp, #8
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	460b      	mov	r3, r1
 80078b2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f103 0008 	add.w	r0, r3, #8
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f103 0110 	add.w	r1, r3, #16
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	1d1a      	adds	r2, r3, #4
 80078c4:	78fb      	ldrb	r3, [r7, #3]
 80078c6:	f7fb fe18 	bl	80034fa <_ZN3can7signals28SensorF_OD_TelemetryCommands3setERyS2_Rhh>
        }
 80078ca:	bf00      	nop
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineIntervalEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b082      	sub	sp, #8
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	460b      	mov	r3, r1
 80078dc:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f103 0008 	add.w	r0, r3, #8
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f103 0110 	add.w	r1, r3, #16
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	1d1a      	adds	r2, r3, #4
 80078ee:	78fb      	ldrb	r3, [r7, #3]
 80078f0:	f7fb fd9e 	bl	8003430 <_ZN3can7signals31SensorF_OD_StateMachineInterval3setERyS2_Rhh>
        }
 80078f4:	bf00      	nop
 80078f6:	3708      	adds	r7, #8
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_StateMachineActivateEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b082      	sub	sp, #8
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	460b      	mov	r3, r1
 8007906:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f103 0008 	add.w	r0, r3, #8
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f103 0110 	add.w	r1, r3, #16
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	1d1a      	adds	r2, r3, #4
 8007918:	78fb      	ldrb	r3, [r7, #3]
 800791a:	f7fb fd2e 	bl	800337a <_ZN3can7signals31SensorF_OD_StateMachineActivate3setERyS2_Rhh>
        }
 800791e:	bf00      	nop
 8007920:	3708      	adds	r7, #8
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}

08007926 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals24SensorF_OD_HVBatteryModeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007926:	b580      	push	{r7, lr}
 8007928:	b082      	sub	sp, #8
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
 800792e:	460b      	mov	r3, r1
 8007930:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f103 0008 	add.w	r0, r3, #8
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f103 0110 	add.w	r1, r3, #16
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	1d1a      	adds	r2, r3, #4
 8007942:	78fb      	ldrb	r3, [r7, #3]
 8007944:	f7fb fcbe 	bl	80032c4 <_ZN3can7signals24SensorF_OD_HVBatteryMode3setERyS2_Rhh>
        }
 8007948:	bf00      	nop
 800794a:	3708      	adds	r7, #8
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}

08007950 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_EncoderWheelDiameterEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007950:	b580      	push	{r7, lr}
 8007952:	b082      	sub	sp, #8
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f103 0008 	add.w	r0, r3, #8
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f103 0110 	add.w	r1, r3, #16
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	3304      	adds	r3, #4
 800796c:	ed97 0a00 	vldr	s0, [r7]
 8007970:	461a      	mov	r2, r3
 8007972:	f7fb fc19 	bl	80031a8 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3setERyS2_Rhf>
        }
 8007976:	bf00      	nop
 8007978:	3708      	adds	r7, #8
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals14SensorF_SDO_IDEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 800797e:	b580      	push	{r7, lr}
 8007980:	b082      	sub	sp, #8
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	460b      	mov	r3, r1
 8007988:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f103 0008 	add.w	r0, r3, #8
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f103 0110 	add.w	r1, r3, #16
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	1d1a      	adds	r2, r3, #4
 800799a:	887b      	ldrh	r3, [r7, #2]
 800799c:	f7fa fdf7 	bl	800258e <_ZN3can7signals14SensorF_SDO_ID3setERyS2_Rht>
        }
 80079a0:	bf00      	nop
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_numberEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
 80079b0:	460b      	mov	r3, r1
 80079b2:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f103 0008 	add.w	r0, r3, #8
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f103 0110 	add.w	r1, r3, #16
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	1d1a      	adds	r2, r3, #4
 80079c4:	78fb      	ldrb	r3, [r7, #3]
 80079c6:	f7fb fb93 	bl	80030f0 <_ZN3can7signals21SensorF_OD_IMU_number3setERyS2_Rhh>
        }
 80079ca:	bf00      	nop
 80079cc:	3708      	adds	r7, #8
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU1_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b082      	sub	sp, #8
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f103 0008 	add.w	r0, r3, #8
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	f103 0110 	add.w	r1, r3, #16
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	3304      	adds	r3, #4
 80079ee:	ed97 0a00 	vldr	s0, [r7]
 80079f2:	461a      	mov	r2, r3
 80079f4:	f7fb fb16 	bl	8003024 <_ZN3can7signals27SensorF_OD_IMU1_Temperature3setERyS2_Rhf>
        }
 80079f8:	bf00      	nop
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU2_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f103 0008 	add.w	r0, r3, #8
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f103 0110 	add.w	r1, r3, #16
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	3304      	adds	r3, #4
 8007a1c:	ed97 0a00 	vldr	s0, [r7]
 8007a20:	461a      	mov	r2, r3
 8007a22:	f7fb fa99 	bl	8002f58 <_ZN3can7signals27SensorF_OD_IMU2_Temperature3setERyS2_Rhf>
        }
 8007a26:	bf00      	nop
 8007a28:	3708      	adds	r7, #8
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals27SensorF_OD_IMU3_TemperatureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b082      	sub	sp, #8
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
 8007a36:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f103 0008 	add.w	r0, r3, #8
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f103 0110 	add.w	r1, r3, #16
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	3304      	adds	r3, #4
 8007a4a:	ed97 0a00 	vldr	s0, [r7]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	f7fb fa1c 	bl	8002e8c <_ZN3can7signals27SensorF_OD_IMU3_Temperature3setERyS2_Rhf>
        }
 8007a54:	bf00      	nop
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelXEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b082      	sub	sp, #8
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f103 0008 	add.w	r0, r3, #8
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f103 0110 	add.w	r1, r3, #16
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	3304      	adds	r3, #4
 8007a78:	ed97 0a00 	vldr	s0, [r7]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	f7fb f99f 	bl	8002dc0 <_ZN3can7signals21SensorF_OD_IMU_AccelX3setERyS2_Rhf>
        }
 8007a82:	bf00      	nop
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelYEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b082      	sub	sp, #8
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
 8007a92:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f103 0008 	add.w	r0, r3, #8
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f103 0110 	add.w	r1, r3, #16
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	ed97 0a00 	vldr	s0, [r7]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	f7fb f922 	bl	8002cf4 <_ZN3can7signals21SensorF_OD_IMU_AccelY3setERyS2_Rhf>
        }
 8007ab0:	bf00      	nop
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals21SensorF_OD_IMU_AccelZEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f103 0008 	add.w	r0, r3, #8
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f103 0110 	add.w	r1, r3, #16
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	3304      	adds	r3, #4
 8007ad4:	ed97 0a00 	vldr	s0, [r7]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	f7fb f8a5 	bl	8002c28 <_ZN3can7signals21SensorF_OD_IMU_AccelZ3setERyS2_Rhf>
        }
 8007ade:	bf00      	nop
 8007ae0:	3708      	adds	r7, #8
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	bd80      	pop	{r7, pc}

08007ae6 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroXEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b082      	sub	sp, #8
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f103 0008 	add.w	r0, r3, #8
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f103 0110 	add.w	r1, r3, #16
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	3304      	adds	r3, #4
 8007b02:	ed97 0a00 	vldr	s0, [r7]
 8007b06:	461a      	mov	r2, r3
 8007b08:	f7fb f828 	bl	8002b5c <_ZN3can7signals20SensorF_OD_IMU_GyroX3setERyS2_Rhf>
        }
 8007b0c:	bf00      	nop
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroYEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f103 0008 	add.w	r0, r3, #8
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f103 0110 	add.w	r1, r3, #16
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	3304      	adds	r3, #4
 8007b30:	ed97 0a00 	vldr	s0, [r7]
 8007b34:	461a      	mov	r2, r3
 8007b36:	f7fa ffab 	bl	8002a90 <_ZN3can7signals20SensorF_OD_IMU_GyroY3setERyS2_Rhf>
        }
 8007b3a:	bf00      	nop
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_OD_IMU_GyroZEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b082      	sub	sp, #8
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
 8007b4a:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f103 0008 	add.w	r0, r3, #8
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f103 0110 	add.w	r1, r3, #16
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	ed97 0a00 	vldr	s0, [r7]
 8007b62:	461a      	mov	r2, r3
 8007b64:	f7fa ff2e 	bl	80029c4 <_ZN3can7signals20SensorF_OD_IMU_GyroZ3setERyS2_Rhf>
        }
 8007b68:	bf00      	nop
 8007b6a:	3708      	adds	r7, #8
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals26SensorF_OD_CoolingPressureEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f103 0008 	add.w	r0, r3, #8
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f103 0110 	add.w	r1, r3, #16
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	ed97 0a00 	vldr	s0, [r7]
 8007b90:	461a      	mov	r2, r3
 8007b92:	f7fa feb1 	bl	80028f8 <_ZN3can7signals26SensorF_OD_CoolingPressure3setERyS2_Rhf>
        }
 8007b96:	bf00      	nop
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals31SensorF_OD_FiducialRightCounterEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b082      	sub	sp, #8
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f103 0008 	add.w	r0, r3, #8
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f103 0110 	add.w	r1, r3, #16
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	1d1a      	adds	r2, r3, #4
 8007bba:	887b      	ldrh	r3, [r7, #2]
 8007bbc:	f7fa fe6d 	bl	800289a <_ZN3can7signals31SensorF_OD_FiducialRightCounter3setERyS2_Rht>
        }
 8007bc0:	bf00      	nop
 8007bc2:	3708      	adds	r7, #8
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals30SensorF_OD_FiducialLeftCounterEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	460b      	mov	r3, r1
 8007bd2:	807b      	strh	r3, [r7, #2]
            T::set(intel, motorola, dlc, value);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f103 0008 	add.w	r0, r3, #8
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f103 0110 	add.w	r1, r3, #16
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	1d1a      	adds	r2, r3, #4
 8007be4:	887b      	ldrh	r3, [r7, #2]
 8007be6:	f7fa fe29 	bl	800283c <_ZN3can7signals30SensorF_OD_FiducialLeftCounter3setERyS2_Rht>
        }
 8007bea:	bf00      	nop
 8007bec:	3708      	adds	r7, #8
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_PositionEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b082      	sub	sp, #8
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f103 0008 	add.w	r0, r3, #8
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f103 0110 	add.w	r1, r3, #16
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	3304      	adds	r3, #4
 8007c0e:	ed97 0a00 	vldr	s0, [r7]
 8007c12:	461a      	mov	r2, r3
 8007c14:	f7fa fdac 	bl	8002770 <_ZN3can7signals19SensorF_OD_Position3setERyS2_Rhf>
        }
 8007c18:	bf00      	nop
 8007c1a:	3708      	adds	r7, #8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals19SensorF_OD_VelocityEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b082      	sub	sp, #8
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	ed87 0a00 	vstr	s0, [r7]
            T::set(intel, motorola, dlc, value);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f103 0008 	add.w	r0, r3, #8
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f103 0110 	add.w	r1, r3, #16
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	3304      	adds	r3, #4
 8007c3c:	ed97 0a00 	vldr	s0, [r7]
 8007c40:	461a      	mov	r2, r3
 8007c42:	f7fa fd2f 	bl	80026a4 <_ZN3can7signals19SensorF_OD_Velocity3setERyS2_Rhf>
        }
 8007c46:	bf00      	nop
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <_ZN3can7MessageINS_8messages16SensorF_SDO_RespEE3setINS_7signals20SensorF_SDO_RespCodeEEEvNT_8dataTypeE>:
        void set(typename T::dataType value) {
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
 8007c56:	460b      	mov	r3, r1
 8007c58:	70fb      	strb	r3, [r7, #3]
            T::set(intel, motorola, dlc, value);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f103 0008 	add.w	r0, r3, #8
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f103 0110 	add.w	r1, r3, #16
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	1d1a      	adds	r2, r3, #4
 8007c6a:	78fb      	ldrb	r3, [r7, #3]
 8007c6c:	f7fa fcca 	bl	8002604 <_ZN3can7signals20SensorF_SDO_RespCode3setERyS2_Rhh>
        }
 8007c70:	bf00      	nop
 8007c72:	3708      	adds	r7, #8
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals14SensorF_SDO_IDEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f103 0208 	add.w	r2, r3, #8
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	3310      	adds	r3, #16
 8007c8a:	4619      	mov	r1, r3
 8007c8c:	4610      	mov	r0, r2
 8007c8e:	f7fa fca6 	bl	80025de <_ZN3can7signals14SensorF_SDO_ID3getERKyS3_>
 8007c92:	4603      	mov	r3, r0
        }
 8007c94:	4618      	mov	r0, r3
 8007c96:	3708      	adds	r7, #8
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals28SensorF_OD_HeartbeatIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b082      	sub	sp, #8
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f103 0208 	add.w	r2, r3, #8
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	3310      	adds	r3, #16
 8007cae:	4619      	mov	r1, r3
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	f7fc fd2c 	bl	800470e <_ZN3can7signals28SensorF_OD_HeartbeatInterval3getERKyS3_>
 8007cb6:	4603      	mov	r3, r0
        }
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3708      	adds	r7, #8
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals25SensorF_OD_SendOdOnBootupEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f103 0208 	add.w	r2, r3, #8
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	3310      	adds	r3, #16
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	4610      	mov	r0, r2
 8007cd6:	f7fc fcc8 	bl	800466a <_ZN3can7signals25SensorF_OD_SendOdOnBootup3getERKyS3_>
 8007cda:	4603      	mov	r3, r0
        }
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3708      	adds	r7, #8
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_OdEntrySendIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f103 0208 	add.w	r2, r3, #8
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	3310      	adds	r3, #16
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	4610      	mov	r0, r2
 8007cfa:	f7fc fc5f 	bl	80045bc <_ZN3can7signals30SensorF_OD_OdEntrySendInterval3getERKyS3_>
 8007cfe:	4603      	mov	r3, r0
        }
 8007d00:	4618      	mov	r0, r3
 8007d02:	3708      	adds	r7, #8
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_CAN1_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f103 0208 	add.w	r2, r3, #8
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	3310      	adds	r3, #16
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	f7fc f87f 	bl	8003e20 <_ZN3can7signals30SensorF_OD_CAN1_autoErrorReset3getERKyS3_>
 8007d22:	4603      	mov	r3, r0
        }
 8007d24:	4618      	mov	r0, r3
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_CAN1_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f103 0208 	add.w	r2, r3, #8
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	3310      	adds	r3, #16
 8007d3e:	4619      	mov	r1, r3
 8007d40:	4610      	mov	r0, r2
 8007d42:	f7fc f812 	bl	8003d6a <_ZN3can7signals24SensorF_OD_CAN1_Baudrate3getERKyS3_>
 8007d46:	4603      	mov	r3, r0
        }
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals30SensorF_OD_CAN2_autoErrorResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f103 0208 	add.w	r2, r3, #8
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	3310      	adds	r3, #16
 8007d62:	4619      	mov	r1, r3
 8007d64:	4610      	mov	r0, r2
 8007d66:	f7fb fe21 	bl	80039ac <_ZN3can7signals30SensorF_OD_CAN2_autoErrorReset3getERKyS3_>
 8007d6a:	4603      	mov	r3, r0
        }
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_CAN2_BaudrateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f103 0208 	add.w	r2, r3, #8
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	3310      	adds	r3, #16
 8007d86:	4619      	mov	r1, r3
 8007d88:	4610      	mov	r0, r2
 8007d8a:	f7fb fdb4 	bl	80038f6 <_ZN3can7signals24SensorF_OD_CAN2_Baudrate3getERKyS3_>
 8007d8e:	4603      	mov	r3, r0
        }
 8007d90:	4618      	mov	r0, r3
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals27SensorF_OD_samplingIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f103 0208 	add.w	r2, r3, #8
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	3310      	adds	r3, #16
 8007daa:	4619      	mov	r1, r3
 8007dac:	4610      	mov	r0, r2
 8007dae:	f7fb fc5b 	bl	8003668 <_ZN3can7signals27SensorF_OD_samplingInterval3getERKyS3_>
 8007db2:	eef0 7a40 	vmov.f32	s15, s0
        }
 8007db6:	eeb0 0a67 	vmov.f32	s0, s15
 8007dba:	3708      	adds	r7, #8
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals28SensorF_OD_TelemetryCommandsEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f103 0208 	add.w	r2, r3, #8
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	3310      	adds	r3, #16
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	4610      	mov	r0, r2
 8007dd6:	f7fb fbc4 	bl	8003562 <_ZN3can7signals28SensorF_OD_TelemetryCommands3getERKyS3_>
 8007dda:	4603      	mov	r3, r0
        }
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_StateMachineIntervalEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f103 0208 	add.w	r2, r3, #8
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3310      	adds	r3, #16
 8007df6:	4619      	mov	r1, r3
 8007df8:	4610      	mov	r0, r2
 8007dfa:	f7fb fb57 	bl	80034ac <_ZN3can7signals31SensorF_OD_StateMachineInterval3getERKyS3_>
 8007dfe:	4603      	mov	r3, r0
        }
 8007e00:	4618      	mov	r0, r3
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_StateMachineActivateEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f103 0208 	add.w	r2, r3, #8
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	3310      	adds	r3, #16
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	f7fb fae0 	bl	80033e2 <_ZN3can7signals31SensorF_OD_StateMachineActivate3getERKyS3_>
 8007e22:	4603      	mov	r3, r0
        }
 8007e24:	4618      	mov	r0, r3
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals24SensorF_OD_HVBatteryModeEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f103 0208 	add.w	r2, r3, #8
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	3310      	adds	r3, #16
 8007e3e:	4619      	mov	r1, r3
 8007e40:	4610      	mov	r0, r2
 8007e42:	f7fb fa73 	bl	800332c <_ZN3can7signals24SensorF_OD_HVBatteryMode3getERKyS3_>
 8007e46:	4603      	mov	r3, r0
        }
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3708      	adds	r7, #8
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_EncoderWheelDiameterEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b082      	sub	sp, #8
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f103 0208 	add.w	r2, r3, #8
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	3310      	adds	r3, #16
 8007e62:	4619      	mov	r1, r3
 8007e64:	4610      	mov	r0, r2
 8007e66:	f7fb f9fb 	bl	8003260 <_ZN3can7signals31SensorF_OD_EncoderWheelDiameter3getERKyS3_>
 8007e6a:	eef0 7a40 	vmov.f32	s15, s0
        }
 8007e6e:	eeb0 0a67 	vmov.f32	s0, s15
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals31SensorF_OD_EncoderResetPositionEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b082      	sub	sp, #8
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f103 0208 	add.w	r2, r3, #8
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	3310      	adds	r3, #16
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	4610      	mov	r0, r2
 8007e8e:	f7fb f963 	bl	8003158 <_ZN3can7signals31SensorF_OD_EncoderResetPosition3getERKyS3_>
 8007e92:	4603      	mov	r3, r0
        }
 8007e94:	4618      	mov	r0, r3
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <_ZN3can7MessageINS_8messages18SensorF_SDO_Req_UpEE3getINS_7signals19SensorF_OD_SetResetEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b082      	sub	sp, #8
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f103 0208 	add.w	r2, r3, #8
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	3310      	adds	r3, #16
 8007eae:	4619      	mov	r1, r3
 8007eb0:	4610      	mov	r0, r2
 8007eb2:	f7fa fbd1 	bl	8002658 <_ZN3can7signals19SensorF_OD_SetReset3getERKyS3_>
 8007eb6:	4603      	mov	r3, r0
        }
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <_Z41__static_initialization_and_destruction_0ii>:
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	f040 816e 	bne.w	80081ae <_Z41__static_initialization_and_destruction_0ii+0x2ee>
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	f040 8168 	bne.w	80081ae <_Z41__static_initialization_and_destruction_0ii+0x2ee>
osMutexId_t mutex_OD_NodeID                   = osMutexNew(NULL);
 8007ede:	2000      	movs	r0, #0
 8007ee0:	f008 fb75 	bl	80105ce <osMutexNew>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	4ab4      	ldr	r2, [pc, #720]	; (80081b8 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8007ee8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_NodeStatus               = osMutexNew(NULL);
 8007eea:	2000      	movs	r0, #0
 8007eec:	f008 fb6f 	bl	80105ce <osMutexNew>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	4ab2      	ldr	r2, [pc, #712]	; (80081bc <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8007ef4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ProtocolVersion          = osMutexNew(NULL);
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	f008 fb69 	bl	80105ce <osMutexNew>
 8007efc:	4603      	mov	r3, r0
 8007efe:	4ab0      	ldr	r2, [pc, #704]	; (80081c0 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8007f00:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StackVersion             = osMutexNew(NULL);
 8007f02:	2000      	movs	r0, #0
 8007f04:	f008 fb63 	bl	80105ce <osMutexNew>
 8007f08:	4603      	mov	r3, r0
 8007f0a:	4aae      	ldr	r2, [pc, #696]	; (80081c4 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8007f0c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_DbcVersion               = osMutexNew(NULL);
 8007f0e:	2000      	movs	r0, #0
 8007f10:	f008 fb5d 	bl	80105ce <osMutexNew>
 8007f14:	4603      	mov	r3, r0
 8007f16:	4aac      	ldr	r2, [pc, #688]	; (80081c8 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8007f18:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HeartbeatInterval        = osMutexNew(NULL);
 8007f1a:	2000      	movs	r0, #0
 8007f1c:	f008 fb57 	bl	80105ce <osMutexNew>
 8007f20:	4603      	mov	r3, r0
 8007f22:	4aaa      	ldr	r2, [pc, #680]	; (80081cc <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8007f24:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SendOdOnBootup           = osMutexNew(NULL);
 8007f26:	2000      	movs	r0, #0
 8007f28:	f008 fb51 	bl	80105ce <osMutexNew>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	4aa8      	ldr	r2, [pc, #672]	; (80081d0 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8007f30:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_OdEntrySendInterval      = osMutexNew(NULL);
 8007f32:	2000      	movs	r0, #0
 8007f34:	f008 fb4b 	bl	80105ce <osMutexNew>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	4aa6      	ldr	r2, [pc, #664]	; (80081d4 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8007f3c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CpuUsage                 = osMutexNew(NULL);
 8007f3e:	2000      	movs	r0, #0
 8007f40:	f008 fb45 	bl	80105ce <osMutexNew>
 8007f44:	4603      	mov	r3, r0
 8007f46:	4aa4      	ldr	r2, [pc, #656]	; (80081d8 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8007f48:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_MemFree                  = osMutexNew(NULL);
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	f008 fb3f 	bl	80105ce <osMutexNew>
 8007f50:	4603      	mov	r3, r0
 8007f52:	4aa2      	ldr	r2, [pc, #648]	; (80081dc <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8007f54:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BoardTemp                = osMutexNew(NULL);
 8007f56:	2000      	movs	r0, #0
 8007f58:	f008 fb39 	bl	80105ce <osMutexNew>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	4aa0      	ldr	r2, [pc, #640]	; (80081e0 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8007f60:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_InputVoltage             = osMutexNew(NULL);
 8007f62:	2000      	movs	r0, #0
 8007f64:	f008 fb33 	bl	80105ce <osMutexNew>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	4a9e      	ldr	r2, [pc, #632]	; (80081e4 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8007f6c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_runtime                  = osMutexNew(NULL);
 8007f6e:	2000      	movs	r0, #0
 8007f70:	f008 fb2d 	bl	80105ce <osMutexNew>
 8007f74:	4603      	mov	r3, r0
 8007f76:	4a9c      	ldr	r2, [pc, #624]	; (80081e8 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8007f78:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcIn                    = osMutexNew(NULL);
 8007f7a:	2000      	movs	r0, #0
 8007f7c:	f008 fb27 	bl	80105ce <osMutexNew>
 8007f80:	4603      	mov	r3, r0
 8007f82:	4a9a      	ldr	r2, [pc, #616]	; (80081ec <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8007f84:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcOut                   = osMutexNew(NULL);
 8007f86:	2000      	movs	r0, #0
 8007f88:	f008 fb21 	bl	80105ce <osMutexNew>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	4a98      	ldr	r2, [pc, #608]	; (80081f0 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8007f90:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID1                 = osMutexNew(NULL);
 8007f92:	2000      	movs	r0, #0
 8007f94:	f008 fb1b 	bl	80105ce <osMutexNew>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	4a96      	ldr	r2, [pc, #600]	; (80081f4 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8007f9c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID2                 = osMutexNew(NULL);
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	f008 fb15 	bl	80105ce <osMutexNew>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	4a94      	ldr	r2, [pc, #592]	; (80081f8 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8007fa8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildDate                = osMutexNew(NULL);
 8007faa:	2000      	movs	r0, #0
 8007fac:	f008 fb0f 	bl	80105ce <osMutexNew>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	4a92      	ldr	r2, [pc, #584]	; (80081fc <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8007fb4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildTime                = osMutexNew(NULL);
 8007fb6:	2000      	movs	r0, #0
 8007fb8:	f008 fb09 	bl	80105ce <osMutexNew>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	4a90      	ldr	r2, [pc, #576]	; (8008200 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8007fc0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_TxErrCnt            = osMutexNew(NULL);
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	f008 fb03 	bl	80105ce <osMutexNew>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	4a8e      	ldr	r2, [pc, #568]	; (8008204 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8007fcc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_RxErrCnt            = osMutexNew(NULL);
 8007fce:	2000      	movs	r0, #0
 8007fd0:	f008 fafd 	bl	80105ce <osMutexNew>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	4a8c      	ldr	r2, [pc, #560]	; (8008208 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8007fd8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_lastErrorCode       = osMutexNew(NULL);
 8007fda:	2000      	movs	r0, #0
 8007fdc:	f008 faf7 	bl	80105ce <osMutexNew>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	4a8a      	ldr	r2, [pc, #552]	; (800820c <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8007fe4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_autoErrorReset      = osMutexNew(NULL);
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	f008 faf1 	bl	80105ce <osMutexNew>
 8007fec:	4603      	mov	r3, r0
 8007fee:	4a88      	ldr	r2, [pc, #544]	; (8008210 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8007ff0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Baudrate            = osMutexNew(NULL);
 8007ff2:	2000      	movs	r0, #0
 8007ff4:	f008 faeb 	bl	80105ce <osMutexNew>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	4a86      	ldr	r2, [pc, #536]	; (8008214 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8007ffc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Status              = osMutexNew(NULL);
 8007ffe:	2000      	movs	r0, #0
 8008000:	f008 fae5 	bl	80105ce <osMutexNew>
 8008004:	4603      	mov	r3, r0
 8008006:	4a84      	ldr	r2, [pc, #528]	; (8008218 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8008008:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DiscardedTxMessages = osMutexNew(NULL);
 800800a:	2000      	movs	r0, #0
 800800c:	f008 fadf 	bl	80105ce <osMutexNew>
 8008010:	4603      	mov	r3, r0
 8008012:	4a82      	ldr	r2, [pc, #520]	; (800821c <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8008014:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_ErrorStatus         = osMutexNew(NULL);
 8008016:	2000      	movs	r0, #0
 8008018:	f008 fad9 	bl	80105ce <osMutexNew>
 800801c:	4603      	mov	r3, r0
 800801e:	4a80      	ldr	r2, [pc, #512]	; (8008220 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8008020:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DelayedTxMessages   = osMutexNew(NULL);
 8008022:	2000      	movs	r0, #0
 8008024:	f008 fad3 	bl	80105ce <osMutexNew>
 8008028:	4603      	mov	r3, r0
 800802a:	4a7e      	ldr	r2, [pc, #504]	; (8008224 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 800802c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_TxErrCnt            = osMutexNew(NULL);
 800802e:	2000      	movs	r0, #0
 8008030:	f008 facd 	bl	80105ce <osMutexNew>
 8008034:	4603      	mov	r3, r0
 8008036:	4a7c      	ldr	r2, [pc, #496]	; (8008228 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8008038:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_RxErrCnt            = osMutexNew(NULL);
 800803a:	2000      	movs	r0, #0
 800803c:	f008 fac7 	bl	80105ce <osMutexNew>
 8008040:	4603      	mov	r3, r0
 8008042:	4a7a      	ldr	r2, [pc, #488]	; (800822c <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8008044:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_lastErrorCode       = osMutexNew(NULL);
 8008046:	2000      	movs	r0, #0
 8008048:	f008 fac1 	bl	80105ce <osMutexNew>
 800804c:	4603      	mov	r3, r0
 800804e:	4a78      	ldr	r2, [pc, #480]	; (8008230 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8008050:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_autoErrorReset      = osMutexNew(NULL);
 8008052:	2000      	movs	r0, #0
 8008054:	f008 fabb 	bl	80105ce <osMutexNew>
 8008058:	4603      	mov	r3, r0
 800805a:	4a76      	ldr	r2, [pc, #472]	; (8008234 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 800805c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Baudrate            = osMutexNew(NULL);
 800805e:	2000      	movs	r0, #0
 8008060:	f008 fab5 	bl	80105ce <osMutexNew>
 8008064:	4603      	mov	r3, r0
 8008066:	4a74      	ldr	r2, [pc, #464]	; (8008238 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8008068:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Status              = osMutexNew(NULL);
 800806a:	2000      	movs	r0, #0
 800806c:	f008 faaf 	bl	80105ce <osMutexNew>
 8008070:	4603      	mov	r3, r0
 8008072:	4a72      	ldr	r2, [pc, #456]	; (800823c <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8008074:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DiscardedTxMessages = osMutexNew(NULL);
 8008076:	2000      	movs	r0, #0
 8008078:	f008 faa9 	bl	80105ce <osMutexNew>
 800807c:	4603      	mov	r3, r0
 800807e:	4a70      	ldr	r2, [pc, #448]	; (8008240 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8008080:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_ErrorStatus         = osMutexNew(NULL);
 8008082:	2000      	movs	r0, #0
 8008084:	f008 faa3 	bl	80105ce <osMutexNew>
 8008088:	4603      	mov	r3, r0
 800808a:	4a6e      	ldr	r2, [pc, #440]	; (8008244 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800808c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DelayedTxMessages   = osMutexNew(NULL);
 800808e:	2000      	movs	r0, #0
 8008090:	f008 fa9d 	bl	80105ce <osMutexNew>
 8008094:	4603      	mov	r3, r0
 8008096:	4a6c      	ldr	r2, [pc, #432]	; (8008248 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8008098:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_samplingInterval         = osMutexNew(NULL);
 800809a:	2000      	movs	r0, #0
 800809c:	f008 fa97 	bl	80105ce <osMutexNew>
 80080a0:	4603      	mov	r3, r0
 80080a2:	4a6a      	ldr	r2, [pc, #424]	; (800824c <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 80080a4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_TelemetryCommands        = osMutexNew(NULL);
 80080a6:	2000      	movs	r0, #0
 80080a8:	f008 fa91 	bl	80105ce <osMutexNew>
 80080ac:	4603      	mov	r3, r0
 80080ae:	4a68      	ldr	r2, [pc, #416]	; (8008250 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 80080b0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StateMachineInterval     = osMutexNew(NULL);
 80080b2:	2000      	movs	r0, #0
 80080b4:	f008 fa8b 	bl	80105ce <osMutexNew>
 80080b8:	4603      	mov	r3, r0
 80080ba:	4a66      	ldr	r2, [pc, #408]	; (8008254 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 80080bc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StateMachineActivate     = osMutexNew(NULL);
 80080be:	2000      	movs	r0, #0
 80080c0:	f008 fa85 	bl	80105ce <osMutexNew>
 80080c4:	4603      	mov	r3, r0
 80080c6:	4a64      	ldr	r2, [pc, #400]	; (8008258 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 80080c8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HVBatteryMode            = osMutexNew(NULL);
 80080ca:	2000      	movs	r0, #0
 80080cc:	f008 fa7f 	bl	80105ce <osMutexNew>
 80080d0:	4603      	mov	r3, r0
 80080d2:	4a62      	ldr	r2, [pc, #392]	; (800825c <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 80080d4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_EncoderWheelDiameter     = osMutexNew(NULL);
 80080d6:	2000      	movs	r0, #0
 80080d8:	f008 fa79 	bl	80105ce <osMutexNew>
 80080dc:	4603      	mov	r3, r0
 80080de:	4a60      	ldr	r2, [pc, #384]	; (8008260 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 80080e0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_EncoderResetPosition     = osMutexNew(NULL);
 80080e2:	2000      	movs	r0, #0
 80080e4:	f008 fa73 	bl	80105ce <osMutexNew>
 80080e8:	4603      	mov	r3, r0
 80080ea:	4a5e      	ldr	r2, [pc, #376]	; (8008264 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 80080ec:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SetReset                 = osMutexNew(NULL);
 80080ee:	2000      	movs	r0, #0
 80080f0:	f008 fa6d 	bl	80105ce <osMutexNew>
 80080f4:	4603      	mov	r3, r0
 80080f6:	4a5c      	ldr	r2, [pc, #368]	; (8008268 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 80080f8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_number               = osMutexNew(NULL);
 80080fa:	2000      	movs	r0, #0
 80080fc:	f008 fa67 	bl	80105ce <osMutexNew>
 8008100:	4603      	mov	r3, r0
 8008102:	4a5a      	ldr	r2, [pc, #360]	; (800826c <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8008104:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU1_Temperature         = osMutexNew(NULL);
 8008106:	2000      	movs	r0, #0
 8008108:	f008 fa61 	bl	80105ce <osMutexNew>
 800810c:	4603      	mov	r3, r0
 800810e:	4a58      	ldr	r2, [pc, #352]	; (8008270 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8008110:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU2_Temperature         = osMutexNew(NULL);
 8008112:	2000      	movs	r0, #0
 8008114:	f008 fa5b 	bl	80105ce <osMutexNew>
 8008118:	4603      	mov	r3, r0
 800811a:	4a56      	ldr	r2, [pc, #344]	; (8008274 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800811c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU3_Temperature         = osMutexNew(NULL);
 800811e:	2000      	movs	r0, #0
 8008120:	f008 fa55 	bl	80105ce <osMutexNew>
 8008124:	4603      	mov	r3, r0
 8008126:	4a54      	ldr	r2, [pc, #336]	; (8008278 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8008128:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_AccelX               = osMutexNew(NULL);
 800812a:	2000      	movs	r0, #0
 800812c:	f008 fa4f 	bl	80105ce <osMutexNew>
 8008130:	4603      	mov	r3, r0
 8008132:	4a52      	ldr	r2, [pc, #328]	; (800827c <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8008134:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_AccelY               = osMutexNew(NULL);
 8008136:	2000      	movs	r0, #0
 8008138:	f008 fa49 	bl	80105ce <osMutexNew>
 800813c:	4603      	mov	r3, r0
 800813e:	4a50      	ldr	r2, [pc, #320]	; (8008280 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8008140:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_AccelZ               = osMutexNew(NULL);
 8008142:	2000      	movs	r0, #0
 8008144:	f008 fa43 	bl	80105ce <osMutexNew>
 8008148:	4603      	mov	r3, r0
 800814a:	4a4e      	ldr	r2, [pc, #312]	; (8008284 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 800814c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_GyroX                = osMutexNew(NULL);
 800814e:	2000      	movs	r0, #0
 8008150:	f008 fa3d 	bl	80105ce <osMutexNew>
 8008154:	4603      	mov	r3, r0
 8008156:	4a4c      	ldr	r2, [pc, #304]	; (8008288 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 8008158:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_GyroY                = osMutexNew(NULL);
 800815a:	2000      	movs	r0, #0
 800815c:	f008 fa37 	bl	80105ce <osMutexNew>
 8008160:	4603      	mov	r3, r0
 8008162:	4a4a      	ldr	r2, [pc, #296]	; (800828c <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8008164:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_GyroZ                = osMutexNew(NULL);
 8008166:	2000      	movs	r0, #0
 8008168:	f008 fa31 	bl	80105ce <osMutexNew>
 800816c:	4603      	mov	r3, r0
 800816e:	4a48      	ldr	r2, [pc, #288]	; (8008290 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8008170:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CoolingPressure          = osMutexNew(NULL);
 8008172:	2000      	movs	r0, #0
 8008174:	f008 fa2b 	bl	80105ce <osMutexNew>
 8008178:	4603      	mov	r3, r0
 800817a:	4a46      	ldr	r2, [pc, #280]	; (8008294 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 800817c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_FiducialRightCounter     = osMutexNew(NULL);
 800817e:	2000      	movs	r0, #0
 8008180:	f008 fa25 	bl	80105ce <osMutexNew>
 8008184:	4603      	mov	r3, r0
 8008186:	4a44      	ldr	r2, [pc, #272]	; (8008298 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8008188:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_FiducialLeftCounter      = osMutexNew(NULL);
 800818a:	2000      	movs	r0, #0
 800818c:	f008 fa1f 	bl	80105ce <osMutexNew>
 8008190:	4603      	mov	r3, r0
 8008192:	4a42      	ldr	r2, [pc, #264]	; (800829c <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8008194:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_Position                 = osMutexNew(NULL);
 8008196:	2000      	movs	r0, #0
 8008198:	f008 fa19 	bl	80105ce <osMutexNew>
 800819c:	4603      	mov	r3, r0
 800819e:	4a40      	ldr	r2, [pc, #256]	; (80082a0 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 80081a0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_Velocity                 = osMutexNew(NULL);
 80081a2:	2000      	movs	r0, #0
 80081a4:	f008 fa13 	bl	80105ce <osMutexNew>
 80081a8:	4603      	mov	r3, r0
 80081aa:	4a3e      	ldr	r2, [pc, #248]	; (80082a4 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 80081ac:	6013      	str	r3, [r2, #0]
 80081ae:	bf00      	nop
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	20000860 	.word	0x20000860
 80081bc:	20000864 	.word	0x20000864
 80081c0:	20000868 	.word	0x20000868
 80081c4:	2000086c 	.word	0x2000086c
 80081c8:	20000870 	.word	0x20000870
 80081cc:	20000874 	.word	0x20000874
 80081d0:	20000878 	.word	0x20000878
 80081d4:	2000087c 	.word	0x2000087c
 80081d8:	20000880 	.word	0x20000880
 80081dc:	20000884 	.word	0x20000884
 80081e0:	20000888 	.word	0x20000888
 80081e4:	2000088c 	.word	0x2000088c
 80081e8:	20000890 	.word	0x20000890
 80081ec:	20000894 	.word	0x20000894
 80081f0:	20000898 	.word	0x20000898
 80081f4:	2000089c 	.word	0x2000089c
 80081f8:	200008a0 	.word	0x200008a0
 80081fc:	200008a4 	.word	0x200008a4
 8008200:	200008a8 	.word	0x200008a8
 8008204:	200008ac 	.word	0x200008ac
 8008208:	200008b0 	.word	0x200008b0
 800820c:	200008b4 	.word	0x200008b4
 8008210:	200008b8 	.word	0x200008b8
 8008214:	200008bc 	.word	0x200008bc
 8008218:	200008c0 	.word	0x200008c0
 800821c:	200008c4 	.word	0x200008c4
 8008220:	200008c8 	.word	0x200008c8
 8008224:	200008cc 	.word	0x200008cc
 8008228:	200008d0 	.word	0x200008d0
 800822c:	200008d4 	.word	0x200008d4
 8008230:	200008d8 	.word	0x200008d8
 8008234:	200008dc 	.word	0x200008dc
 8008238:	200008e0 	.word	0x200008e0
 800823c:	200008e4 	.word	0x200008e4
 8008240:	200008e8 	.word	0x200008e8
 8008244:	200008ec 	.word	0x200008ec
 8008248:	200008f0 	.word	0x200008f0
 800824c:	200008f4 	.word	0x200008f4
 8008250:	200008f8 	.word	0x200008f8
 8008254:	200008fc 	.word	0x200008fc
 8008258:	20000900 	.word	0x20000900
 800825c:	20000904 	.word	0x20000904
 8008260:	20000908 	.word	0x20000908
 8008264:	2000090c 	.word	0x2000090c
 8008268:	20000910 	.word	0x20000910
 800826c:	20000914 	.word	0x20000914
 8008270:	20000918 	.word	0x20000918
 8008274:	2000091c 	.word	0x2000091c
 8008278:	20000920 	.word	0x20000920
 800827c:	20000924 	.word	0x20000924
 8008280:	20000928 	.word	0x20000928
 8008284:	2000092c 	.word	0x2000092c
 8008288:	20000930 	.word	0x20000930
 800828c:	20000934 	.word	0x20000934
 8008290:	20000938 	.word	0x20000938
 8008294:	2000093c 	.word	0x2000093c
 8008298:	20000940 	.word	0x20000940
 800829c:	20000944 	.word	0x20000944
 80082a0:	20000948 	.word	0x20000948
 80082a4:	2000094c 	.word	0x2000094c

080082a8 <_GLOBAL__sub_I_OD_NodeID>:
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80082b0:	2001      	movs	r0, #1
 80082b2:	f7ff fe05 	bl	8007ec0 <_Z41__static_initialization_and_destruction_0ii>
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	4618      	mov	r0, r3
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4618      	mov	r0, r3
 80082dc:	370c      	adds	r7, #12
 80082de:	46bd      	mov	sp, r7
 80082e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e4:	4770      	bx	lr

080082e6 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80082e6:	b480      	push	{r7}
 80082e8:	b083      	sub	sp, #12
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4618      	mov	r0, r3
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <_ZNSt8functionIFvtEED1Ev>:
    class function<_Res(_ArgTypes...)>
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4618      	mov	r0, r3
 8008308:	f7f9 f850 	bl	80013ac <_ZNSt14_Function_baseD1Ev>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4618      	mov	r0, r3
 8008310:	3708      	adds	r7, #8
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <_ZN23GPIOExtiCallbackHandlerC1Ev>:
			m_listeners[i](pin);
		}
	}

private:
	GPIOExtiCallbackHandler() = default;
 8008316:	b5b0      	push	{r4, r5, r7, lr}
 8008318:	b082      	sub	sp, #8
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	240f      	movs	r4, #15
 8008322:	461d      	mov	r5, r3
 8008324:	2c00      	cmp	r4, #0
 8008326:	db05      	blt.n	8008334 <_ZN23GPIOExtiCallbackHandlerC1Ev+0x1e>
 8008328:	4628      	mov	r0, r5
 800832a:	f000 f8cb 	bl	80084c4 <_ZNSt8functionIFvtEEC1Ev>
 800832e:	3510      	adds	r5, #16
 8008330:	3c01      	subs	r4, #1
 8008332:	e7f7      	b.n	8008324 <_ZN23GPIOExtiCallbackHandlerC1Ev+0xe>
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bdb0      	pop	{r4, r5, r7, pc}

08008346 <_ZN23GPIOExtiCallbackHandlerD1Ev>:
class GPIOExtiCallbackHandler {
 8008346:	b590      	push	{r4, r7, lr}
 8008348:	b083      	sub	sp, #12
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d00a      	beq.n	800836a <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	429c      	cmp	r4, r3
 800835e:	d004      	beq.n	800836a <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 8008360:	3c10      	subs	r4, #16
 8008362:	4620      	mov	r0, r4
 8008364:	f7ff ffca 	bl	80082fc <_ZNSt8functionIFvtEED1Ev>
 8008368:	e7f7      	b.n	800835a <_ZN23GPIOExtiCallbackHandlerD1Ev+0x14>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4618      	mov	r0, r3
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	bd90      	pop	{r4, r7, pc}

08008374 <__tcf_0>:
		static GPIOExtiCallbackHandler instance;
 8008374:	b580      	push	{r7, lr}
 8008376:	af00      	add	r7, sp, #0
 8008378:	4801      	ldr	r0, [pc, #4]	; (8008380 <__tcf_0+0xc>)
 800837a:	f7ff ffe4 	bl	8008346 <_ZN23GPIOExtiCallbackHandlerD1Ev>
 800837e:	bd80      	pop	{r7, pc}
 8008380:	20000950 	.word	0x20000950

08008384 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>:
	static GPIOExtiCallbackHandler& getInstance() {
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0
		static GPIOExtiCallbackHandler instance;
 8008388:	4b12      	ldr	r3, [pc, #72]	; (80083d4 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	f3bf 8f5b 	dmb	ish
 8008390:	b2db      	uxtb	r3, r3
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	2b00      	cmp	r3, #0
 8008398:	bf0c      	ite	eq
 800839a:	2301      	moveq	r3, #1
 800839c:	2300      	movne	r3, #0
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d013      	beq.n	80083cc <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 80083a4:	480b      	ldr	r0, [pc, #44]	; (80083d4 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 80083a6:	f00c f89d 	bl	80144e4 <__cxa_guard_acquire>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	bf14      	ite	ne
 80083b0:	2301      	movne	r3, #1
 80083b2:	2300      	moveq	r3, #0
 80083b4:	b2db      	uxtb	r3, r3
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d008      	beq.n	80083cc <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 80083ba:	4807      	ldr	r0, [pc, #28]	; (80083d8 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
 80083bc:	f7ff ffab 	bl	8008316 <_ZN23GPIOExtiCallbackHandlerC1Ev>
 80083c0:	4806      	ldr	r0, [pc, #24]	; (80083dc <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x58>)
 80083c2:	f00c f8cc 	bl	801455e <atexit>
 80083c6:	4803      	ldr	r0, [pc, #12]	; (80083d4 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 80083c8:	f00c f898 	bl	80144fc <__cxa_guard_release>
		return instance;
 80083cc:	4b02      	ldr	r3, [pc, #8]	; (80083d8 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
	}
 80083ce:	4618      	mov	r0, r3
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	20000a54 	.word	0x20000a54
 80083d8:	20000950 	.word	0x20000950
 80083dc:	08008375 	.word	0x08008375

080083e0 <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>:
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b082      	sub	sp, #8
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7f8 ffde 	bl	80013ac <_ZNSt14_Function_baseD1Ev>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4618      	mov	r0, r3
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <_ZN31TimPeriodElapsedCallbackHandlerC1Ev>:
			m_listeners[i](htim);
		}
	}

private:
	TimPeriodElapsedCallbackHandler() = default;
 80083fa:	b5b0      	push	{r4, r5, r7, lr}
 80083fc:	b082      	sub	sp, #8
 80083fe:	af00      	add	r7, sp, #0
 8008400:	6078      	str	r0, [r7, #4]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	240f      	movs	r4, #15
 8008406:	461d      	mov	r5, r3
 8008408:	2c00      	cmp	r4, #0
 800840a:	db05      	blt.n	8008418 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev+0x1e>
 800840c:	4628      	mov	r0, r5
 800840e:	f000 f866 	bl	80084de <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1Ev>
 8008412:	3510      	adds	r5, #16
 8008414:	3c01      	subs	r4, #1
 8008416:	e7f7      	b.n	8008408 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev+0xe>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	4618      	mov	r0, r3
 8008424:	3708      	adds	r7, #8
 8008426:	46bd      	mov	sp, r7
 8008428:	bdb0      	pop	{r4, r5, r7, pc}

0800842a <_ZN31TimPeriodElapsedCallbackHandlerD1Ev>:
class TimPeriodElapsedCallbackHandler {
 800842a:	b590      	push	{r4, r7, lr}
 800842c:	b083      	sub	sp, #12
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d00a      	beq.n	800844e <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x24>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	f503 7480 	add.w	r4, r3, #256	; 0x100
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	429c      	cmp	r4, r3
 8008442:	d004      	beq.n	800844e <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x24>
 8008444:	3c10      	subs	r4, #16
 8008446:	4620      	mov	r0, r4
 8008448:	f7ff ffca 	bl	80083e0 <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>
 800844c:	e7f7      	b.n	800843e <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x14>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4618      	mov	r0, r3
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	bd90      	pop	{r4, r7, pc}

08008458 <__tcf_1>:
		static TimPeriodElapsedCallbackHandler instance;
 8008458:	b580      	push	{r7, lr}
 800845a:	af00      	add	r7, sp, #0
 800845c:	4801      	ldr	r0, [pc, #4]	; (8008464 <__tcf_1+0xc>)
 800845e:	f7ff ffe4 	bl	800842a <_ZN31TimPeriodElapsedCallbackHandlerD1Ev>
 8008462:	bd80      	pop	{r7, pc}
 8008464:	20000a58 	.word	0x20000a58

08008468 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv>:
	static TimPeriodElapsedCallbackHandler& getInstance() {
 8008468:	b580      	push	{r7, lr}
 800846a:	af00      	add	r7, sp, #0
		static TimPeriodElapsedCallbackHandler instance;
 800846c:	4b12      	ldr	r3, [pc, #72]	; (80084b8 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	f3bf 8f5b 	dmb	ish
 8008474:	b2db      	uxtb	r3, r3
 8008476:	f003 0301 	and.w	r3, r3, #1
 800847a:	2b00      	cmp	r3, #0
 800847c:	bf0c      	ite	eq
 800847e:	2301      	moveq	r3, #1
 8008480:	2300      	movne	r3, #0
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b00      	cmp	r3, #0
 8008486:	d013      	beq.n	80084b0 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x48>
 8008488:	480b      	ldr	r0, [pc, #44]	; (80084b8 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 800848a:	f00c f82b 	bl	80144e4 <__cxa_guard_acquire>
 800848e:	4603      	mov	r3, r0
 8008490:	2b00      	cmp	r3, #0
 8008492:	bf14      	ite	ne
 8008494:	2301      	movne	r3, #1
 8008496:	2300      	moveq	r3, #0
 8008498:	b2db      	uxtb	r3, r3
 800849a:	2b00      	cmp	r3, #0
 800849c:	d008      	beq.n	80084b0 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x48>
 800849e:	4807      	ldr	r0, [pc, #28]	; (80084bc <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x54>)
 80084a0:	f7ff ffab 	bl	80083fa <_ZN31TimPeriodElapsedCallbackHandlerC1Ev>
 80084a4:	4806      	ldr	r0, [pc, #24]	; (80084c0 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x58>)
 80084a6:	f00c f85a 	bl	801455e <atexit>
 80084aa:	4803      	ldr	r0, [pc, #12]	; (80084b8 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 80084ac:	f00c f826 	bl	80144fc <__cxa_guard_release>
		return instance;
 80084b0:	4b02      	ldr	r3, [pc, #8]	; (80084bc <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x54>)
	}
 80084b2:	4618      	mov	r0, r3
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	20000b5c 	.word	0x20000b5c
 80084bc:	20000a58 	.word	0x20000a58
 80084c0:	08008459 	.word	0x08008459

080084c4 <_ZNSt8functionIFvtEEC1Ev>:
      function() noexcept
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b082      	sub	sp, #8
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7f8 ff5e 	bl	8001390 <_ZNSt14_Function_baseC1Ev>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	4618      	mov	r0, r3
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1Ev>:
      function() noexcept
 80084de:	b580      	push	{r7, lr}
 80084e0:	b082      	sub	sp, #8
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7f8 ff51 	bl	8001390 <_ZNSt14_Function_baseC1Ev>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4618      	mov	r0, r3
 80084f2:	3708      	adds	r7, #8
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bd80      	pop	{r7, pc}

080084f8 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4618      	mov	r0, r3
 8008504:	370c      	adds	r7, #12
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800850e:	b480      	push	{r7}
 8008510:	b083      	sub	sp, #12
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4618      	mov	r0, r3
 800851a:	370c      	adds	r7, #12
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <_ZN5bms4418bms_frame_fragmentC1ER9RxMessage>:
	uint16_t m_hours_to_full_charge;
	uint8_t m_reset[50];
};

struct bms_frame_fragment {
	explicit bms_frame_fragment(RxMessage& raw){
 8008524:	b480      	push	{r7}
 8008526:	b087      	sub	sp, #28
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
		uint32_t size = raw.rxHeader.DLC;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	613b      	str	r3, [r7, #16]
		m_size = size - 1;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	1e5a      	subs	r2, r3, #1
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	601a      	str	r2, [r3, #0]
		for(size_t i=0;i<m_size;i++){
 800853c:	2300      	movs	r3, #0
 800853e:	617b      	str	r3, [r7, #20]
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	429a      	cmp	r2, r3
 8008548:	d20e      	bcs.n	8008568 <_ZN5bms4418bms_frame_fragmentC1ER9RxMessage+0x44>
			m_payload[i] = raw.rxBuf[i];
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	4413      	add	r3, r2
 8008550:	331c      	adds	r3, #28
 8008552:	7819      	ldrb	r1, [r3, #0]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	4413      	add	r3, r2
 800855a:	3304      	adds	r3, #4
 800855c:	460a      	mov	r2, r1
 800855e:	701a      	strb	r2, [r3, #0]
		for(size_t i=0;i<m_size;i++){
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	3301      	adds	r3, #1
 8008564:	617b      	str	r3, [r7, #20]
 8008566:	e7eb      	b.n	8008540 <_ZN5bms4418bms_frame_fragmentC1ER9RxMessage+0x1c>
		}
		uint8_t tailByte = raw.rxBuf[m_size];
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	683a      	ldr	r2, [r7, #0]
 800856e:	4413      	add	r3, r2
 8008570:	7f1b      	ldrb	r3, [r3, #28]
 8008572:	73fb      	strb	r3, [r7, #15]
		m_sofFlag = tailByte & SOF_MASK;
 8008574:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008578:	b2db      	uxtb	r3, r3
 800857a:	09db      	lsrs	r3, r3, #7
 800857c:	b2da      	uxtb	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	72da      	strb	r2, [r3, #11]
		m_eofFlag = tailByte & EOF_MASK;
 8008582:	7bfb      	ldrb	r3, [r7, #15]
 8008584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008588:	2b00      	cmp	r3, #0
 800858a:	bf14      	ite	ne
 800858c:	2301      	movne	r3, #1
 800858e:	2300      	moveq	r3, #0
 8008590:	b2da      	uxtb	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	731a      	strb	r2, [r3, #12]
		m_toggleFlag = tailByte & TOGGLE_MASK;
 8008596:	7bfb      	ldrb	r3, [r7, #15]
 8008598:	f003 0320 	and.w	r3, r3, #32
 800859c:	2b00      	cmp	r3, #0
 800859e:	bf14      	ite	ne
 80085a0:	2301      	movne	r3, #1
 80085a2:	2300      	moveq	r3, #0
 80085a4:	b2da      	uxtb	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	735a      	strb	r2, [r3, #13]
		m_transferId = tailByte & TRANSFER_MASK;
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
 80085ac:	f003 031f 	and.w	r3, r3, #31
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	739a      	strb	r2, [r3, #14]
	}
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	4618      	mov	r0, r3
 80085ba:	371c      	adds	r7, #28
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr

080085c4 <_ZNK5bms4418bms_frame_fragment4sizeEv>:

	uint32_t size() const{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
		return m_size;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
	}
 80085d0:	4618      	mov	r0, r3
 80085d2:	370c      	adds	r7, #12
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr

080085dc <_ZNK5bms4418bms_frame_fragmentixEm>:

	uint8_t operator[](uint32_t idx) const{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
		return m_payload[idx];
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	4413      	add	r3, r2
 80085ec:	3304      	adds	r3, #4
 80085ee:	781b      	ldrb	r3, [r3, #0]
	}
 80085f0:	4618      	mov	r0, r3
 80085f2:	370c      	adds	r7, #12
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr

080085fc <_ZNK5bms4418bms_frame_fragment7sofFlagEv>:

	bool sofFlag() const{
 80085fc:	b480      	push	{r7}
 80085fe:	b083      	sub	sp, #12
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
		return m_sofFlag;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	7adb      	ldrb	r3, [r3, #11]
	}
 8008608:	4618      	mov	r0, r3
 800860a:	370c      	adds	r7, #12
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <_ZNK5bms4418bms_frame_fragment7eofFlagEv>:

	bool eofFlag() const {
 8008614:	b480      	push	{r7}
 8008616:	b083      	sub	sp, #12
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
		return m_eofFlag;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	7b1b      	ldrb	r3, [r3, #12]
	}
 8008620:	4618      	mov	r0, r3
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <_ZNK5bms4418bms_frame_fragment10toggleFlagEv>:

	bool toggleFlag()const {
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
		return m_toggleFlag;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	7b5b      	ldrb	r3, [r3, #13]
	}
 8008638:	4618      	mov	r0, r3
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <_ZN5bms4417bms_frame_builder15append_fragmentERKNS_18bms_frame_fragmentE>:
	uint8_t m_transferId;

};

struct bms_frame_builder {
	void append_fragment(const bms_frame_fragment& fragment){
 8008644:	b590      	push	{r4, r7, lr}
 8008646:	b085      	sub	sp, #20
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
		if(m_empty){ //expect sof.
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	791b      	ldrb	r3, [r3, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d01b      	beq.n	800868e <_ZN5bms4417bms_frame_builder15append_fragmentERKNS_18bms_frame_fragmentE+0x4a>
			if(not fragment.sofFlag()){
 8008656:	6838      	ldr	r0, [r7, #0]
 8008658:	f7ff ffd0 	bl	80085fc <_ZNK5bms4418bms_frame_fragment7sofFlagEv>
 800865c:	4603      	mov	r3, r0
 800865e:	f083 0301 	eor.w	r3, r3, #1
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b00      	cmp	r3, #0
 8008666:	d006      	beq.n	8008676 <_ZN5bms4417bms_frame_builder15append_fragmentERKNS_18bms_frame_fragmentE+0x32>
				printf("ERROR parsing BMS Frame: unexpected SOF Flag!\n");
 8008668:	482d      	ldr	r0, [pc, #180]	; (8008720 <_ZN5bms4417bms_frame_builder15append_fragmentERKNS_18bms_frame_fragmentE+0xdc>)
 800866a:	f007 fe1b 	bl	80102a4 <printf_>
				m_error = true;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	719a      	strb	r2, [r3, #6]
 8008674:	e00b      	b.n	800868e <_ZN5bms4417bms_frame_builder15append_fragmentERKNS_18bms_frame_fragmentE+0x4a>
			}else{
				m_empty = false;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	711a      	strb	r2, [r3, #4]
				m_error = false;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	719a      	strb	r2, [r3, #6]
				m_toggle = false;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	71da      	strb	r2, [r3, #7]
				m_end = 0;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2200      	movs	r2, #0
 800868c:	601a      	str	r2, [r3, #0]
			}
		}
		if(fragment.toggleFlag() != m_toggle){
 800868e:	6838      	ldr	r0, [r7, #0]
 8008690:	f7ff ffcc 	bl	800862c <_ZNK5bms4418bms_frame_fragment10toggleFlagEv>
 8008694:	4603      	mov	r3, r0
 8008696:	461a      	mov	r2, r3
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	79db      	ldrb	r3, [r3, #7]
 800869c:	429a      	cmp	r2, r3
 800869e:	bf14      	ite	ne
 80086a0:	2301      	movne	r3, #1
 80086a2:	2300      	moveq	r3, #0
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d005      	beq.n	80086b6 <_ZN5bms4417bms_frame_builder15append_fragmentERKNS_18bms_frame_fragmentE+0x72>
			printf("ERROR parsing BMS Frame: INVALID TOGGLE FLAG\n");
 80086aa:	481e      	ldr	r0, [pc, #120]	; (8008724 <_ZN5bms4417bms_frame_builder15append_fragmentERKNS_18bms_frame_fragmentE+0xe0>)
 80086ac:	f007 fdfa 	bl	80102a4 <printf_>
			m_error = true;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	719a      	strb	r2, [r3, #6]
		}

		//copy payload.
		for(size_t i=0;i<fragment.size();i++){
 80086b6:	2300      	movs	r3, #0
 80086b8:	60fb      	str	r3, [r7, #12]
 80086ba:	6838      	ldr	r0, [r7, #0]
 80086bc:	f7ff ff82 	bl	80085c4 <_ZNK5bms4418bms_frame_fragment4sizeEv>
 80086c0:	4602      	mov	r2, r0
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	4293      	cmp	r3, r2
 80086c6:	bf34      	ite	cc
 80086c8:	2301      	movcc	r3, #1
 80086ca:	2300      	movcs	r3, #0
 80086cc:	b2db      	uxtb	r3, r3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d011      	beq.n	80086f6 <_ZN5bms4417bms_frame_builder15append_fragmentERKNS_18bms_frame_fragmentE+0xb2>
			m_buffer[m_end++] = fragment[i];
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681c      	ldr	r4, [r3, #0]
 80086d6:	1c62      	adds	r2, r4, #1
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	601a      	str	r2, [r3, #0]
 80086dc:	68f9      	ldr	r1, [r7, #12]
 80086de:	6838      	ldr	r0, [r7, #0]
 80086e0:	f7ff ff7c 	bl	80085dc <_ZNK5bms4418bms_frame_fragmentixEm>
 80086e4:	4603      	mov	r3, r0
 80086e6:	461a      	mov	r2, r3
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4423      	add	r3, r4
 80086ec:	725a      	strb	r2, [r3, #9]
		for(size_t i=0;i<fragment.size();i++){
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3301      	adds	r3, #1
 80086f2:	60fb      	str	r3, [r7, #12]
 80086f4:	e7e1      	b.n	80086ba <_ZN5bms4417bms_frame_builder15append_fragmentERKNS_18bms_frame_fragmentE+0x76>
		}

		if(fragment.eofFlag()){
 80086f6:	6838      	ldr	r0, [r7, #0]
 80086f8:	f7ff ff8c 	bl	8008614 <_ZNK5bms4418bms_frame_fragment7eofFlagEv>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d002      	beq.n	8008708 <_ZN5bms4417bms_frame_builder15append_fragmentERKNS_18bms_frame_fragmentE+0xc4>
			m_complete = true;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	715a      	strb	r2, [r3, #5]
		}
		m_toggle = !m_toggle;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	79db      	ldrb	r3, [r3, #7]
 800870c:	f083 0301 	eor.w	r3, r3, #1
 8008710:	b2da      	uxtb	r2, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	71da      	strb	r2, [r3, #7]
	}
 8008716:	bf00      	nop
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	bd90      	pop	{r4, r7, pc}
 800871e:	bf00      	nop
 8008720:	0801734c 	.word	0x0801734c
 8008724:	0801737c 	.word	0x0801737c

08008728 <_ZN5bms4417bms_frame_builder10isCompleteEv>:
	bool isComplete(){
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
		return m_complete;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	795b      	ldrb	r3, [r3, #5]
	}
 8008734:	4618      	mov	r0, r3
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <_ZN5bms4417bms_frame_builder5resetEv>:

	bool reset(){
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
		m_empty = true;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2201      	movs	r2, #1
 800874c:	711a      	strb	r2, [r3, #4]
		m_complete = false;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	715a      	strb	r2, [r3, #5]
		m_end = 0;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2200      	movs	r2, #0
 8008758:	601a      	str	r2, [r3, #0]
		m_error = false;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2200      	movs	r2, #0
 800875e:	719a      	strb	r2, [r3, #6]
		m_toggle = false;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	71da      	strb	r2, [r3, #7]
	}
 8008766:	bf00      	nop
 8008768:	4618      	mov	r0, r3
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <_ZN5bms4417bms_frame_builder5buildEv>:

	bms_frame build(){
 8008774:	b580      	push	{r7, lr}
 8008776:	b082      	sub	sp, #8
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
		bms_frame frame = *(reinterpret_cast<bms_frame*>(m_buffer));
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	3309      	adds	r3, #9
 8008782:	687a      	ldr	r2, [r7, #4]
 8008784:	4610      	mov	r0, r2
 8008786:	4619      	mov	r1, r3
 8008788:	2342      	movs	r3, #66	; 0x42
 800878a:	461a      	mov	r2, r3
 800878c:	f00c f81a 	bl	80147c4 <memcpy>
		reset();
 8008790:	6838      	ldr	r0, [r7, #0]
 8008792:	f7ff ffd5 	bl	8008740 <_ZN5bms4417bms_frame_builder5resetEv>
		return frame;
 8008796:	bf00      	nop
	}
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <_ZN5bms4417bms_frame_builderC1Ev>:
struct bms_frame_builder {
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	601a      	str	r2, [r3, #0]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2201      	movs	r2, #1
 80087b2:	711a      	strb	r2, [r3, #4]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2200      	movs	r2, #0
 80087b8:	715a      	strb	r2, [r3, #5]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	719a      	strb	r2, [r3, #6]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	71da      	strb	r2, [r3, #7]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4618      	mov	r0, r3
 80087ca:	370c      	adds	r7, #12
 80087cc:	46bd      	mov	sp, r7
 80087ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d2:	4770      	bx	lr

080087d4 <_ZN5bms4416bmsFrameReceiverER9RxMessage>:
};

bms_frame_builder frame_builder;
bms_frame m_currentFrame;

void bmsFrameReceiver(RxMessage& raw){
 80087d4:	b590      	push	{r4, r7, lr}
 80087d6:	b099      	sub	sp, #100	; 0x64
 80087d8:	af00      	add	r7, sp, #0
 80087da:	64f8      	str	r0, [r7, #76]	; 0x4c
	bms_frame_fragment fragment(raw);
 80087dc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80087e0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80087e2:	4618      	mov	r0, r3
 80087e4:	f7ff fe9e 	bl	8008524 <_ZN5bms4418bms_frame_fragmentC1ER9RxMessage>
	frame_builder.append_fragment(fragment);
 80087e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80087ec:	4619      	mov	r1, r3
 80087ee:	480c      	ldr	r0, [pc, #48]	; (8008820 <_ZN5bms4416bmsFrameReceiverER9RxMessage+0x4c>)
 80087f0:	f7ff ff28 	bl	8008644 <_ZN5bms4417bms_frame_builder15append_fragmentERKNS_18bms_frame_fragmentE>
	if(frame_builder.isComplete()){
 80087f4:	480a      	ldr	r0, [pc, #40]	; (8008820 <_ZN5bms4416bmsFrameReceiverER9RxMessage+0x4c>)
 80087f6:	f7ff ff97 	bl	8008728 <_ZN5bms4417bms_frame_builder10isCompleteEv>
 80087fa:	4603      	mov	r3, r0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00b      	beq.n	8008818 <_ZN5bms4416bmsFrameReceiverER9RxMessage+0x44>
		m_currentFrame = frame_builder.build();
 8008800:	4c08      	ldr	r4, [pc, #32]	; (8008824 <_ZN5bms4416bmsFrameReceiverER9RxMessage+0x50>)
 8008802:	463b      	mov	r3, r7
 8008804:	4906      	ldr	r1, [pc, #24]	; (8008820 <_ZN5bms4416bmsFrameReceiverER9RxMessage+0x4c>)
 8008806:	4618      	mov	r0, r3
 8008808:	f7ff ffb4 	bl	8008774 <_ZN5bms4417bms_frame_builder5buildEv>
 800880c:	4620      	mov	r0, r4
 800880e:	463b      	mov	r3, r7
 8008810:	2242      	movs	r2, #66	; 0x42
 8008812:	4619      	mov	r1, r3
 8008814:	f00b ffd6 	bl	80147c4 <memcpy>
	}
}
 8008818:	bf00      	nop
 800881a:	3764      	adds	r7, #100	; 0x64
 800881c:	46bd      	mov	sp, r7
 800881e:	bd90      	pop	{r4, r7, pc}
 8008820:	20000b60 	.word	0x20000b60
 8008824:	20000bac 	.word	0x20000bac

08008828 <_ZN5bms444initEv>:

void init(){
 8008828:	b580      	push	{r7, lr}
 800882a:	b084      	sub	sp, #16
 800882c:	af00      	add	r7, sp, #0
	can::registerMessageReceiver<can::messages::BMS_TX_Status>(bmsFrameReceiver);
 800882e:	463b      	mov	r3, r7
 8008830:	4907      	ldr	r1, [pc, #28]	; (8008850 <_ZN5bms444initEv+0x28>)
 8008832:	4618      	mov	r0, r3
 8008834:	f000 f81c 	bl	8008870 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_>
 8008838:	463b      	mov	r3, r7
 800883a:	4618      	mov	r0, r3
 800883c:	f000 f842 	bl	80088c4 <_ZN3can23registerMessageReceiverINS_8messages13BMS_TX_StatusEEEjSt8functionIFvR9RxMessageEE>
 8008840:	463b      	mov	r3, r7
 8008842:	4618      	mov	r0, r3
 8008844:	f7f8 fdd6 	bl	80013f4 <_ZNSt8functionIFvR9RxMessageEED1Ev>
}
 8008848:	bf00      	nop
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	080087d5 	.word	0x080087d5

08008854 <_ZN5bms446updateEv>:

void update(){
 8008854:	b580      	push	{r7, lr}
 8008856:	af00      	add	r7, sp, #0
	printf("temperature = %u\n", m_currentFrame.m_temperature);
 8008858:	4b03      	ldr	r3, [pc, #12]	; (8008868 <_ZN5bms446updateEv+0x14>)
 800885a:	885b      	ldrh	r3, [r3, #2]
 800885c:	4619      	mov	r1, r3
 800885e:	4803      	ldr	r0, [pc, #12]	; (800886c <_ZN5bms446updateEv+0x18>)
 8008860:	f007 fd20 	bl	80102a4 <printf_>
}
 8008864:	bf00      	nop
 8008866:	bd80      	pop	{r7, pc}
 8008868:	20000bac 	.word	0x20000bac
 800886c:	080173ac 	.word	0x080173ac

08008870 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8008870:	b590      	push	{r4, r7, lr}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
      : _Function_base()
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4618      	mov	r0, r3
 800887e:	f7f8 fd87 	bl	8001390 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	4618      	mov	r0, r3
 8008886:	f000 f83d 	bl	8008904 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE21_M_not_empty_functionIS3_EEbPT_>
 800888a:	4603      	mov	r3, r0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d00f      	beq.n	80088b0 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8008890:	687c      	ldr	r4, [r7, #4]
 8008892:	463b      	mov	r3, r7
 8008894:	4618      	mov	r0, r3
 8008896:	f000 f845 	bl	8008924 <_ZSt4moveIRPFvR9RxMessageEEONSt16remove_referenceIT_E4typeEOS6_>
 800889a:	4603      	mov	r3, r0
 800889c:	4619      	mov	r1, r3
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 f84b 	bl	800893a <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a05      	ldr	r2, [pc, #20]	; (80088bc <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_+0x4c>)
 80088a8:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a04      	ldr	r2, [pc, #16]	; (80088c0 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_+0x50>)
 80088ae:	609a      	str	r2, [r3, #8]
      }
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	4618      	mov	r0, r3
 80088b4:	370c      	adds	r7, #12
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd90      	pop	{r4, r7, pc}
 80088ba:	bf00      	nop
 80088bc:	0800895f 	.word	0x0800895f
 80088c0:	08008989 	.word	0x08008989

080088c4 <_ZN3can23registerMessageReceiverINS_8messages13BMS_TX_StatusEEEjSt8functionIFvR9RxMessageEE>:
}

namespace can {

template<typename MESSAGE>
inline unsigned int registerMessageReceiver(
 80088c4:	b590      	push	{r4, r7, lr}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
		std::function<void(RxMessage&)> receiver) {
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 80088cc:	f107 0308 	add.w	r3, r7, #8
 80088d0:	6879      	ldr	r1, [r7, #4]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7f8 fe99 	bl	800160a <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 80088d8:	f107 0308 	add.w	r3, r7, #8
 80088dc:	2201      	movs	r2, #1
 80088de:	4908      	ldr	r1, [pc, #32]	; (8008900 <_ZN3can23registerMessageReceiverINS_8messages13BMS_TX_StatusEEEjSt8functionIFvR9RxMessageEE+0x3c>)
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7f8 fdcb 	bl	800147c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 80088e6:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 80088e8:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 80088ea:	f107 0308 	add.w	r3, r7, #8
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7f8 fd80 	bl	80013f4 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 80088f4:	4623      	mov	r3, r4
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	371c      	adds	r7, #28
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd90      	pop	{r4, r7, pc}
 80088fe:	bf00      	nop
 8008900:	01109216 	.word	0x01109216

08008904 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE21_M_not_empty_functionIS3_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	bf14      	ite	ne
 8008912:	2301      	movne	r3, #1
 8008914:	2300      	moveq	r3, #0
 8008916:	b2db      	uxtb	r3, r3
 8008918:	4618      	mov	r0, r3
 800891a:	370c      	adds	r7, #12
 800891c:	46bd      	mov	sp, r7
 800891e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008922:	4770      	bx	lr

08008924 <_ZSt4moveIRPFvR9RxMessageEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4618      	mov	r0, r3
 8008930:	370c      	adds	r7, #12
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr

0800893a <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 800893a:	b590      	push	{r4, r7, lr}
 800893c:	b083      	sub	sp, #12
 800893e:	af00      	add	r7, sp, #0
 8008940:	6078      	str	r0, [r7, #4]
 8008942:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8008944:	6838      	ldr	r0, [r7, #0]
 8008946:	f7ff ffed 	bl	8008924 <_ZSt4moveIRPFvR9RxMessageEEONSt16remove_referenceIT_E4typeEOS6_>
 800894a:	4603      	mov	r3, r0
 800894c:	4622      	mov	r2, r4
 800894e:	4619      	mov	r1, r3
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 f838 	bl	80089c6 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 8008956:	bf00      	nop
 8008958:	370c      	adds	r7, #12
 800895a:	46bd      	mov	sp, r7
 800895c:	bd90      	pop	{r4, r7, pc}

0800895e <_ZNSt17_Function_handlerIFvR9RxMessageEPS2_E9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800895e:	b590      	push	{r4, r7, lr}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f000 f845 	bl	80089f8 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE14_M_get_pointerERKSt9_Any_data>
 800896e:	4604      	mov	r4, r0
 8008970:	6838      	ldr	r0, [r7, #0]
 8008972:	f7f8 fed4 	bl	800171e <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8008976:	4603      	mov	r3, r0
 8008978:	4619      	mov	r1, r3
 800897a:	4620      	mov	r0, r4
 800897c:	f000 f84d 	bl	8008a1a <_ZSt10__invoke_rIvRPFvR9RxMessageEJS1_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 8008980:	bf00      	nop
      }
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	bd90      	pop	{r4, r7, pc}

08008988 <_ZNSt17_Function_handlerIFvR9RxMessageEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8008988:	b590      	push	{r4, r7, lr}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	60f8      	str	r0, [r7, #12]
 8008990:	60b9      	str	r1, [r7, #8]
 8008992:	4613      	mov	r3, r2
 8008994:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8008996:	79fb      	ldrb	r3, [r7, #7]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d109      	bne.n	80089b0 <_ZNSt17_Function_handlerIFvR9RxMessageEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f000 f852 	bl	8008a46 <_ZNSt9_Any_data9_M_accessIPPFvR9RxMessageEEERT_v>
 80089a2:	4604      	mov	r4, r0
 80089a4:	68b8      	ldr	r0, [r7, #8]
 80089a6:	f000 f827 	bl	80089f8 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE14_M_get_pointerERKSt9_Any_data>
 80089aa:	4603      	mov	r3, r0
 80089ac:	6023      	str	r3, [r4, #0]
	    break;
 80089ae:	e005      	b.n	80089bc <_ZNSt17_Function_handlerIFvR9RxMessageEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 80089b0:	79fb      	ldrb	r3, [r7, #7]
 80089b2:	461a      	mov	r2, r3
 80089b4:	68b9      	ldr	r1, [r7, #8]
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f000 f851 	bl	8008a5e <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 80089bc:	2300      	movs	r3, #0
      }
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd90      	pop	{r4, r7, pc}

080089c6 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80089c6:	b590      	push	{r4, r7, lr}
 80089c8:	b085      	sub	sp, #20
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	60f8      	str	r0, [r7, #12]
 80089ce:	60b9      	str	r1, [r7, #8]
 80089d0:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80089d2:	68b8      	ldr	r0, [r7, #8]
 80089d4:	f7ff ffa6 	bl	8008924 <_ZSt4moveIRPFvR9RxMessageEEONSt16remove_referenceIT_E4typeEOS6_>
 80089d8:	4603      	mov	r3, r0
 80089da:	681c      	ldr	r4, [r3, #0]
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f7ff fc77 	bl	80082d0 <_ZNSt9_Any_data9_M_accessEv>
 80089e2:	4603      	mov	r3, r0
 80089e4:	4619      	mov	r1, r3
 80089e6:	2004      	movs	r0, #4
 80089e8:	f7ff fc66 	bl	80082b8 <_ZnwjPv>
 80089ec:	4603      	mov	r3, r0
 80089ee:	601c      	str	r4, [r3, #0]
 80089f0:	bf00      	nop
 80089f2:	3714      	adds	r7, #20
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd90      	pop	{r4, r7, pc}

080089f8 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f857 	bl	8008ab4 <_ZNKSt9_Any_data9_M_accessIPFvR9RxMessageEEERKT_v>
 8008a06:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f000 f85f 	bl	8008acc <_ZSt11__addressofIKPFvR9RxMessageEEPT_RS5_>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	bf00      	nop
	}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}

08008a1a <_ZSt10__invoke_rIvRPFvR9RxMessageEJS1_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8008a1a:	b5b0      	push	{r4, r5, r7, lr}
 8008a1c:	b082      	sub	sp, #8
 8008a1e:	af00      	add	r7, sp, #0
 8008a20:	6078      	str	r0, [r7, #4]
 8008a22:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f85c 	bl	8008ae2 <_ZSt7forwardIRPFvR9RxMessageEEOT_RNSt16remove_referenceIS5_E4typeE>
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	6838      	ldr	r0, [r7, #0]
 8008a2e:	f7f8 fe76 	bl	800171e <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8008a32:	4603      	mov	r3, r0
 8008a34:	461a      	mov	r2, r3
 8008a36:	4621      	mov	r1, r4
 8008a38:	4628      	mov	r0, r5
 8008a3a:	f000 f85d 	bl	8008af8 <_ZSt13__invoke_implIvRPFvR9RxMessageEJS1_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 8008a3e:	bf00      	nop
 8008a40:	3708      	adds	r7, #8
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bdb0      	pop	{r4, r5, r7, pc}

08008a46 <_ZNSt9_Any_data9_M_accessIPPFvR9RxMessageEEERT_v>:
      _M_access()
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b082      	sub	sp, #8
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f7ff fc3e 	bl	80082d0 <_ZNSt9_Any_data9_M_accessEv>
 8008a54:	4603      	mov	r3, r0
 8008a56:	4618      	mov	r0, r3
 8008a58:	3708      	adds	r7, #8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8008a5e:	b5b0      	push	{r4, r5, r7, lr}
 8008a60:	b084      	sub	sp, #16
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	60f8      	str	r0, [r7, #12]
 8008a66:	60b9      	str	r1, [r7, #8]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8008a6c:	79fb      	ldrb	r3, [r7, #7]
 8008a6e:	2b03      	cmp	r3, #3
 8008a70:	d016      	beq.n	8008aa0 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	dc19      	bgt.n	8008aaa <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d002      	beq.n	8008a80 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d00a      	beq.n	8008a94 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 8008a7e:	e014      	b.n	8008aaa <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f7ff ffe0 	bl	8008a46 <_ZNSt9_Any_data9_M_accessIPPFvR9RxMessageEEERT_v>
 8008a86:	4604      	mov	r4, r0
 8008a88:	68b8      	ldr	r0, [r7, #8]
 8008a8a:	f7ff ffb5 	bl	80089f8 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE14_M_get_pointerERKSt9_Any_data>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	6023      	str	r3, [r4, #0]
	      break;
 8008a92:	e00a      	b.n	8008aaa <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8008a94:	462a      	mov	r2, r5
 8008a96:	68b9      	ldr	r1, [r7, #8]
 8008a98:	68f8      	ldr	r0, [r7, #12]
 8008a9a:	f000 f842 	bl	8008b22 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 8008a9e:	e004      	b.n	8008aaa <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8008aa0:	4621      	mov	r1, r4
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f000 f856 	bl	8008b54 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8008aa8:	bf00      	nop
	  return false;
 8008aaa:	2300      	movs	r3, #0
	}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bdb0      	pop	{r4, r5, r7, pc}

08008ab4 <_ZNKSt9_Any_data9_M_accessIPFvR9RxMessageEEERKT_v>:
      _M_access() const
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b082      	sub	sp, #8
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f7ff fc12 	bl	80082e6 <_ZNKSt9_Any_data9_M_accessEv>
 8008ac2:	4603      	mov	r3, r0
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3708      	adds	r7, #8
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}

08008acc <_ZSt11__addressofIKPFvR9RxMessageEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8008acc:	b480      	push	{r7}
 8008ace:	b083      	sub	sp, #12
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <_ZSt7forwardIRPFvR9RxMessageEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008ae2:	b480      	push	{r7}
 8008ae4:	b083      	sub	sp, #12
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4618      	mov	r0, r3
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr

08008af8 <_ZSt13__invoke_implIvRPFvR9RxMessageEJS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8008af8:	b590      	push	{r4, r7, lr}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	7338      	strb	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8008b04:	68b8      	ldr	r0, [r7, #8]
 8008b06:	f7ff ffec 	bl	8008ae2 <_ZSt7forwardIRPFvR9RxMessageEEOT_RNSt16remove_referenceIS5_E4typeE>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	681c      	ldr	r4, [r3, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f7f8 fe05 	bl	800171e <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8008b14:	4603      	mov	r3, r0
 8008b16:	4618      	mov	r0, r3
 8008b18:	47a0      	blx	r4
 8008b1a:	bf00      	nop
 8008b1c:	3714      	adds	r7, #20
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd90      	pop	{r4, r7, pc}

08008b22 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8008b22:	b590      	push	{r4, r7, lr}
 8008b24:	b085      	sub	sp, #20
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	60f8      	str	r0, [r7, #12]
 8008b2a:	60b9      	str	r1, [r7, #8]
 8008b2c:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8008b2e:	68b8      	ldr	r0, [r7, #8]
 8008b30:	f7ff ffc0 	bl	8008ab4 <_ZNKSt9_Any_data9_M_accessIPFvR9RxMessageEEERKT_v>
 8008b34:	4603      	mov	r3, r0
 8008b36:	681c      	ldr	r4, [r3, #0]
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f7ff fbc9 	bl	80082d0 <_ZNSt9_Any_data9_M_accessEv>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	4619      	mov	r1, r3
 8008b42:	2004      	movs	r0, #4
 8008b44:	f7ff fbb8 	bl	80082b8 <_ZnwjPv>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	601c      	str	r4, [r3, #0]
	}
 8008b4c:	bf00      	nop
 8008b4e:	3714      	adds	r7, #20
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd90      	pop	{r4, r7, pc}

08008b54 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f000 f804 	bl	8008b6c <_ZNSt9_Any_data9_M_accessIPFvR9RxMessageEEERT_v>
	}
 8008b64:	bf00      	nop
 8008b66:	3708      	adds	r7, #8
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <_ZNSt9_Any_data9_M_accessIPFvR9RxMessageEEERT_v>:
      _M_access()
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f7ff fbab 	bl	80082d0 <_ZNSt9_Any_data9_M_accessEv>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3708      	adds	r7, #8
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <_Z41__static_initialization_and_destruction_0ii>:

}
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d107      	bne.n	8008ba4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d102      	bne.n	8008ba4 <_Z41__static_initialization_and_destruction_0ii+0x20>
bms_frame_builder frame_builder;
 8008b9e:	4803      	ldr	r0, [pc, #12]	; (8008bac <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8008ba0:	f7ff fdfe 	bl	80087a0 <_ZN5bms4417bms_frame_builderC1Ev>
}
 8008ba4:	bf00      	nop
 8008ba6:	3708      	adds	r7, #8
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}
 8008bac:	20000b60 	.word	0x20000b60

08008bb0 <_GLOBAL__sub_I__ZN5bms4413frame_builderE>:
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008bb8:	2001      	movs	r0, #1
 8008bba:	f7ff ffe3 	bl	8008b84 <_Z41__static_initialization_and_destruction_0ii>
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <_Z41__static_initialization_and_destruction_0ii>:
		break;
	}

}

}
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d10a      	bne.n	8008be6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d105      	bne.n	8008be6 <_Z41__static_initialization_and_destruction_0ii+0x26>
static osMutexId_t s_modeMutex = osMutexNew(NULL);
 8008bda:	2000      	movs	r0, #0
 8008bdc:	f007 fcf7 	bl	80105ce <osMutexNew>
 8008be0:	4603      	mov	r3, r0
 8008be2:	4a03      	ldr	r2, [pc, #12]	; (8008bf0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8008be4:	6013      	str	r3, [r2, #0]
}
 8008be6:	bf00      	nop
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	20000bf0 	.word	0x20000bf0

08008bf4 <_GLOBAL__sub_I__ZN7cooling20COOLING_PUMP_CHANNELE>:
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008bfc:	2001      	movs	r0, #1
 8008bfe:	f7ff ffdf 	bl	8008bc0 <_Z41__static_initialization_and_destruction_0ii>
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <main_entry>:

#ifdef __cplusplus
extern "C" {
#endif

void main_entry(void *argv) {
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b082      	sub	sp, #8
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
	bms44::init();
 8008c0c:	f7ff fe0c 	bl	8008828 <_ZN5bms444initEv>
	imuMaster.start();
	*/


	while (true) {
		bms44::update();
 8008c10:	f7ff fe20 	bl	8008854 <_ZN5bms446updateEv>

		cooling::update();
		pdu::update();
		*/
		// ======= POSITION-ESTIMATION ======
		osDelay(pdMS_TO_TICKS(1000));
 8008c14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008c18:	f007 fcbe 	bl	8010598 <osDelay>
		bms44::update();
 8008c1c:	e7f8      	b.n	8008c10 <main_entry+0xc>

08008c1e <microcontroller_info_entry>:

#ifdef __cplusplus
extern "C" {
#endif

void microcontroller_info_entry(void *argv) {
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b082      	sub	sp, #8
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
		frameCounter++;
		osDelay(pdMS_TO_TICKS(50));	//update every 50ms because some nodes (i.e. PDU) need high frequency voltage data
	}
	*/
	while(true){
		osDelay(osWaitForever);
 8008c26:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2a:	f007 fcb5 	bl	8010598 <osDelay>
 8008c2e:	e7fa      	b.n	8008c26 <microcontroller_info_entry+0x8>

08008c30 <_ZN3fms8setStateEh>:
PodState s_state;
PodState s_lastState;
PodState s_nextState;
osMutexId_t s_stateMutex = osMutexNew(NULL);

void setState(PodState state){
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b082      	sub	sp, #8
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	4603      	mov	r3, r0
 8008c38:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(s_stateMutex, portMAX_DELAY);
 8008c3a:	4b09      	ldr	r3, [pc, #36]	; (8008c60 <_ZN3fms8setStateEh+0x30>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f04f 31ff 	mov.w	r1, #4294967295
 8008c42:	4618      	mov	r0, r3
 8008c44:	f007 fd49 	bl	80106da <osMutexAcquire>
	s_nextState = state;
 8008c48:	4a06      	ldr	r2, [pc, #24]	; (8008c64 <_ZN3fms8setStateEh+0x34>)
 8008c4a:	79fb      	ldrb	r3, [r7, #7]
 8008c4c:	7013      	strb	r3, [r2, #0]
    osMutexRelease(s_stateMutex);
 8008c4e:	4b04      	ldr	r3, [pc, #16]	; (8008c60 <_ZN3fms8setStateEh+0x30>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f007 fd8c 	bl	8010770 <osMutexRelease>
}
 8008c58:	bf00      	nop
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	20000bf8 	.word	0x20000bf8
 8008c64:	20000bf4 	.word	0x20000bf4

08008c68 <_Z41__static_initialization_and_destruction_0ii>:
		stateMsg.set<can::signals::SensorF_TX_PodState_Last>(s_lastState);
		stateMsg.send();
	}
}

}
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d10a      	bne.n	8008c8e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d105      	bne.n	8008c8e <_Z41__static_initialization_and_destruction_0ii+0x26>
osMutexId_t s_stateMutex = osMutexNew(NULL);
 8008c82:	2000      	movs	r0, #0
 8008c84:	f007 fca3 	bl	80105ce <osMutexNew>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	4a03      	ldr	r2, [pc, #12]	; (8008c98 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8008c8c:	6013      	str	r3, [r2, #0]
}
 8008c8e:	bf00      	nop
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	20000bf8 	.word	0x20000bf8

08008c9c <_GLOBAL__sub_I__ZN3fms7s_stateE>:
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8008ca4:	2001      	movs	r0, #1
 8008ca6:	f7ff ffdf 	bl	8008c68 <_Z41__static_initialization_and_destruction_0ii>
 8008caa:	bd80      	pop	{r7, pc}

08008cac <state_maschine_entry>:
#ifdef __cplusplus
extern "C" {
#endif


void state_maschine_entry(void *argv) {
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
	fms::setState(fms::STATE::POD_IDLE);
 8008cb4:	2001      	movs	r0, #1
 8008cb6:	f7ff ffbb 	bl	8008c30 <_ZN3fms8setStateEh>
	while(true){
		osDelay(osWaitForever);
 8008cba:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbe:	f007 fc6b 	bl	8010598 <osDelay>
 8008cc2:	e7fa      	b.n	8008cba <state_maschine_entry+0xe>

08008cc4 <MX_ADC1_Init>:
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	463b      	mov	r3, r7
 8008ccc:	2200      	movs	r2, #0
 8008cce:	601a      	str	r2, [r3, #0]
 8008cd0:	605a      	str	r2, [r3, #4]
 8008cd2:	609a      	str	r2, [r3, #8]
 8008cd4:	60da      	str	r2, [r3, #12]
 8008cd6:	4b36      	ldr	r3, [pc, #216]	; (8008db0 <MX_ADC1_Init+0xec>)
 8008cd8:	4a36      	ldr	r2, [pc, #216]	; (8008db4 <MX_ADC1_Init+0xf0>)
 8008cda:	601a      	str	r2, [r3, #0]
 8008cdc:	4b34      	ldr	r3, [pc, #208]	; (8008db0 <MX_ADC1_Init+0xec>)
 8008cde:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008ce2:	605a      	str	r2, [r3, #4]
 8008ce4:	4b32      	ldr	r3, [pc, #200]	; (8008db0 <MX_ADC1_Init+0xec>)
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	609a      	str	r2, [r3, #8]
 8008cea:	4b31      	ldr	r3, [pc, #196]	; (8008db0 <MX_ADC1_Init+0xec>)
 8008cec:	2201      	movs	r2, #1
 8008cee:	611a      	str	r2, [r3, #16]
 8008cf0:	4b2f      	ldr	r3, [pc, #188]	; (8008db0 <MX_ADC1_Init+0xec>)
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	761a      	strb	r2, [r3, #24]
 8008cf6:	4b2e      	ldr	r3, [pc, #184]	; (8008db0 <MX_ADC1_Init+0xec>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2020 	strb.w	r2, [r3, #32]
 8008cfe:	4b2c      	ldr	r3, [pc, #176]	; (8008db0 <MX_ADC1_Init+0xec>)
 8008d00:	2200      	movs	r2, #0
 8008d02:	62da      	str	r2, [r3, #44]	; 0x2c
 8008d04:	4b2a      	ldr	r3, [pc, #168]	; (8008db0 <MX_ADC1_Init+0xec>)
 8008d06:	4a2c      	ldr	r2, [pc, #176]	; (8008db8 <MX_ADC1_Init+0xf4>)
 8008d08:	629a      	str	r2, [r3, #40]	; 0x28
 8008d0a:	4b29      	ldr	r3, [pc, #164]	; (8008db0 <MX_ADC1_Init+0xec>)
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	60da      	str	r2, [r3, #12]
 8008d10:	4b27      	ldr	r3, [pc, #156]	; (8008db0 <MX_ADC1_Init+0xec>)
 8008d12:	2204      	movs	r2, #4
 8008d14:	61da      	str	r2, [r3, #28]
 8008d16:	4b26      	ldr	r3, [pc, #152]	; (8008db0 <MX_ADC1_Init+0xec>)
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8008d1e:	4b24      	ldr	r3, [pc, #144]	; (8008db0 <MX_ADC1_Init+0xec>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	615a      	str	r2, [r3, #20]
 8008d24:	4822      	ldr	r0, [pc, #136]	; (8008db0 <MX_ADC1_Init+0xec>)
 8008d26:	f001 fd69 	bl	800a7fc <HAL_ADC_Init>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d001      	beq.n	8008d34 <MX_ADC1_Init+0x70>
 8008d30:	f000 fe06 	bl	8009940 <Error_Handler>
 8008d34:	230a      	movs	r3, #10
 8008d36:	603b      	str	r3, [r7, #0]
 8008d38:	2301      	movs	r3, #1
 8008d3a:	607b      	str	r3, [r7, #4]
 8008d3c:	2305      	movs	r3, #5
 8008d3e:	60bb      	str	r3, [r7, #8]
 8008d40:	463b      	mov	r3, r7
 8008d42:	4619      	mov	r1, r3
 8008d44:	481a      	ldr	r0, [pc, #104]	; (8008db0 <MX_ADC1_Init+0xec>)
 8008d46:	f001 fd9d 	bl	800a884 <HAL_ADC_ConfigChannel>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d001      	beq.n	8008d54 <MX_ADC1_Init+0x90>
 8008d50:	f000 fdf6 	bl	8009940 <Error_Handler>
 8008d54:	230c      	movs	r3, #12
 8008d56:	603b      	str	r3, [r7, #0]
 8008d58:	2302      	movs	r3, #2
 8008d5a:	607b      	str	r3, [r7, #4]
 8008d5c:	463b      	mov	r3, r7
 8008d5e:	4619      	mov	r1, r3
 8008d60:	4813      	ldr	r0, [pc, #76]	; (8008db0 <MX_ADC1_Init+0xec>)
 8008d62:	f001 fd8f 	bl	800a884 <HAL_ADC_ConfigChannel>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d001      	beq.n	8008d70 <MX_ADC1_Init+0xac>
 8008d6c:	f000 fde8 	bl	8009940 <Error_Handler>
 8008d70:	2310      	movs	r3, #16
 8008d72:	603b      	str	r3, [r7, #0]
 8008d74:	2303      	movs	r3, #3
 8008d76:	607b      	str	r3, [r7, #4]
 8008d78:	463b      	mov	r3, r7
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	480c      	ldr	r0, [pc, #48]	; (8008db0 <MX_ADC1_Init+0xec>)
 8008d7e:	f001 fd81 	bl	800a884 <HAL_ADC_ConfigChannel>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d001      	beq.n	8008d8c <MX_ADC1_Init+0xc8>
 8008d88:	f000 fdda 	bl	8009940 <Error_Handler>
 8008d8c:	2311      	movs	r3, #17
 8008d8e:	603b      	str	r3, [r7, #0]
 8008d90:	2304      	movs	r3, #4
 8008d92:	607b      	str	r3, [r7, #4]
 8008d94:	463b      	mov	r3, r7
 8008d96:	4619      	mov	r1, r3
 8008d98:	4805      	ldr	r0, [pc, #20]	; (8008db0 <MX_ADC1_Init+0xec>)
 8008d9a:	f001 fd73 	bl	800a884 <HAL_ADC_ConfigChannel>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d001      	beq.n	8008da8 <MX_ADC1_Init+0xe4>
 8008da4:	f000 fdcc 	bl	8009940 <Error_Handler>
 8008da8:	bf00      	nop
 8008daa:	3710      	adds	r7, #16
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	20000bfc 	.word	0x20000bfc
 8008db4:	40012000 	.word	0x40012000
 8008db8:	0f000001 	.word	0x0f000001

08008dbc <MX_ADC2_Init>:
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	463b      	mov	r3, r7
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	601a      	str	r2, [r3, #0]
 8008dc8:	605a      	str	r2, [r3, #4]
 8008dca:	609a      	str	r2, [r3, #8]
 8008dcc:	60da      	str	r2, [r3, #12]
 8008dce:	4b52      	ldr	r3, [pc, #328]	; (8008f18 <MX_ADC2_Init+0x15c>)
 8008dd0:	4a52      	ldr	r2, [pc, #328]	; (8008f1c <MX_ADC2_Init+0x160>)
 8008dd2:	601a      	str	r2, [r3, #0]
 8008dd4:	4b50      	ldr	r3, [pc, #320]	; (8008f18 <MX_ADC2_Init+0x15c>)
 8008dd6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008dda:	605a      	str	r2, [r3, #4]
 8008ddc:	4b4e      	ldr	r3, [pc, #312]	; (8008f18 <MX_ADC2_Init+0x15c>)
 8008dde:	2200      	movs	r2, #0
 8008de0:	609a      	str	r2, [r3, #8]
 8008de2:	4b4d      	ldr	r3, [pc, #308]	; (8008f18 <MX_ADC2_Init+0x15c>)
 8008de4:	2201      	movs	r2, #1
 8008de6:	611a      	str	r2, [r3, #16]
 8008de8:	4b4b      	ldr	r3, [pc, #300]	; (8008f18 <MX_ADC2_Init+0x15c>)
 8008dea:	2200      	movs	r2, #0
 8008dec:	761a      	strb	r2, [r3, #24]
 8008dee:	4b4a      	ldr	r3, [pc, #296]	; (8008f18 <MX_ADC2_Init+0x15c>)
 8008df0:	2200      	movs	r2, #0
 8008df2:	f883 2020 	strb.w	r2, [r3, #32]
 8008df6:	4b48      	ldr	r3, [pc, #288]	; (8008f18 <MX_ADC2_Init+0x15c>)
 8008df8:	2200      	movs	r2, #0
 8008dfa:	62da      	str	r2, [r3, #44]	; 0x2c
 8008dfc:	4b46      	ldr	r3, [pc, #280]	; (8008f18 <MX_ADC2_Init+0x15c>)
 8008dfe:	4a48      	ldr	r2, [pc, #288]	; (8008f20 <MX_ADC2_Init+0x164>)
 8008e00:	629a      	str	r2, [r3, #40]	; 0x28
 8008e02:	4b45      	ldr	r3, [pc, #276]	; (8008f18 <MX_ADC2_Init+0x15c>)
 8008e04:	2200      	movs	r2, #0
 8008e06:	60da      	str	r2, [r3, #12]
 8008e08:	4b43      	ldr	r3, [pc, #268]	; (8008f18 <MX_ADC2_Init+0x15c>)
 8008e0a:	2208      	movs	r2, #8
 8008e0c:	61da      	str	r2, [r3, #28]
 8008e0e:	4b42      	ldr	r3, [pc, #264]	; (8008f18 <MX_ADC2_Init+0x15c>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8008e16:	4b40      	ldr	r3, [pc, #256]	; (8008f18 <MX_ADC2_Init+0x15c>)
 8008e18:	2200      	movs	r2, #0
 8008e1a:	615a      	str	r2, [r3, #20]
 8008e1c:	483e      	ldr	r0, [pc, #248]	; (8008f18 <MX_ADC2_Init+0x15c>)
 8008e1e:	f001 fced 	bl	800a7fc <HAL_ADC_Init>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d001      	beq.n	8008e2c <MX_ADC2_Init+0x70>
 8008e28:	f000 fd8a 	bl	8009940 <Error_Handler>
 8008e2c:	230f      	movs	r3, #15
 8008e2e:	603b      	str	r3, [r7, #0]
 8008e30:	2301      	movs	r3, #1
 8008e32:	607b      	str	r3, [r7, #4]
 8008e34:	2304      	movs	r3, #4
 8008e36:	60bb      	str	r3, [r7, #8]
 8008e38:	463b      	mov	r3, r7
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	4836      	ldr	r0, [pc, #216]	; (8008f18 <MX_ADC2_Init+0x15c>)
 8008e3e:	f001 fd21 	bl	800a884 <HAL_ADC_ConfigChannel>
 8008e42:	4603      	mov	r3, r0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d001      	beq.n	8008e4c <MX_ADC2_Init+0x90>
 8008e48:	f000 fd7a 	bl	8009940 <Error_Handler>
 8008e4c:	230e      	movs	r3, #14
 8008e4e:	603b      	str	r3, [r7, #0]
 8008e50:	2302      	movs	r3, #2
 8008e52:	607b      	str	r3, [r7, #4]
 8008e54:	463b      	mov	r3, r7
 8008e56:	4619      	mov	r1, r3
 8008e58:	482f      	ldr	r0, [pc, #188]	; (8008f18 <MX_ADC2_Init+0x15c>)
 8008e5a:	f001 fd13 	bl	800a884 <HAL_ADC_ConfigChannel>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d001      	beq.n	8008e68 <MX_ADC2_Init+0xac>
 8008e64:	f000 fd6c 	bl	8009940 <Error_Handler>
 8008e68:	2303      	movs	r3, #3
 8008e6a:	603b      	str	r3, [r7, #0]
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	607b      	str	r3, [r7, #4]
 8008e70:	463b      	mov	r3, r7
 8008e72:	4619      	mov	r1, r3
 8008e74:	4828      	ldr	r0, [pc, #160]	; (8008f18 <MX_ADC2_Init+0x15c>)
 8008e76:	f001 fd05 	bl	800a884 <HAL_ADC_ConfigChannel>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d001      	beq.n	8008e84 <MX_ADC2_Init+0xc8>
 8008e80:	f000 fd5e 	bl	8009940 <Error_Handler>
 8008e84:	2302      	movs	r3, #2
 8008e86:	603b      	str	r3, [r7, #0]
 8008e88:	2304      	movs	r3, #4
 8008e8a:	607b      	str	r3, [r7, #4]
 8008e8c:	463b      	mov	r3, r7
 8008e8e:	4619      	mov	r1, r3
 8008e90:	4821      	ldr	r0, [pc, #132]	; (8008f18 <MX_ADC2_Init+0x15c>)
 8008e92:	f001 fcf7 	bl	800a884 <HAL_ADC_ConfigChannel>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d001      	beq.n	8008ea0 <MX_ADC2_Init+0xe4>
 8008e9c:	f000 fd50 	bl	8009940 <Error_Handler>
 8008ea0:	2304      	movs	r3, #4
 8008ea2:	603b      	str	r3, [r7, #0]
 8008ea4:	2305      	movs	r3, #5
 8008ea6:	607b      	str	r3, [r7, #4]
 8008ea8:	463b      	mov	r3, r7
 8008eaa:	4619      	mov	r1, r3
 8008eac:	481a      	ldr	r0, [pc, #104]	; (8008f18 <MX_ADC2_Init+0x15c>)
 8008eae:	f001 fce9 	bl	800a884 <HAL_ADC_ConfigChannel>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d001      	beq.n	8008ebc <MX_ADC2_Init+0x100>
 8008eb8:	f000 fd42 	bl	8009940 <Error_Handler>
 8008ebc:	2305      	movs	r3, #5
 8008ebe:	603b      	str	r3, [r7, #0]
 8008ec0:	2306      	movs	r3, #6
 8008ec2:	607b      	str	r3, [r7, #4]
 8008ec4:	463b      	mov	r3, r7
 8008ec6:	4619      	mov	r1, r3
 8008ec8:	4813      	ldr	r0, [pc, #76]	; (8008f18 <MX_ADC2_Init+0x15c>)
 8008eca:	f001 fcdb 	bl	800a884 <HAL_ADC_ConfigChannel>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d001      	beq.n	8008ed8 <MX_ADC2_Init+0x11c>
 8008ed4:	f000 fd34 	bl	8009940 <Error_Handler>
 8008ed8:	2306      	movs	r3, #6
 8008eda:	603b      	str	r3, [r7, #0]
 8008edc:	2307      	movs	r3, #7
 8008ede:	607b      	str	r3, [r7, #4]
 8008ee0:	463b      	mov	r3, r7
 8008ee2:	4619      	mov	r1, r3
 8008ee4:	480c      	ldr	r0, [pc, #48]	; (8008f18 <MX_ADC2_Init+0x15c>)
 8008ee6:	f001 fccd 	bl	800a884 <HAL_ADC_ConfigChannel>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d001      	beq.n	8008ef4 <MX_ADC2_Init+0x138>
 8008ef0:	f000 fd26 	bl	8009940 <Error_Handler>
 8008ef4:	2307      	movs	r3, #7
 8008ef6:	603b      	str	r3, [r7, #0]
 8008ef8:	2308      	movs	r3, #8
 8008efa:	607b      	str	r3, [r7, #4]
 8008efc:	463b      	mov	r3, r7
 8008efe:	4619      	mov	r1, r3
 8008f00:	4805      	ldr	r0, [pc, #20]	; (8008f18 <MX_ADC2_Init+0x15c>)
 8008f02:	f001 fcbf 	bl	800a884 <HAL_ADC_ConfigChannel>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <MX_ADC2_Init+0x154>
 8008f0c:	f000 fd18 	bl	8009940 <Error_Handler>
 8008f10:	bf00      	nop
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	20000c44 	.word	0x20000c44
 8008f1c:	40012100 	.word	0x40012100
 8008f20:	0f000001 	.word	0x0f000001

08008f24 <HAL_ADC_MspInit>:
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b08c      	sub	sp, #48	; 0x30
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	f107 031c 	add.w	r3, r7, #28
 8008f30:	2200      	movs	r2, #0
 8008f32:	601a      	str	r2, [r3, #0]
 8008f34:	605a      	str	r2, [r3, #4]
 8008f36:	609a      	str	r2, [r3, #8]
 8008f38:	60da      	str	r2, [r3, #12]
 8008f3a:	611a      	str	r2, [r3, #16]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a6b      	ldr	r2, [pc, #428]	; (80090f0 <HAL_ADC_MspInit+0x1cc>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d157      	bne.n	8008ff6 <HAL_ADC_MspInit+0xd2>
 8008f46:	2300      	movs	r3, #0
 8008f48:	61bb      	str	r3, [r7, #24]
 8008f4a:	4b6a      	ldr	r3, [pc, #424]	; (80090f4 <HAL_ADC_MspInit+0x1d0>)
 8008f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f4e:	4a69      	ldr	r2, [pc, #420]	; (80090f4 <HAL_ADC_MspInit+0x1d0>)
 8008f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f54:	6453      	str	r3, [r2, #68]	; 0x44
 8008f56:	4b67      	ldr	r3, [pc, #412]	; (80090f4 <HAL_ADC_MspInit+0x1d0>)
 8008f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f5e:	61bb      	str	r3, [r7, #24]
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	2300      	movs	r3, #0
 8008f64:	617b      	str	r3, [r7, #20]
 8008f66:	4b63      	ldr	r3, [pc, #396]	; (80090f4 <HAL_ADC_MspInit+0x1d0>)
 8008f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6a:	4a62      	ldr	r2, [pc, #392]	; (80090f4 <HAL_ADC_MspInit+0x1d0>)
 8008f6c:	f043 0304 	orr.w	r3, r3, #4
 8008f70:	6313      	str	r3, [r2, #48]	; 0x30
 8008f72:	4b60      	ldr	r3, [pc, #384]	; (80090f4 <HAL_ADC_MspInit+0x1d0>)
 8008f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f76:	f003 0304 	and.w	r3, r3, #4
 8008f7a:	617b      	str	r3, [r7, #20]
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	2305      	movs	r3, #5
 8008f80:	61fb      	str	r3, [r7, #28]
 8008f82:	2303      	movs	r3, #3
 8008f84:	623b      	str	r3, [r7, #32]
 8008f86:	2300      	movs	r3, #0
 8008f88:	627b      	str	r3, [r7, #36]	; 0x24
 8008f8a:	f107 031c 	add.w	r3, r7, #28
 8008f8e:	4619      	mov	r1, r3
 8008f90:	4859      	ldr	r0, [pc, #356]	; (80090f8 <HAL_ADC_MspInit+0x1d4>)
 8008f92:	f003 f919 	bl	800c1c8 <HAL_GPIO_Init>
 8008f96:	4b59      	ldr	r3, [pc, #356]	; (80090fc <HAL_ADC_MspInit+0x1d8>)
 8008f98:	4a59      	ldr	r2, [pc, #356]	; (8009100 <HAL_ADC_MspInit+0x1dc>)
 8008f9a:	601a      	str	r2, [r3, #0]
 8008f9c:	4b57      	ldr	r3, [pc, #348]	; (80090fc <HAL_ADC_MspInit+0x1d8>)
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	605a      	str	r2, [r3, #4]
 8008fa2:	4b56      	ldr	r3, [pc, #344]	; (80090fc <HAL_ADC_MspInit+0x1d8>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	609a      	str	r2, [r3, #8]
 8008fa8:	4b54      	ldr	r3, [pc, #336]	; (80090fc <HAL_ADC_MspInit+0x1d8>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	60da      	str	r2, [r3, #12]
 8008fae:	4b53      	ldr	r3, [pc, #332]	; (80090fc <HAL_ADC_MspInit+0x1d8>)
 8008fb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008fb4:	611a      	str	r2, [r3, #16]
 8008fb6:	4b51      	ldr	r3, [pc, #324]	; (80090fc <HAL_ADC_MspInit+0x1d8>)
 8008fb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fbc:	615a      	str	r2, [r3, #20]
 8008fbe:	4b4f      	ldr	r3, [pc, #316]	; (80090fc <HAL_ADC_MspInit+0x1d8>)
 8008fc0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008fc4:	619a      	str	r2, [r3, #24]
 8008fc6:	4b4d      	ldr	r3, [pc, #308]	; (80090fc <HAL_ADC_MspInit+0x1d8>)
 8008fc8:	2200      	movs	r2, #0
 8008fca:	61da      	str	r2, [r3, #28]
 8008fcc:	4b4b      	ldr	r3, [pc, #300]	; (80090fc <HAL_ADC_MspInit+0x1d8>)
 8008fce:	2200      	movs	r2, #0
 8008fd0:	621a      	str	r2, [r3, #32]
 8008fd2:	4b4a      	ldr	r3, [pc, #296]	; (80090fc <HAL_ADC_MspInit+0x1d8>)
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	625a      	str	r2, [r3, #36]	; 0x24
 8008fd8:	4848      	ldr	r0, [pc, #288]	; (80090fc <HAL_ADC_MspInit+0x1d8>)
 8008fda:	f002 fe0b 	bl	800bbf4 <HAL_DMA_Init>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d001      	beq.n	8008fe8 <HAL_ADC_MspInit+0xc4>
 8008fe4:	f000 fcac 	bl	8009940 <Error_Handler>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a44      	ldr	r2, [pc, #272]	; (80090fc <HAL_ADC_MspInit+0x1d8>)
 8008fec:	639a      	str	r2, [r3, #56]	; 0x38
 8008fee:	4a43      	ldr	r2, [pc, #268]	; (80090fc <HAL_ADC_MspInit+0x1d8>)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6393      	str	r3, [r2, #56]	; 0x38
 8008ff4:	e077      	b.n	80090e6 <HAL_ADC_MspInit+0x1c2>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a42      	ldr	r2, [pc, #264]	; (8009104 <HAL_ADC_MspInit+0x1e0>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d172      	bne.n	80090e6 <HAL_ADC_MspInit+0x1c2>
 8009000:	2300      	movs	r3, #0
 8009002:	613b      	str	r3, [r7, #16]
 8009004:	4b3b      	ldr	r3, [pc, #236]	; (80090f4 <HAL_ADC_MspInit+0x1d0>)
 8009006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009008:	4a3a      	ldr	r2, [pc, #232]	; (80090f4 <HAL_ADC_MspInit+0x1d0>)
 800900a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800900e:	6453      	str	r3, [r2, #68]	; 0x44
 8009010:	4b38      	ldr	r3, [pc, #224]	; (80090f4 <HAL_ADC_MspInit+0x1d0>)
 8009012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009018:	613b      	str	r3, [r7, #16]
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	2300      	movs	r3, #0
 800901e:	60fb      	str	r3, [r7, #12]
 8009020:	4b34      	ldr	r3, [pc, #208]	; (80090f4 <HAL_ADC_MspInit+0x1d0>)
 8009022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009024:	4a33      	ldr	r2, [pc, #204]	; (80090f4 <HAL_ADC_MspInit+0x1d0>)
 8009026:	f043 0304 	orr.w	r3, r3, #4
 800902a:	6313      	str	r3, [r2, #48]	; 0x30
 800902c:	4b31      	ldr	r3, [pc, #196]	; (80090f4 <HAL_ADC_MspInit+0x1d0>)
 800902e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009030:	f003 0304 	and.w	r3, r3, #4
 8009034:	60fb      	str	r3, [r7, #12]
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2300      	movs	r3, #0
 800903a:	60bb      	str	r3, [r7, #8]
 800903c:	4b2d      	ldr	r3, [pc, #180]	; (80090f4 <HAL_ADC_MspInit+0x1d0>)
 800903e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009040:	4a2c      	ldr	r2, [pc, #176]	; (80090f4 <HAL_ADC_MspInit+0x1d0>)
 8009042:	f043 0301 	orr.w	r3, r3, #1
 8009046:	6313      	str	r3, [r2, #48]	; 0x30
 8009048:	4b2a      	ldr	r3, [pc, #168]	; (80090f4 <HAL_ADC_MspInit+0x1d0>)
 800904a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904c:	f003 0301 	and.w	r3, r3, #1
 8009050:	60bb      	str	r3, [r7, #8]
 8009052:	68bb      	ldr	r3, [r7, #8]
 8009054:	2335      	movs	r3, #53	; 0x35
 8009056:	61fb      	str	r3, [r7, #28]
 8009058:	2303      	movs	r3, #3
 800905a:	623b      	str	r3, [r7, #32]
 800905c:	2300      	movs	r3, #0
 800905e:	627b      	str	r3, [r7, #36]	; 0x24
 8009060:	f107 031c 	add.w	r3, r7, #28
 8009064:	4619      	mov	r1, r3
 8009066:	4824      	ldr	r0, [pc, #144]	; (80090f8 <HAL_ADC_MspInit+0x1d4>)
 8009068:	f003 f8ae 	bl	800c1c8 <HAL_GPIO_Init>
 800906c:	23fc      	movs	r3, #252	; 0xfc
 800906e:	61fb      	str	r3, [r7, #28]
 8009070:	2303      	movs	r3, #3
 8009072:	623b      	str	r3, [r7, #32]
 8009074:	2300      	movs	r3, #0
 8009076:	627b      	str	r3, [r7, #36]	; 0x24
 8009078:	f107 031c 	add.w	r3, r7, #28
 800907c:	4619      	mov	r1, r3
 800907e:	4822      	ldr	r0, [pc, #136]	; (8009108 <HAL_ADC_MspInit+0x1e4>)
 8009080:	f003 f8a2 	bl	800c1c8 <HAL_GPIO_Init>
 8009084:	4b21      	ldr	r3, [pc, #132]	; (800910c <HAL_ADC_MspInit+0x1e8>)
 8009086:	4a22      	ldr	r2, [pc, #136]	; (8009110 <HAL_ADC_MspInit+0x1ec>)
 8009088:	601a      	str	r2, [r3, #0]
 800908a:	4b20      	ldr	r3, [pc, #128]	; (800910c <HAL_ADC_MspInit+0x1e8>)
 800908c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009090:	605a      	str	r2, [r3, #4]
 8009092:	4b1e      	ldr	r3, [pc, #120]	; (800910c <HAL_ADC_MspInit+0x1e8>)
 8009094:	2200      	movs	r2, #0
 8009096:	609a      	str	r2, [r3, #8]
 8009098:	4b1c      	ldr	r3, [pc, #112]	; (800910c <HAL_ADC_MspInit+0x1e8>)
 800909a:	2200      	movs	r2, #0
 800909c:	60da      	str	r2, [r3, #12]
 800909e:	4b1b      	ldr	r3, [pc, #108]	; (800910c <HAL_ADC_MspInit+0x1e8>)
 80090a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80090a4:	611a      	str	r2, [r3, #16]
 80090a6:	4b19      	ldr	r3, [pc, #100]	; (800910c <HAL_ADC_MspInit+0x1e8>)
 80090a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80090ac:	615a      	str	r2, [r3, #20]
 80090ae:	4b17      	ldr	r3, [pc, #92]	; (800910c <HAL_ADC_MspInit+0x1e8>)
 80090b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80090b4:	619a      	str	r2, [r3, #24]
 80090b6:	4b15      	ldr	r3, [pc, #84]	; (800910c <HAL_ADC_MspInit+0x1e8>)
 80090b8:	2200      	movs	r2, #0
 80090ba:	61da      	str	r2, [r3, #28]
 80090bc:	4b13      	ldr	r3, [pc, #76]	; (800910c <HAL_ADC_MspInit+0x1e8>)
 80090be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80090c2:	621a      	str	r2, [r3, #32]
 80090c4:	4b11      	ldr	r3, [pc, #68]	; (800910c <HAL_ADC_MspInit+0x1e8>)
 80090c6:	2200      	movs	r2, #0
 80090c8:	625a      	str	r2, [r3, #36]	; 0x24
 80090ca:	4810      	ldr	r0, [pc, #64]	; (800910c <HAL_ADC_MspInit+0x1e8>)
 80090cc:	f002 fd92 	bl	800bbf4 <HAL_DMA_Init>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <HAL_ADC_MspInit+0x1b6>
 80090d6:	f000 fc33 	bl	8009940 <Error_Handler>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4a0b      	ldr	r2, [pc, #44]	; (800910c <HAL_ADC_MspInit+0x1e8>)
 80090de:	639a      	str	r2, [r3, #56]	; 0x38
 80090e0:	4a0a      	ldr	r2, [pc, #40]	; (800910c <HAL_ADC_MspInit+0x1e8>)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6393      	str	r3, [r2, #56]	; 0x38
 80090e6:	bf00      	nop
 80090e8:	3730      	adds	r7, #48	; 0x30
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	40012000 	.word	0x40012000
 80090f4:	40023800 	.word	0x40023800
 80090f8:	40020800 	.word	0x40020800
 80090fc:	20000c8c 	.word	0x20000c8c
 8009100:	40026410 	.word	0x40026410
 8009104:	40012100 	.word	0x40012100
 8009108:	40020000 	.word	0x40020000
 800910c:	20000cec 	.word	0x20000cec
 8009110:	40026440 	.word	0x40026440

08009114 <MX_CAN1_Init>:
 8009114:	b580      	push	{r7, lr}
 8009116:	af00      	add	r7, sp, #0
 8009118:	4b17      	ldr	r3, [pc, #92]	; (8009178 <MX_CAN1_Init+0x64>)
 800911a:	4a18      	ldr	r2, [pc, #96]	; (800917c <MX_CAN1_Init+0x68>)
 800911c:	601a      	str	r2, [r3, #0]
 800911e:	4b16      	ldr	r3, [pc, #88]	; (8009178 <MX_CAN1_Init+0x64>)
 8009120:	2203      	movs	r2, #3
 8009122:	605a      	str	r2, [r3, #4]
 8009124:	4b14      	ldr	r3, [pc, #80]	; (8009178 <MX_CAN1_Init+0x64>)
 8009126:	2200      	movs	r2, #0
 8009128:	609a      	str	r2, [r3, #8]
 800912a:	4b13      	ldr	r3, [pc, #76]	; (8009178 <MX_CAN1_Init+0x64>)
 800912c:	2200      	movs	r2, #0
 800912e:	60da      	str	r2, [r3, #12]
 8009130:	4b11      	ldr	r3, [pc, #68]	; (8009178 <MX_CAN1_Init+0x64>)
 8009132:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8009136:	611a      	str	r2, [r3, #16]
 8009138:	4b0f      	ldr	r3, [pc, #60]	; (8009178 <MX_CAN1_Init+0x64>)
 800913a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800913e:	615a      	str	r2, [r3, #20]
 8009140:	4b0d      	ldr	r3, [pc, #52]	; (8009178 <MX_CAN1_Init+0x64>)
 8009142:	2200      	movs	r2, #0
 8009144:	761a      	strb	r2, [r3, #24]
 8009146:	4b0c      	ldr	r3, [pc, #48]	; (8009178 <MX_CAN1_Init+0x64>)
 8009148:	2201      	movs	r2, #1
 800914a:	765a      	strb	r2, [r3, #25]
 800914c:	4b0a      	ldr	r3, [pc, #40]	; (8009178 <MX_CAN1_Init+0x64>)
 800914e:	2200      	movs	r2, #0
 8009150:	769a      	strb	r2, [r3, #26]
 8009152:	4b09      	ldr	r3, [pc, #36]	; (8009178 <MX_CAN1_Init+0x64>)
 8009154:	2201      	movs	r2, #1
 8009156:	76da      	strb	r2, [r3, #27]
 8009158:	4b07      	ldr	r3, [pc, #28]	; (8009178 <MX_CAN1_Init+0x64>)
 800915a:	2200      	movs	r2, #0
 800915c:	771a      	strb	r2, [r3, #28]
 800915e:	4b06      	ldr	r3, [pc, #24]	; (8009178 <MX_CAN1_Init+0x64>)
 8009160:	2200      	movs	r2, #0
 8009162:	775a      	strb	r2, [r3, #29]
 8009164:	4804      	ldr	r0, [pc, #16]	; (8009178 <MX_CAN1_Init+0x64>)
 8009166:	f001 fdab 	bl	800acc0 <HAL_CAN_Init>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d001      	beq.n	8009174 <MX_CAN1_Init+0x60>
 8009170:	f000 fbe6 	bl	8009940 <Error_Handler>
 8009174:	bf00      	nop
 8009176:	bd80      	pop	{r7, pc}
 8009178:	20000d4c 	.word	0x20000d4c
 800917c:	40006400 	.word	0x40006400

08009180 <MX_CAN2_Init>:
 8009180:	b580      	push	{r7, lr}
 8009182:	af00      	add	r7, sp, #0
 8009184:	4b17      	ldr	r3, [pc, #92]	; (80091e4 <MX_CAN2_Init+0x64>)
 8009186:	4a18      	ldr	r2, [pc, #96]	; (80091e8 <MX_CAN2_Init+0x68>)
 8009188:	601a      	str	r2, [r3, #0]
 800918a:	4b16      	ldr	r3, [pc, #88]	; (80091e4 <MX_CAN2_Init+0x64>)
 800918c:	2203      	movs	r2, #3
 800918e:	605a      	str	r2, [r3, #4]
 8009190:	4b14      	ldr	r3, [pc, #80]	; (80091e4 <MX_CAN2_Init+0x64>)
 8009192:	2200      	movs	r2, #0
 8009194:	609a      	str	r2, [r3, #8]
 8009196:	4b13      	ldr	r3, [pc, #76]	; (80091e4 <MX_CAN2_Init+0x64>)
 8009198:	2200      	movs	r2, #0
 800919a:	60da      	str	r2, [r3, #12]
 800919c:	4b11      	ldr	r3, [pc, #68]	; (80091e4 <MX_CAN2_Init+0x64>)
 800919e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80091a2:	611a      	str	r2, [r3, #16]
 80091a4:	4b0f      	ldr	r3, [pc, #60]	; (80091e4 <MX_CAN2_Init+0x64>)
 80091a6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80091aa:	615a      	str	r2, [r3, #20]
 80091ac:	4b0d      	ldr	r3, [pc, #52]	; (80091e4 <MX_CAN2_Init+0x64>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	761a      	strb	r2, [r3, #24]
 80091b2:	4b0c      	ldr	r3, [pc, #48]	; (80091e4 <MX_CAN2_Init+0x64>)
 80091b4:	2201      	movs	r2, #1
 80091b6:	765a      	strb	r2, [r3, #25]
 80091b8:	4b0a      	ldr	r3, [pc, #40]	; (80091e4 <MX_CAN2_Init+0x64>)
 80091ba:	2200      	movs	r2, #0
 80091bc:	769a      	strb	r2, [r3, #26]
 80091be:	4b09      	ldr	r3, [pc, #36]	; (80091e4 <MX_CAN2_Init+0x64>)
 80091c0:	2201      	movs	r2, #1
 80091c2:	76da      	strb	r2, [r3, #27]
 80091c4:	4b07      	ldr	r3, [pc, #28]	; (80091e4 <MX_CAN2_Init+0x64>)
 80091c6:	2200      	movs	r2, #0
 80091c8:	771a      	strb	r2, [r3, #28]
 80091ca:	4b06      	ldr	r3, [pc, #24]	; (80091e4 <MX_CAN2_Init+0x64>)
 80091cc:	2200      	movs	r2, #0
 80091ce:	775a      	strb	r2, [r3, #29]
 80091d0:	4804      	ldr	r0, [pc, #16]	; (80091e4 <MX_CAN2_Init+0x64>)
 80091d2:	f001 fd75 	bl	800acc0 <HAL_CAN_Init>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <MX_CAN2_Init+0x60>
 80091dc:	f000 fbb0 	bl	8009940 <Error_Handler>
 80091e0:	bf00      	nop
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	20000d74 	.word	0x20000d74
 80091e8:	40006800 	.word	0x40006800

080091ec <HAL_CAN_MspInit>:
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b08c      	sub	sp, #48	; 0x30
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	f107 031c 	add.w	r3, r7, #28
 80091f8:	2200      	movs	r2, #0
 80091fa:	601a      	str	r2, [r3, #0]
 80091fc:	605a      	str	r2, [r3, #4]
 80091fe:	609a      	str	r2, [r3, #8]
 8009200:	60da      	str	r2, [r3, #12]
 8009202:	611a      	str	r2, [r3, #16]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	4a5a      	ldr	r2, [pc, #360]	; (8009374 <HAL_CAN_MspInit+0x188>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d14d      	bne.n	80092aa <HAL_CAN_MspInit+0xbe>
 800920e:	4b5a      	ldr	r3, [pc, #360]	; (8009378 <HAL_CAN_MspInit+0x18c>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	3301      	adds	r3, #1
 8009214:	4a58      	ldr	r2, [pc, #352]	; (8009378 <HAL_CAN_MspInit+0x18c>)
 8009216:	6013      	str	r3, [r2, #0]
 8009218:	4b57      	ldr	r3, [pc, #348]	; (8009378 <HAL_CAN_MspInit+0x18c>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d10d      	bne.n	800923c <HAL_CAN_MspInit+0x50>
 8009220:	2300      	movs	r3, #0
 8009222:	61bb      	str	r3, [r7, #24]
 8009224:	4b55      	ldr	r3, [pc, #340]	; (800937c <HAL_CAN_MspInit+0x190>)
 8009226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009228:	4a54      	ldr	r2, [pc, #336]	; (800937c <HAL_CAN_MspInit+0x190>)
 800922a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800922e:	6413      	str	r3, [r2, #64]	; 0x40
 8009230:	4b52      	ldr	r3, [pc, #328]	; (800937c <HAL_CAN_MspInit+0x190>)
 8009232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009234:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009238:	61bb      	str	r3, [r7, #24]
 800923a:	69bb      	ldr	r3, [r7, #24]
 800923c:	2300      	movs	r3, #0
 800923e:	617b      	str	r3, [r7, #20]
 8009240:	4b4e      	ldr	r3, [pc, #312]	; (800937c <HAL_CAN_MspInit+0x190>)
 8009242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009244:	4a4d      	ldr	r2, [pc, #308]	; (800937c <HAL_CAN_MspInit+0x190>)
 8009246:	f043 0308 	orr.w	r3, r3, #8
 800924a:	6313      	str	r3, [r2, #48]	; 0x30
 800924c:	4b4b      	ldr	r3, [pc, #300]	; (800937c <HAL_CAN_MspInit+0x190>)
 800924e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009250:	f003 0308 	and.w	r3, r3, #8
 8009254:	617b      	str	r3, [r7, #20]
 8009256:	697b      	ldr	r3, [r7, #20]
 8009258:	2303      	movs	r3, #3
 800925a:	61fb      	str	r3, [r7, #28]
 800925c:	2302      	movs	r3, #2
 800925e:	623b      	str	r3, [r7, #32]
 8009260:	2300      	movs	r3, #0
 8009262:	627b      	str	r3, [r7, #36]	; 0x24
 8009264:	2303      	movs	r3, #3
 8009266:	62bb      	str	r3, [r7, #40]	; 0x28
 8009268:	2309      	movs	r3, #9
 800926a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800926c:	f107 031c 	add.w	r3, r7, #28
 8009270:	4619      	mov	r1, r3
 8009272:	4843      	ldr	r0, [pc, #268]	; (8009380 <HAL_CAN_MspInit+0x194>)
 8009274:	f002 ffa8 	bl	800c1c8 <HAL_GPIO_Init>
 8009278:	2200      	movs	r2, #0
 800927a:	2105      	movs	r1, #5
 800927c:	2013      	movs	r0, #19
 800927e:	f002 fc73 	bl	800bb68 <HAL_NVIC_SetPriority>
 8009282:	2013      	movs	r0, #19
 8009284:	f002 fc8c 	bl	800bba0 <HAL_NVIC_EnableIRQ>
 8009288:	2200      	movs	r2, #0
 800928a:	2105      	movs	r1, #5
 800928c:	2014      	movs	r0, #20
 800928e:	f002 fc6b 	bl	800bb68 <HAL_NVIC_SetPriority>
 8009292:	2014      	movs	r0, #20
 8009294:	f002 fc84 	bl	800bba0 <HAL_NVIC_EnableIRQ>
 8009298:	2200      	movs	r2, #0
 800929a:	2105      	movs	r1, #5
 800929c:	2015      	movs	r0, #21
 800929e:	f002 fc63 	bl	800bb68 <HAL_NVIC_SetPriority>
 80092a2:	2015      	movs	r0, #21
 80092a4:	f002 fc7c 	bl	800bba0 <HAL_NVIC_EnableIRQ>
 80092a8:	e05f      	b.n	800936a <HAL_CAN_MspInit+0x17e>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a35      	ldr	r2, [pc, #212]	; (8009384 <HAL_CAN_MspInit+0x198>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d15a      	bne.n	800936a <HAL_CAN_MspInit+0x17e>
 80092b4:	2300      	movs	r3, #0
 80092b6:	613b      	str	r3, [r7, #16]
 80092b8:	4b30      	ldr	r3, [pc, #192]	; (800937c <HAL_CAN_MspInit+0x190>)
 80092ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092bc:	4a2f      	ldr	r2, [pc, #188]	; (800937c <HAL_CAN_MspInit+0x190>)
 80092be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80092c2:	6413      	str	r3, [r2, #64]	; 0x40
 80092c4:	4b2d      	ldr	r3, [pc, #180]	; (800937c <HAL_CAN_MspInit+0x190>)
 80092c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80092cc:	613b      	str	r3, [r7, #16]
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	4b29      	ldr	r3, [pc, #164]	; (8009378 <HAL_CAN_MspInit+0x18c>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	3301      	adds	r3, #1
 80092d6:	4a28      	ldr	r2, [pc, #160]	; (8009378 <HAL_CAN_MspInit+0x18c>)
 80092d8:	6013      	str	r3, [r2, #0]
 80092da:	4b27      	ldr	r3, [pc, #156]	; (8009378 <HAL_CAN_MspInit+0x18c>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d10d      	bne.n	80092fe <HAL_CAN_MspInit+0x112>
 80092e2:	2300      	movs	r3, #0
 80092e4:	60fb      	str	r3, [r7, #12]
 80092e6:	4b25      	ldr	r3, [pc, #148]	; (800937c <HAL_CAN_MspInit+0x190>)
 80092e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ea:	4a24      	ldr	r2, [pc, #144]	; (800937c <HAL_CAN_MspInit+0x190>)
 80092ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80092f0:	6413      	str	r3, [r2, #64]	; 0x40
 80092f2:	4b22      	ldr	r3, [pc, #136]	; (800937c <HAL_CAN_MspInit+0x190>)
 80092f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092fa:	60fb      	str	r3, [r7, #12]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	2300      	movs	r3, #0
 8009300:	60bb      	str	r3, [r7, #8]
 8009302:	4b1e      	ldr	r3, [pc, #120]	; (800937c <HAL_CAN_MspInit+0x190>)
 8009304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009306:	4a1d      	ldr	r2, [pc, #116]	; (800937c <HAL_CAN_MspInit+0x190>)
 8009308:	f043 0302 	orr.w	r3, r3, #2
 800930c:	6313      	str	r3, [r2, #48]	; 0x30
 800930e:	4b1b      	ldr	r3, [pc, #108]	; (800937c <HAL_CAN_MspInit+0x190>)
 8009310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009312:	f003 0302 	and.w	r3, r3, #2
 8009316:	60bb      	str	r3, [r7, #8]
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	2360      	movs	r3, #96	; 0x60
 800931c:	61fb      	str	r3, [r7, #28]
 800931e:	2302      	movs	r3, #2
 8009320:	623b      	str	r3, [r7, #32]
 8009322:	2300      	movs	r3, #0
 8009324:	627b      	str	r3, [r7, #36]	; 0x24
 8009326:	2303      	movs	r3, #3
 8009328:	62bb      	str	r3, [r7, #40]	; 0x28
 800932a:	2309      	movs	r3, #9
 800932c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800932e:	f107 031c 	add.w	r3, r7, #28
 8009332:	4619      	mov	r1, r3
 8009334:	4814      	ldr	r0, [pc, #80]	; (8009388 <HAL_CAN_MspInit+0x19c>)
 8009336:	f002 ff47 	bl	800c1c8 <HAL_GPIO_Init>
 800933a:	2200      	movs	r2, #0
 800933c:	2105      	movs	r1, #5
 800933e:	203f      	movs	r0, #63	; 0x3f
 8009340:	f002 fc12 	bl	800bb68 <HAL_NVIC_SetPriority>
 8009344:	203f      	movs	r0, #63	; 0x3f
 8009346:	f002 fc2b 	bl	800bba0 <HAL_NVIC_EnableIRQ>
 800934a:	2200      	movs	r2, #0
 800934c:	2105      	movs	r1, #5
 800934e:	2040      	movs	r0, #64	; 0x40
 8009350:	f002 fc0a 	bl	800bb68 <HAL_NVIC_SetPriority>
 8009354:	2040      	movs	r0, #64	; 0x40
 8009356:	f002 fc23 	bl	800bba0 <HAL_NVIC_EnableIRQ>
 800935a:	2200      	movs	r2, #0
 800935c:	2105      	movs	r1, #5
 800935e:	2041      	movs	r0, #65	; 0x41
 8009360:	f002 fc02 	bl	800bb68 <HAL_NVIC_SetPriority>
 8009364:	2041      	movs	r0, #65	; 0x41
 8009366:	f002 fc1b 	bl	800bba0 <HAL_NVIC_EnableIRQ>
 800936a:	bf00      	nop
 800936c:	3730      	adds	r7, #48	; 0x30
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	40006400 	.word	0x40006400
 8009378:	20000d9c 	.word	0x20000d9c
 800937c:	40023800 	.word	0x40023800
 8009380:	40020c00 	.word	0x40020c00
 8009384:	40006800 	.word	0x40006800
 8009388:	40020400 	.word	0x40020400

0800938c <MX_CRC_Init>:
 800938c:	b580      	push	{r7, lr}
 800938e:	af00      	add	r7, sp, #0
 8009390:	4b06      	ldr	r3, [pc, #24]	; (80093ac <MX_CRC_Init+0x20>)
 8009392:	4a07      	ldr	r2, [pc, #28]	; (80093b0 <MX_CRC_Init+0x24>)
 8009394:	601a      	str	r2, [r3, #0]
 8009396:	4805      	ldr	r0, [pc, #20]	; (80093ac <MX_CRC_Init+0x20>)
 8009398:	f002 fc10 	bl	800bbbc <HAL_CRC_Init>
 800939c:	4603      	mov	r3, r0
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d001      	beq.n	80093a6 <MX_CRC_Init+0x1a>
 80093a2:	f000 facd 	bl	8009940 <Error_Handler>
 80093a6:	bf00      	nop
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	20000da0 	.word	0x20000da0
 80093b0:	40023000 	.word	0x40023000

080093b4 <HAL_CRC_MspInit>:
 80093b4:	b480      	push	{r7}
 80093b6:	b085      	sub	sp, #20
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a0b      	ldr	r2, [pc, #44]	; (80093f0 <HAL_CRC_MspInit+0x3c>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d10d      	bne.n	80093e2 <HAL_CRC_MspInit+0x2e>
 80093c6:	2300      	movs	r3, #0
 80093c8:	60fb      	str	r3, [r7, #12]
 80093ca:	4b0a      	ldr	r3, [pc, #40]	; (80093f4 <HAL_CRC_MspInit+0x40>)
 80093cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ce:	4a09      	ldr	r2, [pc, #36]	; (80093f4 <HAL_CRC_MspInit+0x40>)
 80093d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80093d4:	6313      	str	r3, [r2, #48]	; 0x30
 80093d6:	4b07      	ldr	r3, [pc, #28]	; (80093f4 <HAL_CRC_MspInit+0x40>)
 80093d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093de:	60fb      	str	r3, [r7, #12]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	bf00      	nop
 80093e4:	3714      	adds	r7, #20
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	40023000 	.word	0x40023000
 80093f4:	40023800 	.word	0x40023800

080093f8 <MX_DMA_Init>:
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	2300      	movs	r3, #0
 8009400:	607b      	str	r3, [r7, #4]
 8009402:	4b18      	ldr	r3, [pc, #96]	; (8009464 <MX_DMA_Init+0x6c>)
 8009404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009406:	4a17      	ldr	r2, [pc, #92]	; (8009464 <MX_DMA_Init+0x6c>)
 8009408:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800940c:	6313      	str	r3, [r2, #48]	; 0x30
 800940e:	4b15      	ldr	r3, [pc, #84]	; (8009464 <MX_DMA_Init+0x6c>)
 8009410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009416:	607b      	str	r3, [r7, #4]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	2105      	movs	r1, #5
 800941e:	2038      	movs	r0, #56	; 0x38
 8009420:	f002 fba2 	bl	800bb68 <HAL_NVIC_SetPriority>
 8009424:	2038      	movs	r0, #56	; 0x38
 8009426:	f002 fbbb 	bl	800bba0 <HAL_NVIC_EnableIRQ>
 800942a:	2200      	movs	r2, #0
 800942c:	2105      	movs	r1, #5
 800942e:	203a      	movs	r0, #58	; 0x3a
 8009430:	f002 fb9a 	bl	800bb68 <HAL_NVIC_SetPriority>
 8009434:	203a      	movs	r0, #58	; 0x3a
 8009436:	f002 fbb3 	bl	800bba0 <HAL_NVIC_EnableIRQ>
 800943a:	2200      	movs	r2, #0
 800943c:	2105      	movs	r1, #5
 800943e:	2044      	movs	r0, #68	; 0x44
 8009440:	f002 fb92 	bl	800bb68 <HAL_NVIC_SetPriority>
 8009444:	2044      	movs	r0, #68	; 0x44
 8009446:	f002 fbab 	bl	800bba0 <HAL_NVIC_EnableIRQ>
 800944a:	2200      	movs	r2, #0
 800944c:	2105      	movs	r1, #5
 800944e:	2046      	movs	r0, #70	; 0x46
 8009450:	f002 fb8a 	bl	800bb68 <HAL_NVIC_SetPriority>
 8009454:	2046      	movs	r0, #70	; 0x46
 8009456:	f002 fba3 	bl	800bba0 <HAL_NVIC_EnableIRQ>
 800945a:	bf00      	nop
 800945c:	3708      	adds	r7, #8
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	40023800 	.word	0x40023800

08009468 <configureTimerForRunTimeStats>:
 8009468:	b480      	push	{r7}
 800946a:	af00      	add	r7, sp, #0
 800946c:	bf00      	nop
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr

08009476 <getRunTimeCounterValue>:
 8009476:	b480      	push	{r7}
 8009478:	af00      	add	r7, sp, #0
 800947a:	2300      	movs	r3, #0
 800947c:	4618      	mov	r0, r3
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr

08009486 <vApplicationStackOverflowHook>:
 8009486:	b480      	push	{r7}
 8009488:	b083      	sub	sp, #12
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
 800948e:	6039      	str	r1, [r7, #0]
 8009490:	bf00      	nop
 8009492:	370c      	adds	r7, #12
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <vApplicationMallocFailedHook>:
 800949c:	b480      	push	{r7}
 800949e:	af00      	add	r7, sp, #0
 80094a0:	bf00      	nop
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
	...

080094ac <MX_FREERTOS_Init>:
 80094ac:	b580      	push	{r7, lr}
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	4a18      	ldr	r2, [pc, #96]	; (8009514 <MX_FREERTOS_Init+0x68>)
 80094b2:	2101      	movs	r1, #1
 80094b4:	2010      	movs	r0, #16
 80094b6:	f007 f998 	bl	80107ea <osMessageQueueNew>
 80094ba:	4603      	mov	r3, r0
 80094bc:	4a16      	ldr	r2, [pc, #88]	; (8009518 <MX_FREERTOS_Init+0x6c>)
 80094be:	6013      	str	r3, [r2, #0]
 80094c0:	4a16      	ldr	r2, [pc, #88]	; (800951c <MX_FREERTOS_Init+0x70>)
 80094c2:	2100      	movs	r1, #0
 80094c4:	4816      	ldr	r0, [pc, #88]	; (8009520 <MX_FREERTOS_Init+0x74>)
 80094c6:	f006 ffd5 	bl	8010474 <osThreadNew>
 80094ca:	4603      	mov	r3, r0
 80094cc:	4a15      	ldr	r2, [pc, #84]	; (8009524 <MX_FREERTOS_Init+0x78>)
 80094ce:	6013      	str	r3, [r2, #0]
 80094d0:	4a15      	ldr	r2, [pc, #84]	; (8009528 <MX_FREERTOS_Init+0x7c>)
 80094d2:	2100      	movs	r1, #0
 80094d4:	4815      	ldr	r0, [pc, #84]	; (800952c <MX_FREERTOS_Init+0x80>)
 80094d6:	f006 ffcd 	bl	8010474 <osThreadNew>
 80094da:	4603      	mov	r3, r0
 80094dc:	4a14      	ldr	r2, [pc, #80]	; (8009530 <MX_FREERTOS_Init+0x84>)
 80094de:	6013      	str	r3, [r2, #0]
 80094e0:	4a14      	ldr	r2, [pc, #80]	; (8009534 <MX_FREERTOS_Init+0x88>)
 80094e2:	2100      	movs	r1, #0
 80094e4:	4814      	ldr	r0, [pc, #80]	; (8009538 <MX_FREERTOS_Init+0x8c>)
 80094e6:	f006 ffc5 	bl	8010474 <osThreadNew>
 80094ea:	4603      	mov	r3, r0
 80094ec:	4a13      	ldr	r2, [pc, #76]	; (800953c <MX_FREERTOS_Init+0x90>)
 80094ee:	6013      	str	r3, [r2, #0]
 80094f0:	4a13      	ldr	r2, [pc, #76]	; (8009540 <MX_FREERTOS_Init+0x94>)
 80094f2:	2100      	movs	r1, #0
 80094f4:	4813      	ldr	r0, [pc, #76]	; (8009544 <MX_FREERTOS_Init+0x98>)
 80094f6:	f006 ffbd 	bl	8010474 <osThreadNew>
 80094fa:	4603      	mov	r3, r0
 80094fc:	4a12      	ldr	r2, [pc, #72]	; (8009548 <MX_FREERTOS_Init+0x9c>)
 80094fe:	6013      	str	r3, [r2, #0]
 8009500:	4a12      	ldr	r2, [pc, #72]	; (800954c <MX_FREERTOS_Init+0xa0>)
 8009502:	2100      	movs	r1, #0
 8009504:	4812      	ldr	r0, [pc, #72]	; (8009550 <MX_FREERTOS_Init+0xa4>)
 8009506:	f006 ffb5 	bl	8010474 <osThreadNew>
 800950a:	4603      	mov	r3, r0
 800950c:	4a11      	ldr	r2, [pc, #68]	; (8009554 <MX_FREERTOS_Init+0xa8>)
 800950e:	6013      	str	r3, [r2, #0]
 8009510:	bf00      	nop
 8009512:	bd80      	pop	{r7, pc}
 8009514:	08017688 	.word	0x08017688
 8009518:	2000107c 	.word	0x2000107c
 800951c:	080175d4 	.word	0x080175d4
 8009520:	08009559 	.word	0x08009559
 8009524:	20000da8 	.word	0x20000da8
 8009528:	080175f8 	.word	0x080175f8
 800952c:	08002161 	.word	0x08002161
 8009530:	2000106c 	.word	0x2000106c
 8009534:	0801761c 	.word	0x0801761c
 8009538:	08008cad 	.word	0x08008cad
 800953c:	20001070 	.word	0x20001070
 8009540:	08017640 	.word	0x08017640
 8009544:	08008c05 	.word	0x08008c05
 8009548:	20001074 	.word	0x20001074
 800954c:	08017664 	.word	0x08017664
 8009550:	08008c1f 	.word	0x08008c1f
 8009554:	20001078 	.word	0x20001078

08009558 <StartDefaultTask>:
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	2001      	movs	r0, #1
 8009562:	f007 f819 	bl	8010598 <osDelay>
 8009566:	e7fb      	b.n	8009560 <StartDefaultTask+0x8>

08009568 <MX_GPIO_Init>:
 8009568:	b580      	push	{r7, lr}
 800956a:	b08a      	sub	sp, #40	; 0x28
 800956c:	af00      	add	r7, sp, #0
 800956e:	f107 0314 	add.w	r3, r7, #20
 8009572:	2200      	movs	r2, #0
 8009574:	601a      	str	r2, [r3, #0]
 8009576:	605a      	str	r2, [r3, #4]
 8009578:	609a      	str	r2, [r3, #8]
 800957a:	60da      	str	r2, [r3, #12]
 800957c:	611a      	str	r2, [r3, #16]
 800957e:	2300      	movs	r3, #0
 8009580:	613b      	str	r3, [r7, #16]
 8009582:	4b58      	ldr	r3, [pc, #352]	; (80096e4 <MX_GPIO_Init+0x17c>)
 8009584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009586:	4a57      	ldr	r2, [pc, #348]	; (80096e4 <MX_GPIO_Init+0x17c>)
 8009588:	f043 0304 	orr.w	r3, r3, #4
 800958c:	6313      	str	r3, [r2, #48]	; 0x30
 800958e:	4b55      	ldr	r3, [pc, #340]	; (80096e4 <MX_GPIO_Init+0x17c>)
 8009590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009592:	f003 0304 	and.w	r3, r3, #4
 8009596:	613b      	str	r3, [r7, #16]
 8009598:	693b      	ldr	r3, [r7, #16]
 800959a:	2300      	movs	r3, #0
 800959c:	60fb      	str	r3, [r7, #12]
 800959e:	4b51      	ldr	r3, [pc, #324]	; (80096e4 <MX_GPIO_Init+0x17c>)
 80095a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a2:	4a50      	ldr	r2, [pc, #320]	; (80096e4 <MX_GPIO_Init+0x17c>)
 80095a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095a8:	6313      	str	r3, [r2, #48]	; 0x30
 80095aa:	4b4e      	ldr	r3, [pc, #312]	; (80096e4 <MX_GPIO_Init+0x17c>)
 80095ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095b2:	60fb      	str	r3, [r7, #12]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2300      	movs	r3, #0
 80095b8:	60bb      	str	r3, [r7, #8]
 80095ba:	4b4a      	ldr	r3, [pc, #296]	; (80096e4 <MX_GPIO_Init+0x17c>)
 80095bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095be:	4a49      	ldr	r2, [pc, #292]	; (80096e4 <MX_GPIO_Init+0x17c>)
 80095c0:	f043 0301 	orr.w	r3, r3, #1
 80095c4:	6313      	str	r3, [r2, #48]	; 0x30
 80095c6:	4b47      	ldr	r3, [pc, #284]	; (80096e4 <MX_GPIO_Init+0x17c>)
 80095c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	60bb      	str	r3, [r7, #8]
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	2300      	movs	r3, #0
 80095d4:	607b      	str	r3, [r7, #4]
 80095d6:	4b43      	ldr	r3, [pc, #268]	; (80096e4 <MX_GPIO_Init+0x17c>)
 80095d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095da:	4a42      	ldr	r2, [pc, #264]	; (80096e4 <MX_GPIO_Init+0x17c>)
 80095dc:	f043 0302 	orr.w	r3, r3, #2
 80095e0:	6313      	str	r3, [r2, #48]	; 0x30
 80095e2:	4b40      	ldr	r3, [pc, #256]	; (80096e4 <MX_GPIO_Init+0x17c>)
 80095e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e6:	f003 0302 	and.w	r3, r3, #2
 80095ea:	607b      	str	r3, [r7, #4]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2300      	movs	r3, #0
 80095f0:	603b      	str	r3, [r7, #0]
 80095f2:	4b3c      	ldr	r3, [pc, #240]	; (80096e4 <MX_GPIO_Init+0x17c>)
 80095f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f6:	4a3b      	ldr	r2, [pc, #236]	; (80096e4 <MX_GPIO_Init+0x17c>)
 80095f8:	f043 0308 	orr.w	r3, r3, #8
 80095fc:	6313      	str	r3, [r2, #48]	; 0x30
 80095fe:	4b39      	ldr	r3, [pc, #228]	; (80096e4 <MX_GPIO_Init+0x17c>)
 8009600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009602:	f003 0308 	and.w	r3, r3, #8
 8009606:	603b      	str	r3, [r7, #0]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	2200      	movs	r2, #0
 800960c:	f641 4102 	movw	r1, #7170	; 0x1c02
 8009610:	4835      	ldr	r0, [pc, #212]	; (80096e8 <MX_GPIO_Init+0x180>)
 8009612:	f002 ff75 	bl	800c500 <HAL_GPIO_WritePin>
 8009616:	2201      	movs	r2, #1
 8009618:	2180      	movs	r1, #128	; 0x80
 800961a:	4833      	ldr	r0, [pc, #204]	; (80096e8 <MX_GPIO_Init+0x180>)
 800961c:	f002 ff70 	bl	800c500 <HAL_GPIO_WritePin>
 8009620:	2305      	movs	r3, #5
 8009622:	617b      	str	r3, [r7, #20]
 8009624:	2303      	movs	r3, #3
 8009626:	61bb      	str	r3, [r7, #24]
 8009628:	2300      	movs	r3, #0
 800962a:	61fb      	str	r3, [r7, #28]
 800962c:	f107 0314 	add.w	r3, r7, #20
 8009630:	4619      	mov	r1, r3
 8009632:	482e      	ldr	r0, [pc, #184]	; (80096ec <MX_GPIO_Init+0x184>)
 8009634:	f002 fdc8 	bl	800c1c8 <HAL_GPIO_Init>
 8009638:	230a      	movs	r3, #10
 800963a:	617b      	str	r3, [r7, #20]
 800963c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8009640:	61bb      	str	r3, [r7, #24]
 8009642:	2300      	movs	r3, #0
 8009644:	61fb      	str	r3, [r7, #28]
 8009646:	f107 0314 	add.w	r3, r7, #20
 800964a:	4619      	mov	r1, r3
 800964c:	4827      	ldr	r0, [pc, #156]	; (80096ec <MX_GPIO_Init+0x184>)
 800964e:	f002 fdbb 	bl	800c1c8 <HAL_GPIO_Init>
 8009652:	f641 4302 	movw	r3, #7170	; 0x1c02
 8009656:	617b      	str	r3, [r7, #20]
 8009658:	2301      	movs	r3, #1
 800965a:	61bb      	str	r3, [r7, #24]
 800965c:	2300      	movs	r3, #0
 800965e:	61fb      	str	r3, [r7, #28]
 8009660:	2300      	movs	r3, #0
 8009662:	623b      	str	r3, [r7, #32]
 8009664:	f107 0314 	add.w	r3, r7, #20
 8009668:	4619      	mov	r1, r3
 800966a:	481f      	ldr	r0, [pc, #124]	; (80096e8 <MX_GPIO_Init+0x180>)
 800966c:	f002 fdac 	bl	800c1c8 <HAL_GPIO_Init>
 8009670:	2318      	movs	r3, #24
 8009672:	617b      	str	r3, [r7, #20]
 8009674:	2300      	movs	r3, #0
 8009676:	61bb      	str	r3, [r7, #24]
 8009678:	2300      	movs	r3, #0
 800967a:	61fb      	str	r3, [r7, #28]
 800967c:	f107 0314 	add.w	r3, r7, #20
 8009680:	4619      	mov	r1, r3
 8009682:	481b      	ldr	r0, [pc, #108]	; (80096f0 <MX_GPIO_Init+0x188>)
 8009684:	f002 fda0 	bl	800c1c8 <HAL_GPIO_Init>
 8009688:	2310      	movs	r3, #16
 800968a:	617b      	str	r3, [r7, #20]
 800968c:	2300      	movs	r3, #0
 800968e:	61bb      	str	r3, [r7, #24]
 8009690:	2300      	movs	r3, #0
 8009692:	61fb      	str	r3, [r7, #28]
 8009694:	f107 0314 	add.w	r3, r7, #20
 8009698:	4619      	mov	r1, r3
 800969a:	4813      	ldr	r0, [pc, #76]	; (80096e8 <MX_GPIO_Init+0x180>)
 800969c:	f002 fd94 	bl	800c1c8 <HAL_GPIO_Init>
 80096a0:	2380      	movs	r3, #128	; 0x80
 80096a2:	617b      	str	r3, [r7, #20]
 80096a4:	2301      	movs	r3, #1
 80096a6:	61bb      	str	r3, [r7, #24]
 80096a8:	2302      	movs	r3, #2
 80096aa:	61fb      	str	r3, [r7, #28]
 80096ac:	2300      	movs	r3, #0
 80096ae:	623b      	str	r3, [r7, #32]
 80096b0:	f107 0314 	add.w	r3, r7, #20
 80096b4:	4619      	mov	r1, r3
 80096b6:	480c      	ldr	r0, [pc, #48]	; (80096e8 <MX_GPIO_Init+0x180>)
 80096b8:	f002 fd86 	bl	800c1c8 <HAL_GPIO_Init>
 80096bc:	2200      	movs	r2, #0
 80096be:	2105      	movs	r1, #5
 80096c0:	2007      	movs	r0, #7
 80096c2:	f002 fa51 	bl	800bb68 <HAL_NVIC_SetPriority>
 80096c6:	2007      	movs	r0, #7
 80096c8:	f002 fa6a 	bl	800bba0 <HAL_NVIC_EnableIRQ>
 80096cc:	2200      	movs	r2, #0
 80096ce:	2105      	movs	r1, #5
 80096d0:	2009      	movs	r0, #9
 80096d2:	f002 fa49 	bl	800bb68 <HAL_NVIC_SetPriority>
 80096d6:	2009      	movs	r0, #9
 80096d8:	f002 fa62 	bl	800bba0 <HAL_NVIC_EnableIRQ>
 80096dc:	bf00      	nop
 80096de:	3728      	adds	r7, #40	; 0x28
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	40023800 	.word	0x40023800
 80096e8:	40020400 	.word	0x40020400
 80096ec:	40020800 	.word	0x40020800
 80096f0:	40020c00 	.word	0x40020c00

080096f4 <MX_I2C1_Init>:
 80096f4:	b580      	push	{r7, lr}
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	4b12      	ldr	r3, [pc, #72]	; (8009744 <MX_I2C1_Init+0x50>)
 80096fa:	4a13      	ldr	r2, [pc, #76]	; (8009748 <MX_I2C1_Init+0x54>)
 80096fc:	601a      	str	r2, [r3, #0]
 80096fe:	4b11      	ldr	r3, [pc, #68]	; (8009744 <MX_I2C1_Init+0x50>)
 8009700:	4a12      	ldr	r2, [pc, #72]	; (800974c <MX_I2C1_Init+0x58>)
 8009702:	605a      	str	r2, [r3, #4]
 8009704:	4b0f      	ldr	r3, [pc, #60]	; (8009744 <MX_I2C1_Init+0x50>)
 8009706:	2200      	movs	r2, #0
 8009708:	609a      	str	r2, [r3, #8]
 800970a:	4b0e      	ldr	r3, [pc, #56]	; (8009744 <MX_I2C1_Init+0x50>)
 800970c:	2200      	movs	r2, #0
 800970e:	60da      	str	r2, [r3, #12]
 8009710:	4b0c      	ldr	r3, [pc, #48]	; (8009744 <MX_I2C1_Init+0x50>)
 8009712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009716:	611a      	str	r2, [r3, #16]
 8009718:	4b0a      	ldr	r3, [pc, #40]	; (8009744 <MX_I2C1_Init+0x50>)
 800971a:	2200      	movs	r2, #0
 800971c:	615a      	str	r2, [r3, #20]
 800971e:	4b09      	ldr	r3, [pc, #36]	; (8009744 <MX_I2C1_Init+0x50>)
 8009720:	2200      	movs	r2, #0
 8009722:	619a      	str	r2, [r3, #24]
 8009724:	4b07      	ldr	r3, [pc, #28]	; (8009744 <MX_I2C1_Init+0x50>)
 8009726:	2200      	movs	r2, #0
 8009728:	61da      	str	r2, [r3, #28]
 800972a:	4b06      	ldr	r3, [pc, #24]	; (8009744 <MX_I2C1_Init+0x50>)
 800972c:	2200      	movs	r2, #0
 800972e:	621a      	str	r2, [r3, #32]
 8009730:	4804      	ldr	r0, [pc, #16]	; (8009744 <MX_I2C1_Init+0x50>)
 8009732:	f002 ff17 	bl	800c564 <HAL_I2C_Init>
 8009736:	4603      	mov	r3, r0
 8009738:	2b00      	cmp	r3, #0
 800973a:	d001      	beq.n	8009740 <MX_I2C1_Init+0x4c>
 800973c:	f000 f900 	bl	8009940 <Error_Handler>
 8009740:	bf00      	nop
 8009742:	bd80      	pop	{r7, pc}
 8009744:	20001080 	.word	0x20001080
 8009748:	40005400 	.word	0x40005400
 800974c:	000186a0 	.word	0x000186a0

08009750 <HAL_I2C_MspInit>:
 8009750:	b580      	push	{r7, lr}
 8009752:	b08a      	sub	sp, #40	; 0x28
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	f107 0314 	add.w	r3, r7, #20
 800975c:	2200      	movs	r2, #0
 800975e:	601a      	str	r2, [r3, #0]
 8009760:	605a      	str	r2, [r3, #4]
 8009762:	609a      	str	r2, [r3, #8]
 8009764:	60da      	str	r2, [r3, #12]
 8009766:	611a      	str	r2, [r3, #16]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a19      	ldr	r2, [pc, #100]	; (80097d4 <HAL_I2C_MspInit+0x84>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d12c      	bne.n	80097cc <HAL_I2C_MspInit+0x7c>
 8009772:	2300      	movs	r3, #0
 8009774:	613b      	str	r3, [r7, #16]
 8009776:	4b18      	ldr	r3, [pc, #96]	; (80097d8 <HAL_I2C_MspInit+0x88>)
 8009778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800977a:	4a17      	ldr	r2, [pc, #92]	; (80097d8 <HAL_I2C_MspInit+0x88>)
 800977c:	f043 0302 	orr.w	r3, r3, #2
 8009780:	6313      	str	r3, [r2, #48]	; 0x30
 8009782:	4b15      	ldr	r3, [pc, #84]	; (80097d8 <HAL_I2C_MspInit+0x88>)
 8009784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009786:	f003 0302 	and.w	r3, r3, #2
 800978a:	613b      	str	r3, [r7, #16]
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009792:	617b      	str	r3, [r7, #20]
 8009794:	2312      	movs	r3, #18
 8009796:	61bb      	str	r3, [r7, #24]
 8009798:	2301      	movs	r3, #1
 800979a:	61fb      	str	r3, [r7, #28]
 800979c:	2303      	movs	r3, #3
 800979e:	623b      	str	r3, [r7, #32]
 80097a0:	2304      	movs	r3, #4
 80097a2:	627b      	str	r3, [r7, #36]	; 0x24
 80097a4:	f107 0314 	add.w	r3, r7, #20
 80097a8:	4619      	mov	r1, r3
 80097aa:	480c      	ldr	r0, [pc, #48]	; (80097dc <HAL_I2C_MspInit+0x8c>)
 80097ac:	f002 fd0c 	bl	800c1c8 <HAL_GPIO_Init>
 80097b0:	2300      	movs	r3, #0
 80097b2:	60fb      	str	r3, [r7, #12]
 80097b4:	4b08      	ldr	r3, [pc, #32]	; (80097d8 <HAL_I2C_MspInit+0x88>)
 80097b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b8:	4a07      	ldr	r2, [pc, #28]	; (80097d8 <HAL_I2C_MspInit+0x88>)
 80097ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80097be:	6413      	str	r3, [r2, #64]	; 0x40
 80097c0:	4b05      	ldr	r3, [pc, #20]	; (80097d8 <HAL_I2C_MspInit+0x88>)
 80097c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80097c8:	60fb      	str	r3, [r7, #12]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	bf00      	nop
 80097ce:	3728      	adds	r7, #40	; 0x28
 80097d0:	46bd      	mov	sp, r7
 80097d2:	bd80      	pop	{r7, pc}
 80097d4:	40005400 	.word	0x40005400
 80097d8:	40023800 	.word	0x40023800
 80097dc:	40020400 	.word	0x40020400

080097e0 <main>:
 80097e0:	b580      	push	{r7, lr}
 80097e2:	af00      	add	r7, sp, #0
 80097e4:	f000 ffc8 	bl	800a778 <HAL_Init>
 80097e8:	f000 f82c 	bl	8009844 <SystemClock_Config>
 80097ec:	f7ff febc 	bl	8009568 <MX_GPIO_Init>
 80097f0:	f7ff fe02 	bl	80093f8 <MX_DMA_Init>
 80097f4:	f7ff fa66 	bl	8008cc4 <MX_ADC1_Init>
 80097f8:	f7ff fc8c 	bl	8009114 <MX_CAN1_Init>
 80097fc:	f7ff fcc0 	bl	8009180 <MX_CAN2_Init>
 8009800:	f7ff fdc4 	bl	800938c <MX_CRC_Init>
 8009804:	f000 f8a2 	bl	800994c <MX_RNG_Init>
 8009808:	f000 fe7e 	bl	800a508 <MX_USART2_UART_Init>
 800980c:	f000 fc0c 	bl	800a028 <MX_TIM4_Init>
 8009810:	f7ff fad4 	bl	8008dbc <MX_ADC2_Init>
 8009814:	f7ff ff6e 	bl	80096f4 <MX_I2C1_Init>
 8009818:	f000 f8ce 	bl	80099b8 <MX_SPI2_Init>
 800981c:	f000 fc90 	bl	800a140 <MX_TIM5_Init>
 8009820:	f000 fe48 	bl	800a4b4 <MX_USART1_UART_Init>
 8009824:	f000 fd1a 	bl	800a25c <MX_TIM14_Init>
 8009828:	f000 fb62 	bl	8009ef0 <MX_TIM2_Init>
 800982c:	f000 fcdc 	bl	800a1e8 <MX_TIM9_Init>
 8009830:	f000 fbac 	bl	8009f8c <MX_TIM3_Init>
 8009834:	f006 fdd4 	bl	80103e0 <osKernelInitialize>
 8009838:	f7ff fe38 	bl	80094ac <MX_FREERTOS_Init>
 800983c:	f006 fdf4 	bl	8010428 <osKernelStart>
 8009840:	e7fe      	b.n	8009840 <main+0x60>
	...

08009844 <SystemClock_Config>:
 8009844:	b580      	push	{r7, lr}
 8009846:	b094      	sub	sp, #80	; 0x50
 8009848:	af00      	add	r7, sp, #0
 800984a:	f107 0320 	add.w	r3, r7, #32
 800984e:	2230      	movs	r2, #48	; 0x30
 8009850:	2100      	movs	r1, #0
 8009852:	4618      	mov	r0, r3
 8009854:	f00a ffc4 	bl	80147e0 <memset>
 8009858:	f107 030c 	add.w	r3, r7, #12
 800985c:	2200      	movs	r2, #0
 800985e:	601a      	str	r2, [r3, #0]
 8009860:	605a      	str	r2, [r3, #4]
 8009862:	609a      	str	r2, [r3, #8]
 8009864:	60da      	str	r2, [r3, #12]
 8009866:	611a      	str	r2, [r3, #16]
 8009868:	2300      	movs	r3, #0
 800986a:	60bb      	str	r3, [r7, #8]
 800986c:	4b28      	ldr	r3, [pc, #160]	; (8009910 <SystemClock_Config+0xcc>)
 800986e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009870:	4a27      	ldr	r2, [pc, #156]	; (8009910 <SystemClock_Config+0xcc>)
 8009872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009876:	6413      	str	r3, [r2, #64]	; 0x40
 8009878:	4b25      	ldr	r3, [pc, #148]	; (8009910 <SystemClock_Config+0xcc>)
 800987a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800987c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009880:	60bb      	str	r3, [r7, #8]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	2300      	movs	r3, #0
 8009886:	607b      	str	r3, [r7, #4]
 8009888:	4b22      	ldr	r3, [pc, #136]	; (8009914 <SystemClock_Config+0xd0>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a21      	ldr	r2, [pc, #132]	; (8009914 <SystemClock_Config+0xd0>)
 800988e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009892:	6013      	str	r3, [r2, #0]
 8009894:	4b1f      	ldr	r3, [pc, #124]	; (8009914 <SystemClock_Config+0xd0>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800989c:	607b      	str	r3, [r7, #4]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2301      	movs	r3, #1
 80098a2:	623b      	str	r3, [r7, #32]
 80098a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80098a8:	627b      	str	r3, [r7, #36]	; 0x24
 80098aa:	2302      	movs	r3, #2
 80098ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80098ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80098b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80098b4:	2308      	movs	r3, #8
 80098b6:	643b      	str	r3, [r7, #64]	; 0x40
 80098b8:	23a8      	movs	r3, #168	; 0xa8
 80098ba:	647b      	str	r3, [r7, #68]	; 0x44
 80098bc:	2302      	movs	r3, #2
 80098be:	64bb      	str	r3, [r7, #72]	; 0x48
 80098c0:	2307      	movs	r3, #7
 80098c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098c4:	f107 0320 	add.w	r3, r7, #32
 80098c8:	4618      	mov	r0, r3
 80098ca:	f002 ff8f 	bl	800c7ec <HAL_RCC_OscConfig>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d001      	beq.n	80098d8 <SystemClock_Config+0x94>
 80098d4:	f000 f834 	bl	8009940 <Error_Handler>
 80098d8:	230f      	movs	r3, #15
 80098da:	60fb      	str	r3, [r7, #12]
 80098dc:	2302      	movs	r3, #2
 80098de:	613b      	str	r3, [r7, #16]
 80098e0:	2300      	movs	r3, #0
 80098e2:	617b      	str	r3, [r7, #20]
 80098e4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80098e8:	61bb      	str	r3, [r7, #24]
 80098ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80098ee:	61fb      	str	r3, [r7, #28]
 80098f0:	f107 030c 	add.w	r3, r7, #12
 80098f4:	2105      	movs	r1, #5
 80098f6:	4618      	mov	r0, r3
 80098f8:	f003 f9f0 	bl	800ccdc <HAL_RCC_ClockConfig>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d001      	beq.n	8009906 <SystemClock_Config+0xc2>
 8009902:	f000 f81d 	bl	8009940 <Error_Handler>
 8009906:	bf00      	nop
 8009908:	3750      	adds	r7, #80	; 0x50
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	40023800 	.word	0x40023800
 8009914:	40007000 	.word	0x40007000

08009918 <HAL_TIM_PeriodElapsedCallback>:
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a05      	ldr	r2, [pc, #20]	; (800993c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d101      	bne.n	800992e <HAL_TIM_PeriodElapsedCallback+0x16>
 800992a:	f000 ff47 	bl	800a7bc <HAL_IncTick>
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f005 f84d 	bl	800e9ce <PeriodElapsedCallback>
 8009934:	bf00      	nop
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}
 800993c:	40010000 	.word	0x40010000

08009940 <Error_Handler>:
 8009940:	b480      	push	{r7}
 8009942:	af00      	add	r7, sp, #0
 8009944:	b672      	cpsid	i
 8009946:	bf00      	nop
 8009948:	e7fe      	b.n	8009948 <Error_Handler+0x8>
	...

0800994c <MX_RNG_Init>:
 800994c:	b580      	push	{r7, lr}
 800994e:	af00      	add	r7, sp, #0
 8009950:	4b06      	ldr	r3, [pc, #24]	; (800996c <MX_RNG_Init+0x20>)
 8009952:	4a07      	ldr	r2, [pc, #28]	; (8009970 <MX_RNG_Init+0x24>)
 8009954:	601a      	str	r2, [r3, #0]
 8009956:	4805      	ldr	r0, [pc, #20]	; (800996c <MX_RNG_Init+0x20>)
 8009958:	f003 fc10 	bl	800d17c <HAL_RNG_Init>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d001      	beq.n	8009966 <MX_RNG_Init+0x1a>
 8009962:	f7ff ffed 	bl	8009940 <Error_Handler>
 8009966:	bf00      	nop
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	200010d4 	.word	0x200010d4
 8009970:	50060800 	.word	0x50060800

08009974 <HAL_RNG_MspInit>:
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a0b      	ldr	r2, [pc, #44]	; (80099b0 <HAL_RNG_MspInit+0x3c>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d10d      	bne.n	80099a2 <HAL_RNG_MspInit+0x2e>
 8009986:	2300      	movs	r3, #0
 8009988:	60fb      	str	r3, [r7, #12]
 800998a:	4b0a      	ldr	r3, [pc, #40]	; (80099b4 <HAL_RNG_MspInit+0x40>)
 800998c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800998e:	4a09      	ldr	r2, [pc, #36]	; (80099b4 <HAL_RNG_MspInit+0x40>)
 8009990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009994:	6353      	str	r3, [r2, #52]	; 0x34
 8009996:	4b07      	ldr	r3, [pc, #28]	; (80099b4 <HAL_RNG_MspInit+0x40>)
 8009998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800999a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800999e:	60fb      	str	r3, [r7, #12]
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	bf00      	nop
 80099a4:	3714      	adds	r7, #20
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	50060800 	.word	0x50060800
 80099b4:	40023800 	.word	0x40023800

080099b8 <MX_SPI2_Init>:
 80099b8:	b580      	push	{r7, lr}
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	4b17      	ldr	r3, [pc, #92]	; (8009a1c <MX_SPI2_Init+0x64>)
 80099be:	4a18      	ldr	r2, [pc, #96]	; (8009a20 <MX_SPI2_Init+0x68>)
 80099c0:	601a      	str	r2, [r3, #0]
 80099c2:	4b16      	ldr	r3, [pc, #88]	; (8009a1c <MX_SPI2_Init+0x64>)
 80099c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80099c8:	605a      	str	r2, [r3, #4]
 80099ca:	4b14      	ldr	r3, [pc, #80]	; (8009a1c <MX_SPI2_Init+0x64>)
 80099cc:	2200      	movs	r2, #0
 80099ce:	609a      	str	r2, [r3, #8]
 80099d0:	4b12      	ldr	r3, [pc, #72]	; (8009a1c <MX_SPI2_Init+0x64>)
 80099d2:	2200      	movs	r2, #0
 80099d4:	60da      	str	r2, [r3, #12]
 80099d6:	4b11      	ldr	r3, [pc, #68]	; (8009a1c <MX_SPI2_Init+0x64>)
 80099d8:	2200      	movs	r2, #0
 80099da:	611a      	str	r2, [r3, #16]
 80099dc:	4b0f      	ldr	r3, [pc, #60]	; (8009a1c <MX_SPI2_Init+0x64>)
 80099de:	2200      	movs	r2, #0
 80099e0:	615a      	str	r2, [r3, #20]
 80099e2:	4b0e      	ldr	r3, [pc, #56]	; (8009a1c <MX_SPI2_Init+0x64>)
 80099e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099e8:	619a      	str	r2, [r3, #24]
 80099ea:	4b0c      	ldr	r3, [pc, #48]	; (8009a1c <MX_SPI2_Init+0x64>)
 80099ec:	2200      	movs	r2, #0
 80099ee:	61da      	str	r2, [r3, #28]
 80099f0:	4b0a      	ldr	r3, [pc, #40]	; (8009a1c <MX_SPI2_Init+0x64>)
 80099f2:	2200      	movs	r2, #0
 80099f4:	621a      	str	r2, [r3, #32]
 80099f6:	4b09      	ldr	r3, [pc, #36]	; (8009a1c <MX_SPI2_Init+0x64>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	625a      	str	r2, [r3, #36]	; 0x24
 80099fc:	4b07      	ldr	r3, [pc, #28]	; (8009a1c <MX_SPI2_Init+0x64>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	629a      	str	r2, [r3, #40]	; 0x28
 8009a02:	4b06      	ldr	r3, [pc, #24]	; (8009a1c <MX_SPI2_Init+0x64>)
 8009a04:	220a      	movs	r2, #10
 8009a06:	62da      	str	r2, [r3, #44]	; 0x2c
 8009a08:	4804      	ldr	r0, [pc, #16]	; (8009a1c <MX_SPI2_Init+0x64>)
 8009a0a:	f003 fc37 	bl	800d27c <HAL_SPI_Init>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d001      	beq.n	8009a18 <MX_SPI2_Init+0x60>
 8009a14:	f7ff ff94 	bl	8009940 <Error_Handler>
 8009a18:	bf00      	nop
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	200010e4 	.word	0x200010e4
 8009a20:	40003800 	.word	0x40003800

08009a24 <HAL_SPI_MspInit>:
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b08a      	sub	sp, #40	; 0x28
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	f107 0314 	add.w	r3, r7, #20
 8009a30:	2200      	movs	r2, #0
 8009a32:	601a      	str	r2, [r3, #0]
 8009a34:	605a      	str	r2, [r3, #4]
 8009a36:	609a      	str	r2, [r3, #8]
 8009a38:	60da      	str	r2, [r3, #12]
 8009a3a:	611a      	str	r2, [r3, #16]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a19      	ldr	r2, [pc, #100]	; (8009aa8 <HAL_SPI_MspInit+0x84>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d12c      	bne.n	8009aa0 <HAL_SPI_MspInit+0x7c>
 8009a46:	2300      	movs	r3, #0
 8009a48:	613b      	str	r3, [r7, #16]
 8009a4a:	4b18      	ldr	r3, [pc, #96]	; (8009aac <HAL_SPI_MspInit+0x88>)
 8009a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a4e:	4a17      	ldr	r2, [pc, #92]	; (8009aac <HAL_SPI_MspInit+0x88>)
 8009a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009a54:	6413      	str	r3, [r2, #64]	; 0x40
 8009a56:	4b15      	ldr	r3, [pc, #84]	; (8009aac <HAL_SPI_MspInit+0x88>)
 8009a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a5e:	613b      	str	r3, [r7, #16]
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	2300      	movs	r3, #0
 8009a64:	60fb      	str	r3, [r7, #12]
 8009a66:	4b11      	ldr	r3, [pc, #68]	; (8009aac <HAL_SPI_MspInit+0x88>)
 8009a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a6a:	4a10      	ldr	r2, [pc, #64]	; (8009aac <HAL_SPI_MspInit+0x88>)
 8009a6c:	f043 0302 	orr.w	r3, r3, #2
 8009a70:	6313      	str	r3, [r2, #48]	; 0x30
 8009a72:	4b0e      	ldr	r3, [pc, #56]	; (8009aac <HAL_SPI_MspInit+0x88>)
 8009a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a76:	f003 0302 	and.w	r3, r3, #2
 8009a7a:	60fb      	str	r3, [r7, #12]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8009a82:	617b      	str	r3, [r7, #20]
 8009a84:	2302      	movs	r3, #2
 8009a86:	61bb      	str	r3, [r7, #24]
 8009a88:	2300      	movs	r3, #0
 8009a8a:	61fb      	str	r3, [r7, #28]
 8009a8c:	2303      	movs	r3, #3
 8009a8e:	623b      	str	r3, [r7, #32]
 8009a90:	2305      	movs	r3, #5
 8009a92:	627b      	str	r3, [r7, #36]	; 0x24
 8009a94:	f107 0314 	add.w	r3, r7, #20
 8009a98:	4619      	mov	r1, r3
 8009a9a:	4805      	ldr	r0, [pc, #20]	; (8009ab0 <HAL_SPI_MspInit+0x8c>)
 8009a9c:	f002 fb94 	bl	800c1c8 <HAL_GPIO_Init>
 8009aa0:	bf00      	nop
 8009aa2:	3728      	adds	r7, #40	; 0x28
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	40003800 	.word	0x40003800
 8009aac:	40023800 	.word	0x40023800
 8009ab0:	40020400 	.word	0x40020400

08009ab4 <HAL_MspInit>:
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	2300      	movs	r3, #0
 8009abc:	607b      	str	r3, [r7, #4]
 8009abe:	4b12      	ldr	r3, [pc, #72]	; (8009b08 <HAL_MspInit+0x54>)
 8009ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ac2:	4a11      	ldr	r2, [pc, #68]	; (8009b08 <HAL_MspInit+0x54>)
 8009ac4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8009aca:	4b0f      	ldr	r3, [pc, #60]	; (8009b08 <HAL_MspInit+0x54>)
 8009acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ace:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ad2:	607b      	str	r3, [r7, #4]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	603b      	str	r3, [r7, #0]
 8009ada:	4b0b      	ldr	r3, [pc, #44]	; (8009b08 <HAL_MspInit+0x54>)
 8009adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ade:	4a0a      	ldr	r2, [pc, #40]	; (8009b08 <HAL_MspInit+0x54>)
 8009ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8009ae6:	4b08      	ldr	r3, [pc, #32]	; (8009b08 <HAL_MspInit+0x54>)
 8009ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009aee:	603b      	str	r3, [r7, #0]
 8009af0:	683b      	ldr	r3, [r7, #0]
 8009af2:	2200      	movs	r2, #0
 8009af4:	210f      	movs	r1, #15
 8009af6:	f06f 0001 	mvn.w	r0, #1
 8009afa:	f002 f835 	bl	800bb68 <HAL_NVIC_SetPriority>
 8009afe:	bf00      	nop
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	40023800 	.word	0x40023800

08009b0c <HAL_InitTick>:
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b08c      	sub	sp, #48	; 0x30
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	2300      	movs	r3, #0
 8009b16:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b18:	2300      	movs	r3, #0
 8009b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	60bb      	str	r3, [r7, #8]
 8009b20:	4b2f      	ldr	r3, [pc, #188]	; (8009be0 <HAL_InitTick+0xd4>)
 8009b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b24:	4a2e      	ldr	r2, [pc, #184]	; (8009be0 <HAL_InitTick+0xd4>)
 8009b26:	f043 0301 	orr.w	r3, r3, #1
 8009b2a:	6453      	str	r3, [r2, #68]	; 0x44
 8009b2c:	4b2c      	ldr	r3, [pc, #176]	; (8009be0 <HAL_InitTick+0xd4>)
 8009b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	60bb      	str	r3, [r7, #8]
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	f107 020c 	add.w	r2, r7, #12
 8009b3c:	f107 0310 	add.w	r3, r7, #16
 8009b40:	4611      	mov	r1, r2
 8009b42:	4618      	mov	r0, r3
 8009b44:	f003 fae8 	bl	800d118 <HAL_RCC_GetClockConfig>
 8009b48:	f003 fad2 	bl	800d0f0 <HAL_RCC_GetPCLK2Freq>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	005b      	lsls	r3, r3, #1
 8009b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b54:	4a23      	ldr	r2, [pc, #140]	; (8009be4 <HAL_InitTick+0xd8>)
 8009b56:	fba2 2303 	umull	r2, r3, r2, r3
 8009b5a:	0c9b      	lsrs	r3, r3, #18
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b60:	4b21      	ldr	r3, [pc, #132]	; (8009be8 <HAL_InitTick+0xdc>)
 8009b62:	4a22      	ldr	r2, [pc, #136]	; (8009bec <HAL_InitTick+0xe0>)
 8009b64:	601a      	str	r2, [r3, #0]
 8009b66:	4b20      	ldr	r3, [pc, #128]	; (8009be8 <HAL_InitTick+0xdc>)
 8009b68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8009b6c:	60da      	str	r2, [r3, #12]
 8009b6e:	4a1e      	ldr	r2, [pc, #120]	; (8009be8 <HAL_InitTick+0xdc>)
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	6053      	str	r3, [r2, #4]
 8009b74:	4b1c      	ldr	r3, [pc, #112]	; (8009be8 <HAL_InitTick+0xdc>)
 8009b76:	2200      	movs	r2, #0
 8009b78:	611a      	str	r2, [r3, #16]
 8009b7a:	4b1b      	ldr	r3, [pc, #108]	; (8009be8 <HAL_InitTick+0xdc>)
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	609a      	str	r2, [r3, #8]
 8009b80:	4b19      	ldr	r3, [pc, #100]	; (8009be8 <HAL_InitTick+0xdc>)
 8009b82:	2200      	movs	r2, #0
 8009b84:	619a      	str	r2, [r3, #24]
 8009b86:	4818      	ldr	r0, [pc, #96]	; (8009be8 <HAL_InitTick+0xdc>)
 8009b88:	f003 fc01 	bl	800d38e <HAL_TIM_Base_Init>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009b92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d11b      	bne.n	8009bd2 <HAL_InitTick+0xc6>
 8009b9a:	4813      	ldr	r0, [pc, #76]	; (8009be8 <HAL_InitTick+0xdc>)
 8009b9c:	f003 fc46 	bl	800d42c <HAL_TIM_Base_Start_IT>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009ba6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d111      	bne.n	8009bd2 <HAL_InitTick+0xc6>
 8009bae:	2019      	movs	r0, #25
 8009bb0:	f001 fff6 	bl	800bba0 <HAL_NVIC_EnableIRQ>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2b0f      	cmp	r3, #15
 8009bb8:	d808      	bhi.n	8009bcc <HAL_InitTick+0xc0>
 8009bba:	2200      	movs	r2, #0
 8009bbc:	6879      	ldr	r1, [r7, #4]
 8009bbe:	2019      	movs	r0, #25
 8009bc0:	f001 ffd2 	bl	800bb68 <HAL_NVIC_SetPriority>
 8009bc4:	4a0a      	ldr	r2, [pc, #40]	; (8009bf0 <HAL_InitTick+0xe4>)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6013      	str	r3, [r2, #0]
 8009bca:	e002      	b.n	8009bd2 <HAL_InitTick+0xc6>
 8009bcc:	2301      	movs	r3, #1
 8009bce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8009bd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3730      	adds	r7, #48	; 0x30
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	40023800 	.word	0x40023800
 8009be4:	431bde83 	.word	0x431bde83
 8009be8:	2000113c 	.word	0x2000113c
 8009bec:	40010000 	.word	0x40010000
 8009bf0:	20000024 	.word	0x20000024

08009bf4 <NMI_Handler>:
 8009bf4:	b480      	push	{r7}
 8009bf6:	af00      	add	r7, sp, #0
 8009bf8:	e7fe      	b.n	8009bf8 <NMI_Handler+0x4>

08009bfa <HardFault_Handler>:
 8009bfa:	b480      	push	{r7}
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	e7fe      	b.n	8009bfe <HardFault_Handler+0x4>

08009c00 <MemManage_Handler>:
 8009c00:	b480      	push	{r7}
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	e7fe      	b.n	8009c04 <MemManage_Handler+0x4>

08009c06 <BusFault_Handler>:
 8009c06:	b480      	push	{r7}
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	e7fe      	b.n	8009c0a <BusFault_Handler+0x4>

08009c0c <UsageFault_Handler>:
 8009c0c:	b480      	push	{r7}
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	e7fe      	b.n	8009c10 <UsageFault_Handler+0x4>

08009c12 <DebugMon_Handler>:
 8009c12:	b480      	push	{r7}
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	bf00      	nop
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <EXTI1_IRQHandler>:
 8009c20:	b580      	push	{r7, lr}
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	2002      	movs	r0, #2
 8009c26:	f002 fc85 	bl	800c534 <HAL_GPIO_EXTI_IRQHandler>
 8009c2a:	bf00      	nop
 8009c2c:	bd80      	pop	{r7, pc}

08009c2e <EXTI3_IRQHandler>:
 8009c2e:	b580      	push	{r7, lr}
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	2008      	movs	r0, #8
 8009c34:	f002 fc7e 	bl	800c534 <HAL_GPIO_EXTI_IRQHandler>
 8009c38:	bf00      	nop
 8009c3a:	bd80      	pop	{r7, pc}

08009c3c <CAN1_TX_IRQHandler>:
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	4802      	ldr	r0, [pc, #8]	; (8009c4c <CAN1_TX_IRQHandler+0x10>)
 8009c42:	f001 fca5 	bl	800b590 <HAL_CAN_IRQHandler>
 8009c46:	bf00      	nop
 8009c48:	bd80      	pop	{r7, pc}
 8009c4a:	bf00      	nop
 8009c4c:	20000d4c 	.word	0x20000d4c

08009c50 <CAN1_RX0_IRQHandler>:
 8009c50:	b580      	push	{r7, lr}
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	4802      	ldr	r0, [pc, #8]	; (8009c60 <CAN1_RX0_IRQHandler+0x10>)
 8009c56:	f001 fc9b 	bl	800b590 <HAL_CAN_IRQHandler>
 8009c5a:	bf00      	nop
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	20000d4c 	.word	0x20000d4c

08009c64 <CAN1_RX1_IRQHandler>:
 8009c64:	b580      	push	{r7, lr}
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	4802      	ldr	r0, [pc, #8]	; (8009c74 <CAN1_RX1_IRQHandler+0x10>)
 8009c6a:	f001 fc91 	bl	800b590 <HAL_CAN_IRQHandler>
 8009c6e:	bf00      	nop
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	20000d4c 	.word	0x20000d4c

08009c78 <TIM1_BRK_TIM9_IRQHandler>:
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	4802      	ldr	r0, [pc, #8]	; (8009c88 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8009c7e:	f003 fd44 	bl	800d70a <HAL_TIM_IRQHandler>
 8009c82:	bf00      	nop
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	200012a8 	.word	0x200012a8

08009c8c <TIM1_UP_TIM10_IRQHandler>:
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	4802      	ldr	r0, [pc, #8]	; (8009c9c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8009c92:	f003 fd3a 	bl	800d70a <HAL_TIM_IRQHandler>
 8009c96:	bf00      	nop
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	2000113c 	.word	0x2000113c

08009ca0 <TIM3_IRQHandler>:
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	4802      	ldr	r0, [pc, #8]	; (8009cb0 <TIM3_IRQHandler+0x10>)
 8009ca6:	f003 fd30 	bl	800d70a <HAL_TIM_IRQHandler>
 8009caa:	bf00      	nop
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	200011d0 	.word	0x200011d0

08009cb4 <DMA2_Stream0_IRQHandler>:
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	4802      	ldr	r0, [pc, #8]	; (8009cc4 <DMA2_Stream0_IRQHandler+0x10>)
 8009cba:	f002 f849 	bl	800bd50 <HAL_DMA_IRQHandler>
 8009cbe:	bf00      	nop
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	20000c8c 	.word	0x20000c8c

08009cc8 <DMA2_Stream2_IRQHandler>:
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	4802      	ldr	r0, [pc, #8]	; (8009cd8 <DMA2_Stream2_IRQHandler+0x10>)
 8009cce:	f002 f83f 	bl	800bd50 <HAL_DMA_IRQHandler>
 8009cd2:	bf00      	nop
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	20000cec 	.word	0x20000cec

08009cdc <CAN2_TX_IRQHandler>:
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	4802      	ldr	r0, [pc, #8]	; (8009cec <CAN2_TX_IRQHandler+0x10>)
 8009ce2:	f001 fc55 	bl	800b590 <HAL_CAN_IRQHandler>
 8009ce6:	bf00      	nop
 8009ce8:	bd80      	pop	{r7, pc}
 8009cea:	bf00      	nop
 8009cec:	20000d74 	.word	0x20000d74

08009cf0 <CAN2_RX0_IRQHandler>:
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	4802      	ldr	r0, [pc, #8]	; (8009d00 <CAN2_RX0_IRQHandler+0x10>)
 8009cf6:	f001 fc4b 	bl	800b590 <HAL_CAN_IRQHandler>
 8009cfa:	bf00      	nop
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	20000d74 	.word	0x20000d74

08009d04 <CAN2_RX1_IRQHandler>:
 8009d04:	b580      	push	{r7, lr}
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	4802      	ldr	r0, [pc, #8]	; (8009d14 <CAN2_RX1_IRQHandler+0x10>)
 8009d0a:	f001 fc41 	bl	800b590 <HAL_CAN_IRQHandler>
 8009d0e:	bf00      	nop
 8009d10:	bd80      	pop	{r7, pc}
 8009d12:	bf00      	nop
 8009d14:	20000d74 	.word	0x20000d74

08009d18 <DMA2_Stream5_IRQHandler>:
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	4802      	ldr	r0, [pc, #8]	; (8009d28 <DMA2_Stream5_IRQHandler+0x10>)
 8009d1e:	f002 f817 	bl	800bd50 <HAL_DMA_IRQHandler>
 8009d22:	bf00      	nop
 8009d24:	bd80      	pop	{r7, pc}
 8009d26:	bf00      	nop
 8009d28:	20001420 	.word	0x20001420

08009d2c <DMA2_Stream7_IRQHandler>:
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	4802      	ldr	r0, [pc, #8]	; (8009d3c <DMA2_Stream7_IRQHandler+0x10>)
 8009d32:	f002 f80d 	bl	800bd50 <HAL_DMA_IRQHandler>
 8009d36:	bf00      	nop
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	bf00      	nop
 8009d3c:	200013c0 	.word	0x200013c0

08009d40 <_getpid>:
 8009d40:	b480      	push	{r7}
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	2301      	movs	r3, #1
 8009d46:	4618      	mov	r0, r3
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <_kill>:
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
 8009d58:	6039      	str	r1, [r7, #0]
 8009d5a:	f00a fc07 	bl	801456c <__errno>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2216      	movs	r2, #22
 8009d62:	601a      	str	r2, [r3, #0]
 8009d64:	f04f 33ff 	mov.w	r3, #4294967295
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3708      	adds	r7, #8
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <_exit>:
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	f04f 31ff 	mov.w	r1, #4294967295
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7ff ffe7 	bl	8009d50 <_kill>
 8009d82:	e7fe      	b.n	8009d82 <_exit+0x12>

08009d84 <_read>:
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b086      	sub	sp, #24
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	607a      	str	r2, [r7, #4]
 8009d90:	2300      	movs	r3, #0
 8009d92:	617b      	str	r3, [r7, #20]
 8009d94:	e00a      	b.n	8009dac <_read+0x28>
 8009d96:	f3af 8000 	nop.w
 8009d9a:	4601      	mov	r1, r0
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	1c5a      	adds	r2, r3, #1
 8009da0:	60ba      	str	r2, [r7, #8]
 8009da2:	b2ca      	uxtb	r2, r1
 8009da4:	701a      	strb	r2, [r3, #0]
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	3301      	adds	r3, #1
 8009daa:	617b      	str	r3, [r7, #20]
 8009dac:	697a      	ldr	r2, [r7, #20]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	dbf0      	blt.n	8009d96 <_read+0x12>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	4618      	mov	r0, r3
 8009db8:	3718      	adds	r7, #24
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}

08009dbe <_write>:
 8009dbe:	b580      	push	{r7, lr}
 8009dc0:	b086      	sub	sp, #24
 8009dc2:	af00      	add	r7, sp, #0
 8009dc4:	60f8      	str	r0, [r7, #12]
 8009dc6:	60b9      	str	r1, [r7, #8]
 8009dc8:	607a      	str	r2, [r7, #4]
 8009dca:	2300      	movs	r3, #0
 8009dcc:	617b      	str	r3, [r7, #20]
 8009dce:	e009      	b.n	8009de4 <_write+0x26>
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	1c5a      	adds	r2, r3, #1
 8009dd4:	60ba      	str	r2, [r7, #8]
 8009dd6:	781b      	ldrb	r3, [r3, #0]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f3af 8000 	nop.w
 8009dde:	697b      	ldr	r3, [r7, #20]
 8009de0:	3301      	adds	r3, #1
 8009de2:	617b      	str	r3, [r7, #20]
 8009de4:	697a      	ldr	r2, [r7, #20]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	dbf1      	blt.n	8009dd0 <_write+0x12>
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4618      	mov	r0, r3
 8009df0:	3718      	adds	r7, #24
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <_close>:
 8009df6:	b480      	push	{r7}
 8009df8:	b083      	sub	sp, #12
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
 8009dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8009e02:	4618      	mov	r0, r3
 8009e04:	370c      	adds	r7, #12
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <_fstat>:
 8009e0e:	b480      	push	{r7}
 8009e10:	b083      	sub	sp, #12
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
 8009e16:	6039      	str	r1, [r7, #0]
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009e1e:	605a      	str	r2, [r3, #4]
 8009e20:	2300      	movs	r3, #0
 8009e22:	4618      	mov	r0, r3
 8009e24:	370c      	adds	r7, #12
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr

08009e2e <_isatty>:
 8009e2e:	b480      	push	{r7}
 8009e30:	b083      	sub	sp, #12
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
 8009e36:	2301      	movs	r3, #1
 8009e38:	4618      	mov	r0, r3
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <_lseek>:
 8009e44:	b480      	push	{r7}
 8009e46:	b085      	sub	sp, #20
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	607a      	str	r2, [r7, #4]
 8009e50:	2300      	movs	r3, #0
 8009e52:	4618      	mov	r0, r3
 8009e54:	3714      	adds	r7, #20
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
	...

08009e60 <_sbrk>:
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b086      	sub	sp, #24
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	4a14      	ldr	r2, [pc, #80]	; (8009ebc <_sbrk+0x5c>)
 8009e6a:	4b15      	ldr	r3, [pc, #84]	; (8009ec0 <_sbrk+0x60>)
 8009e6c:	1ad3      	subs	r3, r2, r3
 8009e6e:	617b      	str	r3, [r7, #20]
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	613b      	str	r3, [r7, #16]
 8009e74:	4b13      	ldr	r3, [pc, #76]	; (8009ec4 <_sbrk+0x64>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d102      	bne.n	8009e82 <_sbrk+0x22>
 8009e7c:	4b11      	ldr	r3, [pc, #68]	; (8009ec4 <_sbrk+0x64>)
 8009e7e:	4a12      	ldr	r2, [pc, #72]	; (8009ec8 <_sbrk+0x68>)
 8009e80:	601a      	str	r2, [r3, #0]
 8009e82:	4b10      	ldr	r3, [pc, #64]	; (8009ec4 <_sbrk+0x64>)
 8009e84:	681a      	ldr	r2, [r3, #0]
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	4413      	add	r3, r2
 8009e8a:	693a      	ldr	r2, [r7, #16]
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d207      	bcs.n	8009ea0 <_sbrk+0x40>
 8009e90:	f00a fb6c 	bl	801456c <__errno>
 8009e94:	4603      	mov	r3, r0
 8009e96:	220c      	movs	r2, #12
 8009e98:	601a      	str	r2, [r3, #0]
 8009e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8009e9e:	e009      	b.n	8009eb4 <_sbrk+0x54>
 8009ea0:	4b08      	ldr	r3, [pc, #32]	; (8009ec4 <_sbrk+0x64>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	60fb      	str	r3, [r7, #12]
 8009ea6:	4b07      	ldr	r3, [pc, #28]	; (8009ec4 <_sbrk+0x64>)
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	4413      	add	r3, r2
 8009eae:	4a05      	ldr	r2, [pc, #20]	; (8009ec4 <_sbrk+0x64>)
 8009eb0:	6013      	str	r3, [r2, #0]
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3718      	adds	r7, #24
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}
 8009ebc:	20020000 	.word	0x20020000
 8009ec0:	00000800 	.word	0x00000800
 8009ec4:	20001184 	.word	0x20001184
 8009ec8:	2000a348 	.word	0x2000a348

08009ecc <SystemInit>:
 8009ecc:	b480      	push	{r7}
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	4b06      	ldr	r3, [pc, #24]	; (8009eec <SystemInit+0x20>)
 8009ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ed6:	4a05      	ldr	r2, [pc, #20]	; (8009eec <SystemInit+0x20>)
 8009ed8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009edc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8009ee0:	bf00      	nop
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr
 8009eea:	bf00      	nop
 8009eec:	e000ed00 	.word	0xe000ed00

08009ef0 <MX_TIM2_Init>:
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b086      	sub	sp, #24
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	f107 0308 	add.w	r3, r7, #8
 8009efa:	2200      	movs	r2, #0
 8009efc:	601a      	str	r2, [r3, #0]
 8009efe:	605a      	str	r2, [r3, #4]
 8009f00:	609a      	str	r2, [r3, #8]
 8009f02:	60da      	str	r2, [r3, #12]
 8009f04:	463b      	mov	r3, r7
 8009f06:	2200      	movs	r2, #0
 8009f08:	601a      	str	r2, [r3, #0]
 8009f0a:	605a      	str	r2, [r3, #4]
 8009f0c:	4b1e      	ldr	r3, [pc, #120]	; (8009f88 <MX_TIM2_Init+0x98>)
 8009f0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009f12:	601a      	str	r2, [r3, #0]
 8009f14:	4b1c      	ldr	r3, [pc, #112]	; (8009f88 <MX_TIM2_Init+0x98>)
 8009f16:	f240 3247 	movw	r2, #839	; 0x347
 8009f1a:	605a      	str	r2, [r3, #4]
 8009f1c:	4b1a      	ldr	r3, [pc, #104]	; (8009f88 <MX_TIM2_Init+0x98>)
 8009f1e:	2200      	movs	r2, #0
 8009f20:	609a      	str	r2, [r3, #8]
 8009f22:	4b19      	ldr	r3, [pc, #100]	; (8009f88 <MX_TIM2_Init+0x98>)
 8009f24:	f04f 32ff 	mov.w	r2, #4294967295
 8009f28:	60da      	str	r2, [r3, #12]
 8009f2a:	4b17      	ldr	r3, [pc, #92]	; (8009f88 <MX_TIM2_Init+0x98>)
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	611a      	str	r2, [r3, #16]
 8009f30:	4b15      	ldr	r3, [pc, #84]	; (8009f88 <MX_TIM2_Init+0x98>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	619a      	str	r2, [r3, #24]
 8009f36:	4814      	ldr	r0, [pc, #80]	; (8009f88 <MX_TIM2_Init+0x98>)
 8009f38:	f003 fa29 	bl	800d38e <HAL_TIM_Base_Init>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d001      	beq.n	8009f46 <MX_TIM2_Init+0x56>
 8009f42:	f7ff fcfd 	bl	8009940 <Error_Handler>
 8009f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f4a:	60bb      	str	r3, [r7, #8]
 8009f4c:	f107 0308 	add.w	r3, r7, #8
 8009f50:	4619      	mov	r1, r3
 8009f52:	480d      	ldr	r0, [pc, #52]	; (8009f88 <MX_TIM2_Init+0x98>)
 8009f54:	f003 fda4 	bl	800daa0 <HAL_TIM_ConfigClockSource>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d001      	beq.n	8009f62 <MX_TIM2_Init+0x72>
 8009f5e:	f7ff fcef 	bl	8009940 <Error_Handler>
 8009f62:	2300      	movs	r3, #0
 8009f64:	603b      	str	r3, [r7, #0]
 8009f66:	2300      	movs	r3, #0
 8009f68:	607b      	str	r3, [r7, #4]
 8009f6a:	463b      	mov	r3, r7
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	4806      	ldr	r0, [pc, #24]	; (8009f88 <MX_TIM2_Init+0x98>)
 8009f70:	f004 f970 	bl	800e254 <HAL_TIMEx_MasterConfigSynchronization>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <MX_TIM2_Init+0x8e>
 8009f7a:	f7ff fce1 	bl	8009940 <Error_Handler>
 8009f7e:	bf00      	nop
 8009f80:	3718      	adds	r7, #24
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	20001188 	.word	0x20001188

08009f8c <MX_TIM3_Init>:
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b086      	sub	sp, #24
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	f107 0308 	add.w	r3, r7, #8
 8009f96:	2200      	movs	r2, #0
 8009f98:	601a      	str	r2, [r3, #0]
 8009f9a:	605a      	str	r2, [r3, #4]
 8009f9c:	609a      	str	r2, [r3, #8]
 8009f9e:	60da      	str	r2, [r3, #12]
 8009fa0:	463b      	mov	r3, r7
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	601a      	str	r2, [r3, #0]
 8009fa6:	605a      	str	r2, [r3, #4]
 8009fa8:	4b1d      	ldr	r3, [pc, #116]	; (800a020 <MX_TIM3_Init+0x94>)
 8009faa:	4a1e      	ldr	r2, [pc, #120]	; (800a024 <MX_TIM3_Init+0x98>)
 8009fac:	601a      	str	r2, [r3, #0]
 8009fae:	4b1c      	ldr	r3, [pc, #112]	; (800a020 <MX_TIM3_Init+0x94>)
 8009fb0:	f244 129f 	movw	r2, #16799	; 0x419f
 8009fb4:	605a      	str	r2, [r3, #4]
 8009fb6:	4b1a      	ldr	r3, [pc, #104]	; (800a020 <MX_TIM3_Init+0x94>)
 8009fb8:	2200      	movs	r2, #0
 8009fba:	609a      	str	r2, [r3, #8]
 8009fbc:	4b18      	ldr	r3, [pc, #96]	; (800a020 <MX_TIM3_Init+0x94>)
 8009fbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009fc2:	60da      	str	r2, [r3, #12]
 8009fc4:	4b16      	ldr	r3, [pc, #88]	; (800a020 <MX_TIM3_Init+0x94>)
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	611a      	str	r2, [r3, #16]
 8009fca:	4b15      	ldr	r3, [pc, #84]	; (800a020 <MX_TIM3_Init+0x94>)
 8009fcc:	2200      	movs	r2, #0
 8009fce:	619a      	str	r2, [r3, #24]
 8009fd0:	4813      	ldr	r0, [pc, #76]	; (800a020 <MX_TIM3_Init+0x94>)
 8009fd2:	f003 f9dc 	bl	800d38e <HAL_TIM_Base_Init>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d001      	beq.n	8009fe0 <MX_TIM3_Init+0x54>
 8009fdc:	f7ff fcb0 	bl	8009940 <Error_Handler>
 8009fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fe4:	60bb      	str	r3, [r7, #8]
 8009fe6:	f107 0308 	add.w	r3, r7, #8
 8009fea:	4619      	mov	r1, r3
 8009fec:	480c      	ldr	r0, [pc, #48]	; (800a020 <MX_TIM3_Init+0x94>)
 8009fee:	f003 fd57 	bl	800daa0 <HAL_TIM_ConfigClockSource>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d001      	beq.n	8009ffc <MX_TIM3_Init+0x70>
 8009ff8:	f7ff fca2 	bl	8009940 <Error_Handler>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	603b      	str	r3, [r7, #0]
 800a000:	2300      	movs	r3, #0
 800a002:	607b      	str	r3, [r7, #4]
 800a004:	463b      	mov	r3, r7
 800a006:	4619      	mov	r1, r3
 800a008:	4805      	ldr	r0, [pc, #20]	; (800a020 <MX_TIM3_Init+0x94>)
 800a00a:	f004 f923 	bl	800e254 <HAL_TIMEx_MasterConfigSynchronization>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <MX_TIM3_Init+0x8c>
 800a014:	f7ff fc94 	bl	8009940 <Error_Handler>
 800a018:	bf00      	nop
 800a01a:	3718      	adds	r7, #24
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	200011d0 	.word	0x200011d0
 800a024:	40000400 	.word	0x40000400

0800a028 <MX_TIM4_Init>:
 800a028:	b580      	push	{r7, lr}
 800a02a:	b08e      	sub	sp, #56	; 0x38
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a032:	2200      	movs	r2, #0
 800a034:	601a      	str	r2, [r3, #0]
 800a036:	605a      	str	r2, [r3, #4]
 800a038:	609a      	str	r2, [r3, #8]
 800a03a:	60da      	str	r2, [r3, #12]
 800a03c:	f107 0320 	add.w	r3, r7, #32
 800a040:	2200      	movs	r2, #0
 800a042:	601a      	str	r2, [r3, #0]
 800a044:	605a      	str	r2, [r3, #4]
 800a046:	1d3b      	adds	r3, r7, #4
 800a048:	2200      	movs	r2, #0
 800a04a:	601a      	str	r2, [r3, #0]
 800a04c:	605a      	str	r2, [r3, #4]
 800a04e:	609a      	str	r2, [r3, #8]
 800a050:	60da      	str	r2, [r3, #12]
 800a052:	611a      	str	r2, [r3, #16]
 800a054:	615a      	str	r2, [r3, #20]
 800a056:	619a      	str	r2, [r3, #24]
 800a058:	4b37      	ldr	r3, [pc, #220]	; (800a138 <MX_TIM4_Init+0x110>)
 800a05a:	4a38      	ldr	r2, [pc, #224]	; (800a13c <MX_TIM4_Init+0x114>)
 800a05c:	601a      	str	r2, [r3, #0]
 800a05e:	4b36      	ldr	r3, [pc, #216]	; (800a138 <MX_TIM4_Init+0x110>)
 800a060:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800a064:	605a      	str	r2, [r3, #4]
 800a066:	4b34      	ldr	r3, [pc, #208]	; (800a138 <MX_TIM4_Init+0x110>)
 800a068:	2200      	movs	r2, #0
 800a06a:	609a      	str	r2, [r3, #8]
 800a06c:	4b32      	ldr	r3, [pc, #200]	; (800a138 <MX_TIM4_Init+0x110>)
 800a06e:	22fe      	movs	r2, #254	; 0xfe
 800a070:	60da      	str	r2, [r3, #12]
 800a072:	4b31      	ldr	r3, [pc, #196]	; (800a138 <MX_TIM4_Init+0x110>)
 800a074:	2200      	movs	r2, #0
 800a076:	611a      	str	r2, [r3, #16]
 800a078:	4b2f      	ldr	r3, [pc, #188]	; (800a138 <MX_TIM4_Init+0x110>)
 800a07a:	2200      	movs	r2, #0
 800a07c:	619a      	str	r2, [r3, #24]
 800a07e:	482e      	ldr	r0, [pc, #184]	; (800a138 <MX_TIM4_Init+0x110>)
 800a080:	f003 f985 	bl	800d38e <HAL_TIM_Base_Init>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d001      	beq.n	800a08e <MX_TIM4_Init+0x66>
 800a08a:	f7ff fc59 	bl	8009940 <Error_Handler>
 800a08e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a092:	62bb      	str	r3, [r7, #40]	; 0x28
 800a094:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a098:	4619      	mov	r1, r3
 800a09a:	4827      	ldr	r0, [pc, #156]	; (800a138 <MX_TIM4_Init+0x110>)
 800a09c:	f003 fd00 	bl	800daa0 <HAL_TIM_ConfigClockSource>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d001      	beq.n	800a0aa <MX_TIM4_Init+0x82>
 800a0a6:	f7ff fc4b 	bl	8009940 <Error_Handler>
 800a0aa:	4823      	ldr	r0, [pc, #140]	; (800a138 <MX_TIM4_Init+0x110>)
 800a0ac:	f003 fa2e 	bl	800d50c <HAL_TIM_PWM_Init>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d001      	beq.n	800a0ba <MX_TIM4_Init+0x92>
 800a0b6:	f7ff fc43 	bl	8009940 <Error_Handler>
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	623b      	str	r3, [r7, #32]
 800a0be:	2300      	movs	r3, #0
 800a0c0:	627b      	str	r3, [r7, #36]	; 0x24
 800a0c2:	f107 0320 	add.w	r3, r7, #32
 800a0c6:	4619      	mov	r1, r3
 800a0c8:	481b      	ldr	r0, [pc, #108]	; (800a138 <MX_TIM4_Init+0x110>)
 800a0ca:	f004 f8c3 	bl	800e254 <HAL_TIMEx_MasterConfigSynchronization>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <MX_TIM4_Init+0xb0>
 800a0d4:	f7ff fc34 	bl	8009940 <Error_Handler>
 800a0d8:	2360      	movs	r3, #96	; 0x60
 800a0da:	607b      	str	r3, [r7, #4]
 800a0dc:	2300      	movs	r3, #0
 800a0de:	60bb      	str	r3, [r7, #8]
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	60fb      	str	r3, [r7, #12]
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	617b      	str	r3, [r7, #20]
 800a0e8:	1d3b      	adds	r3, r7, #4
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	4812      	ldr	r0, [pc, #72]	; (800a138 <MX_TIM4_Init+0x110>)
 800a0f0:	f003 fc14 	bl	800d91c <HAL_TIM_PWM_ConfigChannel>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <MX_TIM4_Init+0xd6>
 800a0fa:	f7ff fc21 	bl	8009940 <Error_Handler>
 800a0fe:	1d3b      	adds	r3, r7, #4
 800a100:	2204      	movs	r2, #4
 800a102:	4619      	mov	r1, r3
 800a104:	480c      	ldr	r0, [pc, #48]	; (800a138 <MX_TIM4_Init+0x110>)
 800a106:	f003 fc09 	bl	800d91c <HAL_TIM_PWM_ConfigChannel>
 800a10a:	4603      	mov	r3, r0
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d001      	beq.n	800a114 <MX_TIM4_Init+0xec>
 800a110:	f7ff fc16 	bl	8009940 <Error_Handler>
 800a114:	1d3b      	adds	r3, r7, #4
 800a116:	2208      	movs	r2, #8
 800a118:	4619      	mov	r1, r3
 800a11a:	4807      	ldr	r0, [pc, #28]	; (800a138 <MX_TIM4_Init+0x110>)
 800a11c:	f003 fbfe 	bl	800d91c <HAL_TIM_PWM_ConfigChannel>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d001      	beq.n	800a12a <MX_TIM4_Init+0x102>
 800a126:	f7ff fc0b 	bl	8009940 <Error_Handler>
 800a12a:	4803      	ldr	r0, [pc, #12]	; (800a138 <MX_TIM4_Init+0x110>)
 800a12c:	f000 f988 	bl	800a440 <HAL_TIM_MspPostInit>
 800a130:	bf00      	nop
 800a132:	3738      	adds	r7, #56	; 0x38
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}
 800a138:	20001218 	.word	0x20001218
 800a13c:	40000800 	.word	0x40000800

0800a140 <MX_TIM5_Init>:
 800a140:	b580      	push	{r7, lr}
 800a142:	b08c      	sub	sp, #48	; 0x30
 800a144:	af00      	add	r7, sp, #0
 800a146:	f107 030c 	add.w	r3, r7, #12
 800a14a:	2224      	movs	r2, #36	; 0x24
 800a14c:	2100      	movs	r1, #0
 800a14e:	4618      	mov	r0, r3
 800a150:	f00a fb46 	bl	80147e0 <memset>
 800a154:	1d3b      	adds	r3, r7, #4
 800a156:	2200      	movs	r2, #0
 800a158:	601a      	str	r2, [r3, #0]
 800a15a:	605a      	str	r2, [r3, #4]
 800a15c:	4b20      	ldr	r3, [pc, #128]	; (800a1e0 <MX_TIM5_Init+0xa0>)
 800a15e:	4a21      	ldr	r2, [pc, #132]	; (800a1e4 <MX_TIM5_Init+0xa4>)
 800a160:	601a      	str	r2, [r3, #0]
 800a162:	4b1f      	ldr	r3, [pc, #124]	; (800a1e0 <MX_TIM5_Init+0xa0>)
 800a164:	2200      	movs	r2, #0
 800a166:	605a      	str	r2, [r3, #4]
 800a168:	4b1d      	ldr	r3, [pc, #116]	; (800a1e0 <MX_TIM5_Init+0xa0>)
 800a16a:	2200      	movs	r2, #0
 800a16c:	609a      	str	r2, [r3, #8]
 800a16e:	4b1c      	ldr	r3, [pc, #112]	; (800a1e0 <MX_TIM5_Init+0xa0>)
 800a170:	f04f 32ff 	mov.w	r2, #4294967295
 800a174:	60da      	str	r2, [r3, #12]
 800a176:	4b1a      	ldr	r3, [pc, #104]	; (800a1e0 <MX_TIM5_Init+0xa0>)
 800a178:	2200      	movs	r2, #0
 800a17a:	611a      	str	r2, [r3, #16]
 800a17c:	4b18      	ldr	r3, [pc, #96]	; (800a1e0 <MX_TIM5_Init+0xa0>)
 800a17e:	2200      	movs	r2, #0
 800a180:	619a      	str	r2, [r3, #24]
 800a182:	2301      	movs	r3, #1
 800a184:	60fb      	str	r3, [r7, #12]
 800a186:	2300      	movs	r3, #0
 800a188:	613b      	str	r3, [r7, #16]
 800a18a:	2301      	movs	r3, #1
 800a18c:	617b      	str	r3, [r7, #20]
 800a18e:	2300      	movs	r3, #0
 800a190:	61bb      	str	r3, [r7, #24]
 800a192:	2300      	movs	r3, #0
 800a194:	61fb      	str	r3, [r7, #28]
 800a196:	2300      	movs	r3, #0
 800a198:	623b      	str	r3, [r7, #32]
 800a19a:	2301      	movs	r3, #1
 800a19c:	627b      	str	r3, [r7, #36]	; 0x24
 800a19e:	2300      	movs	r3, #0
 800a1a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1a6:	f107 030c 	add.w	r3, r7, #12
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	480c      	ldr	r0, [pc, #48]	; (800a1e0 <MX_TIM5_Init+0xa0>)
 800a1ae:	f003 fa06 	bl	800d5be <HAL_TIM_Encoder_Init>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d001      	beq.n	800a1bc <MX_TIM5_Init+0x7c>
 800a1b8:	f7ff fbc2 	bl	8009940 <Error_Handler>
 800a1bc:	2300      	movs	r3, #0
 800a1be:	607b      	str	r3, [r7, #4]
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	60bb      	str	r3, [r7, #8]
 800a1c4:	1d3b      	adds	r3, r7, #4
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	4805      	ldr	r0, [pc, #20]	; (800a1e0 <MX_TIM5_Init+0xa0>)
 800a1ca:	f004 f843 	bl	800e254 <HAL_TIMEx_MasterConfigSynchronization>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d001      	beq.n	800a1d8 <MX_TIM5_Init+0x98>
 800a1d4:	f7ff fbb4 	bl	8009940 <Error_Handler>
 800a1d8:	bf00      	nop
 800a1da:	3730      	adds	r7, #48	; 0x30
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	20001260 	.word	0x20001260
 800a1e4:	40000c00 	.word	0x40000c00

0800a1e8 <MX_TIM9_Init>:
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	463b      	mov	r3, r7
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	601a      	str	r2, [r3, #0]
 800a1f4:	605a      	str	r2, [r3, #4]
 800a1f6:	609a      	str	r2, [r3, #8]
 800a1f8:	60da      	str	r2, [r3, #12]
 800a1fa:	4b16      	ldr	r3, [pc, #88]	; (800a254 <MX_TIM9_Init+0x6c>)
 800a1fc:	4a16      	ldr	r2, [pc, #88]	; (800a258 <MX_TIM9_Init+0x70>)
 800a1fe:	601a      	str	r2, [r3, #0]
 800a200:	4b14      	ldr	r3, [pc, #80]	; (800a254 <MX_TIM9_Init+0x6c>)
 800a202:	f244 129f 	movw	r2, #16799	; 0x419f
 800a206:	605a      	str	r2, [r3, #4]
 800a208:	4b12      	ldr	r3, [pc, #72]	; (800a254 <MX_TIM9_Init+0x6c>)
 800a20a:	2200      	movs	r2, #0
 800a20c:	609a      	str	r2, [r3, #8]
 800a20e:	4b11      	ldr	r3, [pc, #68]	; (800a254 <MX_TIM9_Init+0x6c>)
 800a210:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a214:	60da      	str	r2, [r3, #12]
 800a216:	4b0f      	ldr	r3, [pc, #60]	; (800a254 <MX_TIM9_Init+0x6c>)
 800a218:	2200      	movs	r2, #0
 800a21a:	611a      	str	r2, [r3, #16]
 800a21c:	4b0d      	ldr	r3, [pc, #52]	; (800a254 <MX_TIM9_Init+0x6c>)
 800a21e:	2200      	movs	r2, #0
 800a220:	619a      	str	r2, [r3, #24]
 800a222:	480c      	ldr	r0, [pc, #48]	; (800a254 <MX_TIM9_Init+0x6c>)
 800a224:	f003 f8b3 	bl	800d38e <HAL_TIM_Base_Init>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d001      	beq.n	800a232 <MX_TIM9_Init+0x4a>
 800a22e:	f7ff fb87 	bl	8009940 <Error_Handler>
 800a232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a236:	603b      	str	r3, [r7, #0]
 800a238:	463b      	mov	r3, r7
 800a23a:	4619      	mov	r1, r3
 800a23c:	4805      	ldr	r0, [pc, #20]	; (800a254 <MX_TIM9_Init+0x6c>)
 800a23e:	f003 fc2f 	bl	800daa0 <HAL_TIM_ConfigClockSource>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d001      	beq.n	800a24c <MX_TIM9_Init+0x64>
 800a248:	f7ff fb7a 	bl	8009940 <Error_Handler>
 800a24c:	bf00      	nop
 800a24e:	3710      	adds	r7, #16
 800a250:	46bd      	mov	sp, r7
 800a252:	bd80      	pop	{r7, pc}
 800a254:	200012a8 	.word	0x200012a8
 800a258:	40014000 	.word	0x40014000

0800a25c <MX_TIM14_Init>:
 800a25c:	b580      	push	{r7, lr}
 800a25e:	af00      	add	r7, sp, #0
 800a260:	4b0e      	ldr	r3, [pc, #56]	; (800a29c <MX_TIM14_Init+0x40>)
 800a262:	4a0f      	ldr	r2, [pc, #60]	; (800a2a0 <MX_TIM14_Init+0x44>)
 800a264:	601a      	str	r2, [r3, #0]
 800a266:	4b0d      	ldr	r3, [pc, #52]	; (800a29c <MX_TIM14_Init+0x40>)
 800a268:	f240 3247 	movw	r2, #839	; 0x347
 800a26c:	605a      	str	r2, [r3, #4]
 800a26e:	4b0b      	ldr	r3, [pc, #44]	; (800a29c <MX_TIM14_Init+0x40>)
 800a270:	2200      	movs	r2, #0
 800a272:	609a      	str	r2, [r3, #8]
 800a274:	4b09      	ldr	r3, [pc, #36]	; (800a29c <MX_TIM14_Init+0x40>)
 800a276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a27a:	60da      	str	r2, [r3, #12]
 800a27c:	4b07      	ldr	r3, [pc, #28]	; (800a29c <MX_TIM14_Init+0x40>)
 800a27e:	2200      	movs	r2, #0
 800a280:	611a      	str	r2, [r3, #16]
 800a282:	4b06      	ldr	r3, [pc, #24]	; (800a29c <MX_TIM14_Init+0x40>)
 800a284:	2200      	movs	r2, #0
 800a286:	619a      	str	r2, [r3, #24]
 800a288:	4804      	ldr	r0, [pc, #16]	; (800a29c <MX_TIM14_Init+0x40>)
 800a28a:	f003 f880 	bl	800d38e <HAL_TIM_Base_Init>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d001      	beq.n	800a298 <MX_TIM14_Init+0x3c>
 800a294:	f7ff fb54 	bl	8009940 <Error_Handler>
 800a298:	bf00      	nop
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	200012f0 	.word	0x200012f0
 800a2a0:	40002000 	.word	0x40002000

0800a2a4 <HAL_TIM_Base_MspInit>:
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b088      	sub	sp, #32
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2b4:	d10e      	bne.n	800a2d4 <HAL_TIM_Base_MspInit+0x30>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	61fb      	str	r3, [r7, #28]
 800a2ba:	4b38      	ldr	r3, [pc, #224]	; (800a39c <HAL_TIM_Base_MspInit+0xf8>)
 800a2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2be:	4a37      	ldr	r2, [pc, #220]	; (800a39c <HAL_TIM_Base_MspInit+0xf8>)
 800a2c0:	f043 0301 	orr.w	r3, r3, #1
 800a2c4:	6413      	str	r3, [r2, #64]	; 0x40
 800a2c6:	4b35      	ldr	r3, [pc, #212]	; (800a39c <HAL_TIM_Base_MspInit+0xf8>)
 800a2c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ca:	f003 0301 	and.w	r3, r3, #1
 800a2ce:	61fb      	str	r3, [r7, #28]
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	e05e      	b.n	800a392 <HAL_TIM_Base_MspInit+0xee>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a31      	ldr	r2, [pc, #196]	; (800a3a0 <HAL_TIM_Base_MspInit+0xfc>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d116      	bne.n	800a30c <HAL_TIM_Base_MspInit+0x68>
 800a2de:	2300      	movs	r3, #0
 800a2e0:	61bb      	str	r3, [r7, #24]
 800a2e2:	4b2e      	ldr	r3, [pc, #184]	; (800a39c <HAL_TIM_Base_MspInit+0xf8>)
 800a2e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e6:	4a2d      	ldr	r2, [pc, #180]	; (800a39c <HAL_TIM_Base_MspInit+0xf8>)
 800a2e8:	f043 0302 	orr.w	r3, r3, #2
 800a2ec:	6413      	str	r3, [r2, #64]	; 0x40
 800a2ee:	4b2b      	ldr	r3, [pc, #172]	; (800a39c <HAL_TIM_Base_MspInit+0xf8>)
 800a2f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f2:	f003 0302 	and.w	r3, r3, #2
 800a2f6:	61bb      	str	r3, [r7, #24]
 800a2f8:	69bb      	ldr	r3, [r7, #24]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	2105      	movs	r1, #5
 800a2fe:	201d      	movs	r0, #29
 800a300:	f001 fc32 	bl	800bb68 <HAL_NVIC_SetPriority>
 800a304:	201d      	movs	r0, #29
 800a306:	f001 fc4b 	bl	800bba0 <HAL_NVIC_EnableIRQ>
 800a30a:	e042      	b.n	800a392 <HAL_TIM_Base_MspInit+0xee>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a24      	ldr	r2, [pc, #144]	; (800a3a4 <HAL_TIM_Base_MspInit+0x100>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d10e      	bne.n	800a334 <HAL_TIM_Base_MspInit+0x90>
 800a316:	2300      	movs	r3, #0
 800a318:	617b      	str	r3, [r7, #20]
 800a31a:	4b20      	ldr	r3, [pc, #128]	; (800a39c <HAL_TIM_Base_MspInit+0xf8>)
 800a31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31e:	4a1f      	ldr	r2, [pc, #124]	; (800a39c <HAL_TIM_Base_MspInit+0xf8>)
 800a320:	f043 0304 	orr.w	r3, r3, #4
 800a324:	6413      	str	r3, [r2, #64]	; 0x40
 800a326:	4b1d      	ldr	r3, [pc, #116]	; (800a39c <HAL_TIM_Base_MspInit+0xf8>)
 800a328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32a:	f003 0304 	and.w	r3, r3, #4
 800a32e:	617b      	str	r3, [r7, #20]
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	e02e      	b.n	800a392 <HAL_TIM_Base_MspInit+0xee>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a1b      	ldr	r2, [pc, #108]	; (800a3a8 <HAL_TIM_Base_MspInit+0x104>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d116      	bne.n	800a36c <HAL_TIM_Base_MspInit+0xc8>
 800a33e:	2300      	movs	r3, #0
 800a340:	613b      	str	r3, [r7, #16]
 800a342:	4b16      	ldr	r3, [pc, #88]	; (800a39c <HAL_TIM_Base_MspInit+0xf8>)
 800a344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a346:	4a15      	ldr	r2, [pc, #84]	; (800a39c <HAL_TIM_Base_MspInit+0xf8>)
 800a348:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a34c:	6453      	str	r3, [r2, #68]	; 0x44
 800a34e:	4b13      	ldr	r3, [pc, #76]	; (800a39c <HAL_TIM_Base_MspInit+0xf8>)
 800a350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a352:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a356:	613b      	str	r3, [r7, #16]
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	2200      	movs	r2, #0
 800a35c:	2105      	movs	r1, #5
 800a35e:	2018      	movs	r0, #24
 800a360:	f001 fc02 	bl	800bb68 <HAL_NVIC_SetPriority>
 800a364:	2018      	movs	r0, #24
 800a366:	f001 fc1b 	bl	800bba0 <HAL_NVIC_EnableIRQ>
 800a36a:	e012      	b.n	800a392 <HAL_TIM_Base_MspInit+0xee>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a0e      	ldr	r2, [pc, #56]	; (800a3ac <HAL_TIM_Base_MspInit+0x108>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d10d      	bne.n	800a392 <HAL_TIM_Base_MspInit+0xee>
 800a376:	2300      	movs	r3, #0
 800a378:	60fb      	str	r3, [r7, #12]
 800a37a:	4b08      	ldr	r3, [pc, #32]	; (800a39c <HAL_TIM_Base_MspInit+0xf8>)
 800a37c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a37e:	4a07      	ldr	r2, [pc, #28]	; (800a39c <HAL_TIM_Base_MspInit+0xf8>)
 800a380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a384:	6413      	str	r3, [r2, #64]	; 0x40
 800a386:	4b05      	ldr	r3, [pc, #20]	; (800a39c <HAL_TIM_Base_MspInit+0xf8>)
 800a388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a38a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a38e:	60fb      	str	r3, [r7, #12]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	bf00      	nop
 800a394:	3720      	adds	r7, #32
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}
 800a39a:	bf00      	nop
 800a39c:	40023800 	.word	0x40023800
 800a3a0:	40000400 	.word	0x40000400
 800a3a4:	40000800 	.word	0x40000800
 800a3a8:	40014000 	.word	0x40014000
 800a3ac:	40002000 	.word	0x40002000

0800a3b0 <HAL_TIM_Encoder_MspInit>:
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b08a      	sub	sp, #40	; 0x28
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	f107 0314 	add.w	r3, r7, #20
 800a3bc:	2200      	movs	r2, #0
 800a3be:	601a      	str	r2, [r3, #0]
 800a3c0:	605a      	str	r2, [r3, #4]
 800a3c2:	609a      	str	r2, [r3, #8]
 800a3c4:	60da      	str	r2, [r3, #12]
 800a3c6:	611a      	str	r2, [r3, #16]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a19      	ldr	r2, [pc, #100]	; (800a434 <HAL_TIM_Encoder_MspInit+0x84>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d12b      	bne.n	800a42a <HAL_TIM_Encoder_MspInit+0x7a>
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	613b      	str	r3, [r7, #16]
 800a3d6:	4b18      	ldr	r3, [pc, #96]	; (800a438 <HAL_TIM_Encoder_MspInit+0x88>)
 800a3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3da:	4a17      	ldr	r2, [pc, #92]	; (800a438 <HAL_TIM_Encoder_MspInit+0x88>)
 800a3dc:	f043 0308 	orr.w	r3, r3, #8
 800a3e0:	6413      	str	r3, [r2, #64]	; 0x40
 800a3e2:	4b15      	ldr	r3, [pc, #84]	; (800a438 <HAL_TIM_Encoder_MspInit+0x88>)
 800a3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e6:	f003 0308 	and.w	r3, r3, #8
 800a3ea:	613b      	str	r3, [r7, #16]
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	60fb      	str	r3, [r7, #12]
 800a3f2:	4b11      	ldr	r3, [pc, #68]	; (800a438 <HAL_TIM_Encoder_MspInit+0x88>)
 800a3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3f6:	4a10      	ldr	r2, [pc, #64]	; (800a438 <HAL_TIM_Encoder_MspInit+0x88>)
 800a3f8:	f043 0301 	orr.w	r3, r3, #1
 800a3fc:	6313      	str	r3, [r2, #48]	; 0x30
 800a3fe:	4b0e      	ldr	r3, [pc, #56]	; (800a438 <HAL_TIM_Encoder_MspInit+0x88>)
 800a400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a402:	f003 0301 	and.w	r3, r3, #1
 800a406:	60fb      	str	r3, [r7, #12]
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2303      	movs	r3, #3
 800a40c:	617b      	str	r3, [r7, #20]
 800a40e:	2302      	movs	r3, #2
 800a410:	61bb      	str	r3, [r7, #24]
 800a412:	2300      	movs	r3, #0
 800a414:	61fb      	str	r3, [r7, #28]
 800a416:	2300      	movs	r3, #0
 800a418:	623b      	str	r3, [r7, #32]
 800a41a:	2302      	movs	r3, #2
 800a41c:	627b      	str	r3, [r7, #36]	; 0x24
 800a41e:	f107 0314 	add.w	r3, r7, #20
 800a422:	4619      	mov	r1, r3
 800a424:	4805      	ldr	r0, [pc, #20]	; (800a43c <HAL_TIM_Encoder_MspInit+0x8c>)
 800a426:	f001 fecf 	bl	800c1c8 <HAL_GPIO_Init>
 800a42a:	bf00      	nop
 800a42c:	3728      	adds	r7, #40	; 0x28
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	40000c00 	.word	0x40000c00
 800a438:	40023800 	.word	0x40023800
 800a43c:	40020000 	.word	0x40020000

0800a440 <HAL_TIM_MspPostInit>:
 800a440:	b580      	push	{r7, lr}
 800a442:	b088      	sub	sp, #32
 800a444:	af00      	add	r7, sp, #0
 800a446:	6078      	str	r0, [r7, #4]
 800a448:	f107 030c 	add.w	r3, r7, #12
 800a44c:	2200      	movs	r2, #0
 800a44e:	601a      	str	r2, [r3, #0]
 800a450:	605a      	str	r2, [r3, #4]
 800a452:	609a      	str	r2, [r3, #8]
 800a454:	60da      	str	r2, [r3, #12]
 800a456:	611a      	str	r2, [r3, #16]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a12      	ldr	r2, [pc, #72]	; (800a4a8 <HAL_TIM_MspPostInit+0x68>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d11e      	bne.n	800a4a0 <HAL_TIM_MspPostInit+0x60>
 800a462:	2300      	movs	r3, #0
 800a464:	60bb      	str	r3, [r7, #8]
 800a466:	4b11      	ldr	r3, [pc, #68]	; (800a4ac <HAL_TIM_MspPostInit+0x6c>)
 800a468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a46a:	4a10      	ldr	r2, [pc, #64]	; (800a4ac <HAL_TIM_MspPostInit+0x6c>)
 800a46c:	f043 0308 	orr.w	r3, r3, #8
 800a470:	6313      	str	r3, [r2, #48]	; 0x30
 800a472:	4b0e      	ldr	r3, [pc, #56]	; (800a4ac <HAL_TIM_MspPostInit+0x6c>)
 800a474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a476:	f003 0308 	and.w	r3, r3, #8
 800a47a:	60bb      	str	r3, [r7, #8]
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800a482:	60fb      	str	r3, [r7, #12]
 800a484:	2302      	movs	r3, #2
 800a486:	613b      	str	r3, [r7, #16]
 800a488:	2300      	movs	r3, #0
 800a48a:	617b      	str	r3, [r7, #20]
 800a48c:	2300      	movs	r3, #0
 800a48e:	61bb      	str	r3, [r7, #24]
 800a490:	2302      	movs	r3, #2
 800a492:	61fb      	str	r3, [r7, #28]
 800a494:	f107 030c 	add.w	r3, r7, #12
 800a498:	4619      	mov	r1, r3
 800a49a:	4805      	ldr	r0, [pc, #20]	; (800a4b0 <HAL_TIM_MspPostInit+0x70>)
 800a49c:	f001 fe94 	bl	800c1c8 <HAL_GPIO_Init>
 800a4a0:	bf00      	nop
 800a4a2:	3720      	adds	r7, #32
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	bd80      	pop	{r7, pc}
 800a4a8:	40000800 	.word	0x40000800
 800a4ac:	40023800 	.word	0x40023800
 800a4b0:	40020c00 	.word	0x40020c00

0800a4b4 <MX_USART1_UART_Init>:
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	4b11      	ldr	r3, [pc, #68]	; (800a500 <MX_USART1_UART_Init+0x4c>)
 800a4ba:	4a12      	ldr	r2, [pc, #72]	; (800a504 <MX_USART1_UART_Init+0x50>)
 800a4bc:	601a      	str	r2, [r3, #0]
 800a4be:	4b10      	ldr	r3, [pc, #64]	; (800a500 <MX_USART1_UART_Init+0x4c>)
 800a4c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a4c4:	605a      	str	r2, [r3, #4]
 800a4c6:	4b0e      	ldr	r3, [pc, #56]	; (800a500 <MX_USART1_UART_Init+0x4c>)
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	609a      	str	r2, [r3, #8]
 800a4cc:	4b0c      	ldr	r3, [pc, #48]	; (800a500 <MX_USART1_UART_Init+0x4c>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	60da      	str	r2, [r3, #12]
 800a4d2:	4b0b      	ldr	r3, [pc, #44]	; (800a500 <MX_USART1_UART_Init+0x4c>)
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	611a      	str	r2, [r3, #16]
 800a4d8:	4b09      	ldr	r3, [pc, #36]	; (800a500 <MX_USART1_UART_Init+0x4c>)
 800a4da:	220c      	movs	r2, #12
 800a4dc:	615a      	str	r2, [r3, #20]
 800a4de:	4b08      	ldr	r3, [pc, #32]	; (800a500 <MX_USART1_UART_Init+0x4c>)
 800a4e0:	f44f 7240 	mov.w	r2, #768	; 0x300
 800a4e4:	619a      	str	r2, [r3, #24]
 800a4e6:	4b06      	ldr	r3, [pc, #24]	; (800a500 <MX_USART1_UART_Init+0x4c>)
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	61da      	str	r2, [r3, #28]
 800a4ec:	4804      	ldr	r0, [pc, #16]	; (800a500 <MX_USART1_UART_Init+0x4c>)
 800a4ee:	f003 ff41 	bl	800e374 <HAL_UART_Init>
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d001      	beq.n	800a4fc <MX_USART1_UART_Init+0x48>
 800a4f8:	f7ff fa22 	bl	8009940 <Error_Handler>
 800a4fc:	bf00      	nop
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	20001338 	.word	0x20001338
 800a504:	40011000 	.word	0x40011000

0800a508 <MX_USART2_UART_Init>:
 800a508:	b580      	push	{r7, lr}
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	4b11      	ldr	r3, [pc, #68]	; (800a554 <MX_USART2_UART_Init+0x4c>)
 800a50e:	4a12      	ldr	r2, [pc, #72]	; (800a558 <MX_USART2_UART_Init+0x50>)
 800a510:	601a      	str	r2, [r3, #0]
 800a512:	4b10      	ldr	r3, [pc, #64]	; (800a554 <MX_USART2_UART_Init+0x4c>)
 800a514:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 800a518:	605a      	str	r2, [r3, #4]
 800a51a:	4b0e      	ldr	r3, [pc, #56]	; (800a554 <MX_USART2_UART_Init+0x4c>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	609a      	str	r2, [r3, #8]
 800a520:	4b0c      	ldr	r3, [pc, #48]	; (800a554 <MX_USART2_UART_Init+0x4c>)
 800a522:	2200      	movs	r2, #0
 800a524:	60da      	str	r2, [r3, #12]
 800a526:	4b0b      	ldr	r3, [pc, #44]	; (800a554 <MX_USART2_UART_Init+0x4c>)
 800a528:	2200      	movs	r2, #0
 800a52a:	611a      	str	r2, [r3, #16]
 800a52c:	4b09      	ldr	r3, [pc, #36]	; (800a554 <MX_USART2_UART_Init+0x4c>)
 800a52e:	220c      	movs	r2, #12
 800a530:	615a      	str	r2, [r3, #20]
 800a532:	4b08      	ldr	r3, [pc, #32]	; (800a554 <MX_USART2_UART_Init+0x4c>)
 800a534:	2200      	movs	r2, #0
 800a536:	619a      	str	r2, [r3, #24]
 800a538:	4b06      	ldr	r3, [pc, #24]	; (800a554 <MX_USART2_UART_Init+0x4c>)
 800a53a:	2200      	movs	r2, #0
 800a53c:	61da      	str	r2, [r3, #28]
 800a53e:	4805      	ldr	r0, [pc, #20]	; (800a554 <MX_USART2_UART_Init+0x4c>)
 800a540:	f003 ff18 	bl	800e374 <HAL_UART_Init>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d001      	beq.n	800a54e <MX_USART2_UART_Init+0x46>
 800a54a:	f7ff f9f9 	bl	8009940 <Error_Handler>
 800a54e:	bf00      	nop
 800a550:	bd80      	pop	{r7, pc}
 800a552:	bf00      	nop
 800a554:	2000137c 	.word	0x2000137c
 800a558:	40004400 	.word	0x40004400

0800a55c <HAL_UART_MspInit>:
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b08c      	sub	sp, #48	; 0x30
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	f107 031c 	add.w	r3, r7, #28
 800a568:	2200      	movs	r2, #0
 800a56a:	601a      	str	r2, [r3, #0]
 800a56c:	605a      	str	r2, [r3, #4]
 800a56e:	609a      	str	r2, [r3, #8]
 800a570:	60da      	str	r2, [r3, #12]
 800a572:	611a      	str	r2, [r3, #16]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	4a61      	ldr	r2, [pc, #388]	; (800a700 <HAL_UART_MspInit+0x1a4>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	f040 808a 	bne.w	800a694 <HAL_UART_MspInit+0x138>
 800a580:	2300      	movs	r3, #0
 800a582:	61bb      	str	r3, [r7, #24]
 800a584:	4b5f      	ldr	r3, [pc, #380]	; (800a704 <HAL_UART_MspInit+0x1a8>)
 800a586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a588:	4a5e      	ldr	r2, [pc, #376]	; (800a704 <HAL_UART_MspInit+0x1a8>)
 800a58a:	f043 0310 	orr.w	r3, r3, #16
 800a58e:	6453      	str	r3, [r2, #68]	; 0x44
 800a590:	4b5c      	ldr	r3, [pc, #368]	; (800a704 <HAL_UART_MspInit+0x1a8>)
 800a592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a594:	f003 0310 	and.w	r3, r3, #16
 800a598:	61bb      	str	r3, [r7, #24]
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	2300      	movs	r3, #0
 800a59e:	617b      	str	r3, [r7, #20]
 800a5a0:	4b58      	ldr	r3, [pc, #352]	; (800a704 <HAL_UART_MspInit+0x1a8>)
 800a5a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5a4:	4a57      	ldr	r2, [pc, #348]	; (800a704 <HAL_UART_MspInit+0x1a8>)
 800a5a6:	f043 0301 	orr.w	r3, r3, #1
 800a5aa:	6313      	str	r3, [r2, #48]	; 0x30
 800a5ac:	4b55      	ldr	r3, [pc, #340]	; (800a704 <HAL_UART_MspInit+0x1a8>)
 800a5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5b0:	f003 0301 	and.w	r3, r3, #1
 800a5b4:	617b      	str	r3, [r7, #20]
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800a5bc:	61fb      	str	r3, [r7, #28]
 800a5be:	2302      	movs	r3, #2
 800a5c0:	623b      	str	r3, [r7, #32]
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	627b      	str	r3, [r7, #36]	; 0x24
 800a5c6:	2303      	movs	r3, #3
 800a5c8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5ca:	2307      	movs	r3, #7
 800a5cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a5ce:	f107 031c 	add.w	r3, r7, #28
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	484c      	ldr	r0, [pc, #304]	; (800a708 <HAL_UART_MspInit+0x1ac>)
 800a5d6:	f001 fdf7 	bl	800c1c8 <HAL_GPIO_Init>
 800a5da:	4b4c      	ldr	r3, [pc, #304]	; (800a70c <HAL_UART_MspInit+0x1b0>)
 800a5dc:	4a4c      	ldr	r2, [pc, #304]	; (800a710 <HAL_UART_MspInit+0x1b4>)
 800a5de:	601a      	str	r2, [r3, #0]
 800a5e0:	4b4a      	ldr	r3, [pc, #296]	; (800a70c <HAL_UART_MspInit+0x1b0>)
 800a5e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a5e6:	605a      	str	r2, [r3, #4]
 800a5e8:	4b48      	ldr	r3, [pc, #288]	; (800a70c <HAL_UART_MspInit+0x1b0>)
 800a5ea:	2240      	movs	r2, #64	; 0x40
 800a5ec:	609a      	str	r2, [r3, #8]
 800a5ee:	4b47      	ldr	r3, [pc, #284]	; (800a70c <HAL_UART_MspInit+0x1b0>)
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	60da      	str	r2, [r3, #12]
 800a5f4:	4b45      	ldr	r3, [pc, #276]	; (800a70c <HAL_UART_MspInit+0x1b0>)
 800a5f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a5fa:	611a      	str	r2, [r3, #16]
 800a5fc:	4b43      	ldr	r3, [pc, #268]	; (800a70c <HAL_UART_MspInit+0x1b0>)
 800a5fe:	2200      	movs	r2, #0
 800a600:	615a      	str	r2, [r3, #20]
 800a602:	4b42      	ldr	r3, [pc, #264]	; (800a70c <HAL_UART_MspInit+0x1b0>)
 800a604:	2200      	movs	r2, #0
 800a606:	619a      	str	r2, [r3, #24]
 800a608:	4b40      	ldr	r3, [pc, #256]	; (800a70c <HAL_UART_MspInit+0x1b0>)
 800a60a:	2200      	movs	r2, #0
 800a60c:	61da      	str	r2, [r3, #28]
 800a60e:	4b3f      	ldr	r3, [pc, #252]	; (800a70c <HAL_UART_MspInit+0x1b0>)
 800a610:	2200      	movs	r2, #0
 800a612:	621a      	str	r2, [r3, #32]
 800a614:	4b3d      	ldr	r3, [pc, #244]	; (800a70c <HAL_UART_MspInit+0x1b0>)
 800a616:	2200      	movs	r2, #0
 800a618:	625a      	str	r2, [r3, #36]	; 0x24
 800a61a:	483c      	ldr	r0, [pc, #240]	; (800a70c <HAL_UART_MspInit+0x1b0>)
 800a61c:	f001 faea 	bl	800bbf4 <HAL_DMA_Init>
 800a620:	4603      	mov	r3, r0
 800a622:	2b00      	cmp	r3, #0
 800a624:	d001      	beq.n	800a62a <HAL_UART_MspInit+0xce>
 800a626:	f7ff f98b 	bl	8009940 <Error_Handler>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	4a37      	ldr	r2, [pc, #220]	; (800a70c <HAL_UART_MspInit+0x1b0>)
 800a62e:	635a      	str	r2, [r3, #52]	; 0x34
 800a630:	4a36      	ldr	r2, [pc, #216]	; (800a70c <HAL_UART_MspInit+0x1b0>)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6393      	str	r3, [r2, #56]	; 0x38
 800a636:	4b37      	ldr	r3, [pc, #220]	; (800a714 <HAL_UART_MspInit+0x1b8>)
 800a638:	4a37      	ldr	r2, [pc, #220]	; (800a718 <HAL_UART_MspInit+0x1bc>)
 800a63a:	601a      	str	r2, [r3, #0]
 800a63c:	4b35      	ldr	r3, [pc, #212]	; (800a714 <HAL_UART_MspInit+0x1b8>)
 800a63e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800a642:	605a      	str	r2, [r3, #4]
 800a644:	4b33      	ldr	r3, [pc, #204]	; (800a714 <HAL_UART_MspInit+0x1b8>)
 800a646:	2200      	movs	r2, #0
 800a648:	609a      	str	r2, [r3, #8]
 800a64a:	4b32      	ldr	r3, [pc, #200]	; (800a714 <HAL_UART_MspInit+0x1b8>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	60da      	str	r2, [r3, #12]
 800a650:	4b30      	ldr	r3, [pc, #192]	; (800a714 <HAL_UART_MspInit+0x1b8>)
 800a652:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a656:	611a      	str	r2, [r3, #16]
 800a658:	4b2e      	ldr	r3, [pc, #184]	; (800a714 <HAL_UART_MspInit+0x1b8>)
 800a65a:	2200      	movs	r2, #0
 800a65c:	615a      	str	r2, [r3, #20]
 800a65e:	4b2d      	ldr	r3, [pc, #180]	; (800a714 <HAL_UART_MspInit+0x1b8>)
 800a660:	2200      	movs	r2, #0
 800a662:	619a      	str	r2, [r3, #24]
 800a664:	4b2b      	ldr	r3, [pc, #172]	; (800a714 <HAL_UART_MspInit+0x1b8>)
 800a666:	2200      	movs	r2, #0
 800a668:	61da      	str	r2, [r3, #28]
 800a66a:	4b2a      	ldr	r3, [pc, #168]	; (800a714 <HAL_UART_MspInit+0x1b8>)
 800a66c:	2200      	movs	r2, #0
 800a66e:	621a      	str	r2, [r3, #32]
 800a670:	4b28      	ldr	r3, [pc, #160]	; (800a714 <HAL_UART_MspInit+0x1b8>)
 800a672:	2200      	movs	r2, #0
 800a674:	625a      	str	r2, [r3, #36]	; 0x24
 800a676:	4827      	ldr	r0, [pc, #156]	; (800a714 <HAL_UART_MspInit+0x1b8>)
 800a678:	f001 fabc 	bl	800bbf4 <HAL_DMA_Init>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d001      	beq.n	800a686 <HAL_UART_MspInit+0x12a>
 800a682:	f7ff f95d 	bl	8009940 <Error_Handler>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	4a22      	ldr	r2, [pc, #136]	; (800a714 <HAL_UART_MspInit+0x1b8>)
 800a68a:	639a      	str	r2, [r3, #56]	; 0x38
 800a68c:	4a21      	ldr	r2, [pc, #132]	; (800a714 <HAL_UART_MspInit+0x1b8>)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6393      	str	r3, [r2, #56]	; 0x38
 800a692:	e030      	b.n	800a6f6 <HAL_UART_MspInit+0x19a>
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	4a20      	ldr	r2, [pc, #128]	; (800a71c <HAL_UART_MspInit+0x1c0>)
 800a69a:	4293      	cmp	r3, r2
 800a69c:	d12b      	bne.n	800a6f6 <HAL_UART_MspInit+0x19a>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	613b      	str	r3, [r7, #16]
 800a6a2:	4b18      	ldr	r3, [pc, #96]	; (800a704 <HAL_UART_MspInit+0x1a8>)
 800a6a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a6:	4a17      	ldr	r2, [pc, #92]	; (800a704 <HAL_UART_MspInit+0x1a8>)
 800a6a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6ac:	6413      	str	r3, [r2, #64]	; 0x40
 800a6ae:	4b15      	ldr	r3, [pc, #84]	; (800a704 <HAL_UART_MspInit+0x1a8>)
 800a6b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6b6:	613b      	str	r3, [r7, #16]
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	60fb      	str	r3, [r7, #12]
 800a6be:	4b11      	ldr	r3, [pc, #68]	; (800a704 <HAL_UART_MspInit+0x1a8>)
 800a6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6c2:	4a10      	ldr	r2, [pc, #64]	; (800a704 <HAL_UART_MspInit+0x1a8>)
 800a6c4:	f043 0308 	orr.w	r3, r3, #8
 800a6c8:	6313      	str	r3, [r2, #48]	; 0x30
 800a6ca:	4b0e      	ldr	r3, [pc, #56]	; (800a704 <HAL_UART_MspInit+0x1a8>)
 800a6cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ce:	f003 0308 	and.w	r3, r3, #8
 800a6d2:	60fb      	str	r3, [r7, #12]
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	2360      	movs	r3, #96	; 0x60
 800a6d8:	61fb      	str	r3, [r7, #28]
 800a6da:	2302      	movs	r3, #2
 800a6dc:	623b      	str	r3, [r7, #32]
 800a6de:	2300      	movs	r3, #0
 800a6e0:	627b      	str	r3, [r7, #36]	; 0x24
 800a6e2:	2303      	movs	r3, #3
 800a6e4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6e6:	2307      	movs	r3, #7
 800a6e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a6ea:	f107 031c 	add.w	r3, r7, #28
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	480b      	ldr	r0, [pc, #44]	; (800a720 <HAL_UART_MspInit+0x1c4>)
 800a6f2:	f001 fd69 	bl	800c1c8 <HAL_GPIO_Init>
 800a6f6:	bf00      	nop
 800a6f8:	3730      	adds	r7, #48	; 0x30
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	bd80      	pop	{r7, pc}
 800a6fe:	bf00      	nop
 800a700:	40011000 	.word	0x40011000
 800a704:	40023800 	.word	0x40023800
 800a708:	40020000 	.word	0x40020000
 800a70c:	200013c0 	.word	0x200013c0
 800a710:	400264b8 	.word	0x400264b8
 800a714:	20001420 	.word	0x20001420
 800a718:	40026488 	.word	0x40026488
 800a71c:	40004400 	.word	0x40004400
 800a720:	40020c00 	.word	0x40020c00

0800a724 <Reset_Handler>:
 800a724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800a75c <LoopFillZerobss+0x12>
 800a728:	480d      	ldr	r0, [pc, #52]	; (800a760 <LoopFillZerobss+0x16>)
 800a72a:	490e      	ldr	r1, [pc, #56]	; (800a764 <LoopFillZerobss+0x1a>)
 800a72c:	4a0e      	ldr	r2, [pc, #56]	; (800a768 <LoopFillZerobss+0x1e>)
 800a72e:	2300      	movs	r3, #0
 800a730:	e002      	b.n	800a738 <LoopCopyDataInit>

0800a732 <CopyDataInit>:
 800a732:	58d4      	ldr	r4, [r2, r3]
 800a734:	50c4      	str	r4, [r0, r3]
 800a736:	3304      	adds	r3, #4

0800a738 <LoopCopyDataInit>:
 800a738:	18c4      	adds	r4, r0, r3
 800a73a:	428c      	cmp	r4, r1
 800a73c:	d3f9      	bcc.n	800a732 <CopyDataInit>
 800a73e:	4a0b      	ldr	r2, [pc, #44]	; (800a76c <LoopFillZerobss+0x22>)
 800a740:	4c0b      	ldr	r4, [pc, #44]	; (800a770 <LoopFillZerobss+0x26>)
 800a742:	2300      	movs	r3, #0
 800a744:	e001      	b.n	800a74a <LoopFillZerobss>

0800a746 <FillZerobss>:
 800a746:	6013      	str	r3, [r2, #0]
 800a748:	3204      	adds	r2, #4

0800a74a <LoopFillZerobss>:
 800a74a:	42a2      	cmp	r2, r4
 800a74c:	d3fb      	bcc.n	800a746 <FillZerobss>
 800a74e:	f7ff fbbd 	bl	8009ecc <SystemInit>
 800a752:	f00a f807 	bl	8014764 <__libc_init_array>
 800a756:	f7ff f843 	bl	80097e0 <main>
 800a75a:	4770      	bx	lr
 800a75c:	20020000 	.word	0x20020000
 800a760:	20000000 	.word	0x20000000
 800a764:	20000204 	.word	0x20000204
 800a768:	08017b28 	.word	0x08017b28
 800a76c:	20000208 	.word	0x20000208
 800a770:	2000a344 	.word	0x2000a344

0800a774 <ADC_IRQHandler>:
 800a774:	e7fe      	b.n	800a774 <ADC_IRQHandler>
	...

0800a778 <HAL_Init>:
 800a778:	b580      	push	{r7, lr}
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	4b0e      	ldr	r3, [pc, #56]	; (800a7b8 <HAL_Init+0x40>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a0d      	ldr	r2, [pc, #52]	; (800a7b8 <HAL_Init+0x40>)
 800a782:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a786:	6013      	str	r3, [r2, #0]
 800a788:	4b0b      	ldr	r3, [pc, #44]	; (800a7b8 <HAL_Init+0x40>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4a0a      	ldr	r2, [pc, #40]	; (800a7b8 <HAL_Init+0x40>)
 800a78e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a792:	6013      	str	r3, [r2, #0]
 800a794:	4b08      	ldr	r3, [pc, #32]	; (800a7b8 <HAL_Init+0x40>)
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a07      	ldr	r2, [pc, #28]	; (800a7b8 <HAL_Init+0x40>)
 800a79a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a79e:	6013      	str	r3, [r2, #0]
 800a7a0:	2003      	movs	r0, #3
 800a7a2:	f001 f9d6 	bl	800bb52 <HAL_NVIC_SetPriorityGrouping>
 800a7a6:	2005      	movs	r0, #5
 800a7a8:	f7ff f9b0 	bl	8009b0c <HAL_InitTick>
 800a7ac:	f7ff f982 	bl	8009ab4 <HAL_MspInit>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	bd80      	pop	{r7, pc}
 800a7b6:	bf00      	nop
 800a7b8:	40023c00 	.word	0x40023c00

0800a7bc <HAL_IncTick>:
 800a7bc:	b480      	push	{r7}
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	4b06      	ldr	r3, [pc, #24]	; (800a7dc <HAL_IncTick+0x20>)
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	4b06      	ldr	r3, [pc, #24]	; (800a7e0 <HAL_IncTick+0x24>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	4a04      	ldr	r2, [pc, #16]	; (800a7e0 <HAL_IncTick+0x24>)
 800a7ce:	6013      	str	r3, [r2, #0]
 800a7d0:	bf00      	nop
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	20000028 	.word	0x20000028
 800a7e0:	20001480 	.word	0x20001480

0800a7e4 <HAL_GetTick>:
 800a7e4:	b480      	push	{r7}
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	4b03      	ldr	r3, [pc, #12]	; (800a7f8 <HAL_GetTick+0x14>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	20001480 	.word	0x20001480

0800a7fc <HAL_ADC_Init>:
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	2300      	movs	r3, #0
 800a806:	73fb      	strb	r3, [r7, #15]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d101      	bne.n	800a812 <HAL_ADC_Init+0x16>
 800a80e:	2301      	movs	r3, #1
 800a810:	e033      	b.n	800a87a <HAL_ADC_Init+0x7e>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a816:	2b00      	cmp	r3, #0
 800a818:	d109      	bne.n	800a82e <HAL_ADC_Init+0x32>
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f7fe fb82 	bl	8008f24 <HAL_ADC_MspInit>
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	645a      	str	r2, [r3, #68]	; 0x44
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a832:	f003 0310 	and.w	r3, r3, #16
 800a836:	2b00      	cmp	r3, #0
 800a838:	d118      	bne.n	800a86c <HAL_ADC_Init+0x70>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800a842:	f023 0302 	bic.w	r3, r3, #2
 800a846:	f043 0202 	orr.w	r2, r3, #2
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	641a      	str	r2, [r3, #64]	; 0x40
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 f93a 	bl	800aac8 <ADC_Init>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	645a      	str	r2, [r3, #68]	; 0x44
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a85e:	f023 0303 	bic.w	r3, r3, #3
 800a862:	f043 0201 	orr.w	r2, r3, #1
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	641a      	str	r2, [r3, #64]	; 0x40
 800a86a:	e001      	b.n	800a870 <HAL_ADC_Init+0x74>
 800a86c:	2301      	movs	r3, #1
 800a86e:	73fb      	strb	r3, [r7, #15]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a878:	7bfb      	ldrb	r3, [r7, #15]
 800a87a:	4618      	mov	r0, r3
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
	...

0800a884 <HAL_ADC_ConfigChannel>:
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
 800a88e:	2300      	movs	r3, #0
 800a890:	60bb      	str	r3, [r7, #8]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d101      	bne.n	800a8a0 <HAL_ADC_ConfigChannel+0x1c>
 800a89c:	2302      	movs	r3, #2
 800a89e:	e105      	b.n	800aaac <HAL_ADC_ConfigChannel+0x228>
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	2b09      	cmp	r3, #9
 800a8ae:	d925      	bls.n	800a8fc <HAL_ADC_ConfigChannel+0x78>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	68d9      	ldr	r1, [r3, #12]
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	461a      	mov	r2, r3
 800a8be:	4613      	mov	r3, r2
 800a8c0:	005b      	lsls	r3, r3, #1
 800a8c2:	4413      	add	r3, r2
 800a8c4:	3b1e      	subs	r3, #30
 800a8c6:	2207      	movs	r2, #7
 800a8c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a8cc:	43da      	mvns	r2, r3
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	400a      	ands	r2, r1
 800a8d4:	60da      	str	r2, [r3, #12]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	68d9      	ldr	r1, [r3, #12]
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	689a      	ldr	r2, [r3, #8]
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	b29b      	uxth	r3, r3
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	005b      	lsls	r3, r3, #1
 800a8ec:	4403      	add	r3, r0
 800a8ee:	3b1e      	subs	r3, #30
 800a8f0:	409a      	lsls	r2, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	430a      	orrs	r2, r1
 800a8f8:	60da      	str	r2, [r3, #12]
 800a8fa:	e022      	b.n	800a942 <HAL_ADC_ConfigChannel+0xbe>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	6919      	ldr	r1, [r3, #16]
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	b29b      	uxth	r3, r3
 800a908:	461a      	mov	r2, r3
 800a90a:	4613      	mov	r3, r2
 800a90c:	005b      	lsls	r3, r3, #1
 800a90e:	4413      	add	r3, r2
 800a910:	2207      	movs	r2, #7
 800a912:	fa02 f303 	lsl.w	r3, r2, r3
 800a916:	43da      	mvns	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	400a      	ands	r2, r1
 800a91e:	611a      	str	r2, [r3, #16]
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	6919      	ldr	r1, [r3, #16]
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	689a      	ldr	r2, [r3, #8]
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	b29b      	uxth	r3, r3
 800a930:	4618      	mov	r0, r3
 800a932:	4603      	mov	r3, r0
 800a934:	005b      	lsls	r3, r3, #1
 800a936:	4403      	add	r3, r0
 800a938:	409a      	lsls	r2, r3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	430a      	orrs	r2, r1
 800a940:	611a      	str	r2, [r3, #16]
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	685b      	ldr	r3, [r3, #4]
 800a946:	2b06      	cmp	r3, #6
 800a948:	d824      	bhi.n	800a994 <HAL_ADC_ConfigChannel+0x110>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	685a      	ldr	r2, [r3, #4]
 800a954:	4613      	mov	r3, r2
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	4413      	add	r3, r2
 800a95a:	3b05      	subs	r3, #5
 800a95c:	221f      	movs	r2, #31
 800a95e:	fa02 f303 	lsl.w	r3, r2, r3
 800a962:	43da      	mvns	r2, r3
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	400a      	ands	r2, r1
 800a96a:	635a      	str	r2, [r3, #52]	; 0x34
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	b29b      	uxth	r3, r3
 800a978:	4618      	mov	r0, r3
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	685a      	ldr	r2, [r3, #4]
 800a97e:	4613      	mov	r3, r2
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	4413      	add	r3, r2
 800a984:	3b05      	subs	r3, #5
 800a986:	fa00 f203 	lsl.w	r2, r0, r3
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	430a      	orrs	r2, r1
 800a990:	635a      	str	r2, [r3, #52]	; 0x34
 800a992:	e04c      	b.n	800aa2e <HAL_ADC_ConfigChannel+0x1aa>
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	2b0c      	cmp	r3, #12
 800a99a:	d824      	bhi.n	800a9e6 <HAL_ADC_ConfigChannel+0x162>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	685a      	ldr	r2, [r3, #4]
 800a9a6:	4613      	mov	r3, r2
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	4413      	add	r3, r2
 800a9ac:	3b23      	subs	r3, #35	; 0x23
 800a9ae:	221f      	movs	r2, #31
 800a9b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b4:	43da      	mvns	r2, r3
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	400a      	ands	r2, r1
 800a9bc:	631a      	str	r2, [r3, #48]	; 0x30
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	b29b      	uxth	r3, r3
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	685a      	ldr	r2, [r3, #4]
 800a9d0:	4613      	mov	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	4413      	add	r3, r2
 800a9d6:	3b23      	subs	r3, #35	; 0x23
 800a9d8:	fa00 f203 	lsl.w	r2, r0, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	430a      	orrs	r2, r1
 800a9e2:	631a      	str	r2, [r3, #48]	; 0x30
 800a9e4:	e023      	b.n	800aa2e <HAL_ADC_ConfigChannel+0x1aa>
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	685a      	ldr	r2, [r3, #4]
 800a9f0:	4613      	mov	r3, r2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4413      	add	r3, r2
 800a9f6:	3b41      	subs	r3, #65	; 0x41
 800a9f8:	221f      	movs	r2, #31
 800a9fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a9fe:	43da      	mvns	r2, r3
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	400a      	ands	r2, r1
 800aa06:	62da      	str	r2, [r3, #44]	; 0x2c
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	b29b      	uxth	r3, r3
 800aa14:	4618      	mov	r0, r3
 800aa16:	683b      	ldr	r3, [r7, #0]
 800aa18:	685a      	ldr	r2, [r3, #4]
 800aa1a:	4613      	mov	r3, r2
 800aa1c:	009b      	lsls	r3, r3, #2
 800aa1e:	4413      	add	r3, r2
 800aa20:	3b41      	subs	r3, #65	; 0x41
 800aa22:	fa00 f203 	lsl.w	r2, r0, r3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	430a      	orrs	r2, r1
 800aa2c:	62da      	str	r2, [r3, #44]	; 0x2c
 800aa2e:	4b22      	ldr	r3, [pc, #136]	; (800aab8 <HAL_ADC_ConfigChannel+0x234>)
 800aa30:	60fb      	str	r3, [r7, #12]
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a21      	ldr	r2, [pc, #132]	; (800aabc <HAL_ADC_ConfigChannel+0x238>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d109      	bne.n	800aa50 <HAL_ADC_ConfigChannel+0x1cc>
 800aa3c:	683b      	ldr	r3, [r7, #0]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2b12      	cmp	r3, #18
 800aa42:	d105      	bne.n	800aa50 <HAL_ADC_ConfigChannel+0x1cc>
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	685b      	ldr	r3, [r3, #4]
 800aa48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	605a      	str	r2, [r3, #4]
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a19      	ldr	r2, [pc, #100]	; (800aabc <HAL_ADC_ConfigChannel+0x238>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d123      	bne.n	800aaa2 <HAL_ADC_ConfigChannel+0x21e>
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2b10      	cmp	r3, #16
 800aa60:	d003      	beq.n	800aa6a <HAL_ADC_ConfigChannel+0x1e6>
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	2b11      	cmp	r3, #17
 800aa68:	d11b      	bne.n	800aaa2 <HAL_ADC_ConfigChannel+0x21e>
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	605a      	str	r2, [r3, #4]
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2b10      	cmp	r3, #16
 800aa7c:	d111      	bne.n	800aaa2 <HAL_ADC_ConfigChannel+0x21e>
 800aa7e:	4b10      	ldr	r3, [pc, #64]	; (800aac0 <HAL_ADC_ConfigChannel+0x23c>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a10      	ldr	r2, [pc, #64]	; (800aac4 <HAL_ADC_ConfigChannel+0x240>)
 800aa84:	fba2 2303 	umull	r2, r3, r2, r3
 800aa88:	0c9a      	lsrs	r2, r3, #18
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	009b      	lsls	r3, r3, #2
 800aa8e:	4413      	add	r3, r2
 800aa90:	005b      	lsls	r3, r3, #1
 800aa92:	60bb      	str	r3, [r7, #8]
 800aa94:	e002      	b.n	800aa9c <HAL_ADC_ConfigChannel+0x218>
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	60bb      	str	r3, [r7, #8]
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1f9      	bne.n	800aa96 <HAL_ADC_ConfigChannel+0x212>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800aaaa:	2300      	movs	r3, #0
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr
 800aab8:	40012300 	.word	0x40012300
 800aabc:	40012000 	.word	0x40012000
 800aac0:	20000020 	.word	0x20000020
 800aac4:	431bde83 	.word	0x431bde83

0800aac8 <ADC_Init>:
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	4b79      	ldr	r3, [pc, #484]	; (800acb8 <ADC_Init+0x1f0>)
 800aad2:	60fb      	str	r3, [r7, #12]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	605a      	str	r2, [r3, #4]
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	685a      	ldr	r2, [r3, #4]
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	431a      	orrs	r2, r3
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	605a      	str	r2, [r3, #4]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	685a      	ldr	r2, [r3, #4]
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aafc:	605a      	str	r2, [r3, #4]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	6859      	ldr	r1, [r3, #4]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	691b      	ldr	r3, [r3, #16]
 800ab08:	021a      	lsls	r2, r3, #8
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	430a      	orrs	r2, r1
 800ab10:	605a      	str	r2, [r3, #4]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	685a      	ldr	r2, [r3, #4]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800ab20:	605a      	str	r2, [r3, #4]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	6859      	ldr	r1, [r3, #4]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	689a      	ldr	r2, [r3, #8]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	430a      	orrs	r2, r1
 800ab32:	605a      	str	r2, [r3, #4]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	689a      	ldr	r2, [r3, #8]
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ab42:	609a      	str	r2, [r3, #8]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	6899      	ldr	r1, [r3, #8]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	68da      	ldr	r2, [r3, #12]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	430a      	orrs	r2, r1
 800ab54:	609a      	str	r2, [r3, #8]
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab5a:	4a58      	ldr	r2, [pc, #352]	; (800acbc <ADC_Init+0x1f4>)
 800ab5c:	4293      	cmp	r3, r2
 800ab5e:	d022      	beq.n	800aba6 <ADC_Init+0xde>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	689a      	ldr	r2, [r3, #8]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ab6e:	609a      	str	r2, [r3, #8]
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	6899      	ldr	r1, [r3, #8]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	430a      	orrs	r2, r1
 800ab80:	609a      	str	r2, [r3, #8]
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	689a      	ldr	r2, [r3, #8]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800ab90:	609a      	str	r2, [r3, #8]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	6899      	ldr	r1, [r3, #8]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	430a      	orrs	r2, r1
 800aba2:	609a      	str	r2, [r3, #8]
 800aba4:	e00f      	b.n	800abc6 <ADC_Init+0xfe>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	689a      	ldr	r2, [r3, #8]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800abb4:	609a      	str	r2, [r3, #8]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	689a      	ldr	r2, [r3, #8]
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800abc4:	609a      	str	r2, [r3, #8]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	689a      	ldr	r2, [r3, #8]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f022 0202 	bic.w	r2, r2, #2
 800abd4:	609a      	str	r2, [r3, #8]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	6899      	ldr	r1, [r3, #8]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	7e1b      	ldrb	r3, [r3, #24]
 800abe0:	005a      	lsls	r2, r3, #1
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	430a      	orrs	r2, r1
 800abe8:	609a      	str	r2, [r3, #8]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f893 3020 	ldrb.w	r3, [r3, #32]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d01b      	beq.n	800ac2c <ADC_Init+0x164>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	685a      	ldr	r2, [r3, #4]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ac02:	605a      	str	r2, [r3, #4]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	685a      	ldr	r2, [r3, #4]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800ac12:	605a      	str	r2, [r3, #4]
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	6859      	ldr	r1, [r3, #4]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac1e:	3b01      	subs	r3, #1
 800ac20:	035a      	lsls	r2, r3, #13
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	430a      	orrs	r2, r1
 800ac28:	605a      	str	r2, [r3, #4]
 800ac2a:	e007      	b.n	800ac3c <ADC_Init+0x174>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	685a      	ldr	r2, [r3, #4]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ac3a:	605a      	str	r2, [r3, #4]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800ac4a:	62da      	str	r2, [r3, #44]	; 0x2c
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	69db      	ldr	r3, [r3, #28]
 800ac56:	3b01      	subs	r3, #1
 800ac58:	051a      	lsls	r2, r3, #20
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	430a      	orrs	r2, r1
 800ac60:	62da      	str	r2, [r3, #44]	; 0x2c
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	689a      	ldr	r2, [r3, #8]
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ac70:	609a      	str	r2, [r3, #8]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	6899      	ldr	r1, [r3, #8]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ac7e:	025a      	lsls	r2, r3, #9
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	430a      	orrs	r2, r1
 800ac86:	609a      	str	r2, [r3, #8]
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	689a      	ldr	r2, [r3, #8]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac96:	609a      	str	r2, [r3, #8]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	6899      	ldr	r1, [r3, #8]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	695b      	ldr	r3, [r3, #20]
 800aca2:	029a      	lsls	r2, r3, #10
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	430a      	orrs	r2, r1
 800acaa:	609a      	str	r2, [r3, #8]
 800acac:	bf00      	nop
 800acae:	3714      	adds	r7, #20
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr
 800acb8:	40012300 	.word	0x40012300
 800acbc:	0f000001 	.word	0x0f000001

0800acc0 <HAL_CAN_Init>:
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d101      	bne.n	800acd2 <HAL_CAN_Init+0x12>
 800acce:	2301      	movs	r3, #1
 800acd0:	e0ed      	b.n	800aeae <HAL_CAN_Init+0x1ee>
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800acd8:	b2db      	uxtb	r3, r3
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d102      	bne.n	800ace4 <HAL_CAN_Init+0x24>
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f7fe fa84 	bl	80091ec <HAL_CAN_MspInit>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f042 0201 	orr.w	r2, r2, #1
 800acf2:	601a      	str	r2, [r3, #0]
 800acf4:	f7ff fd76 	bl	800a7e4 <HAL_GetTick>
 800acf8:	60f8      	str	r0, [r7, #12]
 800acfa:	e012      	b.n	800ad22 <HAL_CAN_Init+0x62>
 800acfc:	f7ff fd72 	bl	800a7e4 <HAL_GetTick>
 800ad00:	4602      	mov	r2, r0
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	1ad3      	subs	r3, r2, r3
 800ad06:	2b0a      	cmp	r3, #10
 800ad08:	d90b      	bls.n	800ad22 <HAL_CAN_Init+0x62>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	625a      	str	r2, [r3, #36]	; 0x24
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2205      	movs	r2, #5
 800ad1a:	f883 2020 	strb.w	r2, [r3, #32]
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e0c5      	b.n	800aeae <HAL_CAN_Init+0x1ee>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	f003 0301 	and.w	r3, r3, #1
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d0e5      	beq.n	800acfc <HAL_CAN_Init+0x3c>
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f022 0202 	bic.w	r2, r2, #2
 800ad3e:	601a      	str	r2, [r3, #0]
 800ad40:	f7ff fd50 	bl	800a7e4 <HAL_GetTick>
 800ad44:	60f8      	str	r0, [r7, #12]
 800ad46:	e012      	b.n	800ad6e <HAL_CAN_Init+0xae>
 800ad48:	f7ff fd4c 	bl	800a7e4 <HAL_GetTick>
 800ad4c:	4602      	mov	r2, r0
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	1ad3      	subs	r3, r2, r3
 800ad52:	2b0a      	cmp	r3, #10
 800ad54:	d90b      	bls.n	800ad6e <HAL_CAN_Init+0xae>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	625a      	str	r2, [r3, #36]	; 0x24
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2205      	movs	r2, #5
 800ad66:	f883 2020 	strb.w	r2, [r3, #32]
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	e09f      	b.n	800aeae <HAL_CAN_Init+0x1ee>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	f003 0302 	and.w	r3, r3, #2
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d1e5      	bne.n	800ad48 <HAL_CAN_Init+0x88>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	7e1b      	ldrb	r3, [r3, #24]
 800ad80:	2b01      	cmp	r3, #1
 800ad82:	d108      	bne.n	800ad96 <HAL_CAN_Init+0xd6>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	681a      	ldr	r2, [r3, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ad92:	601a      	str	r2, [r3, #0]
 800ad94:	e007      	b.n	800ada6 <HAL_CAN_Init+0xe6>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	681a      	ldr	r2, [r3, #0]
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ada4:	601a      	str	r2, [r3, #0]
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	7e5b      	ldrb	r3, [r3, #25]
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d108      	bne.n	800adc0 <HAL_CAN_Init+0x100>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	681a      	ldr	r2, [r3, #0]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800adbc:	601a      	str	r2, [r3, #0]
 800adbe:	e007      	b.n	800add0 <HAL_CAN_Init+0x110>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	681a      	ldr	r2, [r3, #0]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800adce:	601a      	str	r2, [r3, #0]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	7e9b      	ldrb	r3, [r3, #26]
 800add4:	2b01      	cmp	r3, #1
 800add6:	d108      	bne.n	800adea <HAL_CAN_Init+0x12a>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f042 0220 	orr.w	r2, r2, #32
 800ade6:	601a      	str	r2, [r3, #0]
 800ade8:	e007      	b.n	800adfa <HAL_CAN_Init+0x13a>
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	681a      	ldr	r2, [r3, #0]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f022 0220 	bic.w	r2, r2, #32
 800adf8:	601a      	str	r2, [r3, #0]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	7edb      	ldrb	r3, [r3, #27]
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d108      	bne.n	800ae14 <HAL_CAN_Init+0x154>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f022 0210 	bic.w	r2, r2, #16
 800ae10:	601a      	str	r2, [r3, #0]
 800ae12:	e007      	b.n	800ae24 <HAL_CAN_Init+0x164>
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	681a      	ldr	r2, [r3, #0]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f042 0210 	orr.w	r2, r2, #16
 800ae22:	601a      	str	r2, [r3, #0]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	7f1b      	ldrb	r3, [r3, #28]
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d108      	bne.n	800ae3e <HAL_CAN_Init+0x17e>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	681a      	ldr	r2, [r3, #0]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f042 0208 	orr.w	r2, r2, #8
 800ae3a:	601a      	str	r2, [r3, #0]
 800ae3c:	e007      	b.n	800ae4e <HAL_CAN_Init+0x18e>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f022 0208 	bic.w	r2, r2, #8
 800ae4c:	601a      	str	r2, [r3, #0]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	7f5b      	ldrb	r3, [r3, #29]
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d108      	bne.n	800ae68 <HAL_CAN_Init+0x1a8>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	f042 0204 	orr.w	r2, r2, #4
 800ae64:	601a      	str	r2, [r3, #0]
 800ae66:	e007      	b.n	800ae78 <HAL_CAN_Init+0x1b8>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f022 0204 	bic.w	r2, r2, #4
 800ae76:	601a      	str	r2, [r3, #0]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	689a      	ldr	r2, [r3, #8]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	431a      	orrs	r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	691b      	ldr	r3, [r3, #16]
 800ae86:	431a      	orrs	r2, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	695b      	ldr	r3, [r3, #20]
 800ae8c:	ea42 0103 	orr.w	r1, r2, r3
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	1e5a      	subs	r2, r3, #1
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	430a      	orrs	r2, r1
 800ae9c:	61da      	str	r2, [r3, #28]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	2200      	movs	r2, #0
 800aea2:	625a      	str	r2, [r3, #36]	; 0x24
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2201      	movs	r2, #1
 800aea8:	f883 2020 	strb.w	r2, [r3, #32]
 800aeac:	2300      	movs	r3, #0
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
	...

0800aeb8 <HAL_CAN_ConfigFilter>:
 800aeb8:	b480      	push	{r7}
 800aeba:	b087      	sub	sp, #28
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	6078      	str	r0, [r7, #4]
 800aec0:	6039      	str	r1, [r7, #0]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	617b      	str	r3, [r7, #20]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aece:	74fb      	strb	r3, [r7, #19]
 800aed0:	7cfb      	ldrb	r3, [r7, #19]
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d003      	beq.n	800aede <HAL_CAN_ConfigFilter+0x26>
 800aed6:	7cfb      	ldrb	r3, [r7, #19]
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	f040 80be 	bne.w	800b05a <HAL_CAN_ConfigFilter+0x1a2>
 800aede:	4b65      	ldr	r3, [pc, #404]	; (800b074 <HAL_CAN_ConfigFilter+0x1bc>)
 800aee0:	617b      	str	r3, [r7, #20]
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aee8:	f043 0201 	orr.w	r2, r3, #1
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800aef8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af0c:	021b      	lsls	r3, r3, #8
 800af0e:	431a      	orrs	r2, r3
 800af10:	697b      	ldr	r3, [r7, #20]
 800af12:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	695b      	ldr	r3, [r3, #20]
 800af1a:	f003 031f 	and.w	r3, r3, #31
 800af1e:	2201      	movs	r2, #1
 800af20:	fa02 f303 	lsl.w	r3, r2, r3
 800af24:	60fb      	str	r3, [r7, #12]
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	43db      	mvns	r3, r3
 800af30:	401a      	ands	r2, r3
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	69db      	ldr	r3, [r3, #28]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d123      	bne.n	800af88 <HAL_CAN_ConfigFilter+0xd0>
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	43db      	mvns	r3, r3
 800af4a:	401a      	ands	r2, r3
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	0419      	lsls	r1, r3, #16
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	683a      	ldr	r2, [r7, #0]
 800af60:	6952      	ldr	r2, [r2, #20]
 800af62:	4319      	orrs	r1, r3
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	3248      	adds	r2, #72	; 0x48
 800af68:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	0419      	lsls	r1, r3, #16
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	b29a      	uxth	r2, r3
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	695b      	ldr	r3, [r3, #20]
 800af7c:	430a      	orrs	r2, r1
 800af7e:	6979      	ldr	r1, [r7, #20]
 800af80:	3348      	adds	r3, #72	; 0x48
 800af82:	00db      	lsls	r3, r3, #3
 800af84:	440b      	add	r3, r1
 800af86:	605a      	str	r2, [r3, #4]
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	69db      	ldr	r3, [r3, #28]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d122      	bne.n	800afd6 <HAL_CAN_ConfigFilter+0x11e>
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	431a      	orrs	r2, r3
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	0419      	lsls	r1, r3, #16
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	685b      	ldr	r3, [r3, #4]
 800afaa:	b29b      	uxth	r3, r3
 800afac:	683a      	ldr	r2, [r7, #0]
 800afae:	6952      	ldr	r2, [r2, #20]
 800afb0:	4319      	orrs	r1, r3
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	3248      	adds	r2, #72	; 0x48
 800afb6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	0419      	lsls	r1, r3, #16
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	68db      	ldr	r3, [r3, #12]
 800afc4:	b29a      	uxth	r2, r3
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	695b      	ldr	r3, [r3, #20]
 800afca:	430a      	orrs	r2, r1
 800afcc:	6979      	ldr	r1, [r7, #20]
 800afce:	3348      	adds	r3, #72	; 0x48
 800afd0:	00db      	lsls	r3, r3, #3
 800afd2:	440b      	add	r3, r1
 800afd4:	605a      	str	r2, [r3, #4]
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	699b      	ldr	r3, [r3, #24]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d109      	bne.n	800aff2 <HAL_CAN_ConfigFilter+0x13a>
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	43db      	mvns	r3, r3
 800afe8:	401a      	ands	r2, r3
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800aff0:	e007      	b.n	800b002 <HAL_CAN_ConfigFilter+0x14a>
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	431a      	orrs	r2, r3
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d109      	bne.n	800b01e <HAL_CAN_ConfigFilter+0x166>
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	43db      	mvns	r3, r3
 800b014:	401a      	ands	r2, r3
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b01c:	e007      	b.n	800b02e <HAL_CAN_ConfigFilter+0x176>
 800b01e:	697b      	ldr	r3, [r7, #20]
 800b020:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	431a      	orrs	r2, r3
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	6a1b      	ldr	r3, [r3, #32]
 800b032:	2b01      	cmp	r3, #1
 800b034:	d107      	bne.n	800b046 <HAL_CAN_ConfigFilter+0x18e>
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	431a      	orrs	r2, r3
 800b040:	697b      	ldr	r3, [r7, #20]
 800b042:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
 800b046:	697b      	ldr	r3, [r7, #20]
 800b048:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b04c:	f023 0201 	bic.w	r2, r3, #1
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 800b056:	2300      	movs	r3, #0
 800b058:	e006      	b.n	800b068 <HAL_CAN_ConfigFilter+0x1b0>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	625a      	str	r2, [r3, #36]	; 0x24
 800b066:	2301      	movs	r3, #1
 800b068:	4618      	mov	r0, r3
 800b06a:	371c      	adds	r7, #28
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr
 800b074:	40006400 	.word	0x40006400

0800b078 <HAL_CAN_Start>:
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b086:	b2db      	uxtb	r3, r3
 800b088:	2b01      	cmp	r3, #1
 800b08a:	d12e      	bne.n	800b0ea <HAL_CAN_Start+0x72>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2202      	movs	r2, #2
 800b090:	f883 2020 	strb.w	r2, [r3, #32]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	f022 0201 	bic.w	r2, r2, #1
 800b0a2:	601a      	str	r2, [r3, #0]
 800b0a4:	f7ff fb9e 	bl	800a7e4 <HAL_GetTick>
 800b0a8:	60f8      	str	r0, [r7, #12]
 800b0aa:	e012      	b.n	800b0d2 <HAL_CAN_Start+0x5a>
 800b0ac:	f7ff fb9a 	bl	800a7e4 <HAL_GetTick>
 800b0b0:	4602      	mov	r2, r0
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	1ad3      	subs	r3, r2, r3
 800b0b6:	2b0a      	cmp	r3, #10
 800b0b8:	d90b      	bls.n	800b0d2 <HAL_CAN_Start+0x5a>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	625a      	str	r2, [r3, #36]	; 0x24
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2205      	movs	r2, #5
 800b0ca:	f883 2020 	strb.w	r2, [r3, #32]
 800b0ce:	2301      	movs	r3, #1
 800b0d0:	e012      	b.n	800b0f8 <HAL_CAN_Start+0x80>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	f003 0301 	and.w	r3, r3, #1
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1e5      	bne.n	800b0ac <HAL_CAN_Start+0x34>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	625a      	str	r2, [r3, #36]	; 0x24
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	e006      	b.n	800b0f8 <HAL_CAN_Start+0x80>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	625a      	str	r2, [r3, #36]	; 0x24
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3710      	adds	r7, #16
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}

0800b100 <HAL_CAN_AddTxMessage>:
 800b100:	b480      	push	{r7}
 800b102:	b089      	sub	sp, #36	; 0x24
 800b104:	af00      	add	r7, sp, #0
 800b106:	60f8      	str	r0, [r7, #12]
 800b108:	60b9      	str	r1, [r7, #8]
 800b10a:	607a      	str	r2, [r7, #4]
 800b10c:	603b      	str	r3, [r7, #0]
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b114:	77fb      	strb	r3, [r7, #31]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	61bb      	str	r3, [r7, #24]
 800b11e:	7ffb      	ldrb	r3, [r7, #31]
 800b120:	2b01      	cmp	r3, #1
 800b122:	d003      	beq.n	800b12c <HAL_CAN_AddTxMessage+0x2c>
 800b124:	7ffb      	ldrb	r3, [r7, #31]
 800b126:	2b02      	cmp	r3, #2
 800b128:	f040 80b8 	bne.w	800b29c <HAL_CAN_AddTxMessage+0x19c>
 800b12c:	69bb      	ldr	r3, [r7, #24]
 800b12e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b132:	2b00      	cmp	r3, #0
 800b134:	d10a      	bne.n	800b14c <HAL_CAN_AddTxMessage+0x4c>
 800b136:	69bb      	ldr	r3, [r7, #24]
 800b138:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d105      	bne.n	800b14c <HAL_CAN_AddTxMessage+0x4c>
 800b140:	69bb      	ldr	r3, [r7, #24]
 800b142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b146:	2b00      	cmp	r3, #0
 800b148:	f000 80a0 	beq.w	800b28c <HAL_CAN_AddTxMessage+0x18c>
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	0e1b      	lsrs	r3, r3, #24
 800b150:	f003 0303 	and.w	r3, r3, #3
 800b154:	617b      	str	r3, [r7, #20]
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	2b02      	cmp	r3, #2
 800b15a:	d907      	bls.n	800b16c <HAL_CAN_AddTxMessage+0x6c>
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b160:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	625a      	str	r2, [r3, #36]	; 0x24
 800b168:	2301      	movs	r3, #1
 800b16a:	e09e      	b.n	800b2aa <HAL_CAN_AddTxMessage+0x1aa>
 800b16c:	2201      	movs	r2, #1
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	409a      	lsls	r2, r3
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	601a      	str	r2, [r3, #0]
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d10d      	bne.n	800b19a <HAL_CAN_AddTxMessage+0x9a>
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	055a      	lsls	r2, r3, #21
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	68f9      	ldr	r1, [r7, #12]
 800b18a:	6809      	ldr	r1, [r1, #0]
 800b18c:	431a      	orrs	r2, r3
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	3318      	adds	r3, #24
 800b192:	011b      	lsls	r3, r3, #4
 800b194:	440b      	add	r3, r1
 800b196:	601a      	str	r2, [r3, #0]
 800b198:	e00f      	b.n	800b1ba <HAL_CAN_AddTxMessage+0xba>
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	00da      	lsls	r2, r3, #3
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	431a      	orrs	r2, r3
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	68db      	ldr	r3, [r3, #12]
 800b1aa:	68f9      	ldr	r1, [r7, #12]
 800b1ac:	6809      	ldr	r1, [r1, #0]
 800b1ae:	431a      	orrs	r2, r3
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	3318      	adds	r3, #24
 800b1b4:	011b      	lsls	r3, r3, #4
 800b1b6:	440b      	add	r3, r1
 800b1b8:	601a      	str	r2, [r3, #0]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	6819      	ldr	r1, [r3, #0]
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	691a      	ldr	r2, [r3, #16]
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	3318      	adds	r3, #24
 800b1c6:	011b      	lsls	r3, r3, #4
 800b1c8:	440b      	add	r3, r1
 800b1ca:	3304      	adds	r3, #4
 800b1cc:	601a      	str	r2, [r3, #0]
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	7d1b      	ldrb	r3, [r3, #20]
 800b1d2:	2b01      	cmp	r3, #1
 800b1d4:	d111      	bne.n	800b1fa <HAL_CAN_AddTxMessage+0xfa>
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	3318      	adds	r3, #24
 800b1de:	011b      	lsls	r3, r3, #4
 800b1e0:	4413      	add	r3, r2
 800b1e2:	3304      	adds	r3, #4
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	68fa      	ldr	r2, [r7, #12]
 800b1e8:	6811      	ldr	r1, [r2, #0]
 800b1ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b1ee:	697b      	ldr	r3, [r7, #20]
 800b1f0:	3318      	adds	r3, #24
 800b1f2:	011b      	lsls	r3, r3, #4
 800b1f4:	440b      	add	r3, r1
 800b1f6:	3304      	adds	r3, #4
 800b1f8:	601a      	str	r2, [r3, #0]
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	3307      	adds	r3, #7
 800b1fe:	781b      	ldrb	r3, [r3, #0]
 800b200:	061a      	lsls	r2, r3, #24
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	3306      	adds	r3, #6
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	041b      	lsls	r3, r3, #16
 800b20a:	431a      	orrs	r2, r3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	3305      	adds	r3, #5
 800b210:	781b      	ldrb	r3, [r3, #0]
 800b212:	021b      	lsls	r3, r3, #8
 800b214:	4313      	orrs	r3, r2
 800b216:	687a      	ldr	r2, [r7, #4]
 800b218:	3204      	adds	r2, #4
 800b21a:	7812      	ldrb	r2, [r2, #0]
 800b21c:	4610      	mov	r0, r2
 800b21e:	68fa      	ldr	r2, [r7, #12]
 800b220:	6811      	ldr	r1, [r2, #0]
 800b222:	ea43 0200 	orr.w	r2, r3, r0
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	011b      	lsls	r3, r3, #4
 800b22a:	440b      	add	r3, r1
 800b22c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800b230:	601a      	str	r2, [r3, #0]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	3303      	adds	r3, #3
 800b236:	781b      	ldrb	r3, [r3, #0]
 800b238:	061a      	lsls	r2, r3, #24
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	3302      	adds	r3, #2
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	041b      	lsls	r3, r3, #16
 800b242:	431a      	orrs	r2, r3
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	3301      	adds	r3, #1
 800b248:	781b      	ldrb	r3, [r3, #0]
 800b24a:	021b      	lsls	r3, r3, #8
 800b24c:	4313      	orrs	r3, r2
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	7812      	ldrb	r2, [r2, #0]
 800b252:	4610      	mov	r0, r2
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	6811      	ldr	r1, [r2, #0]
 800b258:	ea43 0200 	orr.w	r2, r3, r0
 800b25c:	697b      	ldr	r3, [r7, #20]
 800b25e:	011b      	lsls	r3, r3, #4
 800b260:	440b      	add	r3, r1
 800b262:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800b266:	601a      	str	r2, [r3, #0]
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	3318      	adds	r3, #24
 800b270:	011b      	lsls	r3, r3, #4
 800b272:	4413      	add	r3, r2
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	68fa      	ldr	r2, [r7, #12]
 800b278:	6811      	ldr	r1, [r2, #0]
 800b27a:	f043 0201 	orr.w	r2, r3, #1
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	3318      	adds	r3, #24
 800b282:	011b      	lsls	r3, r3, #4
 800b284:	440b      	add	r3, r1
 800b286:	601a      	str	r2, [r3, #0]
 800b288:	2300      	movs	r3, #0
 800b28a:	e00e      	b.n	800b2aa <HAL_CAN_AddTxMessage+0x1aa>
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b290:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	625a      	str	r2, [r3, #36]	; 0x24
 800b298:	2301      	movs	r3, #1
 800b29a:	e006      	b.n	800b2aa <HAL_CAN_AddTxMessage+0x1aa>
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	625a      	str	r2, [r3, #36]	; 0x24
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3724      	adds	r7, #36	; 0x24
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b4:	4770      	bx	lr

0800b2b6 <HAL_CAN_GetTxMailboxesFreeLevel>:
 800b2b6:	b480      	push	{r7}
 800b2b8:	b085      	sub	sp, #20
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
 800b2be:	2300      	movs	r3, #0
 800b2c0:	60fb      	str	r3, [r7, #12]
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b2c8:	72fb      	strb	r3, [r7, #11]
 800b2ca:	7afb      	ldrb	r3, [r7, #11]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d002      	beq.n	800b2d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800b2d0:	7afb      	ldrb	r3, [r7, #11]
 800b2d2:	2b02      	cmp	r3, #2
 800b2d4:	d11d      	bne.n	800b312 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	689b      	ldr	r3, [r3, #8]
 800b2dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	60fb      	str	r3, [r7, #12]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	689b      	ldr	r3, [r3, #8]
 800b2f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d002      	beq.n	800b2fe <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	60fb      	str	r3, [r7, #12]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	689b      	ldr	r3, [r3, #8]
 800b304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d002      	beq.n	800b312 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	3301      	adds	r3, #1
 800b310:	60fb      	str	r3, [r7, #12]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	4618      	mov	r0, r3
 800b316:	3714      	adds	r7, #20
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <HAL_CAN_GetRxMessage>:
 800b320:	b480      	push	{r7}
 800b322:	b087      	sub	sp, #28
 800b324:	af00      	add	r7, sp, #0
 800b326:	60f8      	str	r0, [r7, #12]
 800b328:	60b9      	str	r1, [r7, #8]
 800b32a:	607a      	str	r2, [r7, #4]
 800b32c:	603b      	str	r3, [r7, #0]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b334:	75fb      	strb	r3, [r7, #23]
 800b336:	7dfb      	ldrb	r3, [r7, #23]
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d003      	beq.n	800b344 <HAL_CAN_GetRxMessage+0x24>
 800b33c:	7dfb      	ldrb	r3, [r7, #23]
 800b33e:	2b02      	cmp	r3, #2
 800b340:	f040 80f3 	bne.w	800b52a <HAL_CAN_GetRxMessage+0x20a>
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d10e      	bne.n	800b368 <HAL_CAN_GetRxMessage+0x48>
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	68db      	ldr	r3, [r3, #12]
 800b350:	f003 0303 	and.w	r3, r3, #3
 800b354:	2b00      	cmp	r3, #0
 800b356:	d116      	bne.n	800b386 <HAL_CAN_GetRxMessage+0x66>
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b35c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	625a      	str	r2, [r3, #36]	; 0x24
 800b364:	2301      	movs	r3, #1
 800b366:	e0e7      	b.n	800b538 <HAL_CAN_GetRxMessage+0x218>
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	f003 0303 	and.w	r3, r3, #3
 800b372:	2b00      	cmp	r3, #0
 800b374:	d107      	bne.n	800b386 <HAL_CAN_GetRxMessage+0x66>
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b37a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	625a      	str	r2, [r3, #36]	; 0x24
 800b382:	2301      	movs	r3, #1
 800b384:	e0d8      	b.n	800b538 <HAL_CAN_GetRxMessage+0x218>
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	331b      	adds	r3, #27
 800b38e:	011b      	lsls	r3, r3, #4
 800b390:	4413      	add	r3, r2
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f003 0204 	and.w	r2, r3, #4
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	609a      	str	r2, [r3, #8]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	689b      	ldr	r3, [r3, #8]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d10c      	bne.n	800b3be <HAL_CAN_GetRxMessage+0x9e>
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	331b      	adds	r3, #27
 800b3ac:	011b      	lsls	r3, r3, #4
 800b3ae:	4413      	add	r3, r2
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	0d5b      	lsrs	r3, r3, #21
 800b3b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	601a      	str	r2, [r3, #0]
 800b3bc:	e00b      	b.n	800b3d6 <HAL_CAN_GetRxMessage+0xb6>
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	681a      	ldr	r2, [r3, #0]
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	331b      	adds	r3, #27
 800b3c6:	011b      	lsls	r3, r3, #4
 800b3c8:	4413      	add	r3, r2
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	08db      	lsrs	r3, r3, #3
 800b3ce:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	605a      	str	r2, [r3, #4]
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	331b      	adds	r3, #27
 800b3de:	011b      	lsls	r3, r3, #4
 800b3e0:	4413      	add	r3, r2
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	f003 0202 	and.w	r2, r3, #2
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	60da      	str	r2, [r3, #12]
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	681a      	ldr	r2, [r3, #0]
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	331b      	adds	r3, #27
 800b3f4:	011b      	lsls	r3, r3, #4
 800b3f6:	4413      	add	r3, r2
 800b3f8:	3304      	adds	r3, #4
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f003 020f 	and.w	r2, r3, #15
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	611a      	str	r2, [r3, #16]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681a      	ldr	r2, [r3, #0]
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	331b      	adds	r3, #27
 800b40c:	011b      	lsls	r3, r3, #4
 800b40e:	4413      	add	r3, r2
 800b410:	3304      	adds	r3, #4
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	0a1b      	lsrs	r3, r3, #8
 800b416:	b2da      	uxtb	r2, r3
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	619a      	str	r2, [r3, #24]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	331b      	adds	r3, #27
 800b424:	011b      	lsls	r3, r3, #4
 800b426:	4413      	add	r3, r2
 800b428:	3304      	adds	r3, #4
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	0c1b      	lsrs	r3, r3, #16
 800b42e:	b29a      	uxth	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	615a      	str	r2, [r3, #20]
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	681a      	ldr	r2, [r3, #0]
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	011b      	lsls	r3, r3, #4
 800b43c:	4413      	add	r3, r2
 800b43e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	b2da      	uxtb	r2, r3
 800b446:	683b      	ldr	r3, [r7, #0]
 800b448:	701a      	strb	r2, [r3, #0]
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	011b      	lsls	r3, r3, #4
 800b452:	4413      	add	r3, r2
 800b454:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	0a1a      	lsrs	r2, r3, #8
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	3301      	adds	r3, #1
 800b460:	b2d2      	uxtb	r2, r2
 800b462:	701a      	strb	r2, [r3, #0]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681a      	ldr	r2, [r3, #0]
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	011b      	lsls	r3, r3, #4
 800b46c:	4413      	add	r3, r2
 800b46e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	0c1a      	lsrs	r2, r3, #16
 800b476:	683b      	ldr	r3, [r7, #0]
 800b478:	3302      	adds	r3, #2
 800b47a:	b2d2      	uxtb	r2, r2
 800b47c:	701a      	strb	r2, [r3, #0]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	011b      	lsls	r3, r3, #4
 800b486:	4413      	add	r3, r2
 800b488:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	0e1a      	lsrs	r2, r3, #24
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	3303      	adds	r3, #3
 800b494:	b2d2      	uxtb	r2, r2
 800b496:	701a      	strb	r2, [r3, #0]
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	681a      	ldr	r2, [r3, #0]
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	011b      	lsls	r3, r3, #4
 800b4a0:	4413      	add	r3, r2
 800b4a2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	3304      	adds	r3, #4
 800b4ac:	b2d2      	uxtb	r2, r2
 800b4ae:	701a      	strb	r2, [r3, #0]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681a      	ldr	r2, [r3, #0]
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	011b      	lsls	r3, r3, #4
 800b4b8:	4413      	add	r3, r2
 800b4ba:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	0a1a      	lsrs	r2, r3, #8
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	3305      	adds	r3, #5
 800b4c6:	b2d2      	uxtb	r2, r2
 800b4c8:	701a      	strb	r2, [r3, #0]
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	011b      	lsls	r3, r3, #4
 800b4d2:	4413      	add	r3, r2
 800b4d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	0c1a      	lsrs	r2, r3, #16
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	3306      	adds	r3, #6
 800b4e0:	b2d2      	uxtb	r2, r2
 800b4e2:	701a      	strb	r2, [r3, #0]
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	011b      	lsls	r3, r3, #4
 800b4ec:	4413      	add	r3, r2
 800b4ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	0e1a      	lsrs	r2, r3, #24
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	3307      	adds	r3, #7
 800b4fa:	b2d2      	uxtb	r2, r2
 800b4fc:	701a      	strb	r2, [r3, #0]
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d108      	bne.n	800b516 <HAL_CAN_GetRxMessage+0x1f6>
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68da      	ldr	r2, [r3, #12]
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f042 0220 	orr.w	r2, r2, #32
 800b512:	60da      	str	r2, [r3, #12]
 800b514:	e007      	b.n	800b526 <HAL_CAN_GetRxMessage+0x206>
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	691a      	ldr	r2, [r3, #16]
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f042 0220 	orr.w	r2, r2, #32
 800b524:	611a      	str	r2, [r3, #16]
 800b526:	2300      	movs	r3, #0
 800b528:	e006      	b.n	800b538 <HAL_CAN_GetRxMessage+0x218>
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	625a      	str	r2, [r3, #36]	; 0x24
 800b536:	2301      	movs	r3, #1
 800b538:	4618      	mov	r0, r3
 800b53a:	371c      	adds	r7, #28
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <HAL_CAN_ActivateNotification>:
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b554:	73fb      	strb	r3, [r7, #15]
 800b556:	7bfb      	ldrb	r3, [r7, #15]
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d002      	beq.n	800b562 <HAL_CAN_ActivateNotification+0x1e>
 800b55c:	7bfb      	ldrb	r3, [r7, #15]
 800b55e:	2b02      	cmp	r3, #2
 800b560:	d109      	bne.n	800b576 <HAL_CAN_ActivateNotification+0x32>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	6959      	ldr	r1, [r3, #20]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	683a      	ldr	r2, [r7, #0]
 800b56e:	430a      	orrs	r2, r1
 800b570:	615a      	str	r2, [r3, #20]
 800b572:	2300      	movs	r3, #0
 800b574:	e006      	b.n	800b584 <HAL_CAN_ActivateNotification+0x40>
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b57a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	625a      	str	r2, [r3, #36]	; 0x24
 800b582:	2301      	movs	r3, #1
 800b584:	4618      	mov	r0, r3
 800b586:	3714      	adds	r7, #20
 800b588:	46bd      	mov	sp, r7
 800b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58e:	4770      	bx	lr

0800b590 <HAL_CAN_IRQHandler>:
 800b590:	b580      	push	{r7, lr}
 800b592:	b08a      	sub	sp, #40	; 0x28
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
 800b598:	2300      	movs	r3, #0
 800b59a:	627b      	str	r3, [r7, #36]	; 0x24
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	695b      	ldr	r3, [r3, #20]
 800b5a2:	623b      	str	r3, [r7, #32]
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	685b      	ldr	r3, [r3, #4]
 800b5aa:	61fb      	str	r3, [r7, #28]
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	689b      	ldr	r3, [r3, #8]
 800b5b2:	61bb      	str	r3, [r7, #24]
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	617b      	str	r3, [r7, #20]
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	691b      	ldr	r3, [r3, #16]
 800b5c2:	613b      	str	r3, [r7, #16]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	699b      	ldr	r3, [r3, #24]
 800b5ca:	60fb      	str	r3, [r7, #12]
 800b5cc:	6a3b      	ldr	r3, [r7, #32]
 800b5ce:	f003 0301 	and.w	r3, r3, #1
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d07c      	beq.n	800b6d0 <HAL_CAN_IRQHandler+0x140>
 800b5d6:	69bb      	ldr	r3, [r7, #24]
 800b5d8:	f003 0301 	and.w	r3, r3, #1
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d023      	beq.n	800b628 <HAL_CAN_IRQHandler+0x98>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2201      	movs	r2, #1
 800b5e6:	609a      	str	r2, [r3, #8]
 800b5e8:	69bb      	ldr	r3, [r7, #24]
 800b5ea:	f003 0302 	and.w	r3, r3, #2
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d003      	beq.n	800b5fa <HAL_CAN_IRQHandler+0x6a>
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f7f6 faf4 	bl	8001be0 <HAL_CAN_TxMailbox0CompleteCallback>
 800b5f8:	e016      	b.n	800b628 <HAL_CAN_IRQHandler+0x98>
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	f003 0304 	and.w	r3, r3, #4
 800b600:	2b00      	cmp	r3, #0
 800b602:	d004      	beq.n	800b60e <HAL_CAN_IRQHandler+0x7e>
 800b604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b606:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b60a:	627b      	str	r3, [r7, #36]	; 0x24
 800b60c:	e00c      	b.n	800b628 <HAL_CAN_IRQHandler+0x98>
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	f003 0308 	and.w	r3, r3, #8
 800b614:	2b00      	cmp	r3, #0
 800b616:	d004      	beq.n	800b622 <HAL_CAN_IRQHandler+0x92>
 800b618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b61a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b61e:	627b      	str	r3, [r7, #36]	; 0x24
 800b620:	e002      	b.n	800b628 <HAL_CAN_IRQHandler+0x98>
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 f97f 	bl	800b926 <HAL_CAN_TxMailbox0AbortCallback>
 800b628:	69bb      	ldr	r3, [r7, #24]
 800b62a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d024      	beq.n	800b67c <HAL_CAN_IRQHandler+0xec>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b63a:	609a      	str	r2, [r3, #8]
 800b63c:	69bb      	ldr	r3, [r7, #24]
 800b63e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b642:	2b00      	cmp	r3, #0
 800b644:	d003      	beq.n	800b64e <HAL_CAN_IRQHandler+0xbe>
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 f959 	bl	800b8fe <HAL_CAN_TxMailbox1CompleteCallback>
 800b64c:	e016      	b.n	800b67c <HAL_CAN_IRQHandler+0xec>
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b654:	2b00      	cmp	r3, #0
 800b656:	d004      	beq.n	800b662 <HAL_CAN_IRQHandler+0xd2>
 800b658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b65a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b65e:	627b      	str	r3, [r7, #36]	; 0x24
 800b660:	e00c      	b.n	800b67c <HAL_CAN_IRQHandler+0xec>
 800b662:	69bb      	ldr	r3, [r7, #24]
 800b664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d004      	beq.n	800b676 <HAL_CAN_IRQHandler+0xe6>
 800b66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b672:	627b      	str	r3, [r7, #36]	; 0x24
 800b674:	e002      	b.n	800b67c <HAL_CAN_IRQHandler+0xec>
 800b676:	6878      	ldr	r0, [r7, #4]
 800b678:	f000 f95f 	bl	800b93a <HAL_CAN_TxMailbox1AbortCallback>
 800b67c:	69bb      	ldr	r3, [r7, #24]
 800b67e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b682:	2b00      	cmp	r3, #0
 800b684:	d024      	beq.n	800b6d0 <HAL_CAN_IRQHandler+0x140>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b68e:	609a      	str	r2, [r3, #8]
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b696:	2b00      	cmp	r3, #0
 800b698:	d003      	beq.n	800b6a2 <HAL_CAN_IRQHandler+0x112>
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 f939 	bl	800b912 <HAL_CAN_TxMailbox2CompleteCallback>
 800b6a0:	e016      	b.n	800b6d0 <HAL_CAN_IRQHandler+0x140>
 800b6a2:	69bb      	ldr	r3, [r7, #24]
 800b6a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d004      	beq.n	800b6b6 <HAL_CAN_IRQHandler+0x126>
 800b6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6b2:	627b      	str	r3, [r7, #36]	; 0x24
 800b6b4:	e00c      	b.n	800b6d0 <HAL_CAN_IRQHandler+0x140>
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d004      	beq.n	800b6ca <HAL_CAN_IRQHandler+0x13a>
 800b6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b6c6:	627b      	str	r3, [r7, #36]	; 0x24
 800b6c8:	e002      	b.n	800b6d0 <HAL_CAN_IRQHandler+0x140>
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 f93f 	bl	800b94e <HAL_CAN_TxMailbox2AbortCallback>
 800b6d0:	6a3b      	ldr	r3, [r7, #32]
 800b6d2:	f003 0308 	and.w	r3, r3, #8
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00c      	beq.n	800b6f4 <HAL_CAN_IRQHandler+0x164>
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	f003 0310 	and.w	r3, r3, #16
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d007      	beq.n	800b6f4 <HAL_CAN_IRQHandler+0x164>
 800b6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b6ea:	627b      	str	r3, [r7, #36]	; 0x24
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	2210      	movs	r2, #16
 800b6f2:	60da      	str	r2, [r3, #12]
 800b6f4:	6a3b      	ldr	r3, [r7, #32]
 800b6f6:	f003 0304 	and.w	r3, r3, #4
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00b      	beq.n	800b716 <HAL_CAN_IRQHandler+0x186>
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	f003 0308 	and.w	r3, r3, #8
 800b704:	2b00      	cmp	r3, #0
 800b706:	d006      	beq.n	800b716 <HAL_CAN_IRQHandler+0x186>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	2208      	movs	r2, #8
 800b70e:	60da      	str	r2, [r3, #12]
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f000 f926 	bl	800b962 <HAL_CAN_RxFifo0FullCallback>
 800b716:	6a3b      	ldr	r3, [r7, #32]
 800b718:	f003 0302 	and.w	r3, r3, #2
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d009      	beq.n	800b734 <HAL_CAN_IRQHandler+0x1a4>
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	f003 0303 	and.w	r3, r3, #3
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d002      	beq.n	800b734 <HAL_CAN_IRQHandler+0x1a4>
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f7f6 f9be 	bl	8001ab0 <HAL_CAN_RxFifo0MsgPendingCallback>
 800b734:	6a3b      	ldr	r3, [r7, #32]
 800b736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d00c      	beq.n	800b758 <HAL_CAN_IRQHandler+0x1c8>
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	f003 0310 	and.w	r3, r3, #16
 800b744:	2b00      	cmp	r3, #0
 800b746:	d007      	beq.n	800b758 <HAL_CAN_IRQHandler+0x1c8>
 800b748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b74a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b74e:	627b      	str	r3, [r7, #36]	; 0x24
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2210      	movs	r2, #16
 800b756:	611a      	str	r2, [r3, #16]
 800b758:	6a3b      	ldr	r3, [r7, #32]
 800b75a:	f003 0320 	and.w	r3, r3, #32
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00b      	beq.n	800b77a <HAL_CAN_IRQHandler+0x1ea>
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	f003 0308 	and.w	r3, r3, #8
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d006      	beq.n	800b77a <HAL_CAN_IRQHandler+0x1ea>
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2208      	movs	r2, #8
 800b772:	611a      	str	r2, [r3, #16]
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f000 f8fe 	bl	800b976 <HAL_CAN_RxFifo1FullCallback>
 800b77a:	6a3b      	ldr	r3, [r7, #32]
 800b77c:	f003 0310 	and.w	r3, r3, #16
 800b780:	2b00      	cmp	r3, #0
 800b782:	d009      	beq.n	800b798 <HAL_CAN_IRQHandler+0x208>
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	691b      	ldr	r3, [r3, #16]
 800b78a:	f003 0303 	and.w	r3, r3, #3
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d002      	beq.n	800b798 <HAL_CAN_IRQHandler+0x208>
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f7f6 f9c6 	bl	8001b24 <HAL_CAN_RxFifo1MsgPendingCallback>
 800b798:	6a3b      	ldr	r3, [r7, #32]
 800b79a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d00b      	beq.n	800b7ba <HAL_CAN_IRQHandler+0x22a>
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	f003 0310 	and.w	r3, r3, #16
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d006      	beq.n	800b7ba <HAL_CAN_IRQHandler+0x22a>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	2210      	movs	r2, #16
 800b7b2:	605a      	str	r2, [r3, #4]
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 f8e8 	bl	800b98a <HAL_CAN_SleepCallback>
 800b7ba:	6a3b      	ldr	r3, [r7, #32]
 800b7bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d00b      	beq.n	800b7dc <HAL_CAN_IRQHandler+0x24c>
 800b7c4:	69fb      	ldr	r3, [r7, #28]
 800b7c6:	f003 0308 	and.w	r3, r3, #8
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d006      	beq.n	800b7dc <HAL_CAN_IRQHandler+0x24c>
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2208      	movs	r2, #8
 800b7d4:	605a      	str	r2, [r3, #4]
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 f8e1 	bl	800b99e <HAL_CAN_WakeUpFromRxMsgCallback>
 800b7dc:	6a3b      	ldr	r3, [r7, #32]
 800b7de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d07b      	beq.n	800b8de <HAL_CAN_IRQHandler+0x34e>
 800b7e6:	69fb      	ldr	r3, [r7, #28]
 800b7e8:	f003 0304 	and.w	r3, r3, #4
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d072      	beq.n	800b8d6 <HAL_CAN_IRQHandler+0x346>
 800b7f0:	6a3b      	ldr	r3, [r7, #32]
 800b7f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d008      	beq.n	800b80c <HAL_CAN_IRQHandler+0x27c>
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	f003 0301 	and.w	r3, r3, #1
 800b800:	2b00      	cmp	r3, #0
 800b802:	d003      	beq.n	800b80c <HAL_CAN_IRQHandler+0x27c>
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b806:	f043 0301 	orr.w	r3, r3, #1
 800b80a:	627b      	str	r3, [r7, #36]	; 0x24
 800b80c:	6a3b      	ldr	r3, [r7, #32]
 800b80e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b812:	2b00      	cmp	r3, #0
 800b814:	d008      	beq.n	800b828 <HAL_CAN_IRQHandler+0x298>
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f003 0302 	and.w	r3, r3, #2
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d003      	beq.n	800b828 <HAL_CAN_IRQHandler+0x298>
 800b820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b822:	f043 0302 	orr.w	r3, r3, #2
 800b826:	627b      	str	r3, [r7, #36]	; 0x24
 800b828:	6a3b      	ldr	r3, [r7, #32]
 800b82a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d008      	beq.n	800b844 <HAL_CAN_IRQHandler+0x2b4>
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f003 0304 	and.w	r3, r3, #4
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d003      	beq.n	800b844 <HAL_CAN_IRQHandler+0x2b4>
 800b83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b83e:	f043 0304 	orr.w	r3, r3, #4
 800b842:	627b      	str	r3, [r7, #36]	; 0x24
 800b844:	6a3b      	ldr	r3, [r7, #32]
 800b846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d043      	beq.n	800b8d6 <HAL_CAN_IRQHandler+0x346>
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b854:	2b00      	cmp	r3, #0
 800b856:	d03e      	beq.n	800b8d6 <HAL_CAN_IRQHandler+0x346>
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b85e:	2b60      	cmp	r3, #96	; 0x60
 800b860:	d02b      	beq.n	800b8ba <HAL_CAN_IRQHandler+0x32a>
 800b862:	2b60      	cmp	r3, #96	; 0x60
 800b864:	d82e      	bhi.n	800b8c4 <HAL_CAN_IRQHandler+0x334>
 800b866:	2b50      	cmp	r3, #80	; 0x50
 800b868:	d022      	beq.n	800b8b0 <HAL_CAN_IRQHandler+0x320>
 800b86a:	2b50      	cmp	r3, #80	; 0x50
 800b86c:	d82a      	bhi.n	800b8c4 <HAL_CAN_IRQHandler+0x334>
 800b86e:	2b40      	cmp	r3, #64	; 0x40
 800b870:	d019      	beq.n	800b8a6 <HAL_CAN_IRQHandler+0x316>
 800b872:	2b40      	cmp	r3, #64	; 0x40
 800b874:	d826      	bhi.n	800b8c4 <HAL_CAN_IRQHandler+0x334>
 800b876:	2b30      	cmp	r3, #48	; 0x30
 800b878:	d010      	beq.n	800b89c <HAL_CAN_IRQHandler+0x30c>
 800b87a:	2b30      	cmp	r3, #48	; 0x30
 800b87c:	d822      	bhi.n	800b8c4 <HAL_CAN_IRQHandler+0x334>
 800b87e:	2b10      	cmp	r3, #16
 800b880:	d002      	beq.n	800b888 <HAL_CAN_IRQHandler+0x2f8>
 800b882:	2b20      	cmp	r3, #32
 800b884:	d005      	beq.n	800b892 <HAL_CAN_IRQHandler+0x302>
 800b886:	e01d      	b.n	800b8c4 <HAL_CAN_IRQHandler+0x334>
 800b888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88a:	f043 0308 	orr.w	r3, r3, #8
 800b88e:	627b      	str	r3, [r7, #36]	; 0x24
 800b890:	e019      	b.n	800b8c6 <HAL_CAN_IRQHandler+0x336>
 800b892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b894:	f043 0310 	orr.w	r3, r3, #16
 800b898:	627b      	str	r3, [r7, #36]	; 0x24
 800b89a:	e014      	b.n	800b8c6 <HAL_CAN_IRQHandler+0x336>
 800b89c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89e:	f043 0320 	orr.w	r3, r3, #32
 800b8a2:	627b      	str	r3, [r7, #36]	; 0x24
 800b8a4:	e00f      	b.n	800b8c6 <HAL_CAN_IRQHandler+0x336>
 800b8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8ac:	627b      	str	r3, [r7, #36]	; 0x24
 800b8ae:	e00a      	b.n	800b8c6 <HAL_CAN_IRQHandler+0x336>
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8b6:	627b      	str	r3, [r7, #36]	; 0x24
 800b8b8:	e005      	b.n	800b8c6 <HAL_CAN_IRQHandler+0x336>
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8c0:	627b      	str	r3, [r7, #36]	; 0x24
 800b8c2:	e000      	b.n	800b8c6 <HAL_CAN_IRQHandler+0x336>
 800b8c4:	bf00      	nop
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	699a      	ldr	r2, [r3, #24]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b8d4:	619a      	str	r2, [r3, #24]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2204      	movs	r2, #4
 800b8dc:	605a      	str	r2, [r3, #4]
 800b8de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d008      	beq.n	800b8f6 <HAL_CAN_IRQHandler+0x366>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ea:	431a      	orrs	r2, r3
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	625a      	str	r2, [r3, #36]	; 0x24
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f7f6 f951 	bl	8001b98 <HAL_CAN_ErrorCallback>
 800b8f6:	bf00      	nop
 800b8f8:	3728      	adds	r7, #40	; 0x28
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <HAL_CAN_TxMailbox1CompleteCallback>:
 800b8fe:	b480      	push	{r7}
 800b900:	b083      	sub	sp, #12
 800b902:	af00      	add	r7, sp, #0
 800b904:	6078      	str	r0, [r7, #4]
 800b906:	bf00      	nop
 800b908:	370c      	adds	r7, #12
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr

0800b912 <HAL_CAN_TxMailbox2CompleteCallback>:
 800b912:	b480      	push	{r7}
 800b914:	b083      	sub	sp, #12
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
 800b91a:	bf00      	nop
 800b91c:	370c      	adds	r7, #12
 800b91e:	46bd      	mov	sp, r7
 800b920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b924:	4770      	bx	lr

0800b926 <HAL_CAN_TxMailbox0AbortCallback>:
 800b926:	b480      	push	{r7}
 800b928:	b083      	sub	sp, #12
 800b92a:	af00      	add	r7, sp, #0
 800b92c:	6078      	str	r0, [r7, #4]
 800b92e:	bf00      	nop
 800b930:	370c      	adds	r7, #12
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr

0800b93a <HAL_CAN_TxMailbox1AbortCallback>:
 800b93a:	b480      	push	{r7}
 800b93c:	b083      	sub	sp, #12
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
 800b942:	bf00      	nop
 800b944:	370c      	adds	r7, #12
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr

0800b94e <HAL_CAN_TxMailbox2AbortCallback>:
 800b94e:	b480      	push	{r7}
 800b950:	b083      	sub	sp, #12
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
 800b956:	bf00      	nop
 800b958:	370c      	adds	r7, #12
 800b95a:	46bd      	mov	sp, r7
 800b95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b960:	4770      	bx	lr

0800b962 <HAL_CAN_RxFifo0FullCallback>:
 800b962:	b480      	push	{r7}
 800b964:	b083      	sub	sp, #12
 800b966:	af00      	add	r7, sp, #0
 800b968:	6078      	str	r0, [r7, #4]
 800b96a:	bf00      	nop
 800b96c:	370c      	adds	r7, #12
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr

0800b976 <HAL_CAN_RxFifo1FullCallback>:
 800b976:	b480      	push	{r7}
 800b978:	b083      	sub	sp, #12
 800b97a:	af00      	add	r7, sp, #0
 800b97c:	6078      	str	r0, [r7, #4]
 800b97e:	bf00      	nop
 800b980:	370c      	adds	r7, #12
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr

0800b98a <HAL_CAN_SleepCallback>:
 800b98a:	b480      	push	{r7}
 800b98c:	b083      	sub	sp, #12
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
 800b992:	bf00      	nop
 800b994:	370c      	adds	r7, #12
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr

0800b99e <HAL_CAN_WakeUpFromRxMsgCallback>:
 800b99e:	b480      	push	{r7}
 800b9a0:	b083      	sub	sp, #12
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
 800b9a6:	bf00      	nop
 800b9a8:	370c      	adds	r7, #12
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr

0800b9b2 <HAL_CAN_ResetError>:
 800b9b2:	b480      	push	{r7}
 800b9b4:	b085      	sub	sp, #20
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	73fb      	strb	r3, [r7, #15]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b9c4:	73bb      	strb	r3, [r7, #14]
 800b9c6:	7bbb      	ldrb	r3, [r7, #14]
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d002      	beq.n	800b9d2 <HAL_CAN_ResetError+0x20>
 800b9cc:	7bbb      	ldrb	r3, [r7, #14]
 800b9ce:	2b02      	cmp	r3, #2
 800b9d0:	d103      	bne.n	800b9da <HAL_CAN_ResetError+0x28>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	625a      	str	r2, [r3, #36]	; 0x24
 800b9d8:	e007      	b.n	800b9ea <HAL_CAN_ResetError+0x38>
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	625a      	str	r2, [r3, #36]	; 0x24
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	73fb      	strb	r3, [r7, #15]
 800b9ea:	7bfb      	ldrb	r3, [r7, #15]
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3714      	adds	r7, #20
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <__NVIC_SetPriorityGrouping>:
 800b9f8:	b480      	push	{r7}
 800b9fa:	b085      	sub	sp, #20
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f003 0307 	and.w	r3, r3, #7
 800ba06:	60fb      	str	r3, [r7, #12]
 800ba08:	4b0c      	ldr	r3, [pc, #48]	; (800ba3c <__NVIC_SetPriorityGrouping+0x44>)
 800ba0a:	68db      	ldr	r3, [r3, #12]
 800ba0c:	60bb      	str	r3, [r7, #8]
 800ba0e:	68ba      	ldr	r2, [r7, #8]
 800ba10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ba14:	4013      	ands	r3, r2
 800ba16:	60bb      	str	r3, [r7, #8]
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	021a      	lsls	r2, r3, #8
 800ba1c:	68bb      	ldr	r3, [r7, #8]
 800ba1e:	4313      	orrs	r3, r2
 800ba20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ba24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba28:	60bb      	str	r3, [r7, #8]
 800ba2a:	4a04      	ldr	r2, [pc, #16]	; (800ba3c <__NVIC_SetPriorityGrouping+0x44>)
 800ba2c:	68bb      	ldr	r3, [r7, #8]
 800ba2e:	60d3      	str	r3, [r2, #12]
 800ba30:	bf00      	nop
 800ba32:	3714      	adds	r7, #20
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr
 800ba3c:	e000ed00 	.word	0xe000ed00

0800ba40 <__NVIC_GetPriorityGrouping>:
 800ba40:	b480      	push	{r7}
 800ba42:	af00      	add	r7, sp, #0
 800ba44:	4b04      	ldr	r3, [pc, #16]	; (800ba58 <__NVIC_GetPriorityGrouping+0x18>)
 800ba46:	68db      	ldr	r3, [r3, #12]
 800ba48:	0a1b      	lsrs	r3, r3, #8
 800ba4a:	f003 0307 	and.w	r3, r3, #7
 800ba4e:	4618      	mov	r0, r3
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr
 800ba58:	e000ed00 	.word	0xe000ed00

0800ba5c <__NVIC_EnableIRQ>:
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	4603      	mov	r3, r0
 800ba64:	71fb      	strb	r3, [r7, #7]
 800ba66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	db0b      	blt.n	800ba86 <__NVIC_EnableIRQ+0x2a>
 800ba6e:	79fb      	ldrb	r3, [r7, #7]
 800ba70:	f003 021f 	and.w	r2, r3, #31
 800ba74:	4907      	ldr	r1, [pc, #28]	; (800ba94 <__NVIC_EnableIRQ+0x38>)
 800ba76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ba7a:	095b      	lsrs	r3, r3, #5
 800ba7c:	2001      	movs	r0, #1
 800ba7e:	fa00 f202 	lsl.w	r2, r0, r2
 800ba82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800ba86:	bf00      	nop
 800ba88:	370c      	adds	r7, #12
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba90:	4770      	bx	lr
 800ba92:	bf00      	nop
 800ba94:	e000e100 	.word	0xe000e100

0800ba98 <__NVIC_SetPriority>:
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	4603      	mov	r3, r0
 800baa0:	6039      	str	r1, [r7, #0]
 800baa2:	71fb      	strb	r3, [r7, #7]
 800baa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	db0a      	blt.n	800bac2 <__NVIC_SetPriority+0x2a>
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	b2da      	uxtb	r2, r3
 800bab0:	490c      	ldr	r1, [pc, #48]	; (800bae4 <__NVIC_SetPriority+0x4c>)
 800bab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bab6:	0112      	lsls	r2, r2, #4
 800bab8:	b2d2      	uxtb	r2, r2
 800baba:	440b      	add	r3, r1
 800babc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800bac0:	e00a      	b.n	800bad8 <__NVIC_SetPriority+0x40>
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	b2da      	uxtb	r2, r3
 800bac6:	4908      	ldr	r1, [pc, #32]	; (800bae8 <__NVIC_SetPriority+0x50>)
 800bac8:	79fb      	ldrb	r3, [r7, #7]
 800baca:	f003 030f 	and.w	r3, r3, #15
 800bace:	3b04      	subs	r3, #4
 800bad0:	0112      	lsls	r2, r2, #4
 800bad2:	b2d2      	uxtb	r2, r2
 800bad4:	440b      	add	r3, r1
 800bad6:	761a      	strb	r2, [r3, #24]
 800bad8:	bf00      	nop
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr
 800bae4:	e000e100 	.word	0xe000e100
 800bae8:	e000ed00 	.word	0xe000ed00

0800baec <NVIC_EncodePriority>:
 800baec:	b480      	push	{r7}
 800baee:	b089      	sub	sp, #36	; 0x24
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	607a      	str	r2, [r7, #4]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f003 0307 	and.w	r3, r3, #7
 800bafe:	61fb      	str	r3, [r7, #28]
 800bb00:	69fb      	ldr	r3, [r7, #28]
 800bb02:	f1c3 0307 	rsb	r3, r3, #7
 800bb06:	2b04      	cmp	r3, #4
 800bb08:	bf28      	it	cs
 800bb0a:	2304      	movcs	r3, #4
 800bb0c:	61bb      	str	r3, [r7, #24]
 800bb0e:	69fb      	ldr	r3, [r7, #28]
 800bb10:	3304      	adds	r3, #4
 800bb12:	2b06      	cmp	r3, #6
 800bb14:	d902      	bls.n	800bb1c <NVIC_EncodePriority+0x30>
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	3b03      	subs	r3, #3
 800bb1a:	e000      	b.n	800bb1e <NVIC_EncodePriority+0x32>
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	617b      	str	r3, [r7, #20]
 800bb20:	f04f 32ff 	mov.w	r2, #4294967295
 800bb24:	69bb      	ldr	r3, [r7, #24]
 800bb26:	fa02 f303 	lsl.w	r3, r2, r3
 800bb2a:	43da      	mvns	r2, r3
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	401a      	ands	r2, r3
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	409a      	lsls	r2, r3
 800bb34:	f04f 31ff 	mov.w	r1, #4294967295
 800bb38:	697b      	ldr	r3, [r7, #20]
 800bb3a:	fa01 f303 	lsl.w	r3, r1, r3
 800bb3e:	43d9      	mvns	r1, r3
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	400b      	ands	r3, r1
 800bb44:	4313      	orrs	r3, r2
 800bb46:	4618      	mov	r0, r3
 800bb48:	3724      	adds	r7, #36	; 0x24
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr

0800bb52 <HAL_NVIC_SetPriorityGrouping>:
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b082      	sub	sp, #8
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f7ff ff4c 	bl	800b9f8 <__NVIC_SetPriorityGrouping>
 800bb60:	bf00      	nop
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <HAL_NVIC_SetPriority>:
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b086      	sub	sp, #24
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	4603      	mov	r3, r0
 800bb70:	60b9      	str	r1, [r7, #8]
 800bb72:	607a      	str	r2, [r7, #4]
 800bb74:	73fb      	strb	r3, [r7, #15]
 800bb76:	2300      	movs	r3, #0
 800bb78:	617b      	str	r3, [r7, #20]
 800bb7a:	f7ff ff61 	bl	800ba40 <__NVIC_GetPriorityGrouping>
 800bb7e:	6178      	str	r0, [r7, #20]
 800bb80:	687a      	ldr	r2, [r7, #4]
 800bb82:	68b9      	ldr	r1, [r7, #8]
 800bb84:	6978      	ldr	r0, [r7, #20]
 800bb86:	f7ff ffb1 	bl	800baec <NVIC_EncodePriority>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bb90:	4611      	mov	r1, r2
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7ff ff80 	bl	800ba98 <__NVIC_SetPriority>
 800bb98:	bf00      	nop
 800bb9a:	3718      	adds	r7, #24
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <HAL_NVIC_EnableIRQ>:
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	4603      	mov	r3, r0
 800bba8:	71fb      	strb	r3, [r7, #7]
 800bbaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7ff ff54 	bl	800ba5c <__NVIC_EnableIRQ>
 800bbb4:	bf00      	nop
 800bbb6:	3708      	adds	r7, #8
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}

0800bbbc <HAL_CRC_Init>:
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d101      	bne.n	800bbce <HAL_CRC_Init+0x12>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	e00e      	b.n	800bbec <HAL_CRC_Init+0x30>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	795b      	ldrb	r3, [r3, #5]
 800bbd2:	b2db      	uxtb	r3, r3
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d105      	bne.n	800bbe4 <HAL_CRC_Init+0x28>
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2200      	movs	r2, #0
 800bbdc:	711a      	strb	r2, [r3, #4]
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f7fd fbe8 	bl	80093b4 <HAL_CRC_MspInit>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	2201      	movs	r2, #1
 800bbe8:	715a      	strb	r2, [r3, #5]
 800bbea:	2300      	movs	r3, #0
 800bbec:	4618      	mov	r0, r3
 800bbee:	3708      	adds	r7, #8
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <HAL_DMA_Init>:
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b086      	sub	sp, #24
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	617b      	str	r3, [r7, #20]
 800bc00:	f7fe fdf0 	bl	800a7e4 <HAL_GetTick>
 800bc04:	6138      	str	r0, [r7, #16]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d101      	bne.n	800bc10 <HAL_DMA_Init+0x1c>
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	e099      	b.n	800bd44 <HAL_DMA_Init+0x150>
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2202      	movs	r2, #2
 800bc14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2200      	movs	r2, #0
 800bc1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f022 0201 	bic.w	r2, r2, #1
 800bc2e:	601a      	str	r2, [r3, #0]
 800bc30:	e00f      	b.n	800bc52 <HAL_DMA_Init+0x5e>
 800bc32:	f7fe fdd7 	bl	800a7e4 <HAL_GetTick>
 800bc36:	4602      	mov	r2, r0
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	1ad3      	subs	r3, r2, r3
 800bc3c:	2b05      	cmp	r3, #5
 800bc3e:	d908      	bls.n	800bc52 <HAL_DMA_Init+0x5e>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2220      	movs	r2, #32
 800bc44:	655a      	str	r2, [r3, #84]	; 0x54
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2203      	movs	r2, #3
 800bc4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800bc4e:	2303      	movs	r3, #3
 800bc50:	e078      	b.n	800bd44 <HAL_DMA_Init+0x150>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f003 0301 	and.w	r3, r3, #1
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d1e8      	bne.n	800bc32 <HAL_DMA_Init+0x3e>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	617b      	str	r3, [r7, #20]
 800bc68:	697a      	ldr	r2, [r7, #20]
 800bc6a:	4b38      	ldr	r3, [pc, #224]	; (800bd4c <HAL_DMA_Init+0x158>)
 800bc6c:	4013      	ands	r3, r2
 800bc6e:	617b      	str	r3, [r7, #20]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	685a      	ldr	r2, [r3, #4]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	689b      	ldr	r3, [r3, #8]
 800bc78:	431a      	orrs	r2, r3
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	431a      	orrs	r2, r3
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	691b      	ldr	r3, [r3, #16]
 800bc84:	431a      	orrs	r2, r3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	695b      	ldr	r3, [r3, #20]
 800bc8a:	431a      	orrs	r2, r3
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	699b      	ldr	r3, [r3, #24]
 800bc90:	431a      	orrs	r2, r3
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	69db      	ldr	r3, [r3, #28]
 800bc96:	431a      	orrs	r2, r3
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	6a1b      	ldr	r3, [r3, #32]
 800bc9c:	4313      	orrs	r3, r2
 800bc9e:	697a      	ldr	r2, [r7, #20]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	617b      	str	r3, [r7, #20]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bca8:	2b04      	cmp	r3, #4
 800bcaa:	d107      	bne.n	800bcbc <HAL_DMA_Init+0xc8>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	697a      	ldr	r2, [r7, #20]
 800bcb8:	4313      	orrs	r3, r2
 800bcba:	617b      	str	r3, [r7, #20]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	697a      	ldr	r2, [r7, #20]
 800bcc2:	601a      	str	r2, [r3, #0]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	695b      	ldr	r3, [r3, #20]
 800bcca:	617b      	str	r3, [r7, #20]
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	f023 0307 	bic.w	r3, r3, #7
 800bcd2:	617b      	str	r3, [r7, #20]
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcd8:	697a      	ldr	r2, [r7, #20]
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	617b      	str	r3, [r7, #20]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce2:	2b04      	cmp	r3, #4
 800bce4:	d117      	bne.n	800bd16 <HAL_DMA_Init+0x122>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcea:	697a      	ldr	r2, [r7, #20]
 800bcec:	4313      	orrs	r3, r2
 800bcee:	617b      	str	r3, [r7, #20]
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d00e      	beq.n	800bd16 <HAL_DMA_Init+0x122>
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 f9e9 	bl	800c0d0 <DMA_CheckFifoParam>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d008      	beq.n	800bd16 <HAL_DMA_Init+0x122>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2240      	movs	r2, #64	; 0x40
 800bd08:	655a      	str	r2, [r3, #84]	; 0x54
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800bd12:	2301      	movs	r3, #1
 800bd14:	e016      	b.n	800bd44 <HAL_DMA_Init+0x150>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	697a      	ldr	r2, [r7, #20]
 800bd1c:	615a      	str	r2, [r3, #20]
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 f9a0 	bl	800c064 <DMA_CalcBaseAndBitshift>
 800bd24:	4603      	mov	r3, r0
 800bd26:	60fb      	str	r3, [r7, #12]
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd2c:	223f      	movs	r2, #63	; 0x3f
 800bd2e:	409a      	lsls	r2, r3
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	609a      	str	r2, [r3, #8]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2200      	movs	r2, #0
 800bd38:	655a      	str	r2, [r3, #84]	; 0x54
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800bd42:	2300      	movs	r3, #0
 800bd44:	4618      	mov	r0, r3
 800bd46:	3718      	adds	r7, #24
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}
 800bd4c:	f010803f 	.word	0xf010803f

0800bd50 <HAL_DMA_IRQHandler>:
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b086      	sub	sp, #24
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
 800bd58:	2300      	movs	r3, #0
 800bd5a:	60bb      	str	r3, [r7, #8]
 800bd5c:	4b8e      	ldr	r3, [pc, #568]	; (800bf98 <HAL_DMA_IRQHandler+0x248>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a8e      	ldr	r2, [pc, #568]	; (800bf9c <HAL_DMA_IRQHandler+0x24c>)
 800bd62:	fba2 2303 	umull	r2, r3, r2, r3
 800bd66:	0a9b      	lsrs	r3, r3, #10
 800bd68:	617b      	str	r3, [r7, #20]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd6e:	613b      	str	r3, [r7, #16]
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	60fb      	str	r3, [r7, #12]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd7a:	2208      	movs	r2, #8
 800bd7c:	409a      	lsls	r2, r3
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	4013      	ands	r3, r2
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d01a      	beq.n	800bdbc <HAL_DMA_IRQHandler+0x6c>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f003 0304 	and.w	r3, r3, #4
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d013      	beq.n	800bdbc <HAL_DMA_IRQHandler+0x6c>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f022 0204 	bic.w	r2, r2, #4
 800bda2:	601a      	str	r2, [r3, #0]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bda8:	2208      	movs	r2, #8
 800bdaa:	409a      	lsls	r2, r3
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	609a      	str	r2, [r3, #8]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdb4:	f043 0201 	orr.w	r2, r3, #1
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	655a      	str	r2, [r3, #84]	; 0x54
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	409a      	lsls	r2, r3
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	4013      	ands	r3, r2
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d012      	beq.n	800bdf2 <HAL_DMA_IRQHandler+0xa2>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	695b      	ldr	r3, [r3, #20]
 800bdd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d00b      	beq.n	800bdf2 <HAL_DMA_IRQHandler+0xa2>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdde:	2201      	movs	r2, #1
 800bde0:	409a      	lsls	r2, r3
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	609a      	str	r2, [r3, #8]
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdea:	f043 0202 	orr.w	r2, r3, #2
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	655a      	str	r2, [r3, #84]	; 0x54
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bdf6:	2204      	movs	r2, #4
 800bdf8:	409a      	lsls	r2, r3
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	4013      	ands	r3, r2
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d012      	beq.n	800be28 <HAL_DMA_IRQHandler+0xd8>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	f003 0302 	and.w	r3, r3, #2
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d00b      	beq.n	800be28 <HAL_DMA_IRQHandler+0xd8>
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be14:	2204      	movs	r2, #4
 800be16:	409a      	lsls	r2, r3
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	609a      	str	r2, [r3, #8]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be20:	f043 0204 	orr.w	r2, r3, #4
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	655a      	str	r2, [r3, #84]	; 0x54
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be2c:	2210      	movs	r2, #16
 800be2e:	409a      	lsls	r2, r3
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	4013      	ands	r3, r2
 800be34:	2b00      	cmp	r3, #0
 800be36:	d043      	beq.n	800bec0 <HAL_DMA_IRQHandler+0x170>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f003 0308 	and.w	r3, r3, #8
 800be42:	2b00      	cmp	r3, #0
 800be44:	d03c      	beq.n	800bec0 <HAL_DMA_IRQHandler+0x170>
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800be4a:	2210      	movs	r2, #16
 800be4c:	409a      	lsls	r2, r3
 800be4e:	693b      	ldr	r3, [r7, #16]
 800be50:	609a      	str	r2, [r3, #8]
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d018      	beq.n	800be92 <HAL_DMA_IRQHandler+0x142>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d108      	bne.n	800be80 <HAL_DMA_IRQHandler+0x130>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be72:	2b00      	cmp	r3, #0
 800be74:	d024      	beq.n	800bec0 <HAL_DMA_IRQHandler+0x170>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	4798      	blx	r3
 800be7e:	e01f      	b.n	800bec0 <HAL_DMA_IRQHandler+0x170>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be84:	2b00      	cmp	r3, #0
 800be86:	d01b      	beq.n	800bec0 <HAL_DMA_IRQHandler+0x170>
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be8c:	6878      	ldr	r0, [r7, #4]
 800be8e:	4798      	blx	r3
 800be90:	e016      	b.n	800bec0 <HAL_DMA_IRQHandler+0x170>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d107      	bne.n	800beb0 <HAL_DMA_IRQHandler+0x160>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f022 0208 	bic.w	r2, r2, #8
 800beae:	601a      	str	r2, [r3, #0]
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d003      	beq.n	800bec0 <HAL_DMA_IRQHandler+0x170>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	4798      	blx	r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bec4:	2220      	movs	r2, #32
 800bec6:	409a      	lsls	r2, r3
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	4013      	ands	r3, r2
 800becc:	2b00      	cmp	r3, #0
 800bece:	f000 808f 	beq.w	800bff0 <HAL_DMA_IRQHandler+0x2a0>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	f003 0310 	and.w	r3, r3, #16
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f000 8087 	beq.w	800bff0 <HAL_DMA_IRQHandler+0x2a0>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bee6:	2220      	movs	r2, #32
 800bee8:	409a      	lsls	r2, r3
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	609a      	str	r2, [r3, #8]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800bef4:	b2db      	uxtb	r3, r3
 800bef6:	2b05      	cmp	r3, #5
 800bef8:	d136      	bne.n	800bf68 <HAL_DMA_IRQHandler+0x218>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f022 0216 	bic.w	r2, r2, #22
 800bf08:	601a      	str	r2, [r3, #0]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	695a      	ldr	r2, [r3, #20]
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bf18:	615a      	str	r2, [r3, #20]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d103      	bne.n	800bf2a <HAL_DMA_IRQHandler+0x1da>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d007      	beq.n	800bf3a <HAL_DMA_IRQHandler+0x1ea>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	681a      	ldr	r2, [r3, #0]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f022 0208 	bic.w	r2, r2, #8
 800bf38:	601a      	str	r2, [r3, #0]
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bf3e:	223f      	movs	r2, #63	; 0x3f
 800bf40:	409a      	lsls	r2, r3
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	609a      	str	r2, [r3, #8]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	2201      	movs	r2, #1
 800bf4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2200      	movs	r2, #0
 800bf52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d07e      	beq.n	800c05c <HAL_DMA_IRQHandler+0x30c>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	4798      	blx	r3
 800bf66:	e079      	b.n	800c05c <HAL_DMA_IRQHandler+0x30c>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d01d      	beq.n	800bfb2 <HAL_DMA_IRQHandler+0x262>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d10d      	bne.n	800bfa0 <HAL_DMA_IRQHandler+0x250>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d031      	beq.n	800bff0 <HAL_DMA_IRQHandler+0x2a0>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	4798      	blx	r3
 800bf94:	e02c      	b.n	800bff0 <HAL_DMA_IRQHandler+0x2a0>
 800bf96:	bf00      	nop
 800bf98:	20000020 	.word	0x20000020
 800bf9c:	1b4e81b5 	.word	0x1b4e81b5
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d023      	beq.n	800bff0 <HAL_DMA_IRQHandler+0x2a0>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	4798      	blx	r3
 800bfb0:	e01e      	b.n	800bff0 <HAL_DMA_IRQHandler+0x2a0>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d10f      	bne.n	800bfe0 <HAL_DMA_IRQHandler+0x290>
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	681a      	ldr	r2, [r3, #0]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f022 0210 	bic.w	r2, r2, #16
 800bfce:	601a      	str	r2, [r3, #0]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2201      	movs	r2, #1
 800bfd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d003      	beq.n	800bff0 <HAL_DMA_IRQHandler+0x2a0>
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	4798      	blx	r3
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d032      	beq.n	800c05e <HAL_DMA_IRQHandler+0x30e>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bffc:	f003 0301 	and.w	r3, r3, #1
 800c000:	2b00      	cmp	r3, #0
 800c002:	d022      	beq.n	800c04a <HAL_DMA_IRQHandler+0x2fa>
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2205      	movs	r2, #5
 800c008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	681a      	ldr	r2, [r3, #0]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f022 0201 	bic.w	r2, r2, #1
 800c01a:	601a      	str	r2, [r3, #0]
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	3301      	adds	r3, #1
 800c020:	60bb      	str	r3, [r7, #8]
 800c022:	697a      	ldr	r2, [r7, #20]
 800c024:	429a      	cmp	r2, r3
 800c026:	d307      	bcc.n	800c038 <HAL_DMA_IRQHandler+0x2e8>
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f003 0301 	and.w	r3, r3, #1
 800c032:	2b00      	cmp	r3, #0
 800c034:	d1f2      	bne.n	800c01c <HAL_DMA_IRQHandler+0x2cc>
 800c036:	e000      	b.n	800c03a <HAL_DMA_IRQHandler+0x2ea>
 800c038:	bf00      	nop
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2201      	movs	r2, #1
 800c03e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2200      	movs	r2, #0
 800c046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d005      	beq.n	800c05e <HAL_DMA_IRQHandler+0x30e>
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	4798      	blx	r3
 800c05a:	e000      	b.n	800c05e <HAL_DMA_IRQHandler+0x30e>
 800c05c:	bf00      	nop
 800c05e:	3718      	adds	r7, #24
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <DMA_CalcBaseAndBitshift>:
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	b2db      	uxtb	r3, r3
 800c072:	3b10      	subs	r3, #16
 800c074:	4a14      	ldr	r2, [pc, #80]	; (800c0c8 <DMA_CalcBaseAndBitshift+0x64>)
 800c076:	fba2 2303 	umull	r2, r3, r2, r3
 800c07a:	091b      	lsrs	r3, r3, #4
 800c07c:	60fb      	str	r3, [r7, #12]
 800c07e:	4a13      	ldr	r2, [pc, #76]	; (800c0cc <DMA_CalcBaseAndBitshift+0x68>)
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	4413      	add	r3, r2
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	461a      	mov	r2, r3
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	65da      	str	r2, [r3, #92]	; 0x5c
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2b03      	cmp	r3, #3
 800c090:	d909      	bls.n	800c0a6 <DMA_CalcBaseAndBitshift+0x42>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c09a:	f023 0303 	bic.w	r3, r3, #3
 800c09e:	1d1a      	adds	r2, r3, #4
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	659a      	str	r2, [r3, #88]	; 0x58
 800c0a4:	e007      	b.n	800c0b6 <DMA_CalcBaseAndBitshift+0x52>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800c0ae:	f023 0303 	bic.w	r3, r3, #3
 800c0b2:	687a      	ldr	r2, [r7, #4]
 800c0b4:	6593      	str	r3, [r2, #88]	; 0x58
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3714      	adds	r7, #20
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c4:	4770      	bx	lr
 800c0c6:	bf00      	nop
 800c0c8:	aaaaaaab 	.word	0xaaaaaaab
 800c0cc:	080176b8 	.word	0x080176b8

0800c0d0 <DMA_CheckFifoParam>:
 800c0d0:	b480      	push	{r7}
 800c0d2:	b085      	sub	sp, #20
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	2300      	movs	r3, #0
 800c0da:	73fb      	strb	r3, [r7, #15]
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0e0:	60bb      	str	r3, [r7, #8]
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	699b      	ldr	r3, [r3, #24]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d11f      	bne.n	800c12a <DMA_CheckFifoParam+0x5a>
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	2b03      	cmp	r3, #3
 800c0ee:	d856      	bhi.n	800c19e <DMA_CheckFifoParam+0xce>
 800c0f0:	a201      	add	r2, pc, #4	; (adr r2, 800c0f8 <DMA_CheckFifoParam+0x28>)
 800c0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f6:	bf00      	nop
 800c0f8:	0800c109 	.word	0x0800c109
 800c0fc:	0800c11b 	.word	0x0800c11b
 800c100:	0800c109 	.word	0x0800c109
 800c104:	0800c19f 	.word	0x0800c19f
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c10c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c110:	2b00      	cmp	r3, #0
 800c112:	d046      	beq.n	800c1a2 <DMA_CheckFifoParam+0xd2>
 800c114:	2301      	movs	r3, #1
 800c116:	73fb      	strb	r3, [r7, #15]
 800c118:	e043      	b.n	800c1a2 <DMA_CheckFifoParam+0xd2>
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c11e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c122:	d140      	bne.n	800c1a6 <DMA_CheckFifoParam+0xd6>
 800c124:	2301      	movs	r3, #1
 800c126:	73fb      	strb	r3, [r7, #15]
 800c128:	e03d      	b.n	800c1a6 <DMA_CheckFifoParam+0xd6>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	699b      	ldr	r3, [r3, #24]
 800c12e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c132:	d121      	bne.n	800c178 <DMA_CheckFifoParam+0xa8>
 800c134:	68bb      	ldr	r3, [r7, #8]
 800c136:	2b03      	cmp	r3, #3
 800c138:	d837      	bhi.n	800c1aa <DMA_CheckFifoParam+0xda>
 800c13a:	a201      	add	r2, pc, #4	; (adr r2, 800c140 <DMA_CheckFifoParam+0x70>)
 800c13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c140:	0800c151 	.word	0x0800c151
 800c144:	0800c157 	.word	0x0800c157
 800c148:	0800c151 	.word	0x0800c151
 800c14c:	0800c169 	.word	0x0800c169
 800c150:	2301      	movs	r3, #1
 800c152:	73fb      	strb	r3, [r7, #15]
 800c154:	e030      	b.n	800c1b8 <DMA_CheckFifoParam+0xe8>
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c15a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d025      	beq.n	800c1ae <DMA_CheckFifoParam+0xde>
 800c162:	2301      	movs	r3, #1
 800c164:	73fb      	strb	r3, [r7, #15]
 800c166:	e022      	b.n	800c1ae <DMA_CheckFifoParam+0xde>
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c16c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800c170:	d11f      	bne.n	800c1b2 <DMA_CheckFifoParam+0xe2>
 800c172:	2301      	movs	r3, #1
 800c174:	73fb      	strb	r3, [r7, #15]
 800c176:	e01c      	b.n	800c1b2 <DMA_CheckFifoParam+0xe2>
 800c178:	68bb      	ldr	r3, [r7, #8]
 800c17a:	2b02      	cmp	r3, #2
 800c17c:	d903      	bls.n	800c186 <DMA_CheckFifoParam+0xb6>
 800c17e:	68bb      	ldr	r3, [r7, #8]
 800c180:	2b03      	cmp	r3, #3
 800c182:	d003      	beq.n	800c18c <DMA_CheckFifoParam+0xbc>
 800c184:	e018      	b.n	800c1b8 <DMA_CheckFifoParam+0xe8>
 800c186:	2301      	movs	r3, #1
 800c188:	73fb      	strb	r3, [r7, #15]
 800c18a:	e015      	b.n	800c1b8 <DMA_CheckFifoParam+0xe8>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c190:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c194:	2b00      	cmp	r3, #0
 800c196:	d00e      	beq.n	800c1b6 <DMA_CheckFifoParam+0xe6>
 800c198:	2301      	movs	r3, #1
 800c19a:	73fb      	strb	r3, [r7, #15]
 800c19c:	e00b      	b.n	800c1b6 <DMA_CheckFifoParam+0xe6>
 800c19e:	bf00      	nop
 800c1a0:	e00a      	b.n	800c1b8 <DMA_CheckFifoParam+0xe8>
 800c1a2:	bf00      	nop
 800c1a4:	e008      	b.n	800c1b8 <DMA_CheckFifoParam+0xe8>
 800c1a6:	bf00      	nop
 800c1a8:	e006      	b.n	800c1b8 <DMA_CheckFifoParam+0xe8>
 800c1aa:	bf00      	nop
 800c1ac:	e004      	b.n	800c1b8 <DMA_CheckFifoParam+0xe8>
 800c1ae:	bf00      	nop
 800c1b0:	e002      	b.n	800c1b8 <DMA_CheckFifoParam+0xe8>
 800c1b2:	bf00      	nop
 800c1b4:	e000      	b.n	800c1b8 <DMA_CheckFifoParam+0xe8>
 800c1b6:	bf00      	nop
 800c1b8:	7bfb      	ldrb	r3, [r7, #15]
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3714      	adds	r7, #20
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c4:	4770      	bx	lr
 800c1c6:	bf00      	nop

0800c1c8 <HAL_GPIO_Init>:
 800c1c8:	b480      	push	{r7}
 800c1ca:	b089      	sub	sp, #36	; 0x24
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	617b      	str	r3, [r7, #20]
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	613b      	str	r3, [r7, #16]
 800c1da:	2300      	movs	r3, #0
 800c1dc:	61bb      	str	r3, [r7, #24]
 800c1de:	2300      	movs	r3, #0
 800c1e0:	61fb      	str	r3, [r7, #28]
 800c1e2:	e16b      	b.n	800c4bc <HAL_GPIO_Init+0x2f4>
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	69fb      	ldr	r3, [r7, #28]
 800c1e8:	fa02 f303 	lsl.w	r3, r2, r3
 800c1ec:	617b      	str	r3, [r7, #20]
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	697a      	ldr	r2, [r7, #20]
 800c1f4:	4013      	ands	r3, r2
 800c1f6:	613b      	str	r3, [r7, #16]
 800c1f8:	693a      	ldr	r2, [r7, #16]
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	f040 815a 	bne.w	800c4b6 <HAL_GPIO_Init+0x2ee>
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	685b      	ldr	r3, [r3, #4]
 800c206:	f003 0303 	and.w	r3, r3, #3
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	d005      	beq.n	800c21a <HAL_GPIO_Init+0x52>
 800c20e:	683b      	ldr	r3, [r7, #0]
 800c210:	685b      	ldr	r3, [r3, #4]
 800c212:	f003 0303 	and.w	r3, r3, #3
 800c216:	2b02      	cmp	r3, #2
 800c218:	d130      	bne.n	800c27c <HAL_GPIO_Init+0xb4>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	61bb      	str	r3, [r7, #24]
 800c220:	69fb      	ldr	r3, [r7, #28]
 800c222:	005b      	lsls	r3, r3, #1
 800c224:	2203      	movs	r2, #3
 800c226:	fa02 f303 	lsl.w	r3, r2, r3
 800c22a:	43db      	mvns	r3, r3
 800c22c:	69ba      	ldr	r2, [r7, #24]
 800c22e:	4013      	ands	r3, r2
 800c230:	61bb      	str	r3, [r7, #24]
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	68da      	ldr	r2, [r3, #12]
 800c236:	69fb      	ldr	r3, [r7, #28]
 800c238:	005b      	lsls	r3, r3, #1
 800c23a:	fa02 f303 	lsl.w	r3, r2, r3
 800c23e:	69ba      	ldr	r2, [r7, #24]
 800c240:	4313      	orrs	r3, r2
 800c242:	61bb      	str	r3, [r7, #24]
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	69ba      	ldr	r2, [r7, #24]
 800c248:	609a      	str	r2, [r3, #8]
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	61bb      	str	r3, [r7, #24]
 800c250:	2201      	movs	r2, #1
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	fa02 f303 	lsl.w	r3, r2, r3
 800c258:	43db      	mvns	r3, r3
 800c25a:	69ba      	ldr	r2, [r7, #24]
 800c25c:	4013      	ands	r3, r2
 800c25e:	61bb      	str	r3, [r7, #24]
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	091b      	lsrs	r3, r3, #4
 800c266:	f003 0201 	and.w	r2, r3, #1
 800c26a:	69fb      	ldr	r3, [r7, #28]
 800c26c:	fa02 f303 	lsl.w	r3, r2, r3
 800c270:	69ba      	ldr	r2, [r7, #24]
 800c272:	4313      	orrs	r3, r2
 800c274:	61bb      	str	r3, [r7, #24]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	69ba      	ldr	r2, [r7, #24]
 800c27a:	605a      	str	r2, [r3, #4]
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	685b      	ldr	r3, [r3, #4]
 800c280:	f003 0303 	and.w	r3, r3, #3
 800c284:	2b03      	cmp	r3, #3
 800c286:	d017      	beq.n	800c2b8 <HAL_GPIO_Init+0xf0>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	61bb      	str	r3, [r7, #24]
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	005b      	lsls	r3, r3, #1
 800c292:	2203      	movs	r2, #3
 800c294:	fa02 f303 	lsl.w	r3, r2, r3
 800c298:	43db      	mvns	r3, r3
 800c29a:	69ba      	ldr	r2, [r7, #24]
 800c29c:	4013      	ands	r3, r2
 800c29e:	61bb      	str	r3, [r7, #24]
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	689a      	ldr	r2, [r3, #8]
 800c2a4:	69fb      	ldr	r3, [r7, #28]
 800c2a6:	005b      	lsls	r3, r3, #1
 800c2a8:	fa02 f303 	lsl.w	r3, r2, r3
 800c2ac:	69ba      	ldr	r2, [r7, #24]
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	61bb      	str	r3, [r7, #24]
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	69ba      	ldr	r2, [r7, #24]
 800c2b6:	60da      	str	r2, [r3, #12]
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	f003 0303 	and.w	r3, r3, #3
 800c2c0:	2b02      	cmp	r3, #2
 800c2c2:	d123      	bne.n	800c30c <HAL_GPIO_Init+0x144>
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	08da      	lsrs	r2, r3, #3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	3208      	adds	r2, #8
 800c2cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2d0:	61bb      	str	r3, [r7, #24]
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	f003 0307 	and.w	r3, r3, #7
 800c2d8:	009b      	lsls	r3, r3, #2
 800c2da:	220f      	movs	r2, #15
 800c2dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c2e0:	43db      	mvns	r3, r3
 800c2e2:	69ba      	ldr	r2, [r7, #24]
 800c2e4:	4013      	ands	r3, r2
 800c2e6:	61bb      	str	r3, [r7, #24]
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	691a      	ldr	r2, [r3, #16]
 800c2ec:	69fb      	ldr	r3, [r7, #28]
 800c2ee:	f003 0307 	and.w	r3, r3, #7
 800c2f2:	009b      	lsls	r3, r3, #2
 800c2f4:	fa02 f303 	lsl.w	r3, r2, r3
 800c2f8:	69ba      	ldr	r2, [r7, #24]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	61bb      	str	r3, [r7, #24]
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	08da      	lsrs	r2, r3, #3
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	3208      	adds	r2, #8
 800c306:	69b9      	ldr	r1, [r7, #24]
 800c308:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	61bb      	str	r3, [r7, #24]
 800c312:	69fb      	ldr	r3, [r7, #28]
 800c314:	005b      	lsls	r3, r3, #1
 800c316:	2203      	movs	r2, #3
 800c318:	fa02 f303 	lsl.w	r3, r2, r3
 800c31c:	43db      	mvns	r3, r3
 800c31e:	69ba      	ldr	r2, [r7, #24]
 800c320:	4013      	ands	r3, r2
 800c322:	61bb      	str	r3, [r7, #24]
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	f003 0203 	and.w	r2, r3, #3
 800c32c:	69fb      	ldr	r3, [r7, #28]
 800c32e:	005b      	lsls	r3, r3, #1
 800c330:	fa02 f303 	lsl.w	r3, r2, r3
 800c334:	69ba      	ldr	r2, [r7, #24]
 800c336:	4313      	orrs	r3, r2
 800c338:	61bb      	str	r3, [r7, #24]
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	69ba      	ldr	r2, [r7, #24]
 800c33e:	601a      	str	r2, [r3, #0]
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c348:	2b00      	cmp	r3, #0
 800c34a:	f000 80b4 	beq.w	800c4b6 <HAL_GPIO_Init+0x2ee>
 800c34e:	2300      	movs	r3, #0
 800c350:	60fb      	str	r3, [r7, #12]
 800c352:	4b60      	ldr	r3, [pc, #384]	; (800c4d4 <HAL_GPIO_Init+0x30c>)
 800c354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c356:	4a5f      	ldr	r2, [pc, #380]	; (800c4d4 <HAL_GPIO_Init+0x30c>)
 800c358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c35c:	6453      	str	r3, [r2, #68]	; 0x44
 800c35e:	4b5d      	ldr	r3, [pc, #372]	; (800c4d4 <HAL_GPIO_Init+0x30c>)
 800c360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c366:	60fb      	str	r3, [r7, #12]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	4a5b      	ldr	r2, [pc, #364]	; (800c4d8 <HAL_GPIO_Init+0x310>)
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	089b      	lsrs	r3, r3, #2
 800c370:	3302      	adds	r3, #2
 800c372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c376:	61bb      	str	r3, [r7, #24]
 800c378:	69fb      	ldr	r3, [r7, #28]
 800c37a:	f003 0303 	and.w	r3, r3, #3
 800c37e:	009b      	lsls	r3, r3, #2
 800c380:	220f      	movs	r2, #15
 800c382:	fa02 f303 	lsl.w	r3, r2, r3
 800c386:	43db      	mvns	r3, r3
 800c388:	69ba      	ldr	r2, [r7, #24]
 800c38a:	4013      	ands	r3, r2
 800c38c:	61bb      	str	r3, [r7, #24]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	4a52      	ldr	r2, [pc, #328]	; (800c4dc <HAL_GPIO_Init+0x314>)
 800c392:	4293      	cmp	r3, r2
 800c394:	d02b      	beq.n	800c3ee <HAL_GPIO_Init+0x226>
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	4a51      	ldr	r2, [pc, #324]	; (800c4e0 <HAL_GPIO_Init+0x318>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d025      	beq.n	800c3ea <HAL_GPIO_Init+0x222>
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	4a50      	ldr	r2, [pc, #320]	; (800c4e4 <HAL_GPIO_Init+0x31c>)
 800c3a2:	4293      	cmp	r3, r2
 800c3a4:	d01f      	beq.n	800c3e6 <HAL_GPIO_Init+0x21e>
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	4a4f      	ldr	r2, [pc, #316]	; (800c4e8 <HAL_GPIO_Init+0x320>)
 800c3aa:	4293      	cmp	r3, r2
 800c3ac:	d019      	beq.n	800c3e2 <HAL_GPIO_Init+0x21a>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	4a4e      	ldr	r2, [pc, #312]	; (800c4ec <HAL_GPIO_Init+0x324>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d013      	beq.n	800c3de <HAL_GPIO_Init+0x216>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	4a4d      	ldr	r2, [pc, #308]	; (800c4f0 <HAL_GPIO_Init+0x328>)
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d00d      	beq.n	800c3da <HAL_GPIO_Init+0x212>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	4a4c      	ldr	r2, [pc, #304]	; (800c4f4 <HAL_GPIO_Init+0x32c>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d007      	beq.n	800c3d6 <HAL_GPIO_Init+0x20e>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4a4b      	ldr	r2, [pc, #300]	; (800c4f8 <HAL_GPIO_Init+0x330>)
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	d101      	bne.n	800c3d2 <HAL_GPIO_Init+0x20a>
 800c3ce:	2307      	movs	r3, #7
 800c3d0:	e00e      	b.n	800c3f0 <HAL_GPIO_Init+0x228>
 800c3d2:	2308      	movs	r3, #8
 800c3d4:	e00c      	b.n	800c3f0 <HAL_GPIO_Init+0x228>
 800c3d6:	2306      	movs	r3, #6
 800c3d8:	e00a      	b.n	800c3f0 <HAL_GPIO_Init+0x228>
 800c3da:	2305      	movs	r3, #5
 800c3dc:	e008      	b.n	800c3f0 <HAL_GPIO_Init+0x228>
 800c3de:	2304      	movs	r3, #4
 800c3e0:	e006      	b.n	800c3f0 <HAL_GPIO_Init+0x228>
 800c3e2:	2303      	movs	r3, #3
 800c3e4:	e004      	b.n	800c3f0 <HAL_GPIO_Init+0x228>
 800c3e6:	2302      	movs	r3, #2
 800c3e8:	e002      	b.n	800c3f0 <HAL_GPIO_Init+0x228>
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e000      	b.n	800c3f0 <HAL_GPIO_Init+0x228>
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	69fa      	ldr	r2, [r7, #28]
 800c3f2:	f002 0203 	and.w	r2, r2, #3
 800c3f6:	0092      	lsls	r2, r2, #2
 800c3f8:	4093      	lsls	r3, r2
 800c3fa:	69ba      	ldr	r2, [r7, #24]
 800c3fc:	4313      	orrs	r3, r2
 800c3fe:	61bb      	str	r3, [r7, #24]
 800c400:	4935      	ldr	r1, [pc, #212]	; (800c4d8 <HAL_GPIO_Init+0x310>)
 800c402:	69fb      	ldr	r3, [r7, #28]
 800c404:	089b      	lsrs	r3, r3, #2
 800c406:	3302      	adds	r3, #2
 800c408:	69ba      	ldr	r2, [r7, #24]
 800c40a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c40e:	4b3b      	ldr	r3, [pc, #236]	; (800c4fc <HAL_GPIO_Init+0x334>)
 800c410:	689b      	ldr	r3, [r3, #8]
 800c412:	61bb      	str	r3, [r7, #24]
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	43db      	mvns	r3, r3
 800c418:	69ba      	ldr	r2, [r7, #24]
 800c41a:	4013      	ands	r3, r2
 800c41c:	61bb      	str	r3, [r7, #24]
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	685b      	ldr	r3, [r3, #4]
 800c422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c426:	2b00      	cmp	r3, #0
 800c428:	d003      	beq.n	800c432 <HAL_GPIO_Init+0x26a>
 800c42a:	69ba      	ldr	r2, [r7, #24]
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	4313      	orrs	r3, r2
 800c430:	61bb      	str	r3, [r7, #24]
 800c432:	4a32      	ldr	r2, [pc, #200]	; (800c4fc <HAL_GPIO_Init+0x334>)
 800c434:	69bb      	ldr	r3, [r7, #24]
 800c436:	6093      	str	r3, [r2, #8]
 800c438:	4b30      	ldr	r3, [pc, #192]	; (800c4fc <HAL_GPIO_Init+0x334>)
 800c43a:	68db      	ldr	r3, [r3, #12]
 800c43c:	61bb      	str	r3, [r7, #24]
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	43db      	mvns	r3, r3
 800c442:	69ba      	ldr	r2, [r7, #24]
 800c444:	4013      	ands	r3, r2
 800c446:	61bb      	str	r3, [r7, #24]
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c450:	2b00      	cmp	r3, #0
 800c452:	d003      	beq.n	800c45c <HAL_GPIO_Init+0x294>
 800c454:	69ba      	ldr	r2, [r7, #24]
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	4313      	orrs	r3, r2
 800c45a:	61bb      	str	r3, [r7, #24]
 800c45c:	4a27      	ldr	r2, [pc, #156]	; (800c4fc <HAL_GPIO_Init+0x334>)
 800c45e:	69bb      	ldr	r3, [r7, #24]
 800c460:	60d3      	str	r3, [r2, #12]
 800c462:	4b26      	ldr	r3, [pc, #152]	; (800c4fc <HAL_GPIO_Init+0x334>)
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	61bb      	str	r3, [r7, #24]
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	43db      	mvns	r3, r3
 800c46c:	69ba      	ldr	r2, [r7, #24]
 800c46e:	4013      	ands	r3, r2
 800c470:	61bb      	str	r3, [r7, #24]
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d003      	beq.n	800c486 <HAL_GPIO_Init+0x2be>
 800c47e:	69ba      	ldr	r2, [r7, #24]
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	4313      	orrs	r3, r2
 800c484:	61bb      	str	r3, [r7, #24]
 800c486:	4a1d      	ldr	r2, [pc, #116]	; (800c4fc <HAL_GPIO_Init+0x334>)
 800c488:	69bb      	ldr	r3, [r7, #24]
 800c48a:	6053      	str	r3, [r2, #4]
 800c48c:	4b1b      	ldr	r3, [pc, #108]	; (800c4fc <HAL_GPIO_Init+0x334>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	61bb      	str	r3, [r7, #24]
 800c492:	693b      	ldr	r3, [r7, #16]
 800c494:	43db      	mvns	r3, r3
 800c496:	69ba      	ldr	r2, [r7, #24]
 800c498:	4013      	ands	r3, r2
 800c49a:	61bb      	str	r3, [r7, #24]
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d003      	beq.n	800c4b0 <HAL_GPIO_Init+0x2e8>
 800c4a8:	69ba      	ldr	r2, [r7, #24]
 800c4aa:	693b      	ldr	r3, [r7, #16]
 800c4ac:	4313      	orrs	r3, r2
 800c4ae:	61bb      	str	r3, [r7, #24]
 800c4b0:	4a12      	ldr	r2, [pc, #72]	; (800c4fc <HAL_GPIO_Init+0x334>)
 800c4b2:	69bb      	ldr	r3, [r7, #24]
 800c4b4:	6013      	str	r3, [r2, #0]
 800c4b6:	69fb      	ldr	r3, [r7, #28]
 800c4b8:	3301      	adds	r3, #1
 800c4ba:	61fb      	str	r3, [r7, #28]
 800c4bc:	69fb      	ldr	r3, [r7, #28]
 800c4be:	2b0f      	cmp	r3, #15
 800c4c0:	f67f ae90 	bls.w	800c1e4 <HAL_GPIO_Init+0x1c>
 800c4c4:	bf00      	nop
 800c4c6:	bf00      	nop
 800c4c8:	3724      	adds	r7, #36	; 0x24
 800c4ca:	46bd      	mov	sp, r7
 800c4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d0:	4770      	bx	lr
 800c4d2:	bf00      	nop
 800c4d4:	40023800 	.word	0x40023800
 800c4d8:	40013800 	.word	0x40013800
 800c4dc:	40020000 	.word	0x40020000
 800c4e0:	40020400 	.word	0x40020400
 800c4e4:	40020800 	.word	0x40020800
 800c4e8:	40020c00 	.word	0x40020c00
 800c4ec:	40021000 	.word	0x40021000
 800c4f0:	40021400 	.word	0x40021400
 800c4f4:	40021800 	.word	0x40021800
 800c4f8:	40021c00 	.word	0x40021c00
 800c4fc:	40013c00 	.word	0x40013c00

0800c500 <HAL_GPIO_WritePin>:
 800c500:	b480      	push	{r7}
 800c502:	b083      	sub	sp, #12
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
 800c508:	460b      	mov	r3, r1
 800c50a:	807b      	strh	r3, [r7, #2]
 800c50c:	4613      	mov	r3, r2
 800c50e:	707b      	strb	r3, [r7, #1]
 800c510:	787b      	ldrb	r3, [r7, #1]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d003      	beq.n	800c51e <HAL_GPIO_WritePin+0x1e>
 800c516:	887a      	ldrh	r2, [r7, #2]
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	619a      	str	r2, [r3, #24]
 800c51c:	e003      	b.n	800c526 <HAL_GPIO_WritePin+0x26>
 800c51e:	887b      	ldrh	r3, [r7, #2]
 800c520:	041a      	lsls	r2, r3, #16
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	619a      	str	r2, [r3, #24]
 800c526:	bf00      	nop
 800c528:	370c      	adds	r7, #12
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr
	...

0800c534 <HAL_GPIO_EXTI_IRQHandler>:
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
 800c53a:	4603      	mov	r3, r0
 800c53c:	80fb      	strh	r3, [r7, #6]
 800c53e:	4b08      	ldr	r3, [pc, #32]	; (800c560 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c540:	695a      	ldr	r2, [r3, #20]
 800c542:	88fb      	ldrh	r3, [r7, #6]
 800c544:	4013      	ands	r3, r2
 800c546:	2b00      	cmp	r3, #0
 800c548:	d006      	beq.n	800c558 <HAL_GPIO_EXTI_IRQHandler+0x24>
 800c54a:	4a05      	ldr	r2, [pc, #20]	; (800c560 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800c54c:	88fb      	ldrh	r3, [r7, #6]
 800c54e:	6153      	str	r3, [r2, #20]
 800c550:	88fb      	ldrh	r3, [r7, #6]
 800c552:	4618      	mov	r0, r3
 800c554:	f002 f9ef 	bl	800e936 <HAL_GPIO_EXTI_Callback>
 800c558:	bf00      	nop
 800c55a:	3708      	adds	r7, #8
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}
 800c560:	40013c00 	.word	0x40013c00

0800c564 <HAL_I2C_Init>:
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d101      	bne.n	800c576 <HAL_I2C_Init+0x12>
 800c572:	2301      	movs	r3, #1
 800c574:	e12b      	b.n	800c7ce <HAL_I2C_Init+0x26a>
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c57c:	b2db      	uxtb	r3, r3
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d106      	bne.n	800c590 <HAL_I2C_Init+0x2c>
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2200      	movs	r2, #0
 800c586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f7fd f8e0 	bl	8009750 <HAL_I2C_MspInit>
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2224      	movs	r2, #36	; 0x24
 800c594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	681a      	ldr	r2, [r3, #0]
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	f022 0201 	bic.w	r2, r2, #1
 800c5a6:	601a      	str	r2, [r3, #0]
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	681a      	ldr	r2, [r3, #0]
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c5b6:	601a      	str	r2, [r3, #0]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c5c6:	601a      	str	r2, [r3, #0]
 800c5c8:	f000 fd7e 	bl	800d0c8 <HAL_RCC_GetPCLK1Freq>
 800c5cc:	60f8      	str	r0, [r7, #12]
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	685b      	ldr	r3, [r3, #4]
 800c5d2:	4a81      	ldr	r2, [pc, #516]	; (800c7d8 <HAL_I2C_Init+0x274>)
 800c5d4:	4293      	cmp	r3, r2
 800c5d6:	d807      	bhi.n	800c5e8 <HAL_I2C_Init+0x84>
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	4a80      	ldr	r2, [pc, #512]	; (800c7dc <HAL_I2C_Init+0x278>)
 800c5dc:	4293      	cmp	r3, r2
 800c5de:	bf94      	ite	ls
 800c5e0:	2301      	movls	r3, #1
 800c5e2:	2300      	movhi	r3, #0
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	e006      	b.n	800c5f6 <HAL_I2C_Init+0x92>
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	4a7d      	ldr	r2, [pc, #500]	; (800c7e0 <HAL_I2C_Init+0x27c>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	bf94      	ite	ls
 800c5f0:	2301      	movls	r3, #1
 800c5f2:	2300      	movhi	r3, #0
 800c5f4:	b2db      	uxtb	r3, r3
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d001      	beq.n	800c5fe <HAL_I2C_Init+0x9a>
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	e0e7      	b.n	800c7ce <HAL_I2C_Init+0x26a>
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	4a78      	ldr	r2, [pc, #480]	; (800c7e4 <HAL_I2C_Init+0x280>)
 800c602:	fba2 2303 	umull	r2, r3, r2, r3
 800c606:	0c9b      	lsrs	r3, r3, #18
 800c608:	60bb      	str	r3, [r7, #8]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	685b      	ldr	r3, [r3, #4]
 800c610:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	430a      	orrs	r2, r1
 800c61c:	605a      	str	r2, [r3, #4]
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	6a1b      	ldr	r3, [r3, #32]
 800c624:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	4a6a      	ldr	r2, [pc, #424]	; (800c7d8 <HAL_I2C_Init+0x274>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d802      	bhi.n	800c638 <HAL_I2C_Init+0xd4>
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	3301      	adds	r3, #1
 800c636:	e009      	b.n	800c64c <HAL_I2C_Init+0xe8>
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800c63e:	fb02 f303 	mul.w	r3, r2, r3
 800c642:	4a69      	ldr	r2, [pc, #420]	; (800c7e8 <HAL_I2C_Init+0x284>)
 800c644:	fba2 2303 	umull	r2, r3, r2, r3
 800c648:	099b      	lsrs	r3, r3, #6
 800c64a:	3301      	adds	r3, #1
 800c64c:	687a      	ldr	r2, [r7, #4]
 800c64e:	6812      	ldr	r2, [r2, #0]
 800c650:	430b      	orrs	r3, r1
 800c652:	6213      	str	r3, [r2, #32]
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	69db      	ldr	r3, [r3, #28]
 800c65a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800c65e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	495c      	ldr	r1, [pc, #368]	; (800c7d8 <HAL_I2C_Init+0x274>)
 800c668:	428b      	cmp	r3, r1
 800c66a:	d819      	bhi.n	800c6a0 <HAL_I2C_Init+0x13c>
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	1e59      	subs	r1, r3, #1
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	005b      	lsls	r3, r3, #1
 800c676:	fbb1 f3f3 	udiv	r3, r1, r3
 800c67a:	1c59      	adds	r1, r3, #1
 800c67c:	f640 73fc 	movw	r3, #4092	; 0xffc
 800c680:	400b      	ands	r3, r1
 800c682:	2b00      	cmp	r3, #0
 800c684:	d00a      	beq.n	800c69c <HAL_I2C_Init+0x138>
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	1e59      	subs	r1, r3, #1
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	005b      	lsls	r3, r3, #1
 800c690:	fbb1 f3f3 	udiv	r3, r1, r3
 800c694:	3301      	adds	r3, #1
 800c696:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c69a:	e051      	b.n	800c740 <HAL_I2C_Init+0x1dc>
 800c69c:	2304      	movs	r3, #4
 800c69e:	e04f      	b.n	800c740 <HAL_I2C_Init+0x1dc>
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	689b      	ldr	r3, [r3, #8]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d111      	bne.n	800c6cc <HAL_I2C_Init+0x168>
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	1e58      	subs	r0, r3, #1
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	6859      	ldr	r1, [r3, #4]
 800c6b0:	460b      	mov	r3, r1
 800c6b2:	005b      	lsls	r3, r3, #1
 800c6b4:	440b      	add	r3, r1
 800c6b6:	fbb0 f3f3 	udiv	r3, r0, r3
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	bf0c      	ite	eq
 800c6c4:	2301      	moveq	r3, #1
 800c6c6:	2300      	movne	r3, #0
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	e012      	b.n	800c6f2 <HAL_I2C_Init+0x18e>
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	1e58      	subs	r0, r3, #1
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6859      	ldr	r1, [r3, #4]
 800c6d4:	460b      	mov	r3, r1
 800c6d6:	009b      	lsls	r3, r3, #2
 800c6d8:	440b      	add	r3, r1
 800c6da:	0099      	lsls	r1, r3, #2
 800c6dc:	440b      	add	r3, r1
 800c6de:	fbb0 f3f3 	udiv	r3, r0, r3
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	bf0c      	ite	eq
 800c6ec:	2301      	moveq	r3, #1
 800c6ee:	2300      	movne	r3, #0
 800c6f0:	b2db      	uxtb	r3, r3
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d001      	beq.n	800c6fa <HAL_I2C_Init+0x196>
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e022      	b.n	800c740 <HAL_I2C_Init+0x1dc>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d10e      	bne.n	800c720 <HAL_I2C_Init+0x1bc>
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	1e58      	subs	r0, r3, #1
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6859      	ldr	r1, [r3, #4]
 800c70a:	460b      	mov	r3, r1
 800c70c:	005b      	lsls	r3, r3, #1
 800c70e:	440b      	add	r3, r1
 800c710:	fbb0 f3f3 	udiv	r3, r0, r3
 800c714:	3301      	adds	r3, #1
 800c716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c71a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c71e:	e00f      	b.n	800c740 <HAL_I2C_Init+0x1dc>
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	1e58      	subs	r0, r3, #1
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	6859      	ldr	r1, [r3, #4]
 800c728:	460b      	mov	r3, r1
 800c72a:	009b      	lsls	r3, r3, #2
 800c72c:	440b      	add	r3, r1
 800c72e:	0099      	lsls	r1, r3, #2
 800c730:	440b      	add	r3, r1
 800c732:	fbb0 f3f3 	udiv	r3, r0, r3
 800c736:	3301      	adds	r3, #1
 800c738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c73c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800c740:	6879      	ldr	r1, [r7, #4]
 800c742:	6809      	ldr	r1, [r1, #0]
 800c744:	4313      	orrs	r3, r2
 800c746:	61cb      	str	r3, [r1, #28]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	69da      	ldr	r2, [r3, #28]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	6a1b      	ldr	r3, [r3, #32]
 800c75a:	431a      	orrs	r2, r3
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	430a      	orrs	r2, r1
 800c762:	601a      	str	r2, [r3, #0]
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	689b      	ldr	r3, [r3, #8]
 800c76a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800c76e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c772:	687a      	ldr	r2, [r7, #4]
 800c774:	6911      	ldr	r1, [r2, #16]
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	68d2      	ldr	r2, [r2, #12]
 800c77a:	4311      	orrs	r1, r2
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	6812      	ldr	r2, [r2, #0]
 800c780:	430b      	orrs	r3, r1
 800c782:	6093      	str	r3, [r2, #8]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	695a      	ldr	r2, [r3, #20]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	699b      	ldr	r3, [r3, #24]
 800c796:	431a      	orrs	r2, r3
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	430a      	orrs	r2, r1
 800c79e:	60da      	str	r2, [r3, #12]
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	681a      	ldr	r2, [r3, #0]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	f042 0201 	orr.w	r2, r2, #1
 800c7ae:	601a      	str	r2, [r3, #0]
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	641a      	str	r2, [r3, #64]	; 0x40
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2220      	movs	r2, #32
 800c7ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	631a      	str	r2, [r3, #48]	; 0x30
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3710      	adds	r7, #16
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bd80      	pop	{r7, pc}
 800c7d6:	bf00      	nop
 800c7d8:	000186a0 	.word	0x000186a0
 800c7dc:	001e847f 	.word	0x001e847f
 800c7e0:	003d08ff 	.word	0x003d08ff
 800c7e4:	431bde83 	.word	0x431bde83
 800c7e8:	10624dd3 	.word	0x10624dd3

0800c7ec <HAL_RCC_OscConfig>:
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b086      	sub	sp, #24
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d101      	bne.n	800c7fe <HAL_RCC_OscConfig+0x12>
 800c7fa:	2301      	movs	r3, #1
 800c7fc:	e267      	b.n	800ccce <HAL_RCC_OscConfig+0x4e2>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f003 0301 	and.w	r3, r3, #1
 800c806:	2b00      	cmp	r3, #0
 800c808:	d075      	beq.n	800c8f6 <HAL_RCC_OscConfig+0x10a>
 800c80a:	4b88      	ldr	r3, [pc, #544]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c80c:	689b      	ldr	r3, [r3, #8]
 800c80e:	f003 030c 	and.w	r3, r3, #12
 800c812:	2b04      	cmp	r3, #4
 800c814:	d00c      	beq.n	800c830 <HAL_RCC_OscConfig+0x44>
 800c816:	4b85      	ldr	r3, [pc, #532]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c818:	689b      	ldr	r3, [r3, #8]
 800c81a:	f003 030c 	and.w	r3, r3, #12
 800c81e:	2b08      	cmp	r3, #8
 800c820:	d112      	bne.n	800c848 <HAL_RCC_OscConfig+0x5c>
 800c822:	4b82      	ldr	r3, [pc, #520]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c82a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c82e:	d10b      	bne.n	800c848 <HAL_RCC_OscConfig+0x5c>
 800c830:	4b7e      	ldr	r3, [pc, #504]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d05b      	beq.n	800c8f4 <HAL_RCC_OscConfig+0x108>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d157      	bne.n	800c8f4 <HAL_RCC_OscConfig+0x108>
 800c844:	2301      	movs	r3, #1
 800c846:	e242      	b.n	800ccce <HAL_RCC_OscConfig+0x4e2>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c850:	d106      	bne.n	800c860 <HAL_RCC_OscConfig+0x74>
 800c852:	4b76      	ldr	r3, [pc, #472]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	4a75      	ldr	r2, [pc, #468]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c85c:	6013      	str	r3, [r2, #0]
 800c85e:	e01d      	b.n	800c89c <HAL_RCC_OscConfig+0xb0>
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	685b      	ldr	r3, [r3, #4]
 800c864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c868:	d10c      	bne.n	800c884 <HAL_RCC_OscConfig+0x98>
 800c86a:	4b70      	ldr	r3, [pc, #448]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	4a6f      	ldr	r2, [pc, #444]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c874:	6013      	str	r3, [r2, #0]
 800c876:	4b6d      	ldr	r3, [pc, #436]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	4a6c      	ldr	r2, [pc, #432]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c87c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c880:	6013      	str	r3, [r2, #0]
 800c882:	e00b      	b.n	800c89c <HAL_RCC_OscConfig+0xb0>
 800c884:	4b69      	ldr	r3, [pc, #420]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	4a68      	ldr	r2, [pc, #416]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c88a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c88e:	6013      	str	r3, [r2, #0]
 800c890:	4b66      	ldr	r3, [pc, #408]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4a65      	ldr	r2, [pc, #404]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c89a:	6013      	str	r3, [r2, #0]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d013      	beq.n	800c8cc <HAL_RCC_OscConfig+0xe0>
 800c8a4:	f7fd ff9e 	bl	800a7e4 <HAL_GetTick>
 800c8a8:	6138      	str	r0, [r7, #16]
 800c8aa:	e008      	b.n	800c8be <HAL_RCC_OscConfig+0xd2>
 800c8ac:	f7fd ff9a 	bl	800a7e4 <HAL_GetTick>
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	693b      	ldr	r3, [r7, #16]
 800c8b4:	1ad3      	subs	r3, r2, r3
 800c8b6:	2b64      	cmp	r3, #100	; 0x64
 800c8b8:	d901      	bls.n	800c8be <HAL_RCC_OscConfig+0xd2>
 800c8ba:	2303      	movs	r3, #3
 800c8bc:	e207      	b.n	800ccce <HAL_RCC_OscConfig+0x4e2>
 800c8be:	4b5b      	ldr	r3, [pc, #364]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d0f0      	beq.n	800c8ac <HAL_RCC_OscConfig+0xc0>
 800c8ca:	e014      	b.n	800c8f6 <HAL_RCC_OscConfig+0x10a>
 800c8cc:	f7fd ff8a 	bl	800a7e4 <HAL_GetTick>
 800c8d0:	6138      	str	r0, [r7, #16]
 800c8d2:	e008      	b.n	800c8e6 <HAL_RCC_OscConfig+0xfa>
 800c8d4:	f7fd ff86 	bl	800a7e4 <HAL_GetTick>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	1ad3      	subs	r3, r2, r3
 800c8de:	2b64      	cmp	r3, #100	; 0x64
 800c8e0:	d901      	bls.n	800c8e6 <HAL_RCC_OscConfig+0xfa>
 800c8e2:	2303      	movs	r3, #3
 800c8e4:	e1f3      	b.n	800ccce <HAL_RCC_OscConfig+0x4e2>
 800c8e6:	4b51      	ldr	r3, [pc, #324]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d1f0      	bne.n	800c8d4 <HAL_RCC_OscConfig+0xe8>
 800c8f2:	e000      	b.n	800c8f6 <HAL_RCC_OscConfig+0x10a>
 800c8f4:	bf00      	nop
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f003 0302 	and.w	r3, r3, #2
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d063      	beq.n	800c9ca <HAL_RCC_OscConfig+0x1de>
 800c902:	4b4a      	ldr	r3, [pc, #296]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	f003 030c 	and.w	r3, r3, #12
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d00b      	beq.n	800c926 <HAL_RCC_OscConfig+0x13a>
 800c90e:	4b47      	ldr	r3, [pc, #284]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c910:	689b      	ldr	r3, [r3, #8]
 800c912:	f003 030c 	and.w	r3, r3, #12
 800c916:	2b08      	cmp	r3, #8
 800c918:	d11c      	bne.n	800c954 <HAL_RCC_OscConfig+0x168>
 800c91a:	4b44      	ldr	r3, [pc, #272]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c922:	2b00      	cmp	r3, #0
 800c924:	d116      	bne.n	800c954 <HAL_RCC_OscConfig+0x168>
 800c926:	4b41      	ldr	r3, [pc, #260]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f003 0302 	and.w	r3, r3, #2
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d005      	beq.n	800c93e <HAL_RCC_OscConfig+0x152>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	68db      	ldr	r3, [r3, #12]
 800c936:	2b01      	cmp	r3, #1
 800c938:	d001      	beq.n	800c93e <HAL_RCC_OscConfig+0x152>
 800c93a:	2301      	movs	r3, #1
 800c93c:	e1c7      	b.n	800ccce <HAL_RCC_OscConfig+0x4e2>
 800c93e:	4b3b      	ldr	r3, [pc, #236]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	691b      	ldr	r3, [r3, #16]
 800c94a:	00db      	lsls	r3, r3, #3
 800c94c:	4937      	ldr	r1, [pc, #220]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c94e:	4313      	orrs	r3, r2
 800c950:	600b      	str	r3, [r1, #0]
 800c952:	e03a      	b.n	800c9ca <HAL_RCC_OscConfig+0x1de>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d020      	beq.n	800c99e <HAL_RCC_OscConfig+0x1b2>
 800c95c:	4b34      	ldr	r3, [pc, #208]	; (800ca30 <HAL_RCC_OscConfig+0x244>)
 800c95e:	2201      	movs	r2, #1
 800c960:	601a      	str	r2, [r3, #0]
 800c962:	f7fd ff3f 	bl	800a7e4 <HAL_GetTick>
 800c966:	6138      	str	r0, [r7, #16]
 800c968:	e008      	b.n	800c97c <HAL_RCC_OscConfig+0x190>
 800c96a:	f7fd ff3b 	bl	800a7e4 <HAL_GetTick>
 800c96e:	4602      	mov	r2, r0
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	1ad3      	subs	r3, r2, r3
 800c974:	2b02      	cmp	r3, #2
 800c976:	d901      	bls.n	800c97c <HAL_RCC_OscConfig+0x190>
 800c978:	2303      	movs	r3, #3
 800c97a:	e1a8      	b.n	800ccce <HAL_RCC_OscConfig+0x4e2>
 800c97c:	4b2b      	ldr	r3, [pc, #172]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	f003 0302 	and.w	r3, r3, #2
 800c984:	2b00      	cmp	r3, #0
 800c986:	d0f0      	beq.n	800c96a <HAL_RCC_OscConfig+0x17e>
 800c988:	4b28      	ldr	r3, [pc, #160]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	691b      	ldr	r3, [r3, #16]
 800c994:	00db      	lsls	r3, r3, #3
 800c996:	4925      	ldr	r1, [pc, #148]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c998:	4313      	orrs	r3, r2
 800c99a:	600b      	str	r3, [r1, #0]
 800c99c:	e015      	b.n	800c9ca <HAL_RCC_OscConfig+0x1de>
 800c99e:	4b24      	ldr	r3, [pc, #144]	; (800ca30 <HAL_RCC_OscConfig+0x244>)
 800c9a0:	2200      	movs	r2, #0
 800c9a2:	601a      	str	r2, [r3, #0]
 800c9a4:	f7fd ff1e 	bl	800a7e4 <HAL_GetTick>
 800c9a8:	6138      	str	r0, [r7, #16]
 800c9aa:	e008      	b.n	800c9be <HAL_RCC_OscConfig+0x1d2>
 800c9ac:	f7fd ff1a 	bl	800a7e4 <HAL_GetTick>
 800c9b0:	4602      	mov	r2, r0
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	1ad3      	subs	r3, r2, r3
 800c9b6:	2b02      	cmp	r3, #2
 800c9b8:	d901      	bls.n	800c9be <HAL_RCC_OscConfig+0x1d2>
 800c9ba:	2303      	movs	r3, #3
 800c9bc:	e187      	b.n	800ccce <HAL_RCC_OscConfig+0x4e2>
 800c9be:	4b1b      	ldr	r3, [pc, #108]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	f003 0302 	and.w	r3, r3, #2
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d1f0      	bne.n	800c9ac <HAL_RCC_OscConfig+0x1c0>
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f003 0308 	and.w	r3, r3, #8
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d036      	beq.n	800ca44 <HAL_RCC_OscConfig+0x258>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	695b      	ldr	r3, [r3, #20]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d016      	beq.n	800ca0c <HAL_RCC_OscConfig+0x220>
 800c9de:	4b15      	ldr	r3, [pc, #84]	; (800ca34 <HAL_RCC_OscConfig+0x248>)
 800c9e0:	2201      	movs	r2, #1
 800c9e2:	601a      	str	r2, [r3, #0]
 800c9e4:	f7fd fefe 	bl	800a7e4 <HAL_GetTick>
 800c9e8:	6138      	str	r0, [r7, #16]
 800c9ea:	e008      	b.n	800c9fe <HAL_RCC_OscConfig+0x212>
 800c9ec:	f7fd fefa 	bl	800a7e4 <HAL_GetTick>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	1ad3      	subs	r3, r2, r3
 800c9f6:	2b02      	cmp	r3, #2
 800c9f8:	d901      	bls.n	800c9fe <HAL_RCC_OscConfig+0x212>
 800c9fa:	2303      	movs	r3, #3
 800c9fc:	e167      	b.n	800ccce <HAL_RCC_OscConfig+0x4e2>
 800c9fe:	4b0b      	ldr	r3, [pc, #44]	; (800ca2c <HAL_RCC_OscConfig+0x240>)
 800ca00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca02:	f003 0302 	and.w	r3, r3, #2
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d0f0      	beq.n	800c9ec <HAL_RCC_OscConfig+0x200>
 800ca0a:	e01b      	b.n	800ca44 <HAL_RCC_OscConfig+0x258>
 800ca0c:	4b09      	ldr	r3, [pc, #36]	; (800ca34 <HAL_RCC_OscConfig+0x248>)
 800ca0e:	2200      	movs	r2, #0
 800ca10:	601a      	str	r2, [r3, #0]
 800ca12:	f7fd fee7 	bl	800a7e4 <HAL_GetTick>
 800ca16:	6138      	str	r0, [r7, #16]
 800ca18:	e00e      	b.n	800ca38 <HAL_RCC_OscConfig+0x24c>
 800ca1a:	f7fd fee3 	bl	800a7e4 <HAL_GetTick>
 800ca1e:	4602      	mov	r2, r0
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	1ad3      	subs	r3, r2, r3
 800ca24:	2b02      	cmp	r3, #2
 800ca26:	d907      	bls.n	800ca38 <HAL_RCC_OscConfig+0x24c>
 800ca28:	2303      	movs	r3, #3
 800ca2a:	e150      	b.n	800ccce <HAL_RCC_OscConfig+0x4e2>
 800ca2c:	40023800 	.word	0x40023800
 800ca30:	42470000 	.word	0x42470000
 800ca34:	42470e80 	.word	0x42470e80
 800ca38:	4b88      	ldr	r3, [pc, #544]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800ca3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca3c:	f003 0302 	and.w	r3, r3, #2
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d1ea      	bne.n	800ca1a <HAL_RCC_OscConfig+0x22e>
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	f003 0304 	and.w	r3, r3, #4
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	f000 8097 	beq.w	800cb80 <HAL_RCC_OscConfig+0x394>
 800ca52:	2300      	movs	r3, #0
 800ca54:	75fb      	strb	r3, [r7, #23]
 800ca56:	4b81      	ldr	r3, [pc, #516]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800ca58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d10f      	bne.n	800ca82 <HAL_RCC_OscConfig+0x296>
 800ca62:	2300      	movs	r3, #0
 800ca64:	60bb      	str	r3, [r7, #8]
 800ca66:	4b7d      	ldr	r3, [pc, #500]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800ca68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca6a:	4a7c      	ldr	r2, [pc, #496]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800ca6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca70:	6413      	str	r3, [r2, #64]	; 0x40
 800ca72:	4b7a      	ldr	r3, [pc, #488]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800ca74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca7a:	60bb      	str	r3, [r7, #8]
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	2301      	movs	r3, #1
 800ca80:	75fb      	strb	r3, [r7, #23]
 800ca82:	4b77      	ldr	r3, [pc, #476]	; (800cc60 <HAL_RCC_OscConfig+0x474>)
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d118      	bne.n	800cac0 <HAL_RCC_OscConfig+0x2d4>
 800ca8e:	4b74      	ldr	r3, [pc, #464]	; (800cc60 <HAL_RCC_OscConfig+0x474>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	4a73      	ldr	r2, [pc, #460]	; (800cc60 <HAL_RCC_OscConfig+0x474>)
 800ca94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca98:	6013      	str	r3, [r2, #0]
 800ca9a:	f7fd fea3 	bl	800a7e4 <HAL_GetTick>
 800ca9e:	6138      	str	r0, [r7, #16]
 800caa0:	e008      	b.n	800cab4 <HAL_RCC_OscConfig+0x2c8>
 800caa2:	f7fd fe9f 	bl	800a7e4 <HAL_GetTick>
 800caa6:	4602      	mov	r2, r0
 800caa8:	693b      	ldr	r3, [r7, #16]
 800caaa:	1ad3      	subs	r3, r2, r3
 800caac:	2b02      	cmp	r3, #2
 800caae:	d901      	bls.n	800cab4 <HAL_RCC_OscConfig+0x2c8>
 800cab0:	2303      	movs	r3, #3
 800cab2:	e10c      	b.n	800ccce <HAL_RCC_OscConfig+0x4e2>
 800cab4:	4b6a      	ldr	r3, [pc, #424]	; (800cc60 <HAL_RCC_OscConfig+0x474>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d0f0      	beq.n	800caa2 <HAL_RCC_OscConfig+0x2b6>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	689b      	ldr	r3, [r3, #8]
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d106      	bne.n	800cad6 <HAL_RCC_OscConfig+0x2ea>
 800cac8:	4b64      	ldr	r3, [pc, #400]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800caca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cacc:	4a63      	ldr	r2, [pc, #396]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800cace:	f043 0301 	orr.w	r3, r3, #1
 800cad2:	6713      	str	r3, [r2, #112]	; 0x70
 800cad4:	e01c      	b.n	800cb10 <HAL_RCC_OscConfig+0x324>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	689b      	ldr	r3, [r3, #8]
 800cada:	2b05      	cmp	r3, #5
 800cadc:	d10c      	bne.n	800caf8 <HAL_RCC_OscConfig+0x30c>
 800cade:	4b5f      	ldr	r3, [pc, #380]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800cae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cae2:	4a5e      	ldr	r2, [pc, #376]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800cae4:	f043 0304 	orr.w	r3, r3, #4
 800cae8:	6713      	str	r3, [r2, #112]	; 0x70
 800caea:	4b5c      	ldr	r3, [pc, #368]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800caec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800caee:	4a5b      	ldr	r2, [pc, #364]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800caf0:	f043 0301 	orr.w	r3, r3, #1
 800caf4:	6713      	str	r3, [r2, #112]	; 0x70
 800caf6:	e00b      	b.n	800cb10 <HAL_RCC_OscConfig+0x324>
 800caf8:	4b58      	ldr	r3, [pc, #352]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800cafa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cafc:	4a57      	ldr	r2, [pc, #348]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800cafe:	f023 0301 	bic.w	r3, r3, #1
 800cb02:	6713      	str	r3, [r2, #112]	; 0x70
 800cb04:	4b55      	ldr	r3, [pc, #340]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800cb06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb08:	4a54      	ldr	r2, [pc, #336]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800cb0a:	f023 0304 	bic.w	r3, r3, #4
 800cb0e:	6713      	str	r3, [r2, #112]	; 0x70
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	689b      	ldr	r3, [r3, #8]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d015      	beq.n	800cb44 <HAL_RCC_OscConfig+0x358>
 800cb18:	f7fd fe64 	bl	800a7e4 <HAL_GetTick>
 800cb1c:	6138      	str	r0, [r7, #16]
 800cb1e:	e00a      	b.n	800cb36 <HAL_RCC_OscConfig+0x34a>
 800cb20:	f7fd fe60 	bl	800a7e4 <HAL_GetTick>
 800cb24:	4602      	mov	r2, r0
 800cb26:	693b      	ldr	r3, [r7, #16]
 800cb28:	1ad3      	subs	r3, r2, r3
 800cb2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb2e:	4293      	cmp	r3, r2
 800cb30:	d901      	bls.n	800cb36 <HAL_RCC_OscConfig+0x34a>
 800cb32:	2303      	movs	r3, #3
 800cb34:	e0cb      	b.n	800ccce <HAL_RCC_OscConfig+0x4e2>
 800cb36:	4b49      	ldr	r3, [pc, #292]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800cb38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb3a:	f003 0302 	and.w	r3, r3, #2
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d0ee      	beq.n	800cb20 <HAL_RCC_OscConfig+0x334>
 800cb42:	e014      	b.n	800cb6e <HAL_RCC_OscConfig+0x382>
 800cb44:	f7fd fe4e 	bl	800a7e4 <HAL_GetTick>
 800cb48:	6138      	str	r0, [r7, #16]
 800cb4a:	e00a      	b.n	800cb62 <HAL_RCC_OscConfig+0x376>
 800cb4c:	f7fd fe4a 	bl	800a7e4 <HAL_GetTick>
 800cb50:	4602      	mov	r2, r0
 800cb52:	693b      	ldr	r3, [r7, #16]
 800cb54:	1ad3      	subs	r3, r2, r3
 800cb56:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d901      	bls.n	800cb62 <HAL_RCC_OscConfig+0x376>
 800cb5e:	2303      	movs	r3, #3
 800cb60:	e0b5      	b.n	800ccce <HAL_RCC_OscConfig+0x4e2>
 800cb62:	4b3e      	ldr	r3, [pc, #248]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800cb64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb66:	f003 0302 	and.w	r3, r3, #2
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d1ee      	bne.n	800cb4c <HAL_RCC_OscConfig+0x360>
 800cb6e:	7dfb      	ldrb	r3, [r7, #23]
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d105      	bne.n	800cb80 <HAL_RCC_OscConfig+0x394>
 800cb74:	4b39      	ldr	r3, [pc, #228]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800cb76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb78:	4a38      	ldr	r2, [pc, #224]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800cb7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb7e:	6413      	str	r3, [r2, #64]	; 0x40
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	699b      	ldr	r3, [r3, #24]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	f000 80a1 	beq.w	800cccc <HAL_RCC_OscConfig+0x4e0>
 800cb8a:	4b34      	ldr	r3, [pc, #208]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800cb8c:	689b      	ldr	r3, [r3, #8]
 800cb8e:	f003 030c 	and.w	r3, r3, #12
 800cb92:	2b08      	cmp	r3, #8
 800cb94:	d05c      	beq.n	800cc50 <HAL_RCC_OscConfig+0x464>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	699b      	ldr	r3, [r3, #24]
 800cb9a:	2b02      	cmp	r3, #2
 800cb9c:	d141      	bne.n	800cc22 <HAL_RCC_OscConfig+0x436>
 800cb9e:	4b31      	ldr	r3, [pc, #196]	; (800cc64 <HAL_RCC_OscConfig+0x478>)
 800cba0:	2200      	movs	r2, #0
 800cba2:	601a      	str	r2, [r3, #0]
 800cba4:	f7fd fe1e 	bl	800a7e4 <HAL_GetTick>
 800cba8:	6138      	str	r0, [r7, #16]
 800cbaa:	e008      	b.n	800cbbe <HAL_RCC_OscConfig+0x3d2>
 800cbac:	f7fd fe1a 	bl	800a7e4 <HAL_GetTick>
 800cbb0:	4602      	mov	r2, r0
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	1ad3      	subs	r3, r2, r3
 800cbb6:	2b02      	cmp	r3, #2
 800cbb8:	d901      	bls.n	800cbbe <HAL_RCC_OscConfig+0x3d2>
 800cbba:	2303      	movs	r3, #3
 800cbbc:	e087      	b.n	800ccce <HAL_RCC_OscConfig+0x4e2>
 800cbbe:	4b27      	ldr	r3, [pc, #156]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d1f0      	bne.n	800cbac <HAL_RCC_OscConfig+0x3c0>
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	69da      	ldr	r2, [r3, #28]
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6a1b      	ldr	r3, [r3, #32]
 800cbd2:	431a      	orrs	r2, r3
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbd8:	019b      	lsls	r3, r3, #6
 800cbda:	431a      	orrs	r2, r3
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbe0:	085b      	lsrs	r3, r3, #1
 800cbe2:	3b01      	subs	r3, #1
 800cbe4:	041b      	lsls	r3, r3, #16
 800cbe6:	431a      	orrs	r2, r3
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbec:	061b      	lsls	r3, r3, #24
 800cbee:	491b      	ldr	r1, [pc, #108]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800cbf0:	4313      	orrs	r3, r2
 800cbf2:	604b      	str	r3, [r1, #4]
 800cbf4:	4b1b      	ldr	r3, [pc, #108]	; (800cc64 <HAL_RCC_OscConfig+0x478>)
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	601a      	str	r2, [r3, #0]
 800cbfa:	f7fd fdf3 	bl	800a7e4 <HAL_GetTick>
 800cbfe:	6138      	str	r0, [r7, #16]
 800cc00:	e008      	b.n	800cc14 <HAL_RCC_OscConfig+0x428>
 800cc02:	f7fd fdef 	bl	800a7e4 <HAL_GetTick>
 800cc06:	4602      	mov	r2, r0
 800cc08:	693b      	ldr	r3, [r7, #16]
 800cc0a:	1ad3      	subs	r3, r2, r3
 800cc0c:	2b02      	cmp	r3, #2
 800cc0e:	d901      	bls.n	800cc14 <HAL_RCC_OscConfig+0x428>
 800cc10:	2303      	movs	r3, #3
 800cc12:	e05c      	b.n	800ccce <HAL_RCC_OscConfig+0x4e2>
 800cc14:	4b11      	ldr	r3, [pc, #68]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d0f0      	beq.n	800cc02 <HAL_RCC_OscConfig+0x416>
 800cc20:	e054      	b.n	800cccc <HAL_RCC_OscConfig+0x4e0>
 800cc22:	4b10      	ldr	r3, [pc, #64]	; (800cc64 <HAL_RCC_OscConfig+0x478>)
 800cc24:	2200      	movs	r2, #0
 800cc26:	601a      	str	r2, [r3, #0]
 800cc28:	f7fd fddc 	bl	800a7e4 <HAL_GetTick>
 800cc2c:	6138      	str	r0, [r7, #16]
 800cc2e:	e008      	b.n	800cc42 <HAL_RCC_OscConfig+0x456>
 800cc30:	f7fd fdd8 	bl	800a7e4 <HAL_GetTick>
 800cc34:	4602      	mov	r2, r0
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	1ad3      	subs	r3, r2, r3
 800cc3a:	2b02      	cmp	r3, #2
 800cc3c:	d901      	bls.n	800cc42 <HAL_RCC_OscConfig+0x456>
 800cc3e:	2303      	movs	r3, #3
 800cc40:	e045      	b.n	800ccce <HAL_RCC_OscConfig+0x4e2>
 800cc42:	4b06      	ldr	r3, [pc, #24]	; (800cc5c <HAL_RCC_OscConfig+0x470>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d1f0      	bne.n	800cc30 <HAL_RCC_OscConfig+0x444>
 800cc4e:	e03d      	b.n	800cccc <HAL_RCC_OscConfig+0x4e0>
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	699b      	ldr	r3, [r3, #24]
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	d107      	bne.n	800cc68 <HAL_RCC_OscConfig+0x47c>
 800cc58:	2301      	movs	r3, #1
 800cc5a:	e038      	b.n	800ccce <HAL_RCC_OscConfig+0x4e2>
 800cc5c:	40023800 	.word	0x40023800
 800cc60:	40007000 	.word	0x40007000
 800cc64:	42470060 	.word	0x42470060
 800cc68:	4b1b      	ldr	r3, [pc, #108]	; (800ccd8 <HAL_RCC_OscConfig+0x4ec>)
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	60fb      	str	r3, [r7, #12]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	699b      	ldr	r3, [r3, #24]
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d028      	beq.n	800ccc8 <HAL_RCC_OscConfig+0x4dc>
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	69db      	ldr	r3, [r3, #28]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d121      	bne.n	800ccc8 <HAL_RCC_OscConfig+0x4dc>
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6a1b      	ldr	r3, [r3, #32]
 800cc8e:	429a      	cmp	r2, r3
 800cc90:	d11a      	bne.n	800ccc8 <HAL_RCC_OscConfig+0x4dc>
 800cc92:	68fa      	ldr	r2, [r7, #12]
 800cc94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cc98:	4013      	ands	r3, r2
 800cc9a:	687a      	ldr	r2, [r7, #4]
 800cc9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cc9e:	0192      	lsls	r2, r2, #6
 800cca0:	4293      	cmp	r3, r2
 800cca2:	d111      	bne.n	800ccc8 <HAL_RCC_OscConfig+0x4dc>
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccae:	085b      	lsrs	r3, r3, #1
 800ccb0:	3b01      	subs	r3, #1
 800ccb2:	041b      	lsls	r3, r3, #16
 800ccb4:	429a      	cmp	r2, r3
 800ccb6:	d107      	bne.n	800ccc8 <HAL_RCC_OscConfig+0x4dc>
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc2:	061b      	lsls	r3, r3, #24
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d001      	beq.n	800cccc <HAL_RCC_OscConfig+0x4e0>
 800ccc8:	2301      	movs	r3, #1
 800ccca:	e000      	b.n	800ccce <HAL_RCC_OscConfig+0x4e2>
 800cccc:	2300      	movs	r3, #0
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3718      	adds	r7, #24
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop
 800ccd8:	40023800 	.word	0x40023800

0800ccdc <HAL_RCC_ClockConfig>:
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b084      	sub	sp, #16
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	6078      	str	r0, [r7, #4]
 800cce4:	6039      	str	r1, [r7, #0]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d101      	bne.n	800ccf0 <HAL_RCC_ClockConfig+0x14>
 800ccec:	2301      	movs	r3, #1
 800ccee:	e0cc      	b.n	800ce8a <HAL_RCC_ClockConfig+0x1ae>
 800ccf0:	4b68      	ldr	r3, [pc, #416]	; (800ce94 <HAL_RCC_ClockConfig+0x1b8>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f003 0307 	and.w	r3, r3, #7
 800ccf8:	683a      	ldr	r2, [r7, #0]
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d90c      	bls.n	800cd18 <HAL_RCC_ClockConfig+0x3c>
 800ccfe:	4b65      	ldr	r3, [pc, #404]	; (800ce94 <HAL_RCC_ClockConfig+0x1b8>)
 800cd00:	683a      	ldr	r2, [r7, #0]
 800cd02:	b2d2      	uxtb	r2, r2
 800cd04:	701a      	strb	r2, [r3, #0]
 800cd06:	4b63      	ldr	r3, [pc, #396]	; (800ce94 <HAL_RCC_ClockConfig+0x1b8>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	f003 0307 	and.w	r3, r3, #7
 800cd0e:	683a      	ldr	r2, [r7, #0]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d001      	beq.n	800cd18 <HAL_RCC_ClockConfig+0x3c>
 800cd14:	2301      	movs	r3, #1
 800cd16:	e0b8      	b.n	800ce8a <HAL_RCC_ClockConfig+0x1ae>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f003 0302 	and.w	r3, r3, #2
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d020      	beq.n	800cd66 <HAL_RCC_ClockConfig+0x8a>
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f003 0304 	and.w	r3, r3, #4
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d005      	beq.n	800cd3c <HAL_RCC_ClockConfig+0x60>
 800cd30:	4b59      	ldr	r3, [pc, #356]	; (800ce98 <HAL_RCC_ClockConfig+0x1bc>)
 800cd32:	689b      	ldr	r3, [r3, #8]
 800cd34:	4a58      	ldr	r2, [pc, #352]	; (800ce98 <HAL_RCC_ClockConfig+0x1bc>)
 800cd36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800cd3a:	6093      	str	r3, [r2, #8]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f003 0308 	and.w	r3, r3, #8
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d005      	beq.n	800cd54 <HAL_RCC_ClockConfig+0x78>
 800cd48:	4b53      	ldr	r3, [pc, #332]	; (800ce98 <HAL_RCC_ClockConfig+0x1bc>)
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	4a52      	ldr	r2, [pc, #328]	; (800ce98 <HAL_RCC_ClockConfig+0x1bc>)
 800cd4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800cd52:	6093      	str	r3, [r2, #8]
 800cd54:	4b50      	ldr	r3, [pc, #320]	; (800ce98 <HAL_RCC_ClockConfig+0x1bc>)
 800cd56:	689b      	ldr	r3, [r3, #8]
 800cd58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	689b      	ldr	r3, [r3, #8]
 800cd60:	494d      	ldr	r1, [pc, #308]	; (800ce98 <HAL_RCC_ClockConfig+0x1bc>)
 800cd62:	4313      	orrs	r3, r2
 800cd64:	608b      	str	r3, [r1, #8]
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f003 0301 	and.w	r3, r3, #1
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d044      	beq.n	800cdfc <HAL_RCC_ClockConfig+0x120>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	685b      	ldr	r3, [r3, #4]
 800cd76:	2b01      	cmp	r3, #1
 800cd78:	d107      	bne.n	800cd8a <HAL_RCC_ClockConfig+0xae>
 800cd7a:	4b47      	ldr	r3, [pc, #284]	; (800ce98 <HAL_RCC_ClockConfig+0x1bc>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d119      	bne.n	800cdba <HAL_RCC_ClockConfig+0xde>
 800cd86:	2301      	movs	r3, #1
 800cd88:	e07f      	b.n	800ce8a <HAL_RCC_ClockConfig+0x1ae>
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	2b02      	cmp	r3, #2
 800cd90:	d003      	beq.n	800cd9a <HAL_RCC_ClockConfig+0xbe>
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	2b03      	cmp	r3, #3
 800cd98:	d107      	bne.n	800cdaa <HAL_RCC_ClockConfig+0xce>
 800cd9a:	4b3f      	ldr	r3, [pc, #252]	; (800ce98 <HAL_RCC_ClockConfig+0x1bc>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d109      	bne.n	800cdba <HAL_RCC_ClockConfig+0xde>
 800cda6:	2301      	movs	r3, #1
 800cda8:	e06f      	b.n	800ce8a <HAL_RCC_ClockConfig+0x1ae>
 800cdaa:	4b3b      	ldr	r3, [pc, #236]	; (800ce98 <HAL_RCC_ClockConfig+0x1bc>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f003 0302 	and.w	r3, r3, #2
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d101      	bne.n	800cdba <HAL_RCC_ClockConfig+0xde>
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	e067      	b.n	800ce8a <HAL_RCC_ClockConfig+0x1ae>
 800cdba:	4b37      	ldr	r3, [pc, #220]	; (800ce98 <HAL_RCC_ClockConfig+0x1bc>)
 800cdbc:	689b      	ldr	r3, [r3, #8]
 800cdbe:	f023 0203 	bic.w	r2, r3, #3
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	4934      	ldr	r1, [pc, #208]	; (800ce98 <HAL_RCC_ClockConfig+0x1bc>)
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	608b      	str	r3, [r1, #8]
 800cdcc:	f7fd fd0a 	bl	800a7e4 <HAL_GetTick>
 800cdd0:	60f8      	str	r0, [r7, #12]
 800cdd2:	e00a      	b.n	800cdea <HAL_RCC_ClockConfig+0x10e>
 800cdd4:	f7fd fd06 	bl	800a7e4 <HAL_GetTick>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	1ad3      	subs	r3, r2, r3
 800cdde:	f241 3288 	movw	r2, #5000	; 0x1388
 800cde2:	4293      	cmp	r3, r2
 800cde4:	d901      	bls.n	800cdea <HAL_RCC_ClockConfig+0x10e>
 800cde6:	2303      	movs	r3, #3
 800cde8:	e04f      	b.n	800ce8a <HAL_RCC_ClockConfig+0x1ae>
 800cdea:	4b2b      	ldr	r3, [pc, #172]	; (800ce98 <HAL_RCC_ClockConfig+0x1bc>)
 800cdec:	689b      	ldr	r3, [r3, #8]
 800cdee:	f003 020c 	and.w	r2, r3, #12
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	685b      	ldr	r3, [r3, #4]
 800cdf6:	009b      	lsls	r3, r3, #2
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d1eb      	bne.n	800cdd4 <HAL_RCC_ClockConfig+0xf8>
 800cdfc:	4b25      	ldr	r3, [pc, #148]	; (800ce94 <HAL_RCC_ClockConfig+0x1b8>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f003 0307 	and.w	r3, r3, #7
 800ce04:	683a      	ldr	r2, [r7, #0]
 800ce06:	429a      	cmp	r2, r3
 800ce08:	d20c      	bcs.n	800ce24 <HAL_RCC_ClockConfig+0x148>
 800ce0a:	4b22      	ldr	r3, [pc, #136]	; (800ce94 <HAL_RCC_ClockConfig+0x1b8>)
 800ce0c:	683a      	ldr	r2, [r7, #0]
 800ce0e:	b2d2      	uxtb	r2, r2
 800ce10:	701a      	strb	r2, [r3, #0]
 800ce12:	4b20      	ldr	r3, [pc, #128]	; (800ce94 <HAL_RCC_ClockConfig+0x1b8>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f003 0307 	and.w	r3, r3, #7
 800ce1a:	683a      	ldr	r2, [r7, #0]
 800ce1c:	429a      	cmp	r2, r3
 800ce1e:	d001      	beq.n	800ce24 <HAL_RCC_ClockConfig+0x148>
 800ce20:	2301      	movs	r3, #1
 800ce22:	e032      	b.n	800ce8a <HAL_RCC_ClockConfig+0x1ae>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	f003 0304 	and.w	r3, r3, #4
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d008      	beq.n	800ce42 <HAL_RCC_ClockConfig+0x166>
 800ce30:	4b19      	ldr	r3, [pc, #100]	; (800ce98 <HAL_RCC_ClockConfig+0x1bc>)
 800ce32:	689b      	ldr	r3, [r3, #8]
 800ce34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	68db      	ldr	r3, [r3, #12]
 800ce3c:	4916      	ldr	r1, [pc, #88]	; (800ce98 <HAL_RCC_ClockConfig+0x1bc>)
 800ce3e:	4313      	orrs	r3, r2
 800ce40:	608b      	str	r3, [r1, #8]
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	f003 0308 	and.w	r3, r3, #8
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d009      	beq.n	800ce62 <HAL_RCC_ClockConfig+0x186>
 800ce4e:	4b12      	ldr	r3, [pc, #72]	; (800ce98 <HAL_RCC_ClockConfig+0x1bc>)
 800ce50:	689b      	ldr	r3, [r3, #8]
 800ce52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	691b      	ldr	r3, [r3, #16]
 800ce5a:	00db      	lsls	r3, r3, #3
 800ce5c:	490e      	ldr	r1, [pc, #56]	; (800ce98 <HAL_RCC_ClockConfig+0x1bc>)
 800ce5e:	4313      	orrs	r3, r2
 800ce60:	608b      	str	r3, [r1, #8]
 800ce62:	f000 f821 	bl	800cea8 <HAL_RCC_GetSysClockFreq>
 800ce66:	4602      	mov	r2, r0
 800ce68:	4b0b      	ldr	r3, [pc, #44]	; (800ce98 <HAL_RCC_ClockConfig+0x1bc>)
 800ce6a:	689b      	ldr	r3, [r3, #8]
 800ce6c:	091b      	lsrs	r3, r3, #4
 800ce6e:	f003 030f 	and.w	r3, r3, #15
 800ce72:	490a      	ldr	r1, [pc, #40]	; (800ce9c <HAL_RCC_ClockConfig+0x1c0>)
 800ce74:	5ccb      	ldrb	r3, [r1, r3]
 800ce76:	fa22 f303 	lsr.w	r3, r2, r3
 800ce7a:	4a09      	ldr	r2, [pc, #36]	; (800cea0 <HAL_RCC_ClockConfig+0x1c4>)
 800ce7c:	6013      	str	r3, [r2, #0]
 800ce7e:	4b09      	ldr	r3, [pc, #36]	; (800cea4 <HAL_RCC_ClockConfig+0x1c8>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7fc fe42 	bl	8009b0c <HAL_InitTick>
 800ce88:	2300      	movs	r3, #0
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3710      	adds	r7, #16
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	bf00      	nop
 800ce94:	40023c00 	.word	0x40023c00
 800ce98:	40023800 	.word	0x40023800
 800ce9c:	080176a0 	.word	0x080176a0
 800cea0:	20000020 	.word	0x20000020
 800cea4:	20000024 	.word	0x20000024

0800cea8 <HAL_RCC_GetSysClockFreq>:
 800cea8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ceac:	b094      	sub	sp, #80	; 0x50
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	647b      	str	r3, [r7, #68]	; 0x44
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ceb8:	2300      	movs	r3, #0
 800ceba:	643b      	str	r3, [r7, #64]	; 0x40
 800cebc:	2300      	movs	r3, #0
 800cebe:	64bb      	str	r3, [r7, #72]	; 0x48
 800cec0:	4b79      	ldr	r3, [pc, #484]	; (800d0a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800cec2:	689b      	ldr	r3, [r3, #8]
 800cec4:	f003 030c 	and.w	r3, r3, #12
 800cec8:	2b08      	cmp	r3, #8
 800ceca:	d00d      	beq.n	800cee8 <HAL_RCC_GetSysClockFreq+0x40>
 800cecc:	2b08      	cmp	r3, #8
 800cece:	f200 80e1 	bhi.w	800d094 <HAL_RCC_GetSysClockFreq+0x1ec>
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d002      	beq.n	800cedc <HAL_RCC_GetSysClockFreq+0x34>
 800ced6:	2b04      	cmp	r3, #4
 800ced8:	d003      	beq.n	800cee2 <HAL_RCC_GetSysClockFreq+0x3a>
 800ceda:	e0db      	b.n	800d094 <HAL_RCC_GetSysClockFreq+0x1ec>
 800cedc:	4b73      	ldr	r3, [pc, #460]	; (800d0ac <HAL_RCC_GetSysClockFreq+0x204>)
 800cede:	64bb      	str	r3, [r7, #72]	; 0x48
 800cee0:	e0db      	b.n	800d09a <HAL_RCC_GetSysClockFreq+0x1f2>
 800cee2:	4b72      	ldr	r3, [pc, #456]	; (800d0ac <HAL_RCC_GetSysClockFreq+0x204>)
 800cee4:	64bb      	str	r3, [r7, #72]	; 0x48
 800cee6:	e0d8      	b.n	800d09a <HAL_RCC_GetSysClockFreq+0x1f2>
 800cee8:	4b6f      	ldr	r3, [pc, #444]	; (800d0a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800ceea:	685b      	ldr	r3, [r3, #4]
 800ceec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cef0:	647b      	str	r3, [r7, #68]	; 0x44
 800cef2:	4b6d      	ldr	r3, [pc, #436]	; (800d0a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800cef4:	685b      	ldr	r3, [r3, #4]
 800cef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d063      	beq.n	800cfc6 <HAL_RCC_GetSysClockFreq+0x11e>
 800cefe:	4b6a      	ldr	r3, [pc, #424]	; (800d0a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800cf00:	685b      	ldr	r3, [r3, #4]
 800cf02:	099b      	lsrs	r3, r3, #6
 800cf04:	2200      	movs	r2, #0
 800cf06:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf08:	63fa      	str	r2, [r7, #60]	; 0x3c
 800cf0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf10:	633b      	str	r3, [r7, #48]	; 0x30
 800cf12:	2300      	movs	r3, #0
 800cf14:	637b      	str	r3, [r7, #52]	; 0x34
 800cf16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800cf1a:	4622      	mov	r2, r4
 800cf1c:	462b      	mov	r3, r5
 800cf1e:	f04f 0000 	mov.w	r0, #0
 800cf22:	f04f 0100 	mov.w	r1, #0
 800cf26:	0159      	lsls	r1, r3, #5
 800cf28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cf2c:	0150      	lsls	r0, r2, #5
 800cf2e:	4602      	mov	r2, r0
 800cf30:	460b      	mov	r3, r1
 800cf32:	4621      	mov	r1, r4
 800cf34:	1a51      	subs	r1, r2, r1
 800cf36:	6139      	str	r1, [r7, #16]
 800cf38:	4629      	mov	r1, r5
 800cf3a:	eb63 0301 	sbc.w	r3, r3, r1
 800cf3e:	617b      	str	r3, [r7, #20]
 800cf40:	f04f 0200 	mov.w	r2, #0
 800cf44:	f04f 0300 	mov.w	r3, #0
 800cf48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cf4c:	4659      	mov	r1, fp
 800cf4e:	018b      	lsls	r3, r1, #6
 800cf50:	4651      	mov	r1, sl
 800cf52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800cf56:	4651      	mov	r1, sl
 800cf58:	018a      	lsls	r2, r1, #6
 800cf5a:	4651      	mov	r1, sl
 800cf5c:	ebb2 0801 	subs.w	r8, r2, r1
 800cf60:	4659      	mov	r1, fp
 800cf62:	eb63 0901 	sbc.w	r9, r3, r1
 800cf66:	f04f 0200 	mov.w	r2, #0
 800cf6a:	f04f 0300 	mov.w	r3, #0
 800cf6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cf72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cf76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cf7a:	4690      	mov	r8, r2
 800cf7c:	4699      	mov	r9, r3
 800cf7e:	4623      	mov	r3, r4
 800cf80:	eb18 0303 	adds.w	r3, r8, r3
 800cf84:	60bb      	str	r3, [r7, #8]
 800cf86:	462b      	mov	r3, r5
 800cf88:	eb49 0303 	adc.w	r3, r9, r3
 800cf8c:	60fb      	str	r3, [r7, #12]
 800cf8e:	f04f 0200 	mov.w	r2, #0
 800cf92:	f04f 0300 	mov.w	r3, #0
 800cf96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800cf9a:	4629      	mov	r1, r5
 800cf9c:	028b      	lsls	r3, r1, #10
 800cf9e:	4621      	mov	r1, r4
 800cfa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800cfa4:	4621      	mov	r1, r4
 800cfa6:	028a      	lsls	r2, r1, #10
 800cfa8:	4610      	mov	r0, r2
 800cfaa:	4619      	mov	r1, r3
 800cfac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cfae:	2200      	movs	r2, #0
 800cfb0:	62bb      	str	r3, [r7, #40]	; 0x28
 800cfb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cfb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cfb8:	f7f3 fe16 	bl	8000be8 <__aeabi_uldivmod>
 800cfbc:	4602      	mov	r2, r0
 800cfbe:	460b      	mov	r3, r1
 800cfc0:	4613      	mov	r3, r2
 800cfc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cfc4:	e058      	b.n	800d078 <HAL_RCC_GetSysClockFreq+0x1d0>
 800cfc6:	4b38      	ldr	r3, [pc, #224]	; (800d0a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800cfc8:	685b      	ldr	r3, [r3, #4]
 800cfca:	099b      	lsrs	r3, r3, #6
 800cfcc:	2200      	movs	r2, #0
 800cfce:	4618      	mov	r0, r3
 800cfd0:	4611      	mov	r1, r2
 800cfd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800cfd6:	623b      	str	r3, [r7, #32]
 800cfd8:	2300      	movs	r3, #0
 800cfda:	627b      	str	r3, [r7, #36]	; 0x24
 800cfdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800cfe0:	4642      	mov	r2, r8
 800cfe2:	464b      	mov	r3, r9
 800cfe4:	f04f 0000 	mov.w	r0, #0
 800cfe8:	f04f 0100 	mov.w	r1, #0
 800cfec:	0159      	lsls	r1, r3, #5
 800cfee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800cff2:	0150      	lsls	r0, r2, #5
 800cff4:	4602      	mov	r2, r0
 800cff6:	460b      	mov	r3, r1
 800cff8:	4641      	mov	r1, r8
 800cffa:	ebb2 0a01 	subs.w	sl, r2, r1
 800cffe:	4649      	mov	r1, r9
 800d000:	eb63 0b01 	sbc.w	fp, r3, r1
 800d004:	f04f 0200 	mov.w	r2, #0
 800d008:	f04f 0300 	mov.w	r3, #0
 800d00c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800d010:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800d014:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800d018:	ebb2 040a 	subs.w	r4, r2, sl
 800d01c:	eb63 050b 	sbc.w	r5, r3, fp
 800d020:	f04f 0200 	mov.w	r2, #0
 800d024:	f04f 0300 	mov.w	r3, #0
 800d028:	00eb      	lsls	r3, r5, #3
 800d02a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d02e:	00e2      	lsls	r2, r4, #3
 800d030:	4614      	mov	r4, r2
 800d032:	461d      	mov	r5, r3
 800d034:	4643      	mov	r3, r8
 800d036:	18e3      	adds	r3, r4, r3
 800d038:	603b      	str	r3, [r7, #0]
 800d03a:	464b      	mov	r3, r9
 800d03c:	eb45 0303 	adc.w	r3, r5, r3
 800d040:	607b      	str	r3, [r7, #4]
 800d042:	f04f 0200 	mov.w	r2, #0
 800d046:	f04f 0300 	mov.w	r3, #0
 800d04a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d04e:	4629      	mov	r1, r5
 800d050:	028b      	lsls	r3, r1, #10
 800d052:	4621      	mov	r1, r4
 800d054:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d058:	4621      	mov	r1, r4
 800d05a:	028a      	lsls	r2, r1, #10
 800d05c:	4610      	mov	r0, r2
 800d05e:	4619      	mov	r1, r3
 800d060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d062:	2200      	movs	r2, #0
 800d064:	61bb      	str	r3, [r7, #24]
 800d066:	61fa      	str	r2, [r7, #28]
 800d068:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d06c:	f7f3 fdbc 	bl	8000be8 <__aeabi_uldivmod>
 800d070:	4602      	mov	r2, r0
 800d072:	460b      	mov	r3, r1
 800d074:	4613      	mov	r3, r2
 800d076:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d078:	4b0b      	ldr	r3, [pc, #44]	; (800d0a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800d07a:	685b      	ldr	r3, [r3, #4]
 800d07c:	0c1b      	lsrs	r3, r3, #16
 800d07e:	f003 0303 	and.w	r3, r3, #3
 800d082:	3301      	adds	r3, #1
 800d084:	005b      	lsls	r3, r3, #1
 800d086:	643b      	str	r3, [r7, #64]	; 0x40
 800d088:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d08a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d08c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d090:	64bb      	str	r3, [r7, #72]	; 0x48
 800d092:	e002      	b.n	800d09a <HAL_RCC_GetSysClockFreq+0x1f2>
 800d094:	4b05      	ldr	r3, [pc, #20]	; (800d0ac <HAL_RCC_GetSysClockFreq+0x204>)
 800d096:	64bb      	str	r3, [r7, #72]	; 0x48
 800d098:	bf00      	nop
 800d09a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d09c:	4618      	mov	r0, r3
 800d09e:	3750      	adds	r7, #80	; 0x50
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d0a6:	bf00      	nop
 800d0a8:	40023800 	.word	0x40023800
 800d0ac:	00f42400 	.word	0x00f42400

0800d0b0 <HAL_RCC_GetHCLKFreq>:
 800d0b0:	b480      	push	{r7}
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	4b03      	ldr	r3, [pc, #12]	; (800d0c4 <HAL_RCC_GetHCLKFreq+0x14>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4618      	mov	r0, r3
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c0:	4770      	bx	lr
 800d0c2:	bf00      	nop
 800d0c4:	20000020 	.word	0x20000020

0800d0c8 <HAL_RCC_GetPCLK1Freq>:
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	af00      	add	r7, sp, #0
 800d0cc:	f7ff fff0 	bl	800d0b0 <HAL_RCC_GetHCLKFreq>
 800d0d0:	4602      	mov	r2, r0
 800d0d2:	4b05      	ldr	r3, [pc, #20]	; (800d0e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d0d4:	689b      	ldr	r3, [r3, #8]
 800d0d6:	0a9b      	lsrs	r3, r3, #10
 800d0d8:	f003 0307 	and.w	r3, r3, #7
 800d0dc:	4903      	ldr	r1, [pc, #12]	; (800d0ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800d0de:	5ccb      	ldrb	r3, [r1, r3]
 800d0e0:	fa22 f303 	lsr.w	r3, r2, r3
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	bd80      	pop	{r7, pc}
 800d0e8:	40023800 	.word	0x40023800
 800d0ec:	080176b0 	.word	0x080176b0

0800d0f0 <HAL_RCC_GetPCLK2Freq>:
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	f7ff ffdc 	bl	800d0b0 <HAL_RCC_GetHCLKFreq>
 800d0f8:	4602      	mov	r2, r0
 800d0fa:	4b05      	ldr	r3, [pc, #20]	; (800d110 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d0fc:	689b      	ldr	r3, [r3, #8]
 800d0fe:	0b5b      	lsrs	r3, r3, #13
 800d100:	f003 0307 	and.w	r3, r3, #7
 800d104:	4903      	ldr	r1, [pc, #12]	; (800d114 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d106:	5ccb      	ldrb	r3, [r1, r3]
 800d108:	fa22 f303 	lsr.w	r3, r2, r3
 800d10c:	4618      	mov	r0, r3
 800d10e:	bd80      	pop	{r7, pc}
 800d110:	40023800 	.word	0x40023800
 800d114:	080176b0 	.word	0x080176b0

0800d118 <HAL_RCC_GetClockConfig>:
 800d118:	b480      	push	{r7}
 800d11a:	b083      	sub	sp, #12
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	6039      	str	r1, [r7, #0]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	220f      	movs	r2, #15
 800d126:	601a      	str	r2, [r3, #0]
 800d128:	4b12      	ldr	r3, [pc, #72]	; (800d174 <HAL_RCC_GetClockConfig+0x5c>)
 800d12a:	689b      	ldr	r3, [r3, #8]
 800d12c:	f003 0203 	and.w	r2, r3, #3
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	605a      	str	r2, [r3, #4]
 800d134:	4b0f      	ldr	r3, [pc, #60]	; (800d174 <HAL_RCC_GetClockConfig+0x5c>)
 800d136:	689b      	ldr	r3, [r3, #8]
 800d138:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	609a      	str	r2, [r3, #8]
 800d140:	4b0c      	ldr	r3, [pc, #48]	; (800d174 <HAL_RCC_GetClockConfig+0x5c>)
 800d142:	689b      	ldr	r3, [r3, #8]
 800d144:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	60da      	str	r2, [r3, #12]
 800d14c:	4b09      	ldr	r3, [pc, #36]	; (800d174 <HAL_RCC_GetClockConfig+0x5c>)
 800d14e:	689b      	ldr	r3, [r3, #8]
 800d150:	08db      	lsrs	r3, r3, #3
 800d152:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	611a      	str	r2, [r3, #16]
 800d15a:	4b07      	ldr	r3, [pc, #28]	; (800d178 <HAL_RCC_GetClockConfig+0x60>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f003 0207 	and.w	r2, r3, #7
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	601a      	str	r2, [r3, #0]
 800d166:	bf00      	nop
 800d168:	370c      	adds	r7, #12
 800d16a:	46bd      	mov	sp, r7
 800d16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d170:	4770      	bx	lr
 800d172:	bf00      	nop
 800d174:	40023800 	.word	0x40023800
 800d178:	40023c00 	.word	0x40023c00

0800d17c <HAL_RNG_Init>:
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d101      	bne.n	800d18e <HAL_RNG_Init+0x12>
 800d18a:	2301      	movs	r3, #1
 800d18c:	e01c      	b.n	800d1c8 <HAL_RNG_Init+0x4c>
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	795b      	ldrb	r3, [r3, #5]
 800d192:	b2db      	uxtb	r3, r3
 800d194:	2b00      	cmp	r3, #0
 800d196:	d105      	bne.n	800d1a4 <HAL_RNG_Init+0x28>
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2200      	movs	r2, #0
 800d19c:	711a      	strb	r2, [r3, #4]
 800d19e:	6878      	ldr	r0, [r7, #4]
 800d1a0:	f7fc fbe8 	bl	8009974 <HAL_RNG_MspInit>
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2202      	movs	r2, #2
 800d1a8:	715a      	strb	r2, [r3, #5]
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	681a      	ldr	r2, [r3, #0]
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	f042 0204 	orr.w	r2, r2, #4
 800d1b8:	601a      	str	r2, [r3, #0]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2201      	movs	r2, #1
 800d1be:	715a      	strb	r2, [r3, #5]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2200      	movs	r2, #0
 800d1c4:	609a      	str	r2, [r3, #8]
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3708      	adds	r7, #8
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}

0800d1d0 <HAL_RNG_GenerateRandomNumber>:
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b084      	sub	sp, #16
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
 800d1da:	2300      	movs	r3, #0
 800d1dc:	73fb      	strb	r3, [r7, #15]
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	791b      	ldrb	r3, [r3, #4]
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d101      	bne.n	800d1ea <HAL_RNG_GenerateRandomNumber+0x1a>
 800d1e6:	2302      	movs	r3, #2
 800d1e8:	e044      	b.n	800d274 <HAL_RNG_GenerateRandomNumber+0xa4>
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	711a      	strb	r2, [r3, #4]
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	795b      	ldrb	r3, [r3, #5]
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	2b01      	cmp	r3, #1
 800d1f8:	d133      	bne.n	800d262 <HAL_RNG_GenerateRandomNumber+0x92>
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2202      	movs	r2, #2
 800d1fe:	715a      	strb	r2, [r3, #5]
 800d200:	f7fd faf0 	bl	800a7e4 <HAL_GetTick>
 800d204:	60b8      	str	r0, [r7, #8]
 800d206:	e018      	b.n	800d23a <HAL_RNG_GenerateRandomNumber+0x6a>
 800d208:	f7fd faec 	bl	800a7e4 <HAL_GetTick>
 800d20c:	4602      	mov	r2, r0
 800d20e:	68bb      	ldr	r3, [r7, #8]
 800d210:	1ad3      	subs	r3, r2, r3
 800d212:	2b02      	cmp	r3, #2
 800d214:	d911      	bls.n	800d23a <HAL_RNG_GenerateRandomNumber+0x6a>
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	f003 0301 	and.w	r3, r3, #1
 800d220:	2b01      	cmp	r3, #1
 800d222:	d00a      	beq.n	800d23a <HAL_RNG_GenerateRandomNumber+0x6a>
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	2201      	movs	r2, #1
 800d228:	715a      	strb	r2, [r3, #5]
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2202      	movs	r2, #2
 800d22e:	609a      	str	r2, [r3, #8]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2200      	movs	r2, #0
 800d234:	711a      	strb	r2, [r3, #4]
 800d236:	2301      	movs	r3, #1
 800d238:	e01c      	b.n	800d274 <HAL_RNG_GenerateRandomNumber+0xa4>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	685b      	ldr	r3, [r3, #4]
 800d240:	f003 0301 	and.w	r3, r3, #1
 800d244:	2b01      	cmp	r3, #1
 800d246:	d1df      	bne.n	800d208 <HAL_RNG_GenerateRandomNumber+0x38>
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	689a      	ldr	r2, [r3, #8]
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	60da      	str	r2, [r3, #12]
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	68da      	ldr	r2, [r3, #12]
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	601a      	str	r2, [r3, #0]
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	2201      	movs	r2, #1
 800d25e:	715a      	strb	r2, [r3, #5]
 800d260:	e004      	b.n	800d26c <HAL_RNG_GenerateRandomNumber+0x9c>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	2204      	movs	r2, #4
 800d266:	609a      	str	r2, [r3, #8]
 800d268:	2301      	movs	r3, #1
 800d26a:	73fb      	strb	r3, [r7, #15]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2200      	movs	r2, #0
 800d270:	711a      	strb	r2, [r3, #4]
 800d272:	7bfb      	ldrb	r3, [r7, #15]
 800d274:	4618      	mov	r0, r3
 800d276:	3710      	adds	r7, #16
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <HAL_SPI_Init>:
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b082      	sub	sp, #8
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d101      	bne.n	800d28e <HAL_SPI_Init+0x12>
 800d28a:	2301      	movs	r3, #1
 800d28c:	e07b      	b.n	800d386 <HAL_SPI_Init+0x10a>
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d292:	2b00      	cmp	r3, #0
 800d294:	d108      	bne.n	800d2a8 <HAL_SPI_Init+0x2c>
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d29e:	d009      	beq.n	800d2b4 <HAL_SPI_Init+0x38>
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	61da      	str	r2, [r3, #28]
 800d2a6:	e005      	b.n	800d2b4 <HAL_SPI_Init+0x38>
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	611a      	str	r2, [r3, #16]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	615a      	str	r2, [r3, #20]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	629a      	str	r2, [r3, #40]	; 0x28
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d2c0:	b2db      	uxtb	r3, r3
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d106      	bne.n	800d2d4 <HAL_SPI_Init+0x58>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f7fc fba8 	bl	8009a24 <HAL_SPI_MspInit>
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2202      	movs	r2, #2
 800d2d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	681b      	ldr	r3, [r3, #0]
 800d2e0:	681a      	ldr	r2, [r3, #0]
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d2ea:	601a      	str	r2, [r3, #0]
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	685b      	ldr	r3, [r3, #4]
 800d2f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	689b      	ldr	r3, [r3, #8]
 800d2f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800d2fc:	431a      	orrs	r2, r3
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	68db      	ldr	r3, [r3, #12]
 800d302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d306:	431a      	orrs	r2, r3
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	691b      	ldr	r3, [r3, #16]
 800d30c:	f003 0302 	and.w	r3, r3, #2
 800d310:	431a      	orrs	r2, r3
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	695b      	ldr	r3, [r3, #20]
 800d316:	f003 0301 	and.w	r3, r3, #1
 800d31a:	431a      	orrs	r2, r3
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	699b      	ldr	r3, [r3, #24]
 800d320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d324:	431a      	orrs	r2, r3
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	69db      	ldr	r3, [r3, #28]
 800d32a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d32e:	431a      	orrs	r2, r3
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6a1b      	ldr	r3, [r3, #32]
 800d334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d338:	ea42 0103 	orr.w	r1, r2, r3
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d340:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	430a      	orrs	r2, r1
 800d34a:	601a      	str	r2, [r3, #0]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	699b      	ldr	r3, [r3, #24]
 800d350:	0c1b      	lsrs	r3, r3, #16
 800d352:	f003 0104 	and.w	r1, r3, #4
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d35a:	f003 0210 	and.w	r2, r3, #16
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	430a      	orrs	r2, r1
 800d364:	605a      	str	r2, [r3, #4]
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	69da      	ldr	r2, [r3, #28]
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d374:	61da      	str	r2, [r3, #28]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2200      	movs	r2, #0
 800d37a:	655a      	str	r2, [r3, #84]	; 0x54
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	2201      	movs	r2, #1
 800d380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800d384:	2300      	movs	r3, #0
 800d386:	4618      	mov	r0, r3
 800d388:	3708      	adds	r7, #8
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}

0800d38e <HAL_TIM_Base_Init>:
 800d38e:	b580      	push	{r7, lr}
 800d390:	b082      	sub	sp, #8
 800d392:	af00      	add	r7, sp, #0
 800d394:	6078      	str	r0, [r7, #4]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d101      	bne.n	800d3a0 <HAL_TIM_Base_Init+0x12>
 800d39c:	2301      	movs	r3, #1
 800d39e:	e041      	b.n	800d424 <HAL_TIM_Base_Init+0x96>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d106      	bne.n	800d3ba <HAL_TIM_Base_Init+0x2c>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d3b4:	6878      	ldr	r0, [r7, #4]
 800d3b6:	f7fc ff75 	bl	800a2a4 <HAL_TIM_Base_MspInit>
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	2202      	movs	r2, #2
 800d3be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	681a      	ldr	r2, [r3, #0]
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	3304      	adds	r3, #4
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	4610      	mov	r0, r2
 800d3ce:	f000 fc57 	bl	800dc80 <TIM_Base_SetConfig>
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2201      	movs	r2, #1
 800d3d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2201      	movs	r2, #1
 800d3de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2201      	movs	r2, #1
 800d3e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2201      	movs	r2, #1
 800d406:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2201      	movs	r2, #1
 800d40e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2201      	movs	r2, #1
 800d416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2201      	movs	r2, #1
 800d41e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d422:	2300      	movs	r3, #0
 800d424:	4618      	mov	r0, r3
 800d426:	3708      	adds	r7, #8
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <HAL_TIM_Base_Start_IT>:
 800d42c:	b480      	push	{r7}
 800d42e:	b085      	sub	sp, #20
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d43a:	b2db      	uxtb	r3, r3
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	d001      	beq.n	800d444 <HAL_TIM_Base_Start_IT+0x18>
 800d440:	2301      	movs	r3, #1
 800d442:	e04e      	b.n	800d4e2 <HAL_TIM_Base_Start_IT+0xb6>
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	2202      	movs	r2, #2
 800d448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	68da      	ldr	r2, [r3, #12]
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	f042 0201 	orr.w	r2, r2, #1
 800d45a:	60da      	str	r2, [r3, #12]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4a23      	ldr	r2, [pc, #140]	; (800d4f0 <HAL_TIM_Base_Start_IT+0xc4>)
 800d462:	4293      	cmp	r3, r2
 800d464:	d022      	beq.n	800d4ac <HAL_TIM_Base_Start_IT+0x80>
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d46e:	d01d      	beq.n	800d4ac <HAL_TIM_Base_Start_IT+0x80>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	4a1f      	ldr	r2, [pc, #124]	; (800d4f4 <HAL_TIM_Base_Start_IT+0xc8>)
 800d476:	4293      	cmp	r3, r2
 800d478:	d018      	beq.n	800d4ac <HAL_TIM_Base_Start_IT+0x80>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	4a1e      	ldr	r2, [pc, #120]	; (800d4f8 <HAL_TIM_Base_Start_IT+0xcc>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d013      	beq.n	800d4ac <HAL_TIM_Base_Start_IT+0x80>
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	4a1c      	ldr	r2, [pc, #112]	; (800d4fc <HAL_TIM_Base_Start_IT+0xd0>)
 800d48a:	4293      	cmp	r3, r2
 800d48c:	d00e      	beq.n	800d4ac <HAL_TIM_Base_Start_IT+0x80>
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	4a1b      	ldr	r2, [pc, #108]	; (800d500 <HAL_TIM_Base_Start_IT+0xd4>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d009      	beq.n	800d4ac <HAL_TIM_Base_Start_IT+0x80>
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	4a19      	ldr	r2, [pc, #100]	; (800d504 <HAL_TIM_Base_Start_IT+0xd8>)
 800d49e:	4293      	cmp	r3, r2
 800d4a0:	d004      	beq.n	800d4ac <HAL_TIM_Base_Start_IT+0x80>
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	4a18      	ldr	r2, [pc, #96]	; (800d508 <HAL_TIM_Base_Start_IT+0xdc>)
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d111      	bne.n	800d4d0 <HAL_TIM_Base_Start_IT+0xa4>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	689b      	ldr	r3, [r3, #8]
 800d4b2:	f003 0307 	and.w	r3, r3, #7
 800d4b6:	60fb      	str	r3, [r7, #12]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2b06      	cmp	r3, #6
 800d4bc:	d010      	beq.n	800d4e0 <HAL_TIM_Base_Start_IT+0xb4>
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	681a      	ldr	r2, [r3, #0]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f042 0201 	orr.w	r2, r2, #1
 800d4cc:	601a      	str	r2, [r3, #0]
 800d4ce:	e007      	b.n	800d4e0 <HAL_TIM_Base_Start_IT+0xb4>
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	681a      	ldr	r2, [r3, #0]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	f042 0201 	orr.w	r2, r2, #1
 800d4de:	601a      	str	r2, [r3, #0]
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3714      	adds	r7, #20
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr
 800d4ee:	bf00      	nop
 800d4f0:	40010000 	.word	0x40010000
 800d4f4:	40000400 	.word	0x40000400
 800d4f8:	40000800 	.word	0x40000800
 800d4fc:	40000c00 	.word	0x40000c00
 800d500:	40010400 	.word	0x40010400
 800d504:	40014000 	.word	0x40014000
 800d508:	40001800 	.word	0x40001800

0800d50c <HAL_TIM_PWM_Init>:
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b082      	sub	sp, #8
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d101      	bne.n	800d51e <HAL_TIM_PWM_Init+0x12>
 800d51a:	2301      	movs	r3, #1
 800d51c:	e041      	b.n	800d5a2 <HAL_TIM_PWM_Init+0x96>
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d524:	b2db      	uxtb	r3, r3
 800d526:	2b00      	cmp	r3, #0
 800d528:	d106      	bne.n	800d538 <HAL_TIM_PWM_Init+0x2c>
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	2200      	movs	r2, #0
 800d52e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 f839 	bl	800d5aa <HAL_TIM_PWM_MspInit>
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2202      	movs	r2, #2
 800d53c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681a      	ldr	r2, [r3, #0]
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	3304      	adds	r3, #4
 800d548:	4619      	mov	r1, r3
 800d54a:	4610      	mov	r0, r2
 800d54c:	f000 fb98 	bl	800dc80 <TIM_Base_SetConfig>
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2201      	movs	r2, #1
 800d554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2201      	movs	r2, #1
 800d55c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2201      	movs	r2, #1
 800d564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2201      	movs	r2, #1
 800d56c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2201      	movs	r2, #1
 800d574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2201      	movs	r2, #1
 800d57c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2201      	movs	r2, #1
 800d584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	2201      	movs	r2, #1
 800d58c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2201      	movs	r2, #1
 800d594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2201      	movs	r2, #1
 800d59c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	3708      	adds	r7, #8
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}

0800d5aa <HAL_TIM_PWM_MspInit>:
 800d5aa:	b480      	push	{r7}
 800d5ac:	b083      	sub	sp, #12
 800d5ae:	af00      	add	r7, sp, #0
 800d5b0:	6078      	str	r0, [r7, #4]
 800d5b2:	bf00      	nop
 800d5b4:	370c      	adds	r7, #12
 800d5b6:	46bd      	mov	sp, r7
 800d5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5bc:	4770      	bx	lr

0800d5be <HAL_TIM_Encoder_Init>:
 800d5be:	b580      	push	{r7, lr}
 800d5c0:	b086      	sub	sp, #24
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
 800d5c6:	6039      	str	r1, [r7, #0]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d101      	bne.n	800d5d2 <HAL_TIM_Encoder_Init+0x14>
 800d5ce:	2301      	movs	r3, #1
 800d5d0:	e097      	b.n	800d702 <HAL_TIM_Encoder_Init+0x144>
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5d8:	b2db      	uxtb	r3, r3
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d106      	bne.n	800d5ec <HAL_TIM_Encoder_Init+0x2e>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f7fc fee2 	bl	800a3b0 <HAL_TIM_Encoder_MspInit>
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2202      	movs	r2, #2
 800d5f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	687a      	ldr	r2, [r7, #4]
 800d5fc:	6812      	ldr	r2, [r2, #0]
 800d5fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d602:	f023 0307 	bic.w	r3, r3, #7
 800d606:	6093      	str	r3, [r2, #8]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681a      	ldr	r2, [r3, #0]
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	3304      	adds	r3, #4
 800d610:	4619      	mov	r1, r3
 800d612:	4610      	mov	r0, r2
 800d614:	f000 fb34 	bl	800dc80 <TIM_Base_SetConfig>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	689b      	ldr	r3, [r3, #8]
 800d61e:	617b      	str	r3, [r7, #20]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	699b      	ldr	r3, [r3, #24]
 800d626:	613b      	str	r3, [r7, #16]
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	6a1b      	ldr	r3, [r3, #32]
 800d62e:	60fb      	str	r3, [r7, #12]
 800d630:	683b      	ldr	r3, [r7, #0]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	697a      	ldr	r2, [r7, #20]
 800d636:	4313      	orrs	r3, r2
 800d638:	617b      	str	r3, [r7, #20]
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d640:	f023 0303 	bic.w	r3, r3, #3
 800d644:	613b      	str	r3, [r7, #16]
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	689a      	ldr	r2, [r3, #8]
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	699b      	ldr	r3, [r3, #24]
 800d64e:	021b      	lsls	r3, r3, #8
 800d650:	4313      	orrs	r3, r2
 800d652:	693a      	ldr	r2, [r7, #16]
 800d654:	4313      	orrs	r3, r2
 800d656:	613b      	str	r3, [r7, #16]
 800d658:	693b      	ldr	r3, [r7, #16]
 800d65a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d65e:	f023 030c 	bic.w	r3, r3, #12
 800d662:	613b      	str	r3, [r7, #16]
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d66a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d66e:	613b      	str	r3, [r7, #16]
 800d670:	683b      	ldr	r3, [r7, #0]
 800d672:	68da      	ldr	r2, [r3, #12]
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	69db      	ldr	r3, [r3, #28]
 800d678:	021b      	lsls	r3, r3, #8
 800d67a:	4313      	orrs	r3, r2
 800d67c:	693a      	ldr	r2, [r7, #16]
 800d67e:	4313      	orrs	r3, r2
 800d680:	613b      	str	r3, [r7, #16]
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	691b      	ldr	r3, [r3, #16]
 800d686:	011a      	lsls	r2, r3, #4
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	6a1b      	ldr	r3, [r3, #32]
 800d68c:	031b      	lsls	r3, r3, #12
 800d68e:	4313      	orrs	r3, r2
 800d690:	693a      	ldr	r2, [r7, #16]
 800d692:	4313      	orrs	r3, r2
 800d694:	613b      	str	r3, [r7, #16]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d69c:	60fb      	str	r3, [r7, #12]
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d6a4:	60fb      	str	r3, [r7, #12]
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	685a      	ldr	r2, [r3, #4]
 800d6aa:	683b      	ldr	r3, [r7, #0]
 800d6ac:	695b      	ldr	r3, [r3, #20]
 800d6ae:	011b      	lsls	r3, r3, #4
 800d6b0:	4313      	orrs	r3, r2
 800d6b2:	68fa      	ldr	r2, [r7, #12]
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	60fb      	str	r3, [r7, #12]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	697a      	ldr	r2, [r7, #20]
 800d6be:	609a      	str	r2, [r3, #8]
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	693a      	ldr	r2, [r7, #16]
 800d6c6:	619a      	str	r2, [r3, #24]
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	68fa      	ldr	r2, [r7, #12]
 800d6ce:	621a      	str	r2, [r3, #32]
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2201      	movs	r2, #1
 800d6dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2201      	movs	r2, #1
 800d6e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	2201      	movs	r2, #1
 800d6f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800d700:	2300      	movs	r3, #0
 800d702:	4618      	mov	r0, r3
 800d704:	3718      	adds	r7, #24
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}

0800d70a <HAL_TIM_IRQHandler>:
 800d70a:	b580      	push	{r7, lr}
 800d70c:	b082      	sub	sp, #8
 800d70e:	af00      	add	r7, sp, #0
 800d710:	6078      	str	r0, [r7, #4]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	691b      	ldr	r3, [r3, #16]
 800d718:	f003 0302 	and.w	r3, r3, #2
 800d71c:	2b02      	cmp	r3, #2
 800d71e:	d122      	bne.n	800d766 <HAL_TIM_IRQHandler+0x5c>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	68db      	ldr	r3, [r3, #12]
 800d726:	f003 0302 	and.w	r3, r3, #2
 800d72a:	2b02      	cmp	r3, #2
 800d72c:	d11b      	bne.n	800d766 <HAL_TIM_IRQHandler+0x5c>
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	f06f 0202 	mvn.w	r2, #2
 800d736:	611a      	str	r2, [r3, #16]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2201      	movs	r2, #1
 800d73c:	771a      	strb	r2, [r3, #28]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	699b      	ldr	r3, [r3, #24]
 800d744:	f003 0303 	and.w	r3, r3, #3
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d003      	beq.n	800d754 <HAL_TIM_IRQHandler+0x4a>
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f000 fa78 	bl	800dc42 <HAL_TIM_IC_CaptureCallback>
 800d752:	e005      	b.n	800d760 <HAL_TIM_IRQHandler+0x56>
 800d754:	6878      	ldr	r0, [r7, #4]
 800d756:	f000 fa6a 	bl	800dc2e <HAL_TIM_OC_DelayElapsedCallback>
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f000 fa7b 	bl	800dc56 <HAL_TIM_PWM_PulseFinishedCallback>
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2200      	movs	r2, #0
 800d764:	771a      	strb	r2, [r3, #28]
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	691b      	ldr	r3, [r3, #16]
 800d76c:	f003 0304 	and.w	r3, r3, #4
 800d770:	2b04      	cmp	r3, #4
 800d772:	d122      	bne.n	800d7ba <HAL_TIM_IRQHandler+0xb0>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	68db      	ldr	r3, [r3, #12]
 800d77a:	f003 0304 	and.w	r3, r3, #4
 800d77e:	2b04      	cmp	r3, #4
 800d780:	d11b      	bne.n	800d7ba <HAL_TIM_IRQHandler+0xb0>
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f06f 0204 	mvn.w	r2, #4
 800d78a:	611a      	str	r2, [r3, #16]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2202      	movs	r2, #2
 800d790:	771a      	strb	r2, [r3, #28]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	699b      	ldr	r3, [r3, #24]
 800d798:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d003      	beq.n	800d7a8 <HAL_TIM_IRQHandler+0x9e>
 800d7a0:	6878      	ldr	r0, [r7, #4]
 800d7a2:	f000 fa4e 	bl	800dc42 <HAL_TIM_IC_CaptureCallback>
 800d7a6:	e005      	b.n	800d7b4 <HAL_TIM_IRQHandler+0xaa>
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f000 fa40 	bl	800dc2e <HAL_TIM_OC_DelayElapsedCallback>
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f000 fa51 	bl	800dc56 <HAL_TIM_PWM_PulseFinishedCallback>
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	771a      	strb	r2, [r3, #28]
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	691b      	ldr	r3, [r3, #16]
 800d7c0:	f003 0308 	and.w	r3, r3, #8
 800d7c4:	2b08      	cmp	r3, #8
 800d7c6:	d122      	bne.n	800d80e <HAL_TIM_IRQHandler+0x104>
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	68db      	ldr	r3, [r3, #12]
 800d7ce:	f003 0308 	and.w	r3, r3, #8
 800d7d2:	2b08      	cmp	r3, #8
 800d7d4:	d11b      	bne.n	800d80e <HAL_TIM_IRQHandler+0x104>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	f06f 0208 	mvn.w	r2, #8
 800d7de:	611a      	str	r2, [r3, #16]
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2204      	movs	r2, #4
 800d7e4:	771a      	strb	r2, [r3, #28]
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	69db      	ldr	r3, [r3, #28]
 800d7ec:	f003 0303 	and.w	r3, r3, #3
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d003      	beq.n	800d7fc <HAL_TIM_IRQHandler+0xf2>
 800d7f4:	6878      	ldr	r0, [r7, #4]
 800d7f6:	f000 fa24 	bl	800dc42 <HAL_TIM_IC_CaptureCallback>
 800d7fa:	e005      	b.n	800d808 <HAL_TIM_IRQHandler+0xfe>
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f000 fa16 	bl	800dc2e <HAL_TIM_OC_DelayElapsedCallback>
 800d802:	6878      	ldr	r0, [r7, #4]
 800d804:	f000 fa27 	bl	800dc56 <HAL_TIM_PWM_PulseFinishedCallback>
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2200      	movs	r2, #0
 800d80c:	771a      	strb	r2, [r3, #28]
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	691b      	ldr	r3, [r3, #16]
 800d814:	f003 0310 	and.w	r3, r3, #16
 800d818:	2b10      	cmp	r3, #16
 800d81a:	d122      	bne.n	800d862 <HAL_TIM_IRQHandler+0x158>
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	68db      	ldr	r3, [r3, #12]
 800d822:	f003 0310 	and.w	r3, r3, #16
 800d826:	2b10      	cmp	r3, #16
 800d828:	d11b      	bne.n	800d862 <HAL_TIM_IRQHandler+0x158>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f06f 0210 	mvn.w	r2, #16
 800d832:	611a      	str	r2, [r3, #16]
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2208      	movs	r2, #8
 800d838:	771a      	strb	r2, [r3, #28]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	69db      	ldr	r3, [r3, #28]
 800d840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d844:	2b00      	cmp	r3, #0
 800d846:	d003      	beq.n	800d850 <HAL_TIM_IRQHandler+0x146>
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 f9fa 	bl	800dc42 <HAL_TIM_IC_CaptureCallback>
 800d84e:	e005      	b.n	800d85c <HAL_TIM_IRQHandler+0x152>
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f000 f9ec 	bl	800dc2e <HAL_TIM_OC_DelayElapsedCallback>
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f000 f9fd 	bl	800dc56 <HAL_TIM_PWM_PulseFinishedCallback>
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2200      	movs	r2, #0
 800d860:	771a      	strb	r2, [r3, #28]
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	691b      	ldr	r3, [r3, #16]
 800d868:	f003 0301 	and.w	r3, r3, #1
 800d86c:	2b01      	cmp	r3, #1
 800d86e:	d10e      	bne.n	800d88e <HAL_TIM_IRQHandler+0x184>
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	68db      	ldr	r3, [r3, #12]
 800d876:	f003 0301 	and.w	r3, r3, #1
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d107      	bne.n	800d88e <HAL_TIM_IRQHandler+0x184>
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f06f 0201 	mvn.w	r2, #1
 800d886:	611a      	str	r2, [r3, #16]
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f7fc f845 	bl	8009918 <HAL_TIM_PeriodElapsedCallback>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	691b      	ldr	r3, [r3, #16]
 800d894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d898:	2b80      	cmp	r3, #128	; 0x80
 800d89a:	d10e      	bne.n	800d8ba <HAL_TIM_IRQHandler+0x1b0>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	68db      	ldr	r3, [r3, #12]
 800d8a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8a6:	2b80      	cmp	r3, #128	; 0x80
 800d8a8:	d107      	bne.n	800d8ba <HAL_TIM_IRQHandler+0x1b0>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d8b2:	611a      	str	r2, [r3, #16]
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f000 fd53 	bl	800e360 <HAL_TIMEx_BreakCallback>
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	691b      	ldr	r3, [r3, #16]
 800d8c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8c4:	2b40      	cmp	r3, #64	; 0x40
 800d8c6:	d10e      	bne.n	800d8e6 <HAL_TIM_IRQHandler+0x1dc>
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	68db      	ldr	r3, [r3, #12]
 800d8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8d2:	2b40      	cmp	r3, #64	; 0x40
 800d8d4:	d107      	bne.n	800d8e6 <HAL_TIM_IRQHandler+0x1dc>
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d8de:	611a      	str	r2, [r3, #16]
 800d8e0:	6878      	ldr	r0, [r7, #4]
 800d8e2:	f000 f9c2 	bl	800dc6a <HAL_TIM_TriggerCallback>
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	691b      	ldr	r3, [r3, #16]
 800d8ec:	f003 0320 	and.w	r3, r3, #32
 800d8f0:	2b20      	cmp	r3, #32
 800d8f2:	d10e      	bne.n	800d912 <HAL_TIM_IRQHandler+0x208>
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	68db      	ldr	r3, [r3, #12]
 800d8fa:	f003 0320 	and.w	r3, r3, #32
 800d8fe:	2b20      	cmp	r3, #32
 800d900:	d107      	bne.n	800d912 <HAL_TIM_IRQHandler+0x208>
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	f06f 0220 	mvn.w	r2, #32
 800d90a:	611a      	str	r2, [r3, #16]
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f000 fd1d 	bl	800e34c <HAL_TIMEx_CommutCallback>
 800d912:	bf00      	nop
 800d914:	3708      	adds	r7, #8
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}
	...

0800d91c <HAL_TIM_PWM_ConfigChannel>:
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b086      	sub	sp, #24
 800d920:	af00      	add	r7, sp, #0
 800d922:	60f8      	str	r0, [r7, #12]
 800d924:	60b9      	str	r1, [r7, #8]
 800d926:	607a      	str	r2, [r7, #4]
 800d928:	2300      	movs	r3, #0
 800d92a:	75fb      	strb	r3, [r7, #23]
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d932:	2b01      	cmp	r3, #1
 800d934:	d101      	bne.n	800d93a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d936:	2302      	movs	r3, #2
 800d938:	e0ae      	b.n	800da98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	2201      	movs	r2, #1
 800d93e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2b0c      	cmp	r3, #12
 800d946:	f200 809f 	bhi.w	800da88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d94a:	a201      	add	r2, pc, #4	; (adr r2, 800d950 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d950:	0800d985 	.word	0x0800d985
 800d954:	0800da89 	.word	0x0800da89
 800d958:	0800da89 	.word	0x0800da89
 800d95c:	0800da89 	.word	0x0800da89
 800d960:	0800d9c5 	.word	0x0800d9c5
 800d964:	0800da89 	.word	0x0800da89
 800d968:	0800da89 	.word	0x0800da89
 800d96c:	0800da89 	.word	0x0800da89
 800d970:	0800da07 	.word	0x0800da07
 800d974:	0800da89 	.word	0x0800da89
 800d978:	0800da89 	.word	0x0800da89
 800d97c:	0800da89 	.word	0x0800da89
 800d980:	0800da47 	.word	0x0800da47
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	68b9      	ldr	r1, [r7, #8]
 800d98a:	4618      	mov	r0, r3
 800d98c:	f000 fa18 	bl	800ddc0 <TIM_OC1_SetConfig>
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	699a      	ldr	r2, [r3, #24]
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f042 0208 	orr.w	r2, r2, #8
 800d99e:	619a      	str	r2, [r3, #24]
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	699a      	ldr	r2, [r3, #24]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f022 0204 	bic.w	r2, r2, #4
 800d9ae:	619a      	str	r2, [r3, #24]
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	6999      	ldr	r1, [r3, #24]
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	691a      	ldr	r2, [r3, #16]
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	430a      	orrs	r2, r1
 800d9c0:	619a      	str	r2, [r3, #24]
 800d9c2:	e064      	b.n	800da8e <HAL_TIM_PWM_ConfigChannel+0x172>
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	68b9      	ldr	r1, [r7, #8]
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	f000 fa68 	bl	800dea0 <TIM_OC2_SetConfig>
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	699a      	ldr	r2, [r3, #24]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d9de:	619a      	str	r2, [r3, #24]
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	699a      	ldr	r2, [r3, #24]
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d9ee:	619a      	str	r2, [r3, #24]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	6999      	ldr	r1, [r3, #24]
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	691b      	ldr	r3, [r3, #16]
 800d9fa:	021a      	lsls	r2, r3, #8
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	430a      	orrs	r2, r1
 800da02:	619a      	str	r2, [r3, #24]
 800da04:	e043      	b.n	800da8e <HAL_TIM_PWM_ConfigChannel+0x172>
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	68b9      	ldr	r1, [r7, #8]
 800da0c:	4618      	mov	r0, r3
 800da0e:	f000 fabd 	bl	800df8c <TIM_OC3_SetConfig>
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	69da      	ldr	r2, [r3, #28]
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f042 0208 	orr.w	r2, r2, #8
 800da20:	61da      	str	r2, [r3, #28]
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	69da      	ldr	r2, [r3, #28]
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	f022 0204 	bic.w	r2, r2, #4
 800da30:	61da      	str	r2, [r3, #28]
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	69d9      	ldr	r1, [r3, #28]
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	691a      	ldr	r2, [r3, #16]
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	430a      	orrs	r2, r1
 800da42:	61da      	str	r2, [r3, #28]
 800da44:	e023      	b.n	800da8e <HAL_TIM_PWM_ConfigChannel+0x172>
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	68b9      	ldr	r1, [r7, #8]
 800da4c:	4618      	mov	r0, r3
 800da4e:	f000 fb11 	bl	800e074 <TIM_OC4_SetConfig>
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	69da      	ldr	r2, [r3, #28]
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da60:	61da      	str	r2, [r3, #28]
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	69da      	ldr	r2, [r3, #28]
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800da70:	61da      	str	r2, [r3, #28]
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	69d9      	ldr	r1, [r3, #28]
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	691b      	ldr	r3, [r3, #16]
 800da7c:	021a      	lsls	r2, r3, #8
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	430a      	orrs	r2, r1
 800da84:	61da      	str	r2, [r3, #28]
 800da86:	e002      	b.n	800da8e <HAL_TIM_PWM_ConfigChannel+0x172>
 800da88:	2301      	movs	r3, #1
 800da8a:	75fb      	strb	r3, [r7, #23]
 800da8c:	bf00      	nop
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	2200      	movs	r2, #0
 800da92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800da96:	7dfb      	ldrb	r3, [r7, #23]
 800da98:	4618      	mov	r0, r3
 800da9a:	3718      	adds	r7, #24
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}

0800daa0 <HAL_TIM_ConfigClockSource>:
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
 800daaa:	2300      	movs	r3, #0
 800daac:	73fb      	strb	r3, [r7, #15]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dab4:	2b01      	cmp	r3, #1
 800dab6:	d101      	bne.n	800dabc <HAL_TIM_ConfigClockSource+0x1c>
 800dab8:	2302      	movs	r3, #2
 800daba:	e0b4      	b.n	800dc26 <HAL_TIM_ConfigClockSource+0x186>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2201      	movs	r2, #1
 800dac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2202      	movs	r2, #2
 800dac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	689b      	ldr	r3, [r3, #8]
 800dad2:	60bb      	str	r3, [r7, #8]
 800dad4:	68bb      	ldr	r3, [r7, #8]
 800dad6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800dada:	60bb      	str	r3, [r7, #8]
 800dadc:	68bb      	ldr	r3, [r7, #8]
 800dade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dae2:	60bb      	str	r3, [r7, #8]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	68ba      	ldr	r2, [r7, #8]
 800daea:	609a      	str	r2, [r3, #8]
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800daf4:	d03e      	beq.n	800db74 <HAL_TIM_ConfigClockSource+0xd4>
 800daf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800dafa:	f200 8087 	bhi.w	800dc0c <HAL_TIM_ConfigClockSource+0x16c>
 800dafe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db02:	f000 8086 	beq.w	800dc12 <HAL_TIM_ConfigClockSource+0x172>
 800db06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db0a:	d87f      	bhi.n	800dc0c <HAL_TIM_ConfigClockSource+0x16c>
 800db0c:	2b70      	cmp	r3, #112	; 0x70
 800db0e:	d01a      	beq.n	800db46 <HAL_TIM_ConfigClockSource+0xa6>
 800db10:	2b70      	cmp	r3, #112	; 0x70
 800db12:	d87b      	bhi.n	800dc0c <HAL_TIM_ConfigClockSource+0x16c>
 800db14:	2b60      	cmp	r3, #96	; 0x60
 800db16:	d050      	beq.n	800dbba <HAL_TIM_ConfigClockSource+0x11a>
 800db18:	2b60      	cmp	r3, #96	; 0x60
 800db1a:	d877      	bhi.n	800dc0c <HAL_TIM_ConfigClockSource+0x16c>
 800db1c:	2b50      	cmp	r3, #80	; 0x50
 800db1e:	d03c      	beq.n	800db9a <HAL_TIM_ConfigClockSource+0xfa>
 800db20:	2b50      	cmp	r3, #80	; 0x50
 800db22:	d873      	bhi.n	800dc0c <HAL_TIM_ConfigClockSource+0x16c>
 800db24:	2b40      	cmp	r3, #64	; 0x40
 800db26:	d058      	beq.n	800dbda <HAL_TIM_ConfigClockSource+0x13a>
 800db28:	2b40      	cmp	r3, #64	; 0x40
 800db2a:	d86f      	bhi.n	800dc0c <HAL_TIM_ConfigClockSource+0x16c>
 800db2c:	2b30      	cmp	r3, #48	; 0x30
 800db2e:	d064      	beq.n	800dbfa <HAL_TIM_ConfigClockSource+0x15a>
 800db30:	2b30      	cmp	r3, #48	; 0x30
 800db32:	d86b      	bhi.n	800dc0c <HAL_TIM_ConfigClockSource+0x16c>
 800db34:	2b20      	cmp	r3, #32
 800db36:	d060      	beq.n	800dbfa <HAL_TIM_ConfigClockSource+0x15a>
 800db38:	2b20      	cmp	r3, #32
 800db3a:	d867      	bhi.n	800dc0c <HAL_TIM_ConfigClockSource+0x16c>
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d05c      	beq.n	800dbfa <HAL_TIM_ConfigClockSource+0x15a>
 800db40:	2b10      	cmp	r3, #16
 800db42:	d05a      	beq.n	800dbfa <HAL_TIM_ConfigClockSource+0x15a>
 800db44:	e062      	b.n	800dc0c <HAL_TIM_ConfigClockSource+0x16c>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	6818      	ldr	r0, [r3, #0]
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	6899      	ldr	r1, [r3, #8]
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	685a      	ldr	r2, [r3, #4]
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	68db      	ldr	r3, [r3, #12]
 800db56:	f000 fb5d 	bl	800e214 <TIM_ETR_SetConfig>
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	689b      	ldr	r3, [r3, #8]
 800db60:	60bb      	str	r3, [r7, #8]
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800db68:	60bb      	str	r3, [r7, #8]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	68ba      	ldr	r2, [r7, #8]
 800db70:	609a      	str	r2, [r3, #8]
 800db72:	e04f      	b.n	800dc14 <HAL_TIM_ConfigClockSource+0x174>
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6818      	ldr	r0, [r3, #0]
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	6899      	ldr	r1, [r3, #8]
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	685a      	ldr	r2, [r3, #4]
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	f000 fb46 	bl	800e214 <TIM_ETR_SetConfig>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	689a      	ldr	r2, [r3, #8]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800db96:	609a      	str	r2, [r3, #8]
 800db98:	e03c      	b.n	800dc14 <HAL_TIM_ConfigClockSource+0x174>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	6818      	ldr	r0, [r3, #0]
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	6859      	ldr	r1, [r3, #4]
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	68db      	ldr	r3, [r3, #12]
 800dba6:	461a      	mov	r2, r3
 800dba8:	f000 faba 	bl	800e120 <TIM_TI1_ConfigInputStage>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	2150      	movs	r1, #80	; 0x50
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f000 fb13 	bl	800e1de <TIM_ITRx_SetConfig>
 800dbb8:	e02c      	b.n	800dc14 <HAL_TIM_ConfigClockSource+0x174>
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6818      	ldr	r0, [r3, #0]
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	6859      	ldr	r1, [r3, #4]
 800dbc2:	683b      	ldr	r3, [r7, #0]
 800dbc4:	68db      	ldr	r3, [r3, #12]
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	f000 fad9 	bl	800e17e <TIM_TI2_ConfigInputStage>
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	2160      	movs	r1, #96	; 0x60
 800dbd2:	4618      	mov	r0, r3
 800dbd4:	f000 fb03 	bl	800e1de <TIM_ITRx_SetConfig>
 800dbd8:	e01c      	b.n	800dc14 <HAL_TIM_ConfigClockSource+0x174>
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	6818      	ldr	r0, [r3, #0]
 800dbde:	683b      	ldr	r3, [r7, #0]
 800dbe0:	6859      	ldr	r1, [r3, #4]
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	68db      	ldr	r3, [r3, #12]
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	f000 fa9a 	bl	800e120 <TIM_TI1_ConfigInputStage>
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	2140      	movs	r1, #64	; 0x40
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f000 faf3 	bl	800e1de <TIM_ITRx_SetConfig>
 800dbf8:	e00c      	b.n	800dc14 <HAL_TIM_ConfigClockSource+0x174>
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	681a      	ldr	r2, [r3, #0]
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	4619      	mov	r1, r3
 800dc04:	4610      	mov	r0, r2
 800dc06:	f000 faea 	bl	800e1de <TIM_ITRx_SetConfig>
 800dc0a:	e003      	b.n	800dc14 <HAL_TIM_ConfigClockSource+0x174>
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	73fb      	strb	r3, [r7, #15]
 800dc10:	e000      	b.n	800dc14 <HAL_TIM_ConfigClockSource+0x174>
 800dc12:	bf00      	nop
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2201      	movs	r2, #1
 800dc18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800dc24:	7bfb      	ldrb	r3, [r7, #15]
 800dc26:	4618      	mov	r0, r3
 800dc28:	3710      	adds	r7, #16
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}

0800dc2e <HAL_TIM_OC_DelayElapsedCallback>:
 800dc2e:	b480      	push	{r7}
 800dc30:	b083      	sub	sp, #12
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
 800dc36:	bf00      	nop
 800dc38:	370c      	adds	r7, #12
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr

0800dc42 <HAL_TIM_IC_CaptureCallback>:
 800dc42:	b480      	push	{r7}
 800dc44:	b083      	sub	sp, #12
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
 800dc4a:	bf00      	nop
 800dc4c:	370c      	adds	r7, #12
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr

0800dc56 <HAL_TIM_PWM_PulseFinishedCallback>:
 800dc56:	b480      	push	{r7}
 800dc58:	b083      	sub	sp, #12
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	6078      	str	r0, [r7, #4]
 800dc5e:	bf00      	nop
 800dc60:	370c      	adds	r7, #12
 800dc62:	46bd      	mov	sp, r7
 800dc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc68:	4770      	bx	lr

0800dc6a <HAL_TIM_TriggerCallback>:
 800dc6a:	b480      	push	{r7}
 800dc6c:	b083      	sub	sp, #12
 800dc6e:	af00      	add	r7, sp, #0
 800dc70:	6078      	str	r0, [r7, #4]
 800dc72:	bf00      	nop
 800dc74:	370c      	adds	r7, #12
 800dc76:	46bd      	mov	sp, r7
 800dc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7c:	4770      	bx	lr
	...

0800dc80 <TIM_Base_SetConfig>:
 800dc80:	b480      	push	{r7}
 800dc82:	b085      	sub	sp, #20
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	60fb      	str	r3, [r7, #12]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	4a40      	ldr	r2, [pc, #256]	; (800dd94 <TIM_Base_SetConfig+0x114>)
 800dc94:	4293      	cmp	r3, r2
 800dc96:	d013      	beq.n	800dcc0 <TIM_Base_SetConfig+0x40>
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc9e:	d00f      	beq.n	800dcc0 <TIM_Base_SetConfig+0x40>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	4a3d      	ldr	r2, [pc, #244]	; (800dd98 <TIM_Base_SetConfig+0x118>)
 800dca4:	4293      	cmp	r3, r2
 800dca6:	d00b      	beq.n	800dcc0 <TIM_Base_SetConfig+0x40>
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	4a3c      	ldr	r2, [pc, #240]	; (800dd9c <TIM_Base_SetConfig+0x11c>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d007      	beq.n	800dcc0 <TIM_Base_SetConfig+0x40>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	4a3b      	ldr	r2, [pc, #236]	; (800dda0 <TIM_Base_SetConfig+0x120>)
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	d003      	beq.n	800dcc0 <TIM_Base_SetConfig+0x40>
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	4a3a      	ldr	r2, [pc, #232]	; (800dda4 <TIM_Base_SetConfig+0x124>)
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	d108      	bne.n	800dcd2 <TIM_Base_SetConfig+0x52>
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dcc6:	60fb      	str	r3, [r7, #12]
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	68fa      	ldr	r2, [r7, #12]
 800dcce:	4313      	orrs	r3, r2
 800dcd0:	60fb      	str	r3, [r7, #12]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	4a2f      	ldr	r2, [pc, #188]	; (800dd94 <TIM_Base_SetConfig+0x114>)
 800dcd6:	4293      	cmp	r3, r2
 800dcd8:	d02b      	beq.n	800dd32 <TIM_Base_SetConfig+0xb2>
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dce0:	d027      	beq.n	800dd32 <TIM_Base_SetConfig+0xb2>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	4a2c      	ldr	r2, [pc, #176]	; (800dd98 <TIM_Base_SetConfig+0x118>)
 800dce6:	4293      	cmp	r3, r2
 800dce8:	d023      	beq.n	800dd32 <TIM_Base_SetConfig+0xb2>
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	4a2b      	ldr	r2, [pc, #172]	; (800dd9c <TIM_Base_SetConfig+0x11c>)
 800dcee:	4293      	cmp	r3, r2
 800dcf0:	d01f      	beq.n	800dd32 <TIM_Base_SetConfig+0xb2>
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	4a2a      	ldr	r2, [pc, #168]	; (800dda0 <TIM_Base_SetConfig+0x120>)
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d01b      	beq.n	800dd32 <TIM_Base_SetConfig+0xb2>
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	4a29      	ldr	r2, [pc, #164]	; (800dda4 <TIM_Base_SetConfig+0x124>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d017      	beq.n	800dd32 <TIM_Base_SetConfig+0xb2>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	4a28      	ldr	r2, [pc, #160]	; (800dda8 <TIM_Base_SetConfig+0x128>)
 800dd06:	4293      	cmp	r3, r2
 800dd08:	d013      	beq.n	800dd32 <TIM_Base_SetConfig+0xb2>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	4a27      	ldr	r2, [pc, #156]	; (800ddac <TIM_Base_SetConfig+0x12c>)
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d00f      	beq.n	800dd32 <TIM_Base_SetConfig+0xb2>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	4a26      	ldr	r2, [pc, #152]	; (800ddb0 <TIM_Base_SetConfig+0x130>)
 800dd16:	4293      	cmp	r3, r2
 800dd18:	d00b      	beq.n	800dd32 <TIM_Base_SetConfig+0xb2>
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	4a25      	ldr	r2, [pc, #148]	; (800ddb4 <TIM_Base_SetConfig+0x134>)
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d007      	beq.n	800dd32 <TIM_Base_SetConfig+0xb2>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	4a24      	ldr	r2, [pc, #144]	; (800ddb8 <TIM_Base_SetConfig+0x138>)
 800dd26:	4293      	cmp	r3, r2
 800dd28:	d003      	beq.n	800dd32 <TIM_Base_SetConfig+0xb2>
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	4a23      	ldr	r2, [pc, #140]	; (800ddbc <TIM_Base_SetConfig+0x13c>)
 800dd2e:	4293      	cmp	r3, r2
 800dd30:	d108      	bne.n	800dd44 <TIM_Base_SetConfig+0xc4>
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd38:	60fb      	str	r3, [r7, #12]
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	68db      	ldr	r3, [r3, #12]
 800dd3e:	68fa      	ldr	r2, [r7, #12]
 800dd40:	4313      	orrs	r3, r2
 800dd42:	60fb      	str	r3, [r7, #12]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dd4a:	683b      	ldr	r3, [r7, #0]
 800dd4c:	695b      	ldr	r3, [r3, #20]
 800dd4e:	4313      	orrs	r3, r2
 800dd50:	60fb      	str	r3, [r7, #12]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	68fa      	ldr	r2, [r7, #12]
 800dd56:	601a      	str	r2, [r3, #0]
 800dd58:	683b      	ldr	r3, [r7, #0]
 800dd5a:	689a      	ldr	r2, [r3, #8]
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	62da      	str	r2, [r3, #44]	; 0x2c
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	681a      	ldr	r2, [r3, #0]
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	629a      	str	r2, [r3, #40]	; 0x28
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	4a0a      	ldr	r2, [pc, #40]	; (800dd94 <TIM_Base_SetConfig+0x114>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d003      	beq.n	800dd78 <TIM_Base_SetConfig+0xf8>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	4a0c      	ldr	r2, [pc, #48]	; (800dda4 <TIM_Base_SetConfig+0x124>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d103      	bne.n	800dd80 <TIM_Base_SetConfig+0x100>
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	691a      	ldr	r2, [r3, #16]
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	631a      	str	r2, [r3, #48]	; 0x30
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2201      	movs	r2, #1
 800dd84:	615a      	str	r2, [r3, #20]
 800dd86:	bf00      	nop
 800dd88:	3714      	adds	r7, #20
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd90:	4770      	bx	lr
 800dd92:	bf00      	nop
 800dd94:	40010000 	.word	0x40010000
 800dd98:	40000400 	.word	0x40000400
 800dd9c:	40000800 	.word	0x40000800
 800dda0:	40000c00 	.word	0x40000c00
 800dda4:	40010400 	.word	0x40010400
 800dda8:	40014000 	.word	0x40014000
 800ddac:	40014400 	.word	0x40014400
 800ddb0:	40014800 	.word	0x40014800
 800ddb4:	40001800 	.word	0x40001800
 800ddb8:	40001c00 	.word	0x40001c00
 800ddbc:	40002000 	.word	0x40002000

0800ddc0 <TIM_OC1_SetConfig>:
 800ddc0:	b480      	push	{r7}
 800ddc2:	b087      	sub	sp, #28
 800ddc4:	af00      	add	r7, sp, #0
 800ddc6:	6078      	str	r0, [r7, #4]
 800ddc8:	6039      	str	r1, [r7, #0]
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6a1b      	ldr	r3, [r3, #32]
 800ddce:	f023 0201 	bic.w	r2, r3, #1
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	621a      	str	r2, [r3, #32]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6a1b      	ldr	r3, [r3, #32]
 800ddda:	617b      	str	r3, [r7, #20]
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	613b      	str	r3, [r7, #16]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	699b      	ldr	r3, [r3, #24]
 800dde6:	60fb      	str	r3, [r7, #12]
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ddee:	60fb      	str	r3, [r7, #12]
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f023 0303 	bic.w	r3, r3, #3
 800ddf6:	60fb      	str	r3, [r7, #12]
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	68fa      	ldr	r2, [r7, #12]
 800ddfe:	4313      	orrs	r3, r2
 800de00:	60fb      	str	r3, [r7, #12]
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	f023 0302 	bic.w	r3, r3, #2
 800de08:	617b      	str	r3, [r7, #20]
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	689b      	ldr	r3, [r3, #8]
 800de0e:	697a      	ldr	r2, [r7, #20]
 800de10:	4313      	orrs	r3, r2
 800de12:	617b      	str	r3, [r7, #20]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	4a20      	ldr	r2, [pc, #128]	; (800de98 <TIM_OC1_SetConfig+0xd8>)
 800de18:	4293      	cmp	r3, r2
 800de1a:	d003      	beq.n	800de24 <TIM_OC1_SetConfig+0x64>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	4a1f      	ldr	r2, [pc, #124]	; (800de9c <TIM_OC1_SetConfig+0xdc>)
 800de20:	4293      	cmp	r3, r2
 800de22:	d10c      	bne.n	800de3e <TIM_OC1_SetConfig+0x7e>
 800de24:	697b      	ldr	r3, [r7, #20]
 800de26:	f023 0308 	bic.w	r3, r3, #8
 800de2a:	617b      	str	r3, [r7, #20]
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	68db      	ldr	r3, [r3, #12]
 800de30:	697a      	ldr	r2, [r7, #20]
 800de32:	4313      	orrs	r3, r2
 800de34:	617b      	str	r3, [r7, #20]
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	f023 0304 	bic.w	r3, r3, #4
 800de3c:	617b      	str	r3, [r7, #20]
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	4a15      	ldr	r2, [pc, #84]	; (800de98 <TIM_OC1_SetConfig+0xd8>)
 800de42:	4293      	cmp	r3, r2
 800de44:	d003      	beq.n	800de4e <TIM_OC1_SetConfig+0x8e>
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	4a14      	ldr	r2, [pc, #80]	; (800de9c <TIM_OC1_SetConfig+0xdc>)
 800de4a:	4293      	cmp	r3, r2
 800de4c:	d111      	bne.n	800de72 <TIM_OC1_SetConfig+0xb2>
 800de4e:	693b      	ldr	r3, [r7, #16]
 800de50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de54:	613b      	str	r3, [r7, #16]
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800de5c:	613b      	str	r3, [r7, #16]
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	695b      	ldr	r3, [r3, #20]
 800de62:	693a      	ldr	r2, [r7, #16]
 800de64:	4313      	orrs	r3, r2
 800de66:	613b      	str	r3, [r7, #16]
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	699b      	ldr	r3, [r3, #24]
 800de6c:	693a      	ldr	r2, [r7, #16]
 800de6e:	4313      	orrs	r3, r2
 800de70:	613b      	str	r3, [r7, #16]
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	693a      	ldr	r2, [r7, #16]
 800de76:	605a      	str	r2, [r3, #4]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	68fa      	ldr	r2, [r7, #12]
 800de7c:	619a      	str	r2, [r3, #24]
 800de7e:	683b      	ldr	r3, [r7, #0]
 800de80:	685a      	ldr	r2, [r3, #4]
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	635a      	str	r2, [r3, #52]	; 0x34
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	697a      	ldr	r2, [r7, #20]
 800de8a:	621a      	str	r2, [r3, #32]
 800de8c:	bf00      	nop
 800de8e:	371c      	adds	r7, #28
 800de90:	46bd      	mov	sp, r7
 800de92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de96:	4770      	bx	lr
 800de98:	40010000 	.word	0x40010000
 800de9c:	40010400 	.word	0x40010400

0800dea0 <TIM_OC2_SetConfig>:
 800dea0:	b480      	push	{r7}
 800dea2:	b087      	sub	sp, #28
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	6039      	str	r1, [r7, #0]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6a1b      	ldr	r3, [r3, #32]
 800deae:	f023 0210 	bic.w	r2, r3, #16
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	621a      	str	r2, [r3, #32]
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6a1b      	ldr	r3, [r3, #32]
 800deba:	617b      	str	r3, [r7, #20]
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	685b      	ldr	r3, [r3, #4]
 800dec0:	613b      	str	r3, [r7, #16]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	699b      	ldr	r3, [r3, #24]
 800dec6:	60fb      	str	r3, [r7, #12]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800dece:	60fb      	str	r3, [r7, #12]
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ded6:	60fb      	str	r3, [r7, #12]
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	021b      	lsls	r3, r3, #8
 800dede:	68fa      	ldr	r2, [r7, #12]
 800dee0:	4313      	orrs	r3, r2
 800dee2:	60fb      	str	r3, [r7, #12]
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	f023 0320 	bic.w	r3, r3, #32
 800deea:	617b      	str	r3, [r7, #20]
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	689b      	ldr	r3, [r3, #8]
 800def0:	011b      	lsls	r3, r3, #4
 800def2:	697a      	ldr	r2, [r7, #20]
 800def4:	4313      	orrs	r3, r2
 800def6:	617b      	str	r3, [r7, #20]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	4a22      	ldr	r2, [pc, #136]	; (800df84 <TIM_OC2_SetConfig+0xe4>)
 800defc:	4293      	cmp	r3, r2
 800defe:	d003      	beq.n	800df08 <TIM_OC2_SetConfig+0x68>
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	4a21      	ldr	r2, [pc, #132]	; (800df88 <TIM_OC2_SetConfig+0xe8>)
 800df04:	4293      	cmp	r3, r2
 800df06:	d10d      	bne.n	800df24 <TIM_OC2_SetConfig+0x84>
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df0e:	617b      	str	r3, [r7, #20]
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	68db      	ldr	r3, [r3, #12]
 800df14:	011b      	lsls	r3, r3, #4
 800df16:	697a      	ldr	r2, [r7, #20]
 800df18:	4313      	orrs	r3, r2
 800df1a:	617b      	str	r3, [r7, #20]
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df22:	617b      	str	r3, [r7, #20]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	4a17      	ldr	r2, [pc, #92]	; (800df84 <TIM_OC2_SetConfig+0xe4>)
 800df28:	4293      	cmp	r3, r2
 800df2a:	d003      	beq.n	800df34 <TIM_OC2_SetConfig+0x94>
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	4a16      	ldr	r2, [pc, #88]	; (800df88 <TIM_OC2_SetConfig+0xe8>)
 800df30:	4293      	cmp	r3, r2
 800df32:	d113      	bne.n	800df5c <TIM_OC2_SetConfig+0xbc>
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800df3a:	613b      	str	r3, [r7, #16]
 800df3c:	693b      	ldr	r3, [r7, #16]
 800df3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800df42:	613b      	str	r3, [r7, #16]
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	695b      	ldr	r3, [r3, #20]
 800df48:	009b      	lsls	r3, r3, #2
 800df4a:	693a      	ldr	r2, [r7, #16]
 800df4c:	4313      	orrs	r3, r2
 800df4e:	613b      	str	r3, [r7, #16]
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	699b      	ldr	r3, [r3, #24]
 800df54:	009b      	lsls	r3, r3, #2
 800df56:	693a      	ldr	r2, [r7, #16]
 800df58:	4313      	orrs	r3, r2
 800df5a:	613b      	str	r3, [r7, #16]
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	693a      	ldr	r2, [r7, #16]
 800df60:	605a      	str	r2, [r3, #4]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	68fa      	ldr	r2, [r7, #12]
 800df66:	619a      	str	r2, [r3, #24]
 800df68:	683b      	ldr	r3, [r7, #0]
 800df6a:	685a      	ldr	r2, [r3, #4]
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	639a      	str	r2, [r3, #56]	; 0x38
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	697a      	ldr	r2, [r7, #20]
 800df74:	621a      	str	r2, [r3, #32]
 800df76:	bf00      	nop
 800df78:	371c      	adds	r7, #28
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop
 800df84:	40010000 	.word	0x40010000
 800df88:	40010400 	.word	0x40010400

0800df8c <TIM_OC3_SetConfig>:
 800df8c:	b480      	push	{r7}
 800df8e:	b087      	sub	sp, #28
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
 800df94:	6039      	str	r1, [r7, #0]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6a1b      	ldr	r3, [r3, #32]
 800df9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	621a      	str	r2, [r3, #32]
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6a1b      	ldr	r3, [r3, #32]
 800dfa6:	617b      	str	r3, [r7, #20]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	685b      	ldr	r3, [r3, #4]
 800dfac:	613b      	str	r3, [r7, #16]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	69db      	ldr	r3, [r3, #28]
 800dfb2:	60fb      	str	r3, [r7, #12]
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfba:	60fb      	str	r3, [r7, #12]
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	f023 0303 	bic.w	r3, r3, #3
 800dfc2:	60fb      	str	r3, [r7, #12]
 800dfc4:	683b      	ldr	r3, [r7, #0]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	68fa      	ldr	r2, [r7, #12]
 800dfca:	4313      	orrs	r3, r2
 800dfcc:	60fb      	str	r3, [r7, #12]
 800dfce:	697b      	ldr	r3, [r7, #20]
 800dfd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dfd4:	617b      	str	r3, [r7, #20]
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	689b      	ldr	r3, [r3, #8]
 800dfda:	021b      	lsls	r3, r3, #8
 800dfdc:	697a      	ldr	r2, [r7, #20]
 800dfde:	4313      	orrs	r3, r2
 800dfe0:	617b      	str	r3, [r7, #20]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	4a21      	ldr	r2, [pc, #132]	; (800e06c <TIM_OC3_SetConfig+0xe0>)
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d003      	beq.n	800dff2 <TIM_OC3_SetConfig+0x66>
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	4a20      	ldr	r2, [pc, #128]	; (800e070 <TIM_OC3_SetConfig+0xe4>)
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d10d      	bne.n	800e00e <TIM_OC3_SetConfig+0x82>
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dff8:	617b      	str	r3, [r7, #20]
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	68db      	ldr	r3, [r3, #12]
 800dffe:	021b      	lsls	r3, r3, #8
 800e000:	697a      	ldr	r2, [r7, #20]
 800e002:	4313      	orrs	r3, r2
 800e004:	617b      	str	r3, [r7, #20]
 800e006:	697b      	ldr	r3, [r7, #20]
 800e008:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e00c:	617b      	str	r3, [r7, #20]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	4a16      	ldr	r2, [pc, #88]	; (800e06c <TIM_OC3_SetConfig+0xe0>)
 800e012:	4293      	cmp	r3, r2
 800e014:	d003      	beq.n	800e01e <TIM_OC3_SetConfig+0x92>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	4a15      	ldr	r2, [pc, #84]	; (800e070 <TIM_OC3_SetConfig+0xe4>)
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d113      	bne.n	800e046 <TIM_OC3_SetConfig+0xba>
 800e01e:	693b      	ldr	r3, [r7, #16]
 800e020:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e024:	613b      	str	r3, [r7, #16]
 800e026:	693b      	ldr	r3, [r7, #16]
 800e028:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e02c:	613b      	str	r3, [r7, #16]
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	695b      	ldr	r3, [r3, #20]
 800e032:	011b      	lsls	r3, r3, #4
 800e034:	693a      	ldr	r2, [r7, #16]
 800e036:	4313      	orrs	r3, r2
 800e038:	613b      	str	r3, [r7, #16]
 800e03a:	683b      	ldr	r3, [r7, #0]
 800e03c:	699b      	ldr	r3, [r3, #24]
 800e03e:	011b      	lsls	r3, r3, #4
 800e040:	693a      	ldr	r2, [r7, #16]
 800e042:	4313      	orrs	r3, r2
 800e044:	613b      	str	r3, [r7, #16]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	693a      	ldr	r2, [r7, #16]
 800e04a:	605a      	str	r2, [r3, #4]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	68fa      	ldr	r2, [r7, #12]
 800e050:	61da      	str	r2, [r3, #28]
 800e052:	683b      	ldr	r3, [r7, #0]
 800e054:	685a      	ldr	r2, [r3, #4]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	63da      	str	r2, [r3, #60]	; 0x3c
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	697a      	ldr	r2, [r7, #20]
 800e05e:	621a      	str	r2, [r3, #32]
 800e060:	bf00      	nop
 800e062:	371c      	adds	r7, #28
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr
 800e06c:	40010000 	.word	0x40010000
 800e070:	40010400 	.word	0x40010400

0800e074 <TIM_OC4_SetConfig>:
 800e074:	b480      	push	{r7}
 800e076:	b087      	sub	sp, #28
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
 800e07c:	6039      	str	r1, [r7, #0]
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6a1b      	ldr	r3, [r3, #32]
 800e082:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	621a      	str	r2, [r3, #32]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	6a1b      	ldr	r3, [r3, #32]
 800e08e:	613b      	str	r3, [r7, #16]
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	685b      	ldr	r3, [r3, #4]
 800e094:	617b      	str	r3, [r7, #20]
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	69db      	ldr	r3, [r3, #28]
 800e09a:	60fb      	str	r3, [r7, #12]
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e0a2:	60fb      	str	r3, [r7, #12]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e0aa:	60fb      	str	r3, [r7, #12]
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	021b      	lsls	r3, r3, #8
 800e0b2:	68fa      	ldr	r2, [r7, #12]
 800e0b4:	4313      	orrs	r3, r2
 800e0b6:	60fb      	str	r3, [r7, #12]
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e0be:	613b      	str	r3, [r7, #16]
 800e0c0:	683b      	ldr	r3, [r7, #0]
 800e0c2:	689b      	ldr	r3, [r3, #8]
 800e0c4:	031b      	lsls	r3, r3, #12
 800e0c6:	693a      	ldr	r2, [r7, #16]
 800e0c8:	4313      	orrs	r3, r2
 800e0ca:	613b      	str	r3, [r7, #16]
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	4a12      	ldr	r2, [pc, #72]	; (800e118 <TIM_OC4_SetConfig+0xa4>)
 800e0d0:	4293      	cmp	r3, r2
 800e0d2:	d003      	beq.n	800e0dc <TIM_OC4_SetConfig+0x68>
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	4a11      	ldr	r2, [pc, #68]	; (800e11c <TIM_OC4_SetConfig+0xa8>)
 800e0d8:	4293      	cmp	r3, r2
 800e0da:	d109      	bne.n	800e0f0 <TIM_OC4_SetConfig+0x7c>
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e0e2:	617b      	str	r3, [r7, #20]
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	695b      	ldr	r3, [r3, #20]
 800e0e8:	019b      	lsls	r3, r3, #6
 800e0ea:	697a      	ldr	r2, [r7, #20]
 800e0ec:	4313      	orrs	r3, r2
 800e0ee:	617b      	str	r3, [r7, #20]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	697a      	ldr	r2, [r7, #20]
 800e0f4:	605a      	str	r2, [r3, #4]
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	68fa      	ldr	r2, [r7, #12]
 800e0fa:	61da      	str	r2, [r3, #28]
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	685a      	ldr	r2, [r3, #4]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	641a      	str	r2, [r3, #64]	; 0x40
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	693a      	ldr	r2, [r7, #16]
 800e108:	621a      	str	r2, [r3, #32]
 800e10a:	bf00      	nop
 800e10c:	371c      	adds	r7, #28
 800e10e:	46bd      	mov	sp, r7
 800e110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e114:	4770      	bx	lr
 800e116:	bf00      	nop
 800e118:	40010000 	.word	0x40010000
 800e11c:	40010400 	.word	0x40010400

0800e120 <TIM_TI1_ConfigInputStage>:
 800e120:	b480      	push	{r7}
 800e122:	b087      	sub	sp, #28
 800e124:	af00      	add	r7, sp, #0
 800e126:	60f8      	str	r0, [r7, #12]
 800e128:	60b9      	str	r1, [r7, #8]
 800e12a:	607a      	str	r2, [r7, #4]
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	6a1b      	ldr	r3, [r3, #32]
 800e130:	617b      	str	r3, [r7, #20]
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	6a1b      	ldr	r3, [r3, #32]
 800e136:	f023 0201 	bic.w	r2, r3, #1
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	621a      	str	r2, [r3, #32]
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	699b      	ldr	r3, [r3, #24]
 800e142:	613b      	str	r3, [r7, #16]
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e14a:	613b      	str	r3, [r7, #16]
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	011b      	lsls	r3, r3, #4
 800e150:	693a      	ldr	r2, [r7, #16]
 800e152:	4313      	orrs	r3, r2
 800e154:	613b      	str	r3, [r7, #16]
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	f023 030a 	bic.w	r3, r3, #10
 800e15c:	617b      	str	r3, [r7, #20]
 800e15e:	697a      	ldr	r2, [r7, #20]
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	4313      	orrs	r3, r2
 800e164:	617b      	str	r3, [r7, #20]
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	693a      	ldr	r2, [r7, #16]
 800e16a:	619a      	str	r2, [r3, #24]
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	697a      	ldr	r2, [r7, #20]
 800e170:	621a      	str	r2, [r3, #32]
 800e172:	bf00      	nop
 800e174:	371c      	adds	r7, #28
 800e176:	46bd      	mov	sp, r7
 800e178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17c:	4770      	bx	lr

0800e17e <TIM_TI2_ConfigInputStage>:
 800e17e:	b480      	push	{r7}
 800e180:	b087      	sub	sp, #28
 800e182:	af00      	add	r7, sp, #0
 800e184:	60f8      	str	r0, [r7, #12]
 800e186:	60b9      	str	r1, [r7, #8]
 800e188:	607a      	str	r2, [r7, #4]
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	6a1b      	ldr	r3, [r3, #32]
 800e18e:	f023 0210 	bic.w	r2, r3, #16
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	621a      	str	r2, [r3, #32]
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	699b      	ldr	r3, [r3, #24]
 800e19a:	617b      	str	r3, [r7, #20]
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	6a1b      	ldr	r3, [r3, #32]
 800e1a0:	613b      	str	r3, [r7, #16]
 800e1a2:	697b      	ldr	r3, [r7, #20]
 800e1a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e1a8:	617b      	str	r3, [r7, #20]
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	031b      	lsls	r3, r3, #12
 800e1ae:	697a      	ldr	r2, [r7, #20]
 800e1b0:	4313      	orrs	r3, r2
 800e1b2:	617b      	str	r3, [r7, #20]
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e1ba:	613b      	str	r3, [r7, #16]
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	011b      	lsls	r3, r3, #4
 800e1c0:	693a      	ldr	r2, [r7, #16]
 800e1c2:	4313      	orrs	r3, r2
 800e1c4:	613b      	str	r3, [r7, #16]
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	697a      	ldr	r2, [r7, #20]
 800e1ca:	619a      	str	r2, [r3, #24]
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	693a      	ldr	r2, [r7, #16]
 800e1d0:	621a      	str	r2, [r3, #32]
 800e1d2:	bf00      	nop
 800e1d4:	371c      	adds	r7, #28
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1dc:	4770      	bx	lr

0800e1de <TIM_ITRx_SetConfig>:
 800e1de:	b480      	push	{r7}
 800e1e0:	b085      	sub	sp, #20
 800e1e2:	af00      	add	r7, sp, #0
 800e1e4:	6078      	str	r0, [r7, #4]
 800e1e6:	6039      	str	r1, [r7, #0]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	689b      	ldr	r3, [r3, #8]
 800e1ec:	60fb      	str	r3, [r7, #12]
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1f4:	60fb      	str	r3, [r7, #12]
 800e1f6:	683a      	ldr	r2, [r7, #0]
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	4313      	orrs	r3, r2
 800e1fc:	f043 0307 	orr.w	r3, r3, #7
 800e200:	60fb      	str	r3, [r7, #12]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	68fa      	ldr	r2, [r7, #12]
 800e206:	609a      	str	r2, [r3, #8]
 800e208:	bf00      	nop
 800e20a:	3714      	adds	r7, #20
 800e20c:	46bd      	mov	sp, r7
 800e20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e212:	4770      	bx	lr

0800e214 <TIM_ETR_SetConfig>:
 800e214:	b480      	push	{r7}
 800e216:	b087      	sub	sp, #28
 800e218:	af00      	add	r7, sp, #0
 800e21a:	60f8      	str	r0, [r7, #12]
 800e21c:	60b9      	str	r1, [r7, #8]
 800e21e:	607a      	str	r2, [r7, #4]
 800e220:	603b      	str	r3, [r7, #0]
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	689b      	ldr	r3, [r3, #8]
 800e226:	617b      	str	r3, [r7, #20]
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e22e:	617b      	str	r3, [r7, #20]
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	021a      	lsls	r2, r3, #8
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	431a      	orrs	r2, r3
 800e238:	68bb      	ldr	r3, [r7, #8]
 800e23a:	4313      	orrs	r3, r2
 800e23c:	697a      	ldr	r2, [r7, #20]
 800e23e:	4313      	orrs	r3, r2
 800e240:	617b      	str	r3, [r7, #20]
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	697a      	ldr	r2, [r7, #20]
 800e246:	609a      	str	r2, [r3, #8]
 800e248:	bf00      	nop
 800e24a:	371c      	adds	r7, #28
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr

0800e254 <HAL_TIMEx_MasterConfigSynchronization>:
 800e254:	b480      	push	{r7}
 800e256:	b085      	sub	sp, #20
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e264:	2b01      	cmp	r3, #1
 800e266:	d101      	bne.n	800e26c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e268:	2302      	movs	r3, #2
 800e26a:	e05a      	b.n	800e322 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2201      	movs	r2, #1
 800e270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2202      	movs	r2, #2
 800e278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	685b      	ldr	r3, [r3, #4]
 800e282:	60fb      	str	r3, [r7, #12]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	689b      	ldr	r3, [r3, #8]
 800e28a:	60bb      	str	r3, [r7, #8]
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e292:	60fb      	str	r3, [r7, #12]
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	68fa      	ldr	r2, [r7, #12]
 800e29a:	4313      	orrs	r3, r2
 800e29c:	60fb      	str	r3, [r7, #12]
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	68fa      	ldr	r2, [r7, #12]
 800e2a4:	605a      	str	r2, [r3, #4]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	4a21      	ldr	r2, [pc, #132]	; (800e330 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d022      	beq.n	800e2f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2b8:	d01d      	beq.n	800e2f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	4a1d      	ldr	r2, [pc, #116]	; (800e334 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d018      	beq.n	800e2f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	4a1b      	ldr	r2, [pc, #108]	; (800e338 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e2ca:	4293      	cmp	r3, r2
 800e2cc:	d013      	beq.n	800e2f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	4a1a      	ldr	r2, [pc, #104]	; (800e33c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e2d4:	4293      	cmp	r3, r2
 800e2d6:	d00e      	beq.n	800e2f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	4a18      	ldr	r2, [pc, #96]	; (800e340 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	d009      	beq.n	800e2f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	4a17      	ldr	r2, [pc, #92]	; (800e344 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d004      	beq.n	800e2f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	4a15      	ldr	r2, [pc, #84]	; (800e348 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e2f2:	4293      	cmp	r3, r2
 800e2f4:	d10c      	bne.n	800e310 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e2fc:	60bb      	str	r3, [r7, #8]
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	685b      	ldr	r3, [r3, #4]
 800e302:	68ba      	ldr	r2, [r7, #8]
 800e304:	4313      	orrs	r3, r2
 800e306:	60bb      	str	r3, [r7, #8]
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	68ba      	ldr	r2, [r7, #8]
 800e30e:	609a      	str	r2, [r3, #8]
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	2201      	movs	r2, #1
 800e314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2200      	movs	r2, #0
 800e31c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e320:	2300      	movs	r3, #0
 800e322:	4618      	mov	r0, r3
 800e324:	3714      	adds	r7, #20
 800e326:	46bd      	mov	sp, r7
 800e328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e32c:	4770      	bx	lr
 800e32e:	bf00      	nop
 800e330:	40010000 	.word	0x40010000
 800e334:	40000400 	.word	0x40000400
 800e338:	40000800 	.word	0x40000800
 800e33c:	40000c00 	.word	0x40000c00
 800e340:	40010400 	.word	0x40010400
 800e344:	40014000 	.word	0x40014000
 800e348:	40001800 	.word	0x40001800

0800e34c <HAL_TIMEx_CommutCallback>:
 800e34c:	b480      	push	{r7}
 800e34e:	b083      	sub	sp, #12
 800e350:	af00      	add	r7, sp, #0
 800e352:	6078      	str	r0, [r7, #4]
 800e354:	bf00      	nop
 800e356:	370c      	adds	r7, #12
 800e358:	46bd      	mov	sp, r7
 800e35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35e:	4770      	bx	lr

0800e360 <HAL_TIMEx_BreakCallback>:
 800e360:	b480      	push	{r7}
 800e362:	b083      	sub	sp, #12
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	bf00      	nop
 800e36a:	370c      	adds	r7, #12
 800e36c:	46bd      	mov	sp, r7
 800e36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e372:	4770      	bx	lr

0800e374 <HAL_UART_Init>:
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d101      	bne.n	800e386 <HAL_UART_Init+0x12>
 800e382:	2301      	movs	r3, #1
 800e384:	e03f      	b.n	800e406 <HAL_UART_Init+0x92>
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d106      	bne.n	800e3a0 <HAL_UART_Init+0x2c>
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2200      	movs	r2, #0
 800e396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f7fc f8de 	bl	800a55c <HAL_UART_MspInit>
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2224      	movs	r2, #36	; 0x24
 800e3a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	68da      	ldr	r2, [r3, #12]
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e3b6:	60da      	str	r2, [r3, #12]
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	f000 f829 	bl	800e410 <UART_SetConfig>
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	691a      	ldr	r2, [r3, #16]
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e3cc:	611a      	str	r2, [r3, #16]
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	695a      	ldr	r2, [r3, #20]
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e3dc:	615a      	str	r2, [r3, #20]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	68da      	ldr	r2, [r3, #12]
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e3ec:	60da      	str	r2, [r3, #12]
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	2200      	movs	r2, #0
 800e3f2:	641a      	str	r2, [r3, #64]	; 0x40
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2220      	movs	r2, #32
 800e3f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2220      	movs	r2, #32
 800e400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e404:	2300      	movs	r3, #0
 800e406:	4618      	mov	r0, r3
 800e408:	3708      	adds	r7, #8
 800e40a:	46bd      	mov	sp, r7
 800e40c:	bd80      	pop	{r7, pc}
	...

0800e410 <UART_SetConfig>:
 800e410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e414:	b0c0      	sub	sp, #256	; 0x100
 800e416:	af00      	add	r7, sp, #0
 800e418:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 800e41c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	691b      	ldr	r3, [r3, #16]
 800e424:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e42c:	68d9      	ldr	r1, [r3, #12]
 800e42e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e432:	681a      	ldr	r2, [r3, #0]
 800e434:	ea40 0301 	orr.w	r3, r0, r1
 800e438:	6113      	str	r3, [r2, #16]
 800e43a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e43e:	689a      	ldr	r2, [r3, #8]
 800e440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e444:	691b      	ldr	r3, [r3, #16]
 800e446:	431a      	orrs	r2, r3
 800e448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e44c:	695b      	ldr	r3, [r3, #20]
 800e44e:	431a      	orrs	r2, r3
 800e450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e454:	69db      	ldr	r3, [r3, #28]
 800e456:	4313      	orrs	r3, r2
 800e458:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800e45c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	68db      	ldr	r3, [r3, #12]
 800e464:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e468:	f021 010c 	bic.w	r1, r1, #12
 800e46c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e470:	681a      	ldr	r2, [r3, #0]
 800e472:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e476:	430b      	orrs	r3, r1
 800e478:	60d3      	str	r3, [r2, #12]
 800e47a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	695b      	ldr	r3, [r3, #20]
 800e482:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e48a:	6999      	ldr	r1, [r3, #24]
 800e48c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e490:	681a      	ldr	r2, [r3, #0]
 800e492:	ea40 0301 	orr.w	r3, r0, r1
 800e496:	6153      	str	r3, [r2, #20]
 800e498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e49c:	681a      	ldr	r2, [r3, #0]
 800e49e:	4b8f      	ldr	r3, [pc, #572]	; (800e6dc <UART_SetConfig+0x2cc>)
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d005      	beq.n	800e4b0 <UART_SetConfig+0xa0>
 800e4a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e4a8:	681a      	ldr	r2, [r3, #0]
 800e4aa:	4b8d      	ldr	r3, [pc, #564]	; (800e6e0 <UART_SetConfig+0x2d0>)
 800e4ac:	429a      	cmp	r2, r3
 800e4ae:	d104      	bne.n	800e4ba <UART_SetConfig+0xaa>
 800e4b0:	f7fe fe1e 	bl	800d0f0 <HAL_RCC_GetPCLK2Freq>
 800e4b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800e4b8:	e003      	b.n	800e4c2 <UART_SetConfig+0xb2>
 800e4ba:	f7fe fe05 	bl	800d0c8 <HAL_RCC_GetPCLK1Freq>
 800e4be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800e4c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e4c6:	69db      	ldr	r3, [r3, #28]
 800e4c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e4cc:	f040 810c 	bne.w	800e6e8 <UART_SetConfig+0x2d8>
 800e4d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e4da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800e4de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800e4e2:	4622      	mov	r2, r4
 800e4e4:	462b      	mov	r3, r5
 800e4e6:	1891      	adds	r1, r2, r2
 800e4e8:	65b9      	str	r1, [r7, #88]	; 0x58
 800e4ea:	415b      	adcs	r3, r3
 800e4ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e4ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e4f2:	4621      	mov	r1, r4
 800e4f4:	eb12 0801 	adds.w	r8, r2, r1
 800e4f8:	4629      	mov	r1, r5
 800e4fa:	eb43 0901 	adc.w	r9, r3, r1
 800e4fe:	f04f 0200 	mov.w	r2, #0
 800e502:	f04f 0300 	mov.w	r3, #0
 800e506:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e50a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e50e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e512:	4690      	mov	r8, r2
 800e514:	4699      	mov	r9, r3
 800e516:	4623      	mov	r3, r4
 800e518:	eb18 0303 	adds.w	r3, r8, r3
 800e51c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e520:	462b      	mov	r3, r5
 800e522:	eb49 0303 	adc.w	r3, r9, r3
 800e526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e52a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e52e:	685b      	ldr	r3, [r3, #4]
 800e530:	2200      	movs	r2, #0
 800e532:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e536:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800e53a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e53e:	460b      	mov	r3, r1
 800e540:	18db      	adds	r3, r3, r3
 800e542:	653b      	str	r3, [r7, #80]	; 0x50
 800e544:	4613      	mov	r3, r2
 800e546:	eb42 0303 	adc.w	r3, r2, r3
 800e54a:	657b      	str	r3, [r7, #84]	; 0x54
 800e54c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e550:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800e554:	f7f2 fb48 	bl	8000be8 <__aeabi_uldivmod>
 800e558:	4602      	mov	r2, r0
 800e55a:	460b      	mov	r3, r1
 800e55c:	4b61      	ldr	r3, [pc, #388]	; (800e6e4 <UART_SetConfig+0x2d4>)
 800e55e:	fba3 2302 	umull	r2, r3, r3, r2
 800e562:	095b      	lsrs	r3, r3, #5
 800e564:	011c      	lsls	r4, r3, #4
 800e566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e56a:	2200      	movs	r2, #0
 800e56c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e570:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800e574:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800e578:	4642      	mov	r2, r8
 800e57a:	464b      	mov	r3, r9
 800e57c:	1891      	adds	r1, r2, r2
 800e57e:	64b9      	str	r1, [r7, #72]	; 0x48
 800e580:	415b      	adcs	r3, r3
 800e582:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e584:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e588:	4641      	mov	r1, r8
 800e58a:	eb12 0a01 	adds.w	sl, r2, r1
 800e58e:	4649      	mov	r1, r9
 800e590:	eb43 0b01 	adc.w	fp, r3, r1
 800e594:	f04f 0200 	mov.w	r2, #0
 800e598:	f04f 0300 	mov.w	r3, #0
 800e59c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e5a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e5a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e5a8:	4692      	mov	sl, r2
 800e5aa:	469b      	mov	fp, r3
 800e5ac:	4643      	mov	r3, r8
 800e5ae:	eb1a 0303 	adds.w	r3, sl, r3
 800e5b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e5b6:	464b      	mov	r3, r9
 800e5b8:	eb4b 0303 	adc.w	r3, fp, r3
 800e5bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e5c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e5cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800e5d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e5d4:	460b      	mov	r3, r1
 800e5d6:	18db      	adds	r3, r3, r3
 800e5d8:	643b      	str	r3, [r7, #64]	; 0x40
 800e5da:	4613      	mov	r3, r2
 800e5dc:	eb42 0303 	adc.w	r3, r2, r3
 800e5e0:	647b      	str	r3, [r7, #68]	; 0x44
 800e5e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e5e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e5ea:	f7f2 fafd 	bl	8000be8 <__aeabi_uldivmod>
 800e5ee:	4602      	mov	r2, r0
 800e5f0:	460b      	mov	r3, r1
 800e5f2:	4611      	mov	r1, r2
 800e5f4:	4b3b      	ldr	r3, [pc, #236]	; (800e6e4 <UART_SetConfig+0x2d4>)
 800e5f6:	fba3 2301 	umull	r2, r3, r3, r1
 800e5fa:	095b      	lsrs	r3, r3, #5
 800e5fc:	2264      	movs	r2, #100	; 0x64
 800e5fe:	fb02 f303 	mul.w	r3, r2, r3
 800e602:	1acb      	subs	r3, r1, r3
 800e604:	00db      	lsls	r3, r3, #3
 800e606:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800e60a:	4b36      	ldr	r3, [pc, #216]	; (800e6e4 <UART_SetConfig+0x2d4>)
 800e60c:	fba3 2302 	umull	r2, r3, r3, r2
 800e610:	095b      	lsrs	r3, r3, #5
 800e612:	005b      	lsls	r3, r3, #1
 800e614:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e618:	441c      	add	r4, r3
 800e61a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e61e:	2200      	movs	r2, #0
 800e620:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e624:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800e628:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800e62c:	4642      	mov	r2, r8
 800e62e:	464b      	mov	r3, r9
 800e630:	1891      	adds	r1, r2, r2
 800e632:	63b9      	str	r1, [r7, #56]	; 0x38
 800e634:	415b      	adcs	r3, r3
 800e636:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e638:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e63c:	4641      	mov	r1, r8
 800e63e:	1851      	adds	r1, r2, r1
 800e640:	6339      	str	r1, [r7, #48]	; 0x30
 800e642:	4649      	mov	r1, r9
 800e644:	414b      	adcs	r3, r1
 800e646:	637b      	str	r3, [r7, #52]	; 0x34
 800e648:	f04f 0200 	mov.w	r2, #0
 800e64c:	f04f 0300 	mov.w	r3, #0
 800e650:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800e654:	4659      	mov	r1, fp
 800e656:	00cb      	lsls	r3, r1, #3
 800e658:	4651      	mov	r1, sl
 800e65a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e65e:	4651      	mov	r1, sl
 800e660:	00ca      	lsls	r2, r1, #3
 800e662:	4610      	mov	r0, r2
 800e664:	4619      	mov	r1, r3
 800e666:	4603      	mov	r3, r0
 800e668:	4642      	mov	r2, r8
 800e66a:	189b      	adds	r3, r3, r2
 800e66c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e670:	464b      	mov	r3, r9
 800e672:	460a      	mov	r2, r1
 800e674:	eb42 0303 	adc.w	r3, r2, r3
 800e678:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e67c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e680:	685b      	ldr	r3, [r3, #4]
 800e682:	2200      	movs	r2, #0
 800e684:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e688:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800e68c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e690:	460b      	mov	r3, r1
 800e692:	18db      	adds	r3, r3, r3
 800e694:	62bb      	str	r3, [r7, #40]	; 0x28
 800e696:	4613      	mov	r3, r2
 800e698:	eb42 0303 	adc.w	r3, r2, r3
 800e69c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e69e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e6a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800e6a6:	f7f2 fa9f 	bl	8000be8 <__aeabi_uldivmod>
 800e6aa:	4602      	mov	r2, r0
 800e6ac:	460b      	mov	r3, r1
 800e6ae:	4b0d      	ldr	r3, [pc, #52]	; (800e6e4 <UART_SetConfig+0x2d4>)
 800e6b0:	fba3 1302 	umull	r1, r3, r3, r2
 800e6b4:	095b      	lsrs	r3, r3, #5
 800e6b6:	2164      	movs	r1, #100	; 0x64
 800e6b8:	fb01 f303 	mul.w	r3, r1, r3
 800e6bc:	1ad3      	subs	r3, r2, r3
 800e6be:	00db      	lsls	r3, r3, #3
 800e6c0:	3332      	adds	r3, #50	; 0x32
 800e6c2:	4a08      	ldr	r2, [pc, #32]	; (800e6e4 <UART_SetConfig+0x2d4>)
 800e6c4:	fba2 2303 	umull	r2, r3, r2, r3
 800e6c8:	095b      	lsrs	r3, r3, #5
 800e6ca:	f003 0207 	and.w	r2, r3, #7
 800e6ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	4422      	add	r2, r4
 800e6d6:	609a      	str	r2, [r3, #8]
 800e6d8:	e105      	b.n	800e8e6 <UART_SetConfig+0x4d6>
 800e6da:	bf00      	nop
 800e6dc:	40011000 	.word	0x40011000
 800e6e0:	40011400 	.word	0x40011400
 800e6e4:	51eb851f 	.word	0x51eb851f
 800e6e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e6ec:	2200      	movs	r2, #0
 800e6ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e6f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e6f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800e6fa:	4642      	mov	r2, r8
 800e6fc:	464b      	mov	r3, r9
 800e6fe:	1891      	adds	r1, r2, r2
 800e700:	6239      	str	r1, [r7, #32]
 800e702:	415b      	adcs	r3, r3
 800e704:	627b      	str	r3, [r7, #36]	; 0x24
 800e706:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e70a:	4641      	mov	r1, r8
 800e70c:	1854      	adds	r4, r2, r1
 800e70e:	4649      	mov	r1, r9
 800e710:	eb43 0501 	adc.w	r5, r3, r1
 800e714:	f04f 0200 	mov.w	r2, #0
 800e718:	f04f 0300 	mov.w	r3, #0
 800e71c:	00eb      	lsls	r3, r5, #3
 800e71e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e722:	00e2      	lsls	r2, r4, #3
 800e724:	4614      	mov	r4, r2
 800e726:	461d      	mov	r5, r3
 800e728:	4643      	mov	r3, r8
 800e72a:	18e3      	adds	r3, r4, r3
 800e72c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e730:	464b      	mov	r3, r9
 800e732:	eb45 0303 	adc.w	r3, r5, r3
 800e736:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e73a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e73e:	685b      	ldr	r3, [r3, #4]
 800e740:	2200      	movs	r2, #0
 800e742:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e746:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e74a:	f04f 0200 	mov.w	r2, #0
 800e74e:	f04f 0300 	mov.w	r3, #0
 800e752:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800e756:	4629      	mov	r1, r5
 800e758:	008b      	lsls	r3, r1, #2
 800e75a:	4621      	mov	r1, r4
 800e75c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e760:	4621      	mov	r1, r4
 800e762:	008a      	lsls	r2, r1, #2
 800e764:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e768:	f7f2 fa3e 	bl	8000be8 <__aeabi_uldivmod>
 800e76c:	4602      	mov	r2, r0
 800e76e:	460b      	mov	r3, r1
 800e770:	4b60      	ldr	r3, [pc, #384]	; (800e8f4 <UART_SetConfig+0x4e4>)
 800e772:	fba3 2302 	umull	r2, r3, r3, r2
 800e776:	095b      	lsrs	r3, r3, #5
 800e778:	011c      	lsls	r4, r3, #4
 800e77a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e77e:	2200      	movs	r2, #0
 800e780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e784:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e788:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800e78c:	4642      	mov	r2, r8
 800e78e:	464b      	mov	r3, r9
 800e790:	1891      	adds	r1, r2, r2
 800e792:	61b9      	str	r1, [r7, #24]
 800e794:	415b      	adcs	r3, r3
 800e796:	61fb      	str	r3, [r7, #28]
 800e798:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e79c:	4641      	mov	r1, r8
 800e79e:	1851      	adds	r1, r2, r1
 800e7a0:	6139      	str	r1, [r7, #16]
 800e7a2:	4649      	mov	r1, r9
 800e7a4:	414b      	adcs	r3, r1
 800e7a6:	617b      	str	r3, [r7, #20]
 800e7a8:	f04f 0200 	mov.w	r2, #0
 800e7ac:	f04f 0300 	mov.w	r3, #0
 800e7b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e7b4:	4659      	mov	r1, fp
 800e7b6:	00cb      	lsls	r3, r1, #3
 800e7b8:	4651      	mov	r1, sl
 800e7ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e7be:	4651      	mov	r1, sl
 800e7c0:	00ca      	lsls	r2, r1, #3
 800e7c2:	4610      	mov	r0, r2
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	4603      	mov	r3, r0
 800e7c8:	4642      	mov	r2, r8
 800e7ca:	189b      	adds	r3, r3, r2
 800e7cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e7d0:	464b      	mov	r3, r9
 800e7d2:	460a      	mov	r2, r1
 800e7d4:	eb42 0303 	adc.w	r3, r2, r3
 800e7d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e7dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e7e0:	685b      	ldr	r3, [r3, #4]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	67bb      	str	r3, [r7, #120]	; 0x78
 800e7e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e7e8:	f04f 0200 	mov.w	r2, #0
 800e7ec:	f04f 0300 	mov.w	r3, #0
 800e7f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800e7f4:	4649      	mov	r1, r9
 800e7f6:	008b      	lsls	r3, r1, #2
 800e7f8:	4641      	mov	r1, r8
 800e7fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e7fe:	4641      	mov	r1, r8
 800e800:	008a      	lsls	r2, r1, #2
 800e802:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800e806:	f7f2 f9ef 	bl	8000be8 <__aeabi_uldivmod>
 800e80a:	4602      	mov	r2, r0
 800e80c:	460b      	mov	r3, r1
 800e80e:	4b39      	ldr	r3, [pc, #228]	; (800e8f4 <UART_SetConfig+0x4e4>)
 800e810:	fba3 1302 	umull	r1, r3, r3, r2
 800e814:	095b      	lsrs	r3, r3, #5
 800e816:	2164      	movs	r1, #100	; 0x64
 800e818:	fb01 f303 	mul.w	r3, r1, r3
 800e81c:	1ad3      	subs	r3, r2, r3
 800e81e:	011b      	lsls	r3, r3, #4
 800e820:	3332      	adds	r3, #50	; 0x32
 800e822:	4a34      	ldr	r2, [pc, #208]	; (800e8f4 <UART_SetConfig+0x4e4>)
 800e824:	fba2 2303 	umull	r2, r3, r2, r3
 800e828:	095b      	lsrs	r3, r3, #5
 800e82a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e82e:	441c      	add	r4, r3
 800e830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e834:	2200      	movs	r2, #0
 800e836:	673b      	str	r3, [r7, #112]	; 0x70
 800e838:	677a      	str	r2, [r7, #116]	; 0x74
 800e83a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800e83e:	4642      	mov	r2, r8
 800e840:	464b      	mov	r3, r9
 800e842:	1891      	adds	r1, r2, r2
 800e844:	60b9      	str	r1, [r7, #8]
 800e846:	415b      	adcs	r3, r3
 800e848:	60fb      	str	r3, [r7, #12]
 800e84a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e84e:	4641      	mov	r1, r8
 800e850:	1851      	adds	r1, r2, r1
 800e852:	6039      	str	r1, [r7, #0]
 800e854:	4649      	mov	r1, r9
 800e856:	414b      	adcs	r3, r1
 800e858:	607b      	str	r3, [r7, #4]
 800e85a:	f04f 0200 	mov.w	r2, #0
 800e85e:	f04f 0300 	mov.w	r3, #0
 800e862:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e866:	4659      	mov	r1, fp
 800e868:	00cb      	lsls	r3, r1, #3
 800e86a:	4651      	mov	r1, sl
 800e86c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e870:	4651      	mov	r1, sl
 800e872:	00ca      	lsls	r2, r1, #3
 800e874:	4610      	mov	r0, r2
 800e876:	4619      	mov	r1, r3
 800e878:	4603      	mov	r3, r0
 800e87a:	4642      	mov	r2, r8
 800e87c:	189b      	adds	r3, r3, r2
 800e87e:	66bb      	str	r3, [r7, #104]	; 0x68
 800e880:	464b      	mov	r3, r9
 800e882:	460a      	mov	r2, r1
 800e884:	eb42 0303 	adc.w	r3, r2, r3
 800e888:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e88a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e88e:	685b      	ldr	r3, [r3, #4]
 800e890:	2200      	movs	r2, #0
 800e892:	663b      	str	r3, [r7, #96]	; 0x60
 800e894:	667a      	str	r2, [r7, #100]	; 0x64
 800e896:	f04f 0200 	mov.w	r2, #0
 800e89a:	f04f 0300 	mov.w	r3, #0
 800e89e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800e8a2:	4649      	mov	r1, r9
 800e8a4:	008b      	lsls	r3, r1, #2
 800e8a6:	4641      	mov	r1, r8
 800e8a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e8ac:	4641      	mov	r1, r8
 800e8ae:	008a      	lsls	r2, r1, #2
 800e8b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e8b4:	f7f2 f998 	bl	8000be8 <__aeabi_uldivmod>
 800e8b8:	4602      	mov	r2, r0
 800e8ba:	460b      	mov	r3, r1
 800e8bc:	4b0d      	ldr	r3, [pc, #52]	; (800e8f4 <UART_SetConfig+0x4e4>)
 800e8be:	fba3 1302 	umull	r1, r3, r3, r2
 800e8c2:	095b      	lsrs	r3, r3, #5
 800e8c4:	2164      	movs	r1, #100	; 0x64
 800e8c6:	fb01 f303 	mul.w	r3, r1, r3
 800e8ca:	1ad3      	subs	r3, r2, r3
 800e8cc:	011b      	lsls	r3, r3, #4
 800e8ce:	3332      	adds	r3, #50	; 0x32
 800e8d0:	4a08      	ldr	r2, [pc, #32]	; (800e8f4 <UART_SetConfig+0x4e4>)
 800e8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e8d6:	095b      	lsrs	r3, r3, #5
 800e8d8:	f003 020f 	and.w	r2, r3, #15
 800e8dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	4422      	add	r2, r4
 800e8e4:	609a      	str	r2, [r3, #8]
 800e8e6:	bf00      	nop
 800e8e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e8f2:	bf00      	nop
 800e8f4:	51eb851f 	.word	0x51eb851f

0800e8f8 <_ZN23GPIOExtiCallbackHandler6notifyEt>:
	void notify(uint16_t pin) {
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	460b      	mov	r3, r1
 800e902:	807b      	strh	r3, [r7, #2]
		for (unsigned int i = 0; i < m_size; i++) {
 800e904:	2300      	movs	r3, #0
 800e906:	60fb      	str	r3, [r7, #12]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800e90e:	68fa      	ldr	r2, [r7, #12]
 800e910:	429a      	cmp	r2, r3
 800e912:	d20c      	bcs.n	800e92e <_ZN23GPIOExtiCallbackHandler6notifyEt+0x36>
			m_listeners[i](pin);
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	011b      	lsls	r3, r3, #4
 800e918:	687a      	ldr	r2, [r7, #4]
 800e91a:	4413      	add	r3, r2
 800e91c:	887a      	ldrh	r2, [r7, #2]
 800e91e:	4611      	mov	r1, r2
 800e920:	4618      	mov	r0, r3
 800e922:	f000 f819 	bl	800e958 <_ZNKSt8functionIFvtEEclEt>
		for (unsigned int i = 0; i < m_size; i++) {
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	3301      	adds	r3, #1
 800e92a:	60fb      	str	r3, [r7, #12]
 800e92c:	e7ec      	b.n	800e908 <_ZN23GPIOExtiCallbackHandler6notifyEt+0x10>
	}
 800e92e:	bf00      	nop
 800e930:	3710      	adds	r7, #16
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}

0800e936 <HAL_GPIO_EXTI_Callback>:
#include "GPIOExtiCallbackHandler.hpp"




void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 800e936:	b580      	push	{r7, lr}
 800e938:	b082      	sub	sp, #8
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	4603      	mov	r3, r0
 800e93e:	80fb      	strh	r3, [r7, #6]
	GPIOExtiCallbackHandler::getInstance().notify(pin);
 800e940:	f7f9 fd20 	bl	8008384 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>
 800e944:	4602      	mov	r2, r0
 800e946:	88fb      	ldrh	r3, [r7, #6]
 800e948:	4619      	mov	r1, r3
 800e94a:	4610      	mov	r0, r2
 800e94c:	f7ff ffd4 	bl	800e8f8 <_ZN23GPIOExtiCallbackHandler6notifyEt>
}
 800e950:	bf00      	nop
 800e952:	3708      	adds	r7, #8
 800e954:	46bd      	mov	sp, r7
 800e956:	bd80      	pop	{r7, pc}

0800e958 <_ZNKSt8functionIFvtEEclEt>:
    function<_Res(_ArgTypes...)>::
 800e958:	b5b0      	push	{r4, r5, r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	460b      	mov	r3, r1
 800e962:	807b      	strh	r3, [r7, #2]
      if (_M_empty())
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	4618      	mov	r0, r3
 800e968:	f7f2 fd33 	bl	80013d2 <_ZNKSt14_Function_base8_M_emptyEv>
 800e96c:	4603      	mov	r3, r0
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d001      	beq.n	800e976 <_ZNKSt8functionIFvtEEclEt+0x1e>
	__throw_bad_function_call();
 800e972:	f005 fdc6 	bl	8014502 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	68dc      	ldr	r4, [r3, #12]
 800e97a:	687d      	ldr	r5, [r7, #4]
 800e97c:	1cbb      	adds	r3, r7, #2
 800e97e:	4618      	mov	r0, r3
 800e980:	f7f9 fdba 	bl	80084f8 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 800e984:	4603      	mov	r3, r0
 800e986:	4619      	mov	r1, r3
 800e988:	4628      	mov	r0, r5
 800e98a:	47a0      	blx	r4
 800e98c:	bf00      	nop
    }
 800e98e:	3708      	adds	r7, #8
 800e990:	46bd      	mov	sp, r7
 800e992:	bdb0      	pop	{r4, r5, r7, pc}

0800e994 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef>:
	void notify(TIM_HandleTypeDef *htim) {
 800e994:	b580      	push	{r7, lr}
 800e996:	b084      	sub	sp, #16
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
 800e99c:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 800e99e:	2300      	movs	r3, #0
 800e9a0:	60fb      	str	r3, [r7, #12]
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800e9a8:	68fa      	ldr	r2, [r7, #12]
 800e9aa:	429a      	cmp	r2, r3
 800e9ac:	d20b      	bcs.n	800e9c6 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef+0x32>
			m_listeners[i](htim);
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	011b      	lsls	r3, r3, #4
 800e9b2:	687a      	ldr	r2, [r7, #4]
 800e9b4:	4413      	add	r3, r2
 800e9b6:	6839      	ldr	r1, [r7, #0]
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f000 f817 	bl	800e9ec <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	3301      	adds	r3, #1
 800e9c2:	60fb      	str	r3, [r7, #12]
 800e9c4:	e7ed      	b.n	800e9a2 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef+0xe>
	}
 800e9c6:	bf00      	nop
 800e9c8:	3710      	adds	r7, #16
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}

0800e9ce <PeriodElapsedCallback>:

#ifdef __cplusplus
extern "C" {
#endif

void PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800e9ce:	b580      	push	{r7, lr}
 800e9d0:	b082      	sub	sp, #8
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	6078      	str	r0, [r7, #4]
	TimPeriodElapsedCallbackHandler::getInstance().notify(htim);
 800e9d6:	f7f9 fd47 	bl	8008468 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	6879      	ldr	r1, [r7, #4]
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f7ff ffd8 	bl	800e994 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef>
}
 800e9e4:	bf00      	nop
 800e9e6:	3708      	adds	r7, #8
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	bd80      	pop	{r7, pc}

0800e9ec <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_>:
    function<_Res(_ArgTypes...)>::
 800e9ec:	b5b0      	push	{r4, r5, r7, lr}
 800e9ee:	b082      	sub	sp, #8
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
 800e9f4:	6039      	str	r1, [r7, #0]
      if (_M_empty())
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f7f2 fcea 	bl	80013d2 <_ZNKSt14_Function_base8_M_emptyEv>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d001      	beq.n	800ea08 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 800ea04:	f005 fd7d 	bl	8014502 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	68dc      	ldr	r4, [r3, #12]
 800ea0c:	687d      	ldr	r5, [r7, #4]
 800ea0e:	463b      	mov	r3, r7
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7f9 fd7c 	bl	800850e <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800ea16:	4603      	mov	r3, r0
 800ea18:	4619      	mov	r1, r3
 800ea1a:	4628      	mov	r0, r5
 800ea1c:	47a0      	blx	r4
 800ea1e:	bf00      	nop
    }
 800ea20:	3708      	adds	r7, #8
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bdb0      	pop	{r4, r5, r7, pc}

0800ea26 <_ZL9_out_nullcPvjj>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 800ea26:	b480      	push	{r7}
 800ea28:	b085      	sub	sp, #20
 800ea2a:	af00      	add	r7, sp, #0
 800ea2c:	60b9      	str	r1, [r7, #8]
 800ea2e:	607a      	str	r2, [r7, #4]
 800ea30:	603b      	str	r3, [r7, #0]
 800ea32:	4603      	mov	r3, r0
 800ea34:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 800ea36:	bf00      	nop
 800ea38:	3714      	adds	r7, #20
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea40:	4770      	bx	lr

0800ea42 <_ZL9_out_charcPvjj>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 800ea42:	b580      	push	{r7, lr}
 800ea44:	b084      	sub	sp, #16
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	60b9      	str	r1, [r7, #8]
 800ea4a:	607a      	str	r2, [r7, #4]
 800ea4c:	603b      	str	r3, [r7, #0]
 800ea4e:	4603      	mov	r3, r0
 800ea50:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 800ea52:	7bfb      	ldrb	r3, [r7, #15]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d003      	beq.n	800ea60 <_ZL9_out_charcPvjj+0x1e>
    _putchar(character);
 800ea58:	7bfb      	ldrb	r3, [r7, #15]
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f001 fc6f 	bl	801033e <_putchar>
  }
}
 800ea60:	bf00      	nop
 800ea62:	3710      	adds	r7, #16
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}

0800ea68 <_ZL10_strnlen_sPKcj>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b085      	sub	sp, #20
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
 800ea70:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	60fb      	str	r3, [r7, #12]
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	781b      	ldrb	r3, [r3, #0]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d006      	beq.n	800ea8c <_ZL10_strnlen_sPKcj+0x24>
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	1e5a      	subs	r2, r3, #1
 800ea82:	603a      	str	r2, [r7, #0]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d001      	beq.n	800ea8c <_ZL10_strnlen_sPKcj+0x24>
 800ea88:	2301      	movs	r3, #1
 800ea8a:	e000      	b.n	800ea8e <_ZL10_strnlen_sPKcj+0x26>
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d003      	beq.n	800ea9a <_ZL10_strnlen_sPKcj+0x32>
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	3301      	adds	r3, #1
 800ea96:	60fb      	str	r3, [r7, #12]
 800ea98:	e7ed      	b.n	800ea76 <_ZL10_strnlen_sPKcj+0xe>
  return (unsigned int)(s - str);
 800ea9a:	68fa      	ldr	r2, [r7, #12]
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	1ad3      	subs	r3, r2, r3
}
 800eaa0:	4618      	mov	r0, r3
 800eaa2:	3714      	adds	r7, #20
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr

0800eaac <_ZL9_is_digitc>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 800eaac:	b480      	push	{r7}
 800eaae:	b083      	sub	sp, #12
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	4603      	mov	r3, r0
 800eab4:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 800eab6:	79fb      	ldrb	r3, [r7, #7]
 800eab8:	2b2f      	cmp	r3, #47	; 0x2f
 800eaba:	d904      	bls.n	800eac6 <_ZL9_is_digitc+0x1a>
 800eabc:	79fb      	ldrb	r3, [r7, #7]
 800eabe:	2b39      	cmp	r3, #57	; 0x39
 800eac0:	d801      	bhi.n	800eac6 <_ZL9_is_digitc+0x1a>
 800eac2:	2301      	movs	r3, #1
 800eac4:	e000      	b.n	800eac8 <_ZL9_is_digitc+0x1c>
 800eac6:	2300      	movs	r3, #0
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	370c      	adds	r7, #12
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr

0800ead4 <_ZL5_atoiPPKc>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b084      	sub	sp, #16
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 800eadc:	2300      	movs	r3, #0
 800eade:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7ff ffe0 	bl	800eaac <_ZL9_is_digitc>
 800eaec:	4603      	mov	r3, r0
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d00f      	beq.n	800eb12 <_ZL5_atoiPPKc+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 800eaf2:	68fa      	ldr	r2, [r7, #12]
 800eaf4:	4613      	mov	r3, r2
 800eaf6:	009b      	lsls	r3, r3, #2
 800eaf8:	4413      	add	r3, r2
 800eafa:	005b      	lsls	r3, r3, #1
 800eafc:	4618      	mov	r0, r3
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	1c59      	adds	r1, r3, #1
 800eb04:	687a      	ldr	r2, [r7, #4]
 800eb06:	6011      	str	r1, [r2, #0]
 800eb08:	781b      	ldrb	r3, [r3, #0]
 800eb0a:	4403      	add	r3, r0
 800eb0c:	3b30      	subs	r3, #48	; 0x30
 800eb0e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 800eb10:	e7e6      	b.n	800eae0 <_ZL5_atoiPPKc+0xc>
  }
  return i;
 800eb12:	68fb      	ldr	r3, [r7, #12]
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3710      	adds	r7, #16
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}

0800eb1c <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 800eb1c:	b590      	push	{r4, r7, lr}
 800eb1e:	b087      	sub	sp, #28
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	60f8      	str	r0, [r7, #12]
 800eb24:	60b9      	str	r1, [r7, #8]
 800eb26:	607a      	str	r2, [r7, #4]
 800eb28:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800eb2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb30:	f003 0302 	and.w	r3, r3, #2
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d116      	bne.n	800eb66 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
 800eb38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb3a:	f003 0301 	and.w	r3, r3, #1
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d111      	bne.n	800eb66 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
    for (size_t i = len; i < width; i++) {
 800eb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb44:	617b      	str	r3, [r7, #20]
 800eb46:	697a      	ldr	r2, [r7, #20]
 800eb48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d20b      	bcs.n	800eb66 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
      out(' ', buffer, idx++, maxlen);
 800eb4e:	687a      	ldr	r2, [r7, #4]
 800eb50:	1c53      	adds	r3, r2, #1
 800eb52:	607b      	str	r3, [r7, #4]
 800eb54:	68fc      	ldr	r4, [r7, #12]
 800eb56:	683b      	ldr	r3, [r7, #0]
 800eb58:	68b9      	ldr	r1, [r7, #8]
 800eb5a:	2020      	movs	r0, #32
 800eb5c:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800eb5e:	697b      	ldr	r3, [r7, #20]
 800eb60:	3301      	adds	r3, #1
 800eb62:	617b      	str	r3, [r7, #20]
 800eb64:	e7ef      	b.n	800eb46 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x2a>
    }
  }

  // reverse string
  while (len) {
 800eb66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d00e      	beq.n	800eb8a <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x6e>
    out(buf[--len], buffer, idx++, maxlen);
 800eb6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb6e:	3b01      	subs	r3, #1
 800eb70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800eb72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb76:	4413      	add	r3, r2
 800eb78:	7818      	ldrb	r0, [r3, #0]
 800eb7a:	687a      	ldr	r2, [r7, #4]
 800eb7c:	1c53      	adds	r3, r2, #1
 800eb7e:	607b      	str	r3, [r7, #4]
 800eb80:	68fc      	ldr	r4, [r7, #12]
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	68b9      	ldr	r1, [r7, #8]
 800eb86:	47a0      	blx	r4
  while (len) {
 800eb88:	e7ed      	b.n	800eb66 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800eb8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb8c:	f003 0302 	and.w	r3, r3, #2
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d00e      	beq.n	800ebb2 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
    while (idx - start_idx < width) {
 800eb94:	687a      	ldr	r2, [r7, #4]
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	1ad3      	subs	r3, r2, r3
 800eb9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800eb9c:	429a      	cmp	r2, r3
 800eb9e:	d908      	bls.n	800ebb2 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
      out(' ', buffer, idx++, maxlen);
 800eba0:	687a      	ldr	r2, [r7, #4]
 800eba2:	1c53      	adds	r3, r2, #1
 800eba4:	607b      	str	r3, [r7, #4]
 800eba6:	68fc      	ldr	r4, [r7, #12]
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	68b9      	ldr	r1, [r7, #8]
 800ebac:	2020      	movs	r0, #32
 800ebae:	47a0      	blx	r4
    while (idx - start_idx < width) {
 800ebb0:	e7f0      	b.n	800eb94 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x78>
    }
  }

  return idx;
 800ebb2:	687b      	ldr	r3, [r7, #4]
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	371c      	adds	r7, #28
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd90      	pop	{r4, r7, pc}

0800ebbc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b088      	sub	sp, #32
 800ebc0:	af04      	add	r7, sp, #16
 800ebc2:	60f8      	str	r0, [r7, #12]
 800ebc4:	60b9      	str	r1, [r7, #8]
 800ebc6:	607a      	str	r2, [r7, #4]
 800ebc8:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 800ebca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebcc:	f003 0302 	and.w	r3, r3, #2
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d136      	bne.n	800ec42 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800ebd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d010      	beq.n	800ebfc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 800ebda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebdc:	f003 0301 	and.w	r3, r3, #1
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d00b      	beq.n	800ebfc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 800ebe4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d104      	bne.n	800ebf6 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x3a>
 800ebec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebee:	f003 030c 	and.w	r3, r3, #12
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d002      	beq.n	800ebfc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
      width--;
 800ebf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebf8:	3b01      	subs	r3, #1
 800ebfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ebfc:	69fa      	ldr	r2, [r7, #28]
 800ebfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d20a      	bcs.n	800ec1a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
 800ec04:	69fb      	ldr	r3, [r7, #28]
 800ec06:	2b1f      	cmp	r3, #31
 800ec08:	d807      	bhi.n	800ec1a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
      buf[len++] = '0';
 800ec0a:	69fb      	ldr	r3, [r7, #28]
 800ec0c:	1c5a      	adds	r2, r3, #1
 800ec0e:	61fa      	str	r2, [r7, #28]
 800ec10:	69ba      	ldr	r2, [r7, #24]
 800ec12:	4413      	add	r3, r2
 800ec14:	2230      	movs	r2, #48	; 0x30
 800ec16:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ec18:	e7f0      	b.n	800ebfc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ec1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec1c:	f003 0301 	and.w	r3, r3, #1
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d00e      	beq.n	800ec42 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 800ec24:	69fa      	ldr	r2, [r7, #28]
 800ec26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec28:	429a      	cmp	r2, r3
 800ec2a:	d20a      	bcs.n	800ec42 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 800ec2c:	69fb      	ldr	r3, [r7, #28]
 800ec2e:	2b1f      	cmp	r3, #31
 800ec30:	d807      	bhi.n	800ec42 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
      buf[len++] = '0';
 800ec32:	69fb      	ldr	r3, [r7, #28]
 800ec34:	1c5a      	adds	r2, r3, #1
 800ec36:	61fa      	str	r2, [r7, #28]
 800ec38:	69ba      	ldr	r2, [r7, #24]
 800ec3a:	4413      	add	r3, r2
 800ec3c:	2230      	movs	r2, #48	; 0x30
 800ec3e:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ec40:	e7eb      	b.n	800ec1a <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 800ec42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec44:	f003 0310 	and.w	r3, r3, #16
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d058      	beq.n	800ecfe <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 800ec4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d116      	bne.n	800ec84 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800ec56:	69fb      	ldr	r3, [r7, #28]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d013      	beq.n	800ec84 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800ec5c:	69fa      	ldr	r2, [r7, #28]
 800ec5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec60:	429a      	cmp	r2, r3
 800ec62:	d003      	beq.n	800ec6c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xb0>
 800ec64:	69fa      	ldr	r2, [r7, #28]
 800ec66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec68:	429a      	cmp	r2, r3
 800ec6a:	d10b      	bne.n	800ec84 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
      len--;
 800ec6c:	69fb      	ldr	r3, [r7, #28]
 800ec6e:	3b01      	subs	r3, #1
 800ec70:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 800ec72:	69fb      	ldr	r3, [r7, #28]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d005      	beq.n	800ec84 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 800ec78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7a:	2b10      	cmp	r3, #16
 800ec7c:	d102      	bne.n	800ec84 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
        len--;
 800ec7e:	69fb      	ldr	r3, [r7, #28]
 800ec80:	3b01      	subs	r3, #1
 800ec82:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ec84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec86:	2b10      	cmp	r3, #16
 800ec88:	d10f      	bne.n	800ecaa <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 800ec8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8c:	f003 0320 	and.w	r3, r3, #32
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d10a      	bne.n	800ecaa <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 800ec94:	69fb      	ldr	r3, [r7, #28]
 800ec96:	2b1f      	cmp	r3, #31
 800ec98:	d807      	bhi.n	800ecaa <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
      buf[len++] = 'x';
 800ec9a:	69fb      	ldr	r3, [r7, #28]
 800ec9c:	1c5a      	adds	r2, r3, #1
 800ec9e:	61fa      	str	r2, [r7, #28]
 800eca0:	69ba      	ldr	r2, [r7, #24]
 800eca2:	4413      	add	r3, r2
 800eca4:	2278      	movs	r2, #120	; 0x78
 800eca6:	701a      	strb	r2, [r3, #0]
 800eca8:	e01f      	b.n	800ecea <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ecaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecac:	2b10      	cmp	r3, #16
 800ecae:	d10f      	bne.n	800ecd0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 800ecb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecb2:	f003 0320 	and.w	r3, r3, #32
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d00a      	beq.n	800ecd0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 800ecba:	69fb      	ldr	r3, [r7, #28]
 800ecbc:	2b1f      	cmp	r3, #31
 800ecbe:	d807      	bhi.n	800ecd0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
      buf[len++] = 'X';
 800ecc0:	69fb      	ldr	r3, [r7, #28]
 800ecc2:	1c5a      	adds	r2, r3, #1
 800ecc4:	61fa      	str	r2, [r7, #28]
 800ecc6:	69ba      	ldr	r2, [r7, #24]
 800ecc8:	4413      	add	r3, r2
 800ecca:	2258      	movs	r2, #88	; 0x58
 800eccc:	701a      	strb	r2, [r3, #0]
 800ecce:	e00c      	b.n	800ecea <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800ecd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecd2:	2b02      	cmp	r3, #2
 800ecd4:	d109      	bne.n	800ecea <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
 800ecd6:	69fb      	ldr	r3, [r7, #28]
 800ecd8:	2b1f      	cmp	r3, #31
 800ecda:	d806      	bhi.n	800ecea <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
      buf[len++] = 'b';
 800ecdc:	69fb      	ldr	r3, [r7, #28]
 800ecde:	1c5a      	adds	r2, r3, #1
 800ece0:	61fa      	str	r2, [r7, #28]
 800ece2:	69ba      	ldr	r2, [r7, #24]
 800ece4:	4413      	add	r3, r2
 800ece6:	2262      	movs	r2, #98	; 0x62
 800ece8:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800ecea:	69fb      	ldr	r3, [r7, #28]
 800ecec:	2b1f      	cmp	r3, #31
 800ecee:	d806      	bhi.n	800ecfe <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
      buf[len++] = '0';
 800ecf0:	69fb      	ldr	r3, [r7, #28]
 800ecf2:	1c5a      	adds	r2, r3, #1
 800ecf4:	61fa      	str	r2, [r7, #28]
 800ecf6:	69ba      	ldr	r2, [r7, #24]
 800ecf8:	4413      	add	r3, r2
 800ecfa:	2230      	movs	r2, #48	; 0x30
 800ecfc:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800ecfe:	69fb      	ldr	r3, [r7, #28]
 800ed00:	2b1f      	cmp	r3, #31
 800ed02:	d824      	bhi.n	800ed4e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    if (negative) {
 800ed04:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d007      	beq.n	800ed1c <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x160>
      buf[len++] = '-';
 800ed0c:	69fb      	ldr	r3, [r7, #28]
 800ed0e:	1c5a      	adds	r2, r3, #1
 800ed10:	61fa      	str	r2, [r7, #28]
 800ed12:	69ba      	ldr	r2, [r7, #24]
 800ed14:	4413      	add	r3, r2
 800ed16:	222d      	movs	r2, #45	; 0x2d
 800ed18:	701a      	strb	r2, [r3, #0]
 800ed1a:	e018      	b.n	800ed4e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 800ed1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed1e:	f003 0304 	and.w	r3, r3, #4
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d007      	beq.n	800ed36 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800ed26:	69fb      	ldr	r3, [r7, #28]
 800ed28:	1c5a      	adds	r2, r3, #1
 800ed2a:	61fa      	str	r2, [r7, #28]
 800ed2c:	69ba      	ldr	r2, [r7, #24]
 800ed2e:	4413      	add	r3, r2
 800ed30:	222b      	movs	r2, #43	; 0x2b
 800ed32:	701a      	strb	r2, [r3, #0]
 800ed34:	e00b      	b.n	800ed4e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 800ed36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed38:	f003 0308 	and.w	r3, r3, #8
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d006      	beq.n	800ed4e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
      buf[len++] = ' ';
 800ed40:	69fb      	ldr	r3, [r7, #28]
 800ed42:	1c5a      	adds	r2, r3, #1
 800ed44:	61fa      	str	r2, [r7, #28]
 800ed46:	69ba      	ldr	r2, [r7, #24]
 800ed48:	4413      	add	r3, r2
 800ed4a:	2220      	movs	r2, #32
 800ed4c:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800ed4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed50:	9303      	str	r3, [sp, #12]
 800ed52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed54:	9302      	str	r3, [sp, #8]
 800ed56:	69fb      	ldr	r3, [r7, #28]
 800ed58:	9301      	str	r3, [sp, #4]
 800ed5a:	69bb      	ldr	r3, [r7, #24]
 800ed5c:	9300      	str	r3, [sp, #0]
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	687a      	ldr	r2, [r7, #4]
 800ed62:	68b9      	ldr	r1, [r7, #8]
 800ed64:	68f8      	ldr	r0, [r7, #12]
 800ed66:	f7ff fed9 	bl	800eb1c <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800ed6a:	4603      	mov	r3, r0
}
 800ed6c:	4618      	mov	r0, r3
 800ed6e:	3710      	adds	r7, #16
 800ed70:	46bd      	mov	sp, r7
 800ed72:	bd80      	pop	{r7, pc}

0800ed74 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b096      	sub	sp, #88	; 0x58
 800ed78:	af08      	add	r7, sp, #32
 800ed7a:	60f8      	str	r0, [r7, #12]
 800ed7c:	60b9      	str	r1, [r7, #8]
 800ed7e:	607a      	str	r2, [r7, #4]
 800ed80:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800ed82:	2300      	movs	r3, #0
 800ed84:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800ed86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d103      	bne.n	800ed94 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x20>
    flags &= ~FLAGS_HASH;
 800ed8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed8e:	f023 0310 	bic.w	r3, r3, #16
 800ed92:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800ed94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ed96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d002      	beq.n	800eda4 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
 800ed9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d033      	beq.n	800ee0c <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
      const char digit = (char)(value % base);
 800eda4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eda6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800eda8:	fbb3 f2f2 	udiv	r2, r3, r2
 800edac:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800edae:	fb01 f202 	mul.w	r2, r1, r2
 800edb2:	1a9b      	subs	r3, r3, r2
 800edb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800edb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800edbc:	2b09      	cmp	r3, #9
 800edbe:	d804      	bhi.n	800edca <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x56>
 800edc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800edc4:	3330      	adds	r3, #48	; 0x30
 800edc6:	b2da      	uxtb	r2, r3
 800edc8:	e00d      	b.n	800ede6 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x72>
 800edca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800edcc:	f003 0320 	and.w	r3, r3, #32
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d001      	beq.n	800edd8 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x64>
 800edd4:	2241      	movs	r2, #65	; 0x41
 800edd6:	e000      	b.n	800edda <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x66>
 800edd8:	2261      	movs	r2, #97	; 0x61
 800edda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800edde:	4413      	add	r3, r2
 800ede0:	b2db      	uxtb	r3, r3
 800ede2:	3b0a      	subs	r3, #10
 800ede4:	b2da      	uxtb	r2, r3
 800ede6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ede8:	1c59      	adds	r1, r3, #1
 800edea:	6379      	str	r1, [r7, #52]	; 0x34
 800edec:	3338      	adds	r3, #56	; 0x38
 800edee:	443b      	add	r3, r7
 800edf0:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800edf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800edf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800edf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800edfc:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800edfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d003      	beq.n	800ee0c <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
 800ee04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee06:	2b1f      	cmp	r3, #31
 800ee08:	d800      	bhi.n	800ee0c <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
 800ee0a:	e7cb      	b.n	800eda4 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800ee0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee0e:	9306      	str	r3, [sp, #24]
 800ee10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee12:	9305      	str	r3, [sp, #20]
 800ee14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee16:	9304      	str	r3, [sp, #16]
 800ee18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee1a:	9303      	str	r3, [sp, #12]
 800ee1c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800ee20:	9302      	str	r3, [sp, #8]
 800ee22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee24:	9301      	str	r3, [sp, #4]
 800ee26:	f107 0310 	add.w	r3, r7, #16
 800ee2a:	9300      	str	r3, [sp, #0]
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	687a      	ldr	r2, [r7, #4]
 800ee30:	68b9      	ldr	r1, [r7, #8]
 800ee32:	68f8      	ldr	r0, [r7, #12]
 800ee34:	f7ff fec2 	bl	800ebbc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 800ee38:	4603      	mov	r3, r0
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3738      	adds	r7, #56	; 0x38
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}

0800ee42 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800ee42:	b580      	push	{r7, lr}
 800ee44:	b096      	sub	sp, #88	; 0x58
 800ee46:	af08      	add	r7, sp, #32
 800ee48:	60f8      	str	r0, [r7, #12]
 800ee4a:	60b9      	str	r1, [r7, #8]
 800ee4c:	607a      	str	r2, [r7, #4]
 800ee4e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 800ee50:	2300      	movs	r3, #0
 800ee52:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 800ee54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ee58:	4313      	orrs	r3, r2
 800ee5a:	d103      	bne.n	800ee64 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x22>
    flags &= ~FLAGS_HASH;
 800ee5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee5e:	f023 0310 	bic.w	r3, r3, #16
 800ee62:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800ee64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d003      	beq.n	800ee76 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
 800ee6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ee72:	4313      	orrs	r3, r2
 800ee74:	d038      	beq.n	800eee8 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
      const char digit = (char)(value % base);
 800ee76:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800ee7a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ee7e:	f7f1 feb3 	bl	8000be8 <__aeabi_uldivmod>
 800ee82:	4613      	mov	r3, r2
 800ee84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800ee88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ee8c:	2b09      	cmp	r3, #9
 800ee8e:	d804      	bhi.n	800ee9a <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x58>
 800ee90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ee94:	3330      	adds	r3, #48	; 0x30
 800ee96:	b2da      	uxtb	r2, r3
 800ee98:	e00d      	b.n	800eeb6 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x74>
 800ee9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ee9c:	f003 0320 	and.w	r3, r3, #32
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d001      	beq.n	800eea8 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x66>
 800eea4:	2241      	movs	r2, #65	; 0x41
 800eea6:	e000      	b.n	800eeaa <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x68>
 800eea8:	2261      	movs	r2, #97	; 0x61
 800eeaa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800eeae:	4413      	add	r3, r2
 800eeb0:	b2db      	uxtb	r3, r3
 800eeb2:	3b0a      	subs	r3, #10
 800eeb4:	b2da      	uxtb	r2, r3
 800eeb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eeb8:	1c59      	adds	r1, r3, #1
 800eeba:	6379      	str	r1, [r7, #52]	; 0x34
 800eebc:	3338      	adds	r3, #56	; 0x38
 800eebe:	443b      	add	r3, r7
 800eec0:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 800eec4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800eec8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800eecc:	f7f1 fe8c 	bl	8000be8 <__aeabi_uldivmod>
 800eed0:	4602      	mov	r2, r0
 800eed2:	460b      	mov	r3, r1
 800eed4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800eed8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800eedc:	4313      	orrs	r3, r2
 800eede:	d003      	beq.n	800eee8 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
 800eee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eee2:	2b1f      	cmp	r3, #31
 800eee4:	d800      	bhi.n	800eee8 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
 800eee6:	e7c6      	b.n	800ee76 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800eee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eeea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800eeec:	9206      	str	r2, [sp, #24]
 800eeee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800eef0:	9205      	str	r2, [sp, #20]
 800eef2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800eef4:	9204      	str	r2, [sp, #16]
 800eef6:	9303      	str	r3, [sp, #12]
 800eef8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800eefc:	9302      	str	r3, [sp, #8]
 800eefe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef00:	9301      	str	r3, [sp, #4]
 800ef02:	f107 0310 	add.w	r3, r7, #16
 800ef06:	9300      	str	r3, [sp, #0]
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	687a      	ldr	r2, [r7, #4]
 800ef0c:	68b9      	ldr	r1, [r7, #8]
 800ef0e:	68f8      	ldr	r0, [r7, #12]
 800ef10:	f7ff fe54 	bl	800ebbc <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 800ef14:	4603      	mov	r3, r0
}
 800ef16:	4618      	mov	r0, r3
 800ef18:	3738      	adds	r7, #56	; 0x38
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	bd80      	pop	{r7, pc}
	...

0800ef20 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800ef20:	b590      	push	{r4, r7, lr}
 800ef22:	b09d      	sub	sp, #116	; 0x74
 800ef24:	af04      	add	r7, sp, #16
 800ef26:	6178      	str	r0, [r7, #20]
 800ef28:	6139      	str	r1, [r7, #16]
 800ef2a:	60fa      	str	r2, [r7, #12]
 800ef2c:	60bb      	str	r3, [r7, #8]
 800ef2e:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 800ef32:	2300      	movs	r3, #0
 800ef34:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 800ef36:	f04f 0200 	mov.w	r2, #0
 800ef3a:	f04f 0300 	mov.w	r3, #0
 800ef3e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 800ef42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef46:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ef4a:	f7f1 fdbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d10f      	bne.n	800ef74 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 800ef54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef56:	9303      	str	r3, [sp, #12]
 800ef58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef5a:	9302      	str	r3, [sp, #8]
 800ef5c:	2303      	movs	r3, #3
 800ef5e:	9301      	str	r3, [sp, #4]
 800ef60:	4ba7      	ldr	r3, [pc, #668]	; (800f200 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e0>)
 800ef62:	9300      	str	r3, [sp, #0]
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	68fa      	ldr	r2, [r7, #12]
 800ef68:	6939      	ldr	r1, [r7, #16]
 800ef6a:	6978      	ldr	r0, [r7, #20]
 800ef6c:	f7ff fdd6 	bl	800eb1c <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800ef70:	4603      	mov	r3, r0
 800ef72:	e230      	b.n	800f3d6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value < -DBL_MAX)
 800ef74:	f04f 32ff 	mov.w	r2, #4294967295
 800ef78:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800ef7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ef80:	f7f1 fdac 	bl	8000adc <__aeabi_dcmplt>
 800ef84:	4603      	mov	r3, r0
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d00f      	beq.n	800efaa <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 800ef8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ef8c:	9303      	str	r3, [sp, #12]
 800ef8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef90:	9302      	str	r3, [sp, #8]
 800ef92:	2304      	movs	r3, #4
 800ef94:	9301      	str	r3, [sp, #4]
 800ef96:	4b9b      	ldr	r3, [pc, #620]	; (800f204 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e4>)
 800ef98:	9300      	str	r3, [sp, #0]
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	68fa      	ldr	r2, [r7, #12]
 800ef9e:	6939      	ldr	r1, [r7, #16]
 800efa0:	6978      	ldr	r0, [r7, #20]
 800efa2:	f7ff fdbb 	bl	800eb1c <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800efa6:	4603      	mov	r3, r0
 800efa8:	e215      	b.n	800f3d6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value > DBL_MAX)
 800efaa:	f04f 32ff 	mov.w	r2, #4294967295
 800efae:	4b96      	ldr	r3, [pc, #600]	; (800f208 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e8>)
 800efb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800efb4:	f7f1 fdb0 	bl	8000b18 <__aeabi_dcmpgt>
 800efb8:	4603      	mov	r3, r0
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d01d      	beq.n	800effa <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 800efbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800efc0:	f003 0304 	and.w	r3, r3, #4
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d001      	beq.n	800efcc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xac>
 800efc8:	4b90      	ldr	r3, [pc, #576]	; (800f20c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ec>)
 800efca:	e000      	b.n	800efce <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xae>
 800efcc:	4b90      	ldr	r3, [pc, #576]	; (800f210 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f0>)
 800efce:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800efd0:	f002 0204 	and.w	r2, r2, #4
 800efd4:	2a00      	cmp	r2, #0
 800efd6:	d001      	beq.n	800efdc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbc>
 800efd8:	2204      	movs	r2, #4
 800efda:	e000      	b.n	800efde <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbe>
 800efdc:	2203      	movs	r2, #3
 800efde:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800efe0:	9103      	str	r1, [sp, #12]
 800efe2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800efe4:	9102      	str	r1, [sp, #8]
 800efe6:	9201      	str	r2, [sp, #4]
 800efe8:	9300      	str	r3, [sp, #0]
 800efea:	68bb      	ldr	r3, [r7, #8]
 800efec:	68fa      	ldr	r2, [r7, #12]
 800efee:	6939      	ldr	r1, [r7, #16]
 800eff0:	6978      	ldr	r0, [r7, #20]
 800eff2:	f7ff fd93 	bl	800eb1c <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800eff6:	4603      	mov	r3, r0
 800eff8:	e1ed      	b.n	800f3d6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 800effa:	a37d      	add	r3, pc, #500	; (adr r3, 800f1f0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d0>)
 800effc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f000:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f004:	f7f1 fd88 	bl	8000b18 <__aeabi_dcmpgt>
 800f008:	4603      	mov	r3, r0
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d109      	bne.n	800f022 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x102>
 800f00e:	a37a      	add	r3, pc, #488	; (adr r3, 800f1f8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d8>)
 800f010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f014:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f018:	f7f1 fd60 	bl	8000adc <__aeabi_dcmplt>
 800f01c:	4603      	mov	r3, r0
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d00f      	beq.n	800f042 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800f022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f024:	9302      	str	r3, [sp, #8]
 800f026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f028:	9301      	str	r3, [sp, #4]
 800f02a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f02c:	9300      	str	r3, [sp, #0]
 800f02e:	ed97 0b00 	vldr	d0, [r7]
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	68fa      	ldr	r2, [r7, #12]
 800f036:	6939      	ldr	r1, [r7, #16]
 800f038:	6978      	ldr	r0, [r7, #20]
 800f03a:	f000 f9d5 	bl	800f3e8 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 800f03e:	4603      	mov	r3, r0
 800f040:	e1c9      	b.n	800f3d6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800f042:	2300      	movs	r3, #0
 800f044:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800f048:	f04f 0200 	mov.w	r2, #0
 800f04c:	f04f 0300 	mov.w	r3, #0
 800f050:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f054:	f7f1 fd42 	bl	8000adc <__aeabi_dcmplt>
 800f058:	4603      	mov	r3, r0
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d00e      	beq.n	800f07c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x15c>
    negative = true;
 800f05e:	2301      	movs	r3, #1
 800f060:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800f064:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f068:	f04f 0000 	mov.w	r0, #0
 800f06c:	f04f 0100 	mov.w	r1, #0
 800f070:	f7f1 f90a 	bl	8000288 <__aeabi_dsub>
 800f074:	4602      	mov	r2, r0
 800f076:	460b      	mov	r3, r1
 800f078:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800f07c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f07e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f082:	2b00      	cmp	r3, #0
 800f084:	d101      	bne.n	800f08a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800f086:	2306      	movs	r3, #6
 800f088:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800f08a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f08c:	2b1f      	cmp	r3, #31
 800f08e:	d80e      	bhi.n	800f0ae <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
 800f090:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f092:	2b09      	cmp	r3, #9
 800f094:	d90b      	bls.n	800f0ae <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
    buf[len++] = '0';
 800f096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f098:	1c5a      	adds	r2, r3, #1
 800f09a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800f09c:	3360      	adds	r3, #96	; 0x60
 800f09e:	443b      	add	r3, r7
 800f0a0:	2230      	movs	r2, #48	; 0x30
 800f0a2:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800f0a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f0a8:	3b01      	subs	r3, #1
 800f0aa:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800f0ac:	e7ed      	b.n	800f08a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
  }

  int whole = (int)value;
 800f0ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f0b2:	f7f1 fd51 	bl	8000b58 <__aeabi_d2iz>
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800f0ba:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f0bc:	f7f1 fa32 	bl	8000524 <__aeabi_i2d>
 800f0c0:	4602      	mov	r2, r0
 800f0c2:	460b      	mov	r3, r1
 800f0c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f0c8:	f7f1 f8de 	bl	8000288 <__aeabi_dsub>
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	460b      	mov	r3, r1
 800f0d0:	4610      	mov	r0, r2
 800f0d2:	4619      	mov	r1, r3
 800f0d4:	4a4f      	ldr	r2, [pc, #316]	; (800f214 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 800f0d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f0d8:	00db      	lsls	r3, r3, #3
 800f0da:	4413      	add	r3, r2
 800f0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e0:	f7f1 fa8a 	bl	80005f8 <__aeabi_dmul>
 800f0e4:	4602      	mov	r2, r0
 800f0e6:	460b      	mov	r3, r1
 800f0e8:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800f0ec:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f0f0:	f7f1 fd5a 	bl	8000ba8 <__aeabi_d2uiz>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800f0f8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f0fa:	f7f1 fa03 	bl	8000504 <__aeabi_ui2d>
 800f0fe:	4602      	mov	r2, r0
 800f100:	460b      	mov	r3, r1
 800f102:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f106:	f7f1 f8bf 	bl	8000288 <__aeabi_dsub>
 800f10a:	4602      	mov	r2, r0
 800f10c:	460b      	mov	r3, r1
 800f10e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800f112:	f04f 0200 	mov.w	r2, #0
 800f116:	4b40      	ldr	r3, [pc, #256]	; (800f218 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800f118:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f11c:	f7f1 fcfc 	bl	8000b18 <__aeabi_dcmpgt>
 800f120:	4603      	mov	r3, r0
 800f122:	2b00      	cmp	r3, #0
 800f124:	d016      	beq.n	800f154 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x234>
    ++frac;
 800f126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f128:	3301      	adds	r3, #1
 800f12a:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800f12c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f12e:	f7f1 f9e9 	bl	8000504 <__aeabi_ui2d>
 800f132:	4a38      	ldr	r2, [pc, #224]	; (800f214 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 800f134:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f136:	00db      	lsls	r3, r3, #3
 800f138:	4413      	add	r3, r2
 800f13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f13e:	f7f1 fce1 	bl	8000b04 <__aeabi_dcmpge>
 800f142:	4603      	mov	r3, r0
 800f144:	2b00      	cmp	r3, #0
 800f146:	d01a      	beq.n	800f17e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
      frac = 0;
 800f148:	2300      	movs	r3, #0
 800f14a:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800f14c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f14e:	3301      	adds	r3, #1
 800f150:	657b      	str	r3, [r7, #84]	; 0x54
 800f152:	e014      	b.n	800f17e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    }
  }
  else if (diff < 0.5) {
 800f154:	f04f 0200 	mov.w	r2, #0
 800f158:	4b2f      	ldr	r3, [pc, #188]	; (800f218 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800f15a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f15e:	f7f1 fcbd 	bl	8000adc <__aeabi_dcmplt>
 800f162:	4603      	mov	r3, r0
 800f164:	2b00      	cmp	r3, #0
 800f166:	d10a      	bne.n	800f17e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800f168:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d004      	beq.n	800f178 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x258>
 800f16e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f170:	f003 0301 	and.w	r3, r3, #1
 800f174:	2b00      	cmp	r3, #0
 800f176:	d002      	beq.n	800f17e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800f178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f17a:	3301      	adds	r3, #1
 800f17c:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800f17e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f180:	2b00      	cmp	r3, #0
 800f182:	d14b      	bne.n	800f21c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2fc>
    diff = value - (double)whole;
 800f184:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800f186:	f7f1 f9cd 	bl	8000524 <__aeabi_i2d>
 800f18a:	4602      	mov	r2, r0
 800f18c:	460b      	mov	r3, r1
 800f18e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f192:	f7f1 f879 	bl	8000288 <__aeabi_dsub>
 800f196:	4602      	mov	r2, r0
 800f198:	460b      	mov	r3, r1
 800f19a:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800f19e:	2301      	movs	r3, #1
 800f1a0:	461c      	mov	r4, r3
 800f1a2:	f04f 0200 	mov.w	r2, #0
 800f1a6:	4b1c      	ldr	r3, [pc, #112]	; (800f218 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800f1a8:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f1ac:	f7f1 fc96 	bl	8000adc <__aeabi_dcmplt>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d101      	bne.n	800f1ba <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x29a>
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	461c      	mov	r4, r3
 800f1ba:	b2e3      	uxtb	r3, r4
 800f1bc:	f083 0301 	eor.w	r3, r3, #1
 800f1c0:	b2db      	uxtb	r3, r3
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d109      	bne.n	800f1da <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ba>
 800f1c6:	f04f 0200 	mov.w	r2, #0
 800f1ca:	4b13      	ldr	r3, [pc, #76]	; (800f218 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800f1cc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f1d0:	f7f1 fca2 	bl	8000b18 <__aeabi_dcmpgt>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d06d      	beq.n	800f2b6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 800f1da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1dc:	f003 0301 	and.w	r3, r3, #1
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d068      	beq.n	800f2b6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800f1e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	657b      	str	r3, [r7, #84]	; 0x54
 800f1ea:	e064      	b.n	800f2b6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 800f1ec:	f3af 8000 	nop.w
 800f1f0:	00000000 	.word	0x00000000
 800f1f4:	41cdcd65 	.word	0x41cdcd65
 800f1f8:	00000000 	.word	0x00000000
 800f1fc:	c1cdcd65 	.word	0xc1cdcd65
 800f200:	080173f8 	.word	0x080173f8
 800f204:	080173fc 	.word	0x080173fc
 800f208:	7fefffff 	.word	0x7fefffff
 800f20c:	08017404 	.word	0x08017404
 800f210:	0801740c 	.word	0x0801740c
 800f214:	080176c0 	.word	0x080176c0
 800f218:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 800f21c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f21e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f220:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f222:	2b1f      	cmp	r3, #31
 800f224:	d826      	bhi.n	800f274 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
      --count;
 800f226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f228:	3b01      	subs	r3, #1
 800f22a:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800f22c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f22e:	4b6c      	ldr	r3, [pc, #432]	; (800f3e0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 800f230:	fba3 2301 	umull	r2, r3, r3, r1
 800f234:	08da      	lsrs	r2, r3, #3
 800f236:	4613      	mov	r3, r2
 800f238:	009b      	lsls	r3, r3, #2
 800f23a:	4413      	add	r3, r2
 800f23c:	005b      	lsls	r3, r3, #1
 800f23e:	1aca      	subs	r2, r1, r3
 800f240:	b2d2      	uxtb	r2, r2
 800f242:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f244:	1c59      	adds	r1, r3, #1
 800f246:	65f9      	str	r1, [r7, #92]	; 0x5c
 800f248:	3230      	adds	r2, #48	; 0x30
 800f24a:	b2d2      	uxtb	r2, r2
 800f24c:	3360      	adds	r3, #96	; 0x60
 800f24e:	443b      	add	r3, r7
 800f250:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800f254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f256:	4a62      	ldr	r2, [pc, #392]	; (800f3e0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 800f258:	fba2 2303 	umull	r2, r3, r2, r3
 800f25c:	08db      	lsrs	r3, r3, #3
 800f25e:	653b      	str	r3, [r7, #80]	; 0x50
 800f260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f262:	2b00      	cmp	r3, #0
 800f264:	bf0c      	ite	eq
 800f266:	2301      	moveq	r3, #1
 800f268:	2300      	movne	r3, #0
 800f26a:	b2db      	uxtb	r3, r3
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d100      	bne.n	800f272 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x352>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f270:	e7d6      	b.n	800f220 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x300>
        break;
 800f272:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800f274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f276:	2b1f      	cmp	r3, #31
 800f278:	d806      	bhi.n	800f288 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 800f27a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f27c:	1e5a      	subs	r2, r3, #1
 800f27e:	64fa      	str	r2, [r7, #76]	; 0x4c
 800f280:	2b00      	cmp	r3, #0
 800f282:	d001      	beq.n	800f288 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 800f284:	2301      	movs	r3, #1
 800f286:	e000      	b.n	800f28a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x36a>
 800f288:	2300      	movs	r3, #0
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d008      	beq.n	800f2a0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x380>
      buf[len++] = '0';
 800f28e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f290:	1c5a      	adds	r2, r3, #1
 800f292:	65fa      	str	r2, [r7, #92]	; 0x5c
 800f294:	3360      	adds	r3, #96	; 0x60
 800f296:	443b      	add	r3, r7
 800f298:	2230      	movs	r2, #48	; 0x30
 800f29a:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800f29e:	e7e9      	b.n	800f274 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f2a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2a2:	2b1f      	cmp	r3, #31
 800f2a4:	d807      	bhi.n	800f2b6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // add decimal
      buf[len++] = '.';
 800f2a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2a8:	1c5a      	adds	r2, r3, #1
 800f2aa:	65fa      	str	r2, [r7, #92]	; 0x5c
 800f2ac:	3360      	adds	r3, #96	; 0x60
 800f2ae:	443b      	add	r3, r7
 800f2b0:	222e      	movs	r2, #46	; 0x2e
 800f2b2:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f2b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2b8:	2b1f      	cmp	r3, #31
 800f2ba:	d827      	bhi.n	800f30c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ec>
    buf[len++] = (char)(48 + (whole % 10));
 800f2bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f2be:	4b49      	ldr	r3, [pc, #292]	; (800f3e4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 800f2c0:	fb83 1302 	smull	r1, r3, r3, r2
 800f2c4:	1099      	asrs	r1, r3, #2
 800f2c6:	17d3      	asrs	r3, r2, #31
 800f2c8:	1ac9      	subs	r1, r1, r3
 800f2ca:	460b      	mov	r3, r1
 800f2cc:	009b      	lsls	r3, r3, #2
 800f2ce:	440b      	add	r3, r1
 800f2d0:	005b      	lsls	r3, r3, #1
 800f2d2:	1ad1      	subs	r1, r2, r3
 800f2d4:	b2ca      	uxtb	r2, r1
 800f2d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2d8:	1c59      	adds	r1, r3, #1
 800f2da:	65f9      	str	r1, [r7, #92]	; 0x5c
 800f2dc:	3230      	adds	r2, #48	; 0x30
 800f2de:	b2d2      	uxtb	r2, r2
 800f2e0:	3360      	adds	r3, #96	; 0x60
 800f2e2:	443b      	add	r3, r7
 800f2e4:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800f2e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2ea:	4a3e      	ldr	r2, [pc, #248]	; (800f3e4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 800f2ec:	fb82 1203 	smull	r1, r2, r2, r3
 800f2f0:	1092      	asrs	r2, r2, #2
 800f2f2:	17db      	asrs	r3, r3, #31
 800f2f4:	1ad3      	subs	r3, r2, r3
 800f2f6:	657b      	str	r3, [r7, #84]	; 0x54
 800f2f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	bf0c      	ite	eq
 800f2fe:	2301      	moveq	r3, #1
 800f300:	2300      	movne	r3, #0
 800f302:	b2db      	uxtb	r3, r3
 800f304:	2b00      	cmp	r3, #0
 800f306:	d100      	bne.n	800f30a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ea>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f308:	e7d5      	b.n	800f2b6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      break;
 800f30a:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800f30c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f30e:	f003 0302 	and.w	r3, r3, #2
 800f312:	2b00      	cmp	r3, #0
 800f314:	d123      	bne.n	800f35e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 800f316:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f318:	f003 0301 	and.w	r3, r3, #1
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d01e      	beq.n	800f35e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800f320:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f322:	2b00      	cmp	r3, #0
 800f324:	d00b      	beq.n	800f33e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
 800f326:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d104      	bne.n	800f338 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x418>
 800f32e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f330:	f003 030c 	and.w	r3, r3, #12
 800f334:	2b00      	cmp	r3, #0
 800f336:	d002      	beq.n	800f33e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
      width--;
 800f338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f33a:	3b01      	subs	r3, #1
 800f33c:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800f33e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f342:	429a      	cmp	r2, r3
 800f344:	d20b      	bcs.n	800f35e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 800f346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f348:	2b1f      	cmp	r3, #31
 800f34a:	d808      	bhi.n	800f35e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
      buf[len++] = '0';
 800f34c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f34e:	1c5a      	adds	r2, r3, #1
 800f350:	65fa      	str	r2, [r7, #92]	; 0x5c
 800f352:	3360      	adds	r3, #96	; 0x60
 800f354:	443b      	add	r3, r7
 800f356:	2230      	movs	r2, #48	; 0x30
 800f358:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800f35c:	e7ef      	b.n	800f33e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800f35e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f360:	2b1f      	cmp	r3, #31
 800f362:	d827      	bhi.n	800f3b4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    if (negative) {
 800f364:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d008      	beq.n	800f37e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x45e>
      buf[len++] = '-';
 800f36c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f36e:	1c5a      	adds	r2, r3, #1
 800f370:	65fa      	str	r2, [r7, #92]	; 0x5c
 800f372:	3360      	adds	r3, #96	; 0x60
 800f374:	443b      	add	r3, r7
 800f376:	222d      	movs	r2, #45	; 0x2d
 800f378:	f803 2c48 	strb.w	r2, [r3, #-72]
 800f37c:	e01a      	b.n	800f3b4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_PLUS) {
 800f37e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f380:	f003 0304 	and.w	r3, r3, #4
 800f384:	2b00      	cmp	r3, #0
 800f386:	d008      	beq.n	800f39a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x47a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800f388:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f38a:	1c5a      	adds	r2, r3, #1
 800f38c:	65fa      	str	r2, [r7, #92]	; 0x5c
 800f38e:	3360      	adds	r3, #96	; 0x60
 800f390:	443b      	add	r3, r7
 800f392:	222b      	movs	r2, #43	; 0x2b
 800f394:	f803 2c48 	strb.w	r2, [r3, #-72]
 800f398:	e00c      	b.n	800f3b4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_SPACE) {
 800f39a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f39c:	f003 0308 	and.w	r3, r3, #8
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d007      	beq.n	800f3b4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
      buf[len++] = ' ';
 800f3a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f3a6:	1c5a      	adds	r2, r3, #1
 800f3a8:	65fa      	str	r2, [r7, #92]	; 0x5c
 800f3aa:	3360      	adds	r3, #96	; 0x60
 800f3ac:	443b      	add	r3, r7
 800f3ae:	2220      	movs	r2, #32
 800f3b0:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800f3b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f3b6:	9303      	str	r3, [sp, #12]
 800f3b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f3ba:	9302      	str	r3, [sp, #8]
 800f3bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f3be:	9301      	str	r3, [sp, #4]
 800f3c0:	f107 0318 	add.w	r3, r7, #24
 800f3c4:	9300      	str	r3, [sp, #0]
 800f3c6:	68bb      	ldr	r3, [r7, #8]
 800f3c8:	68fa      	ldr	r2, [r7, #12]
 800f3ca:	6939      	ldr	r1, [r7, #16]
 800f3cc:	6978      	ldr	r0, [r7, #20]
 800f3ce:	f7ff fba5 	bl	800eb1c <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	bf00      	nop
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	3764      	adds	r7, #100	; 0x64
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd90      	pop	{r4, r7, pc}
 800f3de:	bf00      	nop
 800f3e0:	cccccccd 	.word	0xcccccccd
 800f3e4:	66666667 	.word	0x66666667

0800f3e8 <_ZL5_etoaPFvcPvjjEPcjjdjjj>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800f3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3ec:	b09f      	sub	sp, #124	; 0x7c
 800f3ee:	af06      	add	r7, sp, #24
 800f3f0:	6278      	str	r0, [r7, #36]	; 0x24
 800f3f2:	6239      	str	r1, [r7, #32]
 800f3f4:	61fa      	str	r2, [r7, #28]
 800f3f6:	61bb      	str	r3, [r7, #24]
 800f3f8:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800f3fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f400:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f404:	f7f1 fb60 	bl	8000ac8 <__aeabi_dcmpeq>
 800f408:	4603      	mov	r3, r0
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d014      	beq.n	800f438 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 800f40e:	f04f 32ff 	mov.w	r2, #4294967295
 800f412:	4bc1      	ldr	r3, [pc, #772]	; (800f718 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x330>)
 800f414:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f418:	f7f1 fb7e 	bl	8000b18 <__aeabi_dcmpgt>
 800f41c:	4603      	mov	r3, r0
 800f41e:	2b00      	cmp	r3, #0
 800f420:	d10a      	bne.n	800f438 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 800f422:	f04f 32ff 	mov.w	r2, #4294967295
 800f426:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800f42a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f42e:	f7f1 fb55 	bl	8000adc <__aeabi_dcmplt>
 800f432:	4603      	mov	r3, r0
 800f434:	2b00      	cmp	r3, #0
 800f436:	d012      	beq.n	800f45e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800f438:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f43c:	9302      	str	r3, [sp, #8]
 800f43e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f442:	9301      	str	r3, [sp, #4]
 800f444:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f448:	9300      	str	r3, [sp, #0]
 800f44a:	ed97 0b04 	vldr	d0, [r7, #16]
 800f44e:	69bb      	ldr	r3, [r7, #24]
 800f450:	69fa      	ldr	r2, [r7, #28]
 800f452:	6a39      	ldr	r1, [r7, #32]
 800f454:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f456:	f7ff fd63 	bl	800ef20 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800f45a:	4603      	mov	r3, r0
 800f45c:	e23f      	b.n	800f8de <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800f45e:	2301      	movs	r3, #1
 800f460:	461e      	mov	r6, r3
 800f462:	f04f 0200 	mov.w	r2, #0
 800f466:	f04f 0300 	mov.w	r3, #0
 800f46a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f46e:	f7f1 fb35 	bl	8000adc <__aeabi_dcmplt>
 800f472:	4603      	mov	r3, r0
 800f474:	2b00      	cmp	r3, #0
 800f476:	d101      	bne.n	800f47c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x94>
 800f478:	2300      	movs	r3, #0
 800f47a:	461e      	mov	r6, r3
 800f47c:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 800f480:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800f484:	2b00      	cmp	r3, #0
 800f486:	d009      	beq.n	800f49c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xb4>
    value = -value;
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	603b      	str	r3, [r7, #0]
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800f492:	607b      	str	r3, [r7, #4]
 800f494:	ed97 7b00 	vldr	d7, [r7]
 800f498:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800f49c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f4a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d102      	bne.n	800f4ae <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800f4a8:	2306      	movs	r3, #6
 800f4aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800f4ae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f4b2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800f4b6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f4ba:	f04f 0200 	mov.w	r2, #0
 800f4be:	f04f 0300 	mov.w	r3, #0
 800f4c2:	0d0a      	lsrs	r2, r1, #20
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	4613      	mov	r3, r2
 800f4c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f4cc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f4d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800f4d2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f4d6:	4690      	mov	r8, r2
 800f4d8:	f3c3 0913 	ubfx	r9, r3, #0, #20
 800f4dc:	4644      	mov	r4, r8
 800f4de:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 800f4e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f4e6:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800f4ea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f4ec:	f7f1 f81a 	bl	8000524 <__aeabi_i2d>
 800f4f0:	a37d      	add	r3, pc, #500	; (adr r3, 800f6e8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x300>)
 800f4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f6:	f7f1 f87f 	bl	80005f8 <__aeabi_dmul>
 800f4fa:	4602      	mov	r2, r0
 800f4fc:	460b      	mov	r3, r1
 800f4fe:	4610      	mov	r0, r2
 800f500:	4619      	mov	r1, r3
 800f502:	a37b      	add	r3, pc, #492	; (adr r3, 800f6f0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x308>)
 800f504:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f508:	f7f0 fec0 	bl	800028c <__adddf3>
 800f50c:	4602      	mov	r2, r0
 800f50e:	460b      	mov	r3, r1
 800f510:	4614      	mov	r4, r2
 800f512:	461d      	mov	r5, r3
 800f514:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f518:	f04f 0200 	mov.w	r2, #0
 800f51c:	4b7f      	ldr	r3, [pc, #508]	; (800f71c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x334>)
 800f51e:	f7f0 feb3 	bl	8000288 <__aeabi_dsub>
 800f522:	4602      	mov	r2, r0
 800f524:	460b      	mov	r3, r1
 800f526:	4610      	mov	r0, r2
 800f528:	4619      	mov	r1, r3
 800f52a:	a373      	add	r3, pc, #460	; (adr r3, 800f6f8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x310>)
 800f52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f530:	f7f1 f862 	bl	80005f8 <__aeabi_dmul>
 800f534:	4602      	mov	r2, r0
 800f536:	460b      	mov	r3, r1
 800f538:	4620      	mov	r0, r4
 800f53a:	4629      	mov	r1, r5
 800f53c:	f7f0 fea6 	bl	800028c <__adddf3>
 800f540:	4602      	mov	r2, r0
 800f542:	460b      	mov	r3, r1
 800f544:	4610      	mov	r0, r2
 800f546:	4619      	mov	r1, r3
 800f548:	f7f1 fb06 	bl	8000b58 <__aeabi_d2iz>
 800f54c:	4603      	mov	r3, r0
 800f54e:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800f550:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f552:	f7f0 ffe7 	bl	8000524 <__aeabi_i2d>
 800f556:	a36a      	add	r3, pc, #424	; (adr r3, 800f700 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x318>)
 800f558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f55c:	f7f1 f84c 	bl	80005f8 <__aeabi_dmul>
 800f560:	4602      	mov	r2, r0
 800f562:	460b      	mov	r3, r1
 800f564:	4610      	mov	r0, r2
 800f566:	4619      	mov	r1, r3
 800f568:	f04f 0200 	mov.w	r2, #0
 800f56c:	4b6c      	ldr	r3, [pc, #432]	; (800f720 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x338>)
 800f56e:	f7f0 fe8d 	bl	800028c <__adddf3>
 800f572:	4602      	mov	r2, r0
 800f574:	460b      	mov	r3, r1
 800f576:	4610      	mov	r0, r2
 800f578:	4619      	mov	r1, r3
 800f57a:	f7f1 faed 	bl	8000b58 <__aeabi_d2iz>
 800f57e:	4603      	mov	r3, r0
 800f580:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800f582:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f584:	f7f0 ffce 	bl	8000524 <__aeabi_i2d>
 800f588:	a35f      	add	r3, pc, #380	; (adr r3, 800f708 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x320>)
 800f58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58e:	f7f1 f833 	bl	80005f8 <__aeabi_dmul>
 800f592:	4602      	mov	r2, r0
 800f594:	460b      	mov	r3, r1
 800f596:	4614      	mov	r4, r2
 800f598:	461d      	mov	r5, r3
 800f59a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800f59c:	f7f0 ffc2 	bl	8000524 <__aeabi_i2d>
 800f5a0:	a35b      	add	r3, pc, #364	; (adr r3, 800f710 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x328>)
 800f5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a6:	f7f1 f827 	bl	80005f8 <__aeabi_dmul>
 800f5aa:	4602      	mov	r2, r0
 800f5ac:	460b      	mov	r3, r1
 800f5ae:	4620      	mov	r0, r4
 800f5b0:	4629      	mov	r1, r5
 800f5b2:	f7f0 fe69 	bl	8000288 <__aeabi_dsub>
 800f5b6:	4602      	mov	r2, r0
 800f5b8:	460b      	mov	r3, r1
 800f5ba:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 800f5be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f5c2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f5c6:	f7f1 f817 	bl	80005f8 <__aeabi_dmul>
 800f5ca:	4602      	mov	r2, r0
 800f5cc:	460b      	mov	r3, r1
 800f5ce:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800f5d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5d4:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800f5d8:	17da      	asrs	r2, r3, #31
 800f5da:	469a      	mov	sl, r3
 800f5dc:	4693      	mov	fp, r2
 800f5de:	f04f 0200 	mov.w	r2, #0
 800f5e2:	f04f 0300 	mov.w	r3, #0
 800f5e6:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800f5f0:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800f5f4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800f5f8:	4602      	mov	r2, r0
 800f5fa:	460b      	mov	r3, r1
 800f5fc:	f7f0 fe46 	bl	800028c <__adddf3>
 800f600:	4602      	mov	r2, r0
 800f602:	460b      	mov	r3, r1
 800f604:	4690      	mov	r8, r2
 800f606:	4699      	mov	r9, r3
 800f608:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800f60c:	f04f 0000 	mov.w	r0, #0
 800f610:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800f614:	f7f0 fe38 	bl	8000288 <__aeabi_dsub>
 800f618:	4602      	mov	r2, r0
 800f61a:	460b      	mov	r3, r1
 800f61c:	4692      	mov	sl, r2
 800f61e:	469b      	mov	fp, r3
 800f620:	f04f 0200 	mov.w	r2, #0
 800f624:	4b3f      	ldr	r3, [pc, #252]	; (800f724 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x33c>)
 800f626:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f62a:	f7f1 f90f 	bl	800084c <__aeabi_ddiv>
 800f62e:	4602      	mov	r2, r0
 800f630:	460b      	mov	r3, r1
 800f632:	4610      	mov	r0, r2
 800f634:	4619      	mov	r1, r3
 800f636:	f04f 0200 	mov.w	r2, #0
 800f63a:	4b3b      	ldr	r3, [pc, #236]	; (800f728 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 800f63c:	f7f0 fe26 	bl	800028c <__adddf3>
 800f640:	4602      	mov	r2, r0
 800f642:	460b      	mov	r3, r1
 800f644:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f648:	f7f1 f900 	bl	800084c <__aeabi_ddiv>
 800f64c:	4602      	mov	r2, r0
 800f64e:	460b      	mov	r3, r1
 800f650:	4610      	mov	r0, r2
 800f652:	4619      	mov	r1, r3
 800f654:	f04f 0200 	mov.w	r2, #0
 800f658:	4b34      	ldr	r3, [pc, #208]	; (800f72c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x344>)
 800f65a:	f7f0 fe17 	bl	800028c <__adddf3>
 800f65e:	4602      	mov	r2, r0
 800f660:	460b      	mov	r3, r1
 800f662:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800f666:	f7f1 f8f1 	bl	800084c <__aeabi_ddiv>
 800f66a:	4602      	mov	r2, r0
 800f66c:	460b      	mov	r3, r1
 800f66e:	4650      	mov	r0, sl
 800f670:	4659      	mov	r1, fp
 800f672:	f7f0 fe0b 	bl	800028c <__adddf3>
 800f676:	4602      	mov	r2, r0
 800f678:	460b      	mov	r3, r1
 800f67a:	4640      	mov	r0, r8
 800f67c:	4649      	mov	r1, r9
 800f67e:	f7f1 f8e5 	bl	800084c <__aeabi_ddiv>
 800f682:	4602      	mov	r2, r0
 800f684:	460b      	mov	r3, r1
 800f686:	4610      	mov	r0, r2
 800f688:	4619      	mov	r1, r3
 800f68a:	f04f 0200 	mov.w	r2, #0
 800f68e:	4b28      	ldr	r3, [pc, #160]	; (800f730 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x348>)
 800f690:	f7f0 fdfc 	bl	800028c <__adddf3>
 800f694:	4602      	mov	r2, r0
 800f696:	460b      	mov	r3, r1
 800f698:	4620      	mov	r0, r4
 800f69a:	4629      	mov	r1, r5
 800f69c:	f7f0 ffac 	bl	80005f8 <__aeabi_dmul>
 800f6a0:	4602      	mov	r2, r0
 800f6a2:	460b      	mov	r3, r1
 800f6a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 800f6a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f6ac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f6b0:	f7f1 fa14 	bl	8000adc <__aeabi_dcmplt>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d00d      	beq.n	800f6d6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x2ee>
    expval--;
 800f6ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6bc:	3b01      	subs	r3, #1
 800f6be:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 800f6c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800f6c4:	f04f 0200 	mov.w	r2, #0
 800f6c8:	4b17      	ldr	r3, [pc, #92]	; (800f728 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 800f6ca:	f7f1 f8bf 	bl	800084c <__aeabi_ddiv>
 800f6ce:	4602      	mov	r2, r0
 800f6d0:	460b      	mov	r3, r1
 800f6d2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800f6d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6d8:	2b63      	cmp	r3, #99	; 0x63
 800f6da:	dc2b      	bgt.n	800f734 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 800f6dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6de:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800f6e2:	db27      	blt.n	800f734 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 800f6e4:	2304      	movs	r3, #4
 800f6e6:	e026      	b.n	800f736 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34e>
 800f6e8:	509f79fb 	.word	0x509f79fb
 800f6ec:	3fd34413 	.word	0x3fd34413
 800f6f0:	8b60c8b3 	.word	0x8b60c8b3
 800f6f4:	3fc68a28 	.word	0x3fc68a28
 800f6f8:	636f4361 	.word	0x636f4361
 800f6fc:	3fd287a7 	.word	0x3fd287a7
 800f700:	0979a371 	.word	0x0979a371
 800f704:	400a934f 	.word	0x400a934f
 800f708:	bbb55516 	.word	0xbbb55516
 800f70c:	40026bb1 	.word	0x40026bb1
 800f710:	fefa39ef 	.word	0xfefa39ef
 800f714:	3fe62e42 	.word	0x3fe62e42
 800f718:	7fefffff 	.word	0x7fefffff
 800f71c:	3ff80000 	.word	0x3ff80000
 800f720:	3fe00000 	.word	0x3fe00000
 800f724:	402c0000 	.word	0x402c0000
 800f728:	40240000 	.word	0x40240000
 800f72c:	40180000 	.word	0x40180000
 800f730:	3ff00000 	.word	0x3ff00000
 800f734:	2305      	movs	r3, #5
 800f736:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800f738:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f73c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f740:	2b00      	cmp	r3, #0
 800f742:	d03d      	beq.n	800f7c0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800f744:	a368      	add	r3, pc, #416	; (adr r3, 800f8e8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x500>)
 800f746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f74a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f74e:	f7f1 f9d9 	bl	8000b04 <__aeabi_dcmpge>
 800f752:	4603      	mov	r3, r0
 800f754:	2b00      	cmp	r3, #0
 800f756:	d024      	beq.n	800f7a2 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
 800f758:	a365      	add	r3, pc, #404	; (adr r3, 800f8f0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x508>)
 800f75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f762:	f7f1 f9bb 	bl	8000adc <__aeabi_dcmplt>
 800f766:	4603      	mov	r3, r0
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d01a      	beq.n	800f7a2 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
      if ((int)prec > expval) {
 800f76c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f770:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f772:	429a      	cmp	r2, r3
 800f774:	da07      	bge.n	800f786 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 800f776:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800f77a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f77c:	1ad3      	subs	r3, r2, r3
 800f77e:	3b01      	subs	r3, #1
 800f780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800f784:	e002      	b.n	800f78c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3a4>
      }
      else {
        prec = 0;
 800f786:	2300      	movs	r3, #0
 800f788:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800f78c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f790:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f794:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 800f798:	2300      	movs	r3, #0
 800f79a:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 800f79c:	2300      	movs	r3, #0
 800f79e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f7a0:	e00e      	b.n	800f7c0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800f7a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d00a      	beq.n	800f7c0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
 800f7aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f7ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d004      	beq.n	800f7c0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
        --prec;
 800f7b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f7ba:	3b01      	subs	r3, #1
 800f7bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800f7c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f7c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 800f7c6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f7ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f7cc:	429a      	cmp	r2, r3
 800f7ce:	d904      	bls.n	800f7da <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800f7d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f7d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f7d4:	1ad3      	subs	r3, r2, r3
 800f7d6:	657b      	str	r3, [r7, #84]	; 0x54
 800f7d8:	e001      	b.n	800f7de <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800f7de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f7e2:	f003 0302 	and.w	r3, r3, #2
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d004      	beq.n	800f7f4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
 800f7ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d001      	beq.n	800f7f4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 800f7f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d009      	beq.n	800f80e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x426>
    value /= conv.F;
 800f7fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800f7fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800f802:	f7f1 f823 	bl	800084c <__aeabi_ddiv>
 800f806:	4602      	mov	r2, r0
 800f808:	460b      	mov	r3, r1
 800f80a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 800f80e:	69fb      	ldr	r3, [r7, #28]
 800f810:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800f812:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800f816:	2b00      	cmp	r3, #0
 800f818:	d006      	beq.n	800f828 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x440>
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	60bb      	str	r3, [r7, #8]
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800f824:	60fb      	str	r3, [r7, #12]
 800f826:	e003      	b.n	800f830 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x448>
 800f828:	ed97 7b04 	vldr	d7, [r7, #16]
 800f82c:	ed87 7b02 	vstr	d7, [r7, #8]
 800f830:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f834:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f838:	9302      	str	r3, [sp, #8]
 800f83a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f83c:	9301      	str	r3, [sp, #4]
 800f83e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f842:	9300      	str	r3, [sp, #0]
 800f844:	ed97 0b02 	vldr	d0, [r7, #8]
 800f848:	69bb      	ldr	r3, [r7, #24]
 800f84a:	69fa      	ldr	r2, [r7, #28]
 800f84c:	6a39      	ldr	r1, [r7, #32]
 800f84e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f850:	f7ff fb66 	bl	800ef20 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800f854:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 800f856:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d03f      	beq.n	800f8dc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800f85c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f860:	f003 0320 	and.w	r3, r3, #32
 800f864:	2b00      	cmp	r3, #0
 800f866:	d001      	beq.n	800f86c <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x484>
 800f868:	2045      	movs	r0, #69	; 0x45
 800f86a:	e000      	b.n	800f86e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x486>
 800f86c:	2065      	movs	r0, #101	; 0x65
 800f86e:	69fa      	ldr	r2, [r7, #28]
 800f870:	1c53      	adds	r3, r2, #1
 800f872:	61fb      	str	r3, [r7, #28]
 800f874:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800f876:	69bb      	ldr	r3, [r7, #24]
 800f878:	6a39      	ldr	r1, [r7, #32]
 800f87a:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800f87c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f87e:	2b00      	cmp	r3, #0
 800f880:	bfb8      	it	lt
 800f882:	425b      	neglt	r3, r3
 800f884:	4618      	mov	r0, r3
 800f886:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f888:	0fdb      	lsrs	r3, r3, #31
 800f88a:	b2db      	uxtb	r3, r3
 800f88c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f88e:	3a01      	subs	r2, #1
 800f890:	2105      	movs	r1, #5
 800f892:	9105      	str	r1, [sp, #20]
 800f894:	9204      	str	r2, [sp, #16]
 800f896:	2200      	movs	r2, #0
 800f898:	9203      	str	r2, [sp, #12]
 800f89a:	220a      	movs	r2, #10
 800f89c:	9202      	str	r2, [sp, #8]
 800f89e:	9301      	str	r3, [sp, #4]
 800f8a0:	9000      	str	r0, [sp, #0]
 800f8a2:	69bb      	ldr	r3, [r7, #24]
 800f8a4:	69fa      	ldr	r2, [r7, #28]
 800f8a6:	6a39      	ldr	r1, [r7, #32]
 800f8a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f8aa:	f7ff fa63 	bl	800ed74 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800f8ae:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800f8b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f8b4:	f003 0302 	and.w	r3, r3, #2
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d00f      	beq.n	800f8dc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800f8bc:	69fa      	ldr	r2, [r7, #28]
 800f8be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8c0:	1ad3      	subs	r3, r2, r3
 800f8c2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d908      	bls.n	800f8dc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
 800f8ca:	69fa      	ldr	r2, [r7, #28]
 800f8cc:	1c53      	adds	r3, r2, #1
 800f8ce:	61fb      	str	r3, [r7, #28]
 800f8d0:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800f8d2:	69bb      	ldr	r3, [r7, #24]
 800f8d4:	6a39      	ldr	r1, [r7, #32]
 800f8d6:	2020      	movs	r0, #32
 800f8d8:	47a0      	blx	r4
 800f8da:	e7ef      	b.n	800f8bc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4d4>
    }
  }
  return idx;
 800f8dc:	69fb      	ldr	r3, [r7, #28]
}
 800f8de:	4618      	mov	r0, r3
 800f8e0:	3764      	adds	r7, #100	; 0x64
 800f8e2:	46bd      	mov	sp, r7
 800f8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8e8:	eb1c432d 	.word	0xeb1c432d
 800f8ec:	3f1a36e2 	.word	0x3f1a36e2
 800f8f0:	00000000 	.word	0x00000000
 800f8f4:	412e8480 	.word	0x412e8480

0800f8f8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800f8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8fc:	b0a1      	sub	sp, #132	; 0x84
 800f8fe:	af0a      	add	r7, sp, #40	; 0x28
 800f900:	60f8      	str	r0, [r7, #12]
 800f902:	60b9      	str	r1, [r7, #8]
 800f904:	607a      	str	r2, [r7, #4]
 800f906:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800f908:	2300      	movs	r3, #0
 800f90a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d101      	bne.n	800f916 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    // use null output function
    out = _out_null;
 800f912:	4ba5      	ldr	r3, [pc, #660]	; (800fba8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b0>)
 800f914:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800f916:	683b      	ldr	r3, [r7, #0]
 800f918:	781b      	ldrb	r3, [r3, #0]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	f000 84ae 	beq.w	801027c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x984>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800f920:	683b      	ldr	r3, [r7, #0]
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	2b25      	cmp	r3, #37	; 0x25
 800f926:	d00d      	beq.n	800f944 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 800f928:	683b      	ldr	r3, [r7, #0]
 800f92a:	7818      	ldrb	r0, [r3, #0]
 800f92c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f92e:	1c53      	adds	r3, r2, #1
 800f930:	647b      	str	r3, [r7, #68]	; 0x44
 800f932:	68fe      	ldr	r6, [r7, #12]
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	68b9      	ldr	r1, [r7, #8]
 800f938:	47b0      	blx	r6
      format++;
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	3301      	adds	r3, #1
 800f93e:	603b      	str	r3, [r7, #0]
      continue;
 800f940:	f000 bc9a 	b.w	8010278 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
    }
    else {
      // yes, evaluate it
      format++;
 800f944:	683b      	ldr	r3, [r7, #0]
 800f946:	3301      	adds	r3, #1
 800f948:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800f94a:	2300      	movs	r3, #0
 800f94c:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	781b      	ldrb	r3, [r3, #0]
 800f952:	3b20      	subs	r3, #32
 800f954:	2b10      	cmp	r3, #16
 800f956:	d857      	bhi.n	800fa08 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x110>
 800f958:	a201      	add	r2, pc, #4	; (adr r2, 800f960 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x68>)
 800f95a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f95e:	bf00      	nop
 800f960:	0800f9e1 	.word	0x0800f9e1
 800f964:	0800fa09 	.word	0x0800fa09
 800f968:	0800fa09 	.word	0x0800fa09
 800f96c:	0800f9f5 	.word	0x0800f9f5
 800f970:	0800fa09 	.word	0x0800fa09
 800f974:	0800fa09 	.word	0x0800fa09
 800f978:	0800fa09 	.word	0x0800fa09
 800f97c:	0800fa09 	.word	0x0800fa09
 800f980:	0800fa09 	.word	0x0800fa09
 800f984:	0800fa09 	.word	0x0800fa09
 800f988:	0800fa09 	.word	0x0800fa09
 800f98c:	0800f9cd 	.word	0x0800f9cd
 800f990:	0800fa09 	.word	0x0800fa09
 800f994:	0800f9b9 	.word	0x0800f9b9
 800f998:	0800fa09 	.word	0x0800fa09
 800f99c:	0800fa09 	.word	0x0800fa09
 800f9a0:	0800f9a5 	.word	0x0800f9a5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800f9a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9a6:	f043 0301 	orr.w	r3, r3, #1
 800f9aa:	657b      	str	r3, [r7, #84]	; 0x54
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	3301      	adds	r3, #1
 800f9b0:	603b      	str	r3, [r7, #0]
 800f9b2:	2301      	movs	r3, #1
 800f9b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9b6:	e02a      	b.n	800fa0e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800f9b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9ba:	f043 0302 	orr.w	r3, r3, #2
 800f9be:	657b      	str	r3, [r7, #84]	; 0x54
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	3301      	adds	r3, #1
 800f9c4:	603b      	str	r3, [r7, #0]
 800f9c6:	2301      	movs	r3, #1
 800f9c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9ca:	e020      	b.n	800fa0e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800f9cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9ce:	f043 0304 	orr.w	r3, r3, #4
 800f9d2:	657b      	str	r3, [r7, #84]	; 0x54
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	3301      	adds	r3, #1
 800f9d8:	603b      	str	r3, [r7, #0]
 800f9da:	2301      	movs	r3, #1
 800f9dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9de:	e016      	b.n	800fa0e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800f9e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9e2:	f043 0308 	orr.w	r3, r3, #8
 800f9e6:	657b      	str	r3, [r7, #84]	; 0x54
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	603b      	str	r3, [r7, #0]
 800f9ee:	2301      	movs	r3, #1
 800f9f0:	64bb      	str	r3, [r7, #72]	; 0x48
 800f9f2:	e00c      	b.n	800fa0e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800f9f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f9f6:	f043 0310 	orr.w	r3, r3, #16
 800f9fa:	657b      	str	r3, [r7, #84]	; 0x54
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	3301      	adds	r3, #1
 800fa00:	603b      	str	r3, [r7, #0]
 800fa02:	2301      	movs	r3, #1
 800fa04:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa06:	e002      	b.n	800fa0e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        default :                                   n = 0U; break;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa0c:	bf00      	nop
      }
    } while (n);
 800fa0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d000      	beq.n	800fa16 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x11e>
    do {
 800fa14:	e79b      	b.n	800f94e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x56>

    // evaluate width field
    width = 0U;
 800fa16:	2300      	movs	r3, #0
 800fa18:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f7ff f844 	bl	800eaac <_ZL9_is_digitc>
 800fa24:	4603      	mov	r3, r0
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d005      	beq.n	800fa36 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x13e>
      width = _atoi(&format);
 800fa2a:	463b      	mov	r3, r7
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f7ff f851 	bl	800ead4 <_ZL5_atoiPPKc>
 800fa32:	6538      	str	r0, [r7, #80]	; 0x50
 800fa34:	e01a      	b.n	800fa6c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
    }
    else if (*format == '*') {
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	781b      	ldrb	r3, [r3, #0]
 800fa3a:	2b2a      	cmp	r3, #42	; 0x2a
 800fa3c:	d116      	bne.n	800fa6c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
      const int w = va_arg(va, int);
 800fa3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fa42:	1d1a      	adds	r2, r3, #4
 800fa44:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800fa4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	da07      	bge.n	800fa62 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16a>
        flags |= FLAGS_LEFT;    // reverse padding
 800fa52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa54:	f043 0302 	orr.w	r3, r3, #2
 800fa58:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800fa5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa5c:	425b      	negs	r3, r3
 800fa5e:	653b      	str	r3, [r7, #80]	; 0x50
 800fa60:	e001      	b.n	800fa66 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16e>
      }
      else {
        width = (unsigned int)w;
 800fa62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa64:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	3301      	adds	r3, #1
 800fa6a:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800fa6c:	2300      	movs	r3, #0
 800fa6e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800fa70:	683b      	ldr	r3, [r7, #0]
 800fa72:	781b      	ldrb	r3, [r3, #0]
 800fa74:	2b2e      	cmp	r3, #46	; 0x2e
 800fa76:	d126      	bne.n	800fac6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      flags |= FLAGS_PRECISION;
 800fa78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fa7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fa7e:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800fa80:	683b      	ldr	r3, [r7, #0]
 800fa82:	3301      	adds	r3, #1
 800fa84:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	781b      	ldrb	r3, [r3, #0]
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	f7ff f80e 	bl	800eaac <_ZL9_is_digitc>
 800fa90:	4603      	mov	r3, r0
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d005      	beq.n	800faa2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1aa>
        precision = _atoi(&format);
 800fa96:	463b      	mov	r3, r7
 800fa98:	4618      	mov	r0, r3
 800fa9a:	f7ff f81b 	bl	800ead4 <_ZL5_atoiPPKc>
 800fa9e:	64f8      	str	r0, [r7, #76]	; 0x4c
 800faa0:	e011      	b.n	800fac6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      }
      else if (*format == '*') {
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	781b      	ldrb	r3, [r3, #0]
 800faa6:	2b2a      	cmp	r3, #42	; 0x2a
 800faa8:	d10d      	bne.n	800fac6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
        const int prec = (int)va_arg(va, int);
 800faaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800faae:	1d1a      	adds	r2, r3, #4
 800fab0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800fab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800fabe:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	3301      	adds	r3, #1
 800fac4:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	781b      	ldrb	r3, [r3, #0]
 800faca:	3b68      	subs	r3, #104	; 0x68
 800facc:	2b12      	cmp	r3, #18
 800face:	d867      	bhi.n	800fba0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2a8>
 800fad0:	a201      	add	r2, pc, #4	; (adr r2, 800fad8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e0>)
 800fad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fad6:	bf00      	nop
 800fad8:	0800fb4b 	.word	0x0800fb4b
 800fadc:	0800fba1 	.word	0x0800fba1
 800fae0:	0800fb81 	.word	0x0800fb81
 800fae4:	0800fba1 	.word	0x0800fba1
 800fae8:	0800fb25 	.word	0x0800fb25
 800faec:	0800fba1 	.word	0x0800fba1
 800faf0:	0800fba1 	.word	0x0800fba1
 800faf4:	0800fba1 	.word	0x0800fba1
 800faf8:	0800fba1 	.word	0x0800fba1
 800fafc:	0800fba1 	.word	0x0800fba1
 800fb00:	0800fba1 	.word	0x0800fba1
 800fb04:	0800fba1 	.word	0x0800fba1
 800fb08:	0800fb71 	.word	0x0800fb71
 800fb0c:	0800fba1 	.word	0x0800fba1
 800fb10:	0800fba1 	.word	0x0800fba1
 800fb14:	0800fba1 	.word	0x0800fba1
 800fb18:	0800fba1 	.word	0x0800fba1
 800fb1c:	0800fba1 	.word	0x0800fba1
 800fb20:	0800fb91 	.word	0x0800fb91
      case 'l' :
        flags |= FLAGS_LONG;
 800fb24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fb2a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	3301      	adds	r3, #1
 800fb30:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	781b      	ldrb	r3, [r3, #0]
 800fb36:	2b6c      	cmp	r3, #108	; 0x6c
 800fb38:	d134      	bne.n	800fba4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
          flags |= FLAGS_LONG_LONG;
 800fb3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb3c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fb40:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	3301      	adds	r3, #1
 800fb46:	603b      	str	r3, [r7, #0]
        }
        break;
 800fb48:	e02c      	b.n	800fba4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
 800fb4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb50:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	3301      	adds	r3, #1
 800fb56:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800fb58:	683b      	ldr	r3, [r7, #0]
 800fb5a:	781b      	ldrb	r3, [r3, #0]
 800fb5c:	2b68      	cmp	r3, #104	; 0x68
 800fb5e:	d125      	bne.n	800fbac <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
          flags |= FLAGS_CHAR;
 800fb60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fb66:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800fb68:	683b      	ldr	r3, [r7, #0]
 800fb6a:	3301      	adds	r3, #1
 800fb6c:	603b      	str	r3, [r7, #0]
        }
        break;
 800fb6e:	e01d      	b.n	800fbac <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800fb70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fb76:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	3301      	adds	r3, #1
 800fb7c:	603b      	str	r3, [r7, #0]
        break;
 800fb7e:	e016      	b.n	800fbae <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800fb80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fb86:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	3301      	adds	r3, #1
 800fb8c:	603b      	str	r3, [r7, #0]
        break;
 800fb8e:	e00e      	b.n	800fbae <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800fb90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fb92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fb96:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	603b      	str	r3, [r7, #0]
        break;
 800fb9e:	e006      	b.n	800fbae <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      default :
        break;
 800fba0:	bf00      	nop
 800fba2:	e004      	b.n	800fbae <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
        break;
 800fba4:	bf00      	nop
 800fba6:	e002      	b.n	800fbae <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
 800fba8:	0800ea27 	.word	0x0800ea27
        break;
 800fbac:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	781b      	ldrb	r3, [r3, #0]
 800fbb2:	3b25      	subs	r3, #37	; 0x25
 800fbb4:	2b53      	cmp	r3, #83	; 0x53
 800fbb6:	f200 8352 	bhi.w	801025e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x966>
 800fbba:	a201      	add	r2, pc, #4	; (adr r2, 800fbc0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2c8>)
 800fbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbc0:	08010247 	.word	0x08010247
 800fbc4:	0801025f 	.word	0x0801025f
 800fbc8:	0801025f 	.word	0x0801025f
 800fbcc:	0801025f 	.word	0x0801025f
 800fbd0:	0801025f 	.word	0x0801025f
 800fbd4:	0801025f 	.word	0x0801025f
 800fbd8:	0801025f 	.word	0x0801025f
 800fbdc:	0801025f 	.word	0x0801025f
 800fbe0:	0801025f 	.word	0x0801025f
 800fbe4:	0801025f 	.word	0x0801025f
 800fbe8:	0801025f 	.word	0x0801025f
 800fbec:	0801025f 	.word	0x0801025f
 800fbf0:	0801025f 	.word	0x0801025f
 800fbf4:	0801025f 	.word	0x0801025f
 800fbf8:	0801025f 	.word	0x0801025f
 800fbfc:	0801025f 	.word	0x0801025f
 800fc00:	0801025f 	.word	0x0801025f
 800fc04:	0801025f 	.word	0x0801025f
 800fc08:	0801025f 	.word	0x0801025f
 800fc0c:	0801025f 	.word	0x0801025f
 800fc10:	0801025f 	.word	0x0801025f
 800fc14:	0801025f 	.word	0x0801025f
 800fc18:	0801025f 	.word	0x0801025f
 800fc1c:	0801025f 	.word	0x0801025f
 800fc20:	0801025f 	.word	0x0801025f
 800fc24:	0801025f 	.word	0x0801025f
 800fc28:	0801025f 	.word	0x0801025f
 800fc2c:	0801025f 	.word	0x0801025f
 800fc30:	0801025f 	.word	0x0801025f
 800fc34:	0801025f 	.word	0x0801025f
 800fc38:	0801025f 	.word	0x0801025f
 800fc3c:	0801025f 	.word	0x0801025f
 800fc40:	08010015 	.word	0x08010015
 800fc44:	0800ffc5 	.word	0x0800ffc5
 800fc48:	08010015 	.word	0x08010015
 800fc4c:	0801025f 	.word	0x0801025f
 800fc50:	0801025f 	.word	0x0801025f
 800fc54:	0801025f 	.word	0x0801025f
 800fc58:	0801025f 	.word	0x0801025f
 800fc5c:	0801025f 	.word	0x0801025f
 800fc60:	0801025f 	.word	0x0801025f
 800fc64:	0801025f 	.word	0x0801025f
 800fc68:	0801025f 	.word	0x0801025f
 800fc6c:	0801025f 	.word	0x0801025f
 800fc70:	0801025f 	.word	0x0801025f
 800fc74:	0801025f 	.word	0x0801025f
 800fc78:	0801025f 	.word	0x0801025f
 800fc7c:	0801025f 	.word	0x0801025f
 800fc80:	0801025f 	.word	0x0801025f
 800fc84:	0801025f 	.word	0x0801025f
 800fc88:	0801025f 	.word	0x0801025f
 800fc8c:	0800fd11 	.word	0x0800fd11
 800fc90:	0801025f 	.word	0x0801025f
 800fc94:	0801025f 	.word	0x0801025f
 800fc98:	0801025f 	.word	0x0801025f
 800fc9c:	0801025f 	.word	0x0801025f
 800fca0:	0801025f 	.word	0x0801025f
 800fca4:	0801025f 	.word	0x0801025f
 800fca8:	0801025f 	.word	0x0801025f
 800fcac:	0801025f 	.word	0x0801025f
 800fcb0:	0801025f 	.word	0x0801025f
 800fcb4:	0800fd11 	.word	0x0800fd11
 800fcb8:	08010085 	.word	0x08010085
 800fcbc:	0800fd11 	.word	0x0800fd11
 800fcc0:	08010015 	.word	0x08010015
 800fcc4:	0800ffc5 	.word	0x0800ffc5
 800fcc8:	08010015 	.word	0x08010015
 800fccc:	0801025f 	.word	0x0801025f
 800fcd0:	0800fd11 	.word	0x0800fd11
 800fcd4:	0801025f 	.word	0x0801025f
 800fcd8:	0801025f 	.word	0x0801025f
 800fcdc:	0801025f 	.word	0x0801025f
 800fce0:	0801025f 	.word	0x0801025f
 800fce4:	0801025f 	.word	0x0801025f
 800fce8:	0800fd11 	.word	0x0800fd11
 800fcec:	080101fb 	.word	0x080101fb
 800fcf0:	0801025f 	.word	0x0801025f
 800fcf4:	0801025f 	.word	0x0801025f
 800fcf8:	08010111 	.word	0x08010111
 800fcfc:	0801025f 	.word	0x0801025f
 800fd00:	0800fd11 	.word	0x0800fd11
 800fd04:	0801025f 	.word	0x0801025f
 800fd08:	0801025f 	.word	0x0801025f
 800fd0c:	0800fd11 	.word	0x0800fd11
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800fd10:	683b      	ldr	r3, [r7, #0]
 800fd12:	781b      	ldrb	r3, [r3, #0]
 800fd14:	2b78      	cmp	r3, #120	; 0x78
 800fd16:	d003      	beq.n	800fd20 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x428>
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	781b      	ldrb	r3, [r3, #0]
 800fd1c:	2b58      	cmp	r3, #88	; 0x58
 800fd1e:	d102      	bne.n	800fd26 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x42e>
          base = 16U;
 800fd20:	2310      	movs	r3, #16
 800fd22:	643b      	str	r3, [r7, #64]	; 0x40
 800fd24:	e013      	b.n	800fd4e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'o') {
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	781b      	ldrb	r3, [r3, #0]
 800fd2a:	2b6f      	cmp	r3, #111	; 0x6f
 800fd2c:	d102      	bne.n	800fd34 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x43c>
          base =  8U;
 800fd2e:	2308      	movs	r3, #8
 800fd30:	643b      	str	r3, [r7, #64]	; 0x40
 800fd32:	e00c      	b.n	800fd4e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'b') {
 800fd34:	683b      	ldr	r3, [r7, #0]
 800fd36:	781b      	ldrb	r3, [r3, #0]
 800fd38:	2b62      	cmp	r3, #98	; 0x62
 800fd3a:	d102      	bne.n	800fd42 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x44a>
          base =  2U;
 800fd3c:	2302      	movs	r3, #2
 800fd3e:	643b      	str	r3, [r7, #64]	; 0x40
 800fd40:	e005      	b.n	800fd4e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else {
          base = 10U;
 800fd42:	230a      	movs	r3, #10
 800fd44:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800fd46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd48:	f023 0310 	bic.w	r3, r3, #16
 800fd4c:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	781b      	ldrb	r3, [r3, #0]
 800fd52:	2b58      	cmp	r3, #88	; 0x58
 800fd54:	d103      	bne.n	800fd5e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x466>
          flags |= FLAGS_UPPERCASE;
 800fd56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd58:	f043 0320 	orr.w	r3, r3, #32
 800fd5c:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	781b      	ldrb	r3, [r3, #0]
 800fd62:	2b69      	cmp	r3, #105	; 0x69
 800fd64:	d007      	beq.n	800fd76 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	2b64      	cmp	r3, #100	; 0x64
 800fd6c:	d003      	beq.n	800fd76 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800fd6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd70:	f023 030c 	bic.w	r3, r3, #12
 800fd74:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800fd76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d003      	beq.n	800fd88 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x490>
          flags &= ~FLAGS_ZEROPAD;
 800fd80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd82:	f023 0301 	bic.w	r3, r3, #1
 800fd86:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	781b      	ldrb	r3, [r3, #0]
 800fd8c:	2b69      	cmp	r3, #105	; 0x69
 800fd8e:	d004      	beq.n	800fd9a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4a2>
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	781b      	ldrb	r3, [r3, #0]
 800fd94:	2b64      	cmp	r3, #100	; 0x64
 800fd96:	f040 8097 	bne.w	800fec8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x5d0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800fd9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fd9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d030      	beq.n	800fe06 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800fda4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fda8:	3307      	adds	r3, #7
 800fdaa:	f023 0307 	bic.w	r3, r3, #7
 800fdae:	f103 0208 	add.w	r2, r3, #8
 800fdb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fdb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdba:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800fdbe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	da05      	bge.n	800fdd2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4da>
 800fdc6:	2100      	movs	r1, #0
 800fdc8:	4254      	negs	r4, r2
 800fdca:	eb61 0503 	sbc.w	r5, r1, r3
 800fdce:	4622      	mov	r2, r4
 800fdd0:	462b      	mov	r3, r5
 800fdd2:	6979      	ldr	r1, [r7, #20]
 800fdd4:	0fc9      	lsrs	r1, r1, #31
 800fdd6:	b2c9      	uxtb	r1, r1
 800fdd8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800fdda:	2600      	movs	r6, #0
 800fddc:	4680      	mov	r8, r0
 800fdde:	46b1      	mov	r9, r6
 800fde0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800fde2:	9008      	str	r0, [sp, #32]
 800fde4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800fde6:	9007      	str	r0, [sp, #28]
 800fde8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800fdea:	9006      	str	r0, [sp, #24]
 800fdec:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800fdf0:	9102      	str	r1, [sp, #8]
 800fdf2:	e9cd 2300 	strd	r2, r3, [sp]
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fdfa:	68b9      	ldr	r1, [r7, #8]
 800fdfc:	68f8      	ldr	r0, [r7, #12]
 800fdfe:	f7ff f820 	bl	800ee42 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 800fe02:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
 800fe04:	e0da      	b.n	800ffbc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          else if (flags & FLAGS_LONG) {
 800fe06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d020      	beq.n	800fe52 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x55a>
            const long value = va_arg(va, long);
 800fe10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fe14:	1d1a      	adds	r2, r3, #4
 800fe16:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800fe1e:	69fb      	ldr	r3, [r7, #28]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	bfb8      	it	lt
 800fe24:	425b      	neglt	r3, r3
 800fe26:	4619      	mov	r1, r3
 800fe28:	69fb      	ldr	r3, [r7, #28]
 800fe2a:	0fdb      	lsrs	r3, r3, #31
 800fe2c:	b2db      	uxtb	r3, r3
 800fe2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fe30:	9205      	str	r2, [sp, #20]
 800fe32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800fe34:	9204      	str	r2, [sp, #16]
 800fe36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fe38:	9203      	str	r2, [sp, #12]
 800fe3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fe3c:	9202      	str	r2, [sp, #8]
 800fe3e:	9301      	str	r3, [sp, #4]
 800fe40:	9100      	str	r1, [sp, #0]
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fe46:	68b9      	ldr	r1, [r7, #8]
 800fe48:	68f8      	ldr	r0, [r7, #12]
 800fe4a:	f7fe ff93 	bl	800ed74 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800fe4e:	6478      	str	r0, [r7, #68]	; 0x44
          }
 800fe50:	e0b4      	b.n	800ffbc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800fe52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d007      	beq.n	800fe6c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x574>
 800fe5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fe60:	1d1a      	adds	r2, r3, #4
 800fe62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	b2db      	uxtb	r3, r3
 800fe6a:	e012      	b.n	800fe92 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 800fe6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fe6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d007      	beq.n	800fe86 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x58e>
 800fe76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fe7a:	1d1a      	adds	r2, r3, #4
 800fe7c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	b21b      	sxth	r3, r3
 800fe84:	e005      	b.n	800fe92 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 800fe86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fe8a:	1d1a      	adds	r2, r3, #4
 800fe8c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800fe94:	6a3b      	ldr	r3, [r7, #32]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	bfb8      	it	lt
 800fe9a:	425b      	neglt	r3, r3
 800fe9c:	4619      	mov	r1, r3
 800fe9e:	6a3b      	ldr	r3, [r7, #32]
 800fea0:	0fdb      	lsrs	r3, r3, #31
 800fea2:	b2db      	uxtb	r3, r3
 800fea4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fea6:	9205      	str	r2, [sp, #20]
 800fea8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800feaa:	9204      	str	r2, [sp, #16]
 800feac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800feae:	9203      	str	r2, [sp, #12]
 800feb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800feb2:	9202      	str	r2, [sp, #8]
 800feb4:	9301      	str	r3, [sp, #4]
 800feb6:	9100      	str	r1, [sp, #0]
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800febc:	68b9      	ldr	r1, [r7, #8]
 800febe:	68f8      	ldr	r0, [r7, #12]
 800fec0:	f7fe ff58 	bl	800ed74 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800fec4:	6478      	str	r0, [r7, #68]	; 0x44
          }
 800fec6:	e079      	b.n	800ffbc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800fec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800feca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d022      	beq.n	800ff18 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x620>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800fed2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fed6:	3307      	adds	r3, #7
 800fed8:	f023 0307 	bic.w	r3, r3, #7
 800fedc:	f103 0208 	add.w	r2, r3, #8
 800fee0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800feea:	2000      	movs	r0, #0
 800feec:	468a      	mov	sl, r1
 800feee:	4683      	mov	fp, r0
 800fef0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fef2:	9108      	str	r1, [sp, #32]
 800fef4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fef6:	9107      	str	r1, [sp, #28]
 800fef8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800fefa:	9106      	str	r1, [sp, #24]
 800fefc:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800ff00:	2100      	movs	r1, #0
 800ff02:	9102      	str	r1, [sp, #8]
 800ff04:	e9cd 2300 	strd	r2, r3, [sp]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff0c:	68b9      	ldr	r1, [r7, #8]
 800ff0e:	68f8      	ldr	r0, [r7, #12]
 800ff10:	f7fe ff97 	bl	800ee42 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 800ff14:	6478      	str	r0, [r7, #68]	; 0x44
 800ff16:	e051      	b.n	800ffbc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800ff18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d018      	beq.n	800ff54 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x65c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800ff22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ff26:	1d1a      	adds	r2, r3, #4
 800ff28:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ff30:	9205      	str	r2, [sp, #20]
 800ff32:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ff34:	9204      	str	r2, [sp, #16]
 800ff36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ff38:	9203      	str	r2, [sp, #12]
 800ff3a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ff3c:	9202      	str	r2, [sp, #8]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	9201      	str	r2, [sp, #4]
 800ff42:	9300      	str	r3, [sp, #0]
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff48:	68b9      	ldr	r1, [r7, #8]
 800ff4a:	68f8      	ldr	r0, [r7, #12]
 800ff4c:	f7fe ff12 	bl	800ed74 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800ff50:	6478      	str	r0, [r7, #68]	; 0x44
 800ff52:	e033      	b.n	800ffbc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800ff54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d007      	beq.n	800ff6e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x676>
 800ff5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ff62:	1d1a      	adds	r2, r3, #4
 800ff64:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	b2db      	uxtb	r3, r3
 800ff6c:	e012      	b.n	800ff94 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 800ff6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d007      	beq.n	800ff88 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x690>
 800ff78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ff7c:	1d1a      	adds	r2, r3, #4
 800ff7e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	b29b      	uxth	r3, r3
 800ff86:	e005      	b.n	800ff94 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 800ff88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ff8c:	1d1a      	adds	r2, r3, #4
 800ff8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800ff96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff98:	9305      	str	r3, [sp, #20]
 800ff9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff9c:	9304      	str	r3, [sp, #16]
 800ff9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffa0:	9303      	str	r3, [sp, #12]
 800ffa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffa4:	9302      	str	r3, [sp, #8]
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	9301      	str	r3, [sp, #4]
 800ffaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffac:	9300      	str	r3, [sp, #0]
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ffb2:	68b9      	ldr	r1, [r7, #8]
 800ffb4:	68f8      	ldr	r0, [r7, #12]
 800ffb6:	f7fe fedd 	bl	800ed74 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800ffba:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	3301      	adds	r3, #1
 800ffc0:	603b      	str	r3, [r7, #0]
        break;
 800ffc2:	e159      	b.n	8010278 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	2b46      	cmp	r3, #70	; 0x46
 800ffca:	d103      	bne.n	800ffd4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6dc>
 800ffcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffce:	f043 0320 	orr.w	r3, r3, #32
 800ffd2:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800ffd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ffd8:	3307      	adds	r3, #7
 800ffda:	f023 0307 	bic.w	r3, r3, #7
 800ffde:	f103 0208 	add.w	r2, r3, #8
 800ffe2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ffe6:	ed93 7b00 	vldr	d7, [r3]
 800ffea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffec:	9302      	str	r3, [sp, #8]
 800ffee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fff0:	9301      	str	r3, [sp, #4]
 800fff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fff4:	9300      	str	r3, [sp, #0]
 800fff6:	eeb0 0a47 	vmov.f32	s0, s14
 800fffa:	eef0 0a67 	vmov.f32	s1, s15
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010002:	68b9      	ldr	r1, [r7, #8]
 8010004:	68f8      	ldr	r0, [r7, #12]
 8010006:	f7fe ff8b 	bl	800ef20 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 801000a:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 801000c:	683b      	ldr	r3, [r7, #0]
 801000e:	3301      	adds	r3, #1
 8010010:	603b      	str	r3, [r7, #0]
        break;
 8010012:	e131      	b.n	8010278 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8010014:	683b      	ldr	r3, [r7, #0]
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	2b67      	cmp	r3, #103	; 0x67
 801001a:	d003      	beq.n	8010024 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x72c>
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	781b      	ldrb	r3, [r3, #0]
 8010020:	2b47      	cmp	r3, #71	; 0x47
 8010022:	d103      	bne.n	801002c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x734>
 8010024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010026:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801002a:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 801002c:	683b      	ldr	r3, [r7, #0]
 801002e:	781b      	ldrb	r3, [r3, #0]
 8010030:	2b45      	cmp	r3, #69	; 0x45
 8010032:	d003      	beq.n	801003c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x744>
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	2b47      	cmp	r3, #71	; 0x47
 801003a:	d103      	bne.n	8010044 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x74c>
 801003c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801003e:	f043 0320 	orr.w	r3, r3, #32
 8010042:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8010044:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010048:	3307      	adds	r3, #7
 801004a:	f023 0307 	bic.w	r3, r3, #7
 801004e:	f103 0208 	add.w	r2, r3, #8
 8010052:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010056:	ed93 7b00 	vldr	d7, [r3]
 801005a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801005c:	9302      	str	r3, [sp, #8]
 801005e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010060:	9301      	str	r3, [sp, #4]
 8010062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010064:	9300      	str	r3, [sp, #0]
 8010066:	eeb0 0a47 	vmov.f32	s0, s14
 801006a:	eef0 0a67 	vmov.f32	s1, s15
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010072:	68b9      	ldr	r1, [r7, #8]
 8010074:	68f8      	ldr	r0, [r7, #12]
 8010076:	f7ff f9b7 	bl	800f3e8 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 801007a:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 801007c:	683b      	ldr	r3, [r7, #0]
 801007e:	3301      	adds	r3, #1
 8010080:	603b      	str	r3, [r7, #0]
        break;
 8010082:	e0f9      	b.n	8010278 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8010084:	2301      	movs	r3, #1
 8010086:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8010088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801008a:	f003 0302 	and.w	r3, r3, #2
 801008e:	2b00      	cmp	r3, #0
 8010090:	d113      	bne.n	80100ba <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
          while (l++ < width) {
 8010092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010094:	1c5a      	adds	r2, r3, #1
 8010096:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010098:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801009a:	429a      	cmp	r2, r3
 801009c:	bf8c      	ite	hi
 801009e:	2301      	movhi	r3, #1
 80100a0:	2300      	movls	r3, #0
 80100a2:	b2db      	uxtb	r3, r3
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	d008      	beq.n	80100ba <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
            out(' ', buffer, idx++, maxlen);
 80100a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80100aa:	1c53      	adds	r3, r2, #1
 80100ac:	647b      	str	r3, [r7, #68]	; 0x44
 80100ae:	68fe      	ldr	r6, [r7, #12]
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	68b9      	ldr	r1, [r7, #8]
 80100b4:	2020      	movs	r0, #32
 80100b6:	47b0      	blx	r6
          while (l++ < width) {
 80100b8:	e7eb      	b.n	8010092 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80100ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80100be:	1d1a      	adds	r2, r3, #4
 80100c0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	b2d8      	uxtb	r0, r3
 80100c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80100ca:	1c53      	adds	r3, r2, #1
 80100cc:	647b      	str	r3, [r7, #68]	; 0x44
 80100ce:	68fe      	ldr	r6, [r7, #12]
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	68b9      	ldr	r1, [r7, #8]
 80100d4:	47b0      	blx	r6
        // post padding
        if (flags & FLAGS_LEFT) {
 80100d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100d8:	f003 0302 	and.w	r3, r3, #2
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d013      	beq.n	8010108 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
          while (l++ < width) {
 80100e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100e2:	1c5a      	adds	r2, r3, #1
 80100e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80100e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80100e8:	429a      	cmp	r2, r3
 80100ea:	bf8c      	ite	hi
 80100ec:	2301      	movhi	r3, #1
 80100ee:	2300      	movls	r3, #0
 80100f0:	b2db      	uxtb	r3, r3
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d008      	beq.n	8010108 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
            out(' ', buffer, idx++, maxlen);
 80100f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80100f8:	1c53      	adds	r3, r2, #1
 80100fa:	647b      	str	r3, [r7, #68]	; 0x44
 80100fc:	68fe      	ldr	r6, [r7, #12]
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	68b9      	ldr	r1, [r7, #8]
 8010102:	2020      	movs	r0, #32
 8010104:	47b0      	blx	r6
          while (l++ < width) {
 8010106:	e7eb      	b.n	80100e0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7e8>
          }
        }
        format++;
 8010108:	683b      	ldr	r3, [r7, #0]
 801010a:	3301      	adds	r3, #1
 801010c:	603b      	str	r3, [r7, #0]
        break;
 801010e:	e0b3      	b.n	8010278 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8010110:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010114:	1d1a      	adds	r2, r3, #4
 8010116:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 801011e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010120:	2b00      	cmp	r3, #0
 8010122:	d001      	beq.n	8010128 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x830>
 8010124:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010126:	e001      	b.n	801012c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x834>
 8010128:	f04f 33ff 	mov.w	r3, #4294967295
 801012c:	4619      	mov	r1, r3
 801012e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010130:	f7fe fc9a 	bl	800ea68 <_ZL10_strnlen_sPKcj>
 8010134:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8010136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801013c:	2b00      	cmp	r3, #0
 801013e:	d007      	beq.n	8010150 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x858>
          l = (l < precision ? l : precision);
 8010140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010144:	429a      	cmp	r2, r3
 8010146:	d201      	bcs.n	801014c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x854>
 8010148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801014a:	e000      	b.n	801014e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x856>
 801014c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801014e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8010150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010152:	f003 0302 	and.w	r3, r3, #2
 8010156:	2b00      	cmp	r3, #0
 8010158:	d113      	bne.n	8010182 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
          while (l++ < width) {
 801015a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801015c:	1c5a      	adds	r2, r3, #1
 801015e:	637a      	str	r2, [r7, #52]	; 0x34
 8010160:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010162:	429a      	cmp	r2, r3
 8010164:	bf8c      	ite	hi
 8010166:	2301      	movhi	r3, #1
 8010168:	2300      	movls	r3, #0
 801016a:	b2db      	uxtb	r3, r3
 801016c:	2b00      	cmp	r3, #0
 801016e:	d008      	beq.n	8010182 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
            out(' ', buffer, idx++, maxlen);
 8010170:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010172:	1c53      	adds	r3, r2, #1
 8010174:	647b      	str	r3, [r7, #68]	; 0x44
 8010176:	68fe      	ldr	r6, [r7, #12]
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	68b9      	ldr	r1, [r7, #8]
 801017c:	2020      	movs	r0, #32
 801017e:	47b0      	blx	r6
          while (l++ < width) {
 8010180:	e7eb      	b.n	801015a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x862>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8010182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010184:	781b      	ldrb	r3, [r3, #0]
 8010186:	2b00      	cmp	r3, #0
 8010188:	d00b      	beq.n	80101a2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 801018a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801018c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010190:	2b00      	cmp	r3, #0
 8010192:	d004      	beq.n	801019e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8a6>
 8010194:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010196:	1e5a      	subs	r2, r3, #1
 8010198:	64fa      	str	r2, [r7, #76]	; 0x4c
 801019a:	2b00      	cmp	r3, #0
 801019c:	d001      	beq.n	80101a2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 801019e:	2301      	movs	r3, #1
 80101a0:	e000      	b.n	80101a4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8ac>
 80101a2:	2300      	movs	r3, #0
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d00b      	beq.n	80101c0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8c8>
          out(*(p++), buffer, idx++, maxlen);
 80101a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101aa:	1c5a      	adds	r2, r3, #1
 80101ac:	63ba      	str	r2, [r7, #56]	; 0x38
 80101ae:	7818      	ldrb	r0, [r3, #0]
 80101b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80101b2:	1c53      	adds	r3, r2, #1
 80101b4:	647b      	str	r3, [r7, #68]	; 0x44
 80101b6:	68fe      	ldr	r6, [r7, #12]
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	68b9      	ldr	r1, [r7, #8]
 80101bc:	47b0      	blx	r6
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80101be:	e7e0      	b.n	8010182 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80101c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101c2:	f003 0302 	and.w	r3, r3, #2
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d013      	beq.n	80101f2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
          while (l++ < width) {
 80101ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101cc:	1c5a      	adds	r2, r3, #1
 80101ce:	637a      	str	r2, [r7, #52]	; 0x34
 80101d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80101d2:	429a      	cmp	r2, r3
 80101d4:	bf8c      	ite	hi
 80101d6:	2301      	movhi	r3, #1
 80101d8:	2300      	movls	r3, #0
 80101da:	b2db      	uxtb	r3, r3
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d008      	beq.n	80101f2 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
            out(' ', buffer, idx++, maxlen);
 80101e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80101e2:	1c53      	adds	r3, r2, #1
 80101e4:	647b      	str	r3, [r7, #68]	; 0x44
 80101e6:	68fe      	ldr	r6, [r7, #12]
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	68b9      	ldr	r1, [r7, #8]
 80101ec:	2020      	movs	r0, #32
 80101ee:	47b0      	blx	r6
          while (l++ < width) {
 80101f0:	e7eb      	b.n	80101ca <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8d2>
          }
        }
        format++;
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	3301      	adds	r3, #1
 80101f6:	603b      	str	r3, [r7, #0]
        break;
 80101f8:	e03e      	b.n	8010278 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 80101fa:	2308      	movs	r3, #8
 80101fc:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 80101fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010200:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8010204:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8010206:	2300      	movs	r3, #0
 8010208:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 801020c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010210:	1d1a      	adds	r2, r3, #4
 8010212:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010216:	681b      	ldr	r3, [r3, #0]
 8010218:	461a      	mov	r2, r3
 801021a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801021c:	9305      	str	r3, [sp, #20]
 801021e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010220:	9304      	str	r3, [sp, #16]
 8010222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010224:	9303      	str	r3, [sp, #12]
 8010226:	2310      	movs	r3, #16
 8010228:	9302      	str	r3, [sp, #8]
 801022a:	2300      	movs	r3, #0
 801022c:	9301      	str	r3, [sp, #4]
 801022e:	9200      	str	r2, [sp, #0]
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010234:	68b9      	ldr	r1, [r7, #8]
 8010236:	68f8      	ldr	r0, [r7, #12]
 8010238:	f7fe fd9c 	bl	800ed74 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 801023c:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	3301      	adds	r3, #1
 8010242:	603b      	str	r3, [r7, #0]
        break;
 8010244:	e018      	b.n	8010278 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 8010246:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010248:	1c53      	adds	r3, r2, #1
 801024a:	647b      	str	r3, [r7, #68]	; 0x44
 801024c:	68fe      	ldr	r6, [r7, #12]
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	68b9      	ldr	r1, [r7, #8]
 8010252:	2025      	movs	r0, #37	; 0x25
 8010254:	47b0      	blx	r6
        format++;
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	3301      	adds	r3, #1
 801025a:	603b      	str	r3, [r7, #0]
        break;
 801025c:	e00c      	b.n	8010278 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>

      default :
        out(*format, buffer, idx++, maxlen);
 801025e:	683b      	ldr	r3, [r7, #0]
 8010260:	7818      	ldrb	r0, [r3, #0]
 8010262:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010264:	1c53      	adds	r3, r2, #1
 8010266:	647b      	str	r3, [r7, #68]	; 0x44
 8010268:	68fe      	ldr	r6, [r7, #12]
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	68b9      	ldr	r1, [r7, #8]
 801026e:	47b0      	blx	r6
        format++;
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	3301      	adds	r3, #1
 8010274:	603b      	str	r3, [r7, #0]
        break;
 8010276:	bf00      	nop
  while (*format)
 8010278:	f7ff bb4d 	b.w	800f916 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 801027c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	429a      	cmp	r2, r3
 8010282:	d302      	bcc.n	801028a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x992>
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	1e5a      	subs	r2, r3, #1
 8010288:	e000      	b.n	801028c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x994>
 801028a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801028c:	68fc      	ldr	r4, [r7, #12]
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	68b9      	ldr	r1, [r7, #8]
 8010292:	2000      	movs	r0, #0
 8010294:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8010296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8010298:	4618      	mov	r0, r3
 801029a:	375c      	adds	r7, #92	; 0x5c
 801029c:	46bd      	mov	sp, r7
 801029e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102a2:	bf00      	nop

080102a4 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 80102a4:	b40f      	push	{r0, r1, r2, r3}
 80102a6:	b580      	push	{r7, lr}
 80102a8:	b086      	sub	sp, #24
 80102aa:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 80102ac:	f107 031c 	add.w	r3, r7, #28
 80102b0:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 80102b2:	1d39      	adds	r1, r7, #4
 80102b4:	68bb      	ldr	r3, [r7, #8]
 80102b6:	9300      	str	r3, [sp, #0]
 80102b8:	69bb      	ldr	r3, [r7, #24]
 80102ba:	f04f 32ff 	mov.w	r2, #4294967295
 80102be:	4806      	ldr	r0, [pc, #24]	; (80102d8 <printf_+0x34>)
 80102c0:	f7ff fb1a 	bl	800f8f8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>
 80102c4:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 80102c6:	68fb      	ldr	r3, [r7, #12]
}
 80102c8:	4618      	mov	r0, r3
 80102ca:	3710      	adds	r7, #16
 80102cc:	46bd      	mov	sp, r7
 80102ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80102d2:	b004      	add	sp, #16
 80102d4:	4770      	bx	lr
 80102d6:	bf00      	nop
 80102d8:	0800ea43 	.word	0x0800ea43

080102dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80102dc:	b480      	push	{r7}
 80102de:	b083      	sub	sp, #12
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80102e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80102e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80102ec:	f003 0301 	and.w	r3, r3, #1
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d009      	beq.n	8010308 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80102f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80102f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80102fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8010300:	2b00      	cmp	r3, #0
 8010302:	d001      	beq.n	8010308 <ITM_SendChar+0x2c>
 8010304:	2301      	movs	r3, #1
 8010306:	e000      	b.n	801030a <ITM_SendChar+0x2e>
 8010308:	2300      	movs	r3, #0
 801030a:	2b00      	cmp	r3, #0
 801030c:	d010      	beq.n	8010330 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 801030e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	2b00      	cmp	r3, #0
 8010316:	bf0c      	ite	eq
 8010318:	2301      	moveq	r3, #1
 801031a:	2300      	movne	r3, #0
 801031c:	b2db      	uxtb	r3, r3
 801031e:	2b00      	cmp	r3, #0
 8010320:	d001      	beq.n	8010326 <ITM_SendChar+0x4a>
    {
      __NOP();
 8010322:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8010324:	e7f3      	b.n	801030e <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8010326:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801032a:	687a      	ldr	r2, [r7, #4]
 801032c:	b2d2      	uxtb	r2, r2
 801032e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8010330:	687b      	ldr	r3, [r7, #4]
}
 8010332:	4618      	mov	r0, r3
 8010334:	370c      	adds	r7, #12
 8010336:	46bd      	mov	sp, r7
 8010338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033c:	4770      	bx	lr

0801033e <_putchar>:
 */

#include "estdio.hpp"
#include "main.h"

void _putchar(char character) {
 801033e:	b580      	push	{r7, lr}
 8010340:	b082      	sub	sp, #8
 8010342:	af00      	add	r7, sp, #0
 8010344:	4603      	mov	r3, r0
 8010346:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(character);
 8010348:	79fb      	ldrb	r3, [r7, #7]
 801034a:	4618      	mov	r0, r3
 801034c:	f7ff ffc6 	bl	80102dc <ITM_SendChar>
}
 8010350:	bf00      	nop
 8010352:	3708      	adds	r7, #8
 8010354:	46bd      	mov	sp, r7
 8010356:	bd80      	pop	{r7, pc}

08010358 <__NVIC_SetPriority>:
 8010358:	b480      	push	{r7}
 801035a:	b083      	sub	sp, #12
 801035c:	af00      	add	r7, sp, #0
 801035e:	4603      	mov	r3, r0
 8010360:	6039      	str	r1, [r7, #0]
 8010362:	71fb      	strb	r3, [r7, #7]
 8010364:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010368:	2b00      	cmp	r3, #0
 801036a:	db0a      	blt.n	8010382 <__NVIC_SetPriority+0x2a>
 801036c:	683b      	ldr	r3, [r7, #0]
 801036e:	b2da      	uxtb	r2, r3
 8010370:	490c      	ldr	r1, [pc, #48]	; (80103a4 <__NVIC_SetPriority+0x4c>)
 8010372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010376:	0112      	lsls	r2, r2, #4
 8010378:	b2d2      	uxtb	r2, r2
 801037a:	440b      	add	r3, r1
 801037c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8010380:	e00a      	b.n	8010398 <__NVIC_SetPriority+0x40>
 8010382:	683b      	ldr	r3, [r7, #0]
 8010384:	b2da      	uxtb	r2, r3
 8010386:	4908      	ldr	r1, [pc, #32]	; (80103a8 <__NVIC_SetPriority+0x50>)
 8010388:	79fb      	ldrb	r3, [r7, #7]
 801038a:	f003 030f 	and.w	r3, r3, #15
 801038e:	3b04      	subs	r3, #4
 8010390:	0112      	lsls	r2, r2, #4
 8010392:	b2d2      	uxtb	r2, r2
 8010394:	440b      	add	r3, r1
 8010396:	761a      	strb	r2, [r3, #24]
 8010398:	bf00      	nop
 801039a:	370c      	adds	r7, #12
 801039c:	46bd      	mov	sp, r7
 801039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a2:	4770      	bx	lr
 80103a4:	e000e100 	.word	0xe000e100
 80103a8:	e000ed00 	.word	0xe000ed00

080103ac <SysTick_Handler>:
 80103ac:	b580      	push	{r7, lr}
 80103ae:	af00      	add	r7, sp, #0
 80103b0:	4b05      	ldr	r3, [pc, #20]	; (80103c8 <SysTick_Handler+0x1c>)
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	f002 fde8 	bl	8012f88 <xTaskGetSchedulerState>
 80103b8:	4603      	mov	r3, r0
 80103ba:	2b01      	cmp	r3, #1
 80103bc:	d001      	beq.n	80103c2 <SysTick_Handler+0x16>
 80103be:	f003 fe13 	bl	8013fe8 <xPortSysTickHandler>
 80103c2:	bf00      	nop
 80103c4:	bd80      	pop	{r7, pc}
 80103c6:	bf00      	nop
 80103c8:	e000e010 	.word	0xe000e010

080103cc <SVC_Setup>:
 80103cc:	b580      	push	{r7, lr}
 80103ce:	af00      	add	r7, sp, #0
 80103d0:	2100      	movs	r1, #0
 80103d2:	f06f 0004 	mvn.w	r0, #4
 80103d6:	f7ff ffbf 	bl	8010358 <__NVIC_SetPriority>
 80103da:	bf00      	nop
 80103dc:	bd80      	pop	{r7, pc}
	...

080103e0 <osKernelInitialize>:
 80103e0:	b480      	push	{r7}
 80103e2:	b083      	sub	sp, #12
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	f3ef 8305 	mrs	r3, IPSR
 80103ea:	603b      	str	r3, [r7, #0]
 80103ec:	683b      	ldr	r3, [r7, #0]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d003      	beq.n	80103fa <osKernelInitialize+0x1a>
 80103f2:	f06f 0305 	mvn.w	r3, #5
 80103f6:	607b      	str	r3, [r7, #4]
 80103f8:	e00c      	b.n	8010414 <osKernelInitialize+0x34>
 80103fa:	4b0a      	ldr	r3, [pc, #40]	; (8010424 <osKernelInitialize+0x44>)
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d105      	bne.n	801040e <osKernelInitialize+0x2e>
 8010402:	4b08      	ldr	r3, [pc, #32]	; (8010424 <osKernelInitialize+0x44>)
 8010404:	2201      	movs	r2, #1
 8010406:	601a      	str	r2, [r3, #0]
 8010408:	2300      	movs	r3, #0
 801040a:	607b      	str	r3, [r7, #4]
 801040c:	e002      	b.n	8010414 <osKernelInitialize+0x34>
 801040e:	f04f 33ff 	mov.w	r3, #4294967295
 8010412:	607b      	str	r3, [r7, #4]
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	4618      	mov	r0, r3
 8010418:	370c      	adds	r7, #12
 801041a:	46bd      	mov	sp, r7
 801041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010420:	4770      	bx	lr
 8010422:	bf00      	nop
 8010424:	20001484 	.word	0x20001484

08010428 <osKernelStart>:
 8010428:	b580      	push	{r7, lr}
 801042a:	b082      	sub	sp, #8
 801042c:	af00      	add	r7, sp, #0
 801042e:	f3ef 8305 	mrs	r3, IPSR
 8010432:	603b      	str	r3, [r7, #0]
 8010434:	683b      	ldr	r3, [r7, #0]
 8010436:	2b00      	cmp	r3, #0
 8010438:	d003      	beq.n	8010442 <osKernelStart+0x1a>
 801043a:	f06f 0305 	mvn.w	r3, #5
 801043e:	607b      	str	r3, [r7, #4]
 8010440:	e010      	b.n	8010464 <osKernelStart+0x3c>
 8010442:	4b0b      	ldr	r3, [pc, #44]	; (8010470 <osKernelStart+0x48>)
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	2b01      	cmp	r3, #1
 8010448:	d109      	bne.n	801045e <osKernelStart+0x36>
 801044a:	f7ff ffbf 	bl	80103cc <SVC_Setup>
 801044e:	4b08      	ldr	r3, [pc, #32]	; (8010470 <osKernelStart+0x48>)
 8010450:	2202      	movs	r2, #2
 8010452:	601a      	str	r2, [r3, #0]
 8010454:	f002 f8d8 	bl	8012608 <vTaskStartScheduler>
 8010458:	2300      	movs	r3, #0
 801045a:	607b      	str	r3, [r7, #4]
 801045c:	e002      	b.n	8010464 <osKernelStart+0x3c>
 801045e:	f04f 33ff 	mov.w	r3, #4294967295
 8010462:	607b      	str	r3, [r7, #4]
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	4618      	mov	r0, r3
 8010468:	3708      	adds	r7, #8
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
 801046e:	bf00      	nop
 8010470:	20001484 	.word	0x20001484

08010474 <osThreadNew>:
 8010474:	b580      	push	{r7, lr}
 8010476:	b08e      	sub	sp, #56	; 0x38
 8010478:	af04      	add	r7, sp, #16
 801047a:	60f8      	str	r0, [r7, #12]
 801047c:	60b9      	str	r1, [r7, #8]
 801047e:	607a      	str	r2, [r7, #4]
 8010480:	2300      	movs	r3, #0
 8010482:	613b      	str	r3, [r7, #16]
 8010484:	f3ef 8305 	mrs	r3, IPSR
 8010488:	617b      	str	r3, [r7, #20]
 801048a:	697b      	ldr	r3, [r7, #20]
 801048c:	2b00      	cmp	r3, #0
 801048e:	d17e      	bne.n	801058e <osThreadNew+0x11a>
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d07b      	beq.n	801058e <osThreadNew+0x11a>
 8010496:	2380      	movs	r3, #128	; 0x80
 8010498:	623b      	str	r3, [r7, #32]
 801049a:	2318      	movs	r3, #24
 801049c:	61fb      	str	r3, [r7, #28]
 801049e:	2300      	movs	r3, #0
 80104a0:	627b      	str	r3, [r7, #36]	; 0x24
 80104a2:	f04f 33ff 	mov.w	r3, #4294967295
 80104a6:	61bb      	str	r3, [r7, #24]
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d045      	beq.n	801053a <osThreadNew+0xc6>
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d002      	beq.n	80104bc <osThreadNew+0x48>
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	627b      	str	r3, [r7, #36]	; 0x24
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	699b      	ldr	r3, [r3, #24]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d002      	beq.n	80104ca <osThreadNew+0x56>
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	699b      	ldr	r3, [r3, #24]
 80104c8:	61fb      	str	r3, [r7, #28]
 80104ca:	69fb      	ldr	r3, [r7, #28]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d008      	beq.n	80104e2 <osThreadNew+0x6e>
 80104d0:	69fb      	ldr	r3, [r7, #28]
 80104d2:	2b38      	cmp	r3, #56	; 0x38
 80104d4:	d805      	bhi.n	80104e2 <osThreadNew+0x6e>
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	685b      	ldr	r3, [r3, #4]
 80104da:	f003 0301 	and.w	r3, r3, #1
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d001      	beq.n	80104e6 <osThreadNew+0x72>
 80104e2:	2300      	movs	r3, #0
 80104e4:	e054      	b.n	8010590 <osThreadNew+0x11c>
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	695b      	ldr	r3, [r3, #20]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d003      	beq.n	80104f6 <osThreadNew+0x82>
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	695b      	ldr	r3, [r3, #20]
 80104f2:	089b      	lsrs	r3, r3, #2
 80104f4:	623b      	str	r3, [r7, #32]
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	689b      	ldr	r3, [r3, #8]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d00e      	beq.n	801051c <osThreadNew+0xa8>
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	68db      	ldr	r3, [r3, #12]
 8010502:	2bbf      	cmp	r3, #191	; 0xbf
 8010504:	d90a      	bls.n	801051c <osThreadNew+0xa8>
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	691b      	ldr	r3, [r3, #16]
 801050a:	2b00      	cmp	r3, #0
 801050c:	d006      	beq.n	801051c <osThreadNew+0xa8>
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	695b      	ldr	r3, [r3, #20]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d002      	beq.n	801051c <osThreadNew+0xa8>
 8010516:	2301      	movs	r3, #1
 8010518:	61bb      	str	r3, [r7, #24]
 801051a:	e010      	b.n	801053e <osThreadNew+0xca>
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	689b      	ldr	r3, [r3, #8]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d10c      	bne.n	801053e <osThreadNew+0xca>
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	68db      	ldr	r3, [r3, #12]
 8010528:	2b00      	cmp	r3, #0
 801052a:	d108      	bne.n	801053e <osThreadNew+0xca>
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	691b      	ldr	r3, [r3, #16]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d104      	bne.n	801053e <osThreadNew+0xca>
 8010534:	2300      	movs	r3, #0
 8010536:	61bb      	str	r3, [r7, #24]
 8010538:	e001      	b.n	801053e <osThreadNew+0xca>
 801053a:	2300      	movs	r3, #0
 801053c:	61bb      	str	r3, [r7, #24]
 801053e:	69bb      	ldr	r3, [r7, #24]
 8010540:	2b01      	cmp	r3, #1
 8010542:	d110      	bne.n	8010566 <osThreadNew+0xf2>
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	691b      	ldr	r3, [r3, #16]
 8010548:	687a      	ldr	r2, [r7, #4]
 801054a:	6892      	ldr	r2, [r2, #8]
 801054c:	9202      	str	r2, [sp, #8]
 801054e:	9301      	str	r3, [sp, #4]
 8010550:	69fb      	ldr	r3, [r7, #28]
 8010552:	9300      	str	r3, [sp, #0]
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	6a3a      	ldr	r2, [r7, #32]
 8010558:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801055a:	68f8      	ldr	r0, [r7, #12]
 801055c:	f001 fe64 	bl	8012228 <xTaskCreateStatic>
 8010560:	4603      	mov	r3, r0
 8010562:	613b      	str	r3, [r7, #16]
 8010564:	e013      	b.n	801058e <osThreadNew+0x11a>
 8010566:	69bb      	ldr	r3, [r7, #24]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d110      	bne.n	801058e <osThreadNew+0x11a>
 801056c:	6a3b      	ldr	r3, [r7, #32]
 801056e:	b29a      	uxth	r2, r3
 8010570:	f107 0310 	add.w	r3, r7, #16
 8010574:	9301      	str	r3, [sp, #4]
 8010576:	69fb      	ldr	r3, [r7, #28]
 8010578:	9300      	str	r3, [sp, #0]
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801057e:	68f8      	ldr	r0, [r7, #12]
 8010580:	f001 feaf 	bl	80122e2 <xTaskCreate>
 8010584:	4603      	mov	r3, r0
 8010586:	2b01      	cmp	r3, #1
 8010588:	d001      	beq.n	801058e <osThreadNew+0x11a>
 801058a:	2300      	movs	r3, #0
 801058c:	613b      	str	r3, [r7, #16]
 801058e:	693b      	ldr	r3, [r7, #16]
 8010590:	4618      	mov	r0, r3
 8010592:	3728      	adds	r7, #40	; 0x28
 8010594:	46bd      	mov	sp, r7
 8010596:	bd80      	pop	{r7, pc}

08010598 <osDelay>:
 8010598:	b580      	push	{r7, lr}
 801059a:	b084      	sub	sp, #16
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
 80105a0:	f3ef 8305 	mrs	r3, IPSR
 80105a4:	60bb      	str	r3, [r7, #8]
 80105a6:	68bb      	ldr	r3, [r7, #8]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d003      	beq.n	80105b4 <osDelay+0x1c>
 80105ac:	f06f 0305 	mvn.w	r3, #5
 80105b0:	60fb      	str	r3, [r7, #12]
 80105b2:	e007      	b.n	80105c4 <osDelay+0x2c>
 80105b4:	2300      	movs	r3, #0
 80105b6:	60fb      	str	r3, [r7, #12]
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	d002      	beq.n	80105c4 <osDelay+0x2c>
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f001 ffee 	bl	80125a0 <vTaskDelay>
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	4618      	mov	r0, r3
 80105c8:	3710      	adds	r7, #16
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd80      	pop	{r7, pc}

080105ce <osMutexNew>:
 80105ce:	b580      	push	{r7, lr}
 80105d0:	b088      	sub	sp, #32
 80105d2:	af00      	add	r7, sp, #0
 80105d4:	6078      	str	r0, [r7, #4]
 80105d6:	2300      	movs	r3, #0
 80105d8:	61fb      	str	r3, [r7, #28]
 80105da:	f3ef 8305 	mrs	r3, IPSR
 80105de:	60bb      	str	r3, [r7, #8]
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d174      	bne.n	80106d0 <osMutexNew+0x102>
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d003      	beq.n	80105f4 <osMutexNew+0x26>
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	685b      	ldr	r3, [r3, #4]
 80105f0:	61bb      	str	r3, [r7, #24]
 80105f2:	e001      	b.n	80105f8 <osMutexNew+0x2a>
 80105f4:	2300      	movs	r3, #0
 80105f6:	61bb      	str	r3, [r7, #24]
 80105f8:	69bb      	ldr	r3, [r7, #24]
 80105fa:	f003 0301 	and.w	r3, r3, #1
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d002      	beq.n	8010608 <osMutexNew+0x3a>
 8010602:	2301      	movs	r3, #1
 8010604:	617b      	str	r3, [r7, #20]
 8010606:	e001      	b.n	801060c <osMutexNew+0x3e>
 8010608:	2300      	movs	r3, #0
 801060a:	617b      	str	r3, [r7, #20]
 801060c:	69bb      	ldr	r3, [r7, #24]
 801060e:	f003 0308 	and.w	r3, r3, #8
 8010612:	2b00      	cmp	r3, #0
 8010614:	d15c      	bne.n	80106d0 <osMutexNew+0x102>
 8010616:	f04f 33ff 	mov.w	r3, #4294967295
 801061a:	613b      	str	r3, [r7, #16]
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d015      	beq.n	801064e <osMutexNew+0x80>
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	689b      	ldr	r3, [r3, #8]
 8010626:	2b00      	cmp	r3, #0
 8010628:	d006      	beq.n	8010638 <osMutexNew+0x6a>
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	68db      	ldr	r3, [r3, #12]
 801062e:	2b4f      	cmp	r3, #79	; 0x4f
 8010630:	d902      	bls.n	8010638 <osMutexNew+0x6a>
 8010632:	2301      	movs	r3, #1
 8010634:	613b      	str	r3, [r7, #16]
 8010636:	e00c      	b.n	8010652 <osMutexNew+0x84>
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	689b      	ldr	r3, [r3, #8]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d108      	bne.n	8010652 <osMutexNew+0x84>
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	68db      	ldr	r3, [r3, #12]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d104      	bne.n	8010652 <osMutexNew+0x84>
 8010648:	2300      	movs	r3, #0
 801064a:	613b      	str	r3, [r7, #16]
 801064c:	e001      	b.n	8010652 <osMutexNew+0x84>
 801064e:	2300      	movs	r3, #0
 8010650:	613b      	str	r3, [r7, #16]
 8010652:	693b      	ldr	r3, [r7, #16]
 8010654:	2b01      	cmp	r3, #1
 8010656:	d112      	bne.n	801067e <osMutexNew+0xb0>
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	2b00      	cmp	r3, #0
 801065c:	d007      	beq.n	801066e <osMutexNew+0xa0>
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	689b      	ldr	r3, [r3, #8]
 8010662:	4619      	mov	r1, r3
 8010664:	2004      	movs	r0, #4
 8010666:	f000 fc48 	bl	8010efa <xQueueCreateMutexStatic>
 801066a:	61f8      	str	r0, [r7, #28]
 801066c:	e016      	b.n	801069c <osMutexNew+0xce>
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	689b      	ldr	r3, [r3, #8]
 8010672:	4619      	mov	r1, r3
 8010674:	2001      	movs	r0, #1
 8010676:	f000 fc40 	bl	8010efa <xQueueCreateMutexStatic>
 801067a:	61f8      	str	r0, [r7, #28]
 801067c:	e00e      	b.n	801069c <osMutexNew+0xce>
 801067e:	693b      	ldr	r3, [r7, #16]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d10b      	bne.n	801069c <osMutexNew+0xce>
 8010684:	697b      	ldr	r3, [r7, #20]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d004      	beq.n	8010694 <osMutexNew+0xc6>
 801068a:	2004      	movs	r0, #4
 801068c:	f000 fc1d 	bl	8010eca <xQueueCreateMutex>
 8010690:	61f8      	str	r0, [r7, #28]
 8010692:	e003      	b.n	801069c <osMutexNew+0xce>
 8010694:	2001      	movs	r0, #1
 8010696:	f000 fc18 	bl	8010eca <xQueueCreateMutex>
 801069a:	61f8      	str	r0, [r7, #28]
 801069c:	69fb      	ldr	r3, [r7, #28]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d00c      	beq.n	80106bc <osMutexNew+0xee>
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d003      	beq.n	80106b0 <osMutexNew+0xe2>
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	60fb      	str	r3, [r7, #12]
 80106ae:	e001      	b.n	80106b4 <osMutexNew+0xe6>
 80106b0:	2300      	movs	r3, #0
 80106b2:	60fb      	str	r3, [r7, #12]
 80106b4:	68f9      	ldr	r1, [r7, #12]
 80106b6:	69f8      	ldr	r0, [r7, #28]
 80106b8:	f001 f9d2 	bl	8011a60 <vQueueAddToRegistry>
 80106bc:	69fb      	ldr	r3, [r7, #28]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d006      	beq.n	80106d0 <osMutexNew+0x102>
 80106c2:	697b      	ldr	r3, [r7, #20]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d003      	beq.n	80106d0 <osMutexNew+0x102>
 80106c8:	69fb      	ldr	r3, [r7, #28]
 80106ca:	f043 0301 	orr.w	r3, r3, #1
 80106ce:	61fb      	str	r3, [r7, #28]
 80106d0:	69fb      	ldr	r3, [r7, #28]
 80106d2:	4618      	mov	r0, r3
 80106d4:	3720      	adds	r7, #32
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}

080106da <osMutexAcquire>:
 80106da:	b580      	push	{r7, lr}
 80106dc:	b086      	sub	sp, #24
 80106de:	af00      	add	r7, sp, #0
 80106e0:	6078      	str	r0, [r7, #4]
 80106e2:	6039      	str	r1, [r7, #0]
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f023 0301 	bic.w	r3, r3, #1
 80106ea:	613b      	str	r3, [r7, #16]
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	f003 0301 	and.w	r3, r3, #1
 80106f2:	60fb      	str	r3, [r7, #12]
 80106f4:	2300      	movs	r3, #0
 80106f6:	617b      	str	r3, [r7, #20]
 80106f8:	f3ef 8305 	mrs	r3, IPSR
 80106fc:	60bb      	str	r3, [r7, #8]
 80106fe:	68bb      	ldr	r3, [r7, #8]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d003      	beq.n	801070c <osMutexAcquire+0x32>
 8010704:	f06f 0305 	mvn.w	r3, #5
 8010708:	617b      	str	r3, [r7, #20]
 801070a:	e02c      	b.n	8010766 <osMutexAcquire+0x8c>
 801070c:	693b      	ldr	r3, [r7, #16]
 801070e:	2b00      	cmp	r3, #0
 8010710:	d103      	bne.n	801071a <osMutexAcquire+0x40>
 8010712:	f06f 0303 	mvn.w	r3, #3
 8010716:	617b      	str	r3, [r7, #20]
 8010718:	e025      	b.n	8010766 <osMutexAcquire+0x8c>
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	2b00      	cmp	r3, #0
 801071e:	d011      	beq.n	8010744 <osMutexAcquire+0x6a>
 8010720:	6839      	ldr	r1, [r7, #0]
 8010722:	6938      	ldr	r0, [r7, #16]
 8010724:	f000 fc38 	bl	8010f98 <xQueueTakeMutexRecursive>
 8010728:	4603      	mov	r3, r0
 801072a:	2b01      	cmp	r3, #1
 801072c:	d01b      	beq.n	8010766 <osMutexAcquire+0x8c>
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d003      	beq.n	801073c <osMutexAcquire+0x62>
 8010734:	f06f 0301 	mvn.w	r3, #1
 8010738:	617b      	str	r3, [r7, #20]
 801073a:	e014      	b.n	8010766 <osMutexAcquire+0x8c>
 801073c:	f06f 0302 	mvn.w	r3, #2
 8010740:	617b      	str	r3, [r7, #20]
 8010742:	e010      	b.n	8010766 <osMutexAcquire+0x8c>
 8010744:	6839      	ldr	r1, [r7, #0]
 8010746:	6938      	ldr	r0, [r7, #16]
 8010748:	f000 fed6 	bl	80114f8 <xQueueSemaphoreTake>
 801074c:	4603      	mov	r3, r0
 801074e:	2b01      	cmp	r3, #1
 8010750:	d009      	beq.n	8010766 <osMutexAcquire+0x8c>
 8010752:	683b      	ldr	r3, [r7, #0]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d003      	beq.n	8010760 <osMutexAcquire+0x86>
 8010758:	f06f 0301 	mvn.w	r3, #1
 801075c:	617b      	str	r3, [r7, #20]
 801075e:	e002      	b.n	8010766 <osMutexAcquire+0x8c>
 8010760:	f06f 0302 	mvn.w	r3, #2
 8010764:	617b      	str	r3, [r7, #20]
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	4618      	mov	r0, r3
 801076a:	3718      	adds	r7, #24
 801076c:	46bd      	mov	sp, r7
 801076e:	bd80      	pop	{r7, pc}

08010770 <osMutexRelease>:
 8010770:	b580      	push	{r7, lr}
 8010772:	b086      	sub	sp, #24
 8010774:	af00      	add	r7, sp, #0
 8010776:	6078      	str	r0, [r7, #4]
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f023 0301 	bic.w	r3, r3, #1
 801077e:	613b      	str	r3, [r7, #16]
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	f003 0301 	and.w	r3, r3, #1
 8010786:	60fb      	str	r3, [r7, #12]
 8010788:	2300      	movs	r3, #0
 801078a:	617b      	str	r3, [r7, #20]
 801078c:	f3ef 8305 	mrs	r3, IPSR
 8010790:	60bb      	str	r3, [r7, #8]
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d003      	beq.n	80107a0 <osMutexRelease+0x30>
 8010798:	f06f 0305 	mvn.w	r3, #5
 801079c:	617b      	str	r3, [r7, #20]
 801079e:	e01f      	b.n	80107e0 <osMutexRelease+0x70>
 80107a0:	693b      	ldr	r3, [r7, #16]
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d103      	bne.n	80107ae <osMutexRelease+0x3e>
 80107a6:	f06f 0303 	mvn.w	r3, #3
 80107aa:	617b      	str	r3, [r7, #20]
 80107ac:	e018      	b.n	80107e0 <osMutexRelease+0x70>
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d009      	beq.n	80107c8 <osMutexRelease+0x58>
 80107b4:	6938      	ldr	r0, [r7, #16]
 80107b6:	f000 fbbb 	bl	8010f30 <xQueueGiveMutexRecursive>
 80107ba:	4603      	mov	r3, r0
 80107bc:	2b01      	cmp	r3, #1
 80107be:	d00f      	beq.n	80107e0 <osMutexRelease+0x70>
 80107c0:	f06f 0302 	mvn.w	r3, #2
 80107c4:	617b      	str	r3, [r7, #20]
 80107c6:	e00b      	b.n	80107e0 <osMutexRelease+0x70>
 80107c8:	2300      	movs	r3, #0
 80107ca:	2200      	movs	r2, #0
 80107cc:	2100      	movs	r1, #0
 80107ce:	6938      	ldr	r0, [r7, #16]
 80107d0:	f000 fc18 	bl	8011004 <xQueueGenericSend>
 80107d4:	4603      	mov	r3, r0
 80107d6:	2b01      	cmp	r3, #1
 80107d8:	d002      	beq.n	80107e0 <osMutexRelease+0x70>
 80107da:	f06f 0302 	mvn.w	r3, #2
 80107de:	617b      	str	r3, [r7, #20]
 80107e0:	697b      	ldr	r3, [r7, #20]
 80107e2:	4618      	mov	r0, r3
 80107e4:	3718      	adds	r7, #24
 80107e6:	46bd      	mov	sp, r7
 80107e8:	bd80      	pop	{r7, pc}

080107ea <osMessageQueueNew>:
 80107ea:	b580      	push	{r7, lr}
 80107ec:	b08a      	sub	sp, #40	; 0x28
 80107ee:	af02      	add	r7, sp, #8
 80107f0:	60f8      	str	r0, [r7, #12]
 80107f2:	60b9      	str	r1, [r7, #8]
 80107f4:	607a      	str	r2, [r7, #4]
 80107f6:	2300      	movs	r3, #0
 80107f8:	61fb      	str	r3, [r7, #28]
 80107fa:	f3ef 8305 	mrs	r3, IPSR
 80107fe:	613b      	str	r3, [r7, #16]
 8010800:	693b      	ldr	r3, [r7, #16]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d15f      	bne.n	80108c6 <osMessageQueueNew+0xdc>
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d05c      	beq.n	80108c6 <osMessageQueueNew+0xdc>
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	2b00      	cmp	r3, #0
 8010810:	d059      	beq.n	80108c6 <osMessageQueueNew+0xdc>
 8010812:	f04f 33ff 	mov.w	r3, #4294967295
 8010816:	61bb      	str	r3, [r7, #24]
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d029      	beq.n	8010872 <osMessageQueueNew+0x88>
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	689b      	ldr	r3, [r3, #8]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d012      	beq.n	801084c <osMessageQueueNew+0x62>
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	68db      	ldr	r3, [r3, #12]
 801082a:	2b4f      	cmp	r3, #79	; 0x4f
 801082c:	d90e      	bls.n	801084c <osMessageQueueNew+0x62>
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	691b      	ldr	r3, [r3, #16]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d00a      	beq.n	801084c <osMessageQueueNew+0x62>
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	695a      	ldr	r2, [r3, #20]
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	68b9      	ldr	r1, [r7, #8]
 801083e:	fb01 f303 	mul.w	r3, r1, r3
 8010842:	429a      	cmp	r2, r3
 8010844:	d302      	bcc.n	801084c <osMessageQueueNew+0x62>
 8010846:	2301      	movs	r3, #1
 8010848:	61bb      	str	r3, [r7, #24]
 801084a:	e014      	b.n	8010876 <osMessageQueueNew+0x8c>
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	689b      	ldr	r3, [r3, #8]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d110      	bne.n	8010876 <osMessageQueueNew+0x8c>
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	68db      	ldr	r3, [r3, #12]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d10c      	bne.n	8010876 <osMessageQueueNew+0x8c>
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	691b      	ldr	r3, [r3, #16]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d108      	bne.n	8010876 <osMessageQueueNew+0x8c>
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	695b      	ldr	r3, [r3, #20]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d104      	bne.n	8010876 <osMessageQueueNew+0x8c>
 801086c:	2300      	movs	r3, #0
 801086e:	61bb      	str	r3, [r7, #24]
 8010870:	e001      	b.n	8010876 <osMessageQueueNew+0x8c>
 8010872:	2300      	movs	r3, #0
 8010874:	61bb      	str	r3, [r7, #24]
 8010876:	69bb      	ldr	r3, [r7, #24]
 8010878:	2b01      	cmp	r3, #1
 801087a:	d10b      	bne.n	8010894 <osMessageQueueNew+0xaa>
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	691a      	ldr	r2, [r3, #16]
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	689b      	ldr	r3, [r3, #8]
 8010884:	2100      	movs	r1, #0
 8010886:	9100      	str	r1, [sp, #0]
 8010888:	68b9      	ldr	r1, [r7, #8]
 801088a:	68f8      	ldr	r0, [r7, #12]
 801088c:	f000 fa2e 	bl	8010cec <xQueueGenericCreateStatic>
 8010890:	61f8      	str	r0, [r7, #28]
 8010892:	e008      	b.n	80108a6 <osMessageQueueNew+0xbc>
 8010894:	69bb      	ldr	r3, [r7, #24]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d105      	bne.n	80108a6 <osMessageQueueNew+0xbc>
 801089a:	2200      	movs	r2, #0
 801089c:	68b9      	ldr	r1, [r7, #8]
 801089e:	68f8      	ldr	r0, [r7, #12]
 80108a0:	f000 fa9c 	bl	8010ddc <xQueueGenericCreate>
 80108a4:	61f8      	str	r0, [r7, #28]
 80108a6:	69fb      	ldr	r3, [r7, #28]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d00c      	beq.n	80108c6 <osMessageQueueNew+0xdc>
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d003      	beq.n	80108ba <osMessageQueueNew+0xd0>
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	617b      	str	r3, [r7, #20]
 80108b8:	e001      	b.n	80108be <osMessageQueueNew+0xd4>
 80108ba:	2300      	movs	r3, #0
 80108bc:	617b      	str	r3, [r7, #20]
 80108be:	6979      	ldr	r1, [r7, #20]
 80108c0:	69f8      	ldr	r0, [r7, #28]
 80108c2:	f001 f8cd 	bl	8011a60 <vQueueAddToRegistry>
 80108c6:	69fb      	ldr	r3, [r7, #28]
 80108c8:	4618      	mov	r0, r3
 80108ca:	3720      	adds	r7, #32
 80108cc:	46bd      	mov	sp, r7
 80108ce:	bd80      	pop	{r7, pc}

080108d0 <osMessageQueuePut>:
 80108d0:	b580      	push	{r7, lr}
 80108d2:	b088      	sub	sp, #32
 80108d4:	af00      	add	r7, sp, #0
 80108d6:	60f8      	str	r0, [r7, #12]
 80108d8:	60b9      	str	r1, [r7, #8]
 80108da:	603b      	str	r3, [r7, #0]
 80108dc:	4613      	mov	r3, r2
 80108de:	71fb      	strb	r3, [r7, #7]
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	61bb      	str	r3, [r7, #24]
 80108e4:	2300      	movs	r3, #0
 80108e6:	61fb      	str	r3, [r7, #28]
 80108e8:	f3ef 8305 	mrs	r3, IPSR
 80108ec:	617b      	str	r3, [r7, #20]
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d028      	beq.n	8010946 <osMessageQueuePut+0x76>
 80108f4:	69bb      	ldr	r3, [r7, #24]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d005      	beq.n	8010906 <osMessageQueuePut+0x36>
 80108fa:	68bb      	ldr	r3, [r7, #8]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d002      	beq.n	8010906 <osMessageQueuePut+0x36>
 8010900:	683b      	ldr	r3, [r7, #0]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d003      	beq.n	801090e <osMessageQueuePut+0x3e>
 8010906:	f06f 0303 	mvn.w	r3, #3
 801090a:	61fb      	str	r3, [r7, #28]
 801090c:	e038      	b.n	8010980 <osMessageQueuePut+0xb0>
 801090e:	2300      	movs	r3, #0
 8010910:	613b      	str	r3, [r7, #16]
 8010912:	f107 0210 	add.w	r2, r7, #16
 8010916:	2300      	movs	r3, #0
 8010918:	68b9      	ldr	r1, [r7, #8]
 801091a:	69b8      	ldr	r0, [r7, #24]
 801091c:	f000 fc70 	bl	8011200 <xQueueGenericSendFromISR>
 8010920:	4603      	mov	r3, r0
 8010922:	2b01      	cmp	r3, #1
 8010924:	d003      	beq.n	801092e <osMessageQueuePut+0x5e>
 8010926:	f06f 0302 	mvn.w	r3, #2
 801092a:	61fb      	str	r3, [r7, #28]
 801092c:	e028      	b.n	8010980 <osMessageQueuePut+0xb0>
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d025      	beq.n	8010980 <osMessageQueuePut+0xb0>
 8010934:	4b15      	ldr	r3, [pc, #84]	; (801098c <osMessageQueuePut+0xbc>)
 8010936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801093a:	601a      	str	r2, [r3, #0]
 801093c:	f3bf 8f4f 	dsb	sy
 8010940:	f3bf 8f6f 	isb	sy
 8010944:	e01c      	b.n	8010980 <osMessageQueuePut+0xb0>
 8010946:	69bb      	ldr	r3, [r7, #24]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d002      	beq.n	8010952 <osMessageQueuePut+0x82>
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d103      	bne.n	801095a <osMessageQueuePut+0x8a>
 8010952:	f06f 0303 	mvn.w	r3, #3
 8010956:	61fb      	str	r3, [r7, #28]
 8010958:	e012      	b.n	8010980 <osMessageQueuePut+0xb0>
 801095a:	2300      	movs	r3, #0
 801095c:	683a      	ldr	r2, [r7, #0]
 801095e:	68b9      	ldr	r1, [r7, #8]
 8010960:	69b8      	ldr	r0, [r7, #24]
 8010962:	f000 fb4f 	bl	8011004 <xQueueGenericSend>
 8010966:	4603      	mov	r3, r0
 8010968:	2b01      	cmp	r3, #1
 801096a:	d009      	beq.n	8010980 <osMessageQueuePut+0xb0>
 801096c:	683b      	ldr	r3, [r7, #0]
 801096e:	2b00      	cmp	r3, #0
 8010970:	d003      	beq.n	801097a <osMessageQueuePut+0xaa>
 8010972:	f06f 0301 	mvn.w	r3, #1
 8010976:	61fb      	str	r3, [r7, #28]
 8010978:	e002      	b.n	8010980 <osMessageQueuePut+0xb0>
 801097a:	f06f 0302 	mvn.w	r3, #2
 801097e:	61fb      	str	r3, [r7, #28]
 8010980:	69fb      	ldr	r3, [r7, #28]
 8010982:	4618      	mov	r0, r3
 8010984:	3720      	adds	r7, #32
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}
 801098a:	bf00      	nop
 801098c:	e000ed04 	.word	0xe000ed04

08010990 <osMessageQueueGet>:
 8010990:	b580      	push	{r7, lr}
 8010992:	b088      	sub	sp, #32
 8010994:	af00      	add	r7, sp, #0
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	60b9      	str	r1, [r7, #8]
 801099a:	607a      	str	r2, [r7, #4]
 801099c:	603b      	str	r3, [r7, #0]
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	61bb      	str	r3, [r7, #24]
 80109a2:	2300      	movs	r3, #0
 80109a4:	61fb      	str	r3, [r7, #28]
 80109a6:	f3ef 8305 	mrs	r3, IPSR
 80109aa:	617b      	str	r3, [r7, #20]
 80109ac:	697b      	ldr	r3, [r7, #20]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d028      	beq.n	8010a04 <osMessageQueueGet+0x74>
 80109b2:	69bb      	ldr	r3, [r7, #24]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d005      	beq.n	80109c4 <osMessageQueueGet+0x34>
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d002      	beq.n	80109c4 <osMessageQueueGet+0x34>
 80109be:	683b      	ldr	r3, [r7, #0]
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d003      	beq.n	80109cc <osMessageQueueGet+0x3c>
 80109c4:	f06f 0303 	mvn.w	r3, #3
 80109c8:	61fb      	str	r3, [r7, #28]
 80109ca:	e037      	b.n	8010a3c <osMessageQueueGet+0xac>
 80109cc:	2300      	movs	r3, #0
 80109ce:	613b      	str	r3, [r7, #16]
 80109d0:	f107 0310 	add.w	r3, r7, #16
 80109d4:	461a      	mov	r2, r3
 80109d6:	68b9      	ldr	r1, [r7, #8]
 80109d8:	69b8      	ldr	r0, [r7, #24]
 80109da:	f000 fe99 	bl	8011710 <xQueueReceiveFromISR>
 80109de:	4603      	mov	r3, r0
 80109e0:	2b01      	cmp	r3, #1
 80109e2:	d003      	beq.n	80109ec <osMessageQueueGet+0x5c>
 80109e4:	f06f 0302 	mvn.w	r3, #2
 80109e8:	61fb      	str	r3, [r7, #28]
 80109ea:	e027      	b.n	8010a3c <osMessageQueueGet+0xac>
 80109ec:	693b      	ldr	r3, [r7, #16]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d024      	beq.n	8010a3c <osMessageQueueGet+0xac>
 80109f2:	4b15      	ldr	r3, [pc, #84]	; (8010a48 <osMessageQueueGet+0xb8>)
 80109f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109f8:	601a      	str	r2, [r3, #0]
 80109fa:	f3bf 8f4f 	dsb	sy
 80109fe:	f3bf 8f6f 	isb	sy
 8010a02:	e01b      	b.n	8010a3c <osMessageQueueGet+0xac>
 8010a04:	69bb      	ldr	r3, [r7, #24]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d002      	beq.n	8010a10 <osMessageQueueGet+0x80>
 8010a0a:	68bb      	ldr	r3, [r7, #8]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d103      	bne.n	8010a18 <osMessageQueueGet+0x88>
 8010a10:	f06f 0303 	mvn.w	r3, #3
 8010a14:	61fb      	str	r3, [r7, #28]
 8010a16:	e011      	b.n	8010a3c <osMessageQueueGet+0xac>
 8010a18:	683a      	ldr	r2, [r7, #0]
 8010a1a:	68b9      	ldr	r1, [r7, #8]
 8010a1c:	69b8      	ldr	r0, [r7, #24]
 8010a1e:	f000 fc8b 	bl	8011338 <xQueueReceive>
 8010a22:	4603      	mov	r3, r0
 8010a24:	2b01      	cmp	r3, #1
 8010a26:	d009      	beq.n	8010a3c <osMessageQueueGet+0xac>
 8010a28:	683b      	ldr	r3, [r7, #0]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d003      	beq.n	8010a36 <osMessageQueueGet+0xa6>
 8010a2e:	f06f 0301 	mvn.w	r3, #1
 8010a32:	61fb      	str	r3, [r7, #28]
 8010a34:	e002      	b.n	8010a3c <osMessageQueueGet+0xac>
 8010a36:	f06f 0302 	mvn.w	r3, #2
 8010a3a:	61fb      	str	r3, [r7, #28]
 8010a3c:	69fb      	ldr	r3, [r7, #28]
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3720      	adds	r7, #32
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}
 8010a46:	bf00      	nop
 8010a48:	e000ed04 	.word	0xe000ed04

08010a4c <vApplicationGetIdleTaskMemory>:
 8010a4c:	b480      	push	{r7}
 8010a4e:	b085      	sub	sp, #20
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	60f8      	str	r0, [r7, #12]
 8010a54:	60b9      	str	r1, [r7, #8]
 8010a56:	607a      	str	r2, [r7, #4]
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	4a07      	ldr	r2, [pc, #28]	; (8010a78 <vApplicationGetIdleTaskMemory+0x2c>)
 8010a5c:	601a      	str	r2, [r3, #0]
 8010a5e:	68bb      	ldr	r3, [r7, #8]
 8010a60:	4a06      	ldr	r2, [pc, #24]	; (8010a7c <vApplicationGetIdleTaskMemory+0x30>)
 8010a62:	601a      	str	r2, [r3, #0]
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	2280      	movs	r2, #128	; 0x80
 8010a68:	601a      	str	r2, [r3, #0]
 8010a6a:	bf00      	nop
 8010a6c:	3714      	adds	r7, #20
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a74:	4770      	bx	lr
 8010a76:	bf00      	nop
 8010a78:	20001488 	.word	0x20001488
 8010a7c:	20001548 	.word	0x20001548

08010a80 <vApplicationGetTimerTaskMemory>:
 8010a80:	b480      	push	{r7}
 8010a82:	b085      	sub	sp, #20
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	60f8      	str	r0, [r7, #12]
 8010a88:	60b9      	str	r1, [r7, #8]
 8010a8a:	607a      	str	r2, [r7, #4]
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	4a07      	ldr	r2, [pc, #28]	; (8010aac <vApplicationGetTimerTaskMemory+0x2c>)
 8010a90:	601a      	str	r2, [r3, #0]
 8010a92:	68bb      	ldr	r3, [r7, #8]
 8010a94:	4a06      	ldr	r2, [pc, #24]	; (8010ab0 <vApplicationGetTimerTaskMemory+0x30>)
 8010a96:	601a      	str	r2, [r3, #0]
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010a9e:	601a      	str	r2, [r3, #0]
 8010aa0:	bf00      	nop
 8010aa2:	3714      	adds	r7, #20
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aaa:	4770      	bx	lr
 8010aac:	20001748 	.word	0x20001748
 8010ab0:	20001808 	.word	0x20001808

08010ab4 <vListInitialise>:
 8010ab4:	b480      	push	{r7}
 8010ab6:	b083      	sub	sp, #12
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f103 0208 	add.w	r2, r3, #8
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	605a      	str	r2, [r3, #4]
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8010acc:	609a      	str	r2, [r3, #8]
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	f103 0208 	add.w	r2, r3, #8
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	60da      	str	r2, [r3, #12]
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	f103 0208 	add.w	r2, r3, #8
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	611a      	str	r2, [r3, #16]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	2200      	movs	r2, #0
 8010ae6:	601a      	str	r2, [r3, #0]
 8010ae8:	bf00      	nop
 8010aea:	370c      	adds	r7, #12
 8010aec:	46bd      	mov	sp, r7
 8010aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af2:	4770      	bx	lr

08010af4 <vListInitialiseItem>:
 8010af4:	b480      	push	{r7}
 8010af6:	b083      	sub	sp, #12
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	2200      	movs	r2, #0
 8010b00:	611a      	str	r2, [r3, #16]
 8010b02:	bf00      	nop
 8010b04:	370c      	adds	r7, #12
 8010b06:	46bd      	mov	sp, r7
 8010b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0c:	4770      	bx	lr

08010b0e <vListInsertEnd>:
 8010b0e:	b480      	push	{r7}
 8010b10:	b085      	sub	sp, #20
 8010b12:	af00      	add	r7, sp, #0
 8010b14:	6078      	str	r0, [r7, #4]
 8010b16:	6039      	str	r1, [r7, #0]
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	685b      	ldr	r3, [r3, #4]
 8010b1c:	60fb      	str	r3, [r7, #12]
 8010b1e:	683b      	ldr	r3, [r7, #0]
 8010b20:	68fa      	ldr	r2, [r7, #12]
 8010b22:	605a      	str	r2, [r3, #4]
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	689a      	ldr	r2, [r3, #8]
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	609a      	str	r2, [r3, #8]
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	689b      	ldr	r3, [r3, #8]
 8010b30:	683a      	ldr	r2, [r7, #0]
 8010b32:	605a      	str	r2, [r3, #4]
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	683a      	ldr	r2, [r7, #0]
 8010b38:	609a      	str	r2, [r3, #8]
 8010b3a:	683b      	ldr	r3, [r7, #0]
 8010b3c:	687a      	ldr	r2, [r7, #4]
 8010b3e:	611a      	str	r2, [r3, #16]
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	681b      	ldr	r3, [r3, #0]
 8010b44:	1c5a      	adds	r2, r3, #1
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	601a      	str	r2, [r3, #0]
 8010b4a:	bf00      	nop
 8010b4c:	3714      	adds	r7, #20
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b54:	4770      	bx	lr

08010b56 <vListInsert>:
 8010b56:	b480      	push	{r7}
 8010b58:	b085      	sub	sp, #20
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	6078      	str	r0, [r7, #4]
 8010b5e:	6039      	str	r1, [r7, #0]
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	60bb      	str	r3, [r7, #8]
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b6c:	d103      	bne.n	8010b76 <vListInsert+0x20>
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	691b      	ldr	r3, [r3, #16]
 8010b72:	60fb      	str	r3, [r7, #12]
 8010b74:	e00c      	b.n	8010b90 <vListInsert+0x3a>
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	3308      	adds	r3, #8
 8010b7a:	60fb      	str	r3, [r7, #12]
 8010b7c:	e002      	b.n	8010b84 <vListInsert+0x2e>
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	685b      	ldr	r3, [r3, #4]
 8010b82:	60fb      	str	r3, [r7, #12]
 8010b84:	68fb      	ldr	r3, [r7, #12]
 8010b86:	685b      	ldr	r3, [r3, #4]
 8010b88:	681b      	ldr	r3, [r3, #0]
 8010b8a:	68ba      	ldr	r2, [r7, #8]
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d2f6      	bcs.n	8010b7e <vListInsert+0x28>
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	685a      	ldr	r2, [r3, #4]
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	605a      	str	r2, [r3, #4]
 8010b98:	683b      	ldr	r3, [r7, #0]
 8010b9a:	685b      	ldr	r3, [r3, #4]
 8010b9c:	683a      	ldr	r2, [r7, #0]
 8010b9e:	609a      	str	r2, [r3, #8]
 8010ba0:	683b      	ldr	r3, [r7, #0]
 8010ba2:	68fa      	ldr	r2, [r7, #12]
 8010ba4:	609a      	str	r2, [r3, #8]
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	683a      	ldr	r2, [r7, #0]
 8010baa:	605a      	str	r2, [r3, #4]
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	687a      	ldr	r2, [r7, #4]
 8010bb0:	611a      	str	r2, [r3, #16]
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	1c5a      	adds	r2, r3, #1
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	601a      	str	r2, [r3, #0]
 8010bbc:	bf00      	nop
 8010bbe:	3714      	adds	r7, #20
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc6:	4770      	bx	lr

08010bc8 <uxListRemove>:
 8010bc8:	b480      	push	{r7}
 8010bca:	b085      	sub	sp, #20
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	691b      	ldr	r3, [r3, #16]
 8010bd4:	60fb      	str	r3, [r7, #12]
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	685b      	ldr	r3, [r3, #4]
 8010bda:	687a      	ldr	r2, [r7, #4]
 8010bdc:	6892      	ldr	r2, [r2, #8]
 8010bde:	609a      	str	r2, [r3, #8]
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	689b      	ldr	r3, [r3, #8]
 8010be4:	687a      	ldr	r2, [r7, #4]
 8010be6:	6852      	ldr	r2, [r2, #4]
 8010be8:	605a      	str	r2, [r3, #4]
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	685b      	ldr	r3, [r3, #4]
 8010bee:	687a      	ldr	r2, [r7, #4]
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d103      	bne.n	8010bfc <uxListRemove+0x34>
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	689a      	ldr	r2, [r3, #8]
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	605a      	str	r2, [r3, #4]
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2200      	movs	r2, #0
 8010c00:	611a      	str	r2, [r3, #16]
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	1e5a      	subs	r2, r3, #1
 8010c08:	68fb      	ldr	r3, [r7, #12]
 8010c0a:	601a      	str	r2, [r3, #0]
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	4618      	mov	r0, r3
 8010c12:	3714      	adds	r7, #20
 8010c14:	46bd      	mov	sp, r7
 8010c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c1a:	4770      	bx	lr

08010c1c <xQueueGenericReset>:
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b084      	sub	sp, #16
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
 8010c24:	6039      	str	r1, [r7, #0]
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	60fb      	str	r3, [r7, #12]
 8010c2a:	68fb      	ldr	r3, [r7, #12]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d10a      	bne.n	8010c46 <xQueueGenericReset+0x2a>
 8010c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c34:	f383 8811 	msr	BASEPRI, r3
 8010c38:	f3bf 8f6f 	isb	sy
 8010c3c:	f3bf 8f4f 	dsb	sy
 8010c40:	60bb      	str	r3, [r7, #8]
 8010c42:	bf00      	nop
 8010c44:	e7fe      	b.n	8010c44 <xQueueGenericReset+0x28>
 8010c46:	f003 f93d 	bl	8013ec4 <vPortEnterCritical>
 8010c4a:	68fb      	ldr	r3, [r7, #12]
 8010c4c:	681a      	ldr	r2, [r3, #0]
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c52:	68f9      	ldr	r1, [r7, #12]
 8010c54:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010c56:	fb01 f303 	mul.w	r3, r1, r3
 8010c5a:	441a      	add	r2, r3
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	609a      	str	r2, [r3, #8]
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	2200      	movs	r2, #0
 8010c64:	639a      	str	r2, [r3, #56]	; 0x38
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	681a      	ldr	r2, [r3, #0]
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	605a      	str	r2, [r3, #4]
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	681a      	ldr	r2, [r3, #0]
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c76:	3b01      	subs	r3, #1
 8010c78:	68f9      	ldr	r1, [r7, #12]
 8010c7a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010c7c:	fb01 f303 	mul.w	r3, r1, r3
 8010c80:	441a      	add	r2, r3
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	60da      	str	r2, [r3, #12]
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	22ff      	movs	r2, #255	; 0xff
 8010c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	22ff      	movs	r2, #255	; 0xff
 8010c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010c96:	683b      	ldr	r3, [r7, #0]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d114      	bne.n	8010cc6 <xQueueGenericReset+0xaa>
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	691b      	ldr	r3, [r3, #16]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d01a      	beq.n	8010cda <xQueueGenericReset+0xbe>
 8010ca4:	68fb      	ldr	r3, [r7, #12]
 8010ca6:	3310      	adds	r3, #16
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f001 ff75 	bl	8012b98 <xTaskRemoveFromEventList>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d012      	beq.n	8010cda <xQueueGenericReset+0xbe>
 8010cb4:	4b0c      	ldr	r3, [pc, #48]	; (8010ce8 <xQueueGenericReset+0xcc>)
 8010cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cba:	601a      	str	r2, [r3, #0]
 8010cbc:	f3bf 8f4f 	dsb	sy
 8010cc0:	f3bf 8f6f 	isb	sy
 8010cc4:	e009      	b.n	8010cda <xQueueGenericReset+0xbe>
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	3310      	adds	r3, #16
 8010cca:	4618      	mov	r0, r3
 8010ccc:	f7ff fef2 	bl	8010ab4 <vListInitialise>
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	3324      	adds	r3, #36	; 0x24
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f7ff feed 	bl	8010ab4 <vListInitialise>
 8010cda:	f003 f923 	bl	8013f24 <vPortExitCritical>
 8010cde:	2301      	movs	r3, #1
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3710      	adds	r7, #16
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}
 8010ce8:	e000ed04 	.word	0xe000ed04

08010cec <xQueueGenericCreateStatic>:
 8010cec:	b580      	push	{r7, lr}
 8010cee:	b08e      	sub	sp, #56	; 0x38
 8010cf0:	af02      	add	r7, sp, #8
 8010cf2:	60f8      	str	r0, [r7, #12]
 8010cf4:	60b9      	str	r1, [r7, #8]
 8010cf6:	607a      	str	r2, [r7, #4]
 8010cf8:	603b      	str	r3, [r7, #0]
 8010cfa:	68fb      	ldr	r3, [r7, #12]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d10a      	bne.n	8010d16 <xQueueGenericCreateStatic+0x2a>
 8010d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d04:	f383 8811 	msr	BASEPRI, r3
 8010d08:	f3bf 8f6f 	isb	sy
 8010d0c:	f3bf 8f4f 	dsb	sy
 8010d10:	62bb      	str	r3, [r7, #40]	; 0x28
 8010d12:	bf00      	nop
 8010d14:	e7fe      	b.n	8010d14 <xQueueGenericCreateStatic+0x28>
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d10a      	bne.n	8010d32 <xQueueGenericCreateStatic+0x46>
 8010d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d20:	f383 8811 	msr	BASEPRI, r3
 8010d24:	f3bf 8f6f 	isb	sy
 8010d28:	f3bf 8f4f 	dsb	sy
 8010d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8010d2e:	bf00      	nop
 8010d30:	e7fe      	b.n	8010d30 <xQueueGenericCreateStatic+0x44>
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d002      	beq.n	8010d3e <xQueueGenericCreateStatic+0x52>
 8010d38:	68bb      	ldr	r3, [r7, #8]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d001      	beq.n	8010d42 <xQueueGenericCreateStatic+0x56>
 8010d3e:	2301      	movs	r3, #1
 8010d40:	e000      	b.n	8010d44 <xQueueGenericCreateStatic+0x58>
 8010d42:	2300      	movs	r3, #0
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d10a      	bne.n	8010d5e <xQueueGenericCreateStatic+0x72>
 8010d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d4c:	f383 8811 	msr	BASEPRI, r3
 8010d50:	f3bf 8f6f 	isb	sy
 8010d54:	f3bf 8f4f 	dsb	sy
 8010d58:	623b      	str	r3, [r7, #32]
 8010d5a:	bf00      	nop
 8010d5c:	e7fe      	b.n	8010d5c <xQueueGenericCreateStatic+0x70>
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d102      	bne.n	8010d6a <xQueueGenericCreateStatic+0x7e>
 8010d64:	68bb      	ldr	r3, [r7, #8]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d101      	bne.n	8010d6e <xQueueGenericCreateStatic+0x82>
 8010d6a:	2301      	movs	r3, #1
 8010d6c:	e000      	b.n	8010d70 <xQueueGenericCreateStatic+0x84>
 8010d6e:	2300      	movs	r3, #0
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d10a      	bne.n	8010d8a <xQueueGenericCreateStatic+0x9e>
 8010d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d78:	f383 8811 	msr	BASEPRI, r3
 8010d7c:	f3bf 8f6f 	isb	sy
 8010d80:	f3bf 8f4f 	dsb	sy
 8010d84:	61fb      	str	r3, [r7, #28]
 8010d86:	bf00      	nop
 8010d88:	e7fe      	b.n	8010d88 <xQueueGenericCreateStatic+0x9c>
 8010d8a:	2350      	movs	r3, #80	; 0x50
 8010d8c:	617b      	str	r3, [r7, #20]
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	2b50      	cmp	r3, #80	; 0x50
 8010d92:	d00a      	beq.n	8010daa <xQueueGenericCreateStatic+0xbe>
 8010d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d98:	f383 8811 	msr	BASEPRI, r3
 8010d9c:	f3bf 8f6f 	isb	sy
 8010da0:	f3bf 8f4f 	dsb	sy
 8010da4:	61bb      	str	r3, [r7, #24]
 8010da6:	bf00      	nop
 8010da8:	e7fe      	b.n	8010da8 <xQueueGenericCreateStatic+0xbc>
 8010daa:	697b      	ldr	r3, [r7, #20]
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d00d      	beq.n	8010dd2 <xQueueGenericCreateStatic+0xe6>
 8010db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010db8:	2201      	movs	r2, #1
 8010dba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010dbe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dc4:	9300      	str	r3, [sp, #0]
 8010dc6:	4613      	mov	r3, r2
 8010dc8:	687a      	ldr	r2, [r7, #4]
 8010dca:	68b9      	ldr	r1, [r7, #8]
 8010dcc:	68f8      	ldr	r0, [r7, #12]
 8010dce:	f000 f83f 	bl	8010e50 <prvInitialiseNewQueue>
 8010dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	3730      	adds	r7, #48	; 0x30
 8010dd8:	46bd      	mov	sp, r7
 8010dda:	bd80      	pop	{r7, pc}

08010ddc <xQueueGenericCreate>:
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b08a      	sub	sp, #40	; 0x28
 8010de0:	af02      	add	r7, sp, #8
 8010de2:	60f8      	str	r0, [r7, #12]
 8010de4:	60b9      	str	r1, [r7, #8]
 8010de6:	4613      	mov	r3, r2
 8010de8:	71fb      	strb	r3, [r7, #7]
 8010dea:	68fb      	ldr	r3, [r7, #12]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d10a      	bne.n	8010e06 <xQueueGenericCreate+0x2a>
 8010df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010df4:	f383 8811 	msr	BASEPRI, r3
 8010df8:	f3bf 8f6f 	isb	sy
 8010dfc:	f3bf 8f4f 	dsb	sy
 8010e00:	613b      	str	r3, [r7, #16]
 8010e02:	bf00      	nop
 8010e04:	e7fe      	b.n	8010e04 <xQueueGenericCreate+0x28>
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	68ba      	ldr	r2, [r7, #8]
 8010e0a:	fb02 f303 	mul.w	r3, r2, r3
 8010e0e:	61fb      	str	r3, [r7, #28]
 8010e10:	69fb      	ldr	r3, [r7, #28]
 8010e12:	3350      	adds	r3, #80	; 0x50
 8010e14:	4618      	mov	r0, r3
 8010e16:	f003 f977 	bl	8014108 <pvPortMalloc>
 8010e1a:	61b8      	str	r0, [r7, #24]
 8010e1c:	69bb      	ldr	r3, [r7, #24]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d011      	beq.n	8010e46 <xQueueGenericCreate+0x6a>
 8010e22:	69bb      	ldr	r3, [r7, #24]
 8010e24:	617b      	str	r3, [r7, #20]
 8010e26:	697b      	ldr	r3, [r7, #20]
 8010e28:	3350      	adds	r3, #80	; 0x50
 8010e2a:	617b      	str	r3, [r7, #20]
 8010e2c:	69bb      	ldr	r3, [r7, #24]
 8010e2e:	2200      	movs	r2, #0
 8010e30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010e34:	79fa      	ldrb	r2, [r7, #7]
 8010e36:	69bb      	ldr	r3, [r7, #24]
 8010e38:	9300      	str	r3, [sp, #0]
 8010e3a:	4613      	mov	r3, r2
 8010e3c:	697a      	ldr	r2, [r7, #20]
 8010e3e:	68b9      	ldr	r1, [r7, #8]
 8010e40:	68f8      	ldr	r0, [r7, #12]
 8010e42:	f000 f805 	bl	8010e50 <prvInitialiseNewQueue>
 8010e46:	69bb      	ldr	r3, [r7, #24]
 8010e48:	4618      	mov	r0, r3
 8010e4a:	3720      	adds	r7, #32
 8010e4c:	46bd      	mov	sp, r7
 8010e4e:	bd80      	pop	{r7, pc}

08010e50 <prvInitialiseNewQueue>:
 8010e50:	b580      	push	{r7, lr}
 8010e52:	b084      	sub	sp, #16
 8010e54:	af00      	add	r7, sp, #0
 8010e56:	60f8      	str	r0, [r7, #12]
 8010e58:	60b9      	str	r1, [r7, #8]
 8010e5a:	607a      	str	r2, [r7, #4]
 8010e5c:	70fb      	strb	r3, [r7, #3]
 8010e5e:	68bb      	ldr	r3, [r7, #8]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d103      	bne.n	8010e6c <prvInitialiseNewQueue+0x1c>
 8010e64:	69bb      	ldr	r3, [r7, #24]
 8010e66:	69ba      	ldr	r2, [r7, #24]
 8010e68:	601a      	str	r2, [r3, #0]
 8010e6a:	e002      	b.n	8010e72 <prvInitialiseNewQueue+0x22>
 8010e6c:	69bb      	ldr	r3, [r7, #24]
 8010e6e:	687a      	ldr	r2, [r7, #4]
 8010e70:	601a      	str	r2, [r3, #0]
 8010e72:	69bb      	ldr	r3, [r7, #24]
 8010e74:	68fa      	ldr	r2, [r7, #12]
 8010e76:	63da      	str	r2, [r3, #60]	; 0x3c
 8010e78:	69bb      	ldr	r3, [r7, #24]
 8010e7a:	68ba      	ldr	r2, [r7, #8]
 8010e7c:	641a      	str	r2, [r3, #64]	; 0x40
 8010e7e:	2101      	movs	r1, #1
 8010e80:	69b8      	ldr	r0, [r7, #24]
 8010e82:	f7ff fecb 	bl	8010c1c <xQueueGenericReset>
 8010e86:	69bb      	ldr	r3, [r7, #24]
 8010e88:	78fa      	ldrb	r2, [r7, #3]
 8010e8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8010e8e:	bf00      	nop
 8010e90:	3710      	adds	r7, #16
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}

08010e96 <prvInitialiseMutex>:
 8010e96:	b580      	push	{r7, lr}
 8010e98:	b082      	sub	sp, #8
 8010e9a:	af00      	add	r7, sp, #0
 8010e9c:	6078      	str	r0, [r7, #4]
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d00e      	beq.n	8010ec2 <prvInitialiseMutex+0x2c>
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	609a      	str	r2, [r3, #8]
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	2200      	movs	r2, #0
 8010eae:	601a      	str	r2, [r3, #0]
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	60da      	str	r2, [r3, #12]
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	2200      	movs	r2, #0
 8010eba:	2100      	movs	r1, #0
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f000 f8a1 	bl	8011004 <xQueueGenericSend>
 8010ec2:	bf00      	nop
 8010ec4:	3708      	adds	r7, #8
 8010ec6:	46bd      	mov	sp, r7
 8010ec8:	bd80      	pop	{r7, pc}

08010eca <xQueueCreateMutex>:
 8010eca:	b580      	push	{r7, lr}
 8010ecc:	b086      	sub	sp, #24
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	71fb      	strb	r3, [r7, #7]
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	617b      	str	r3, [r7, #20]
 8010ed8:	2300      	movs	r3, #0
 8010eda:	613b      	str	r3, [r7, #16]
 8010edc:	79fb      	ldrb	r3, [r7, #7]
 8010ede:	461a      	mov	r2, r3
 8010ee0:	6939      	ldr	r1, [r7, #16]
 8010ee2:	6978      	ldr	r0, [r7, #20]
 8010ee4:	f7ff ff7a 	bl	8010ddc <xQueueGenericCreate>
 8010ee8:	60f8      	str	r0, [r7, #12]
 8010eea:	68f8      	ldr	r0, [r7, #12]
 8010eec:	f7ff ffd3 	bl	8010e96 <prvInitialiseMutex>
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	3718      	adds	r7, #24
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bd80      	pop	{r7, pc}

08010efa <xQueueCreateMutexStatic>:
 8010efa:	b580      	push	{r7, lr}
 8010efc:	b088      	sub	sp, #32
 8010efe:	af02      	add	r7, sp, #8
 8010f00:	4603      	mov	r3, r0
 8010f02:	6039      	str	r1, [r7, #0]
 8010f04:	71fb      	strb	r3, [r7, #7]
 8010f06:	2301      	movs	r3, #1
 8010f08:	617b      	str	r3, [r7, #20]
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	613b      	str	r3, [r7, #16]
 8010f0e:	79fb      	ldrb	r3, [r7, #7]
 8010f10:	9300      	str	r3, [sp, #0]
 8010f12:	683b      	ldr	r3, [r7, #0]
 8010f14:	2200      	movs	r2, #0
 8010f16:	6939      	ldr	r1, [r7, #16]
 8010f18:	6978      	ldr	r0, [r7, #20]
 8010f1a:	f7ff fee7 	bl	8010cec <xQueueGenericCreateStatic>
 8010f1e:	60f8      	str	r0, [r7, #12]
 8010f20:	68f8      	ldr	r0, [r7, #12]
 8010f22:	f7ff ffb8 	bl	8010e96 <prvInitialiseMutex>
 8010f26:	68fb      	ldr	r3, [r7, #12]
 8010f28:	4618      	mov	r0, r3
 8010f2a:	3718      	adds	r7, #24
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	bd80      	pop	{r7, pc}

08010f30 <xQueueGiveMutexRecursive>:
 8010f30:	b590      	push	{r4, r7, lr}
 8010f32:	b087      	sub	sp, #28
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	613b      	str	r3, [r7, #16]
 8010f3c:	693b      	ldr	r3, [r7, #16]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d10a      	bne.n	8010f58 <xQueueGiveMutexRecursive+0x28>
 8010f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f46:	f383 8811 	msr	BASEPRI, r3
 8010f4a:	f3bf 8f6f 	isb	sy
 8010f4e:	f3bf 8f4f 	dsb	sy
 8010f52:	60fb      	str	r3, [r7, #12]
 8010f54:	bf00      	nop
 8010f56:	e7fe      	b.n	8010f56 <xQueueGiveMutexRecursive+0x26>
 8010f58:	693b      	ldr	r3, [r7, #16]
 8010f5a:	689c      	ldr	r4, [r3, #8]
 8010f5c:	f002 f804 	bl	8012f68 <xTaskGetCurrentTaskHandle>
 8010f60:	4603      	mov	r3, r0
 8010f62:	429c      	cmp	r4, r3
 8010f64:	d111      	bne.n	8010f8a <xQueueGiveMutexRecursive+0x5a>
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	68db      	ldr	r3, [r3, #12]
 8010f6a:	1e5a      	subs	r2, r3, #1
 8010f6c:	693b      	ldr	r3, [r7, #16]
 8010f6e:	60da      	str	r2, [r3, #12]
 8010f70:	693b      	ldr	r3, [r7, #16]
 8010f72:	68db      	ldr	r3, [r3, #12]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d105      	bne.n	8010f84 <xQueueGiveMutexRecursive+0x54>
 8010f78:	2300      	movs	r3, #0
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	2100      	movs	r1, #0
 8010f7e:	6938      	ldr	r0, [r7, #16]
 8010f80:	f000 f840 	bl	8011004 <xQueueGenericSend>
 8010f84:	2301      	movs	r3, #1
 8010f86:	617b      	str	r3, [r7, #20]
 8010f88:	e001      	b.n	8010f8e <xQueueGiveMutexRecursive+0x5e>
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	617b      	str	r3, [r7, #20]
 8010f8e:	697b      	ldr	r3, [r7, #20]
 8010f90:	4618      	mov	r0, r3
 8010f92:	371c      	adds	r7, #28
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd90      	pop	{r4, r7, pc}

08010f98 <xQueueTakeMutexRecursive>:
 8010f98:	b590      	push	{r4, r7, lr}
 8010f9a:	b087      	sub	sp, #28
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
 8010fa0:	6039      	str	r1, [r7, #0]
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	613b      	str	r3, [r7, #16]
 8010fa6:	693b      	ldr	r3, [r7, #16]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d10a      	bne.n	8010fc2 <xQueueTakeMutexRecursive+0x2a>
 8010fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fb0:	f383 8811 	msr	BASEPRI, r3
 8010fb4:	f3bf 8f6f 	isb	sy
 8010fb8:	f3bf 8f4f 	dsb	sy
 8010fbc:	60fb      	str	r3, [r7, #12]
 8010fbe:	bf00      	nop
 8010fc0:	e7fe      	b.n	8010fc0 <xQueueTakeMutexRecursive+0x28>
 8010fc2:	693b      	ldr	r3, [r7, #16]
 8010fc4:	689c      	ldr	r4, [r3, #8]
 8010fc6:	f001 ffcf 	bl	8012f68 <xTaskGetCurrentTaskHandle>
 8010fca:	4603      	mov	r3, r0
 8010fcc:	429c      	cmp	r4, r3
 8010fce:	d107      	bne.n	8010fe0 <xQueueTakeMutexRecursive+0x48>
 8010fd0:	693b      	ldr	r3, [r7, #16]
 8010fd2:	68db      	ldr	r3, [r3, #12]
 8010fd4:	1c5a      	adds	r2, r3, #1
 8010fd6:	693b      	ldr	r3, [r7, #16]
 8010fd8:	60da      	str	r2, [r3, #12]
 8010fda:	2301      	movs	r3, #1
 8010fdc:	617b      	str	r3, [r7, #20]
 8010fde:	e00c      	b.n	8010ffa <xQueueTakeMutexRecursive+0x62>
 8010fe0:	6839      	ldr	r1, [r7, #0]
 8010fe2:	6938      	ldr	r0, [r7, #16]
 8010fe4:	f000 fa88 	bl	80114f8 <xQueueSemaphoreTake>
 8010fe8:	6178      	str	r0, [r7, #20]
 8010fea:	697b      	ldr	r3, [r7, #20]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d004      	beq.n	8010ffa <xQueueTakeMutexRecursive+0x62>
 8010ff0:	693b      	ldr	r3, [r7, #16]
 8010ff2:	68db      	ldr	r3, [r3, #12]
 8010ff4:	1c5a      	adds	r2, r3, #1
 8010ff6:	693b      	ldr	r3, [r7, #16]
 8010ff8:	60da      	str	r2, [r3, #12]
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	371c      	adds	r7, #28
 8011000:	46bd      	mov	sp, r7
 8011002:	bd90      	pop	{r4, r7, pc}

08011004 <xQueueGenericSend>:
 8011004:	b580      	push	{r7, lr}
 8011006:	b08e      	sub	sp, #56	; 0x38
 8011008:	af00      	add	r7, sp, #0
 801100a:	60f8      	str	r0, [r7, #12]
 801100c:	60b9      	str	r1, [r7, #8]
 801100e:	607a      	str	r2, [r7, #4]
 8011010:	603b      	str	r3, [r7, #0]
 8011012:	2300      	movs	r3, #0
 8011014:	637b      	str	r3, [r7, #52]	; 0x34
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	633b      	str	r3, [r7, #48]	; 0x30
 801101a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801101c:	2b00      	cmp	r3, #0
 801101e:	d10a      	bne.n	8011036 <xQueueGenericSend+0x32>
 8011020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011024:	f383 8811 	msr	BASEPRI, r3
 8011028:	f3bf 8f6f 	isb	sy
 801102c:	f3bf 8f4f 	dsb	sy
 8011030:	62bb      	str	r3, [r7, #40]	; 0x28
 8011032:	bf00      	nop
 8011034:	e7fe      	b.n	8011034 <xQueueGenericSend+0x30>
 8011036:	68bb      	ldr	r3, [r7, #8]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d103      	bne.n	8011044 <xQueueGenericSend+0x40>
 801103c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011040:	2b00      	cmp	r3, #0
 8011042:	d101      	bne.n	8011048 <xQueueGenericSend+0x44>
 8011044:	2301      	movs	r3, #1
 8011046:	e000      	b.n	801104a <xQueueGenericSend+0x46>
 8011048:	2300      	movs	r3, #0
 801104a:	2b00      	cmp	r3, #0
 801104c:	d10a      	bne.n	8011064 <xQueueGenericSend+0x60>
 801104e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011052:	f383 8811 	msr	BASEPRI, r3
 8011056:	f3bf 8f6f 	isb	sy
 801105a:	f3bf 8f4f 	dsb	sy
 801105e:	627b      	str	r3, [r7, #36]	; 0x24
 8011060:	bf00      	nop
 8011062:	e7fe      	b.n	8011062 <xQueueGenericSend+0x5e>
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	2b02      	cmp	r3, #2
 8011068:	d103      	bne.n	8011072 <xQueueGenericSend+0x6e>
 801106a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801106c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801106e:	2b01      	cmp	r3, #1
 8011070:	d101      	bne.n	8011076 <xQueueGenericSend+0x72>
 8011072:	2301      	movs	r3, #1
 8011074:	e000      	b.n	8011078 <xQueueGenericSend+0x74>
 8011076:	2300      	movs	r3, #0
 8011078:	2b00      	cmp	r3, #0
 801107a:	d10a      	bne.n	8011092 <xQueueGenericSend+0x8e>
 801107c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011080:	f383 8811 	msr	BASEPRI, r3
 8011084:	f3bf 8f6f 	isb	sy
 8011088:	f3bf 8f4f 	dsb	sy
 801108c:	623b      	str	r3, [r7, #32]
 801108e:	bf00      	nop
 8011090:	e7fe      	b.n	8011090 <xQueueGenericSend+0x8c>
 8011092:	f001 ff79 	bl	8012f88 <xTaskGetSchedulerState>
 8011096:	4603      	mov	r3, r0
 8011098:	2b00      	cmp	r3, #0
 801109a:	d102      	bne.n	80110a2 <xQueueGenericSend+0x9e>
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d101      	bne.n	80110a6 <xQueueGenericSend+0xa2>
 80110a2:	2301      	movs	r3, #1
 80110a4:	e000      	b.n	80110a8 <xQueueGenericSend+0xa4>
 80110a6:	2300      	movs	r3, #0
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d10a      	bne.n	80110c2 <xQueueGenericSend+0xbe>
 80110ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b0:	f383 8811 	msr	BASEPRI, r3
 80110b4:	f3bf 8f6f 	isb	sy
 80110b8:	f3bf 8f4f 	dsb	sy
 80110bc:	61fb      	str	r3, [r7, #28]
 80110be:	bf00      	nop
 80110c0:	e7fe      	b.n	80110c0 <xQueueGenericSend+0xbc>
 80110c2:	f002 feff 	bl	8013ec4 <vPortEnterCritical>
 80110c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80110ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110ce:	429a      	cmp	r2, r3
 80110d0:	d302      	bcc.n	80110d8 <xQueueGenericSend+0xd4>
 80110d2:	683b      	ldr	r3, [r7, #0]
 80110d4:	2b02      	cmp	r3, #2
 80110d6:	d129      	bne.n	801112c <xQueueGenericSend+0x128>
 80110d8:	683a      	ldr	r2, [r7, #0]
 80110da:	68b9      	ldr	r1, [r7, #8]
 80110dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80110de:	f000 fbaf 	bl	8011840 <prvCopyDataToQueue>
 80110e2:	62f8      	str	r0, [r7, #44]	; 0x2c
 80110e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d010      	beq.n	801110e <xQueueGenericSend+0x10a>
 80110ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110ee:	3324      	adds	r3, #36	; 0x24
 80110f0:	4618      	mov	r0, r3
 80110f2:	f001 fd51 	bl	8012b98 <xTaskRemoveFromEventList>
 80110f6:	4603      	mov	r3, r0
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d013      	beq.n	8011124 <xQueueGenericSend+0x120>
 80110fc:	4b3f      	ldr	r3, [pc, #252]	; (80111fc <xQueueGenericSend+0x1f8>)
 80110fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011102:	601a      	str	r2, [r3, #0]
 8011104:	f3bf 8f4f 	dsb	sy
 8011108:	f3bf 8f6f 	isb	sy
 801110c:	e00a      	b.n	8011124 <xQueueGenericSend+0x120>
 801110e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011110:	2b00      	cmp	r3, #0
 8011112:	d007      	beq.n	8011124 <xQueueGenericSend+0x120>
 8011114:	4b39      	ldr	r3, [pc, #228]	; (80111fc <xQueueGenericSend+0x1f8>)
 8011116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801111a:	601a      	str	r2, [r3, #0]
 801111c:	f3bf 8f4f 	dsb	sy
 8011120:	f3bf 8f6f 	isb	sy
 8011124:	f002 fefe 	bl	8013f24 <vPortExitCritical>
 8011128:	2301      	movs	r3, #1
 801112a:	e063      	b.n	80111f4 <xQueueGenericSend+0x1f0>
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d103      	bne.n	801113a <xQueueGenericSend+0x136>
 8011132:	f002 fef7 	bl	8013f24 <vPortExitCritical>
 8011136:	2300      	movs	r3, #0
 8011138:	e05c      	b.n	80111f4 <xQueueGenericSend+0x1f0>
 801113a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801113c:	2b00      	cmp	r3, #0
 801113e:	d106      	bne.n	801114e <xQueueGenericSend+0x14a>
 8011140:	f107 0314 	add.w	r3, r7, #20
 8011144:	4618      	mov	r0, r3
 8011146:	f001 fdb1 	bl	8012cac <vTaskInternalSetTimeOutState>
 801114a:	2301      	movs	r3, #1
 801114c:	637b      	str	r3, [r7, #52]	; 0x34
 801114e:	f002 fee9 	bl	8013f24 <vPortExitCritical>
 8011152:	f001 facb 	bl	80126ec <vTaskSuspendAll>
 8011156:	f002 feb5 	bl	8013ec4 <vPortEnterCritical>
 801115a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801115c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011160:	b25b      	sxtb	r3, r3
 8011162:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011166:	d103      	bne.n	8011170 <xQueueGenericSend+0x16c>
 8011168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801116a:	2200      	movs	r2, #0
 801116c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011172:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011176:	b25b      	sxtb	r3, r3
 8011178:	f1b3 3fff 	cmp.w	r3, #4294967295
 801117c:	d103      	bne.n	8011186 <xQueueGenericSend+0x182>
 801117e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011180:	2200      	movs	r2, #0
 8011182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011186:	f002 fecd 	bl	8013f24 <vPortExitCritical>
 801118a:	1d3a      	adds	r2, r7, #4
 801118c:	f107 0314 	add.w	r3, r7, #20
 8011190:	4611      	mov	r1, r2
 8011192:	4618      	mov	r0, r3
 8011194:	f001 fda0 	bl	8012cd8 <xTaskCheckForTimeOut>
 8011198:	4603      	mov	r3, r0
 801119a:	2b00      	cmp	r3, #0
 801119c:	d124      	bne.n	80111e8 <xQueueGenericSend+0x1e4>
 801119e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111a0:	f000 fc46 	bl	8011a30 <prvIsQueueFull>
 80111a4:	4603      	mov	r3, r0
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d018      	beq.n	80111dc <xQueueGenericSend+0x1d8>
 80111aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ac:	3310      	adds	r3, #16
 80111ae:	687a      	ldr	r2, [r7, #4]
 80111b0:	4611      	mov	r1, r2
 80111b2:	4618      	mov	r0, r3
 80111b4:	f001 fca0 	bl	8012af8 <vTaskPlaceOnEventList>
 80111b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111ba:	f000 fbd1 	bl	8011960 <prvUnlockQueue>
 80111be:	f001 faa3 	bl	8012708 <xTaskResumeAll>
 80111c2:	4603      	mov	r3, r0
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	f47f af7c 	bne.w	80110c2 <xQueueGenericSend+0xbe>
 80111ca:	4b0c      	ldr	r3, [pc, #48]	; (80111fc <xQueueGenericSend+0x1f8>)
 80111cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80111d0:	601a      	str	r2, [r3, #0]
 80111d2:	f3bf 8f4f 	dsb	sy
 80111d6:	f3bf 8f6f 	isb	sy
 80111da:	e772      	b.n	80110c2 <xQueueGenericSend+0xbe>
 80111dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111de:	f000 fbbf 	bl	8011960 <prvUnlockQueue>
 80111e2:	f001 fa91 	bl	8012708 <xTaskResumeAll>
 80111e6:	e76c      	b.n	80110c2 <xQueueGenericSend+0xbe>
 80111e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111ea:	f000 fbb9 	bl	8011960 <prvUnlockQueue>
 80111ee:	f001 fa8b 	bl	8012708 <xTaskResumeAll>
 80111f2:	2300      	movs	r3, #0
 80111f4:	4618      	mov	r0, r3
 80111f6:	3738      	adds	r7, #56	; 0x38
 80111f8:	46bd      	mov	sp, r7
 80111fa:	bd80      	pop	{r7, pc}
 80111fc:	e000ed04 	.word	0xe000ed04

08011200 <xQueueGenericSendFromISR>:
 8011200:	b580      	push	{r7, lr}
 8011202:	b090      	sub	sp, #64	; 0x40
 8011204:	af00      	add	r7, sp, #0
 8011206:	60f8      	str	r0, [r7, #12]
 8011208:	60b9      	str	r1, [r7, #8]
 801120a:	607a      	str	r2, [r7, #4]
 801120c:	603b      	str	r3, [r7, #0]
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	63bb      	str	r3, [r7, #56]	; 0x38
 8011212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011214:	2b00      	cmp	r3, #0
 8011216:	d10a      	bne.n	801122e <xQueueGenericSendFromISR+0x2e>
 8011218:	f04f 0350 	mov.w	r3, #80	; 0x50
 801121c:	f383 8811 	msr	BASEPRI, r3
 8011220:	f3bf 8f6f 	isb	sy
 8011224:	f3bf 8f4f 	dsb	sy
 8011228:	62bb      	str	r3, [r7, #40]	; 0x28
 801122a:	bf00      	nop
 801122c:	e7fe      	b.n	801122c <xQueueGenericSendFromISR+0x2c>
 801122e:	68bb      	ldr	r3, [r7, #8]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d103      	bne.n	801123c <xQueueGenericSendFromISR+0x3c>
 8011234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011238:	2b00      	cmp	r3, #0
 801123a:	d101      	bne.n	8011240 <xQueueGenericSendFromISR+0x40>
 801123c:	2301      	movs	r3, #1
 801123e:	e000      	b.n	8011242 <xQueueGenericSendFromISR+0x42>
 8011240:	2300      	movs	r3, #0
 8011242:	2b00      	cmp	r3, #0
 8011244:	d10a      	bne.n	801125c <xQueueGenericSendFromISR+0x5c>
 8011246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801124a:	f383 8811 	msr	BASEPRI, r3
 801124e:	f3bf 8f6f 	isb	sy
 8011252:	f3bf 8f4f 	dsb	sy
 8011256:	627b      	str	r3, [r7, #36]	; 0x24
 8011258:	bf00      	nop
 801125a:	e7fe      	b.n	801125a <xQueueGenericSendFromISR+0x5a>
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	2b02      	cmp	r3, #2
 8011260:	d103      	bne.n	801126a <xQueueGenericSendFromISR+0x6a>
 8011262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011266:	2b01      	cmp	r3, #1
 8011268:	d101      	bne.n	801126e <xQueueGenericSendFromISR+0x6e>
 801126a:	2301      	movs	r3, #1
 801126c:	e000      	b.n	8011270 <xQueueGenericSendFromISR+0x70>
 801126e:	2300      	movs	r3, #0
 8011270:	2b00      	cmp	r3, #0
 8011272:	d10a      	bne.n	801128a <xQueueGenericSendFromISR+0x8a>
 8011274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011278:	f383 8811 	msr	BASEPRI, r3
 801127c:	f3bf 8f6f 	isb	sy
 8011280:	f3bf 8f4f 	dsb	sy
 8011284:	623b      	str	r3, [r7, #32]
 8011286:	bf00      	nop
 8011288:	e7fe      	b.n	8011288 <xQueueGenericSendFromISR+0x88>
 801128a:	f002 fefd 	bl	8014088 <vPortValidateInterruptPriority>
 801128e:	f3ef 8211 	mrs	r2, BASEPRI
 8011292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011296:	f383 8811 	msr	BASEPRI, r3
 801129a:	f3bf 8f6f 	isb	sy
 801129e:	f3bf 8f4f 	dsb	sy
 80112a2:	61fa      	str	r2, [r7, #28]
 80112a4:	61bb      	str	r3, [r7, #24]
 80112a6:	69fb      	ldr	r3, [r7, #28]
 80112a8:	637b      	str	r3, [r7, #52]	; 0x34
 80112aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80112ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d302      	bcc.n	80112bc <xQueueGenericSendFromISR+0xbc>
 80112b6:	683b      	ldr	r3, [r7, #0]
 80112b8:	2b02      	cmp	r3, #2
 80112ba:	d12f      	bne.n	801131c <xQueueGenericSendFromISR+0x11c>
 80112bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80112c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80112c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80112cc:	683a      	ldr	r2, [r7, #0]
 80112ce:	68b9      	ldr	r1, [r7, #8]
 80112d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80112d2:	f000 fab5 	bl	8011840 <prvCopyDataToQueue>
 80112d6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80112da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112de:	d112      	bne.n	8011306 <xQueueGenericSendFromISR+0x106>
 80112e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d016      	beq.n	8011316 <xQueueGenericSendFromISR+0x116>
 80112e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ea:	3324      	adds	r3, #36	; 0x24
 80112ec:	4618      	mov	r0, r3
 80112ee:	f001 fc53 	bl	8012b98 <xTaskRemoveFromEventList>
 80112f2:	4603      	mov	r3, r0
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d00e      	beq.n	8011316 <xQueueGenericSendFromISR+0x116>
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d00b      	beq.n	8011316 <xQueueGenericSendFromISR+0x116>
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	2201      	movs	r2, #1
 8011302:	601a      	str	r2, [r3, #0]
 8011304:	e007      	b.n	8011316 <xQueueGenericSendFromISR+0x116>
 8011306:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801130a:	3301      	adds	r3, #1
 801130c:	b2db      	uxtb	r3, r3
 801130e:	b25a      	sxtb	r2, r3
 8011310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011316:	2301      	movs	r3, #1
 8011318:	63fb      	str	r3, [r7, #60]	; 0x3c
 801131a:	e001      	b.n	8011320 <xQueueGenericSendFromISR+0x120>
 801131c:	2300      	movs	r3, #0
 801131e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011322:	617b      	str	r3, [r7, #20]
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	f383 8811 	msr	BASEPRI, r3
 801132a:	bf00      	nop
 801132c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801132e:	4618      	mov	r0, r3
 8011330:	3740      	adds	r7, #64	; 0x40
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
	...

08011338 <xQueueReceive>:
 8011338:	b580      	push	{r7, lr}
 801133a:	b08c      	sub	sp, #48	; 0x30
 801133c:	af00      	add	r7, sp, #0
 801133e:	60f8      	str	r0, [r7, #12]
 8011340:	60b9      	str	r1, [r7, #8]
 8011342:	607a      	str	r2, [r7, #4]
 8011344:	2300      	movs	r3, #0
 8011346:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	62bb      	str	r3, [r7, #40]	; 0x28
 801134c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801134e:	2b00      	cmp	r3, #0
 8011350:	d10a      	bne.n	8011368 <xQueueReceive+0x30>
 8011352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011356:	f383 8811 	msr	BASEPRI, r3
 801135a:	f3bf 8f6f 	isb	sy
 801135e:	f3bf 8f4f 	dsb	sy
 8011362:	623b      	str	r3, [r7, #32]
 8011364:	bf00      	nop
 8011366:	e7fe      	b.n	8011366 <xQueueReceive+0x2e>
 8011368:	68bb      	ldr	r3, [r7, #8]
 801136a:	2b00      	cmp	r3, #0
 801136c:	d103      	bne.n	8011376 <xQueueReceive+0x3e>
 801136e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011372:	2b00      	cmp	r3, #0
 8011374:	d101      	bne.n	801137a <xQueueReceive+0x42>
 8011376:	2301      	movs	r3, #1
 8011378:	e000      	b.n	801137c <xQueueReceive+0x44>
 801137a:	2300      	movs	r3, #0
 801137c:	2b00      	cmp	r3, #0
 801137e:	d10a      	bne.n	8011396 <xQueueReceive+0x5e>
 8011380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011384:	f383 8811 	msr	BASEPRI, r3
 8011388:	f3bf 8f6f 	isb	sy
 801138c:	f3bf 8f4f 	dsb	sy
 8011390:	61fb      	str	r3, [r7, #28]
 8011392:	bf00      	nop
 8011394:	e7fe      	b.n	8011394 <xQueueReceive+0x5c>
 8011396:	f001 fdf7 	bl	8012f88 <xTaskGetSchedulerState>
 801139a:	4603      	mov	r3, r0
 801139c:	2b00      	cmp	r3, #0
 801139e:	d102      	bne.n	80113a6 <xQueueReceive+0x6e>
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d101      	bne.n	80113aa <xQueueReceive+0x72>
 80113a6:	2301      	movs	r3, #1
 80113a8:	e000      	b.n	80113ac <xQueueReceive+0x74>
 80113aa:	2300      	movs	r3, #0
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d10a      	bne.n	80113c6 <xQueueReceive+0x8e>
 80113b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b4:	f383 8811 	msr	BASEPRI, r3
 80113b8:	f3bf 8f6f 	isb	sy
 80113bc:	f3bf 8f4f 	dsb	sy
 80113c0:	61bb      	str	r3, [r7, #24]
 80113c2:	bf00      	nop
 80113c4:	e7fe      	b.n	80113c4 <xQueueReceive+0x8c>
 80113c6:	f002 fd7d 	bl	8013ec4 <vPortEnterCritical>
 80113ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113ce:	627b      	str	r3, [r7, #36]	; 0x24
 80113d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d01f      	beq.n	8011416 <xQueueReceive+0xde>
 80113d6:	68b9      	ldr	r1, [r7, #8]
 80113d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80113da:	f000 fa9b 	bl	8011914 <prvCopyDataFromQueue>
 80113de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e0:	1e5a      	subs	r2, r3, #1
 80113e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e4:	639a      	str	r2, [r3, #56]	; 0x38
 80113e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e8:	691b      	ldr	r3, [r3, #16]
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d00f      	beq.n	801140e <xQueueReceive+0xd6>
 80113ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f0:	3310      	adds	r3, #16
 80113f2:	4618      	mov	r0, r3
 80113f4:	f001 fbd0 	bl	8012b98 <xTaskRemoveFromEventList>
 80113f8:	4603      	mov	r3, r0
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d007      	beq.n	801140e <xQueueReceive+0xd6>
 80113fe:	4b3d      	ldr	r3, [pc, #244]	; (80114f4 <xQueueReceive+0x1bc>)
 8011400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011404:	601a      	str	r2, [r3, #0]
 8011406:	f3bf 8f4f 	dsb	sy
 801140a:	f3bf 8f6f 	isb	sy
 801140e:	f002 fd89 	bl	8013f24 <vPortExitCritical>
 8011412:	2301      	movs	r3, #1
 8011414:	e069      	b.n	80114ea <xQueueReceive+0x1b2>
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d103      	bne.n	8011424 <xQueueReceive+0xec>
 801141c:	f002 fd82 	bl	8013f24 <vPortExitCritical>
 8011420:	2300      	movs	r3, #0
 8011422:	e062      	b.n	80114ea <xQueueReceive+0x1b2>
 8011424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011426:	2b00      	cmp	r3, #0
 8011428:	d106      	bne.n	8011438 <xQueueReceive+0x100>
 801142a:	f107 0310 	add.w	r3, r7, #16
 801142e:	4618      	mov	r0, r3
 8011430:	f001 fc3c 	bl	8012cac <vTaskInternalSetTimeOutState>
 8011434:	2301      	movs	r3, #1
 8011436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011438:	f002 fd74 	bl	8013f24 <vPortExitCritical>
 801143c:	f001 f956 	bl	80126ec <vTaskSuspendAll>
 8011440:	f002 fd40 	bl	8013ec4 <vPortEnterCritical>
 8011444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011446:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801144a:	b25b      	sxtb	r3, r3
 801144c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011450:	d103      	bne.n	801145a <xQueueReceive+0x122>
 8011452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011454:	2200      	movs	r2, #0
 8011456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801145a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801145c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011460:	b25b      	sxtb	r3, r3
 8011462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011466:	d103      	bne.n	8011470 <xQueueReceive+0x138>
 8011468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801146a:	2200      	movs	r2, #0
 801146c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011470:	f002 fd58 	bl	8013f24 <vPortExitCritical>
 8011474:	1d3a      	adds	r2, r7, #4
 8011476:	f107 0310 	add.w	r3, r7, #16
 801147a:	4611      	mov	r1, r2
 801147c:	4618      	mov	r0, r3
 801147e:	f001 fc2b 	bl	8012cd8 <xTaskCheckForTimeOut>
 8011482:	4603      	mov	r3, r0
 8011484:	2b00      	cmp	r3, #0
 8011486:	d123      	bne.n	80114d0 <xQueueReceive+0x198>
 8011488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801148a:	f000 fabb 	bl	8011a04 <prvIsQueueEmpty>
 801148e:	4603      	mov	r3, r0
 8011490:	2b00      	cmp	r3, #0
 8011492:	d017      	beq.n	80114c4 <xQueueReceive+0x18c>
 8011494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011496:	3324      	adds	r3, #36	; 0x24
 8011498:	687a      	ldr	r2, [r7, #4]
 801149a:	4611      	mov	r1, r2
 801149c:	4618      	mov	r0, r3
 801149e:	f001 fb2b 	bl	8012af8 <vTaskPlaceOnEventList>
 80114a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114a4:	f000 fa5c 	bl	8011960 <prvUnlockQueue>
 80114a8:	f001 f92e 	bl	8012708 <xTaskResumeAll>
 80114ac:	4603      	mov	r3, r0
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d189      	bne.n	80113c6 <xQueueReceive+0x8e>
 80114b2:	4b10      	ldr	r3, [pc, #64]	; (80114f4 <xQueueReceive+0x1bc>)
 80114b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114b8:	601a      	str	r2, [r3, #0]
 80114ba:	f3bf 8f4f 	dsb	sy
 80114be:	f3bf 8f6f 	isb	sy
 80114c2:	e780      	b.n	80113c6 <xQueueReceive+0x8e>
 80114c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114c6:	f000 fa4b 	bl	8011960 <prvUnlockQueue>
 80114ca:	f001 f91d 	bl	8012708 <xTaskResumeAll>
 80114ce:	e77a      	b.n	80113c6 <xQueueReceive+0x8e>
 80114d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114d2:	f000 fa45 	bl	8011960 <prvUnlockQueue>
 80114d6:	f001 f917 	bl	8012708 <xTaskResumeAll>
 80114da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114dc:	f000 fa92 	bl	8011a04 <prvIsQueueEmpty>
 80114e0:	4603      	mov	r3, r0
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	f43f af6f 	beq.w	80113c6 <xQueueReceive+0x8e>
 80114e8:	2300      	movs	r3, #0
 80114ea:	4618      	mov	r0, r3
 80114ec:	3730      	adds	r7, #48	; 0x30
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}
 80114f2:	bf00      	nop
 80114f4:	e000ed04 	.word	0xe000ed04

080114f8 <xQueueSemaphoreTake>:
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b08e      	sub	sp, #56	; 0x38
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
 8011500:	6039      	str	r1, [r7, #0]
 8011502:	2300      	movs	r3, #0
 8011504:	637b      	str	r3, [r7, #52]	; 0x34
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	62fb      	str	r3, [r7, #44]	; 0x2c
 801150a:	2300      	movs	r3, #0
 801150c:	633b      	str	r3, [r7, #48]	; 0x30
 801150e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011510:	2b00      	cmp	r3, #0
 8011512:	d10a      	bne.n	801152a <xQueueSemaphoreTake+0x32>
 8011514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011518:	f383 8811 	msr	BASEPRI, r3
 801151c:	f3bf 8f6f 	isb	sy
 8011520:	f3bf 8f4f 	dsb	sy
 8011524:	623b      	str	r3, [r7, #32]
 8011526:	bf00      	nop
 8011528:	e7fe      	b.n	8011528 <xQueueSemaphoreTake+0x30>
 801152a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801152e:	2b00      	cmp	r3, #0
 8011530:	d00a      	beq.n	8011548 <xQueueSemaphoreTake+0x50>
 8011532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011536:	f383 8811 	msr	BASEPRI, r3
 801153a:	f3bf 8f6f 	isb	sy
 801153e:	f3bf 8f4f 	dsb	sy
 8011542:	61fb      	str	r3, [r7, #28]
 8011544:	bf00      	nop
 8011546:	e7fe      	b.n	8011546 <xQueueSemaphoreTake+0x4e>
 8011548:	f001 fd1e 	bl	8012f88 <xTaskGetSchedulerState>
 801154c:	4603      	mov	r3, r0
 801154e:	2b00      	cmp	r3, #0
 8011550:	d102      	bne.n	8011558 <xQueueSemaphoreTake+0x60>
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d101      	bne.n	801155c <xQueueSemaphoreTake+0x64>
 8011558:	2301      	movs	r3, #1
 801155a:	e000      	b.n	801155e <xQueueSemaphoreTake+0x66>
 801155c:	2300      	movs	r3, #0
 801155e:	2b00      	cmp	r3, #0
 8011560:	d10a      	bne.n	8011578 <xQueueSemaphoreTake+0x80>
 8011562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011566:	f383 8811 	msr	BASEPRI, r3
 801156a:	f3bf 8f6f 	isb	sy
 801156e:	f3bf 8f4f 	dsb	sy
 8011572:	61bb      	str	r3, [r7, #24]
 8011574:	bf00      	nop
 8011576:	e7fe      	b.n	8011576 <xQueueSemaphoreTake+0x7e>
 8011578:	f002 fca4 	bl	8013ec4 <vPortEnterCritical>
 801157c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801157e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011580:	62bb      	str	r3, [r7, #40]	; 0x28
 8011582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011584:	2b00      	cmp	r3, #0
 8011586:	d024      	beq.n	80115d2 <xQueueSemaphoreTake+0xda>
 8011588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801158a:	1e5a      	subs	r2, r3, #1
 801158c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801158e:	639a      	str	r2, [r3, #56]	; 0x38
 8011590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011592:	681b      	ldr	r3, [r3, #0]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d104      	bne.n	80115a2 <xQueueSemaphoreTake+0xaa>
 8011598:	f001 fe6c 	bl	8013274 <pvTaskIncrementMutexHeldCount>
 801159c:	4602      	mov	r2, r0
 801159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115a0:	609a      	str	r2, [r3, #8]
 80115a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115a4:	691b      	ldr	r3, [r3, #16]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d00f      	beq.n	80115ca <xQueueSemaphoreTake+0xd2>
 80115aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ac:	3310      	adds	r3, #16
 80115ae:	4618      	mov	r0, r3
 80115b0:	f001 faf2 	bl	8012b98 <xTaskRemoveFromEventList>
 80115b4:	4603      	mov	r3, r0
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d007      	beq.n	80115ca <xQueueSemaphoreTake+0xd2>
 80115ba:	4b54      	ldr	r3, [pc, #336]	; (801170c <xQueueSemaphoreTake+0x214>)
 80115bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115c0:	601a      	str	r2, [r3, #0]
 80115c2:	f3bf 8f4f 	dsb	sy
 80115c6:	f3bf 8f6f 	isb	sy
 80115ca:	f002 fcab 	bl	8013f24 <vPortExitCritical>
 80115ce:	2301      	movs	r3, #1
 80115d0:	e097      	b.n	8011702 <xQueueSemaphoreTake+0x20a>
 80115d2:	683b      	ldr	r3, [r7, #0]
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d111      	bne.n	80115fc <xQueueSemaphoreTake+0x104>
 80115d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d00a      	beq.n	80115f4 <xQueueSemaphoreTake+0xfc>
 80115de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115e2:	f383 8811 	msr	BASEPRI, r3
 80115e6:	f3bf 8f6f 	isb	sy
 80115ea:	f3bf 8f4f 	dsb	sy
 80115ee:	617b      	str	r3, [r7, #20]
 80115f0:	bf00      	nop
 80115f2:	e7fe      	b.n	80115f2 <xQueueSemaphoreTake+0xfa>
 80115f4:	f002 fc96 	bl	8013f24 <vPortExitCritical>
 80115f8:	2300      	movs	r3, #0
 80115fa:	e082      	b.n	8011702 <xQueueSemaphoreTake+0x20a>
 80115fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d106      	bne.n	8011610 <xQueueSemaphoreTake+0x118>
 8011602:	f107 030c 	add.w	r3, r7, #12
 8011606:	4618      	mov	r0, r3
 8011608:	f001 fb50 	bl	8012cac <vTaskInternalSetTimeOutState>
 801160c:	2301      	movs	r3, #1
 801160e:	637b      	str	r3, [r7, #52]	; 0x34
 8011610:	f002 fc88 	bl	8013f24 <vPortExitCritical>
 8011614:	f001 f86a 	bl	80126ec <vTaskSuspendAll>
 8011618:	f002 fc54 	bl	8013ec4 <vPortEnterCritical>
 801161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801161e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011622:	b25b      	sxtb	r3, r3
 8011624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011628:	d103      	bne.n	8011632 <xQueueSemaphoreTake+0x13a>
 801162a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801162c:	2200      	movs	r2, #0
 801162e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011638:	b25b      	sxtb	r3, r3
 801163a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801163e:	d103      	bne.n	8011648 <xQueueSemaphoreTake+0x150>
 8011640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011642:	2200      	movs	r2, #0
 8011644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011648:	f002 fc6c 	bl	8013f24 <vPortExitCritical>
 801164c:	463a      	mov	r2, r7
 801164e:	f107 030c 	add.w	r3, r7, #12
 8011652:	4611      	mov	r1, r2
 8011654:	4618      	mov	r0, r3
 8011656:	f001 fb3f 	bl	8012cd8 <xTaskCheckForTimeOut>
 801165a:	4603      	mov	r3, r0
 801165c:	2b00      	cmp	r3, #0
 801165e:	d132      	bne.n	80116c6 <xQueueSemaphoreTake+0x1ce>
 8011660:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011662:	f000 f9cf 	bl	8011a04 <prvIsQueueEmpty>
 8011666:	4603      	mov	r3, r0
 8011668:	2b00      	cmp	r3, #0
 801166a:	d026      	beq.n	80116ba <xQueueSemaphoreTake+0x1c2>
 801166c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d109      	bne.n	8011688 <xQueueSemaphoreTake+0x190>
 8011674:	f002 fc26 	bl	8013ec4 <vPortEnterCritical>
 8011678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801167a:	689b      	ldr	r3, [r3, #8]
 801167c:	4618      	mov	r0, r3
 801167e:	f001 fca1 	bl	8012fc4 <xTaskPriorityInherit>
 8011682:	6338      	str	r0, [r7, #48]	; 0x30
 8011684:	f002 fc4e 	bl	8013f24 <vPortExitCritical>
 8011688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801168a:	3324      	adds	r3, #36	; 0x24
 801168c:	683a      	ldr	r2, [r7, #0]
 801168e:	4611      	mov	r1, r2
 8011690:	4618      	mov	r0, r3
 8011692:	f001 fa31 	bl	8012af8 <vTaskPlaceOnEventList>
 8011696:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011698:	f000 f962 	bl	8011960 <prvUnlockQueue>
 801169c:	f001 f834 	bl	8012708 <xTaskResumeAll>
 80116a0:	4603      	mov	r3, r0
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	f47f af68 	bne.w	8011578 <xQueueSemaphoreTake+0x80>
 80116a8:	4b18      	ldr	r3, [pc, #96]	; (801170c <xQueueSemaphoreTake+0x214>)
 80116aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116ae:	601a      	str	r2, [r3, #0]
 80116b0:	f3bf 8f4f 	dsb	sy
 80116b4:	f3bf 8f6f 	isb	sy
 80116b8:	e75e      	b.n	8011578 <xQueueSemaphoreTake+0x80>
 80116ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80116bc:	f000 f950 	bl	8011960 <prvUnlockQueue>
 80116c0:	f001 f822 	bl	8012708 <xTaskResumeAll>
 80116c4:	e758      	b.n	8011578 <xQueueSemaphoreTake+0x80>
 80116c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80116c8:	f000 f94a 	bl	8011960 <prvUnlockQueue>
 80116cc:	f001 f81c 	bl	8012708 <xTaskResumeAll>
 80116d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80116d2:	f000 f997 	bl	8011a04 <prvIsQueueEmpty>
 80116d6:	4603      	mov	r3, r0
 80116d8:	2b00      	cmp	r3, #0
 80116da:	f43f af4d 	beq.w	8011578 <xQueueSemaphoreTake+0x80>
 80116de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d00d      	beq.n	8011700 <xQueueSemaphoreTake+0x208>
 80116e4:	f002 fbee 	bl	8013ec4 <vPortEnterCritical>
 80116e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80116ea:	f000 f891 	bl	8011810 <prvGetDisinheritPriorityAfterTimeout>
 80116ee:	6278      	str	r0, [r7, #36]	; 0x24
 80116f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116f2:	689b      	ldr	r3, [r3, #8]
 80116f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80116f6:	4618      	mov	r0, r3
 80116f8:	f001 fd3a 	bl	8013170 <vTaskPriorityDisinheritAfterTimeout>
 80116fc:	f002 fc12 	bl	8013f24 <vPortExitCritical>
 8011700:	2300      	movs	r3, #0
 8011702:	4618      	mov	r0, r3
 8011704:	3738      	adds	r7, #56	; 0x38
 8011706:	46bd      	mov	sp, r7
 8011708:	bd80      	pop	{r7, pc}
 801170a:	bf00      	nop
 801170c:	e000ed04 	.word	0xe000ed04

08011710 <xQueueReceiveFromISR>:
 8011710:	b580      	push	{r7, lr}
 8011712:	b08e      	sub	sp, #56	; 0x38
 8011714:	af00      	add	r7, sp, #0
 8011716:	60f8      	str	r0, [r7, #12]
 8011718:	60b9      	str	r1, [r7, #8]
 801171a:	607a      	str	r2, [r7, #4]
 801171c:	68fb      	ldr	r3, [r7, #12]
 801171e:	633b      	str	r3, [r7, #48]	; 0x30
 8011720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011722:	2b00      	cmp	r3, #0
 8011724:	d10a      	bne.n	801173c <xQueueReceiveFromISR+0x2c>
 8011726:	f04f 0350 	mov.w	r3, #80	; 0x50
 801172a:	f383 8811 	msr	BASEPRI, r3
 801172e:	f3bf 8f6f 	isb	sy
 8011732:	f3bf 8f4f 	dsb	sy
 8011736:	623b      	str	r3, [r7, #32]
 8011738:	bf00      	nop
 801173a:	e7fe      	b.n	801173a <xQueueReceiveFromISR+0x2a>
 801173c:	68bb      	ldr	r3, [r7, #8]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d103      	bne.n	801174a <xQueueReceiveFromISR+0x3a>
 8011742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011746:	2b00      	cmp	r3, #0
 8011748:	d101      	bne.n	801174e <xQueueReceiveFromISR+0x3e>
 801174a:	2301      	movs	r3, #1
 801174c:	e000      	b.n	8011750 <xQueueReceiveFromISR+0x40>
 801174e:	2300      	movs	r3, #0
 8011750:	2b00      	cmp	r3, #0
 8011752:	d10a      	bne.n	801176a <xQueueReceiveFromISR+0x5a>
 8011754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011758:	f383 8811 	msr	BASEPRI, r3
 801175c:	f3bf 8f6f 	isb	sy
 8011760:	f3bf 8f4f 	dsb	sy
 8011764:	61fb      	str	r3, [r7, #28]
 8011766:	bf00      	nop
 8011768:	e7fe      	b.n	8011768 <xQueueReceiveFromISR+0x58>
 801176a:	f002 fc8d 	bl	8014088 <vPortValidateInterruptPriority>
 801176e:	f3ef 8211 	mrs	r2, BASEPRI
 8011772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011776:	f383 8811 	msr	BASEPRI, r3
 801177a:	f3bf 8f6f 	isb	sy
 801177e:	f3bf 8f4f 	dsb	sy
 8011782:	61ba      	str	r2, [r7, #24]
 8011784:	617b      	str	r3, [r7, #20]
 8011786:	69bb      	ldr	r3, [r7, #24]
 8011788:	62fb      	str	r3, [r7, #44]	; 0x2c
 801178a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801178c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801178e:	62bb      	str	r3, [r7, #40]	; 0x28
 8011790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011792:	2b00      	cmp	r3, #0
 8011794:	d02f      	beq.n	80117f6 <xQueueReceiveFromISR+0xe6>
 8011796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011798:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801179c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80117a0:	68b9      	ldr	r1, [r7, #8]
 80117a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117a4:	f000 f8b6 	bl	8011914 <prvCopyDataFromQueue>
 80117a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117aa:	1e5a      	subs	r2, r3, #1
 80117ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ae:	639a      	str	r2, [r3, #56]	; 0x38
 80117b0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80117b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117b8:	d112      	bne.n	80117e0 <xQueueReceiveFromISR+0xd0>
 80117ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117bc:	691b      	ldr	r3, [r3, #16]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d016      	beq.n	80117f0 <xQueueReceiveFromISR+0xe0>
 80117c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c4:	3310      	adds	r3, #16
 80117c6:	4618      	mov	r0, r3
 80117c8:	f001 f9e6 	bl	8012b98 <xTaskRemoveFromEventList>
 80117cc:	4603      	mov	r3, r0
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d00e      	beq.n	80117f0 <xQueueReceiveFromISR+0xe0>
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d00b      	beq.n	80117f0 <xQueueReceiveFromISR+0xe0>
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	2201      	movs	r2, #1
 80117dc:	601a      	str	r2, [r3, #0]
 80117de:	e007      	b.n	80117f0 <xQueueReceiveFromISR+0xe0>
 80117e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80117e4:	3301      	adds	r3, #1
 80117e6:	b2db      	uxtb	r3, r3
 80117e8:	b25a      	sxtb	r2, r3
 80117ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80117f0:	2301      	movs	r3, #1
 80117f2:	637b      	str	r3, [r7, #52]	; 0x34
 80117f4:	e001      	b.n	80117fa <xQueueReceiveFromISR+0xea>
 80117f6:	2300      	movs	r3, #0
 80117f8:	637b      	str	r3, [r7, #52]	; 0x34
 80117fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117fc:	613b      	str	r3, [r7, #16]
 80117fe:	693b      	ldr	r3, [r7, #16]
 8011800:	f383 8811 	msr	BASEPRI, r3
 8011804:	bf00      	nop
 8011806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011808:	4618      	mov	r0, r3
 801180a:	3738      	adds	r7, #56	; 0x38
 801180c:	46bd      	mov	sp, r7
 801180e:	bd80      	pop	{r7, pc}

08011810 <prvGetDisinheritPriorityAfterTimeout>:
 8011810:	b480      	push	{r7}
 8011812:	b085      	sub	sp, #20
 8011814:	af00      	add	r7, sp, #0
 8011816:	6078      	str	r0, [r7, #4]
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801181c:	2b00      	cmp	r3, #0
 801181e:	d006      	beq.n	801182e <prvGetDisinheritPriorityAfterTimeout+0x1e>
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801182a:	60fb      	str	r3, [r7, #12]
 801182c:	e001      	b.n	8011832 <prvGetDisinheritPriorityAfterTimeout+0x22>
 801182e:	2300      	movs	r3, #0
 8011830:	60fb      	str	r3, [r7, #12]
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	4618      	mov	r0, r3
 8011836:	3714      	adds	r7, #20
 8011838:	46bd      	mov	sp, r7
 801183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183e:	4770      	bx	lr

08011840 <prvCopyDataToQueue>:
 8011840:	b580      	push	{r7, lr}
 8011842:	b086      	sub	sp, #24
 8011844:	af00      	add	r7, sp, #0
 8011846:	60f8      	str	r0, [r7, #12]
 8011848:	60b9      	str	r1, [r7, #8]
 801184a:	607a      	str	r2, [r7, #4]
 801184c:	2300      	movs	r3, #0
 801184e:	617b      	str	r3, [r7, #20]
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011854:	613b      	str	r3, [r7, #16]
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801185a:	2b00      	cmp	r3, #0
 801185c:	d10d      	bne.n	801187a <prvCopyDataToQueue+0x3a>
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d14d      	bne.n	8011902 <prvCopyDataToQueue+0xc2>
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	689b      	ldr	r3, [r3, #8]
 801186a:	4618      	mov	r0, r3
 801186c:	f001 fc12 	bl	8013094 <xTaskPriorityDisinherit>
 8011870:	6178      	str	r0, [r7, #20]
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	2200      	movs	r2, #0
 8011876:	609a      	str	r2, [r3, #8]
 8011878:	e043      	b.n	8011902 <prvCopyDataToQueue+0xc2>
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d119      	bne.n	80118b4 <prvCopyDataToQueue+0x74>
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	6858      	ldr	r0, [r3, #4]
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011888:	461a      	mov	r2, r3
 801188a:	68b9      	ldr	r1, [r7, #8]
 801188c:	f002 ff9a 	bl	80147c4 <memcpy>
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	685a      	ldr	r2, [r3, #4]
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011898:	441a      	add	r2, r3
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	605a      	str	r2, [r3, #4]
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	685a      	ldr	r2, [r3, #4]
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	689b      	ldr	r3, [r3, #8]
 80118a6:	429a      	cmp	r2, r3
 80118a8:	d32b      	bcc.n	8011902 <prvCopyDataToQueue+0xc2>
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	681a      	ldr	r2, [r3, #0]
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	605a      	str	r2, [r3, #4]
 80118b2:	e026      	b.n	8011902 <prvCopyDataToQueue+0xc2>
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	68d8      	ldr	r0, [r3, #12]
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118bc:	461a      	mov	r2, r3
 80118be:	68b9      	ldr	r1, [r7, #8]
 80118c0:	f002 ff80 	bl	80147c4 <memcpy>
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	68da      	ldr	r2, [r3, #12]
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118cc:	425b      	negs	r3, r3
 80118ce:	441a      	add	r2, r3
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	60da      	str	r2, [r3, #12]
 80118d4:	68fb      	ldr	r3, [r7, #12]
 80118d6:	68da      	ldr	r2, [r3, #12]
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	429a      	cmp	r2, r3
 80118de:	d207      	bcs.n	80118f0 <prvCopyDataToQueue+0xb0>
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	689a      	ldr	r2, [r3, #8]
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118e8:	425b      	negs	r3, r3
 80118ea:	441a      	add	r2, r3
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	60da      	str	r2, [r3, #12]
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2b02      	cmp	r3, #2
 80118f4:	d105      	bne.n	8011902 <prvCopyDataToQueue+0xc2>
 80118f6:	693b      	ldr	r3, [r7, #16]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d002      	beq.n	8011902 <prvCopyDataToQueue+0xc2>
 80118fc:	693b      	ldr	r3, [r7, #16]
 80118fe:	3b01      	subs	r3, #1
 8011900:	613b      	str	r3, [r7, #16]
 8011902:	693b      	ldr	r3, [r7, #16]
 8011904:	1c5a      	adds	r2, r3, #1
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	639a      	str	r2, [r3, #56]	; 0x38
 801190a:	697b      	ldr	r3, [r7, #20]
 801190c:	4618      	mov	r0, r3
 801190e:	3718      	adds	r7, #24
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}

08011914 <prvCopyDataFromQueue>:
 8011914:	b580      	push	{r7, lr}
 8011916:	b082      	sub	sp, #8
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	6039      	str	r1, [r7, #0]
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011922:	2b00      	cmp	r3, #0
 8011924:	d018      	beq.n	8011958 <prvCopyDataFromQueue+0x44>
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	68da      	ldr	r2, [r3, #12]
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801192e:	441a      	add	r2, r3
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	60da      	str	r2, [r3, #12]
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	68da      	ldr	r2, [r3, #12]
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	689b      	ldr	r3, [r3, #8]
 801193c:	429a      	cmp	r2, r3
 801193e:	d303      	bcc.n	8011948 <prvCopyDataFromQueue+0x34>
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	681a      	ldr	r2, [r3, #0]
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	60da      	str	r2, [r3, #12]
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	68d9      	ldr	r1, [r3, #12]
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011950:	461a      	mov	r2, r3
 8011952:	6838      	ldr	r0, [r7, #0]
 8011954:	f002 ff36 	bl	80147c4 <memcpy>
 8011958:	bf00      	nop
 801195a:	3708      	adds	r7, #8
 801195c:	46bd      	mov	sp, r7
 801195e:	bd80      	pop	{r7, pc}

08011960 <prvUnlockQueue>:
 8011960:	b580      	push	{r7, lr}
 8011962:	b084      	sub	sp, #16
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
 8011968:	f002 faac 	bl	8013ec4 <vPortEnterCritical>
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011972:	73fb      	strb	r3, [r7, #15]
 8011974:	e011      	b.n	801199a <prvUnlockQueue+0x3a>
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801197a:	2b00      	cmp	r3, #0
 801197c:	d012      	beq.n	80119a4 <prvUnlockQueue+0x44>
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	3324      	adds	r3, #36	; 0x24
 8011982:	4618      	mov	r0, r3
 8011984:	f001 f908 	bl	8012b98 <xTaskRemoveFromEventList>
 8011988:	4603      	mov	r3, r0
 801198a:	2b00      	cmp	r3, #0
 801198c:	d001      	beq.n	8011992 <prvUnlockQueue+0x32>
 801198e:	f001 fa05 	bl	8012d9c <vTaskMissedYield>
 8011992:	7bfb      	ldrb	r3, [r7, #15]
 8011994:	3b01      	subs	r3, #1
 8011996:	b2db      	uxtb	r3, r3
 8011998:	73fb      	strb	r3, [r7, #15]
 801199a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	dce9      	bgt.n	8011976 <prvUnlockQueue+0x16>
 80119a2:	e000      	b.n	80119a6 <prvUnlockQueue+0x46>
 80119a4:	bf00      	nop
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	22ff      	movs	r2, #255	; 0xff
 80119aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80119ae:	f002 fab9 	bl	8013f24 <vPortExitCritical>
 80119b2:	f002 fa87 	bl	8013ec4 <vPortEnterCritical>
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80119bc:	73bb      	strb	r3, [r7, #14]
 80119be:	e011      	b.n	80119e4 <prvUnlockQueue+0x84>
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	691b      	ldr	r3, [r3, #16]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d012      	beq.n	80119ee <prvUnlockQueue+0x8e>
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	3310      	adds	r3, #16
 80119cc:	4618      	mov	r0, r3
 80119ce:	f001 f8e3 	bl	8012b98 <xTaskRemoveFromEventList>
 80119d2:	4603      	mov	r3, r0
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d001      	beq.n	80119dc <prvUnlockQueue+0x7c>
 80119d8:	f001 f9e0 	bl	8012d9c <vTaskMissedYield>
 80119dc:	7bbb      	ldrb	r3, [r7, #14]
 80119de:	3b01      	subs	r3, #1
 80119e0:	b2db      	uxtb	r3, r3
 80119e2:	73bb      	strb	r3, [r7, #14]
 80119e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	dce9      	bgt.n	80119c0 <prvUnlockQueue+0x60>
 80119ec:	e000      	b.n	80119f0 <prvUnlockQueue+0x90>
 80119ee:	bf00      	nop
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	22ff      	movs	r2, #255	; 0xff
 80119f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80119f8:	f002 fa94 	bl	8013f24 <vPortExitCritical>
 80119fc:	bf00      	nop
 80119fe:	3710      	adds	r7, #16
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}

08011a04 <prvIsQueueEmpty>:
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b084      	sub	sp, #16
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
 8011a0c:	f002 fa5a 	bl	8013ec4 <vPortEnterCritical>
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d102      	bne.n	8011a1e <prvIsQueueEmpty+0x1a>
 8011a18:	2301      	movs	r3, #1
 8011a1a:	60fb      	str	r3, [r7, #12]
 8011a1c:	e001      	b.n	8011a22 <prvIsQueueEmpty+0x1e>
 8011a1e:	2300      	movs	r3, #0
 8011a20:	60fb      	str	r3, [r7, #12]
 8011a22:	f002 fa7f 	bl	8013f24 <vPortExitCritical>
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	4618      	mov	r0, r3
 8011a2a:	3710      	adds	r7, #16
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}

08011a30 <prvIsQueueFull>:
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b084      	sub	sp, #16
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
 8011a38:	f002 fa44 	bl	8013ec4 <vPortEnterCritical>
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a44:	429a      	cmp	r2, r3
 8011a46:	d102      	bne.n	8011a4e <prvIsQueueFull+0x1e>
 8011a48:	2301      	movs	r3, #1
 8011a4a:	60fb      	str	r3, [r7, #12]
 8011a4c:	e001      	b.n	8011a52 <prvIsQueueFull+0x22>
 8011a4e:	2300      	movs	r3, #0
 8011a50:	60fb      	str	r3, [r7, #12]
 8011a52:	f002 fa67 	bl	8013f24 <vPortExitCritical>
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	4618      	mov	r0, r3
 8011a5a:	3710      	adds	r7, #16
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bd80      	pop	{r7, pc}

08011a60 <vQueueAddToRegistry>:
 8011a60:	b480      	push	{r7}
 8011a62:	b085      	sub	sp, #20
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
 8011a68:	6039      	str	r1, [r7, #0]
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	60fb      	str	r3, [r7, #12]
 8011a6e:	e014      	b.n	8011a9a <vQueueAddToRegistry+0x3a>
 8011a70:	4a0f      	ldr	r2, [pc, #60]	; (8011ab0 <vQueueAddToRegistry+0x50>)
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d10b      	bne.n	8011a94 <vQueueAddToRegistry+0x34>
 8011a7c:	490c      	ldr	r1, [pc, #48]	; (8011ab0 <vQueueAddToRegistry+0x50>)
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	683a      	ldr	r2, [r7, #0]
 8011a82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8011a86:	4a0a      	ldr	r2, [pc, #40]	; (8011ab0 <vQueueAddToRegistry+0x50>)
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	00db      	lsls	r3, r3, #3
 8011a8c:	4413      	add	r3, r2
 8011a8e:	687a      	ldr	r2, [r7, #4]
 8011a90:	605a      	str	r2, [r3, #4]
 8011a92:	e006      	b.n	8011aa2 <vQueueAddToRegistry+0x42>
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	3301      	adds	r3, #1
 8011a98:	60fb      	str	r3, [r7, #12]
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	2b07      	cmp	r3, #7
 8011a9e:	d9e7      	bls.n	8011a70 <vQueueAddToRegistry+0x10>
 8011aa0:	bf00      	nop
 8011aa2:	bf00      	nop
 8011aa4:	3714      	adds	r7, #20
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aac:	4770      	bx	lr
 8011aae:	bf00      	nop
 8011ab0:	20001c08 	.word	0x20001c08

08011ab4 <vQueueWaitForMessageRestricted>:
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b086      	sub	sp, #24
 8011ab8:	af00      	add	r7, sp, #0
 8011aba:	60f8      	str	r0, [r7, #12]
 8011abc:	60b9      	str	r1, [r7, #8]
 8011abe:	607a      	str	r2, [r7, #4]
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	617b      	str	r3, [r7, #20]
 8011ac4:	f002 f9fe 	bl	8013ec4 <vPortEnterCritical>
 8011ac8:	697b      	ldr	r3, [r7, #20]
 8011aca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011ace:	b25b      	sxtb	r3, r3
 8011ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ad4:	d103      	bne.n	8011ade <vQueueWaitForMessageRestricted+0x2a>
 8011ad6:	697b      	ldr	r3, [r7, #20]
 8011ad8:	2200      	movs	r2, #0
 8011ada:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011ade:	697b      	ldr	r3, [r7, #20]
 8011ae0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011ae4:	b25b      	sxtb	r3, r3
 8011ae6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011aea:	d103      	bne.n	8011af4 <vQueueWaitForMessageRestricted+0x40>
 8011aec:	697b      	ldr	r3, [r7, #20]
 8011aee:	2200      	movs	r2, #0
 8011af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011af4:	f002 fa16 	bl	8013f24 <vPortExitCritical>
 8011af8:	697b      	ldr	r3, [r7, #20]
 8011afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d106      	bne.n	8011b0e <vQueueWaitForMessageRestricted+0x5a>
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	3324      	adds	r3, #36	; 0x24
 8011b04:	687a      	ldr	r2, [r7, #4]
 8011b06:	68b9      	ldr	r1, [r7, #8]
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f001 f819 	bl	8012b40 <vTaskPlaceOnEventListRestricted>
 8011b0e:	6978      	ldr	r0, [r7, #20]
 8011b10:	f7ff ff26 	bl	8011960 <prvUnlockQueue>
 8011b14:	bf00      	nop
 8011b16:	3718      	adds	r7, #24
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	bd80      	pop	{r7, pc}

08011b1c <xStreamBufferGenericCreate>:
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b08c      	sub	sp, #48	; 0x30
 8011b20:	af02      	add	r7, sp, #8
 8011b22:	60f8      	str	r0, [r7, #12]
 8011b24:	60b9      	str	r1, [r7, #8]
 8011b26:	607a      	str	r2, [r7, #4]
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	2b01      	cmp	r3, #1
 8011b2c:	d110      	bne.n	8011b50 <xStreamBufferGenericCreate+0x34>
 8011b2e:	2301      	movs	r3, #1
 8011b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	2b04      	cmp	r3, #4
 8011b38:	d81b      	bhi.n	8011b72 <xStreamBufferGenericCreate+0x56>
 8011b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b3e:	f383 8811 	msr	BASEPRI, r3
 8011b42:	f3bf 8f6f 	isb	sy
 8011b46:	f3bf 8f4f 	dsb	sy
 8011b4a:	61fb      	str	r3, [r7, #28]
 8011b4c:	bf00      	nop
 8011b4e:	e7fe      	b.n	8011b4e <xStreamBufferGenericCreate+0x32>
 8011b50:	2300      	movs	r3, #0
 8011b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d10a      	bne.n	8011b72 <xStreamBufferGenericCreate+0x56>
 8011b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b60:	f383 8811 	msr	BASEPRI, r3
 8011b64:	f3bf 8f6f 	isb	sy
 8011b68:	f3bf 8f4f 	dsb	sy
 8011b6c:	61bb      	str	r3, [r7, #24]
 8011b6e:	bf00      	nop
 8011b70:	e7fe      	b.n	8011b70 <xStreamBufferGenericCreate+0x54>
 8011b72:	68ba      	ldr	r2, [r7, #8]
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	429a      	cmp	r2, r3
 8011b78:	d90a      	bls.n	8011b90 <xStreamBufferGenericCreate+0x74>
 8011b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b7e:	f383 8811 	msr	BASEPRI, r3
 8011b82:	f3bf 8f6f 	isb	sy
 8011b86:	f3bf 8f4f 	dsb	sy
 8011b8a:	617b      	str	r3, [r7, #20]
 8011b8c:	bf00      	nop
 8011b8e:	e7fe      	b.n	8011b8e <xStreamBufferGenericCreate+0x72>
 8011b90:	68bb      	ldr	r3, [r7, #8]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d101      	bne.n	8011b9a <xStreamBufferGenericCreate+0x7e>
 8011b96:	2301      	movs	r3, #1
 8011b98:	60bb      	str	r3, [r7, #8]
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	3301      	adds	r3, #1
 8011b9e:	60fb      	str	r3, [r7, #12]
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	3324      	adds	r3, #36	; 0x24
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	f002 faaf 	bl	8014108 <pvPortMalloc>
 8011baa:	6238      	str	r0, [r7, #32]
 8011bac:	6a3b      	ldr	r3, [r7, #32]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d00a      	beq.n	8011bc8 <xStreamBufferGenericCreate+0xac>
 8011bb2:	6a3b      	ldr	r3, [r7, #32]
 8011bb4:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8011bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bbc:	9300      	str	r3, [sp, #0]
 8011bbe:	68bb      	ldr	r3, [r7, #8]
 8011bc0:	68fa      	ldr	r2, [r7, #12]
 8011bc2:	6a38      	ldr	r0, [r7, #32]
 8011bc4:	f000 fafd 	bl	80121c2 <prvInitialiseNewStreamBuffer>
 8011bc8:	6a3b      	ldr	r3, [r7, #32]
 8011bca:	4618      	mov	r0, r3
 8011bcc:	3728      	adds	r7, #40	; 0x28
 8011bce:	46bd      	mov	sp, r7
 8011bd0:	bd80      	pop	{r7, pc}

08011bd2 <xStreamBufferSpacesAvailable>:
 8011bd2:	b480      	push	{r7}
 8011bd4:	b087      	sub	sp, #28
 8011bd6:	af00      	add	r7, sp, #0
 8011bd8:	6078      	str	r0, [r7, #4]
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	613b      	str	r3, [r7, #16]
 8011bde:	693b      	ldr	r3, [r7, #16]
 8011be0:	2b00      	cmp	r3, #0
 8011be2:	d10a      	bne.n	8011bfa <xStreamBufferSpacesAvailable+0x28>
 8011be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011be8:	f383 8811 	msr	BASEPRI, r3
 8011bec:	f3bf 8f6f 	isb	sy
 8011bf0:	f3bf 8f4f 	dsb	sy
 8011bf4:	60fb      	str	r3, [r7, #12]
 8011bf6:	bf00      	nop
 8011bf8:	e7fe      	b.n	8011bf8 <xStreamBufferSpacesAvailable+0x26>
 8011bfa:	693b      	ldr	r3, [r7, #16]
 8011bfc:	689a      	ldr	r2, [r3, #8]
 8011bfe:	693b      	ldr	r3, [r7, #16]
 8011c00:	681b      	ldr	r3, [r3, #0]
 8011c02:	4413      	add	r3, r2
 8011c04:	617b      	str	r3, [r7, #20]
 8011c06:	693b      	ldr	r3, [r7, #16]
 8011c08:	685b      	ldr	r3, [r3, #4]
 8011c0a:	697a      	ldr	r2, [r7, #20]
 8011c0c:	1ad3      	subs	r3, r2, r3
 8011c0e:	617b      	str	r3, [r7, #20]
 8011c10:	697b      	ldr	r3, [r7, #20]
 8011c12:	3b01      	subs	r3, #1
 8011c14:	617b      	str	r3, [r7, #20]
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	689b      	ldr	r3, [r3, #8]
 8011c1a:	697a      	ldr	r2, [r7, #20]
 8011c1c:	429a      	cmp	r2, r3
 8011c1e:	d304      	bcc.n	8011c2a <xStreamBufferSpacesAvailable+0x58>
 8011c20:	693b      	ldr	r3, [r7, #16]
 8011c22:	689b      	ldr	r3, [r3, #8]
 8011c24:	697a      	ldr	r2, [r7, #20]
 8011c26:	1ad3      	subs	r3, r2, r3
 8011c28:	617b      	str	r3, [r7, #20]
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	371c      	adds	r7, #28
 8011c30:	46bd      	mov	sp, r7
 8011c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c36:	4770      	bx	lr

08011c38 <xStreamBufferSend>:
 8011c38:	b580      	push	{r7, lr}
 8011c3a:	b090      	sub	sp, #64	; 0x40
 8011c3c:	af02      	add	r7, sp, #8
 8011c3e:	60f8      	str	r0, [r7, #12]
 8011c40:	60b9      	str	r1, [r7, #8]
 8011c42:	607a      	str	r2, [r7, #4]
 8011c44:	603b      	str	r3, [r7, #0]
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	633b      	str	r3, [r7, #48]	; 0x30
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d10a      	bne.n	8011c6e <xStreamBufferSend+0x36>
 8011c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c5c:	f383 8811 	msr	BASEPRI, r3
 8011c60:	f3bf 8f6f 	isb	sy
 8011c64:	f3bf 8f4f 	dsb	sy
 8011c68:	627b      	str	r3, [r7, #36]	; 0x24
 8011c6a:	bf00      	nop
 8011c6c:	e7fe      	b.n	8011c6c <xStreamBufferSend+0x34>
 8011c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d10a      	bne.n	8011c8a <xStreamBufferSend+0x52>
 8011c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c78:	f383 8811 	msr	BASEPRI, r3
 8011c7c:	f3bf 8f6f 	isb	sy
 8011c80:	f3bf 8f4f 	dsb	sy
 8011c84:	623b      	str	r3, [r7, #32]
 8011c86:	bf00      	nop
 8011c88:	e7fe      	b.n	8011c88 <xStreamBufferSend+0x50>
 8011c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c8c:	7f1b      	ldrb	r3, [r3, #28]
 8011c8e:	f003 0301 	and.w	r3, r3, #1
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d011      	beq.n	8011cba <xStreamBufferSend+0x82>
 8011c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c98:	3304      	adds	r3, #4
 8011c9a:	633b      	str	r3, [r7, #48]	; 0x30
 8011c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	429a      	cmp	r2, r3
 8011ca2:	d80a      	bhi.n	8011cba <xStreamBufferSend+0x82>
 8011ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ca8:	f383 8811 	msr	BASEPRI, r3
 8011cac:	f3bf 8f6f 	isb	sy
 8011cb0:	f3bf 8f4f 	dsb	sy
 8011cb4:	61fb      	str	r3, [r7, #28]
 8011cb6:	bf00      	nop
 8011cb8:	e7fe      	b.n	8011cb8 <xStreamBufferSend+0x80>
 8011cba:	683b      	ldr	r3, [r7, #0]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d03e      	beq.n	8011d3e <xStreamBufferSend+0x106>
 8011cc0:	f107 0310 	add.w	r3, r7, #16
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	f000 ffcb 	bl	8012c60 <vTaskSetTimeOutState>
 8011cca:	f002 f8fb 	bl	8013ec4 <vPortEnterCritical>
 8011cce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cd0:	f7ff ff7f 	bl	8011bd2 <xStreamBufferSpacesAvailable>
 8011cd4:	6378      	str	r0, [r7, #52]	; 0x34
 8011cd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cda:	429a      	cmp	r2, r3
 8011cdc:	d217      	bcs.n	8011d0e <xStreamBufferSend+0xd6>
 8011cde:	2000      	movs	r0, #0
 8011ce0:	f001 fbfa 	bl	80134d8 <xTaskNotifyStateClear>
 8011ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ce6:	695b      	ldr	r3, [r3, #20]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d00a      	beq.n	8011d02 <xStreamBufferSend+0xca>
 8011cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cf0:	f383 8811 	msr	BASEPRI, r3
 8011cf4:	f3bf 8f6f 	isb	sy
 8011cf8:	f3bf 8f4f 	dsb	sy
 8011cfc:	61bb      	str	r3, [r7, #24]
 8011cfe:	bf00      	nop
 8011d00:	e7fe      	b.n	8011d00 <xStreamBufferSend+0xc8>
 8011d02:	f001 f931 	bl	8012f68 <xTaskGetCurrentTaskHandle>
 8011d06:	4602      	mov	r2, r0
 8011d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d0a:	615a      	str	r2, [r3, #20]
 8011d0c:	e002      	b.n	8011d14 <xStreamBufferSend+0xdc>
 8011d0e:	f002 f909 	bl	8013f24 <vPortExitCritical>
 8011d12:	e014      	b.n	8011d3e <xStreamBufferSend+0x106>
 8011d14:	f002 f906 	bl	8013f24 <vPortExitCritical>
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	2200      	movs	r2, #0
 8011d1c:	2100      	movs	r1, #0
 8011d1e:	2000      	movs	r0, #0
 8011d20:	f001 fabc 	bl	801329c <xTaskNotifyWait>
 8011d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d26:	2200      	movs	r2, #0
 8011d28:	615a      	str	r2, [r3, #20]
 8011d2a:	463a      	mov	r2, r7
 8011d2c:	f107 0310 	add.w	r3, r7, #16
 8011d30:	4611      	mov	r1, r2
 8011d32:	4618      	mov	r0, r3
 8011d34:	f000 ffd0 	bl	8012cd8 <xTaskCheckForTimeOut>
 8011d38:	4603      	mov	r3, r0
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d0c5      	beq.n	8011cca <xStreamBufferSend+0x92>
 8011d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d103      	bne.n	8011d4c <xStreamBufferSend+0x114>
 8011d44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d46:	f7ff ff44 	bl	8011bd2 <xStreamBufferSpacesAvailable>
 8011d4a:	6378      	str	r0, [r7, #52]	; 0x34
 8011d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d4e:	9300      	str	r3, [sp, #0]
 8011d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d52:	687a      	ldr	r2, [r7, #4]
 8011d54:	68b9      	ldr	r1, [r7, #8]
 8011d56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d58:	f000 f823 	bl	8011da2 <prvWriteMessageToBuffer>
 8011d5c:	62b8      	str	r0, [r7, #40]	; 0x28
 8011d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d019      	beq.n	8011d98 <xStreamBufferSend+0x160>
 8011d64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011d66:	f000 fa0c 	bl	8012182 <prvBytesInBuffer>
 8011d6a:	4602      	mov	r2, r0
 8011d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d6e:	68db      	ldr	r3, [r3, #12]
 8011d70:	429a      	cmp	r2, r3
 8011d72:	d311      	bcc.n	8011d98 <xStreamBufferSend+0x160>
 8011d74:	f000 fcba 	bl	80126ec <vTaskSuspendAll>
 8011d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d7a:	691b      	ldr	r3, [r3, #16]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d009      	beq.n	8011d94 <xStreamBufferSend+0x15c>
 8011d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d82:	6918      	ldr	r0, [r3, #16]
 8011d84:	2300      	movs	r3, #0
 8011d86:	2200      	movs	r2, #0
 8011d88:	2100      	movs	r1, #0
 8011d8a:	f001 fae7 	bl	801335c <xTaskGenericNotify>
 8011d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d90:	2200      	movs	r2, #0
 8011d92:	611a      	str	r2, [r3, #16]
 8011d94:	f000 fcb8 	bl	8012708 <xTaskResumeAll>
 8011d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	3738      	adds	r7, #56	; 0x38
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}

08011da2 <prvWriteMessageToBuffer>:
 8011da2:	b580      	push	{r7, lr}
 8011da4:	b086      	sub	sp, #24
 8011da6:	af00      	add	r7, sp, #0
 8011da8:	60f8      	str	r0, [r7, #12]
 8011daa:	60b9      	str	r1, [r7, #8]
 8011dac:	607a      	str	r2, [r7, #4]
 8011dae:	603b      	str	r3, [r7, #0]
 8011db0:	683b      	ldr	r3, [r7, #0]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d102      	bne.n	8011dbc <prvWriteMessageToBuffer+0x1a>
 8011db6:	2300      	movs	r3, #0
 8011db8:	617b      	str	r3, [r7, #20]
 8011dba:	e01d      	b.n	8011df8 <prvWriteMessageToBuffer+0x56>
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	7f1b      	ldrb	r3, [r3, #28]
 8011dc0:	f003 0301 	and.w	r3, r3, #1
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d108      	bne.n	8011dda <prvWriteMessageToBuffer+0x38>
 8011dc8:	2301      	movs	r3, #1
 8011dca:	617b      	str	r3, [r7, #20]
 8011dcc:	687a      	ldr	r2, [r7, #4]
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	4293      	cmp	r3, r2
 8011dd2:	bf28      	it	cs
 8011dd4:	4613      	movcs	r3, r2
 8011dd6:	607b      	str	r3, [r7, #4]
 8011dd8:	e00e      	b.n	8011df8 <prvWriteMessageToBuffer+0x56>
 8011dda:	683a      	ldr	r2, [r7, #0]
 8011ddc:	6a3b      	ldr	r3, [r7, #32]
 8011dde:	429a      	cmp	r2, r3
 8011de0:	d308      	bcc.n	8011df4 <prvWriteMessageToBuffer+0x52>
 8011de2:	2301      	movs	r3, #1
 8011de4:	617b      	str	r3, [r7, #20]
 8011de6:	1d3b      	adds	r3, r7, #4
 8011de8:	2204      	movs	r2, #4
 8011dea:	4619      	mov	r1, r3
 8011dec:	68f8      	ldr	r0, [r7, #12]
 8011dee:	f000 f8dc 	bl	8011faa <prvWriteBytesToBuffer>
 8011df2:	e001      	b.n	8011df8 <prvWriteMessageToBuffer+0x56>
 8011df4:	2300      	movs	r3, #0
 8011df6:	617b      	str	r3, [r7, #20]
 8011df8:	697b      	ldr	r3, [r7, #20]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d007      	beq.n	8011e0e <prvWriteMessageToBuffer+0x6c>
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	461a      	mov	r2, r3
 8011e02:	68b9      	ldr	r1, [r7, #8]
 8011e04:	68f8      	ldr	r0, [r7, #12]
 8011e06:	f000 f8d0 	bl	8011faa <prvWriteBytesToBuffer>
 8011e0a:	6138      	str	r0, [r7, #16]
 8011e0c:	e001      	b.n	8011e12 <prvWriteMessageToBuffer+0x70>
 8011e0e:	2300      	movs	r3, #0
 8011e10:	613b      	str	r3, [r7, #16]
 8011e12:	693b      	ldr	r3, [r7, #16]
 8011e14:	4618      	mov	r0, r3
 8011e16:	3718      	adds	r7, #24
 8011e18:	46bd      	mov	sp, r7
 8011e1a:	bd80      	pop	{r7, pc}

08011e1c <xStreamBufferReceive>:
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b08e      	sub	sp, #56	; 0x38
 8011e20:	af02      	add	r7, sp, #8
 8011e22:	60f8      	str	r0, [r7, #12]
 8011e24:	60b9      	str	r1, [r7, #8]
 8011e26:	607a      	str	r2, [r7, #4]
 8011e28:	603b      	str	r3, [r7, #0]
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	623b      	str	r3, [r7, #32]
 8011e2e:	2300      	movs	r3, #0
 8011e30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011e32:	68bb      	ldr	r3, [r7, #8]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d10a      	bne.n	8011e4e <xStreamBufferReceive+0x32>
 8011e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e3c:	f383 8811 	msr	BASEPRI, r3
 8011e40:	f3bf 8f6f 	isb	sy
 8011e44:	f3bf 8f4f 	dsb	sy
 8011e48:	61fb      	str	r3, [r7, #28]
 8011e4a:	bf00      	nop
 8011e4c:	e7fe      	b.n	8011e4c <xStreamBufferReceive+0x30>
 8011e4e:	6a3b      	ldr	r3, [r7, #32]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d10a      	bne.n	8011e6a <xStreamBufferReceive+0x4e>
 8011e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e58:	f383 8811 	msr	BASEPRI, r3
 8011e5c:	f3bf 8f6f 	isb	sy
 8011e60:	f3bf 8f4f 	dsb	sy
 8011e64:	61bb      	str	r3, [r7, #24]
 8011e66:	bf00      	nop
 8011e68:	e7fe      	b.n	8011e68 <xStreamBufferReceive+0x4c>
 8011e6a:	6a3b      	ldr	r3, [r7, #32]
 8011e6c:	7f1b      	ldrb	r3, [r3, #28]
 8011e6e:	f003 0301 	and.w	r3, r3, #1
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d002      	beq.n	8011e7c <xStreamBufferReceive+0x60>
 8011e76:	2304      	movs	r3, #4
 8011e78:	627b      	str	r3, [r7, #36]	; 0x24
 8011e7a:	e001      	b.n	8011e80 <xStreamBufferReceive+0x64>
 8011e7c:	2300      	movs	r3, #0
 8011e7e:	627b      	str	r3, [r7, #36]	; 0x24
 8011e80:	683b      	ldr	r3, [r7, #0]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d034      	beq.n	8011ef0 <xStreamBufferReceive+0xd4>
 8011e86:	f002 f81d 	bl	8013ec4 <vPortEnterCritical>
 8011e8a:	6a38      	ldr	r0, [r7, #32]
 8011e8c:	f000 f979 	bl	8012182 <prvBytesInBuffer>
 8011e90:	62b8      	str	r0, [r7, #40]	; 0x28
 8011e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e96:	429a      	cmp	r2, r3
 8011e98:	d816      	bhi.n	8011ec8 <xStreamBufferReceive+0xac>
 8011e9a:	2000      	movs	r0, #0
 8011e9c:	f001 fb1c 	bl	80134d8 <xTaskNotifyStateClear>
 8011ea0:	6a3b      	ldr	r3, [r7, #32]
 8011ea2:	691b      	ldr	r3, [r3, #16]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d00a      	beq.n	8011ebe <xStreamBufferReceive+0xa2>
 8011ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eac:	f383 8811 	msr	BASEPRI, r3
 8011eb0:	f3bf 8f6f 	isb	sy
 8011eb4:	f3bf 8f4f 	dsb	sy
 8011eb8:	617b      	str	r3, [r7, #20]
 8011eba:	bf00      	nop
 8011ebc:	e7fe      	b.n	8011ebc <xStreamBufferReceive+0xa0>
 8011ebe:	f001 f853 	bl	8012f68 <xTaskGetCurrentTaskHandle>
 8011ec2:	4602      	mov	r2, r0
 8011ec4:	6a3b      	ldr	r3, [r7, #32]
 8011ec6:	611a      	str	r2, [r3, #16]
 8011ec8:	f002 f82c 	bl	8013f24 <vPortExitCritical>
 8011ecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed0:	429a      	cmp	r2, r3
 8011ed2:	d811      	bhi.n	8011ef8 <xStreamBufferReceive+0xdc>
 8011ed4:	683b      	ldr	r3, [r7, #0]
 8011ed6:	2200      	movs	r2, #0
 8011ed8:	2100      	movs	r1, #0
 8011eda:	2000      	movs	r0, #0
 8011edc:	f001 f9de 	bl	801329c <xTaskNotifyWait>
 8011ee0:	6a3b      	ldr	r3, [r7, #32]
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	611a      	str	r2, [r3, #16]
 8011ee6:	6a38      	ldr	r0, [r7, #32]
 8011ee8:	f000 f94b 	bl	8012182 <prvBytesInBuffer>
 8011eec:	62b8      	str	r0, [r7, #40]	; 0x28
 8011eee:	e003      	b.n	8011ef8 <xStreamBufferReceive+0xdc>
 8011ef0:	6a38      	ldr	r0, [r7, #32]
 8011ef2:	f000 f946 	bl	8012182 <prvBytesInBuffer>
 8011ef6:	62b8      	str	r0, [r7, #40]	; 0x28
 8011ef8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011efc:	429a      	cmp	r2, r3
 8011efe:	d91d      	bls.n	8011f3c <xStreamBufferReceive+0x120>
 8011f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f02:	9300      	str	r3, [sp, #0]
 8011f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f06:	687a      	ldr	r2, [r7, #4]
 8011f08:	68b9      	ldr	r1, [r7, #8]
 8011f0a:	6a38      	ldr	r0, [r7, #32]
 8011f0c:	f000 f81b 	bl	8011f46 <prvReadMessageFromBuffer>
 8011f10:	62f8      	str	r0, [r7, #44]	; 0x2c
 8011f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d011      	beq.n	8011f3c <xStreamBufferReceive+0x120>
 8011f18:	f000 fbe8 	bl	80126ec <vTaskSuspendAll>
 8011f1c:	6a3b      	ldr	r3, [r7, #32]
 8011f1e:	695b      	ldr	r3, [r3, #20]
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d009      	beq.n	8011f38 <xStreamBufferReceive+0x11c>
 8011f24:	6a3b      	ldr	r3, [r7, #32]
 8011f26:	6958      	ldr	r0, [r3, #20]
 8011f28:	2300      	movs	r3, #0
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	2100      	movs	r1, #0
 8011f2e:	f001 fa15 	bl	801335c <xTaskGenericNotify>
 8011f32:	6a3b      	ldr	r3, [r7, #32]
 8011f34:	2200      	movs	r2, #0
 8011f36:	615a      	str	r2, [r3, #20]
 8011f38:	f000 fbe6 	bl	8012708 <xTaskResumeAll>
 8011f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f3e:	4618      	mov	r0, r3
 8011f40:	3730      	adds	r7, #48	; 0x30
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}

08011f46 <prvReadMessageFromBuffer>:
 8011f46:	b580      	push	{r7, lr}
 8011f48:	b088      	sub	sp, #32
 8011f4a:	af00      	add	r7, sp, #0
 8011f4c:	60f8      	str	r0, [r7, #12]
 8011f4e:	60b9      	str	r1, [r7, #8]
 8011f50:	607a      	str	r2, [r7, #4]
 8011f52:	603b      	str	r3, [r7, #0]
 8011f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d019      	beq.n	8011f8e <prvReadMessageFromBuffer+0x48>
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	61bb      	str	r3, [r7, #24]
 8011f60:	f107 0110 	add.w	r1, r7, #16
 8011f64:	683b      	ldr	r3, [r7, #0]
 8011f66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011f68:	68f8      	ldr	r0, [r7, #12]
 8011f6a:	f000 f890 	bl	801208e <prvReadBytesFromBuffer>
 8011f6e:	693b      	ldr	r3, [r7, #16]
 8011f70:	61fb      	str	r3, [r7, #28]
 8011f72:	683a      	ldr	r2, [r7, #0]
 8011f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f76:	1ad3      	subs	r3, r2, r3
 8011f78:	603b      	str	r3, [r7, #0]
 8011f7a:	69fa      	ldr	r2, [r7, #28]
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d907      	bls.n	8011f92 <prvReadMessageFromBuffer+0x4c>
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	69ba      	ldr	r2, [r7, #24]
 8011f86:	601a      	str	r2, [r3, #0]
 8011f88:	2300      	movs	r3, #0
 8011f8a:	61fb      	str	r3, [r7, #28]
 8011f8c:	e001      	b.n	8011f92 <prvReadMessageFromBuffer+0x4c>
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	61fb      	str	r3, [r7, #28]
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	69fa      	ldr	r2, [r7, #28]
 8011f96:	68b9      	ldr	r1, [r7, #8]
 8011f98:	68f8      	ldr	r0, [r7, #12]
 8011f9a:	f000 f878 	bl	801208e <prvReadBytesFromBuffer>
 8011f9e:	6178      	str	r0, [r7, #20]
 8011fa0:	697b      	ldr	r3, [r7, #20]
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	3720      	adds	r7, #32
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}

08011faa <prvWriteBytesToBuffer>:
 8011faa:	b580      	push	{r7, lr}
 8011fac:	b08a      	sub	sp, #40	; 0x28
 8011fae:	af00      	add	r7, sp, #0
 8011fb0:	60f8      	str	r0, [r7, #12]
 8011fb2:	60b9      	str	r1, [r7, #8]
 8011fb4:	607a      	str	r2, [r7, #4]
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d10a      	bne.n	8011fd2 <prvWriteBytesToBuffer+0x28>
 8011fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fc0:	f383 8811 	msr	BASEPRI, r3
 8011fc4:	f3bf 8f6f 	isb	sy
 8011fc8:	f3bf 8f4f 	dsb	sy
 8011fcc:	61fb      	str	r3, [r7, #28]
 8011fce:	bf00      	nop
 8011fd0:	e7fe      	b.n	8011fd0 <prvWriteBytesToBuffer+0x26>
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	685b      	ldr	r3, [r3, #4]
 8011fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	689a      	ldr	r2, [r3, #8]
 8011fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fde:	1ad3      	subs	r3, r2, r3
 8011fe0:	687a      	ldr	r2, [r7, #4]
 8011fe2:	4293      	cmp	r3, r2
 8011fe4:	bf28      	it	cs
 8011fe6:	4613      	movcs	r3, r2
 8011fe8:	623b      	str	r3, [r7, #32]
 8011fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011fec:	6a3b      	ldr	r3, [r7, #32]
 8011fee:	441a      	add	r2, r3
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	689b      	ldr	r3, [r3, #8]
 8011ff4:	429a      	cmp	r2, r3
 8011ff6:	d90a      	bls.n	801200e <prvWriteBytesToBuffer+0x64>
 8011ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ffc:	f383 8811 	msr	BASEPRI, r3
 8012000:	f3bf 8f6f 	isb	sy
 8012004:	f3bf 8f4f 	dsb	sy
 8012008:	61bb      	str	r3, [r7, #24]
 801200a:	bf00      	nop
 801200c:	e7fe      	b.n	801200c <prvWriteBytesToBuffer+0x62>
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	699a      	ldr	r2, [r3, #24]
 8012012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012014:	4413      	add	r3, r2
 8012016:	6a3a      	ldr	r2, [r7, #32]
 8012018:	68b9      	ldr	r1, [r7, #8]
 801201a:	4618      	mov	r0, r3
 801201c:	f002 fbd2 	bl	80147c4 <memcpy>
 8012020:	687a      	ldr	r2, [r7, #4]
 8012022:	6a3b      	ldr	r3, [r7, #32]
 8012024:	429a      	cmp	r2, r3
 8012026:	d91c      	bls.n	8012062 <prvWriteBytesToBuffer+0xb8>
 8012028:	687a      	ldr	r2, [r7, #4]
 801202a:	6a3b      	ldr	r3, [r7, #32]
 801202c:	1ad2      	subs	r2, r2, r3
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	689b      	ldr	r3, [r3, #8]
 8012032:	429a      	cmp	r2, r3
 8012034:	d90a      	bls.n	801204c <prvWriteBytesToBuffer+0xa2>
 8012036:	f04f 0350 	mov.w	r3, #80	; 0x50
 801203a:	f383 8811 	msr	BASEPRI, r3
 801203e:	f3bf 8f6f 	isb	sy
 8012042:	f3bf 8f4f 	dsb	sy
 8012046:	617b      	str	r3, [r7, #20]
 8012048:	bf00      	nop
 801204a:	e7fe      	b.n	801204a <prvWriteBytesToBuffer+0xa0>
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	6998      	ldr	r0, [r3, #24]
 8012050:	68ba      	ldr	r2, [r7, #8]
 8012052:	6a3b      	ldr	r3, [r7, #32]
 8012054:	18d1      	adds	r1, r2, r3
 8012056:	687a      	ldr	r2, [r7, #4]
 8012058:	6a3b      	ldr	r3, [r7, #32]
 801205a:	1ad3      	subs	r3, r2, r3
 801205c:	461a      	mov	r2, r3
 801205e:	f002 fbb1 	bl	80147c4 <memcpy>
 8012062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	4413      	add	r3, r2
 8012068:	627b      	str	r3, [r7, #36]	; 0x24
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	689b      	ldr	r3, [r3, #8]
 801206e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012070:	429a      	cmp	r2, r3
 8012072:	d304      	bcc.n	801207e <prvWriteBytesToBuffer+0xd4>
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	689b      	ldr	r3, [r3, #8]
 8012078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801207a:	1ad3      	subs	r3, r2, r3
 801207c:	627b      	str	r3, [r7, #36]	; 0x24
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012082:	605a      	str	r2, [r3, #4]
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	4618      	mov	r0, r3
 8012088:	3728      	adds	r7, #40	; 0x28
 801208a:	46bd      	mov	sp, r7
 801208c:	bd80      	pop	{r7, pc}

0801208e <prvReadBytesFromBuffer>:
 801208e:	b580      	push	{r7, lr}
 8012090:	b08a      	sub	sp, #40	; 0x28
 8012092:	af00      	add	r7, sp, #0
 8012094:	60f8      	str	r0, [r7, #12]
 8012096:	60b9      	str	r1, [r7, #8]
 8012098:	607a      	str	r2, [r7, #4]
 801209a:	603b      	str	r3, [r7, #0]
 801209c:	687a      	ldr	r2, [r7, #4]
 801209e:	683b      	ldr	r3, [r7, #0]
 80120a0:	4293      	cmp	r3, r2
 80120a2:	bf28      	it	cs
 80120a4:	4613      	movcs	r3, r2
 80120a6:	623b      	str	r3, [r7, #32]
 80120a8:	6a3b      	ldr	r3, [r7, #32]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d064      	beq.n	8012178 <prvReadBytesFromBuffer+0xea>
 80120ae:	68fb      	ldr	r3, [r7, #12]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	627b      	str	r3, [r7, #36]	; 0x24
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	689a      	ldr	r2, [r3, #8]
 80120b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ba:	1ad3      	subs	r3, r2, r3
 80120bc:	6a3a      	ldr	r2, [r7, #32]
 80120be:	4293      	cmp	r3, r2
 80120c0:	bf28      	it	cs
 80120c2:	4613      	movcs	r3, r2
 80120c4:	61fb      	str	r3, [r7, #28]
 80120c6:	69fa      	ldr	r2, [r7, #28]
 80120c8:	687b      	ldr	r3, [r7, #4]
 80120ca:	429a      	cmp	r2, r3
 80120cc:	d90a      	bls.n	80120e4 <prvReadBytesFromBuffer+0x56>
 80120ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120d2:	f383 8811 	msr	BASEPRI, r3
 80120d6:	f3bf 8f6f 	isb	sy
 80120da:	f3bf 8f4f 	dsb	sy
 80120de:	61bb      	str	r3, [r7, #24]
 80120e0:	bf00      	nop
 80120e2:	e7fe      	b.n	80120e2 <prvReadBytesFromBuffer+0x54>
 80120e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120e6:	69fb      	ldr	r3, [r7, #28]
 80120e8:	441a      	add	r2, r3
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	689b      	ldr	r3, [r3, #8]
 80120ee:	429a      	cmp	r2, r3
 80120f0:	d90a      	bls.n	8012108 <prvReadBytesFromBuffer+0x7a>
 80120f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120f6:	f383 8811 	msr	BASEPRI, r3
 80120fa:	f3bf 8f6f 	isb	sy
 80120fe:	f3bf 8f4f 	dsb	sy
 8012102:	617b      	str	r3, [r7, #20]
 8012104:	bf00      	nop
 8012106:	e7fe      	b.n	8012106 <prvReadBytesFromBuffer+0x78>
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	699a      	ldr	r2, [r3, #24]
 801210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801210e:	4413      	add	r3, r2
 8012110:	69fa      	ldr	r2, [r7, #28]
 8012112:	4619      	mov	r1, r3
 8012114:	68b8      	ldr	r0, [r7, #8]
 8012116:	f002 fb55 	bl	80147c4 <memcpy>
 801211a:	6a3a      	ldr	r2, [r7, #32]
 801211c:	69fb      	ldr	r3, [r7, #28]
 801211e:	429a      	cmp	r2, r3
 8012120:	d919      	bls.n	8012156 <prvReadBytesFromBuffer+0xc8>
 8012122:	6a3a      	ldr	r2, [r7, #32]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	429a      	cmp	r2, r3
 8012128:	d90a      	bls.n	8012140 <prvReadBytesFromBuffer+0xb2>
 801212a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801212e:	f383 8811 	msr	BASEPRI, r3
 8012132:	f3bf 8f6f 	isb	sy
 8012136:	f3bf 8f4f 	dsb	sy
 801213a:	613b      	str	r3, [r7, #16]
 801213c:	bf00      	nop
 801213e:	e7fe      	b.n	801213e <prvReadBytesFromBuffer+0xb0>
 8012140:	68ba      	ldr	r2, [r7, #8]
 8012142:	69fb      	ldr	r3, [r7, #28]
 8012144:	18d0      	adds	r0, r2, r3
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	6999      	ldr	r1, [r3, #24]
 801214a:	6a3a      	ldr	r2, [r7, #32]
 801214c:	69fb      	ldr	r3, [r7, #28]
 801214e:	1ad3      	subs	r3, r2, r3
 8012150:	461a      	mov	r2, r3
 8012152:	f002 fb37 	bl	80147c4 <memcpy>
 8012156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012158:	6a3b      	ldr	r3, [r7, #32]
 801215a:	4413      	add	r3, r2
 801215c:	627b      	str	r3, [r7, #36]	; 0x24
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	689b      	ldr	r3, [r3, #8]
 8012162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012164:	429a      	cmp	r2, r3
 8012166:	d304      	bcc.n	8012172 <prvReadBytesFromBuffer+0xe4>
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	689b      	ldr	r3, [r3, #8]
 801216c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801216e:	1ad3      	subs	r3, r2, r3
 8012170:	627b      	str	r3, [r7, #36]	; 0x24
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012176:	601a      	str	r2, [r3, #0]
 8012178:	6a3b      	ldr	r3, [r7, #32]
 801217a:	4618      	mov	r0, r3
 801217c:	3728      	adds	r7, #40	; 0x28
 801217e:	46bd      	mov	sp, r7
 8012180:	bd80      	pop	{r7, pc}

08012182 <prvBytesInBuffer>:
 8012182:	b480      	push	{r7}
 8012184:	b085      	sub	sp, #20
 8012186:	af00      	add	r7, sp, #0
 8012188:	6078      	str	r0, [r7, #4]
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	689a      	ldr	r2, [r3, #8]
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	685b      	ldr	r3, [r3, #4]
 8012192:	4413      	add	r3, r2
 8012194:	60fb      	str	r3, [r7, #12]
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	681b      	ldr	r3, [r3, #0]
 801219a:	68fa      	ldr	r2, [r7, #12]
 801219c:	1ad3      	subs	r3, r2, r3
 801219e:	60fb      	str	r3, [r7, #12]
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	689b      	ldr	r3, [r3, #8]
 80121a4:	68fa      	ldr	r2, [r7, #12]
 80121a6:	429a      	cmp	r2, r3
 80121a8:	d304      	bcc.n	80121b4 <prvBytesInBuffer+0x32>
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	689b      	ldr	r3, [r3, #8]
 80121ae:	68fa      	ldr	r2, [r7, #12]
 80121b0:	1ad3      	subs	r3, r2, r3
 80121b2:	60fb      	str	r3, [r7, #12]
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	4618      	mov	r0, r3
 80121b8:	3714      	adds	r7, #20
 80121ba:	46bd      	mov	sp, r7
 80121bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121c0:	4770      	bx	lr

080121c2 <prvInitialiseNewStreamBuffer>:
 80121c2:	b580      	push	{r7, lr}
 80121c4:	b086      	sub	sp, #24
 80121c6:	af00      	add	r7, sp, #0
 80121c8:	60f8      	str	r0, [r7, #12]
 80121ca:	60b9      	str	r1, [r7, #8]
 80121cc:	607a      	str	r2, [r7, #4]
 80121ce:	603b      	str	r3, [r7, #0]
 80121d0:	2355      	movs	r3, #85	; 0x55
 80121d2:	617b      	str	r3, [r7, #20]
 80121d4:	687a      	ldr	r2, [r7, #4]
 80121d6:	6979      	ldr	r1, [r7, #20]
 80121d8:	68b8      	ldr	r0, [r7, #8]
 80121da:	f002 fb01 	bl	80147e0 <memset>
 80121de:	4602      	mov	r2, r0
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	4293      	cmp	r3, r2
 80121e4:	d00a      	beq.n	80121fc <prvInitialiseNewStreamBuffer+0x3a>
 80121e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121ea:	f383 8811 	msr	BASEPRI, r3
 80121ee:	f3bf 8f6f 	isb	sy
 80121f2:	f3bf 8f4f 	dsb	sy
 80121f6:	613b      	str	r3, [r7, #16]
 80121f8:	bf00      	nop
 80121fa:	e7fe      	b.n	80121fa <prvInitialiseNewStreamBuffer+0x38>
 80121fc:	2224      	movs	r2, #36	; 0x24
 80121fe:	2100      	movs	r1, #0
 8012200:	68f8      	ldr	r0, [r7, #12]
 8012202:	f002 faed 	bl	80147e0 <memset>
 8012206:	68fb      	ldr	r3, [r7, #12]
 8012208:	68ba      	ldr	r2, [r7, #8]
 801220a:	619a      	str	r2, [r3, #24]
 801220c:	68fb      	ldr	r3, [r7, #12]
 801220e:	687a      	ldr	r2, [r7, #4]
 8012210:	609a      	str	r2, [r3, #8]
 8012212:	68fb      	ldr	r3, [r7, #12]
 8012214:	683a      	ldr	r2, [r7, #0]
 8012216:	60da      	str	r2, [r3, #12]
 8012218:	68fb      	ldr	r3, [r7, #12]
 801221a:	f897 2020 	ldrb.w	r2, [r7, #32]
 801221e:	771a      	strb	r2, [r3, #28]
 8012220:	bf00      	nop
 8012222:	3718      	adds	r7, #24
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}

08012228 <xTaskCreateStatic>:
 8012228:	b580      	push	{r7, lr}
 801222a:	b08e      	sub	sp, #56	; 0x38
 801222c:	af04      	add	r7, sp, #16
 801222e:	60f8      	str	r0, [r7, #12]
 8012230:	60b9      	str	r1, [r7, #8]
 8012232:	607a      	str	r2, [r7, #4]
 8012234:	603b      	str	r3, [r7, #0]
 8012236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012238:	2b00      	cmp	r3, #0
 801223a:	d10a      	bne.n	8012252 <xTaskCreateStatic+0x2a>
 801223c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012240:	f383 8811 	msr	BASEPRI, r3
 8012244:	f3bf 8f6f 	isb	sy
 8012248:	f3bf 8f4f 	dsb	sy
 801224c:	623b      	str	r3, [r7, #32]
 801224e:	bf00      	nop
 8012250:	e7fe      	b.n	8012250 <xTaskCreateStatic+0x28>
 8012252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012254:	2b00      	cmp	r3, #0
 8012256:	d10a      	bne.n	801226e <xTaskCreateStatic+0x46>
 8012258:	f04f 0350 	mov.w	r3, #80	; 0x50
 801225c:	f383 8811 	msr	BASEPRI, r3
 8012260:	f3bf 8f6f 	isb	sy
 8012264:	f3bf 8f4f 	dsb	sy
 8012268:	61fb      	str	r3, [r7, #28]
 801226a:	bf00      	nop
 801226c:	e7fe      	b.n	801226c <xTaskCreateStatic+0x44>
 801226e:	23c0      	movs	r3, #192	; 0xc0
 8012270:	613b      	str	r3, [r7, #16]
 8012272:	693b      	ldr	r3, [r7, #16]
 8012274:	2bc0      	cmp	r3, #192	; 0xc0
 8012276:	d00a      	beq.n	801228e <xTaskCreateStatic+0x66>
 8012278:	f04f 0350 	mov.w	r3, #80	; 0x50
 801227c:	f383 8811 	msr	BASEPRI, r3
 8012280:	f3bf 8f6f 	isb	sy
 8012284:	f3bf 8f4f 	dsb	sy
 8012288:	61bb      	str	r3, [r7, #24]
 801228a:	bf00      	nop
 801228c:	e7fe      	b.n	801228c <xTaskCreateStatic+0x64>
 801228e:	693b      	ldr	r3, [r7, #16]
 8012290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012292:	2b00      	cmp	r3, #0
 8012294:	d01e      	beq.n	80122d4 <xTaskCreateStatic+0xac>
 8012296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012298:	2b00      	cmp	r3, #0
 801229a:	d01b      	beq.n	80122d4 <xTaskCreateStatic+0xac>
 801229c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801229e:	627b      	str	r3, [r7, #36]	; 0x24
 80122a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122a4:	631a      	str	r2, [r3, #48]	; 0x30
 80122a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a8:	2202      	movs	r2, #2
 80122aa:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
 80122ae:	2300      	movs	r3, #0
 80122b0:	9303      	str	r3, [sp, #12]
 80122b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b4:	9302      	str	r3, [sp, #8]
 80122b6:	f107 0314 	add.w	r3, r7, #20
 80122ba:	9301      	str	r3, [sp, #4]
 80122bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122be:	9300      	str	r3, [sp, #0]
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	687a      	ldr	r2, [r7, #4]
 80122c4:	68b9      	ldr	r1, [r7, #8]
 80122c6:	68f8      	ldr	r0, [r7, #12]
 80122c8:	f000 f850 	bl	801236c <prvInitialiseNewTask>
 80122cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80122ce:	f000 f8f7 	bl	80124c0 <prvAddNewTaskToReadyList>
 80122d2:	e001      	b.n	80122d8 <xTaskCreateStatic+0xb0>
 80122d4:	2300      	movs	r3, #0
 80122d6:	617b      	str	r3, [r7, #20]
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	4618      	mov	r0, r3
 80122dc:	3728      	adds	r7, #40	; 0x28
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}

080122e2 <xTaskCreate>:
 80122e2:	b580      	push	{r7, lr}
 80122e4:	b08c      	sub	sp, #48	; 0x30
 80122e6:	af04      	add	r7, sp, #16
 80122e8:	60f8      	str	r0, [r7, #12]
 80122ea:	60b9      	str	r1, [r7, #8]
 80122ec:	603b      	str	r3, [r7, #0]
 80122ee:	4613      	mov	r3, r2
 80122f0:	80fb      	strh	r3, [r7, #6]
 80122f2:	88fb      	ldrh	r3, [r7, #6]
 80122f4:	009b      	lsls	r3, r3, #2
 80122f6:	4618      	mov	r0, r3
 80122f8:	f001 ff06 	bl	8014108 <pvPortMalloc>
 80122fc:	6178      	str	r0, [r7, #20]
 80122fe:	697b      	ldr	r3, [r7, #20]
 8012300:	2b00      	cmp	r3, #0
 8012302:	d00e      	beq.n	8012322 <xTaskCreate+0x40>
 8012304:	20c0      	movs	r0, #192	; 0xc0
 8012306:	f001 feff 	bl	8014108 <pvPortMalloc>
 801230a:	61f8      	str	r0, [r7, #28]
 801230c:	69fb      	ldr	r3, [r7, #28]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d003      	beq.n	801231a <xTaskCreate+0x38>
 8012312:	69fb      	ldr	r3, [r7, #28]
 8012314:	697a      	ldr	r2, [r7, #20]
 8012316:	631a      	str	r2, [r3, #48]	; 0x30
 8012318:	e005      	b.n	8012326 <xTaskCreate+0x44>
 801231a:	6978      	ldr	r0, [r7, #20]
 801231c:	f001 ffc4 	bl	80142a8 <vPortFree>
 8012320:	e001      	b.n	8012326 <xTaskCreate+0x44>
 8012322:	2300      	movs	r3, #0
 8012324:	61fb      	str	r3, [r7, #28]
 8012326:	69fb      	ldr	r3, [r7, #28]
 8012328:	2b00      	cmp	r3, #0
 801232a:	d017      	beq.n	801235c <xTaskCreate+0x7a>
 801232c:	69fb      	ldr	r3, [r7, #28]
 801232e:	2200      	movs	r2, #0
 8012330:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
 8012334:	88fa      	ldrh	r2, [r7, #6]
 8012336:	2300      	movs	r3, #0
 8012338:	9303      	str	r3, [sp, #12]
 801233a:	69fb      	ldr	r3, [r7, #28]
 801233c:	9302      	str	r3, [sp, #8]
 801233e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012340:	9301      	str	r3, [sp, #4]
 8012342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012344:	9300      	str	r3, [sp, #0]
 8012346:	683b      	ldr	r3, [r7, #0]
 8012348:	68b9      	ldr	r1, [r7, #8]
 801234a:	68f8      	ldr	r0, [r7, #12]
 801234c:	f000 f80e 	bl	801236c <prvInitialiseNewTask>
 8012350:	69f8      	ldr	r0, [r7, #28]
 8012352:	f000 f8b5 	bl	80124c0 <prvAddNewTaskToReadyList>
 8012356:	2301      	movs	r3, #1
 8012358:	61bb      	str	r3, [r7, #24]
 801235a:	e002      	b.n	8012362 <xTaskCreate+0x80>
 801235c:	f04f 33ff 	mov.w	r3, #4294967295
 8012360:	61bb      	str	r3, [r7, #24]
 8012362:	69bb      	ldr	r3, [r7, #24]
 8012364:	4618      	mov	r0, r3
 8012366:	3720      	adds	r7, #32
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}

0801236c <prvInitialiseNewTask>:
 801236c:	b580      	push	{r7, lr}
 801236e:	b088      	sub	sp, #32
 8012370:	af00      	add	r7, sp, #0
 8012372:	60f8      	str	r0, [r7, #12]
 8012374:	60b9      	str	r1, [r7, #8]
 8012376:	607a      	str	r2, [r7, #4]
 8012378:	603b      	str	r3, [r7, #0]
 801237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801237c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	009b      	lsls	r3, r3, #2
 8012382:	461a      	mov	r2, r3
 8012384:	21a5      	movs	r1, #165	; 0xa5
 8012386:	f002 fa2b 	bl	80147e0 <memset>
 801238a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801238c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012394:	3b01      	subs	r3, #1
 8012396:	009b      	lsls	r3, r3, #2
 8012398:	4413      	add	r3, r2
 801239a:	61bb      	str	r3, [r7, #24]
 801239c:	69bb      	ldr	r3, [r7, #24]
 801239e:	f023 0307 	bic.w	r3, r3, #7
 80123a2:	61bb      	str	r3, [r7, #24]
 80123a4:	69bb      	ldr	r3, [r7, #24]
 80123a6:	f003 0307 	and.w	r3, r3, #7
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d00a      	beq.n	80123c4 <prvInitialiseNewTask+0x58>
 80123ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123b2:	f383 8811 	msr	BASEPRI, r3
 80123b6:	f3bf 8f6f 	isb	sy
 80123ba:	f3bf 8f4f 	dsb	sy
 80123be:	617b      	str	r3, [r7, #20]
 80123c0:	bf00      	nop
 80123c2:	e7fe      	b.n	80123c2 <prvInitialiseNewTask+0x56>
 80123c4:	68bb      	ldr	r3, [r7, #8]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d01f      	beq.n	801240a <prvInitialiseNewTask+0x9e>
 80123ca:	2300      	movs	r3, #0
 80123cc:	61fb      	str	r3, [r7, #28]
 80123ce:	e012      	b.n	80123f6 <prvInitialiseNewTask+0x8a>
 80123d0:	68ba      	ldr	r2, [r7, #8]
 80123d2:	69fb      	ldr	r3, [r7, #28]
 80123d4:	4413      	add	r3, r2
 80123d6:	7819      	ldrb	r1, [r3, #0]
 80123d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80123da:	69fb      	ldr	r3, [r7, #28]
 80123dc:	4413      	add	r3, r2
 80123de:	3334      	adds	r3, #52	; 0x34
 80123e0:	460a      	mov	r2, r1
 80123e2:	701a      	strb	r2, [r3, #0]
 80123e4:	68ba      	ldr	r2, [r7, #8]
 80123e6:	69fb      	ldr	r3, [r7, #28]
 80123e8:	4413      	add	r3, r2
 80123ea:	781b      	ldrb	r3, [r3, #0]
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d006      	beq.n	80123fe <prvInitialiseNewTask+0x92>
 80123f0:	69fb      	ldr	r3, [r7, #28]
 80123f2:	3301      	adds	r3, #1
 80123f4:	61fb      	str	r3, [r7, #28]
 80123f6:	69fb      	ldr	r3, [r7, #28]
 80123f8:	2b0f      	cmp	r3, #15
 80123fa:	d9e9      	bls.n	80123d0 <prvInitialiseNewTask+0x64>
 80123fc:	e000      	b.n	8012400 <prvInitialiseNewTask+0x94>
 80123fe:	bf00      	nop
 8012400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012402:	2200      	movs	r2, #0
 8012404:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012408:	e003      	b.n	8012412 <prvInitialiseNewTask+0xa6>
 801240a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801240c:	2200      	movs	r2, #0
 801240e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8012412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012414:	2b37      	cmp	r3, #55	; 0x37
 8012416:	d901      	bls.n	801241c <prvInitialiseNewTask+0xb0>
 8012418:	2337      	movs	r3, #55	; 0x37
 801241a:	62bb      	str	r3, [r7, #40]	; 0x28
 801241c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801241e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012420:	62da      	str	r2, [r3, #44]	; 0x2c
 8012422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012426:	64da      	str	r2, [r3, #76]	; 0x4c
 8012428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801242a:	2200      	movs	r2, #0
 801242c:	651a      	str	r2, [r3, #80]	; 0x50
 801242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012430:	3304      	adds	r3, #4
 8012432:	4618      	mov	r0, r3
 8012434:	f7fe fb5e 	bl	8010af4 <vListInitialiseItem>
 8012438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801243a:	3318      	adds	r3, #24
 801243c:	4618      	mov	r0, r3
 801243e:	f7fe fb59 	bl	8010af4 <vListInitialiseItem>
 8012442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012446:	611a      	str	r2, [r3, #16]
 8012448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801244a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012450:	619a      	str	r2, [r3, #24]
 8012452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012456:	625a      	str	r2, [r3, #36]	; 0x24
 8012458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801245a:	2200      	movs	r2, #0
 801245c:	655a      	str	r2, [r3, #84]	; 0x54
 801245e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012460:	2200      	movs	r2, #0
 8012462:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8012466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012468:	2200      	movs	r2, #0
 801246a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 801246e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012470:	3358      	adds	r3, #88	; 0x58
 8012472:	2260      	movs	r2, #96	; 0x60
 8012474:	2100      	movs	r1, #0
 8012476:	4618      	mov	r0, r3
 8012478:	f002 f9b2 	bl	80147e0 <memset>
 801247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801247e:	4a0d      	ldr	r2, [pc, #52]	; (80124b4 <prvInitialiseNewTask+0x148>)
 8012480:	65da      	str	r2, [r3, #92]	; 0x5c
 8012482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012484:	4a0c      	ldr	r2, [pc, #48]	; (80124b8 <prvInitialiseNewTask+0x14c>)
 8012486:	661a      	str	r2, [r3, #96]	; 0x60
 8012488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801248a:	4a0c      	ldr	r2, [pc, #48]	; (80124bc <prvInitialiseNewTask+0x150>)
 801248c:	665a      	str	r2, [r3, #100]	; 0x64
 801248e:	683a      	ldr	r2, [r7, #0]
 8012490:	68f9      	ldr	r1, [r7, #12]
 8012492:	69b8      	ldr	r0, [r7, #24]
 8012494:	f001 fbe8 	bl	8013c68 <pxPortInitialiseStack>
 8012498:	4602      	mov	r2, r0
 801249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801249c:	601a      	str	r2, [r3, #0]
 801249e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d002      	beq.n	80124aa <prvInitialiseNewTask+0x13e>
 80124a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80124a8:	601a      	str	r2, [r3, #0]
 80124aa:	bf00      	nop
 80124ac:	3720      	adds	r7, #32
 80124ae:	46bd      	mov	sp, r7
 80124b0:	bd80      	pop	{r7, pc}
 80124b2:	bf00      	nop
 80124b4:	08017730 	.word	0x08017730
 80124b8:	08017750 	.word	0x08017750
 80124bc:	08017710 	.word	0x08017710

080124c0 <prvAddNewTaskToReadyList>:
 80124c0:	b580      	push	{r7, lr}
 80124c2:	b082      	sub	sp, #8
 80124c4:	af00      	add	r7, sp, #0
 80124c6:	6078      	str	r0, [r7, #4]
 80124c8:	f001 fcfc 	bl	8013ec4 <vPortEnterCritical>
 80124cc:	4b2d      	ldr	r3, [pc, #180]	; (8012584 <prvAddNewTaskToReadyList+0xc4>)
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	3301      	adds	r3, #1
 80124d2:	4a2c      	ldr	r2, [pc, #176]	; (8012584 <prvAddNewTaskToReadyList+0xc4>)
 80124d4:	6013      	str	r3, [r2, #0]
 80124d6:	4b2c      	ldr	r3, [pc, #176]	; (8012588 <prvAddNewTaskToReadyList+0xc8>)
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d109      	bne.n	80124f2 <prvAddNewTaskToReadyList+0x32>
 80124de:	4a2a      	ldr	r2, [pc, #168]	; (8012588 <prvAddNewTaskToReadyList+0xc8>)
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	6013      	str	r3, [r2, #0]
 80124e4:	4b27      	ldr	r3, [pc, #156]	; (8012584 <prvAddNewTaskToReadyList+0xc4>)
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	2b01      	cmp	r3, #1
 80124ea:	d110      	bne.n	801250e <prvAddNewTaskToReadyList+0x4e>
 80124ec:	f000 fc7a 	bl	8012de4 <prvInitialiseTaskLists>
 80124f0:	e00d      	b.n	801250e <prvAddNewTaskToReadyList+0x4e>
 80124f2:	4b26      	ldr	r3, [pc, #152]	; (801258c <prvAddNewTaskToReadyList+0xcc>)
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d109      	bne.n	801250e <prvAddNewTaskToReadyList+0x4e>
 80124fa:	4b23      	ldr	r3, [pc, #140]	; (8012588 <prvAddNewTaskToReadyList+0xc8>)
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012504:	429a      	cmp	r2, r3
 8012506:	d802      	bhi.n	801250e <prvAddNewTaskToReadyList+0x4e>
 8012508:	4a1f      	ldr	r2, [pc, #124]	; (8012588 <prvAddNewTaskToReadyList+0xc8>)
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	6013      	str	r3, [r2, #0]
 801250e:	4b20      	ldr	r3, [pc, #128]	; (8012590 <prvAddNewTaskToReadyList+0xd0>)
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	3301      	adds	r3, #1
 8012514:	4a1e      	ldr	r2, [pc, #120]	; (8012590 <prvAddNewTaskToReadyList+0xd0>)
 8012516:	6013      	str	r3, [r2, #0]
 8012518:	4b1d      	ldr	r3, [pc, #116]	; (8012590 <prvAddNewTaskToReadyList+0xd0>)
 801251a:	681a      	ldr	r2, [r3, #0]
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	645a      	str	r2, [r3, #68]	; 0x44
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012524:	4b1b      	ldr	r3, [pc, #108]	; (8012594 <prvAddNewTaskToReadyList+0xd4>)
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	429a      	cmp	r2, r3
 801252a:	d903      	bls.n	8012534 <prvAddNewTaskToReadyList+0x74>
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012530:	4a18      	ldr	r2, [pc, #96]	; (8012594 <prvAddNewTaskToReadyList+0xd4>)
 8012532:	6013      	str	r3, [r2, #0]
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012538:	4613      	mov	r3, r2
 801253a:	009b      	lsls	r3, r3, #2
 801253c:	4413      	add	r3, r2
 801253e:	009b      	lsls	r3, r3, #2
 8012540:	4a15      	ldr	r2, [pc, #84]	; (8012598 <prvAddNewTaskToReadyList+0xd8>)
 8012542:	441a      	add	r2, r3
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	3304      	adds	r3, #4
 8012548:	4619      	mov	r1, r3
 801254a:	4610      	mov	r0, r2
 801254c:	f7fe fadf 	bl	8010b0e <vListInsertEnd>
 8012550:	f001 fce8 	bl	8013f24 <vPortExitCritical>
 8012554:	4b0d      	ldr	r3, [pc, #52]	; (801258c <prvAddNewTaskToReadyList+0xcc>)
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d00e      	beq.n	801257a <prvAddNewTaskToReadyList+0xba>
 801255c:	4b0a      	ldr	r3, [pc, #40]	; (8012588 <prvAddNewTaskToReadyList+0xc8>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012566:	429a      	cmp	r2, r3
 8012568:	d207      	bcs.n	801257a <prvAddNewTaskToReadyList+0xba>
 801256a:	4b0c      	ldr	r3, [pc, #48]	; (801259c <prvAddNewTaskToReadyList+0xdc>)
 801256c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012570:	601a      	str	r2, [r3, #0]
 8012572:	f3bf 8f4f 	dsb	sy
 8012576:	f3bf 8f6f 	isb	sy
 801257a:	bf00      	nop
 801257c:	3708      	adds	r7, #8
 801257e:	46bd      	mov	sp, r7
 8012580:	bd80      	pop	{r7, pc}
 8012582:	bf00      	nop
 8012584:	2000211c 	.word	0x2000211c
 8012588:	20001c48 	.word	0x20001c48
 801258c:	20002128 	.word	0x20002128
 8012590:	20002138 	.word	0x20002138
 8012594:	20002124 	.word	0x20002124
 8012598:	20001c4c 	.word	0x20001c4c
 801259c:	e000ed04 	.word	0xe000ed04

080125a0 <vTaskDelay>:
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b084      	sub	sp, #16
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	6078      	str	r0, [r7, #4]
 80125a8:	2300      	movs	r3, #0
 80125aa:	60fb      	str	r3, [r7, #12]
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d017      	beq.n	80125e2 <vTaskDelay+0x42>
 80125b2:	4b13      	ldr	r3, [pc, #76]	; (8012600 <vTaskDelay+0x60>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d00a      	beq.n	80125d0 <vTaskDelay+0x30>
 80125ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125be:	f383 8811 	msr	BASEPRI, r3
 80125c2:	f3bf 8f6f 	isb	sy
 80125c6:	f3bf 8f4f 	dsb	sy
 80125ca:	60bb      	str	r3, [r7, #8]
 80125cc:	bf00      	nop
 80125ce:	e7fe      	b.n	80125ce <vTaskDelay+0x2e>
 80125d0:	f000 f88c 	bl	80126ec <vTaskSuspendAll>
 80125d4:	2100      	movs	r1, #0
 80125d6:	6878      	ldr	r0, [r7, #4]
 80125d8:	f000 ffa4 	bl	8013524 <prvAddCurrentTaskToDelayedList>
 80125dc:	f000 f894 	bl	8012708 <xTaskResumeAll>
 80125e0:	60f8      	str	r0, [r7, #12]
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d107      	bne.n	80125f8 <vTaskDelay+0x58>
 80125e8:	4b06      	ldr	r3, [pc, #24]	; (8012604 <vTaskDelay+0x64>)
 80125ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125ee:	601a      	str	r2, [r3, #0]
 80125f0:	f3bf 8f4f 	dsb	sy
 80125f4:	f3bf 8f6f 	isb	sy
 80125f8:	bf00      	nop
 80125fa:	3710      	adds	r7, #16
 80125fc:	46bd      	mov	sp, r7
 80125fe:	bd80      	pop	{r7, pc}
 8012600:	20002144 	.word	0x20002144
 8012604:	e000ed04 	.word	0xe000ed04

08012608 <vTaskStartScheduler>:
 8012608:	b580      	push	{r7, lr}
 801260a:	b08a      	sub	sp, #40	; 0x28
 801260c:	af04      	add	r7, sp, #16
 801260e:	2300      	movs	r3, #0
 8012610:	60bb      	str	r3, [r7, #8]
 8012612:	2300      	movs	r3, #0
 8012614:	607b      	str	r3, [r7, #4]
 8012616:	463a      	mov	r2, r7
 8012618:	1d39      	adds	r1, r7, #4
 801261a:	f107 0308 	add.w	r3, r7, #8
 801261e:	4618      	mov	r0, r3
 8012620:	f7fe fa14 	bl	8010a4c <vApplicationGetIdleTaskMemory>
 8012624:	6839      	ldr	r1, [r7, #0]
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	68ba      	ldr	r2, [r7, #8]
 801262a:	9202      	str	r2, [sp, #8]
 801262c:	9301      	str	r3, [sp, #4]
 801262e:	2300      	movs	r3, #0
 8012630:	9300      	str	r3, [sp, #0]
 8012632:	2300      	movs	r3, #0
 8012634:	460a      	mov	r2, r1
 8012636:	4925      	ldr	r1, [pc, #148]	; (80126cc <vTaskStartScheduler+0xc4>)
 8012638:	4825      	ldr	r0, [pc, #148]	; (80126d0 <vTaskStartScheduler+0xc8>)
 801263a:	f7ff fdf5 	bl	8012228 <xTaskCreateStatic>
 801263e:	4603      	mov	r3, r0
 8012640:	4a24      	ldr	r2, [pc, #144]	; (80126d4 <vTaskStartScheduler+0xcc>)
 8012642:	6013      	str	r3, [r2, #0]
 8012644:	4b23      	ldr	r3, [pc, #140]	; (80126d4 <vTaskStartScheduler+0xcc>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d002      	beq.n	8012652 <vTaskStartScheduler+0x4a>
 801264c:	2301      	movs	r3, #1
 801264e:	617b      	str	r3, [r7, #20]
 8012650:	e001      	b.n	8012656 <vTaskStartScheduler+0x4e>
 8012652:	2300      	movs	r3, #0
 8012654:	617b      	str	r3, [r7, #20]
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	2b01      	cmp	r3, #1
 801265a:	d102      	bne.n	8012662 <vTaskStartScheduler+0x5a>
 801265c:	f000 ffb6 	bl	80135cc <xTimerCreateTimerTask>
 8012660:	6178      	str	r0, [r7, #20]
 8012662:	697b      	ldr	r3, [r7, #20]
 8012664:	2b01      	cmp	r3, #1
 8012666:	d11d      	bne.n	80126a4 <vTaskStartScheduler+0x9c>
 8012668:	f04f 0350 	mov.w	r3, #80	; 0x50
 801266c:	f383 8811 	msr	BASEPRI, r3
 8012670:	f3bf 8f6f 	isb	sy
 8012674:	f3bf 8f4f 	dsb	sy
 8012678:	613b      	str	r3, [r7, #16]
 801267a:	bf00      	nop
 801267c:	4b16      	ldr	r3, [pc, #88]	; (80126d8 <vTaskStartScheduler+0xd0>)
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	3358      	adds	r3, #88	; 0x58
 8012682:	4a16      	ldr	r2, [pc, #88]	; (80126dc <vTaskStartScheduler+0xd4>)
 8012684:	6013      	str	r3, [r2, #0]
 8012686:	4b16      	ldr	r3, [pc, #88]	; (80126e0 <vTaskStartScheduler+0xd8>)
 8012688:	f04f 32ff 	mov.w	r2, #4294967295
 801268c:	601a      	str	r2, [r3, #0]
 801268e:	4b15      	ldr	r3, [pc, #84]	; (80126e4 <vTaskStartScheduler+0xdc>)
 8012690:	2201      	movs	r2, #1
 8012692:	601a      	str	r2, [r3, #0]
 8012694:	4b14      	ldr	r3, [pc, #80]	; (80126e8 <vTaskStartScheduler+0xe0>)
 8012696:	2200      	movs	r2, #0
 8012698:	601a      	str	r2, [r3, #0]
 801269a:	f7f6 fee5 	bl	8009468 <configureTimerForRunTimeStats>
 801269e:	f001 fb6f 	bl	8013d80 <xPortStartScheduler>
 80126a2:	e00e      	b.n	80126c2 <vTaskStartScheduler+0xba>
 80126a4:	697b      	ldr	r3, [r7, #20]
 80126a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126aa:	d10a      	bne.n	80126c2 <vTaskStartScheduler+0xba>
 80126ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b0:	f383 8811 	msr	BASEPRI, r3
 80126b4:	f3bf 8f6f 	isb	sy
 80126b8:	f3bf 8f4f 	dsb	sy
 80126bc:	60fb      	str	r3, [r7, #12]
 80126be:	bf00      	nop
 80126c0:	e7fe      	b.n	80126c0 <vTaskStartScheduler+0xb8>
 80126c2:	bf00      	nop
 80126c4:	3718      	adds	r7, #24
 80126c6:	46bd      	mov	sp, r7
 80126c8:	bd80      	pop	{r7, pc}
 80126ca:	bf00      	nop
 80126cc:	08017410 	.word	0x08017410
 80126d0:	08012db5 	.word	0x08012db5
 80126d4:	20002140 	.word	0x20002140
 80126d8:	20001c48 	.word	0x20001c48
 80126dc:	20000030 	.word	0x20000030
 80126e0:	2000213c 	.word	0x2000213c
 80126e4:	20002128 	.word	0x20002128
 80126e8:	20002120 	.word	0x20002120

080126ec <vTaskSuspendAll>:
 80126ec:	b480      	push	{r7}
 80126ee:	af00      	add	r7, sp, #0
 80126f0:	4b04      	ldr	r3, [pc, #16]	; (8012704 <vTaskSuspendAll+0x18>)
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	3301      	adds	r3, #1
 80126f6:	4a03      	ldr	r2, [pc, #12]	; (8012704 <vTaskSuspendAll+0x18>)
 80126f8:	6013      	str	r3, [r2, #0]
 80126fa:	bf00      	nop
 80126fc:	46bd      	mov	sp, r7
 80126fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012702:	4770      	bx	lr
 8012704:	20002144 	.word	0x20002144

08012708 <xTaskResumeAll>:
 8012708:	b580      	push	{r7, lr}
 801270a:	b084      	sub	sp, #16
 801270c:	af00      	add	r7, sp, #0
 801270e:	2300      	movs	r3, #0
 8012710:	60fb      	str	r3, [r7, #12]
 8012712:	2300      	movs	r3, #0
 8012714:	60bb      	str	r3, [r7, #8]
 8012716:	4b42      	ldr	r3, [pc, #264]	; (8012820 <xTaskResumeAll+0x118>)
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d10a      	bne.n	8012734 <xTaskResumeAll+0x2c>
 801271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012722:	f383 8811 	msr	BASEPRI, r3
 8012726:	f3bf 8f6f 	isb	sy
 801272a:	f3bf 8f4f 	dsb	sy
 801272e:	603b      	str	r3, [r7, #0]
 8012730:	bf00      	nop
 8012732:	e7fe      	b.n	8012732 <xTaskResumeAll+0x2a>
 8012734:	f001 fbc6 	bl	8013ec4 <vPortEnterCritical>
 8012738:	4b39      	ldr	r3, [pc, #228]	; (8012820 <xTaskResumeAll+0x118>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	3b01      	subs	r3, #1
 801273e:	4a38      	ldr	r2, [pc, #224]	; (8012820 <xTaskResumeAll+0x118>)
 8012740:	6013      	str	r3, [r2, #0]
 8012742:	4b37      	ldr	r3, [pc, #220]	; (8012820 <xTaskResumeAll+0x118>)
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d162      	bne.n	8012810 <xTaskResumeAll+0x108>
 801274a:	4b36      	ldr	r3, [pc, #216]	; (8012824 <xTaskResumeAll+0x11c>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d05e      	beq.n	8012810 <xTaskResumeAll+0x108>
 8012752:	e02f      	b.n	80127b4 <xTaskResumeAll+0xac>
 8012754:	4b34      	ldr	r3, [pc, #208]	; (8012828 <xTaskResumeAll+0x120>)
 8012756:	68db      	ldr	r3, [r3, #12]
 8012758:	68db      	ldr	r3, [r3, #12]
 801275a:	60fb      	str	r3, [r7, #12]
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	3318      	adds	r3, #24
 8012760:	4618      	mov	r0, r3
 8012762:	f7fe fa31 	bl	8010bc8 <uxListRemove>
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	3304      	adds	r3, #4
 801276a:	4618      	mov	r0, r3
 801276c:	f7fe fa2c 	bl	8010bc8 <uxListRemove>
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012774:	4b2d      	ldr	r3, [pc, #180]	; (801282c <xTaskResumeAll+0x124>)
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	429a      	cmp	r2, r3
 801277a:	d903      	bls.n	8012784 <xTaskResumeAll+0x7c>
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012780:	4a2a      	ldr	r2, [pc, #168]	; (801282c <xTaskResumeAll+0x124>)
 8012782:	6013      	str	r3, [r2, #0]
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012788:	4613      	mov	r3, r2
 801278a:	009b      	lsls	r3, r3, #2
 801278c:	4413      	add	r3, r2
 801278e:	009b      	lsls	r3, r3, #2
 8012790:	4a27      	ldr	r2, [pc, #156]	; (8012830 <xTaskResumeAll+0x128>)
 8012792:	441a      	add	r2, r3
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	3304      	adds	r3, #4
 8012798:	4619      	mov	r1, r3
 801279a:	4610      	mov	r0, r2
 801279c:	f7fe f9b7 	bl	8010b0e <vListInsertEnd>
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127a4:	4b23      	ldr	r3, [pc, #140]	; (8012834 <xTaskResumeAll+0x12c>)
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127aa:	429a      	cmp	r2, r3
 80127ac:	d302      	bcc.n	80127b4 <xTaskResumeAll+0xac>
 80127ae:	4b22      	ldr	r3, [pc, #136]	; (8012838 <xTaskResumeAll+0x130>)
 80127b0:	2201      	movs	r2, #1
 80127b2:	601a      	str	r2, [r3, #0]
 80127b4:	4b1c      	ldr	r3, [pc, #112]	; (8012828 <xTaskResumeAll+0x120>)
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d1cb      	bne.n	8012754 <xTaskResumeAll+0x4c>
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d001      	beq.n	80127c6 <xTaskResumeAll+0xbe>
 80127c2:	f000 fbb1 	bl	8012f28 <prvResetNextTaskUnblockTime>
 80127c6:	4b1d      	ldr	r3, [pc, #116]	; (801283c <xTaskResumeAll+0x134>)
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	607b      	str	r3, [r7, #4]
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d010      	beq.n	80127f4 <xTaskResumeAll+0xec>
 80127d2:	f000 f847 	bl	8012864 <xTaskIncrementTick>
 80127d6:	4603      	mov	r3, r0
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d002      	beq.n	80127e2 <xTaskResumeAll+0xda>
 80127dc:	4b16      	ldr	r3, [pc, #88]	; (8012838 <xTaskResumeAll+0x130>)
 80127de:	2201      	movs	r2, #1
 80127e0:	601a      	str	r2, [r3, #0]
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	3b01      	subs	r3, #1
 80127e6:	607b      	str	r3, [r7, #4]
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d1f1      	bne.n	80127d2 <xTaskResumeAll+0xca>
 80127ee:	4b13      	ldr	r3, [pc, #76]	; (801283c <xTaskResumeAll+0x134>)
 80127f0:	2200      	movs	r2, #0
 80127f2:	601a      	str	r2, [r3, #0]
 80127f4:	4b10      	ldr	r3, [pc, #64]	; (8012838 <xTaskResumeAll+0x130>)
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d009      	beq.n	8012810 <xTaskResumeAll+0x108>
 80127fc:	2301      	movs	r3, #1
 80127fe:	60bb      	str	r3, [r7, #8]
 8012800:	4b0f      	ldr	r3, [pc, #60]	; (8012840 <xTaskResumeAll+0x138>)
 8012802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012806:	601a      	str	r2, [r3, #0]
 8012808:	f3bf 8f4f 	dsb	sy
 801280c:	f3bf 8f6f 	isb	sy
 8012810:	f001 fb88 	bl	8013f24 <vPortExitCritical>
 8012814:	68bb      	ldr	r3, [r7, #8]
 8012816:	4618      	mov	r0, r3
 8012818:	3710      	adds	r7, #16
 801281a:	46bd      	mov	sp, r7
 801281c:	bd80      	pop	{r7, pc}
 801281e:	bf00      	nop
 8012820:	20002144 	.word	0x20002144
 8012824:	2000211c 	.word	0x2000211c
 8012828:	200020dc 	.word	0x200020dc
 801282c:	20002124 	.word	0x20002124
 8012830:	20001c4c 	.word	0x20001c4c
 8012834:	20001c48 	.word	0x20001c48
 8012838:	20002130 	.word	0x20002130
 801283c:	2000212c 	.word	0x2000212c
 8012840:	e000ed04 	.word	0xe000ed04

08012844 <xTaskGetTickCount>:
 8012844:	b480      	push	{r7}
 8012846:	b083      	sub	sp, #12
 8012848:	af00      	add	r7, sp, #0
 801284a:	4b05      	ldr	r3, [pc, #20]	; (8012860 <xTaskGetTickCount+0x1c>)
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	607b      	str	r3, [r7, #4]
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	4618      	mov	r0, r3
 8012854:	370c      	adds	r7, #12
 8012856:	46bd      	mov	sp, r7
 8012858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285c:	4770      	bx	lr
 801285e:	bf00      	nop
 8012860:	20002120 	.word	0x20002120

08012864 <xTaskIncrementTick>:
 8012864:	b580      	push	{r7, lr}
 8012866:	b086      	sub	sp, #24
 8012868:	af00      	add	r7, sp, #0
 801286a:	2300      	movs	r3, #0
 801286c:	617b      	str	r3, [r7, #20]
 801286e:	4b4f      	ldr	r3, [pc, #316]	; (80129ac <xTaskIncrementTick+0x148>)
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	2b00      	cmp	r3, #0
 8012874:	f040 808f 	bne.w	8012996 <xTaskIncrementTick+0x132>
 8012878:	4b4d      	ldr	r3, [pc, #308]	; (80129b0 <xTaskIncrementTick+0x14c>)
 801287a:	681b      	ldr	r3, [r3, #0]
 801287c:	3301      	adds	r3, #1
 801287e:	613b      	str	r3, [r7, #16]
 8012880:	4a4b      	ldr	r2, [pc, #300]	; (80129b0 <xTaskIncrementTick+0x14c>)
 8012882:	693b      	ldr	r3, [r7, #16]
 8012884:	6013      	str	r3, [r2, #0]
 8012886:	693b      	ldr	r3, [r7, #16]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d120      	bne.n	80128ce <xTaskIncrementTick+0x6a>
 801288c:	4b49      	ldr	r3, [pc, #292]	; (80129b4 <xTaskIncrementTick+0x150>)
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d00a      	beq.n	80128ac <xTaskIncrementTick+0x48>
 8012896:	f04f 0350 	mov.w	r3, #80	; 0x50
 801289a:	f383 8811 	msr	BASEPRI, r3
 801289e:	f3bf 8f6f 	isb	sy
 80128a2:	f3bf 8f4f 	dsb	sy
 80128a6:	603b      	str	r3, [r7, #0]
 80128a8:	bf00      	nop
 80128aa:	e7fe      	b.n	80128aa <xTaskIncrementTick+0x46>
 80128ac:	4b41      	ldr	r3, [pc, #260]	; (80129b4 <xTaskIncrementTick+0x150>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	60fb      	str	r3, [r7, #12]
 80128b2:	4b41      	ldr	r3, [pc, #260]	; (80129b8 <xTaskIncrementTick+0x154>)
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	4a3f      	ldr	r2, [pc, #252]	; (80129b4 <xTaskIncrementTick+0x150>)
 80128b8:	6013      	str	r3, [r2, #0]
 80128ba:	4a3f      	ldr	r2, [pc, #252]	; (80129b8 <xTaskIncrementTick+0x154>)
 80128bc:	68fb      	ldr	r3, [r7, #12]
 80128be:	6013      	str	r3, [r2, #0]
 80128c0:	4b3e      	ldr	r3, [pc, #248]	; (80129bc <xTaskIncrementTick+0x158>)
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	3301      	adds	r3, #1
 80128c6:	4a3d      	ldr	r2, [pc, #244]	; (80129bc <xTaskIncrementTick+0x158>)
 80128c8:	6013      	str	r3, [r2, #0]
 80128ca:	f000 fb2d 	bl	8012f28 <prvResetNextTaskUnblockTime>
 80128ce:	4b3c      	ldr	r3, [pc, #240]	; (80129c0 <xTaskIncrementTick+0x15c>)
 80128d0:	681b      	ldr	r3, [r3, #0]
 80128d2:	693a      	ldr	r2, [r7, #16]
 80128d4:	429a      	cmp	r2, r3
 80128d6:	d349      	bcc.n	801296c <xTaskIncrementTick+0x108>
 80128d8:	4b36      	ldr	r3, [pc, #216]	; (80129b4 <xTaskIncrementTick+0x150>)
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d104      	bne.n	80128ec <xTaskIncrementTick+0x88>
 80128e2:	4b37      	ldr	r3, [pc, #220]	; (80129c0 <xTaskIncrementTick+0x15c>)
 80128e4:	f04f 32ff 	mov.w	r2, #4294967295
 80128e8:	601a      	str	r2, [r3, #0]
 80128ea:	e03f      	b.n	801296c <xTaskIncrementTick+0x108>
 80128ec:	4b31      	ldr	r3, [pc, #196]	; (80129b4 <xTaskIncrementTick+0x150>)
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	68db      	ldr	r3, [r3, #12]
 80128f2:	68db      	ldr	r3, [r3, #12]
 80128f4:	60bb      	str	r3, [r7, #8]
 80128f6:	68bb      	ldr	r3, [r7, #8]
 80128f8:	685b      	ldr	r3, [r3, #4]
 80128fa:	607b      	str	r3, [r7, #4]
 80128fc:	693a      	ldr	r2, [r7, #16]
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	429a      	cmp	r2, r3
 8012902:	d203      	bcs.n	801290c <xTaskIncrementTick+0xa8>
 8012904:	4a2e      	ldr	r2, [pc, #184]	; (80129c0 <xTaskIncrementTick+0x15c>)
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	6013      	str	r3, [r2, #0]
 801290a:	e02f      	b.n	801296c <xTaskIncrementTick+0x108>
 801290c:	68bb      	ldr	r3, [r7, #8]
 801290e:	3304      	adds	r3, #4
 8012910:	4618      	mov	r0, r3
 8012912:	f7fe f959 	bl	8010bc8 <uxListRemove>
 8012916:	68bb      	ldr	r3, [r7, #8]
 8012918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801291a:	2b00      	cmp	r3, #0
 801291c:	d004      	beq.n	8012928 <xTaskIncrementTick+0xc4>
 801291e:	68bb      	ldr	r3, [r7, #8]
 8012920:	3318      	adds	r3, #24
 8012922:	4618      	mov	r0, r3
 8012924:	f7fe f950 	bl	8010bc8 <uxListRemove>
 8012928:	68bb      	ldr	r3, [r7, #8]
 801292a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801292c:	4b25      	ldr	r3, [pc, #148]	; (80129c4 <xTaskIncrementTick+0x160>)
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	429a      	cmp	r2, r3
 8012932:	d903      	bls.n	801293c <xTaskIncrementTick+0xd8>
 8012934:	68bb      	ldr	r3, [r7, #8]
 8012936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012938:	4a22      	ldr	r2, [pc, #136]	; (80129c4 <xTaskIncrementTick+0x160>)
 801293a:	6013      	str	r3, [r2, #0]
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012940:	4613      	mov	r3, r2
 8012942:	009b      	lsls	r3, r3, #2
 8012944:	4413      	add	r3, r2
 8012946:	009b      	lsls	r3, r3, #2
 8012948:	4a1f      	ldr	r2, [pc, #124]	; (80129c8 <xTaskIncrementTick+0x164>)
 801294a:	441a      	add	r2, r3
 801294c:	68bb      	ldr	r3, [r7, #8]
 801294e:	3304      	adds	r3, #4
 8012950:	4619      	mov	r1, r3
 8012952:	4610      	mov	r0, r2
 8012954:	f7fe f8db 	bl	8010b0e <vListInsertEnd>
 8012958:	68bb      	ldr	r3, [r7, #8]
 801295a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801295c:	4b1b      	ldr	r3, [pc, #108]	; (80129cc <xTaskIncrementTick+0x168>)
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012962:	429a      	cmp	r2, r3
 8012964:	d3b8      	bcc.n	80128d8 <xTaskIncrementTick+0x74>
 8012966:	2301      	movs	r3, #1
 8012968:	617b      	str	r3, [r7, #20]
 801296a:	e7b5      	b.n	80128d8 <xTaskIncrementTick+0x74>
 801296c:	4b17      	ldr	r3, [pc, #92]	; (80129cc <xTaskIncrementTick+0x168>)
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012972:	4915      	ldr	r1, [pc, #84]	; (80129c8 <xTaskIncrementTick+0x164>)
 8012974:	4613      	mov	r3, r2
 8012976:	009b      	lsls	r3, r3, #2
 8012978:	4413      	add	r3, r2
 801297a:	009b      	lsls	r3, r3, #2
 801297c:	440b      	add	r3, r1
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	2b01      	cmp	r3, #1
 8012982:	d901      	bls.n	8012988 <xTaskIncrementTick+0x124>
 8012984:	2301      	movs	r3, #1
 8012986:	617b      	str	r3, [r7, #20]
 8012988:	4b11      	ldr	r3, [pc, #68]	; (80129d0 <xTaskIncrementTick+0x16c>)
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	2b00      	cmp	r3, #0
 801298e:	d007      	beq.n	80129a0 <xTaskIncrementTick+0x13c>
 8012990:	2301      	movs	r3, #1
 8012992:	617b      	str	r3, [r7, #20]
 8012994:	e004      	b.n	80129a0 <xTaskIncrementTick+0x13c>
 8012996:	4b0f      	ldr	r3, [pc, #60]	; (80129d4 <xTaskIncrementTick+0x170>)
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	3301      	adds	r3, #1
 801299c:	4a0d      	ldr	r2, [pc, #52]	; (80129d4 <xTaskIncrementTick+0x170>)
 801299e:	6013      	str	r3, [r2, #0]
 80129a0:	697b      	ldr	r3, [r7, #20]
 80129a2:	4618      	mov	r0, r3
 80129a4:	3718      	adds	r7, #24
 80129a6:	46bd      	mov	sp, r7
 80129a8:	bd80      	pop	{r7, pc}
 80129aa:	bf00      	nop
 80129ac:	20002144 	.word	0x20002144
 80129b0:	20002120 	.word	0x20002120
 80129b4:	200020d4 	.word	0x200020d4
 80129b8:	200020d8 	.word	0x200020d8
 80129bc:	20002134 	.word	0x20002134
 80129c0:	2000213c 	.word	0x2000213c
 80129c4:	20002124 	.word	0x20002124
 80129c8:	20001c4c 	.word	0x20001c4c
 80129cc:	20001c48 	.word	0x20001c48
 80129d0:	20002130 	.word	0x20002130
 80129d4:	2000212c 	.word	0x2000212c

080129d8 <vTaskSwitchContext>:
 80129d8:	b580      	push	{r7, lr}
 80129da:	b084      	sub	sp, #16
 80129dc:	af00      	add	r7, sp, #0
 80129de:	4b3e      	ldr	r3, [pc, #248]	; (8012ad8 <vTaskSwitchContext+0x100>)
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d003      	beq.n	80129ee <vTaskSwitchContext+0x16>
 80129e6:	4b3d      	ldr	r3, [pc, #244]	; (8012adc <vTaskSwitchContext+0x104>)
 80129e8:	2201      	movs	r2, #1
 80129ea:	601a      	str	r2, [r3, #0]
 80129ec:	e070      	b.n	8012ad0 <vTaskSwitchContext+0xf8>
 80129ee:	4b3b      	ldr	r3, [pc, #236]	; (8012adc <vTaskSwitchContext+0x104>)
 80129f0:	2200      	movs	r2, #0
 80129f2:	601a      	str	r2, [r3, #0]
 80129f4:	f7f6 fd3f 	bl	8009476 <getRunTimeCounterValue>
 80129f8:	4603      	mov	r3, r0
 80129fa:	4a39      	ldr	r2, [pc, #228]	; (8012ae0 <vTaskSwitchContext+0x108>)
 80129fc:	6013      	str	r3, [r2, #0]
 80129fe:	4b38      	ldr	r3, [pc, #224]	; (8012ae0 <vTaskSwitchContext+0x108>)
 8012a00:	681a      	ldr	r2, [r3, #0]
 8012a02:	4b38      	ldr	r3, [pc, #224]	; (8012ae4 <vTaskSwitchContext+0x10c>)
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	429a      	cmp	r2, r3
 8012a08:	d909      	bls.n	8012a1e <vTaskSwitchContext+0x46>
 8012a0a:	4b37      	ldr	r3, [pc, #220]	; (8012ae8 <vTaskSwitchContext+0x110>)
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012a10:	4a33      	ldr	r2, [pc, #204]	; (8012ae0 <vTaskSwitchContext+0x108>)
 8012a12:	6810      	ldr	r0, [r2, #0]
 8012a14:	4a33      	ldr	r2, [pc, #204]	; (8012ae4 <vTaskSwitchContext+0x10c>)
 8012a16:	6812      	ldr	r2, [r2, #0]
 8012a18:	1a82      	subs	r2, r0, r2
 8012a1a:	440a      	add	r2, r1
 8012a1c:	655a      	str	r2, [r3, #84]	; 0x54
 8012a1e:	4b30      	ldr	r3, [pc, #192]	; (8012ae0 <vTaskSwitchContext+0x108>)
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	4a30      	ldr	r2, [pc, #192]	; (8012ae4 <vTaskSwitchContext+0x10c>)
 8012a24:	6013      	str	r3, [r2, #0]
 8012a26:	4b30      	ldr	r3, [pc, #192]	; (8012ae8 <vTaskSwitchContext+0x110>)
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	681a      	ldr	r2, [r3, #0]
 8012a2c:	4b2e      	ldr	r3, [pc, #184]	; (8012ae8 <vTaskSwitchContext+0x110>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012a32:	429a      	cmp	r2, r3
 8012a34:	d808      	bhi.n	8012a48 <vTaskSwitchContext+0x70>
 8012a36:	4b2c      	ldr	r3, [pc, #176]	; (8012ae8 <vTaskSwitchContext+0x110>)
 8012a38:	681a      	ldr	r2, [r3, #0]
 8012a3a:	4b2b      	ldr	r3, [pc, #172]	; (8012ae8 <vTaskSwitchContext+0x110>)
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	3334      	adds	r3, #52	; 0x34
 8012a40:	4619      	mov	r1, r3
 8012a42:	4610      	mov	r0, r2
 8012a44:	f7f6 fd1f 	bl	8009486 <vApplicationStackOverflowHook>
 8012a48:	4b28      	ldr	r3, [pc, #160]	; (8012aec <vTaskSwitchContext+0x114>)
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	60fb      	str	r3, [r7, #12]
 8012a4e:	e010      	b.n	8012a72 <vTaskSwitchContext+0x9a>
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d10a      	bne.n	8012a6c <vTaskSwitchContext+0x94>
 8012a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a5a:	f383 8811 	msr	BASEPRI, r3
 8012a5e:	f3bf 8f6f 	isb	sy
 8012a62:	f3bf 8f4f 	dsb	sy
 8012a66:	607b      	str	r3, [r7, #4]
 8012a68:	bf00      	nop
 8012a6a:	e7fe      	b.n	8012a6a <vTaskSwitchContext+0x92>
 8012a6c:	68fb      	ldr	r3, [r7, #12]
 8012a6e:	3b01      	subs	r3, #1
 8012a70:	60fb      	str	r3, [r7, #12]
 8012a72:	491f      	ldr	r1, [pc, #124]	; (8012af0 <vTaskSwitchContext+0x118>)
 8012a74:	68fa      	ldr	r2, [r7, #12]
 8012a76:	4613      	mov	r3, r2
 8012a78:	009b      	lsls	r3, r3, #2
 8012a7a:	4413      	add	r3, r2
 8012a7c:	009b      	lsls	r3, r3, #2
 8012a7e:	440b      	add	r3, r1
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d0e4      	beq.n	8012a50 <vTaskSwitchContext+0x78>
 8012a86:	68fa      	ldr	r2, [r7, #12]
 8012a88:	4613      	mov	r3, r2
 8012a8a:	009b      	lsls	r3, r3, #2
 8012a8c:	4413      	add	r3, r2
 8012a8e:	009b      	lsls	r3, r3, #2
 8012a90:	4a17      	ldr	r2, [pc, #92]	; (8012af0 <vTaskSwitchContext+0x118>)
 8012a92:	4413      	add	r3, r2
 8012a94:	60bb      	str	r3, [r7, #8]
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	685b      	ldr	r3, [r3, #4]
 8012a9a:	685a      	ldr	r2, [r3, #4]
 8012a9c:	68bb      	ldr	r3, [r7, #8]
 8012a9e:	605a      	str	r2, [r3, #4]
 8012aa0:	68bb      	ldr	r3, [r7, #8]
 8012aa2:	685a      	ldr	r2, [r3, #4]
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	3308      	adds	r3, #8
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	d104      	bne.n	8012ab6 <vTaskSwitchContext+0xde>
 8012aac:	68bb      	ldr	r3, [r7, #8]
 8012aae:	685b      	ldr	r3, [r3, #4]
 8012ab0:	685a      	ldr	r2, [r3, #4]
 8012ab2:	68bb      	ldr	r3, [r7, #8]
 8012ab4:	605a      	str	r2, [r3, #4]
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	685b      	ldr	r3, [r3, #4]
 8012aba:	68db      	ldr	r3, [r3, #12]
 8012abc:	4a0a      	ldr	r2, [pc, #40]	; (8012ae8 <vTaskSwitchContext+0x110>)
 8012abe:	6013      	str	r3, [r2, #0]
 8012ac0:	4a0a      	ldr	r2, [pc, #40]	; (8012aec <vTaskSwitchContext+0x114>)
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	6013      	str	r3, [r2, #0]
 8012ac6:	4b08      	ldr	r3, [pc, #32]	; (8012ae8 <vTaskSwitchContext+0x110>)
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	3358      	adds	r3, #88	; 0x58
 8012acc:	4a09      	ldr	r2, [pc, #36]	; (8012af4 <vTaskSwitchContext+0x11c>)
 8012ace:	6013      	str	r3, [r2, #0]
 8012ad0:	bf00      	nop
 8012ad2:	3710      	adds	r7, #16
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}
 8012ad8:	20002144 	.word	0x20002144
 8012adc:	20002130 	.word	0x20002130
 8012ae0:	2000214c 	.word	0x2000214c
 8012ae4:	20002148 	.word	0x20002148
 8012ae8:	20001c48 	.word	0x20001c48
 8012aec:	20002124 	.word	0x20002124
 8012af0:	20001c4c 	.word	0x20001c4c
 8012af4:	20000030 	.word	0x20000030

08012af8 <vTaskPlaceOnEventList>:
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b084      	sub	sp, #16
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
 8012b00:	6039      	str	r1, [r7, #0]
 8012b02:	687b      	ldr	r3, [r7, #4]
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d10a      	bne.n	8012b1e <vTaskPlaceOnEventList+0x26>
 8012b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b0c:	f383 8811 	msr	BASEPRI, r3
 8012b10:	f3bf 8f6f 	isb	sy
 8012b14:	f3bf 8f4f 	dsb	sy
 8012b18:	60fb      	str	r3, [r7, #12]
 8012b1a:	bf00      	nop
 8012b1c:	e7fe      	b.n	8012b1c <vTaskPlaceOnEventList+0x24>
 8012b1e:	4b07      	ldr	r3, [pc, #28]	; (8012b3c <vTaskPlaceOnEventList+0x44>)
 8012b20:	681b      	ldr	r3, [r3, #0]
 8012b22:	3318      	adds	r3, #24
 8012b24:	4619      	mov	r1, r3
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f7fe f815 	bl	8010b56 <vListInsert>
 8012b2c:	2101      	movs	r1, #1
 8012b2e:	6838      	ldr	r0, [r7, #0]
 8012b30:	f000 fcf8 	bl	8013524 <prvAddCurrentTaskToDelayedList>
 8012b34:	bf00      	nop
 8012b36:	3710      	adds	r7, #16
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	bd80      	pop	{r7, pc}
 8012b3c:	20001c48 	.word	0x20001c48

08012b40 <vTaskPlaceOnEventListRestricted>:
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b086      	sub	sp, #24
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	60f8      	str	r0, [r7, #12]
 8012b48:	60b9      	str	r1, [r7, #8]
 8012b4a:	607a      	str	r2, [r7, #4]
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d10a      	bne.n	8012b68 <vTaskPlaceOnEventListRestricted+0x28>
 8012b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b56:	f383 8811 	msr	BASEPRI, r3
 8012b5a:	f3bf 8f6f 	isb	sy
 8012b5e:	f3bf 8f4f 	dsb	sy
 8012b62:	617b      	str	r3, [r7, #20]
 8012b64:	bf00      	nop
 8012b66:	e7fe      	b.n	8012b66 <vTaskPlaceOnEventListRestricted+0x26>
 8012b68:	4b0a      	ldr	r3, [pc, #40]	; (8012b94 <vTaskPlaceOnEventListRestricted+0x54>)
 8012b6a:	681b      	ldr	r3, [r3, #0]
 8012b6c:	3318      	adds	r3, #24
 8012b6e:	4619      	mov	r1, r3
 8012b70:	68f8      	ldr	r0, [r7, #12]
 8012b72:	f7fd ffcc 	bl	8010b0e <vListInsertEnd>
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d002      	beq.n	8012b82 <vTaskPlaceOnEventListRestricted+0x42>
 8012b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8012b80:	60bb      	str	r3, [r7, #8]
 8012b82:	6879      	ldr	r1, [r7, #4]
 8012b84:	68b8      	ldr	r0, [r7, #8]
 8012b86:	f000 fccd 	bl	8013524 <prvAddCurrentTaskToDelayedList>
 8012b8a:	bf00      	nop
 8012b8c:	3718      	adds	r7, #24
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	bd80      	pop	{r7, pc}
 8012b92:	bf00      	nop
 8012b94:	20001c48 	.word	0x20001c48

08012b98 <xTaskRemoveFromEventList>:
 8012b98:	b580      	push	{r7, lr}
 8012b9a:	b086      	sub	sp, #24
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	68db      	ldr	r3, [r3, #12]
 8012ba4:	68db      	ldr	r3, [r3, #12]
 8012ba6:	613b      	str	r3, [r7, #16]
 8012ba8:	693b      	ldr	r3, [r7, #16]
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d10a      	bne.n	8012bc4 <xTaskRemoveFromEventList+0x2c>
 8012bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bb2:	f383 8811 	msr	BASEPRI, r3
 8012bb6:	f3bf 8f6f 	isb	sy
 8012bba:	f3bf 8f4f 	dsb	sy
 8012bbe:	60fb      	str	r3, [r7, #12]
 8012bc0:	bf00      	nop
 8012bc2:	e7fe      	b.n	8012bc2 <xTaskRemoveFromEventList+0x2a>
 8012bc4:	693b      	ldr	r3, [r7, #16]
 8012bc6:	3318      	adds	r3, #24
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f7fd fffd 	bl	8010bc8 <uxListRemove>
 8012bce:	4b1e      	ldr	r3, [pc, #120]	; (8012c48 <xTaskRemoveFromEventList+0xb0>)
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d11d      	bne.n	8012c12 <xTaskRemoveFromEventList+0x7a>
 8012bd6:	693b      	ldr	r3, [r7, #16]
 8012bd8:	3304      	adds	r3, #4
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f7fd fff4 	bl	8010bc8 <uxListRemove>
 8012be0:	693b      	ldr	r3, [r7, #16]
 8012be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012be4:	4b19      	ldr	r3, [pc, #100]	; (8012c4c <xTaskRemoveFromEventList+0xb4>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d903      	bls.n	8012bf4 <xTaskRemoveFromEventList+0x5c>
 8012bec:	693b      	ldr	r3, [r7, #16]
 8012bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bf0:	4a16      	ldr	r2, [pc, #88]	; (8012c4c <xTaskRemoveFromEventList+0xb4>)
 8012bf2:	6013      	str	r3, [r2, #0]
 8012bf4:	693b      	ldr	r3, [r7, #16]
 8012bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bf8:	4613      	mov	r3, r2
 8012bfa:	009b      	lsls	r3, r3, #2
 8012bfc:	4413      	add	r3, r2
 8012bfe:	009b      	lsls	r3, r3, #2
 8012c00:	4a13      	ldr	r2, [pc, #76]	; (8012c50 <xTaskRemoveFromEventList+0xb8>)
 8012c02:	441a      	add	r2, r3
 8012c04:	693b      	ldr	r3, [r7, #16]
 8012c06:	3304      	adds	r3, #4
 8012c08:	4619      	mov	r1, r3
 8012c0a:	4610      	mov	r0, r2
 8012c0c:	f7fd ff7f 	bl	8010b0e <vListInsertEnd>
 8012c10:	e005      	b.n	8012c1e <xTaskRemoveFromEventList+0x86>
 8012c12:	693b      	ldr	r3, [r7, #16]
 8012c14:	3318      	adds	r3, #24
 8012c16:	4619      	mov	r1, r3
 8012c18:	480e      	ldr	r0, [pc, #56]	; (8012c54 <xTaskRemoveFromEventList+0xbc>)
 8012c1a:	f7fd ff78 	bl	8010b0e <vListInsertEnd>
 8012c1e:	693b      	ldr	r3, [r7, #16]
 8012c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c22:	4b0d      	ldr	r3, [pc, #52]	; (8012c58 <xTaskRemoveFromEventList+0xc0>)
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d905      	bls.n	8012c38 <xTaskRemoveFromEventList+0xa0>
 8012c2c:	2301      	movs	r3, #1
 8012c2e:	617b      	str	r3, [r7, #20]
 8012c30:	4b0a      	ldr	r3, [pc, #40]	; (8012c5c <xTaskRemoveFromEventList+0xc4>)
 8012c32:	2201      	movs	r2, #1
 8012c34:	601a      	str	r2, [r3, #0]
 8012c36:	e001      	b.n	8012c3c <xTaskRemoveFromEventList+0xa4>
 8012c38:	2300      	movs	r3, #0
 8012c3a:	617b      	str	r3, [r7, #20]
 8012c3c:	697b      	ldr	r3, [r7, #20]
 8012c3e:	4618      	mov	r0, r3
 8012c40:	3718      	adds	r7, #24
 8012c42:	46bd      	mov	sp, r7
 8012c44:	bd80      	pop	{r7, pc}
 8012c46:	bf00      	nop
 8012c48:	20002144 	.word	0x20002144
 8012c4c:	20002124 	.word	0x20002124
 8012c50:	20001c4c 	.word	0x20001c4c
 8012c54:	200020dc 	.word	0x200020dc
 8012c58:	20001c48 	.word	0x20001c48
 8012c5c:	20002130 	.word	0x20002130

08012c60 <vTaskSetTimeOutState>:
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b084      	sub	sp, #16
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	6078      	str	r0, [r7, #4]
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d10a      	bne.n	8012c84 <vTaskSetTimeOutState+0x24>
 8012c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c72:	f383 8811 	msr	BASEPRI, r3
 8012c76:	f3bf 8f6f 	isb	sy
 8012c7a:	f3bf 8f4f 	dsb	sy
 8012c7e:	60fb      	str	r3, [r7, #12]
 8012c80:	bf00      	nop
 8012c82:	e7fe      	b.n	8012c82 <vTaskSetTimeOutState+0x22>
 8012c84:	f001 f91e 	bl	8013ec4 <vPortEnterCritical>
 8012c88:	4b06      	ldr	r3, [pc, #24]	; (8012ca4 <vTaskSetTimeOutState+0x44>)
 8012c8a:	681a      	ldr	r2, [r3, #0]
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	601a      	str	r2, [r3, #0]
 8012c90:	4b05      	ldr	r3, [pc, #20]	; (8012ca8 <vTaskSetTimeOutState+0x48>)
 8012c92:	681a      	ldr	r2, [r3, #0]
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	605a      	str	r2, [r3, #4]
 8012c98:	f001 f944 	bl	8013f24 <vPortExitCritical>
 8012c9c:	bf00      	nop
 8012c9e:	3710      	adds	r7, #16
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd80      	pop	{r7, pc}
 8012ca4:	20002134 	.word	0x20002134
 8012ca8:	20002120 	.word	0x20002120

08012cac <vTaskInternalSetTimeOutState>:
 8012cac:	b480      	push	{r7}
 8012cae:	b083      	sub	sp, #12
 8012cb0:	af00      	add	r7, sp, #0
 8012cb2:	6078      	str	r0, [r7, #4]
 8012cb4:	4b06      	ldr	r3, [pc, #24]	; (8012cd0 <vTaskInternalSetTimeOutState+0x24>)
 8012cb6:	681a      	ldr	r2, [r3, #0]
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	601a      	str	r2, [r3, #0]
 8012cbc:	4b05      	ldr	r3, [pc, #20]	; (8012cd4 <vTaskInternalSetTimeOutState+0x28>)
 8012cbe:	681a      	ldr	r2, [r3, #0]
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	605a      	str	r2, [r3, #4]
 8012cc4:	bf00      	nop
 8012cc6:	370c      	adds	r7, #12
 8012cc8:	46bd      	mov	sp, r7
 8012cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cce:	4770      	bx	lr
 8012cd0:	20002134 	.word	0x20002134
 8012cd4:	20002120 	.word	0x20002120

08012cd8 <xTaskCheckForTimeOut>:
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b088      	sub	sp, #32
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
 8012ce0:	6039      	str	r1, [r7, #0]
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d10a      	bne.n	8012cfe <xTaskCheckForTimeOut+0x26>
 8012ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cec:	f383 8811 	msr	BASEPRI, r3
 8012cf0:	f3bf 8f6f 	isb	sy
 8012cf4:	f3bf 8f4f 	dsb	sy
 8012cf8:	613b      	str	r3, [r7, #16]
 8012cfa:	bf00      	nop
 8012cfc:	e7fe      	b.n	8012cfc <xTaskCheckForTimeOut+0x24>
 8012cfe:	683b      	ldr	r3, [r7, #0]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d10a      	bne.n	8012d1a <xTaskCheckForTimeOut+0x42>
 8012d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d08:	f383 8811 	msr	BASEPRI, r3
 8012d0c:	f3bf 8f6f 	isb	sy
 8012d10:	f3bf 8f4f 	dsb	sy
 8012d14:	60fb      	str	r3, [r7, #12]
 8012d16:	bf00      	nop
 8012d18:	e7fe      	b.n	8012d18 <xTaskCheckForTimeOut+0x40>
 8012d1a:	f001 f8d3 	bl	8013ec4 <vPortEnterCritical>
 8012d1e:	4b1d      	ldr	r3, [pc, #116]	; (8012d94 <xTaskCheckForTimeOut+0xbc>)
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	61bb      	str	r3, [r7, #24]
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	685b      	ldr	r3, [r3, #4]
 8012d28:	69ba      	ldr	r2, [r7, #24]
 8012d2a:	1ad3      	subs	r3, r2, r3
 8012d2c:	617b      	str	r3, [r7, #20]
 8012d2e:	683b      	ldr	r3, [r7, #0]
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d36:	d102      	bne.n	8012d3e <xTaskCheckForTimeOut+0x66>
 8012d38:	2300      	movs	r3, #0
 8012d3a:	61fb      	str	r3, [r7, #28]
 8012d3c:	e023      	b.n	8012d86 <xTaskCheckForTimeOut+0xae>
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	681a      	ldr	r2, [r3, #0]
 8012d42:	4b15      	ldr	r3, [pc, #84]	; (8012d98 <xTaskCheckForTimeOut+0xc0>)
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	429a      	cmp	r2, r3
 8012d48:	d007      	beq.n	8012d5a <xTaskCheckForTimeOut+0x82>
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	685b      	ldr	r3, [r3, #4]
 8012d4e:	69ba      	ldr	r2, [r7, #24]
 8012d50:	429a      	cmp	r2, r3
 8012d52:	d302      	bcc.n	8012d5a <xTaskCheckForTimeOut+0x82>
 8012d54:	2301      	movs	r3, #1
 8012d56:	61fb      	str	r3, [r7, #28]
 8012d58:	e015      	b.n	8012d86 <xTaskCheckForTimeOut+0xae>
 8012d5a:	683b      	ldr	r3, [r7, #0]
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	697a      	ldr	r2, [r7, #20]
 8012d60:	429a      	cmp	r2, r3
 8012d62:	d20b      	bcs.n	8012d7c <xTaskCheckForTimeOut+0xa4>
 8012d64:	683b      	ldr	r3, [r7, #0]
 8012d66:	681a      	ldr	r2, [r3, #0]
 8012d68:	697b      	ldr	r3, [r7, #20]
 8012d6a:	1ad2      	subs	r2, r2, r3
 8012d6c:	683b      	ldr	r3, [r7, #0]
 8012d6e:	601a      	str	r2, [r3, #0]
 8012d70:	6878      	ldr	r0, [r7, #4]
 8012d72:	f7ff ff9b 	bl	8012cac <vTaskInternalSetTimeOutState>
 8012d76:	2300      	movs	r3, #0
 8012d78:	61fb      	str	r3, [r7, #28]
 8012d7a:	e004      	b.n	8012d86 <xTaskCheckForTimeOut+0xae>
 8012d7c:	683b      	ldr	r3, [r7, #0]
 8012d7e:	2200      	movs	r2, #0
 8012d80:	601a      	str	r2, [r3, #0]
 8012d82:	2301      	movs	r3, #1
 8012d84:	61fb      	str	r3, [r7, #28]
 8012d86:	f001 f8cd 	bl	8013f24 <vPortExitCritical>
 8012d8a:	69fb      	ldr	r3, [r7, #28]
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	3720      	adds	r7, #32
 8012d90:	46bd      	mov	sp, r7
 8012d92:	bd80      	pop	{r7, pc}
 8012d94:	20002120 	.word	0x20002120
 8012d98:	20002134 	.word	0x20002134

08012d9c <vTaskMissedYield>:
 8012d9c:	b480      	push	{r7}
 8012d9e:	af00      	add	r7, sp, #0
 8012da0:	4b03      	ldr	r3, [pc, #12]	; (8012db0 <vTaskMissedYield+0x14>)
 8012da2:	2201      	movs	r2, #1
 8012da4:	601a      	str	r2, [r3, #0]
 8012da6:	bf00      	nop
 8012da8:	46bd      	mov	sp, r7
 8012daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dae:	4770      	bx	lr
 8012db0:	20002130 	.word	0x20002130

08012db4 <prvIdleTask>:
 8012db4:	b580      	push	{r7, lr}
 8012db6:	b082      	sub	sp, #8
 8012db8:	af00      	add	r7, sp, #0
 8012dba:	6078      	str	r0, [r7, #4]
 8012dbc:	f000 f852 	bl	8012e64 <prvCheckTasksWaitingTermination>
 8012dc0:	4b06      	ldr	r3, [pc, #24]	; (8012ddc <prvIdleTask+0x28>)
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	2b01      	cmp	r3, #1
 8012dc6:	d9f9      	bls.n	8012dbc <prvIdleTask+0x8>
 8012dc8:	4b05      	ldr	r3, [pc, #20]	; (8012de0 <prvIdleTask+0x2c>)
 8012dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012dce:	601a      	str	r2, [r3, #0]
 8012dd0:	f3bf 8f4f 	dsb	sy
 8012dd4:	f3bf 8f6f 	isb	sy
 8012dd8:	e7f0      	b.n	8012dbc <prvIdleTask+0x8>
 8012dda:	bf00      	nop
 8012ddc:	20001c4c 	.word	0x20001c4c
 8012de0:	e000ed04 	.word	0xe000ed04

08012de4 <prvInitialiseTaskLists>:
 8012de4:	b580      	push	{r7, lr}
 8012de6:	b082      	sub	sp, #8
 8012de8:	af00      	add	r7, sp, #0
 8012dea:	2300      	movs	r3, #0
 8012dec:	607b      	str	r3, [r7, #4]
 8012dee:	e00c      	b.n	8012e0a <prvInitialiseTaskLists+0x26>
 8012df0:	687a      	ldr	r2, [r7, #4]
 8012df2:	4613      	mov	r3, r2
 8012df4:	009b      	lsls	r3, r3, #2
 8012df6:	4413      	add	r3, r2
 8012df8:	009b      	lsls	r3, r3, #2
 8012dfa:	4a12      	ldr	r2, [pc, #72]	; (8012e44 <prvInitialiseTaskLists+0x60>)
 8012dfc:	4413      	add	r3, r2
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f7fd fe58 	bl	8010ab4 <vListInitialise>
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	3301      	adds	r3, #1
 8012e08:	607b      	str	r3, [r7, #4]
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	2b37      	cmp	r3, #55	; 0x37
 8012e0e:	d9ef      	bls.n	8012df0 <prvInitialiseTaskLists+0xc>
 8012e10:	480d      	ldr	r0, [pc, #52]	; (8012e48 <prvInitialiseTaskLists+0x64>)
 8012e12:	f7fd fe4f 	bl	8010ab4 <vListInitialise>
 8012e16:	480d      	ldr	r0, [pc, #52]	; (8012e4c <prvInitialiseTaskLists+0x68>)
 8012e18:	f7fd fe4c 	bl	8010ab4 <vListInitialise>
 8012e1c:	480c      	ldr	r0, [pc, #48]	; (8012e50 <prvInitialiseTaskLists+0x6c>)
 8012e1e:	f7fd fe49 	bl	8010ab4 <vListInitialise>
 8012e22:	480c      	ldr	r0, [pc, #48]	; (8012e54 <prvInitialiseTaskLists+0x70>)
 8012e24:	f7fd fe46 	bl	8010ab4 <vListInitialise>
 8012e28:	480b      	ldr	r0, [pc, #44]	; (8012e58 <prvInitialiseTaskLists+0x74>)
 8012e2a:	f7fd fe43 	bl	8010ab4 <vListInitialise>
 8012e2e:	4b0b      	ldr	r3, [pc, #44]	; (8012e5c <prvInitialiseTaskLists+0x78>)
 8012e30:	4a05      	ldr	r2, [pc, #20]	; (8012e48 <prvInitialiseTaskLists+0x64>)
 8012e32:	601a      	str	r2, [r3, #0]
 8012e34:	4b0a      	ldr	r3, [pc, #40]	; (8012e60 <prvInitialiseTaskLists+0x7c>)
 8012e36:	4a05      	ldr	r2, [pc, #20]	; (8012e4c <prvInitialiseTaskLists+0x68>)
 8012e38:	601a      	str	r2, [r3, #0]
 8012e3a:	bf00      	nop
 8012e3c:	3708      	adds	r7, #8
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}
 8012e42:	bf00      	nop
 8012e44:	20001c4c 	.word	0x20001c4c
 8012e48:	200020ac 	.word	0x200020ac
 8012e4c:	200020c0 	.word	0x200020c0
 8012e50:	200020dc 	.word	0x200020dc
 8012e54:	200020f0 	.word	0x200020f0
 8012e58:	20002108 	.word	0x20002108
 8012e5c:	200020d4 	.word	0x200020d4
 8012e60:	200020d8 	.word	0x200020d8

08012e64 <prvCheckTasksWaitingTermination>:
 8012e64:	b580      	push	{r7, lr}
 8012e66:	b082      	sub	sp, #8
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	e019      	b.n	8012ea0 <prvCheckTasksWaitingTermination+0x3c>
 8012e6c:	f001 f82a 	bl	8013ec4 <vPortEnterCritical>
 8012e70:	4b10      	ldr	r3, [pc, #64]	; (8012eb4 <prvCheckTasksWaitingTermination+0x50>)
 8012e72:	68db      	ldr	r3, [r3, #12]
 8012e74:	68db      	ldr	r3, [r3, #12]
 8012e76:	607b      	str	r3, [r7, #4]
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	3304      	adds	r3, #4
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7fd fea3 	bl	8010bc8 <uxListRemove>
 8012e82:	4b0d      	ldr	r3, [pc, #52]	; (8012eb8 <prvCheckTasksWaitingTermination+0x54>)
 8012e84:	681b      	ldr	r3, [r3, #0]
 8012e86:	3b01      	subs	r3, #1
 8012e88:	4a0b      	ldr	r2, [pc, #44]	; (8012eb8 <prvCheckTasksWaitingTermination+0x54>)
 8012e8a:	6013      	str	r3, [r2, #0]
 8012e8c:	4b0b      	ldr	r3, [pc, #44]	; (8012ebc <prvCheckTasksWaitingTermination+0x58>)
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	3b01      	subs	r3, #1
 8012e92:	4a0a      	ldr	r2, [pc, #40]	; (8012ebc <prvCheckTasksWaitingTermination+0x58>)
 8012e94:	6013      	str	r3, [r2, #0]
 8012e96:	f001 f845 	bl	8013f24 <vPortExitCritical>
 8012e9a:	6878      	ldr	r0, [r7, #4]
 8012e9c:	f000 f810 	bl	8012ec0 <prvDeleteTCB>
 8012ea0:	4b06      	ldr	r3, [pc, #24]	; (8012ebc <prvCheckTasksWaitingTermination+0x58>)
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d1e1      	bne.n	8012e6c <prvCheckTasksWaitingTermination+0x8>
 8012ea8:	bf00      	nop
 8012eaa:	bf00      	nop
 8012eac:	3708      	adds	r7, #8
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}
 8012eb2:	bf00      	nop
 8012eb4:	200020f0 	.word	0x200020f0
 8012eb8:	2000211c 	.word	0x2000211c
 8012ebc:	20002104 	.word	0x20002104

08012ec0 <prvDeleteTCB>:
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b084      	sub	sp, #16
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	3358      	adds	r3, #88	; 0x58
 8012ecc:	4618      	mov	r0, r3
 8012ece:	f002 f9e7 	bl	80152a0 <_reclaim_reent>
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d108      	bne.n	8012eee <prvDeleteTCB+0x2e>
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	f001 f9e1 	bl	80142a8 <vPortFree>
 8012ee6:	6878      	ldr	r0, [r7, #4]
 8012ee8:	f001 f9de 	bl	80142a8 <vPortFree>
 8012eec:	e018      	b.n	8012f20 <prvDeleteTCB+0x60>
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8012ef4:	2b01      	cmp	r3, #1
 8012ef6:	d103      	bne.n	8012f00 <prvDeleteTCB+0x40>
 8012ef8:	6878      	ldr	r0, [r7, #4]
 8012efa:	f001 f9d5 	bl	80142a8 <vPortFree>
 8012efe:	e00f      	b.n	8012f20 <prvDeleteTCB+0x60>
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8012f06:	2b02      	cmp	r3, #2
 8012f08:	d00a      	beq.n	8012f20 <prvDeleteTCB+0x60>
 8012f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f0e:	f383 8811 	msr	BASEPRI, r3
 8012f12:	f3bf 8f6f 	isb	sy
 8012f16:	f3bf 8f4f 	dsb	sy
 8012f1a:	60fb      	str	r3, [r7, #12]
 8012f1c:	bf00      	nop
 8012f1e:	e7fe      	b.n	8012f1e <prvDeleteTCB+0x5e>
 8012f20:	bf00      	nop
 8012f22:	3710      	adds	r7, #16
 8012f24:	46bd      	mov	sp, r7
 8012f26:	bd80      	pop	{r7, pc}

08012f28 <prvResetNextTaskUnblockTime>:
 8012f28:	b480      	push	{r7}
 8012f2a:	b083      	sub	sp, #12
 8012f2c:	af00      	add	r7, sp, #0
 8012f2e:	4b0c      	ldr	r3, [pc, #48]	; (8012f60 <prvResetNextTaskUnblockTime+0x38>)
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d104      	bne.n	8012f42 <prvResetNextTaskUnblockTime+0x1a>
 8012f38:	4b0a      	ldr	r3, [pc, #40]	; (8012f64 <prvResetNextTaskUnblockTime+0x3c>)
 8012f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8012f3e:	601a      	str	r2, [r3, #0]
 8012f40:	e008      	b.n	8012f54 <prvResetNextTaskUnblockTime+0x2c>
 8012f42:	4b07      	ldr	r3, [pc, #28]	; (8012f60 <prvResetNextTaskUnblockTime+0x38>)
 8012f44:	681b      	ldr	r3, [r3, #0]
 8012f46:	68db      	ldr	r3, [r3, #12]
 8012f48:	68db      	ldr	r3, [r3, #12]
 8012f4a:	607b      	str	r3, [r7, #4]
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	685b      	ldr	r3, [r3, #4]
 8012f50:	4a04      	ldr	r2, [pc, #16]	; (8012f64 <prvResetNextTaskUnblockTime+0x3c>)
 8012f52:	6013      	str	r3, [r2, #0]
 8012f54:	bf00      	nop
 8012f56:	370c      	adds	r7, #12
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5e:	4770      	bx	lr
 8012f60:	200020d4 	.word	0x200020d4
 8012f64:	2000213c 	.word	0x2000213c

08012f68 <xTaskGetCurrentTaskHandle>:
 8012f68:	b480      	push	{r7}
 8012f6a:	b083      	sub	sp, #12
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	4b05      	ldr	r3, [pc, #20]	; (8012f84 <xTaskGetCurrentTaskHandle+0x1c>)
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	607b      	str	r3, [r7, #4]
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	4618      	mov	r0, r3
 8012f78:	370c      	adds	r7, #12
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f80:	4770      	bx	lr
 8012f82:	bf00      	nop
 8012f84:	20001c48 	.word	0x20001c48

08012f88 <xTaskGetSchedulerState>:
 8012f88:	b480      	push	{r7}
 8012f8a:	b083      	sub	sp, #12
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	4b0b      	ldr	r3, [pc, #44]	; (8012fbc <xTaskGetSchedulerState+0x34>)
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d102      	bne.n	8012f9c <xTaskGetSchedulerState+0x14>
 8012f96:	2301      	movs	r3, #1
 8012f98:	607b      	str	r3, [r7, #4]
 8012f9a:	e008      	b.n	8012fae <xTaskGetSchedulerState+0x26>
 8012f9c:	4b08      	ldr	r3, [pc, #32]	; (8012fc0 <xTaskGetSchedulerState+0x38>)
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d102      	bne.n	8012faa <xTaskGetSchedulerState+0x22>
 8012fa4:	2302      	movs	r3, #2
 8012fa6:	607b      	str	r3, [r7, #4]
 8012fa8:	e001      	b.n	8012fae <xTaskGetSchedulerState+0x26>
 8012faa:	2300      	movs	r3, #0
 8012fac:	607b      	str	r3, [r7, #4]
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	370c      	adds	r7, #12
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fba:	4770      	bx	lr
 8012fbc:	20002128 	.word	0x20002128
 8012fc0:	20002144 	.word	0x20002144

08012fc4 <xTaskPriorityInherit>:
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b084      	sub	sp, #16
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	60bb      	str	r3, [r7, #8]
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	60fb      	str	r3, [r7, #12]
 8012fd4:	687b      	ldr	r3, [r7, #4]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d051      	beq.n	801307e <xTaskPriorityInherit+0xba>
 8012fda:	68bb      	ldr	r3, [r7, #8]
 8012fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012fde:	4b2a      	ldr	r3, [pc, #168]	; (8013088 <xTaskPriorityInherit+0xc4>)
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	d241      	bcs.n	801306c <xTaskPriorityInherit+0xa8>
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	699b      	ldr	r3, [r3, #24]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	db06      	blt.n	8012ffe <xTaskPriorityInherit+0x3a>
 8012ff0:	4b25      	ldr	r3, [pc, #148]	; (8013088 <xTaskPriorityInherit+0xc4>)
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ff6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012ffa:	68bb      	ldr	r3, [r7, #8]
 8012ffc:	619a      	str	r2, [r3, #24]
 8012ffe:	68bb      	ldr	r3, [r7, #8]
 8013000:	6959      	ldr	r1, [r3, #20]
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013006:	4613      	mov	r3, r2
 8013008:	009b      	lsls	r3, r3, #2
 801300a:	4413      	add	r3, r2
 801300c:	009b      	lsls	r3, r3, #2
 801300e:	4a1f      	ldr	r2, [pc, #124]	; (801308c <xTaskPriorityInherit+0xc8>)
 8013010:	4413      	add	r3, r2
 8013012:	4299      	cmp	r1, r3
 8013014:	d122      	bne.n	801305c <xTaskPriorityInherit+0x98>
 8013016:	68bb      	ldr	r3, [r7, #8]
 8013018:	3304      	adds	r3, #4
 801301a:	4618      	mov	r0, r3
 801301c:	f7fd fdd4 	bl	8010bc8 <uxListRemove>
 8013020:	4b19      	ldr	r3, [pc, #100]	; (8013088 <xTaskPriorityInherit+0xc4>)
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013026:	68bb      	ldr	r3, [r7, #8]
 8013028:	62da      	str	r2, [r3, #44]	; 0x2c
 801302a:	68bb      	ldr	r3, [r7, #8]
 801302c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801302e:	4b18      	ldr	r3, [pc, #96]	; (8013090 <xTaskPriorityInherit+0xcc>)
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	429a      	cmp	r2, r3
 8013034:	d903      	bls.n	801303e <xTaskPriorityInherit+0x7a>
 8013036:	68bb      	ldr	r3, [r7, #8]
 8013038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801303a:	4a15      	ldr	r2, [pc, #84]	; (8013090 <xTaskPriorityInherit+0xcc>)
 801303c:	6013      	str	r3, [r2, #0]
 801303e:	68bb      	ldr	r3, [r7, #8]
 8013040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013042:	4613      	mov	r3, r2
 8013044:	009b      	lsls	r3, r3, #2
 8013046:	4413      	add	r3, r2
 8013048:	009b      	lsls	r3, r3, #2
 801304a:	4a10      	ldr	r2, [pc, #64]	; (801308c <xTaskPriorityInherit+0xc8>)
 801304c:	441a      	add	r2, r3
 801304e:	68bb      	ldr	r3, [r7, #8]
 8013050:	3304      	adds	r3, #4
 8013052:	4619      	mov	r1, r3
 8013054:	4610      	mov	r0, r2
 8013056:	f7fd fd5a 	bl	8010b0e <vListInsertEnd>
 801305a:	e004      	b.n	8013066 <xTaskPriorityInherit+0xa2>
 801305c:	4b0a      	ldr	r3, [pc, #40]	; (8013088 <xTaskPriorityInherit+0xc4>)
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013062:	68bb      	ldr	r3, [r7, #8]
 8013064:	62da      	str	r2, [r3, #44]	; 0x2c
 8013066:	2301      	movs	r3, #1
 8013068:	60fb      	str	r3, [r7, #12]
 801306a:	e008      	b.n	801307e <xTaskPriorityInherit+0xba>
 801306c:	68bb      	ldr	r3, [r7, #8]
 801306e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013070:	4b05      	ldr	r3, [pc, #20]	; (8013088 <xTaskPriorityInherit+0xc4>)
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013076:	429a      	cmp	r2, r3
 8013078:	d201      	bcs.n	801307e <xTaskPriorityInherit+0xba>
 801307a:	2301      	movs	r3, #1
 801307c:	60fb      	str	r3, [r7, #12]
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	4618      	mov	r0, r3
 8013082:	3710      	adds	r7, #16
 8013084:	46bd      	mov	sp, r7
 8013086:	bd80      	pop	{r7, pc}
 8013088:	20001c48 	.word	0x20001c48
 801308c:	20001c4c 	.word	0x20001c4c
 8013090:	20002124 	.word	0x20002124

08013094 <xTaskPriorityDisinherit>:
 8013094:	b580      	push	{r7, lr}
 8013096:	b086      	sub	sp, #24
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	613b      	str	r3, [r7, #16]
 80130a0:	2300      	movs	r3, #0
 80130a2:	617b      	str	r3, [r7, #20]
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d056      	beq.n	8013158 <xTaskPriorityDisinherit+0xc4>
 80130aa:	4b2e      	ldr	r3, [pc, #184]	; (8013164 <xTaskPriorityDisinherit+0xd0>)
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	693a      	ldr	r2, [r7, #16]
 80130b0:	429a      	cmp	r2, r3
 80130b2:	d00a      	beq.n	80130ca <xTaskPriorityDisinherit+0x36>
 80130b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130b8:	f383 8811 	msr	BASEPRI, r3
 80130bc:	f3bf 8f6f 	isb	sy
 80130c0:	f3bf 8f4f 	dsb	sy
 80130c4:	60fb      	str	r3, [r7, #12]
 80130c6:	bf00      	nop
 80130c8:	e7fe      	b.n	80130c8 <xTaskPriorityDisinherit+0x34>
 80130ca:	693b      	ldr	r3, [r7, #16]
 80130cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d10a      	bne.n	80130e8 <xTaskPriorityDisinherit+0x54>
 80130d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130d6:	f383 8811 	msr	BASEPRI, r3
 80130da:	f3bf 8f6f 	isb	sy
 80130de:	f3bf 8f4f 	dsb	sy
 80130e2:	60bb      	str	r3, [r7, #8]
 80130e4:	bf00      	nop
 80130e6:	e7fe      	b.n	80130e6 <xTaskPriorityDisinherit+0x52>
 80130e8:	693b      	ldr	r3, [r7, #16]
 80130ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80130ec:	1e5a      	subs	r2, r3, #1
 80130ee:	693b      	ldr	r3, [r7, #16]
 80130f0:	651a      	str	r2, [r3, #80]	; 0x50
 80130f2:	693b      	ldr	r3, [r7, #16]
 80130f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130f6:	693b      	ldr	r3, [r7, #16]
 80130f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80130fa:	429a      	cmp	r2, r3
 80130fc:	d02c      	beq.n	8013158 <xTaskPriorityDisinherit+0xc4>
 80130fe:	693b      	ldr	r3, [r7, #16]
 8013100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013102:	2b00      	cmp	r3, #0
 8013104:	d128      	bne.n	8013158 <xTaskPriorityDisinherit+0xc4>
 8013106:	693b      	ldr	r3, [r7, #16]
 8013108:	3304      	adds	r3, #4
 801310a:	4618      	mov	r0, r3
 801310c:	f7fd fd5c 	bl	8010bc8 <uxListRemove>
 8013110:	693b      	ldr	r3, [r7, #16]
 8013112:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013114:	693b      	ldr	r3, [r7, #16]
 8013116:	62da      	str	r2, [r3, #44]	; 0x2c
 8013118:	693b      	ldr	r3, [r7, #16]
 801311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801311c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013120:	693b      	ldr	r3, [r7, #16]
 8013122:	619a      	str	r2, [r3, #24]
 8013124:	693b      	ldr	r3, [r7, #16]
 8013126:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013128:	4b0f      	ldr	r3, [pc, #60]	; (8013168 <xTaskPriorityDisinherit+0xd4>)
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	429a      	cmp	r2, r3
 801312e:	d903      	bls.n	8013138 <xTaskPriorityDisinherit+0xa4>
 8013130:	693b      	ldr	r3, [r7, #16]
 8013132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013134:	4a0c      	ldr	r2, [pc, #48]	; (8013168 <xTaskPriorityDisinherit+0xd4>)
 8013136:	6013      	str	r3, [r2, #0]
 8013138:	693b      	ldr	r3, [r7, #16]
 801313a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801313c:	4613      	mov	r3, r2
 801313e:	009b      	lsls	r3, r3, #2
 8013140:	4413      	add	r3, r2
 8013142:	009b      	lsls	r3, r3, #2
 8013144:	4a09      	ldr	r2, [pc, #36]	; (801316c <xTaskPriorityDisinherit+0xd8>)
 8013146:	441a      	add	r2, r3
 8013148:	693b      	ldr	r3, [r7, #16]
 801314a:	3304      	adds	r3, #4
 801314c:	4619      	mov	r1, r3
 801314e:	4610      	mov	r0, r2
 8013150:	f7fd fcdd 	bl	8010b0e <vListInsertEnd>
 8013154:	2301      	movs	r3, #1
 8013156:	617b      	str	r3, [r7, #20]
 8013158:	697b      	ldr	r3, [r7, #20]
 801315a:	4618      	mov	r0, r3
 801315c:	3718      	adds	r7, #24
 801315e:	46bd      	mov	sp, r7
 8013160:	bd80      	pop	{r7, pc}
 8013162:	bf00      	nop
 8013164:	20001c48 	.word	0x20001c48
 8013168:	20002124 	.word	0x20002124
 801316c:	20001c4c 	.word	0x20001c4c

08013170 <vTaskPriorityDisinheritAfterTimeout>:
 8013170:	b580      	push	{r7, lr}
 8013172:	b088      	sub	sp, #32
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
 8013178:	6039      	str	r1, [r7, #0]
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	61bb      	str	r3, [r7, #24]
 801317e:	2301      	movs	r3, #1
 8013180:	617b      	str	r3, [r7, #20]
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d06a      	beq.n	801325e <vTaskPriorityDisinheritAfterTimeout+0xee>
 8013188:	69bb      	ldr	r3, [r7, #24]
 801318a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801318c:	2b00      	cmp	r3, #0
 801318e:	d10a      	bne.n	80131a6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8013190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013194:	f383 8811 	msr	BASEPRI, r3
 8013198:	f3bf 8f6f 	isb	sy
 801319c:	f3bf 8f4f 	dsb	sy
 80131a0:	60fb      	str	r3, [r7, #12]
 80131a2:	bf00      	nop
 80131a4:	e7fe      	b.n	80131a4 <vTaskPriorityDisinheritAfterTimeout+0x34>
 80131a6:	69bb      	ldr	r3, [r7, #24]
 80131a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80131aa:	683a      	ldr	r2, [r7, #0]
 80131ac:	429a      	cmp	r2, r3
 80131ae:	d902      	bls.n	80131b6 <vTaskPriorityDisinheritAfterTimeout+0x46>
 80131b0:	683b      	ldr	r3, [r7, #0]
 80131b2:	61fb      	str	r3, [r7, #28]
 80131b4:	e002      	b.n	80131bc <vTaskPriorityDisinheritAfterTimeout+0x4c>
 80131b6:	69bb      	ldr	r3, [r7, #24]
 80131b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80131ba:	61fb      	str	r3, [r7, #28]
 80131bc:	69bb      	ldr	r3, [r7, #24]
 80131be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131c0:	69fa      	ldr	r2, [r7, #28]
 80131c2:	429a      	cmp	r2, r3
 80131c4:	d04b      	beq.n	801325e <vTaskPriorityDisinheritAfterTimeout+0xee>
 80131c6:	69bb      	ldr	r3, [r7, #24]
 80131c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80131ca:	697a      	ldr	r2, [r7, #20]
 80131cc:	429a      	cmp	r2, r3
 80131ce:	d146      	bne.n	801325e <vTaskPriorityDisinheritAfterTimeout+0xee>
 80131d0:	4b25      	ldr	r3, [pc, #148]	; (8013268 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	69ba      	ldr	r2, [r7, #24]
 80131d6:	429a      	cmp	r2, r3
 80131d8:	d10a      	bne.n	80131f0 <vTaskPriorityDisinheritAfterTimeout+0x80>
 80131da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131de:	f383 8811 	msr	BASEPRI, r3
 80131e2:	f3bf 8f6f 	isb	sy
 80131e6:	f3bf 8f4f 	dsb	sy
 80131ea:	60bb      	str	r3, [r7, #8]
 80131ec:	bf00      	nop
 80131ee:	e7fe      	b.n	80131ee <vTaskPriorityDisinheritAfterTimeout+0x7e>
 80131f0:	69bb      	ldr	r3, [r7, #24]
 80131f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131f4:	613b      	str	r3, [r7, #16]
 80131f6:	69bb      	ldr	r3, [r7, #24]
 80131f8:	69fa      	ldr	r2, [r7, #28]
 80131fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80131fc:	69bb      	ldr	r3, [r7, #24]
 80131fe:	699b      	ldr	r3, [r3, #24]
 8013200:	2b00      	cmp	r3, #0
 8013202:	db04      	blt.n	801320e <vTaskPriorityDisinheritAfterTimeout+0x9e>
 8013204:	69fb      	ldr	r3, [r7, #28]
 8013206:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801320a:	69bb      	ldr	r3, [r7, #24]
 801320c:	619a      	str	r2, [r3, #24]
 801320e:	69bb      	ldr	r3, [r7, #24]
 8013210:	6959      	ldr	r1, [r3, #20]
 8013212:	693a      	ldr	r2, [r7, #16]
 8013214:	4613      	mov	r3, r2
 8013216:	009b      	lsls	r3, r3, #2
 8013218:	4413      	add	r3, r2
 801321a:	009b      	lsls	r3, r3, #2
 801321c:	4a13      	ldr	r2, [pc, #76]	; (801326c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801321e:	4413      	add	r3, r2
 8013220:	4299      	cmp	r1, r3
 8013222:	d11c      	bne.n	801325e <vTaskPriorityDisinheritAfterTimeout+0xee>
 8013224:	69bb      	ldr	r3, [r7, #24]
 8013226:	3304      	adds	r3, #4
 8013228:	4618      	mov	r0, r3
 801322a:	f7fd fccd 	bl	8010bc8 <uxListRemove>
 801322e:	69bb      	ldr	r3, [r7, #24]
 8013230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013232:	4b0f      	ldr	r3, [pc, #60]	; (8013270 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	429a      	cmp	r2, r3
 8013238:	d903      	bls.n	8013242 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801323a:	69bb      	ldr	r3, [r7, #24]
 801323c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801323e:	4a0c      	ldr	r2, [pc, #48]	; (8013270 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013240:	6013      	str	r3, [r2, #0]
 8013242:	69bb      	ldr	r3, [r7, #24]
 8013244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013246:	4613      	mov	r3, r2
 8013248:	009b      	lsls	r3, r3, #2
 801324a:	4413      	add	r3, r2
 801324c:	009b      	lsls	r3, r3, #2
 801324e:	4a07      	ldr	r2, [pc, #28]	; (801326c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013250:	441a      	add	r2, r3
 8013252:	69bb      	ldr	r3, [r7, #24]
 8013254:	3304      	adds	r3, #4
 8013256:	4619      	mov	r1, r3
 8013258:	4610      	mov	r0, r2
 801325a:	f7fd fc58 	bl	8010b0e <vListInsertEnd>
 801325e:	bf00      	nop
 8013260:	3720      	adds	r7, #32
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}
 8013266:	bf00      	nop
 8013268:	20001c48 	.word	0x20001c48
 801326c:	20001c4c 	.word	0x20001c4c
 8013270:	20002124 	.word	0x20002124

08013274 <pvTaskIncrementMutexHeldCount>:
 8013274:	b480      	push	{r7}
 8013276:	af00      	add	r7, sp, #0
 8013278:	4b07      	ldr	r3, [pc, #28]	; (8013298 <pvTaskIncrementMutexHeldCount+0x24>)
 801327a:	681b      	ldr	r3, [r3, #0]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d004      	beq.n	801328a <pvTaskIncrementMutexHeldCount+0x16>
 8013280:	4b05      	ldr	r3, [pc, #20]	; (8013298 <pvTaskIncrementMutexHeldCount+0x24>)
 8013282:	681b      	ldr	r3, [r3, #0]
 8013284:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013286:	3201      	adds	r2, #1
 8013288:	651a      	str	r2, [r3, #80]	; 0x50
 801328a:	4b03      	ldr	r3, [pc, #12]	; (8013298 <pvTaskIncrementMutexHeldCount+0x24>)
 801328c:	681b      	ldr	r3, [r3, #0]
 801328e:	4618      	mov	r0, r3
 8013290:	46bd      	mov	sp, r7
 8013292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013296:	4770      	bx	lr
 8013298:	20001c48 	.word	0x20001c48

0801329c <xTaskNotifyWait>:
 801329c:	b580      	push	{r7, lr}
 801329e:	b086      	sub	sp, #24
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	60f8      	str	r0, [r7, #12]
 80132a4:	60b9      	str	r1, [r7, #8]
 80132a6:	607a      	str	r2, [r7, #4]
 80132a8:	603b      	str	r3, [r7, #0]
 80132aa:	f000 fe0b 	bl	8013ec4 <vPortEnterCritical>
 80132ae:	4b29      	ldr	r3, [pc, #164]	; (8013354 <xTaskNotifyWait+0xb8>)
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80132b6:	b2db      	uxtb	r3, r3
 80132b8:	2b02      	cmp	r3, #2
 80132ba:	d01c      	beq.n	80132f6 <xTaskNotifyWait+0x5a>
 80132bc:	4b25      	ldr	r3, [pc, #148]	; (8013354 <xTaskNotifyWait+0xb8>)
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 80132c4:	68fa      	ldr	r2, [r7, #12]
 80132c6:	43d2      	mvns	r2, r2
 80132c8:	400a      	ands	r2, r1
 80132ca:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80132ce:	4b21      	ldr	r3, [pc, #132]	; (8013354 <xTaskNotifyWait+0xb8>)
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	2201      	movs	r2, #1
 80132d4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 80132d8:	683b      	ldr	r3, [r7, #0]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d00b      	beq.n	80132f6 <xTaskNotifyWait+0x5a>
 80132de:	2101      	movs	r1, #1
 80132e0:	6838      	ldr	r0, [r7, #0]
 80132e2:	f000 f91f 	bl	8013524 <prvAddCurrentTaskToDelayedList>
 80132e6:	4b1c      	ldr	r3, [pc, #112]	; (8013358 <xTaskNotifyWait+0xbc>)
 80132e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132ec:	601a      	str	r2, [r3, #0]
 80132ee:	f3bf 8f4f 	dsb	sy
 80132f2:	f3bf 8f6f 	isb	sy
 80132f6:	f000 fe15 	bl	8013f24 <vPortExitCritical>
 80132fa:	f000 fde3 	bl	8013ec4 <vPortEnterCritical>
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d005      	beq.n	8013310 <xTaskNotifyWait+0x74>
 8013304:	4b13      	ldr	r3, [pc, #76]	; (8013354 <xTaskNotifyWait+0xb8>)
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	601a      	str	r2, [r3, #0]
 8013310:	4b10      	ldr	r3, [pc, #64]	; (8013354 <xTaskNotifyWait+0xb8>)
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8013318:	b2db      	uxtb	r3, r3
 801331a:	2b02      	cmp	r3, #2
 801331c:	d002      	beq.n	8013324 <xTaskNotifyWait+0x88>
 801331e:	2300      	movs	r3, #0
 8013320:	617b      	str	r3, [r7, #20]
 8013322:	e00a      	b.n	801333a <xTaskNotifyWait+0x9e>
 8013324:	4b0b      	ldr	r3, [pc, #44]	; (8013354 <xTaskNotifyWait+0xb8>)
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 801332c:	68ba      	ldr	r2, [r7, #8]
 801332e:	43d2      	mvns	r2, r2
 8013330:	400a      	ands	r2, r1
 8013332:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8013336:	2301      	movs	r3, #1
 8013338:	617b      	str	r3, [r7, #20]
 801333a:	4b06      	ldr	r3, [pc, #24]	; (8013354 <xTaskNotifyWait+0xb8>)
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	2200      	movs	r2, #0
 8013340:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 8013344:	f000 fdee 	bl	8013f24 <vPortExitCritical>
 8013348:	697b      	ldr	r3, [r7, #20]
 801334a:	4618      	mov	r0, r3
 801334c:	3718      	adds	r7, #24
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}
 8013352:	bf00      	nop
 8013354:	20001c48 	.word	0x20001c48
 8013358:	e000ed04 	.word	0xe000ed04

0801335c <xTaskGenericNotify>:
 801335c:	b580      	push	{r7, lr}
 801335e:	b08a      	sub	sp, #40	; 0x28
 8013360:	af00      	add	r7, sp, #0
 8013362:	60f8      	str	r0, [r7, #12]
 8013364:	60b9      	str	r1, [r7, #8]
 8013366:	603b      	str	r3, [r7, #0]
 8013368:	4613      	mov	r3, r2
 801336a:	71fb      	strb	r3, [r7, #7]
 801336c:	2301      	movs	r3, #1
 801336e:	627b      	str	r3, [r7, #36]	; 0x24
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d10a      	bne.n	801338c <xTaskGenericNotify+0x30>
 8013376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801337a:	f383 8811 	msr	BASEPRI, r3
 801337e:	f3bf 8f6f 	isb	sy
 8013382:	f3bf 8f4f 	dsb	sy
 8013386:	61bb      	str	r3, [r7, #24]
 8013388:	bf00      	nop
 801338a:	e7fe      	b.n	801338a <xTaskGenericNotify+0x2e>
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	623b      	str	r3, [r7, #32]
 8013390:	f000 fd98 	bl	8013ec4 <vPortEnterCritical>
 8013394:	683b      	ldr	r3, [r7, #0]
 8013396:	2b00      	cmp	r3, #0
 8013398:	d004      	beq.n	80133a4 <xTaskGenericNotify+0x48>
 801339a:	6a3b      	ldr	r3, [r7, #32]
 801339c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80133a0:	683b      	ldr	r3, [r7, #0]
 80133a2:	601a      	str	r2, [r3, #0]
 80133a4:	6a3b      	ldr	r3, [r7, #32]
 80133a6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80133aa:	77fb      	strb	r3, [r7, #31]
 80133ac:	6a3b      	ldr	r3, [r7, #32]
 80133ae:	2202      	movs	r2, #2
 80133b0:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 80133b4:	79fb      	ldrb	r3, [r7, #7]
 80133b6:	2b04      	cmp	r3, #4
 80133b8:	d82d      	bhi.n	8013416 <xTaskGenericNotify+0xba>
 80133ba:	a201      	add	r2, pc, #4	; (adr r2, 80133c0 <xTaskGenericNotify+0x64>)
 80133bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133c0:	08013439 	.word	0x08013439
 80133c4:	080133d5 	.word	0x080133d5
 80133c8:	080133e7 	.word	0x080133e7
 80133cc:	080133f7 	.word	0x080133f7
 80133d0:	08013401 	.word	0x08013401
 80133d4:	6a3b      	ldr	r3, [r7, #32]
 80133d6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80133da:	68bb      	ldr	r3, [r7, #8]
 80133dc:	431a      	orrs	r2, r3
 80133de:	6a3b      	ldr	r3, [r7, #32]
 80133e0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80133e4:	e02b      	b.n	801343e <xTaskGenericNotify+0xe2>
 80133e6:	6a3b      	ldr	r3, [r7, #32]
 80133e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80133ec:	1c5a      	adds	r2, r3, #1
 80133ee:	6a3b      	ldr	r3, [r7, #32]
 80133f0:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80133f4:	e023      	b.n	801343e <xTaskGenericNotify+0xe2>
 80133f6:	6a3b      	ldr	r3, [r7, #32]
 80133f8:	68ba      	ldr	r2, [r7, #8]
 80133fa:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80133fe:	e01e      	b.n	801343e <xTaskGenericNotify+0xe2>
 8013400:	7ffb      	ldrb	r3, [r7, #31]
 8013402:	2b02      	cmp	r3, #2
 8013404:	d004      	beq.n	8013410 <xTaskGenericNotify+0xb4>
 8013406:	6a3b      	ldr	r3, [r7, #32]
 8013408:	68ba      	ldr	r2, [r7, #8]
 801340a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 801340e:	e016      	b.n	801343e <xTaskGenericNotify+0xe2>
 8013410:	2300      	movs	r3, #0
 8013412:	627b      	str	r3, [r7, #36]	; 0x24
 8013414:	e013      	b.n	801343e <xTaskGenericNotify+0xe2>
 8013416:	6a3b      	ldr	r3, [r7, #32]
 8013418:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013420:	d00c      	beq.n	801343c <xTaskGenericNotify+0xe0>
 8013422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013426:	f383 8811 	msr	BASEPRI, r3
 801342a:	f3bf 8f6f 	isb	sy
 801342e:	f3bf 8f4f 	dsb	sy
 8013432:	617b      	str	r3, [r7, #20]
 8013434:	bf00      	nop
 8013436:	e7fe      	b.n	8013436 <xTaskGenericNotify+0xda>
 8013438:	bf00      	nop
 801343a:	e000      	b.n	801343e <xTaskGenericNotify+0xe2>
 801343c:	bf00      	nop
 801343e:	7ffb      	ldrb	r3, [r7, #31]
 8013440:	2b01      	cmp	r3, #1
 8013442:	d13a      	bne.n	80134ba <xTaskGenericNotify+0x15e>
 8013444:	6a3b      	ldr	r3, [r7, #32]
 8013446:	3304      	adds	r3, #4
 8013448:	4618      	mov	r0, r3
 801344a:	f7fd fbbd 	bl	8010bc8 <uxListRemove>
 801344e:	6a3b      	ldr	r3, [r7, #32]
 8013450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013452:	4b1d      	ldr	r3, [pc, #116]	; (80134c8 <xTaskGenericNotify+0x16c>)
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	429a      	cmp	r2, r3
 8013458:	d903      	bls.n	8013462 <xTaskGenericNotify+0x106>
 801345a:	6a3b      	ldr	r3, [r7, #32]
 801345c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801345e:	4a1a      	ldr	r2, [pc, #104]	; (80134c8 <xTaskGenericNotify+0x16c>)
 8013460:	6013      	str	r3, [r2, #0]
 8013462:	6a3b      	ldr	r3, [r7, #32]
 8013464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013466:	4613      	mov	r3, r2
 8013468:	009b      	lsls	r3, r3, #2
 801346a:	4413      	add	r3, r2
 801346c:	009b      	lsls	r3, r3, #2
 801346e:	4a17      	ldr	r2, [pc, #92]	; (80134cc <xTaskGenericNotify+0x170>)
 8013470:	441a      	add	r2, r3
 8013472:	6a3b      	ldr	r3, [r7, #32]
 8013474:	3304      	adds	r3, #4
 8013476:	4619      	mov	r1, r3
 8013478:	4610      	mov	r0, r2
 801347a:	f7fd fb48 	bl	8010b0e <vListInsertEnd>
 801347e:	6a3b      	ldr	r3, [r7, #32]
 8013480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013482:	2b00      	cmp	r3, #0
 8013484:	d00a      	beq.n	801349c <xTaskGenericNotify+0x140>
 8013486:	f04f 0350 	mov.w	r3, #80	; 0x50
 801348a:	f383 8811 	msr	BASEPRI, r3
 801348e:	f3bf 8f6f 	isb	sy
 8013492:	f3bf 8f4f 	dsb	sy
 8013496:	613b      	str	r3, [r7, #16]
 8013498:	bf00      	nop
 801349a:	e7fe      	b.n	801349a <xTaskGenericNotify+0x13e>
 801349c:	6a3b      	ldr	r3, [r7, #32]
 801349e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134a0:	4b0b      	ldr	r3, [pc, #44]	; (80134d0 <xTaskGenericNotify+0x174>)
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134a6:	429a      	cmp	r2, r3
 80134a8:	d907      	bls.n	80134ba <xTaskGenericNotify+0x15e>
 80134aa:	4b0a      	ldr	r3, [pc, #40]	; (80134d4 <xTaskGenericNotify+0x178>)
 80134ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134b0:	601a      	str	r2, [r3, #0]
 80134b2:	f3bf 8f4f 	dsb	sy
 80134b6:	f3bf 8f6f 	isb	sy
 80134ba:	f000 fd33 	bl	8013f24 <vPortExitCritical>
 80134be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c0:	4618      	mov	r0, r3
 80134c2:	3728      	adds	r7, #40	; 0x28
 80134c4:	46bd      	mov	sp, r7
 80134c6:	bd80      	pop	{r7, pc}
 80134c8:	20002124 	.word	0x20002124
 80134cc:	20001c4c 	.word	0x20001c4c
 80134d0:	20001c48 	.word	0x20001c48
 80134d4:	e000ed04 	.word	0xe000ed04

080134d8 <xTaskNotifyStateClear>:
 80134d8:	b580      	push	{r7, lr}
 80134da:	b084      	sub	sp, #16
 80134dc:	af00      	add	r7, sp, #0
 80134de:	6078      	str	r0, [r7, #4]
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d102      	bne.n	80134ec <xTaskNotifyStateClear+0x14>
 80134e6:	4b0e      	ldr	r3, [pc, #56]	; (8013520 <xTaskNotifyStateClear+0x48>)
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	e000      	b.n	80134ee <xTaskNotifyStateClear+0x16>
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	60bb      	str	r3, [r7, #8]
 80134f0:	f000 fce8 	bl	8013ec4 <vPortEnterCritical>
 80134f4:	68bb      	ldr	r3, [r7, #8]
 80134f6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 80134fa:	b2db      	uxtb	r3, r3
 80134fc:	2b02      	cmp	r3, #2
 80134fe:	d106      	bne.n	801350e <xTaskNotifyStateClear+0x36>
 8013500:	68bb      	ldr	r3, [r7, #8]
 8013502:	2200      	movs	r2, #0
 8013504:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 8013508:	2301      	movs	r3, #1
 801350a:	60fb      	str	r3, [r7, #12]
 801350c:	e001      	b.n	8013512 <xTaskNotifyStateClear+0x3a>
 801350e:	2300      	movs	r3, #0
 8013510:	60fb      	str	r3, [r7, #12]
 8013512:	f000 fd07 	bl	8013f24 <vPortExitCritical>
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	4618      	mov	r0, r3
 801351a:	3710      	adds	r7, #16
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}
 8013520:	20001c48 	.word	0x20001c48

08013524 <prvAddCurrentTaskToDelayedList>:
 8013524:	b580      	push	{r7, lr}
 8013526:	b084      	sub	sp, #16
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
 801352c:	6039      	str	r1, [r7, #0]
 801352e:	4b21      	ldr	r3, [pc, #132]	; (80135b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	60fb      	str	r3, [r7, #12]
 8013534:	4b20      	ldr	r3, [pc, #128]	; (80135b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	3304      	adds	r3, #4
 801353a:	4618      	mov	r0, r3
 801353c:	f7fd fb44 	bl	8010bc8 <uxListRemove>
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013546:	d10a      	bne.n	801355e <prvAddCurrentTaskToDelayedList+0x3a>
 8013548:	683b      	ldr	r3, [r7, #0]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d007      	beq.n	801355e <prvAddCurrentTaskToDelayedList+0x3a>
 801354e:	4b1a      	ldr	r3, [pc, #104]	; (80135b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	3304      	adds	r3, #4
 8013554:	4619      	mov	r1, r3
 8013556:	4819      	ldr	r0, [pc, #100]	; (80135bc <prvAddCurrentTaskToDelayedList+0x98>)
 8013558:	f7fd fad9 	bl	8010b0e <vListInsertEnd>
 801355c:	e026      	b.n	80135ac <prvAddCurrentTaskToDelayedList+0x88>
 801355e:	68fa      	ldr	r2, [r7, #12]
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	4413      	add	r3, r2
 8013564:	60bb      	str	r3, [r7, #8]
 8013566:	4b14      	ldr	r3, [pc, #80]	; (80135b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	68ba      	ldr	r2, [r7, #8]
 801356c:	605a      	str	r2, [r3, #4]
 801356e:	68ba      	ldr	r2, [r7, #8]
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	429a      	cmp	r2, r3
 8013574:	d209      	bcs.n	801358a <prvAddCurrentTaskToDelayedList+0x66>
 8013576:	4b12      	ldr	r3, [pc, #72]	; (80135c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013578:	681a      	ldr	r2, [r3, #0]
 801357a:	4b0f      	ldr	r3, [pc, #60]	; (80135b8 <prvAddCurrentTaskToDelayedList+0x94>)
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	3304      	adds	r3, #4
 8013580:	4619      	mov	r1, r3
 8013582:	4610      	mov	r0, r2
 8013584:	f7fd fae7 	bl	8010b56 <vListInsert>
 8013588:	e010      	b.n	80135ac <prvAddCurrentTaskToDelayedList+0x88>
 801358a:	4b0e      	ldr	r3, [pc, #56]	; (80135c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 801358c:	681a      	ldr	r2, [r3, #0]
 801358e:	4b0a      	ldr	r3, [pc, #40]	; (80135b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	3304      	adds	r3, #4
 8013594:	4619      	mov	r1, r3
 8013596:	4610      	mov	r0, r2
 8013598:	f7fd fadd 	bl	8010b56 <vListInsert>
 801359c:	4b0a      	ldr	r3, [pc, #40]	; (80135c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	68ba      	ldr	r2, [r7, #8]
 80135a2:	429a      	cmp	r2, r3
 80135a4:	d202      	bcs.n	80135ac <prvAddCurrentTaskToDelayedList+0x88>
 80135a6:	4a08      	ldr	r2, [pc, #32]	; (80135c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	6013      	str	r3, [r2, #0]
 80135ac:	bf00      	nop
 80135ae:	3710      	adds	r7, #16
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd80      	pop	{r7, pc}
 80135b4:	20002120 	.word	0x20002120
 80135b8:	20001c48 	.word	0x20001c48
 80135bc:	20002108 	.word	0x20002108
 80135c0:	200020d8 	.word	0x200020d8
 80135c4:	200020d4 	.word	0x200020d4
 80135c8:	2000213c 	.word	0x2000213c

080135cc <xTimerCreateTimerTask>:
 80135cc:	b580      	push	{r7, lr}
 80135ce:	b08a      	sub	sp, #40	; 0x28
 80135d0:	af04      	add	r7, sp, #16
 80135d2:	2300      	movs	r3, #0
 80135d4:	617b      	str	r3, [r7, #20]
 80135d6:	f000 fb07 	bl	8013be8 <prvCheckForValidListAndQueue>
 80135da:	4b1c      	ldr	r3, [pc, #112]	; (801364c <xTimerCreateTimerTask+0x80>)
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d021      	beq.n	8013626 <xTimerCreateTimerTask+0x5a>
 80135e2:	2300      	movs	r3, #0
 80135e4:	60fb      	str	r3, [r7, #12]
 80135e6:	2300      	movs	r3, #0
 80135e8:	60bb      	str	r3, [r7, #8]
 80135ea:	1d3a      	adds	r2, r7, #4
 80135ec:	f107 0108 	add.w	r1, r7, #8
 80135f0:	f107 030c 	add.w	r3, r7, #12
 80135f4:	4618      	mov	r0, r3
 80135f6:	f7fd fa43 	bl	8010a80 <vApplicationGetTimerTaskMemory>
 80135fa:	6879      	ldr	r1, [r7, #4]
 80135fc:	68bb      	ldr	r3, [r7, #8]
 80135fe:	68fa      	ldr	r2, [r7, #12]
 8013600:	9202      	str	r2, [sp, #8]
 8013602:	9301      	str	r3, [sp, #4]
 8013604:	2302      	movs	r3, #2
 8013606:	9300      	str	r3, [sp, #0]
 8013608:	2300      	movs	r3, #0
 801360a:	460a      	mov	r2, r1
 801360c:	4910      	ldr	r1, [pc, #64]	; (8013650 <xTimerCreateTimerTask+0x84>)
 801360e:	4811      	ldr	r0, [pc, #68]	; (8013654 <xTimerCreateTimerTask+0x88>)
 8013610:	f7fe fe0a 	bl	8012228 <xTaskCreateStatic>
 8013614:	4603      	mov	r3, r0
 8013616:	4a10      	ldr	r2, [pc, #64]	; (8013658 <xTimerCreateTimerTask+0x8c>)
 8013618:	6013      	str	r3, [r2, #0]
 801361a:	4b0f      	ldr	r3, [pc, #60]	; (8013658 <xTimerCreateTimerTask+0x8c>)
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d001      	beq.n	8013626 <xTimerCreateTimerTask+0x5a>
 8013622:	2301      	movs	r3, #1
 8013624:	617b      	str	r3, [r7, #20]
 8013626:	697b      	ldr	r3, [r7, #20]
 8013628:	2b00      	cmp	r3, #0
 801362a:	d10a      	bne.n	8013642 <xTimerCreateTimerTask+0x76>
 801362c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013630:	f383 8811 	msr	BASEPRI, r3
 8013634:	f3bf 8f6f 	isb	sy
 8013638:	f3bf 8f4f 	dsb	sy
 801363c:	613b      	str	r3, [r7, #16]
 801363e:	bf00      	nop
 8013640:	e7fe      	b.n	8013640 <xTimerCreateTimerTask+0x74>
 8013642:	697b      	ldr	r3, [r7, #20]
 8013644:	4618      	mov	r0, r3
 8013646:	3718      	adds	r7, #24
 8013648:	46bd      	mov	sp, r7
 801364a:	bd80      	pop	{r7, pc}
 801364c:	20002180 	.word	0x20002180
 8013650:	08017440 	.word	0x08017440
 8013654:	08013791 	.word	0x08013791
 8013658:	20002184 	.word	0x20002184

0801365c <xTimerGenericCommand>:
 801365c:	b580      	push	{r7, lr}
 801365e:	b08a      	sub	sp, #40	; 0x28
 8013660:	af00      	add	r7, sp, #0
 8013662:	60f8      	str	r0, [r7, #12]
 8013664:	60b9      	str	r1, [r7, #8]
 8013666:	607a      	str	r2, [r7, #4]
 8013668:	603b      	str	r3, [r7, #0]
 801366a:	2300      	movs	r3, #0
 801366c:	627b      	str	r3, [r7, #36]	; 0x24
 801366e:	68fb      	ldr	r3, [r7, #12]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d10a      	bne.n	801368a <xTimerGenericCommand+0x2e>
 8013674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013678:	f383 8811 	msr	BASEPRI, r3
 801367c:	f3bf 8f6f 	isb	sy
 8013680:	f3bf 8f4f 	dsb	sy
 8013684:	623b      	str	r3, [r7, #32]
 8013686:	bf00      	nop
 8013688:	e7fe      	b.n	8013688 <xTimerGenericCommand+0x2c>
 801368a:	4b1a      	ldr	r3, [pc, #104]	; (80136f4 <xTimerGenericCommand+0x98>)
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d02a      	beq.n	80136e8 <xTimerGenericCommand+0x8c>
 8013692:	68bb      	ldr	r3, [r7, #8]
 8013694:	613b      	str	r3, [r7, #16]
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	617b      	str	r3, [r7, #20]
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	61bb      	str	r3, [r7, #24]
 801369e:	68bb      	ldr	r3, [r7, #8]
 80136a0:	2b05      	cmp	r3, #5
 80136a2:	dc18      	bgt.n	80136d6 <xTimerGenericCommand+0x7a>
 80136a4:	f7ff fc70 	bl	8012f88 <xTaskGetSchedulerState>
 80136a8:	4603      	mov	r3, r0
 80136aa:	2b02      	cmp	r3, #2
 80136ac:	d109      	bne.n	80136c2 <xTimerGenericCommand+0x66>
 80136ae:	4b11      	ldr	r3, [pc, #68]	; (80136f4 <xTimerGenericCommand+0x98>)
 80136b0:	6818      	ldr	r0, [r3, #0]
 80136b2:	f107 0110 	add.w	r1, r7, #16
 80136b6:	2300      	movs	r3, #0
 80136b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136ba:	f7fd fca3 	bl	8011004 <xQueueGenericSend>
 80136be:	6278      	str	r0, [r7, #36]	; 0x24
 80136c0:	e012      	b.n	80136e8 <xTimerGenericCommand+0x8c>
 80136c2:	4b0c      	ldr	r3, [pc, #48]	; (80136f4 <xTimerGenericCommand+0x98>)
 80136c4:	6818      	ldr	r0, [r3, #0]
 80136c6:	f107 0110 	add.w	r1, r7, #16
 80136ca:	2300      	movs	r3, #0
 80136cc:	2200      	movs	r2, #0
 80136ce:	f7fd fc99 	bl	8011004 <xQueueGenericSend>
 80136d2:	6278      	str	r0, [r7, #36]	; 0x24
 80136d4:	e008      	b.n	80136e8 <xTimerGenericCommand+0x8c>
 80136d6:	4b07      	ldr	r3, [pc, #28]	; (80136f4 <xTimerGenericCommand+0x98>)
 80136d8:	6818      	ldr	r0, [r3, #0]
 80136da:	f107 0110 	add.w	r1, r7, #16
 80136de:	2300      	movs	r3, #0
 80136e0:	683a      	ldr	r2, [r7, #0]
 80136e2:	f7fd fd8d 	bl	8011200 <xQueueGenericSendFromISR>
 80136e6:	6278      	str	r0, [r7, #36]	; 0x24
 80136e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ea:	4618      	mov	r0, r3
 80136ec:	3728      	adds	r7, #40	; 0x28
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd80      	pop	{r7, pc}
 80136f2:	bf00      	nop
 80136f4:	20002180 	.word	0x20002180

080136f8 <prvProcessExpiredTimer>:
 80136f8:	b580      	push	{r7, lr}
 80136fa:	b088      	sub	sp, #32
 80136fc:	af02      	add	r7, sp, #8
 80136fe:	6078      	str	r0, [r7, #4]
 8013700:	6039      	str	r1, [r7, #0]
 8013702:	4b22      	ldr	r3, [pc, #136]	; (801378c <prvProcessExpiredTimer+0x94>)
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	68db      	ldr	r3, [r3, #12]
 8013708:	68db      	ldr	r3, [r3, #12]
 801370a:	617b      	str	r3, [r7, #20]
 801370c:	697b      	ldr	r3, [r7, #20]
 801370e:	3304      	adds	r3, #4
 8013710:	4618      	mov	r0, r3
 8013712:	f7fd fa59 	bl	8010bc8 <uxListRemove>
 8013716:	697b      	ldr	r3, [r7, #20]
 8013718:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801371c:	f003 0304 	and.w	r3, r3, #4
 8013720:	2b00      	cmp	r3, #0
 8013722:	d022      	beq.n	801376a <prvProcessExpiredTimer+0x72>
 8013724:	697b      	ldr	r3, [r7, #20]
 8013726:	699a      	ldr	r2, [r3, #24]
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	18d1      	adds	r1, r2, r3
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	683a      	ldr	r2, [r7, #0]
 8013730:	6978      	ldr	r0, [r7, #20]
 8013732:	f000 f8d1 	bl	80138d8 <prvInsertTimerInActiveList>
 8013736:	4603      	mov	r3, r0
 8013738:	2b00      	cmp	r3, #0
 801373a:	d01f      	beq.n	801377c <prvProcessExpiredTimer+0x84>
 801373c:	2300      	movs	r3, #0
 801373e:	9300      	str	r3, [sp, #0]
 8013740:	2300      	movs	r3, #0
 8013742:	687a      	ldr	r2, [r7, #4]
 8013744:	2100      	movs	r1, #0
 8013746:	6978      	ldr	r0, [r7, #20]
 8013748:	f7ff ff88 	bl	801365c <xTimerGenericCommand>
 801374c:	6138      	str	r0, [r7, #16]
 801374e:	693b      	ldr	r3, [r7, #16]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d113      	bne.n	801377c <prvProcessExpiredTimer+0x84>
 8013754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013758:	f383 8811 	msr	BASEPRI, r3
 801375c:	f3bf 8f6f 	isb	sy
 8013760:	f3bf 8f4f 	dsb	sy
 8013764:	60fb      	str	r3, [r7, #12]
 8013766:	bf00      	nop
 8013768:	e7fe      	b.n	8013768 <prvProcessExpiredTimer+0x70>
 801376a:	697b      	ldr	r3, [r7, #20]
 801376c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013770:	f023 0301 	bic.w	r3, r3, #1
 8013774:	b2da      	uxtb	r2, r3
 8013776:	697b      	ldr	r3, [r7, #20]
 8013778:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 801377c:	697b      	ldr	r3, [r7, #20]
 801377e:	6a1b      	ldr	r3, [r3, #32]
 8013780:	6978      	ldr	r0, [r7, #20]
 8013782:	4798      	blx	r3
 8013784:	bf00      	nop
 8013786:	3718      	adds	r7, #24
 8013788:	46bd      	mov	sp, r7
 801378a:	bd80      	pop	{r7, pc}
 801378c:	20002178 	.word	0x20002178

08013790 <prvTimerTask>:
 8013790:	b580      	push	{r7, lr}
 8013792:	b084      	sub	sp, #16
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
 8013798:	f107 0308 	add.w	r3, r7, #8
 801379c:	4618      	mov	r0, r3
 801379e:	f000 f857 	bl	8013850 <prvGetNextExpireTime>
 80137a2:	60f8      	str	r0, [r7, #12]
 80137a4:	68bb      	ldr	r3, [r7, #8]
 80137a6:	4619      	mov	r1, r3
 80137a8:	68f8      	ldr	r0, [r7, #12]
 80137aa:	f000 f803 	bl	80137b4 <prvProcessTimerOrBlockTask>
 80137ae:	f000 f8d5 	bl	801395c <prvProcessReceivedCommands>
 80137b2:	e7f1      	b.n	8013798 <prvTimerTask+0x8>

080137b4 <prvProcessTimerOrBlockTask>:
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b084      	sub	sp, #16
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
 80137bc:	6039      	str	r1, [r7, #0]
 80137be:	f7fe ff95 	bl	80126ec <vTaskSuspendAll>
 80137c2:	f107 0308 	add.w	r3, r7, #8
 80137c6:	4618      	mov	r0, r3
 80137c8:	f000 f866 	bl	8013898 <prvSampleTimeNow>
 80137cc:	60f8      	str	r0, [r7, #12]
 80137ce:	68bb      	ldr	r3, [r7, #8]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d130      	bne.n	8013836 <prvProcessTimerOrBlockTask+0x82>
 80137d4:	683b      	ldr	r3, [r7, #0]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d10a      	bne.n	80137f0 <prvProcessTimerOrBlockTask+0x3c>
 80137da:	687a      	ldr	r2, [r7, #4]
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	429a      	cmp	r2, r3
 80137e0:	d806      	bhi.n	80137f0 <prvProcessTimerOrBlockTask+0x3c>
 80137e2:	f7fe ff91 	bl	8012708 <xTaskResumeAll>
 80137e6:	68f9      	ldr	r1, [r7, #12]
 80137e8:	6878      	ldr	r0, [r7, #4]
 80137ea:	f7ff ff85 	bl	80136f8 <prvProcessExpiredTimer>
 80137ee:	e024      	b.n	801383a <prvProcessTimerOrBlockTask+0x86>
 80137f0:	683b      	ldr	r3, [r7, #0]
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d008      	beq.n	8013808 <prvProcessTimerOrBlockTask+0x54>
 80137f6:	4b13      	ldr	r3, [pc, #76]	; (8013844 <prvProcessTimerOrBlockTask+0x90>)
 80137f8:	681b      	ldr	r3, [r3, #0]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d101      	bne.n	8013804 <prvProcessTimerOrBlockTask+0x50>
 8013800:	2301      	movs	r3, #1
 8013802:	e000      	b.n	8013806 <prvProcessTimerOrBlockTask+0x52>
 8013804:	2300      	movs	r3, #0
 8013806:	603b      	str	r3, [r7, #0]
 8013808:	4b0f      	ldr	r3, [pc, #60]	; (8013848 <prvProcessTimerOrBlockTask+0x94>)
 801380a:	6818      	ldr	r0, [r3, #0]
 801380c:	687a      	ldr	r2, [r7, #4]
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	1ad3      	subs	r3, r2, r3
 8013812:	683a      	ldr	r2, [r7, #0]
 8013814:	4619      	mov	r1, r3
 8013816:	f7fe f94d 	bl	8011ab4 <vQueueWaitForMessageRestricted>
 801381a:	f7fe ff75 	bl	8012708 <xTaskResumeAll>
 801381e:	4603      	mov	r3, r0
 8013820:	2b00      	cmp	r3, #0
 8013822:	d10a      	bne.n	801383a <prvProcessTimerOrBlockTask+0x86>
 8013824:	4b09      	ldr	r3, [pc, #36]	; (801384c <prvProcessTimerOrBlockTask+0x98>)
 8013826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801382a:	601a      	str	r2, [r3, #0]
 801382c:	f3bf 8f4f 	dsb	sy
 8013830:	f3bf 8f6f 	isb	sy
 8013834:	e001      	b.n	801383a <prvProcessTimerOrBlockTask+0x86>
 8013836:	f7fe ff67 	bl	8012708 <xTaskResumeAll>
 801383a:	bf00      	nop
 801383c:	3710      	adds	r7, #16
 801383e:	46bd      	mov	sp, r7
 8013840:	bd80      	pop	{r7, pc}
 8013842:	bf00      	nop
 8013844:	2000217c 	.word	0x2000217c
 8013848:	20002180 	.word	0x20002180
 801384c:	e000ed04 	.word	0xe000ed04

08013850 <prvGetNextExpireTime>:
 8013850:	b480      	push	{r7}
 8013852:	b085      	sub	sp, #20
 8013854:	af00      	add	r7, sp, #0
 8013856:	6078      	str	r0, [r7, #4]
 8013858:	4b0e      	ldr	r3, [pc, #56]	; (8013894 <prvGetNextExpireTime+0x44>)
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d101      	bne.n	8013866 <prvGetNextExpireTime+0x16>
 8013862:	2201      	movs	r2, #1
 8013864:	e000      	b.n	8013868 <prvGetNextExpireTime+0x18>
 8013866:	2200      	movs	r2, #0
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	601a      	str	r2, [r3, #0]
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d105      	bne.n	8013880 <prvGetNextExpireTime+0x30>
 8013874:	4b07      	ldr	r3, [pc, #28]	; (8013894 <prvGetNextExpireTime+0x44>)
 8013876:	681b      	ldr	r3, [r3, #0]
 8013878:	68db      	ldr	r3, [r3, #12]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	60fb      	str	r3, [r7, #12]
 801387e:	e001      	b.n	8013884 <prvGetNextExpireTime+0x34>
 8013880:	2300      	movs	r3, #0
 8013882:	60fb      	str	r3, [r7, #12]
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	4618      	mov	r0, r3
 8013888:	3714      	adds	r7, #20
 801388a:	46bd      	mov	sp, r7
 801388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013890:	4770      	bx	lr
 8013892:	bf00      	nop
 8013894:	20002178 	.word	0x20002178

08013898 <prvSampleTimeNow>:
 8013898:	b580      	push	{r7, lr}
 801389a:	b084      	sub	sp, #16
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
 80138a0:	f7fe ffd0 	bl	8012844 <xTaskGetTickCount>
 80138a4:	60f8      	str	r0, [r7, #12]
 80138a6:	4b0b      	ldr	r3, [pc, #44]	; (80138d4 <prvSampleTimeNow+0x3c>)
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	68fa      	ldr	r2, [r7, #12]
 80138ac:	429a      	cmp	r2, r3
 80138ae:	d205      	bcs.n	80138bc <prvSampleTimeNow+0x24>
 80138b0:	f000 f936 	bl	8013b20 <prvSwitchTimerLists>
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	2201      	movs	r2, #1
 80138b8:	601a      	str	r2, [r3, #0]
 80138ba:	e002      	b.n	80138c2 <prvSampleTimeNow+0x2a>
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	2200      	movs	r2, #0
 80138c0:	601a      	str	r2, [r3, #0]
 80138c2:	4a04      	ldr	r2, [pc, #16]	; (80138d4 <prvSampleTimeNow+0x3c>)
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	6013      	str	r3, [r2, #0]
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	4618      	mov	r0, r3
 80138cc:	3710      	adds	r7, #16
 80138ce:	46bd      	mov	sp, r7
 80138d0:	bd80      	pop	{r7, pc}
 80138d2:	bf00      	nop
 80138d4:	20002188 	.word	0x20002188

080138d8 <prvInsertTimerInActiveList>:
 80138d8:	b580      	push	{r7, lr}
 80138da:	b086      	sub	sp, #24
 80138dc:	af00      	add	r7, sp, #0
 80138de:	60f8      	str	r0, [r7, #12]
 80138e0:	60b9      	str	r1, [r7, #8]
 80138e2:	607a      	str	r2, [r7, #4]
 80138e4:	603b      	str	r3, [r7, #0]
 80138e6:	2300      	movs	r3, #0
 80138e8:	617b      	str	r3, [r7, #20]
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	68ba      	ldr	r2, [r7, #8]
 80138ee:	605a      	str	r2, [r3, #4]
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	68fa      	ldr	r2, [r7, #12]
 80138f4:	611a      	str	r2, [r3, #16]
 80138f6:	68ba      	ldr	r2, [r7, #8]
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	429a      	cmp	r2, r3
 80138fc:	d812      	bhi.n	8013924 <prvInsertTimerInActiveList+0x4c>
 80138fe:	687a      	ldr	r2, [r7, #4]
 8013900:	683b      	ldr	r3, [r7, #0]
 8013902:	1ad2      	subs	r2, r2, r3
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	699b      	ldr	r3, [r3, #24]
 8013908:	429a      	cmp	r2, r3
 801390a:	d302      	bcc.n	8013912 <prvInsertTimerInActiveList+0x3a>
 801390c:	2301      	movs	r3, #1
 801390e:	617b      	str	r3, [r7, #20]
 8013910:	e01b      	b.n	801394a <prvInsertTimerInActiveList+0x72>
 8013912:	4b10      	ldr	r3, [pc, #64]	; (8013954 <prvInsertTimerInActiveList+0x7c>)
 8013914:	681a      	ldr	r2, [r3, #0]
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	3304      	adds	r3, #4
 801391a:	4619      	mov	r1, r3
 801391c:	4610      	mov	r0, r2
 801391e:	f7fd f91a 	bl	8010b56 <vListInsert>
 8013922:	e012      	b.n	801394a <prvInsertTimerInActiveList+0x72>
 8013924:	687a      	ldr	r2, [r7, #4]
 8013926:	683b      	ldr	r3, [r7, #0]
 8013928:	429a      	cmp	r2, r3
 801392a:	d206      	bcs.n	801393a <prvInsertTimerInActiveList+0x62>
 801392c:	68ba      	ldr	r2, [r7, #8]
 801392e:	683b      	ldr	r3, [r7, #0]
 8013930:	429a      	cmp	r2, r3
 8013932:	d302      	bcc.n	801393a <prvInsertTimerInActiveList+0x62>
 8013934:	2301      	movs	r3, #1
 8013936:	617b      	str	r3, [r7, #20]
 8013938:	e007      	b.n	801394a <prvInsertTimerInActiveList+0x72>
 801393a:	4b07      	ldr	r3, [pc, #28]	; (8013958 <prvInsertTimerInActiveList+0x80>)
 801393c:	681a      	ldr	r2, [r3, #0]
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	3304      	adds	r3, #4
 8013942:	4619      	mov	r1, r3
 8013944:	4610      	mov	r0, r2
 8013946:	f7fd f906 	bl	8010b56 <vListInsert>
 801394a:	697b      	ldr	r3, [r7, #20]
 801394c:	4618      	mov	r0, r3
 801394e:	3718      	adds	r7, #24
 8013950:	46bd      	mov	sp, r7
 8013952:	bd80      	pop	{r7, pc}
 8013954:	2000217c 	.word	0x2000217c
 8013958:	20002178 	.word	0x20002178

0801395c <prvProcessReceivedCommands>:
 801395c:	b580      	push	{r7, lr}
 801395e:	b08e      	sub	sp, #56	; 0x38
 8013960:	af02      	add	r7, sp, #8
 8013962:	e0ca      	b.n	8013afa <prvProcessReceivedCommands+0x19e>
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	2b00      	cmp	r3, #0
 8013968:	da18      	bge.n	801399c <prvProcessReceivedCommands+0x40>
 801396a:	1d3b      	adds	r3, r7, #4
 801396c:	3304      	adds	r3, #4
 801396e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013972:	2b00      	cmp	r3, #0
 8013974:	d10a      	bne.n	801398c <prvProcessReceivedCommands+0x30>
 8013976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801397a:	f383 8811 	msr	BASEPRI, r3
 801397e:	f3bf 8f6f 	isb	sy
 8013982:	f3bf 8f4f 	dsb	sy
 8013986:	61fb      	str	r3, [r7, #28]
 8013988:	bf00      	nop
 801398a:	e7fe      	b.n	801398a <prvProcessReceivedCommands+0x2e>
 801398c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013992:	6850      	ldr	r0, [r2, #4]
 8013994:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013996:	6892      	ldr	r2, [r2, #8]
 8013998:	4611      	mov	r1, r2
 801399a:	4798      	blx	r3
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	f2c0 80aa 	blt.w	8013af8 <prvProcessReceivedCommands+0x19c>
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80139a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139aa:	695b      	ldr	r3, [r3, #20]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d004      	beq.n	80139ba <prvProcessReceivedCommands+0x5e>
 80139b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139b2:	3304      	adds	r3, #4
 80139b4:	4618      	mov	r0, r3
 80139b6:	f7fd f907 	bl	8010bc8 <uxListRemove>
 80139ba:	463b      	mov	r3, r7
 80139bc:	4618      	mov	r0, r3
 80139be:	f7ff ff6b 	bl	8013898 <prvSampleTimeNow>
 80139c2:	6278      	str	r0, [r7, #36]	; 0x24
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	2b09      	cmp	r3, #9
 80139c8:	f200 8097 	bhi.w	8013afa <prvProcessReceivedCommands+0x19e>
 80139cc:	a201      	add	r2, pc, #4	; (adr r2, 80139d4 <prvProcessReceivedCommands+0x78>)
 80139ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139d2:	bf00      	nop
 80139d4:	080139fd 	.word	0x080139fd
 80139d8:	080139fd 	.word	0x080139fd
 80139dc:	080139fd 	.word	0x080139fd
 80139e0:	08013a71 	.word	0x08013a71
 80139e4:	08013a85 	.word	0x08013a85
 80139e8:	08013acf 	.word	0x08013acf
 80139ec:	080139fd 	.word	0x080139fd
 80139f0:	080139fd 	.word	0x080139fd
 80139f4:	08013a71 	.word	0x08013a71
 80139f8:	08013a85 	.word	0x08013a85
 80139fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a02:	f043 0301 	orr.w	r3, r3, #1
 8013a06:	b2da      	uxtb	r2, r3
 8013a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8013a0e:	68ba      	ldr	r2, [r7, #8]
 8013a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a12:	699b      	ldr	r3, [r3, #24]
 8013a14:	18d1      	adds	r1, r2, r3
 8013a16:	68bb      	ldr	r3, [r7, #8]
 8013a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a1c:	f7ff ff5c 	bl	80138d8 <prvInsertTimerInActiveList>
 8013a20:	4603      	mov	r3, r0
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d069      	beq.n	8013afa <prvProcessReceivedCommands+0x19e>
 8013a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a28:	6a1b      	ldr	r3, [r3, #32]
 8013a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a2c:	4798      	blx	r3
 8013a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a34:	f003 0304 	and.w	r3, r3, #4
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d05e      	beq.n	8013afa <prvProcessReceivedCommands+0x19e>
 8013a3c:	68ba      	ldr	r2, [r7, #8]
 8013a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a40:	699b      	ldr	r3, [r3, #24]
 8013a42:	441a      	add	r2, r3
 8013a44:	2300      	movs	r3, #0
 8013a46:	9300      	str	r3, [sp, #0]
 8013a48:	2300      	movs	r3, #0
 8013a4a:	2100      	movs	r1, #0
 8013a4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a4e:	f7ff fe05 	bl	801365c <xTimerGenericCommand>
 8013a52:	6238      	str	r0, [r7, #32]
 8013a54:	6a3b      	ldr	r3, [r7, #32]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d14f      	bne.n	8013afa <prvProcessReceivedCommands+0x19e>
 8013a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a5e:	f383 8811 	msr	BASEPRI, r3
 8013a62:	f3bf 8f6f 	isb	sy
 8013a66:	f3bf 8f4f 	dsb	sy
 8013a6a:	61bb      	str	r3, [r7, #24]
 8013a6c:	bf00      	nop
 8013a6e:	e7fe      	b.n	8013a6e <prvProcessReceivedCommands+0x112>
 8013a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a76:	f023 0301 	bic.w	r3, r3, #1
 8013a7a:	b2da      	uxtb	r2, r3
 8013a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8013a82:	e03a      	b.n	8013afa <prvProcessReceivedCommands+0x19e>
 8013a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a8a:	f043 0301 	orr.w	r3, r3, #1
 8013a8e:	b2da      	uxtb	r2, r3
 8013a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8013a96:	68ba      	ldr	r2, [r7, #8]
 8013a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a9a:	619a      	str	r2, [r3, #24]
 8013a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a9e:	699b      	ldr	r3, [r3, #24]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d10a      	bne.n	8013aba <prvProcessReceivedCommands+0x15e>
 8013aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aa8:	f383 8811 	msr	BASEPRI, r3
 8013aac:	f3bf 8f6f 	isb	sy
 8013ab0:	f3bf 8f4f 	dsb	sy
 8013ab4:	617b      	str	r3, [r7, #20]
 8013ab6:	bf00      	nop
 8013ab8:	e7fe      	b.n	8013ab8 <prvProcessReceivedCommands+0x15c>
 8013aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013abc:	699a      	ldr	r2, [r3, #24]
 8013abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac0:	18d1      	adds	r1, r2, r3
 8013ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ac8:	f7ff ff06 	bl	80138d8 <prvInsertTimerInActiveList>
 8013acc:	e015      	b.n	8013afa <prvProcessReceivedCommands+0x19e>
 8013ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ad4:	f003 0302 	and.w	r3, r3, #2
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d103      	bne.n	8013ae4 <prvProcessReceivedCommands+0x188>
 8013adc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ade:	f000 fbe3 	bl	80142a8 <vPortFree>
 8013ae2:	e00a      	b.n	8013afa <prvProcessReceivedCommands+0x19e>
 8013ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013aea:	f023 0301 	bic.w	r3, r3, #1
 8013aee:	b2da      	uxtb	r2, r3
 8013af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013af2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8013af6:	e000      	b.n	8013afa <prvProcessReceivedCommands+0x19e>
 8013af8:	bf00      	nop
 8013afa:	4b08      	ldr	r3, [pc, #32]	; (8013b1c <prvProcessReceivedCommands+0x1c0>)
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	1d39      	adds	r1, r7, #4
 8013b00:	2200      	movs	r2, #0
 8013b02:	4618      	mov	r0, r3
 8013b04:	f7fd fc18 	bl	8011338 <xQueueReceive>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	f47f af2a 	bne.w	8013964 <prvProcessReceivedCommands+0x8>
 8013b10:	bf00      	nop
 8013b12:	bf00      	nop
 8013b14:	3730      	adds	r7, #48	; 0x30
 8013b16:	46bd      	mov	sp, r7
 8013b18:	bd80      	pop	{r7, pc}
 8013b1a:	bf00      	nop
 8013b1c:	20002180 	.word	0x20002180

08013b20 <prvSwitchTimerLists>:
 8013b20:	b580      	push	{r7, lr}
 8013b22:	b088      	sub	sp, #32
 8013b24:	af02      	add	r7, sp, #8
 8013b26:	e048      	b.n	8013bba <prvSwitchTimerLists+0x9a>
 8013b28:	4b2d      	ldr	r3, [pc, #180]	; (8013be0 <prvSwitchTimerLists+0xc0>)
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	68db      	ldr	r3, [r3, #12]
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	613b      	str	r3, [r7, #16]
 8013b32:	4b2b      	ldr	r3, [pc, #172]	; (8013be0 <prvSwitchTimerLists+0xc0>)
 8013b34:	681b      	ldr	r3, [r3, #0]
 8013b36:	68db      	ldr	r3, [r3, #12]
 8013b38:	68db      	ldr	r3, [r3, #12]
 8013b3a:	60fb      	str	r3, [r7, #12]
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	3304      	adds	r3, #4
 8013b40:	4618      	mov	r0, r3
 8013b42:	f7fd f841 	bl	8010bc8 <uxListRemove>
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	6a1b      	ldr	r3, [r3, #32]
 8013b4a:	68f8      	ldr	r0, [r7, #12]
 8013b4c:	4798      	blx	r3
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b54:	f003 0304 	and.w	r3, r3, #4
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d02e      	beq.n	8013bba <prvSwitchTimerLists+0x9a>
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	699b      	ldr	r3, [r3, #24]
 8013b60:	693a      	ldr	r2, [r7, #16]
 8013b62:	4413      	add	r3, r2
 8013b64:	60bb      	str	r3, [r7, #8]
 8013b66:	68ba      	ldr	r2, [r7, #8]
 8013b68:	693b      	ldr	r3, [r7, #16]
 8013b6a:	429a      	cmp	r2, r3
 8013b6c:	d90e      	bls.n	8013b8c <prvSwitchTimerLists+0x6c>
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	68ba      	ldr	r2, [r7, #8]
 8013b72:	605a      	str	r2, [r3, #4]
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	68fa      	ldr	r2, [r7, #12]
 8013b78:	611a      	str	r2, [r3, #16]
 8013b7a:	4b19      	ldr	r3, [pc, #100]	; (8013be0 <prvSwitchTimerLists+0xc0>)
 8013b7c:	681a      	ldr	r2, [r3, #0]
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	3304      	adds	r3, #4
 8013b82:	4619      	mov	r1, r3
 8013b84:	4610      	mov	r0, r2
 8013b86:	f7fc ffe6 	bl	8010b56 <vListInsert>
 8013b8a:	e016      	b.n	8013bba <prvSwitchTimerLists+0x9a>
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	9300      	str	r3, [sp, #0]
 8013b90:	2300      	movs	r3, #0
 8013b92:	693a      	ldr	r2, [r7, #16]
 8013b94:	2100      	movs	r1, #0
 8013b96:	68f8      	ldr	r0, [r7, #12]
 8013b98:	f7ff fd60 	bl	801365c <xTimerGenericCommand>
 8013b9c:	6078      	str	r0, [r7, #4]
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d10a      	bne.n	8013bba <prvSwitchTimerLists+0x9a>
 8013ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ba8:	f383 8811 	msr	BASEPRI, r3
 8013bac:	f3bf 8f6f 	isb	sy
 8013bb0:	f3bf 8f4f 	dsb	sy
 8013bb4:	603b      	str	r3, [r7, #0]
 8013bb6:	bf00      	nop
 8013bb8:	e7fe      	b.n	8013bb8 <prvSwitchTimerLists+0x98>
 8013bba:	4b09      	ldr	r3, [pc, #36]	; (8013be0 <prvSwitchTimerLists+0xc0>)
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d1b1      	bne.n	8013b28 <prvSwitchTimerLists+0x8>
 8013bc4:	4b06      	ldr	r3, [pc, #24]	; (8013be0 <prvSwitchTimerLists+0xc0>)
 8013bc6:	681b      	ldr	r3, [r3, #0]
 8013bc8:	617b      	str	r3, [r7, #20]
 8013bca:	4b06      	ldr	r3, [pc, #24]	; (8013be4 <prvSwitchTimerLists+0xc4>)
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	4a04      	ldr	r2, [pc, #16]	; (8013be0 <prvSwitchTimerLists+0xc0>)
 8013bd0:	6013      	str	r3, [r2, #0]
 8013bd2:	4a04      	ldr	r2, [pc, #16]	; (8013be4 <prvSwitchTimerLists+0xc4>)
 8013bd4:	697b      	ldr	r3, [r7, #20]
 8013bd6:	6013      	str	r3, [r2, #0]
 8013bd8:	bf00      	nop
 8013bda:	3718      	adds	r7, #24
 8013bdc:	46bd      	mov	sp, r7
 8013bde:	bd80      	pop	{r7, pc}
 8013be0:	20002178 	.word	0x20002178
 8013be4:	2000217c 	.word	0x2000217c

08013be8 <prvCheckForValidListAndQueue>:
 8013be8:	b580      	push	{r7, lr}
 8013bea:	b082      	sub	sp, #8
 8013bec:	af02      	add	r7, sp, #8
 8013bee:	f000 f969 	bl	8013ec4 <vPortEnterCritical>
 8013bf2:	4b15      	ldr	r3, [pc, #84]	; (8013c48 <prvCheckForValidListAndQueue+0x60>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d120      	bne.n	8013c3c <prvCheckForValidListAndQueue+0x54>
 8013bfa:	4814      	ldr	r0, [pc, #80]	; (8013c4c <prvCheckForValidListAndQueue+0x64>)
 8013bfc:	f7fc ff5a 	bl	8010ab4 <vListInitialise>
 8013c00:	4813      	ldr	r0, [pc, #76]	; (8013c50 <prvCheckForValidListAndQueue+0x68>)
 8013c02:	f7fc ff57 	bl	8010ab4 <vListInitialise>
 8013c06:	4b13      	ldr	r3, [pc, #76]	; (8013c54 <prvCheckForValidListAndQueue+0x6c>)
 8013c08:	4a10      	ldr	r2, [pc, #64]	; (8013c4c <prvCheckForValidListAndQueue+0x64>)
 8013c0a:	601a      	str	r2, [r3, #0]
 8013c0c:	4b12      	ldr	r3, [pc, #72]	; (8013c58 <prvCheckForValidListAndQueue+0x70>)
 8013c0e:	4a10      	ldr	r2, [pc, #64]	; (8013c50 <prvCheckForValidListAndQueue+0x68>)
 8013c10:	601a      	str	r2, [r3, #0]
 8013c12:	2300      	movs	r3, #0
 8013c14:	9300      	str	r3, [sp, #0]
 8013c16:	4b11      	ldr	r3, [pc, #68]	; (8013c5c <prvCheckForValidListAndQueue+0x74>)
 8013c18:	4a11      	ldr	r2, [pc, #68]	; (8013c60 <prvCheckForValidListAndQueue+0x78>)
 8013c1a:	2110      	movs	r1, #16
 8013c1c:	200a      	movs	r0, #10
 8013c1e:	f7fd f865 	bl	8010cec <xQueueGenericCreateStatic>
 8013c22:	4603      	mov	r3, r0
 8013c24:	4a08      	ldr	r2, [pc, #32]	; (8013c48 <prvCheckForValidListAndQueue+0x60>)
 8013c26:	6013      	str	r3, [r2, #0]
 8013c28:	4b07      	ldr	r3, [pc, #28]	; (8013c48 <prvCheckForValidListAndQueue+0x60>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	d005      	beq.n	8013c3c <prvCheckForValidListAndQueue+0x54>
 8013c30:	4b05      	ldr	r3, [pc, #20]	; (8013c48 <prvCheckForValidListAndQueue+0x60>)
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	490b      	ldr	r1, [pc, #44]	; (8013c64 <prvCheckForValidListAndQueue+0x7c>)
 8013c36:	4618      	mov	r0, r3
 8013c38:	f7fd ff12 	bl	8011a60 <vQueueAddToRegistry>
 8013c3c:	f000 f972 	bl	8013f24 <vPortExitCritical>
 8013c40:	bf00      	nop
 8013c42:	46bd      	mov	sp, r7
 8013c44:	bd80      	pop	{r7, pc}
 8013c46:	bf00      	nop
 8013c48:	20002180 	.word	0x20002180
 8013c4c:	20002150 	.word	0x20002150
 8013c50:	20002164 	.word	0x20002164
 8013c54:	20002178 	.word	0x20002178
 8013c58:	2000217c 	.word	0x2000217c
 8013c5c:	2000222c 	.word	0x2000222c
 8013c60:	2000218c 	.word	0x2000218c
 8013c64:	08017448 	.word	0x08017448

08013c68 <pxPortInitialiseStack>:
 8013c68:	b480      	push	{r7}
 8013c6a:	b085      	sub	sp, #20
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	60f8      	str	r0, [r7, #12]
 8013c70:	60b9      	str	r1, [r7, #8]
 8013c72:	607a      	str	r2, [r7, #4]
 8013c74:	68fb      	ldr	r3, [r7, #12]
 8013c76:	3b04      	subs	r3, #4
 8013c78:	60fb      	str	r3, [r7, #12]
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013c80:	601a      	str	r2, [r3, #0]
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	3b04      	subs	r3, #4
 8013c86:	60fb      	str	r3, [r7, #12]
 8013c88:	68bb      	ldr	r3, [r7, #8]
 8013c8a:	f023 0201 	bic.w	r2, r3, #1
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	601a      	str	r2, [r3, #0]
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	3b04      	subs	r3, #4
 8013c96:	60fb      	str	r3, [r7, #12]
 8013c98:	4a0c      	ldr	r2, [pc, #48]	; (8013ccc <pxPortInitialiseStack+0x64>)
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	601a      	str	r2, [r3, #0]
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	3b14      	subs	r3, #20
 8013ca2:	60fb      	str	r3, [r7, #12]
 8013ca4:	687a      	ldr	r2, [r7, #4]
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	601a      	str	r2, [r3, #0]
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	3b04      	subs	r3, #4
 8013cae:	60fb      	str	r3, [r7, #12]
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	f06f 0202 	mvn.w	r2, #2
 8013cb6:	601a      	str	r2, [r3, #0]
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	3b20      	subs	r3, #32
 8013cbc:	60fb      	str	r3, [r7, #12]
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	3714      	adds	r7, #20
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cca:	4770      	bx	lr
 8013ccc:	08013cd1 	.word	0x08013cd1

08013cd0 <prvTaskExitError>:
 8013cd0:	b480      	push	{r7}
 8013cd2:	b085      	sub	sp, #20
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	607b      	str	r3, [r7, #4]
 8013cda:	4b12      	ldr	r3, [pc, #72]	; (8013d24 <prvTaskExitError+0x54>)
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ce2:	d00a      	beq.n	8013cfa <prvTaskExitError+0x2a>
 8013ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ce8:	f383 8811 	msr	BASEPRI, r3
 8013cec:	f3bf 8f6f 	isb	sy
 8013cf0:	f3bf 8f4f 	dsb	sy
 8013cf4:	60fb      	str	r3, [r7, #12]
 8013cf6:	bf00      	nop
 8013cf8:	e7fe      	b.n	8013cf8 <prvTaskExitError+0x28>
 8013cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cfe:	f383 8811 	msr	BASEPRI, r3
 8013d02:	f3bf 8f6f 	isb	sy
 8013d06:	f3bf 8f4f 	dsb	sy
 8013d0a:	60bb      	str	r3, [r7, #8]
 8013d0c:	bf00      	nop
 8013d0e:	bf00      	nop
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d0fc      	beq.n	8013d10 <prvTaskExitError+0x40>
 8013d16:	bf00      	nop
 8013d18:	bf00      	nop
 8013d1a:	3714      	adds	r7, #20
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d22:	4770      	bx	lr
 8013d24:	2000002c 	.word	0x2000002c
	...

08013d30 <SVC_Handler>:
 8013d30:	4b07      	ldr	r3, [pc, #28]	; (8013d50 <pxCurrentTCBConst2>)
 8013d32:	6819      	ldr	r1, [r3, #0]
 8013d34:	6808      	ldr	r0, [r1, #0]
 8013d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d3a:	f380 8809 	msr	PSP, r0
 8013d3e:	f3bf 8f6f 	isb	sy
 8013d42:	f04f 0000 	mov.w	r0, #0
 8013d46:	f380 8811 	msr	BASEPRI, r0
 8013d4a:	4770      	bx	lr
 8013d4c:	f3af 8000 	nop.w

08013d50 <pxCurrentTCBConst2>:
 8013d50:	20001c48 	.word	0x20001c48
 8013d54:	bf00      	nop
 8013d56:	bf00      	nop

08013d58 <prvPortStartFirstTask>:
 8013d58:	4808      	ldr	r0, [pc, #32]	; (8013d7c <prvPortStartFirstTask+0x24>)
 8013d5a:	6800      	ldr	r0, [r0, #0]
 8013d5c:	6800      	ldr	r0, [r0, #0]
 8013d5e:	f380 8808 	msr	MSP, r0
 8013d62:	f04f 0000 	mov.w	r0, #0
 8013d66:	f380 8814 	msr	CONTROL, r0
 8013d6a:	b662      	cpsie	i
 8013d6c:	b661      	cpsie	f
 8013d6e:	f3bf 8f4f 	dsb	sy
 8013d72:	f3bf 8f6f 	isb	sy
 8013d76:	df00      	svc	0
 8013d78:	bf00      	nop
 8013d7a:	bf00      	nop
 8013d7c:	e000ed08 	.word	0xe000ed08

08013d80 <xPortStartScheduler>:
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b086      	sub	sp, #24
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	4b46      	ldr	r3, [pc, #280]	; (8013ea0 <xPortStartScheduler+0x120>)
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	4a46      	ldr	r2, [pc, #280]	; (8013ea4 <xPortStartScheduler+0x124>)
 8013d8c:	4293      	cmp	r3, r2
 8013d8e:	d10a      	bne.n	8013da6 <xPortStartScheduler+0x26>
 8013d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d94:	f383 8811 	msr	BASEPRI, r3
 8013d98:	f3bf 8f6f 	isb	sy
 8013d9c:	f3bf 8f4f 	dsb	sy
 8013da0:	613b      	str	r3, [r7, #16]
 8013da2:	bf00      	nop
 8013da4:	e7fe      	b.n	8013da4 <xPortStartScheduler+0x24>
 8013da6:	4b3e      	ldr	r3, [pc, #248]	; (8013ea0 <xPortStartScheduler+0x120>)
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	4a3f      	ldr	r2, [pc, #252]	; (8013ea8 <xPortStartScheduler+0x128>)
 8013dac:	4293      	cmp	r3, r2
 8013dae:	d10a      	bne.n	8013dc6 <xPortStartScheduler+0x46>
 8013db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013db4:	f383 8811 	msr	BASEPRI, r3
 8013db8:	f3bf 8f6f 	isb	sy
 8013dbc:	f3bf 8f4f 	dsb	sy
 8013dc0:	60fb      	str	r3, [r7, #12]
 8013dc2:	bf00      	nop
 8013dc4:	e7fe      	b.n	8013dc4 <xPortStartScheduler+0x44>
 8013dc6:	4b39      	ldr	r3, [pc, #228]	; (8013eac <xPortStartScheduler+0x12c>)
 8013dc8:	617b      	str	r3, [r7, #20]
 8013dca:	697b      	ldr	r3, [r7, #20]
 8013dcc:	781b      	ldrb	r3, [r3, #0]
 8013dce:	b2db      	uxtb	r3, r3
 8013dd0:	607b      	str	r3, [r7, #4]
 8013dd2:	697b      	ldr	r3, [r7, #20]
 8013dd4:	22ff      	movs	r2, #255	; 0xff
 8013dd6:	701a      	strb	r2, [r3, #0]
 8013dd8:	697b      	ldr	r3, [r7, #20]
 8013dda:	781b      	ldrb	r3, [r3, #0]
 8013ddc:	b2db      	uxtb	r3, r3
 8013dde:	70fb      	strb	r3, [r7, #3]
 8013de0:	78fb      	ldrb	r3, [r7, #3]
 8013de2:	b2db      	uxtb	r3, r3
 8013de4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013de8:	b2da      	uxtb	r2, r3
 8013dea:	4b31      	ldr	r3, [pc, #196]	; (8013eb0 <xPortStartScheduler+0x130>)
 8013dec:	701a      	strb	r2, [r3, #0]
 8013dee:	4b31      	ldr	r3, [pc, #196]	; (8013eb4 <xPortStartScheduler+0x134>)
 8013df0:	2207      	movs	r2, #7
 8013df2:	601a      	str	r2, [r3, #0]
 8013df4:	e009      	b.n	8013e0a <xPortStartScheduler+0x8a>
 8013df6:	4b2f      	ldr	r3, [pc, #188]	; (8013eb4 <xPortStartScheduler+0x134>)
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	3b01      	subs	r3, #1
 8013dfc:	4a2d      	ldr	r2, [pc, #180]	; (8013eb4 <xPortStartScheduler+0x134>)
 8013dfe:	6013      	str	r3, [r2, #0]
 8013e00:	78fb      	ldrb	r3, [r7, #3]
 8013e02:	b2db      	uxtb	r3, r3
 8013e04:	005b      	lsls	r3, r3, #1
 8013e06:	b2db      	uxtb	r3, r3
 8013e08:	70fb      	strb	r3, [r7, #3]
 8013e0a:	78fb      	ldrb	r3, [r7, #3]
 8013e0c:	b2db      	uxtb	r3, r3
 8013e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e12:	2b80      	cmp	r3, #128	; 0x80
 8013e14:	d0ef      	beq.n	8013df6 <xPortStartScheduler+0x76>
 8013e16:	4b27      	ldr	r3, [pc, #156]	; (8013eb4 <xPortStartScheduler+0x134>)
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	f1c3 0307 	rsb	r3, r3, #7
 8013e1e:	2b04      	cmp	r3, #4
 8013e20:	d00a      	beq.n	8013e38 <xPortStartScheduler+0xb8>
 8013e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e26:	f383 8811 	msr	BASEPRI, r3
 8013e2a:	f3bf 8f6f 	isb	sy
 8013e2e:	f3bf 8f4f 	dsb	sy
 8013e32:	60bb      	str	r3, [r7, #8]
 8013e34:	bf00      	nop
 8013e36:	e7fe      	b.n	8013e36 <xPortStartScheduler+0xb6>
 8013e38:	4b1e      	ldr	r3, [pc, #120]	; (8013eb4 <xPortStartScheduler+0x134>)
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	021b      	lsls	r3, r3, #8
 8013e3e:	4a1d      	ldr	r2, [pc, #116]	; (8013eb4 <xPortStartScheduler+0x134>)
 8013e40:	6013      	str	r3, [r2, #0]
 8013e42:	4b1c      	ldr	r3, [pc, #112]	; (8013eb4 <xPortStartScheduler+0x134>)
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8013e4a:	4a1a      	ldr	r2, [pc, #104]	; (8013eb4 <xPortStartScheduler+0x134>)
 8013e4c:	6013      	str	r3, [r2, #0]
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	b2da      	uxtb	r2, r3
 8013e52:	697b      	ldr	r3, [r7, #20]
 8013e54:	701a      	strb	r2, [r3, #0]
 8013e56:	4b18      	ldr	r3, [pc, #96]	; (8013eb8 <xPortStartScheduler+0x138>)
 8013e58:	681b      	ldr	r3, [r3, #0]
 8013e5a:	4a17      	ldr	r2, [pc, #92]	; (8013eb8 <xPortStartScheduler+0x138>)
 8013e5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013e60:	6013      	str	r3, [r2, #0]
 8013e62:	4b15      	ldr	r3, [pc, #84]	; (8013eb8 <xPortStartScheduler+0x138>)
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	4a14      	ldr	r2, [pc, #80]	; (8013eb8 <xPortStartScheduler+0x138>)
 8013e68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013e6c:	6013      	str	r3, [r2, #0]
 8013e6e:	f000 f8dd 	bl	801402c <vPortSetupTimerInterrupt>
 8013e72:	4b12      	ldr	r3, [pc, #72]	; (8013ebc <xPortStartScheduler+0x13c>)
 8013e74:	2200      	movs	r2, #0
 8013e76:	601a      	str	r2, [r3, #0]
 8013e78:	f000 f8fc 	bl	8014074 <vPortEnableVFP>
 8013e7c:	4b10      	ldr	r3, [pc, #64]	; (8013ec0 <xPortStartScheduler+0x140>)
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	4a0f      	ldr	r2, [pc, #60]	; (8013ec0 <xPortStartScheduler+0x140>)
 8013e82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8013e86:	6013      	str	r3, [r2, #0]
 8013e88:	f7ff ff66 	bl	8013d58 <prvPortStartFirstTask>
 8013e8c:	f7fe fda4 	bl	80129d8 <vTaskSwitchContext>
 8013e90:	f7ff ff1e 	bl	8013cd0 <prvTaskExitError>
 8013e94:	2300      	movs	r3, #0
 8013e96:	4618      	mov	r0, r3
 8013e98:	3718      	adds	r7, #24
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	bd80      	pop	{r7, pc}
 8013e9e:	bf00      	nop
 8013ea0:	e000ed00 	.word	0xe000ed00
 8013ea4:	410fc271 	.word	0x410fc271
 8013ea8:	410fc270 	.word	0x410fc270
 8013eac:	e000e400 	.word	0xe000e400
 8013eb0:	2000227c 	.word	0x2000227c
 8013eb4:	20002280 	.word	0x20002280
 8013eb8:	e000ed20 	.word	0xe000ed20
 8013ebc:	2000002c 	.word	0x2000002c
 8013ec0:	e000ef34 	.word	0xe000ef34

08013ec4 <vPortEnterCritical>:
 8013ec4:	b480      	push	{r7}
 8013ec6:	b083      	sub	sp, #12
 8013ec8:	af00      	add	r7, sp, #0
 8013eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ece:	f383 8811 	msr	BASEPRI, r3
 8013ed2:	f3bf 8f6f 	isb	sy
 8013ed6:	f3bf 8f4f 	dsb	sy
 8013eda:	607b      	str	r3, [r7, #4]
 8013edc:	bf00      	nop
 8013ede:	4b0f      	ldr	r3, [pc, #60]	; (8013f1c <vPortEnterCritical+0x58>)
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	3301      	adds	r3, #1
 8013ee4:	4a0d      	ldr	r2, [pc, #52]	; (8013f1c <vPortEnterCritical+0x58>)
 8013ee6:	6013      	str	r3, [r2, #0]
 8013ee8:	4b0c      	ldr	r3, [pc, #48]	; (8013f1c <vPortEnterCritical+0x58>)
 8013eea:	681b      	ldr	r3, [r3, #0]
 8013eec:	2b01      	cmp	r3, #1
 8013eee:	d10f      	bne.n	8013f10 <vPortEnterCritical+0x4c>
 8013ef0:	4b0b      	ldr	r3, [pc, #44]	; (8013f20 <vPortEnterCritical+0x5c>)
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	b2db      	uxtb	r3, r3
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	d00a      	beq.n	8013f10 <vPortEnterCritical+0x4c>
 8013efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013efe:	f383 8811 	msr	BASEPRI, r3
 8013f02:	f3bf 8f6f 	isb	sy
 8013f06:	f3bf 8f4f 	dsb	sy
 8013f0a:	603b      	str	r3, [r7, #0]
 8013f0c:	bf00      	nop
 8013f0e:	e7fe      	b.n	8013f0e <vPortEnterCritical+0x4a>
 8013f10:	bf00      	nop
 8013f12:	370c      	adds	r7, #12
 8013f14:	46bd      	mov	sp, r7
 8013f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f1a:	4770      	bx	lr
 8013f1c:	2000002c 	.word	0x2000002c
 8013f20:	e000ed04 	.word	0xe000ed04

08013f24 <vPortExitCritical>:
 8013f24:	b480      	push	{r7}
 8013f26:	b083      	sub	sp, #12
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	4b12      	ldr	r3, [pc, #72]	; (8013f74 <vPortExitCritical+0x50>)
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d10a      	bne.n	8013f48 <vPortExitCritical+0x24>
 8013f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f36:	f383 8811 	msr	BASEPRI, r3
 8013f3a:	f3bf 8f6f 	isb	sy
 8013f3e:	f3bf 8f4f 	dsb	sy
 8013f42:	607b      	str	r3, [r7, #4]
 8013f44:	bf00      	nop
 8013f46:	e7fe      	b.n	8013f46 <vPortExitCritical+0x22>
 8013f48:	4b0a      	ldr	r3, [pc, #40]	; (8013f74 <vPortExitCritical+0x50>)
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	3b01      	subs	r3, #1
 8013f4e:	4a09      	ldr	r2, [pc, #36]	; (8013f74 <vPortExitCritical+0x50>)
 8013f50:	6013      	str	r3, [r2, #0]
 8013f52:	4b08      	ldr	r3, [pc, #32]	; (8013f74 <vPortExitCritical+0x50>)
 8013f54:	681b      	ldr	r3, [r3, #0]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d105      	bne.n	8013f66 <vPortExitCritical+0x42>
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	603b      	str	r3, [r7, #0]
 8013f5e:	683b      	ldr	r3, [r7, #0]
 8013f60:	f383 8811 	msr	BASEPRI, r3
 8013f64:	bf00      	nop
 8013f66:	bf00      	nop
 8013f68:	370c      	adds	r7, #12
 8013f6a:	46bd      	mov	sp, r7
 8013f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f70:	4770      	bx	lr
 8013f72:	bf00      	nop
 8013f74:	2000002c 	.word	0x2000002c
	...

08013f80 <PendSV_Handler>:
 8013f80:	f3ef 8009 	mrs	r0, PSP
 8013f84:	f3bf 8f6f 	isb	sy
 8013f88:	4b15      	ldr	r3, [pc, #84]	; (8013fe0 <pxCurrentTCBConst>)
 8013f8a:	681a      	ldr	r2, [r3, #0]
 8013f8c:	f01e 0f10 	tst.w	lr, #16
 8013f90:	bf08      	it	eq
 8013f92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013f96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f9a:	6010      	str	r0, [r2, #0]
 8013f9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013fa0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013fa4:	f380 8811 	msr	BASEPRI, r0
 8013fa8:	f3bf 8f4f 	dsb	sy
 8013fac:	f3bf 8f6f 	isb	sy
 8013fb0:	f7fe fd12 	bl	80129d8 <vTaskSwitchContext>
 8013fb4:	f04f 0000 	mov.w	r0, #0
 8013fb8:	f380 8811 	msr	BASEPRI, r0
 8013fbc:	bc09      	pop	{r0, r3}
 8013fbe:	6819      	ldr	r1, [r3, #0]
 8013fc0:	6808      	ldr	r0, [r1, #0]
 8013fc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fc6:	f01e 0f10 	tst.w	lr, #16
 8013fca:	bf08      	it	eq
 8013fcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013fd0:	f380 8809 	msr	PSP, r0
 8013fd4:	f3bf 8f6f 	isb	sy
 8013fd8:	4770      	bx	lr
 8013fda:	bf00      	nop
 8013fdc:	f3af 8000 	nop.w

08013fe0 <pxCurrentTCBConst>:
 8013fe0:	20001c48 	.word	0x20001c48
 8013fe4:	bf00      	nop
 8013fe6:	bf00      	nop

08013fe8 <xPortSysTickHandler>:
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b082      	sub	sp, #8
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ff2:	f383 8811 	msr	BASEPRI, r3
 8013ff6:	f3bf 8f6f 	isb	sy
 8013ffa:	f3bf 8f4f 	dsb	sy
 8013ffe:	607b      	str	r3, [r7, #4]
 8014000:	bf00      	nop
 8014002:	f7fe fc2f 	bl	8012864 <xTaskIncrementTick>
 8014006:	4603      	mov	r3, r0
 8014008:	2b00      	cmp	r3, #0
 801400a:	d003      	beq.n	8014014 <xPortSysTickHandler+0x2c>
 801400c:	4b06      	ldr	r3, [pc, #24]	; (8014028 <xPortSysTickHandler+0x40>)
 801400e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014012:	601a      	str	r2, [r3, #0]
 8014014:	2300      	movs	r3, #0
 8014016:	603b      	str	r3, [r7, #0]
 8014018:	683b      	ldr	r3, [r7, #0]
 801401a:	f383 8811 	msr	BASEPRI, r3
 801401e:	bf00      	nop
 8014020:	bf00      	nop
 8014022:	3708      	adds	r7, #8
 8014024:	46bd      	mov	sp, r7
 8014026:	bd80      	pop	{r7, pc}
 8014028:	e000ed04 	.word	0xe000ed04

0801402c <vPortSetupTimerInterrupt>:
 801402c:	b480      	push	{r7}
 801402e:	af00      	add	r7, sp, #0
 8014030:	4b0b      	ldr	r3, [pc, #44]	; (8014060 <vPortSetupTimerInterrupt+0x34>)
 8014032:	2200      	movs	r2, #0
 8014034:	601a      	str	r2, [r3, #0]
 8014036:	4b0b      	ldr	r3, [pc, #44]	; (8014064 <vPortSetupTimerInterrupt+0x38>)
 8014038:	2200      	movs	r2, #0
 801403a:	601a      	str	r2, [r3, #0]
 801403c:	4b0a      	ldr	r3, [pc, #40]	; (8014068 <vPortSetupTimerInterrupt+0x3c>)
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	4a0a      	ldr	r2, [pc, #40]	; (801406c <vPortSetupTimerInterrupt+0x40>)
 8014042:	fba2 2303 	umull	r2, r3, r2, r3
 8014046:	099b      	lsrs	r3, r3, #6
 8014048:	4a09      	ldr	r2, [pc, #36]	; (8014070 <vPortSetupTimerInterrupt+0x44>)
 801404a:	3b01      	subs	r3, #1
 801404c:	6013      	str	r3, [r2, #0]
 801404e:	4b04      	ldr	r3, [pc, #16]	; (8014060 <vPortSetupTimerInterrupt+0x34>)
 8014050:	2207      	movs	r2, #7
 8014052:	601a      	str	r2, [r3, #0]
 8014054:	bf00      	nop
 8014056:	46bd      	mov	sp, r7
 8014058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405c:	4770      	bx	lr
 801405e:	bf00      	nop
 8014060:	e000e010 	.word	0xe000e010
 8014064:	e000e018 	.word	0xe000e018
 8014068:	20000020 	.word	0x20000020
 801406c:	10624dd3 	.word	0x10624dd3
 8014070:	e000e014 	.word	0xe000e014

08014074 <vPortEnableVFP>:
 8014074:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014084 <vPortEnableVFP+0x10>
 8014078:	6801      	ldr	r1, [r0, #0]
 801407a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801407e:	6001      	str	r1, [r0, #0]
 8014080:	4770      	bx	lr
 8014082:	bf00      	nop
 8014084:	e000ed88 	.word	0xe000ed88

08014088 <vPortValidateInterruptPriority>:
 8014088:	b480      	push	{r7}
 801408a:	b085      	sub	sp, #20
 801408c:	af00      	add	r7, sp, #0
 801408e:	f3ef 8305 	mrs	r3, IPSR
 8014092:	60fb      	str	r3, [r7, #12]
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	2b0f      	cmp	r3, #15
 8014098:	d914      	bls.n	80140c4 <vPortValidateInterruptPriority+0x3c>
 801409a:	4a17      	ldr	r2, [pc, #92]	; (80140f8 <vPortValidateInterruptPriority+0x70>)
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	4413      	add	r3, r2
 80140a0:	781b      	ldrb	r3, [r3, #0]
 80140a2:	72fb      	strb	r3, [r7, #11]
 80140a4:	4b15      	ldr	r3, [pc, #84]	; (80140fc <vPortValidateInterruptPriority+0x74>)
 80140a6:	781b      	ldrb	r3, [r3, #0]
 80140a8:	7afa      	ldrb	r2, [r7, #11]
 80140aa:	429a      	cmp	r2, r3
 80140ac:	d20a      	bcs.n	80140c4 <vPortValidateInterruptPriority+0x3c>
 80140ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140b2:	f383 8811 	msr	BASEPRI, r3
 80140b6:	f3bf 8f6f 	isb	sy
 80140ba:	f3bf 8f4f 	dsb	sy
 80140be:	607b      	str	r3, [r7, #4]
 80140c0:	bf00      	nop
 80140c2:	e7fe      	b.n	80140c2 <vPortValidateInterruptPriority+0x3a>
 80140c4:	4b0e      	ldr	r3, [pc, #56]	; (8014100 <vPortValidateInterruptPriority+0x78>)
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80140cc:	4b0d      	ldr	r3, [pc, #52]	; (8014104 <vPortValidateInterruptPriority+0x7c>)
 80140ce:	681b      	ldr	r3, [r3, #0]
 80140d0:	429a      	cmp	r2, r3
 80140d2:	d90a      	bls.n	80140ea <vPortValidateInterruptPriority+0x62>
 80140d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140d8:	f383 8811 	msr	BASEPRI, r3
 80140dc:	f3bf 8f6f 	isb	sy
 80140e0:	f3bf 8f4f 	dsb	sy
 80140e4:	603b      	str	r3, [r7, #0]
 80140e6:	bf00      	nop
 80140e8:	e7fe      	b.n	80140e8 <vPortValidateInterruptPriority+0x60>
 80140ea:	bf00      	nop
 80140ec:	3714      	adds	r7, #20
 80140ee:	46bd      	mov	sp, r7
 80140f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f4:	4770      	bx	lr
 80140f6:	bf00      	nop
 80140f8:	e000e3f0 	.word	0xe000e3f0
 80140fc:	2000227c 	.word	0x2000227c
 8014100:	e000ed0c 	.word	0xe000ed0c
 8014104:	20002280 	.word	0x20002280

08014108 <pvPortMalloc>:
 8014108:	b580      	push	{r7, lr}
 801410a:	b08a      	sub	sp, #40	; 0x28
 801410c:	af00      	add	r7, sp, #0
 801410e:	6078      	str	r0, [r7, #4]
 8014110:	2300      	movs	r3, #0
 8014112:	61fb      	str	r3, [r7, #28]
 8014114:	f7fe faea 	bl	80126ec <vTaskSuspendAll>
 8014118:	4b5d      	ldr	r3, [pc, #372]	; (8014290 <pvPortMalloc+0x188>)
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d101      	bne.n	8014124 <pvPortMalloc+0x1c>
 8014120:	f000 f924 	bl	801436c <prvHeapInit>
 8014124:	4b5b      	ldr	r3, [pc, #364]	; (8014294 <pvPortMalloc+0x18c>)
 8014126:	681a      	ldr	r2, [r3, #0]
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	4013      	ands	r3, r2
 801412c:	2b00      	cmp	r3, #0
 801412e:	f040 8093 	bne.w	8014258 <pvPortMalloc+0x150>
 8014132:	687b      	ldr	r3, [r7, #4]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d01d      	beq.n	8014174 <pvPortMalloc+0x6c>
 8014138:	2208      	movs	r2, #8
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	4413      	add	r3, r2
 801413e:	607b      	str	r3, [r7, #4]
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	f003 0307 	and.w	r3, r3, #7
 8014146:	2b00      	cmp	r3, #0
 8014148:	d014      	beq.n	8014174 <pvPortMalloc+0x6c>
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	f023 0307 	bic.w	r3, r3, #7
 8014150:	3308      	adds	r3, #8
 8014152:	607b      	str	r3, [r7, #4]
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	f003 0307 	and.w	r3, r3, #7
 801415a:	2b00      	cmp	r3, #0
 801415c:	d00a      	beq.n	8014174 <pvPortMalloc+0x6c>
 801415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014162:	f383 8811 	msr	BASEPRI, r3
 8014166:	f3bf 8f6f 	isb	sy
 801416a:	f3bf 8f4f 	dsb	sy
 801416e:	617b      	str	r3, [r7, #20]
 8014170:	bf00      	nop
 8014172:	e7fe      	b.n	8014172 <pvPortMalloc+0x6a>
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d06e      	beq.n	8014258 <pvPortMalloc+0x150>
 801417a:	4b47      	ldr	r3, [pc, #284]	; (8014298 <pvPortMalloc+0x190>)
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	687a      	ldr	r2, [r7, #4]
 8014180:	429a      	cmp	r2, r3
 8014182:	d869      	bhi.n	8014258 <pvPortMalloc+0x150>
 8014184:	4b45      	ldr	r3, [pc, #276]	; (801429c <pvPortMalloc+0x194>)
 8014186:	623b      	str	r3, [r7, #32]
 8014188:	4b44      	ldr	r3, [pc, #272]	; (801429c <pvPortMalloc+0x194>)
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	627b      	str	r3, [r7, #36]	; 0x24
 801418e:	e004      	b.n	801419a <pvPortMalloc+0x92>
 8014190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014192:	623b      	str	r3, [r7, #32]
 8014194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	627b      	str	r3, [r7, #36]	; 0x24
 801419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801419c:	685b      	ldr	r3, [r3, #4]
 801419e:	687a      	ldr	r2, [r7, #4]
 80141a0:	429a      	cmp	r2, r3
 80141a2:	d903      	bls.n	80141ac <pvPortMalloc+0xa4>
 80141a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d1f1      	bne.n	8014190 <pvPortMalloc+0x88>
 80141ac:	4b38      	ldr	r3, [pc, #224]	; (8014290 <pvPortMalloc+0x188>)
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141b2:	429a      	cmp	r2, r3
 80141b4:	d050      	beq.n	8014258 <pvPortMalloc+0x150>
 80141b6:	6a3b      	ldr	r3, [r7, #32]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	2208      	movs	r2, #8
 80141bc:	4413      	add	r3, r2
 80141be:	61fb      	str	r3, [r7, #28]
 80141c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c2:	681a      	ldr	r2, [r3, #0]
 80141c4:	6a3b      	ldr	r3, [r7, #32]
 80141c6:	601a      	str	r2, [r3, #0]
 80141c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ca:	685a      	ldr	r2, [r3, #4]
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	1ad2      	subs	r2, r2, r3
 80141d0:	2308      	movs	r3, #8
 80141d2:	005b      	lsls	r3, r3, #1
 80141d4:	429a      	cmp	r2, r3
 80141d6:	d91f      	bls.n	8014218 <pvPortMalloc+0x110>
 80141d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	4413      	add	r3, r2
 80141de:	61bb      	str	r3, [r7, #24]
 80141e0:	69bb      	ldr	r3, [r7, #24]
 80141e2:	f003 0307 	and.w	r3, r3, #7
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d00a      	beq.n	8014200 <pvPortMalloc+0xf8>
 80141ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141ee:	f383 8811 	msr	BASEPRI, r3
 80141f2:	f3bf 8f6f 	isb	sy
 80141f6:	f3bf 8f4f 	dsb	sy
 80141fa:	613b      	str	r3, [r7, #16]
 80141fc:	bf00      	nop
 80141fe:	e7fe      	b.n	80141fe <pvPortMalloc+0xf6>
 8014200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014202:	685a      	ldr	r2, [r3, #4]
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	1ad2      	subs	r2, r2, r3
 8014208:	69bb      	ldr	r3, [r7, #24]
 801420a:	605a      	str	r2, [r3, #4]
 801420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801420e:	687a      	ldr	r2, [r7, #4]
 8014210:	605a      	str	r2, [r3, #4]
 8014212:	69b8      	ldr	r0, [r7, #24]
 8014214:	f000 f90c 	bl	8014430 <prvInsertBlockIntoFreeList>
 8014218:	4b1f      	ldr	r3, [pc, #124]	; (8014298 <pvPortMalloc+0x190>)
 801421a:	681a      	ldr	r2, [r3, #0]
 801421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801421e:	685b      	ldr	r3, [r3, #4]
 8014220:	1ad3      	subs	r3, r2, r3
 8014222:	4a1d      	ldr	r2, [pc, #116]	; (8014298 <pvPortMalloc+0x190>)
 8014224:	6013      	str	r3, [r2, #0]
 8014226:	4b1c      	ldr	r3, [pc, #112]	; (8014298 <pvPortMalloc+0x190>)
 8014228:	681a      	ldr	r2, [r3, #0]
 801422a:	4b1d      	ldr	r3, [pc, #116]	; (80142a0 <pvPortMalloc+0x198>)
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	429a      	cmp	r2, r3
 8014230:	d203      	bcs.n	801423a <pvPortMalloc+0x132>
 8014232:	4b19      	ldr	r3, [pc, #100]	; (8014298 <pvPortMalloc+0x190>)
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	4a1a      	ldr	r2, [pc, #104]	; (80142a0 <pvPortMalloc+0x198>)
 8014238:	6013      	str	r3, [r2, #0]
 801423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801423c:	685a      	ldr	r2, [r3, #4]
 801423e:	4b15      	ldr	r3, [pc, #84]	; (8014294 <pvPortMalloc+0x18c>)
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	431a      	orrs	r2, r3
 8014244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014246:	605a      	str	r2, [r3, #4]
 8014248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801424a:	2200      	movs	r2, #0
 801424c:	601a      	str	r2, [r3, #0]
 801424e:	4b15      	ldr	r3, [pc, #84]	; (80142a4 <pvPortMalloc+0x19c>)
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	3301      	adds	r3, #1
 8014254:	4a13      	ldr	r2, [pc, #76]	; (80142a4 <pvPortMalloc+0x19c>)
 8014256:	6013      	str	r3, [r2, #0]
 8014258:	f7fe fa56 	bl	8012708 <xTaskResumeAll>
 801425c:	69fb      	ldr	r3, [r7, #28]
 801425e:	2b00      	cmp	r3, #0
 8014260:	d101      	bne.n	8014266 <pvPortMalloc+0x15e>
 8014262:	f7f5 f91b 	bl	800949c <vApplicationMallocFailedHook>
 8014266:	69fb      	ldr	r3, [r7, #28]
 8014268:	f003 0307 	and.w	r3, r3, #7
 801426c:	2b00      	cmp	r3, #0
 801426e:	d00a      	beq.n	8014286 <pvPortMalloc+0x17e>
 8014270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014274:	f383 8811 	msr	BASEPRI, r3
 8014278:	f3bf 8f6f 	isb	sy
 801427c:	f3bf 8f4f 	dsb	sy
 8014280:	60fb      	str	r3, [r7, #12]
 8014282:	bf00      	nop
 8014284:	e7fe      	b.n	8014284 <pvPortMalloc+0x17c>
 8014286:	69fb      	ldr	r3, [r7, #28]
 8014288:	4618      	mov	r0, r3
 801428a:	3728      	adds	r7, #40	; 0x28
 801428c:	46bd      	mov	sp, r7
 801428e:	bd80      	pop	{r7, pc}
 8014290:	2000a28c 	.word	0x2000a28c
 8014294:	2000a2a0 	.word	0x2000a2a0
 8014298:	2000a290 	.word	0x2000a290
 801429c:	2000a284 	.word	0x2000a284
 80142a0:	2000a294 	.word	0x2000a294
 80142a4:	2000a298 	.word	0x2000a298

080142a8 <vPortFree>:
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b086      	sub	sp, #24
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	617b      	str	r3, [r7, #20]
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d04d      	beq.n	8014356 <vPortFree+0xae>
 80142ba:	2308      	movs	r3, #8
 80142bc:	425b      	negs	r3, r3
 80142be:	697a      	ldr	r2, [r7, #20]
 80142c0:	4413      	add	r3, r2
 80142c2:	617b      	str	r3, [r7, #20]
 80142c4:	697b      	ldr	r3, [r7, #20]
 80142c6:	613b      	str	r3, [r7, #16]
 80142c8:	693b      	ldr	r3, [r7, #16]
 80142ca:	685a      	ldr	r2, [r3, #4]
 80142cc:	4b24      	ldr	r3, [pc, #144]	; (8014360 <vPortFree+0xb8>)
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	4013      	ands	r3, r2
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d10a      	bne.n	80142ec <vPortFree+0x44>
 80142d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142da:	f383 8811 	msr	BASEPRI, r3
 80142de:	f3bf 8f6f 	isb	sy
 80142e2:	f3bf 8f4f 	dsb	sy
 80142e6:	60fb      	str	r3, [r7, #12]
 80142e8:	bf00      	nop
 80142ea:	e7fe      	b.n	80142ea <vPortFree+0x42>
 80142ec:	693b      	ldr	r3, [r7, #16]
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d00a      	beq.n	801430a <vPortFree+0x62>
 80142f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f8:	f383 8811 	msr	BASEPRI, r3
 80142fc:	f3bf 8f6f 	isb	sy
 8014300:	f3bf 8f4f 	dsb	sy
 8014304:	60bb      	str	r3, [r7, #8]
 8014306:	bf00      	nop
 8014308:	e7fe      	b.n	8014308 <vPortFree+0x60>
 801430a:	693b      	ldr	r3, [r7, #16]
 801430c:	685a      	ldr	r2, [r3, #4]
 801430e:	4b14      	ldr	r3, [pc, #80]	; (8014360 <vPortFree+0xb8>)
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	4013      	ands	r3, r2
 8014314:	2b00      	cmp	r3, #0
 8014316:	d01e      	beq.n	8014356 <vPortFree+0xae>
 8014318:	693b      	ldr	r3, [r7, #16]
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d11a      	bne.n	8014356 <vPortFree+0xae>
 8014320:	693b      	ldr	r3, [r7, #16]
 8014322:	685a      	ldr	r2, [r3, #4]
 8014324:	4b0e      	ldr	r3, [pc, #56]	; (8014360 <vPortFree+0xb8>)
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	43db      	mvns	r3, r3
 801432a:	401a      	ands	r2, r3
 801432c:	693b      	ldr	r3, [r7, #16]
 801432e:	605a      	str	r2, [r3, #4]
 8014330:	f7fe f9dc 	bl	80126ec <vTaskSuspendAll>
 8014334:	693b      	ldr	r3, [r7, #16]
 8014336:	685a      	ldr	r2, [r3, #4]
 8014338:	4b0a      	ldr	r3, [pc, #40]	; (8014364 <vPortFree+0xbc>)
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	4413      	add	r3, r2
 801433e:	4a09      	ldr	r2, [pc, #36]	; (8014364 <vPortFree+0xbc>)
 8014340:	6013      	str	r3, [r2, #0]
 8014342:	6938      	ldr	r0, [r7, #16]
 8014344:	f000 f874 	bl	8014430 <prvInsertBlockIntoFreeList>
 8014348:	4b07      	ldr	r3, [pc, #28]	; (8014368 <vPortFree+0xc0>)
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	3301      	adds	r3, #1
 801434e:	4a06      	ldr	r2, [pc, #24]	; (8014368 <vPortFree+0xc0>)
 8014350:	6013      	str	r3, [r2, #0]
 8014352:	f7fe f9d9 	bl	8012708 <xTaskResumeAll>
 8014356:	bf00      	nop
 8014358:	3718      	adds	r7, #24
 801435a:	46bd      	mov	sp, r7
 801435c:	bd80      	pop	{r7, pc}
 801435e:	bf00      	nop
 8014360:	2000a2a0 	.word	0x2000a2a0
 8014364:	2000a290 	.word	0x2000a290
 8014368:	2000a29c 	.word	0x2000a29c

0801436c <prvHeapInit>:
 801436c:	b480      	push	{r7}
 801436e:	b085      	sub	sp, #20
 8014370:	af00      	add	r7, sp, #0
 8014372:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014376:	60bb      	str	r3, [r7, #8]
 8014378:	4b27      	ldr	r3, [pc, #156]	; (8014418 <prvHeapInit+0xac>)
 801437a:	60fb      	str	r3, [r7, #12]
 801437c:	68fb      	ldr	r3, [r7, #12]
 801437e:	f003 0307 	and.w	r3, r3, #7
 8014382:	2b00      	cmp	r3, #0
 8014384:	d00c      	beq.n	80143a0 <prvHeapInit+0x34>
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	3307      	adds	r3, #7
 801438a:	60fb      	str	r3, [r7, #12]
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	f023 0307 	bic.w	r3, r3, #7
 8014392:	60fb      	str	r3, [r7, #12]
 8014394:	68ba      	ldr	r2, [r7, #8]
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	1ad3      	subs	r3, r2, r3
 801439a:	4a1f      	ldr	r2, [pc, #124]	; (8014418 <prvHeapInit+0xac>)
 801439c:	4413      	add	r3, r2
 801439e:	60bb      	str	r3, [r7, #8]
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	607b      	str	r3, [r7, #4]
 80143a4:	4a1d      	ldr	r2, [pc, #116]	; (801441c <prvHeapInit+0xb0>)
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	6013      	str	r3, [r2, #0]
 80143aa:	4b1c      	ldr	r3, [pc, #112]	; (801441c <prvHeapInit+0xb0>)
 80143ac:	2200      	movs	r2, #0
 80143ae:	605a      	str	r2, [r3, #4]
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	68ba      	ldr	r2, [r7, #8]
 80143b4:	4413      	add	r3, r2
 80143b6:	60fb      	str	r3, [r7, #12]
 80143b8:	2208      	movs	r2, #8
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	1a9b      	subs	r3, r3, r2
 80143be:	60fb      	str	r3, [r7, #12]
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	f023 0307 	bic.w	r3, r3, #7
 80143c6:	60fb      	str	r3, [r7, #12]
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	4a15      	ldr	r2, [pc, #84]	; (8014420 <prvHeapInit+0xb4>)
 80143cc:	6013      	str	r3, [r2, #0]
 80143ce:	4b14      	ldr	r3, [pc, #80]	; (8014420 <prvHeapInit+0xb4>)
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	2200      	movs	r2, #0
 80143d4:	605a      	str	r2, [r3, #4]
 80143d6:	4b12      	ldr	r3, [pc, #72]	; (8014420 <prvHeapInit+0xb4>)
 80143d8:	681b      	ldr	r3, [r3, #0]
 80143da:	2200      	movs	r2, #0
 80143dc:	601a      	str	r2, [r3, #0]
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	603b      	str	r3, [r7, #0]
 80143e2:	683b      	ldr	r3, [r7, #0]
 80143e4:	68fa      	ldr	r2, [r7, #12]
 80143e6:	1ad2      	subs	r2, r2, r3
 80143e8:	683b      	ldr	r3, [r7, #0]
 80143ea:	605a      	str	r2, [r3, #4]
 80143ec:	4b0c      	ldr	r3, [pc, #48]	; (8014420 <prvHeapInit+0xb4>)
 80143ee:	681a      	ldr	r2, [r3, #0]
 80143f0:	683b      	ldr	r3, [r7, #0]
 80143f2:	601a      	str	r2, [r3, #0]
 80143f4:	683b      	ldr	r3, [r7, #0]
 80143f6:	685b      	ldr	r3, [r3, #4]
 80143f8:	4a0a      	ldr	r2, [pc, #40]	; (8014424 <prvHeapInit+0xb8>)
 80143fa:	6013      	str	r3, [r2, #0]
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	685b      	ldr	r3, [r3, #4]
 8014400:	4a09      	ldr	r2, [pc, #36]	; (8014428 <prvHeapInit+0xbc>)
 8014402:	6013      	str	r3, [r2, #0]
 8014404:	4b09      	ldr	r3, [pc, #36]	; (801442c <prvHeapInit+0xc0>)
 8014406:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801440a:	601a      	str	r2, [r3, #0]
 801440c:	bf00      	nop
 801440e:	3714      	adds	r7, #20
 8014410:	46bd      	mov	sp, r7
 8014412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014416:	4770      	bx	lr
 8014418:	20002284 	.word	0x20002284
 801441c:	2000a284 	.word	0x2000a284
 8014420:	2000a28c 	.word	0x2000a28c
 8014424:	2000a294 	.word	0x2000a294
 8014428:	2000a290 	.word	0x2000a290
 801442c:	2000a2a0 	.word	0x2000a2a0

08014430 <prvInsertBlockIntoFreeList>:
 8014430:	b480      	push	{r7}
 8014432:	b085      	sub	sp, #20
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
 8014438:	4b28      	ldr	r3, [pc, #160]	; (80144dc <prvInsertBlockIntoFreeList+0xac>)
 801443a:	60fb      	str	r3, [r7, #12]
 801443c:	e002      	b.n	8014444 <prvInsertBlockIntoFreeList+0x14>
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	60fb      	str	r3, [r7, #12]
 8014444:	68fb      	ldr	r3, [r7, #12]
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	687a      	ldr	r2, [r7, #4]
 801444a:	429a      	cmp	r2, r3
 801444c:	d8f7      	bhi.n	801443e <prvInsertBlockIntoFreeList+0xe>
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	60bb      	str	r3, [r7, #8]
 8014452:	68fb      	ldr	r3, [r7, #12]
 8014454:	685b      	ldr	r3, [r3, #4]
 8014456:	68ba      	ldr	r2, [r7, #8]
 8014458:	4413      	add	r3, r2
 801445a:	687a      	ldr	r2, [r7, #4]
 801445c:	429a      	cmp	r2, r3
 801445e:	d108      	bne.n	8014472 <prvInsertBlockIntoFreeList+0x42>
 8014460:	68fb      	ldr	r3, [r7, #12]
 8014462:	685a      	ldr	r2, [r3, #4]
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	685b      	ldr	r3, [r3, #4]
 8014468:	441a      	add	r2, r3
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	605a      	str	r2, [r3, #4]
 801446e:	68fb      	ldr	r3, [r7, #12]
 8014470:	607b      	str	r3, [r7, #4]
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	60bb      	str	r3, [r7, #8]
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	685b      	ldr	r3, [r3, #4]
 801447a:	68ba      	ldr	r2, [r7, #8]
 801447c:	441a      	add	r2, r3
 801447e:	68fb      	ldr	r3, [r7, #12]
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	429a      	cmp	r2, r3
 8014484:	d118      	bne.n	80144b8 <prvInsertBlockIntoFreeList+0x88>
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	681a      	ldr	r2, [r3, #0]
 801448a:	4b15      	ldr	r3, [pc, #84]	; (80144e0 <prvInsertBlockIntoFreeList+0xb0>)
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	429a      	cmp	r2, r3
 8014490:	d00d      	beq.n	80144ae <prvInsertBlockIntoFreeList+0x7e>
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	685a      	ldr	r2, [r3, #4]
 8014496:	68fb      	ldr	r3, [r7, #12]
 8014498:	681b      	ldr	r3, [r3, #0]
 801449a:	685b      	ldr	r3, [r3, #4]
 801449c:	441a      	add	r2, r3
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	605a      	str	r2, [r3, #4]
 80144a2:	68fb      	ldr	r3, [r7, #12]
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	681a      	ldr	r2, [r3, #0]
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	601a      	str	r2, [r3, #0]
 80144ac:	e008      	b.n	80144c0 <prvInsertBlockIntoFreeList+0x90>
 80144ae:	4b0c      	ldr	r3, [pc, #48]	; (80144e0 <prvInsertBlockIntoFreeList+0xb0>)
 80144b0:	681a      	ldr	r2, [r3, #0]
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	601a      	str	r2, [r3, #0]
 80144b6:	e003      	b.n	80144c0 <prvInsertBlockIntoFreeList+0x90>
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	681a      	ldr	r2, [r3, #0]
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	601a      	str	r2, [r3, #0]
 80144c0:	68fa      	ldr	r2, [r7, #12]
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	429a      	cmp	r2, r3
 80144c6:	d002      	beq.n	80144ce <prvInsertBlockIntoFreeList+0x9e>
 80144c8:	68fb      	ldr	r3, [r7, #12]
 80144ca:	687a      	ldr	r2, [r7, #4]
 80144cc:	601a      	str	r2, [r3, #0]
 80144ce:	bf00      	nop
 80144d0:	3714      	adds	r7, #20
 80144d2:	46bd      	mov	sp, r7
 80144d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d8:	4770      	bx	lr
 80144da:	bf00      	nop
 80144dc:	2000a284 	.word	0x2000a284
 80144e0:	2000a28c 	.word	0x2000a28c

080144e4 <__cxa_guard_acquire>:
 80144e4:	6803      	ldr	r3, [r0, #0]
 80144e6:	07db      	lsls	r3, r3, #31
 80144e8:	d406      	bmi.n	80144f8 <__cxa_guard_acquire+0x14>
 80144ea:	7843      	ldrb	r3, [r0, #1]
 80144ec:	b103      	cbz	r3, 80144f0 <__cxa_guard_acquire+0xc>
 80144ee:	deff      	udf	#255	; 0xff
 80144f0:	2301      	movs	r3, #1
 80144f2:	7043      	strb	r3, [r0, #1]
 80144f4:	4618      	mov	r0, r3
 80144f6:	4770      	bx	lr
 80144f8:	2000      	movs	r0, #0
 80144fa:	4770      	bx	lr

080144fc <__cxa_guard_release>:
 80144fc:	2301      	movs	r3, #1
 80144fe:	6003      	str	r3, [r0, #0]
 8014500:	4770      	bx	lr

08014502 <_ZSt25__throw_bad_function_callv>:
 8014502:	b508      	push	{r3, lr}
 8014504:	f000 f824 	bl	8014550 <abort>

08014508 <roundf>:
 8014508:	ee10 0a10 	vmov	r0, s0
 801450c:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8014510:	3a7f      	subs	r2, #127	; 0x7f
 8014512:	2a16      	cmp	r2, #22
 8014514:	dc15      	bgt.n	8014542 <roundf+0x3a>
 8014516:	2a00      	cmp	r2, #0
 8014518:	da08      	bge.n	801452c <roundf+0x24>
 801451a:	3201      	adds	r2, #1
 801451c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8014520:	d101      	bne.n	8014526 <roundf+0x1e>
 8014522:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8014526:	ee00 3a10 	vmov	s0, r3
 801452a:	4770      	bx	lr
 801452c:	4907      	ldr	r1, [pc, #28]	; (801454c <roundf+0x44>)
 801452e:	4111      	asrs	r1, r2
 8014530:	4208      	tst	r0, r1
 8014532:	d0fa      	beq.n	801452a <roundf+0x22>
 8014534:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8014538:	4113      	asrs	r3, r2
 801453a:	4403      	add	r3, r0
 801453c:	ea23 0301 	bic.w	r3, r3, r1
 8014540:	e7f1      	b.n	8014526 <roundf+0x1e>
 8014542:	2a80      	cmp	r2, #128	; 0x80
 8014544:	d1f1      	bne.n	801452a <roundf+0x22>
 8014546:	ee30 0a00 	vadd.f32	s0, s0, s0
 801454a:	4770      	bx	lr
 801454c:	007fffff 	.word	0x007fffff

08014550 <abort>:
 8014550:	b508      	push	{r3, lr}
 8014552:	2006      	movs	r0, #6
 8014554:	f000 ff38 	bl	80153c8 <raise>
 8014558:	2001      	movs	r0, #1
 801455a:	f7f5 fc09 	bl	8009d70 <_exit>

0801455e <atexit>:
 801455e:	2300      	movs	r3, #0
 8014560:	4601      	mov	r1, r0
 8014562:	461a      	mov	r2, r3
 8014564:	4618      	mov	r0, r3
 8014566:	f000 bfa1 	b.w	80154ac <__register_exitproc>
	...

0801456c <__errno>:
 801456c:	4b01      	ldr	r3, [pc, #4]	; (8014574 <__errno+0x8>)
 801456e:	6818      	ldr	r0, [r3, #0]
 8014570:	4770      	bx	lr
 8014572:	bf00      	nop
 8014574:	20000030 	.word	0x20000030

08014578 <std>:
 8014578:	2300      	movs	r3, #0
 801457a:	b510      	push	{r4, lr}
 801457c:	4604      	mov	r4, r0
 801457e:	e9c0 3300 	strd	r3, r3, [r0]
 8014582:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014586:	6083      	str	r3, [r0, #8]
 8014588:	8181      	strh	r1, [r0, #12]
 801458a:	6643      	str	r3, [r0, #100]	; 0x64
 801458c:	81c2      	strh	r2, [r0, #14]
 801458e:	6183      	str	r3, [r0, #24]
 8014590:	4619      	mov	r1, r3
 8014592:	2208      	movs	r2, #8
 8014594:	305c      	adds	r0, #92	; 0x5c
 8014596:	f000 f923 	bl	80147e0 <memset>
 801459a:	4b05      	ldr	r3, [pc, #20]	; (80145b0 <std+0x38>)
 801459c:	6263      	str	r3, [r4, #36]	; 0x24
 801459e:	4b05      	ldr	r3, [pc, #20]	; (80145b4 <std+0x3c>)
 80145a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80145a2:	4b05      	ldr	r3, [pc, #20]	; (80145b8 <std+0x40>)
 80145a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80145a6:	4b05      	ldr	r3, [pc, #20]	; (80145bc <std+0x44>)
 80145a8:	6224      	str	r4, [r4, #32]
 80145aa:	6323      	str	r3, [r4, #48]	; 0x30
 80145ac:	bd10      	pop	{r4, pc}
 80145ae:	bf00      	nop
 80145b0:	08015401 	.word	0x08015401
 80145b4:	08015423 	.word	0x08015423
 80145b8:	0801545b 	.word	0x0801545b
 80145bc:	0801547f 	.word	0x0801547f

080145c0 <_cleanup_r>:
 80145c0:	4901      	ldr	r1, [pc, #4]	; (80145c8 <_cleanup_r+0x8>)
 80145c2:	f000 b8af 	b.w	8014724 <_fwalk_reent>
 80145c6:	bf00      	nop
 80145c8:	08016391 	.word	0x08016391

080145cc <__sfmoreglue>:
 80145cc:	b570      	push	{r4, r5, r6, lr}
 80145ce:	2268      	movs	r2, #104	; 0x68
 80145d0:	1e4d      	subs	r5, r1, #1
 80145d2:	4355      	muls	r5, r2
 80145d4:	460e      	mov	r6, r1
 80145d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80145da:	f000 f975 	bl	80148c8 <_malloc_r>
 80145de:	4604      	mov	r4, r0
 80145e0:	b140      	cbz	r0, 80145f4 <__sfmoreglue+0x28>
 80145e2:	2100      	movs	r1, #0
 80145e4:	e9c0 1600 	strd	r1, r6, [r0]
 80145e8:	300c      	adds	r0, #12
 80145ea:	60a0      	str	r0, [r4, #8]
 80145ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80145f0:	f000 f8f6 	bl	80147e0 <memset>
 80145f4:	4620      	mov	r0, r4
 80145f6:	bd70      	pop	{r4, r5, r6, pc}

080145f8 <__sfp_lock_acquire>:
 80145f8:	4801      	ldr	r0, [pc, #4]	; (8014600 <__sfp_lock_acquire+0x8>)
 80145fa:	f000 b8d8 	b.w	80147ae <__retarget_lock_acquire_recursive>
 80145fe:	bf00      	nop
 8014600:	2000a2a6 	.word	0x2000a2a6

08014604 <__sfp_lock_release>:
 8014604:	4801      	ldr	r0, [pc, #4]	; (801460c <__sfp_lock_release+0x8>)
 8014606:	f000 b8d4 	b.w	80147b2 <__retarget_lock_release_recursive>
 801460a:	bf00      	nop
 801460c:	2000a2a6 	.word	0x2000a2a6

08014610 <__sinit_lock_acquire>:
 8014610:	4801      	ldr	r0, [pc, #4]	; (8014618 <__sinit_lock_acquire+0x8>)
 8014612:	f000 b8cc 	b.w	80147ae <__retarget_lock_acquire_recursive>
 8014616:	bf00      	nop
 8014618:	2000a2a7 	.word	0x2000a2a7

0801461c <__sinit_lock_release>:
 801461c:	4801      	ldr	r0, [pc, #4]	; (8014624 <__sinit_lock_release+0x8>)
 801461e:	f000 b8c8 	b.w	80147b2 <__retarget_lock_release_recursive>
 8014622:	bf00      	nop
 8014624:	2000a2a7 	.word	0x2000a2a7

08014628 <__sinit>:
 8014628:	b510      	push	{r4, lr}
 801462a:	4604      	mov	r4, r0
 801462c:	f7ff fff0 	bl	8014610 <__sinit_lock_acquire>
 8014630:	69a3      	ldr	r3, [r4, #24]
 8014632:	b11b      	cbz	r3, 801463c <__sinit+0x14>
 8014634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014638:	f7ff bff0 	b.w	801461c <__sinit_lock_release>
 801463c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014640:	6523      	str	r3, [r4, #80]	; 0x50
 8014642:	4b13      	ldr	r3, [pc, #76]	; (8014690 <__sinit+0x68>)
 8014644:	4a13      	ldr	r2, [pc, #76]	; (8014694 <__sinit+0x6c>)
 8014646:	681b      	ldr	r3, [r3, #0]
 8014648:	62a2      	str	r2, [r4, #40]	; 0x28
 801464a:	42a3      	cmp	r3, r4
 801464c:	bf04      	itt	eq
 801464e:	2301      	moveq	r3, #1
 8014650:	61a3      	streq	r3, [r4, #24]
 8014652:	4620      	mov	r0, r4
 8014654:	f000 f820 	bl	8014698 <__sfp>
 8014658:	6060      	str	r0, [r4, #4]
 801465a:	4620      	mov	r0, r4
 801465c:	f000 f81c 	bl	8014698 <__sfp>
 8014660:	60a0      	str	r0, [r4, #8]
 8014662:	4620      	mov	r0, r4
 8014664:	f000 f818 	bl	8014698 <__sfp>
 8014668:	2200      	movs	r2, #0
 801466a:	60e0      	str	r0, [r4, #12]
 801466c:	2104      	movs	r1, #4
 801466e:	6860      	ldr	r0, [r4, #4]
 8014670:	f7ff ff82 	bl	8014578 <std>
 8014674:	68a0      	ldr	r0, [r4, #8]
 8014676:	2201      	movs	r2, #1
 8014678:	2109      	movs	r1, #9
 801467a:	f7ff ff7d 	bl	8014578 <std>
 801467e:	68e0      	ldr	r0, [r4, #12]
 8014680:	2202      	movs	r2, #2
 8014682:	2112      	movs	r1, #18
 8014684:	f7ff ff78 	bl	8014578 <std>
 8014688:	2301      	movs	r3, #1
 801468a:	61a3      	str	r3, [r4, #24]
 801468c:	e7d2      	b.n	8014634 <__sinit+0xc>
 801468e:	bf00      	nop
 8014690:	08017770 	.word	0x08017770
 8014694:	080145c1 	.word	0x080145c1

08014698 <__sfp>:
 8014698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801469a:	4607      	mov	r7, r0
 801469c:	f7ff ffac 	bl	80145f8 <__sfp_lock_acquire>
 80146a0:	4b1e      	ldr	r3, [pc, #120]	; (801471c <__sfp+0x84>)
 80146a2:	681e      	ldr	r6, [r3, #0]
 80146a4:	69b3      	ldr	r3, [r6, #24]
 80146a6:	b913      	cbnz	r3, 80146ae <__sfp+0x16>
 80146a8:	4630      	mov	r0, r6
 80146aa:	f7ff ffbd 	bl	8014628 <__sinit>
 80146ae:	3648      	adds	r6, #72	; 0x48
 80146b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80146b4:	3b01      	subs	r3, #1
 80146b6:	d503      	bpl.n	80146c0 <__sfp+0x28>
 80146b8:	6833      	ldr	r3, [r6, #0]
 80146ba:	b30b      	cbz	r3, 8014700 <__sfp+0x68>
 80146bc:	6836      	ldr	r6, [r6, #0]
 80146be:	e7f7      	b.n	80146b0 <__sfp+0x18>
 80146c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80146c4:	b9d5      	cbnz	r5, 80146fc <__sfp+0x64>
 80146c6:	4b16      	ldr	r3, [pc, #88]	; (8014720 <__sfp+0x88>)
 80146c8:	60e3      	str	r3, [r4, #12]
 80146ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80146ce:	6665      	str	r5, [r4, #100]	; 0x64
 80146d0:	f000 f86c 	bl	80147ac <__retarget_lock_init_recursive>
 80146d4:	f7ff ff96 	bl	8014604 <__sfp_lock_release>
 80146d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80146dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80146e0:	6025      	str	r5, [r4, #0]
 80146e2:	61a5      	str	r5, [r4, #24]
 80146e4:	2208      	movs	r2, #8
 80146e6:	4629      	mov	r1, r5
 80146e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80146ec:	f000 f878 	bl	80147e0 <memset>
 80146f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80146f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80146f8:	4620      	mov	r0, r4
 80146fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146fc:	3468      	adds	r4, #104	; 0x68
 80146fe:	e7d9      	b.n	80146b4 <__sfp+0x1c>
 8014700:	2104      	movs	r1, #4
 8014702:	4638      	mov	r0, r7
 8014704:	f7ff ff62 	bl	80145cc <__sfmoreglue>
 8014708:	4604      	mov	r4, r0
 801470a:	6030      	str	r0, [r6, #0]
 801470c:	2800      	cmp	r0, #0
 801470e:	d1d5      	bne.n	80146bc <__sfp+0x24>
 8014710:	f7ff ff78 	bl	8014604 <__sfp_lock_release>
 8014714:	230c      	movs	r3, #12
 8014716:	603b      	str	r3, [r7, #0]
 8014718:	e7ee      	b.n	80146f8 <__sfp+0x60>
 801471a:	bf00      	nop
 801471c:	08017770 	.word	0x08017770
 8014720:	ffff0001 	.word	0xffff0001

08014724 <_fwalk_reent>:
 8014724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014728:	4606      	mov	r6, r0
 801472a:	4688      	mov	r8, r1
 801472c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014730:	2700      	movs	r7, #0
 8014732:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014736:	f1b9 0901 	subs.w	r9, r9, #1
 801473a:	d505      	bpl.n	8014748 <_fwalk_reent+0x24>
 801473c:	6824      	ldr	r4, [r4, #0]
 801473e:	2c00      	cmp	r4, #0
 8014740:	d1f7      	bne.n	8014732 <_fwalk_reent+0xe>
 8014742:	4638      	mov	r0, r7
 8014744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014748:	89ab      	ldrh	r3, [r5, #12]
 801474a:	2b01      	cmp	r3, #1
 801474c:	d907      	bls.n	801475e <_fwalk_reent+0x3a>
 801474e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014752:	3301      	adds	r3, #1
 8014754:	d003      	beq.n	801475e <_fwalk_reent+0x3a>
 8014756:	4629      	mov	r1, r5
 8014758:	4630      	mov	r0, r6
 801475a:	47c0      	blx	r8
 801475c:	4307      	orrs	r7, r0
 801475e:	3568      	adds	r5, #104	; 0x68
 8014760:	e7e9      	b.n	8014736 <_fwalk_reent+0x12>
	...

08014764 <__libc_init_array>:
 8014764:	b570      	push	{r4, r5, r6, lr}
 8014766:	4d0d      	ldr	r5, [pc, #52]	; (801479c <__libc_init_array+0x38>)
 8014768:	4c0d      	ldr	r4, [pc, #52]	; (80147a0 <__libc_init_array+0x3c>)
 801476a:	1b64      	subs	r4, r4, r5
 801476c:	10a4      	asrs	r4, r4, #2
 801476e:	2600      	movs	r6, #0
 8014770:	42a6      	cmp	r6, r4
 8014772:	d109      	bne.n	8014788 <__libc_init_array+0x24>
 8014774:	4d0b      	ldr	r5, [pc, #44]	; (80147a4 <__libc_init_array+0x40>)
 8014776:	4c0c      	ldr	r4, [pc, #48]	; (80147a8 <__libc_init_array+0x44>)
 8014778:	f002 fd06 	bl	8017188 <_init>
 801477c:	1b64      	subs	r4, r4, r5
 801477e:	10a4      	asrs	r4, r4, #2
 8014780:	2600      	movs	r6, #0
 8014782:	42a6      	cmp	r6, r4
 8014784:	d105      	bne.n	8014792 <__libc_init_array+0x2e>
 8014786:	bd70      	pop	{r4, r5, r6, pc}
 8014788:	f855 3b04 	ldr.w	r3, [r5], #4
 801478c:	4798      	blx	r3
 801478e:	3601      	adds	r6, #1
 8014790:	e7ee      	b.n	8014770 <__libc_init_array+0xc>
 8014792:	f855 3b04 	ldr.w	r3, [r5], #4
 8014796:	4798      	blx	r3
 8014798:	3601      	adds	r6, #1
 801479a:	e7f2      	b.n	8014782 <__libc_init_array+0x1e>
 801479c:	08017af4 	.word	0x08017af4
 80147a0:	08017af4 	.word	0x08017af4
 80147a4:	08017af4 	.word	0x08017af4
 80147a8:	08017b20 	.word	0x08017b20

080147ac <__retarget_lock_init_recursive>:
 80147ac:	4770      	bx	lr

080147ae <__retarget_lock_acquire_recursive>:
 80147ae:	4770      	bx	lr

080147b0 <__retarget_lock_release>:
 80147b0:	4770      	bx	lr

080147b2 <__retarget_lock_release_recursive>:
 80147b2:	4770      	bx	lr

080147b4 <malloc>:
 80147b4:	4b02      	ldr	r3, [pc, #8]	; (80147c0 <malloc+0xc>)
 80147b6:	4601      	mov	r1, r0
 80147b8:	6818      	ldr	r0, [r3, #0]
 80147ba:	f000 b885 	b.w	80148c8 <_malloc_r>
 80147be:	bf00      	nop
 80147c0:	20000030 	.word	0x20000030

080147c4 <memcpy>:
 80147c4:	440a      	add	r2, r1
 80147c6:	4291      	cmp	r1, r2
 80147c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80147cc:	d100      	bne.n	80147d0 <memcpy+0xc>
 80147ce:	4770      	bx	lr
 80147d0:	b510      	push	{r4, lr}
 80147d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80147d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80147da:	4291      	cmp	r1, r2
 80147dc:	d1f9      	bne.n	80147d2 <memcpy+0xe>
 80147de:	bd10      	pop	{r4, pc}

080147e0 <memset>:
 80147e0:	4402      	add	r2, r0
 80147e2:	4603      	mov	r3, r0
 80147e4:	4293      	cmp	r3, r2
 80147e6:	d100      	bne.n	80147ea <memset+0xa>
 80147e8:	4770      	bx	lr
 80147ea:	f803 1b01 	strb.w	r1, [r3], #1
 80147ee:	e7f9      	b.n	80147e4 <memset+0x4>

080147f0 <_free_r>:
 80147f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80147f2:	2900      	cmp	r1, #0
 80147f4:	d044      	beq.n	8014880 <_free_r+0x90>
 80147f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80147fa:	9001      	str	r0, [sp, #4]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	f1a1 0404 	sub.w	r4, r1, #4
 8014802:	bfb8      	it	lt
 8014804:	18e4      	addlt	r4, r4, r3
 8014806:	f001 fe15 	bl	8016434 <__malloc_lock>
 801480a:	4a1e      	ldr	r2, [pc, #120]	; (8014884 <_free_r+0x94>)
 801480c:	9801      	ldr	r0, [sp, #4]
 801480e:	6813      	ldr	r3, [r2, #0]
 8014810:	b933      	cbnz	r3, 8014820 <_free_r+0x30>
 8014812:	6063      	str	r3, [r4, #4]
 8014814:	6014      	str	r4, [r2, #0]
 8014816:	b003      	add	sp, #12
 8014818:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801481c:	f001 be10 	b.w	8016440 <__malloc_unlock>
 8014820:	42a3      	cmp	r3, r4
 8014822:	d908      	bls.n	8014836 <_free_r+0x46>
 8014824:	6825      	ldr	r5, [r4, #0]
 8014826:	1961      	adds	r1, r4, r5
 8014828:	428b      	cmp	r3, r1
 801482a:	bf01      	itttt	eq
 801482c:	6819      	ldreq	r1, [r3, #0]
 801482e:	685b      	ldreq	r3, [r3, #4]
 8014830:	1949      	addeq	r1, r1, r5
 8014832:	6021      	streq	r1, [r4, #0]
 8014834:	e7ed      	b.n	8014812 <_free_r+0x22>
 8014836:	461a      	mov	r2, r3
 8014838:	685b      	ldr	r3, [r3, #4]
 801483a:	b10b      	cbz	r3, 8014840 <_free_r+0x50>
 801483c:	42a3      	cmp	r3, r4
 801483e:	d9fa      	bls.n	8014836 <_free_r+0x46>
 8014840:	6811      	ldr	r1, [r2, #0]
 8014842:	1855      	adds	r5, r2, r1
 8014844:	42a5      	cmp	r5, r4
 8014846:	d10b      	bne.n	8014860 <_free_r+0x70>
 8014848:	6824      	ldr	r4, [r4, #0]
 801484a:	4421      	add	r1, r4
 801484c:	1854      	adds	r4, r2, r1
 801484e:	42a3      	cmp	r3, r4
 8014850:	6011      	str	r1, [r2, #0]
 8014852:	d1e0      	bne.n	8014816 <_free_r+0x26>
 8014854:	681c      	ldr	r4, [r3, #0]
 8014856:	685b      	ldr	r3, [r3, #4]
 8014858:	6053      	str	r3, [r2, #4]
 801485a:	4421      	add	r1, r4
 801485c:	6011      	str	r1, [r2, #0]
 801485e:	e7da      	b.n	8014816 <_free_r+0x26>
 8014860:	d902      	bls.n	8014868 <_free_r+0x78>
 8014862:	230c      	movs	r3, #12
 8014864:	6003      	str	r3, [r0, #0]
 8014866:	e7d6      	b.n	8014816 <_free_r+0x26>
 8014868:	6825      	ldr	r5, [r4, #0]
 801486a:	1961      	adds	r1, r4, r5
 801486c:	428b      	cmp	r3, r1
 801486e:	bf04      	itt	eq
 8014870:	6819      	ldreq	r1, [r3, #0]
 8014872:	685b      	ldreq	r3, [r3, #4]
 8014874:	6063      	str	r3, [r4, #4]
 8014876:	bf04      	itt	eq
 8014878:	1949      	addeq	r1, r1, r5
 801487a:	6021      	streq	r1, [r4, #0]
 801487c:	6054      	str	r4, [r2, #4]
 801487e:	e7ca      	b.n	8014816 <_free_r+0x26>
 8014880:	b003      	add	sp, #12
 8014882:	bd30      	pop	{r4, r5, pc}
 8014884:	2000a2a8 	.word	0x2000a2a8

08014888 <sbrk_aligned>:
 8014888:	b570      	push	{r4, r5, r6, lr}
 801488a:	4e0e      	ldr	r6, [pc, #56]	; (80148c4 <sbrk_aligned+0x3c>)
 801488c:	460c      	mov	r4, r1
 801488e:	6831      	ldr	r1, [r6, #0]
 8014890:	4605      	mov	r5, r0
 8014892:	b911      	cbnz	r1, 801489a <sbrk_aligned+0x12>
 8014894:	f000 fd60 	bl	8015358 <_sbrk_r>
 8014898:	6030      	str	r0, [r6, #0]
 801489a:	4621      	mov	r1, r4
 801489c:	4628      	mov	r0, r5
 801489e:	f000 fd5b 	bl	8015358 <_sbrk_r>
 80148a2:	1c43      	adds	r3, r0, #1
 80148a4:	d00a      	beq.n	80148bc <sbrk_aligned+0x34>
 80148a6:	1cc4      	adds	r4, r0, #3
 80148a8:	f024 0403 	bic.w	r4, r4, #3
 80148ac:	42a0      	cmp	r0, r4
 80148ae:	d007      	beq.n	80148c0 <sbrk_aligned+0x38>
 80148b0:	1a21      	subs	r1, r4, r0
 80148b2:	4628      	mov	r0, r5
 80148b4:	f000 fd50 	bl	8015358 <_sbrk_r>
 80148b8:	3001      	adds	r0, #1
 80148ba:	d101      	bne.n	80148c0 <sbrk_aligned+0x38>
 80148bc:	f04f 34ff 	mov.w	r4, #4294967295
 80148c0:	4620      	mov	r0, r4
 80148c2:	bd70      	pop	{r4, r5, r6, pc}
 80148c4:	2000a2ac 	.word	0x2000a2ac

080148c8 <_malloc_r>:
 80148c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148cc:	1ccd      	adds	r5, r1, #3
 80148ce:	f025 0503 	bic.w	r5, r5, #3
 80148d2:	3508      	adds	r5, #8
 80148d4:	2d0c      	cmp	r5, #12
 80148d6:	bf38      	it	cc
 80148d8:	250c      	movcc	r5, #12
 80148da:	2d00      	cmp	r5, #0
 80148dc:	4607      	mov	r7, r0
 80148de:	db01      	blt.n	80148e4 <_malloc_r+0x1c>
 80148e0:	42a9      	cmp	r1, r5
 80148e2:	d905      	bls.n	80148f0 <_malloc_r+0x28>
 80148e4:	230c      	movs	r3, #12
 80148e6:	603b      	str	r3, [r7, #0]
 80148e8:	2600      	movs	r6, #0
 80148ea:	4630      	mov	r0, r6
 80148ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148f0:	4e2e      	ldr	r6, [pc, #184]	; (80149ac <_malloc_r+0xe4>)
 80148f2:	f001 fd9f 	bl	8016434 <__malloc_lock>
 80148f6:	6833      	ldr	r3, [r6, #0]
 80148f8:	461c      	mov	r4, r3
 80148fa:	bb34      	cbnz	r4, 801494a <_malloc_r+0x82>
 80148fc:	4629      	mov	r1, r5
 80148fe:	4638      	mov	r0, r7
 8014900:	f7ff ffc2 	bl	8014888 <sbrk_aligned>
 8014904:	1c43      	adds	r3, r0, #1
 8014906:	4604      	mov	r4, r0
 8014908:	d14d      	bne.n	80149a6 <_malloc_r+0xde>
 801490a:	6834      	ldr	r4, [r6, #0]
 801490c:	4626      	mov	r6, r4
 801490e:	2e00      	cmp	r6, #0
 8014910:	d140      	bne.n	8014994 <_malloc_r+0xcc>
 8014912:	6823      	ldr	r3, [r4, #0]
 8014914:	4631      	mov	r1, r6
 8014916:	4638      	mov	r0, r7
 8014918:	eb04 0803 	add.w	r8, r4, r3
 801491c:	f000 fd1c 	bl	8015358 <_sbrk_r>
 8014920:	4580      	cmp	r8, r0
 8014922:	d13a      	bne.n	801499a <_malloc_r+0xd2>
 8014924:	6821      	ldr	r1, [r4, #0]
 8014926:	3503      	adds	r5, #3
 8014928:	1a6d      	subs	r5, r5, r1
 801492a:	f025 0503 	bic.w	r5, r5, #3
 801492e:	3508      	adds	r5, #8
 8014930:	2d0c      	cmp	r5, #12
 8014932:	bf38      	it	cc
 8014934:	250c      	movcc	r5, #12
 8014936:	4629      	mov	r1, r5
 8014938:	4638      	mov	r0, r7
 801493a:	f7ff ffa5 	bl	8014888 <sbrk_aligned>
 801493e:	3001      	adds	r0, #1
 8014940:	d02b      	beq.n	801499a <_malloc_r+0xd2>
 8014942:	6823      	ldr	r3, [r4, #0]
 8014944:	442b      	add	r3, r5
 8014946:	6023      	str	r3, [r4, #0]
 8014948:	e00e      	b.n	8014968 <_malloc_r+0xa0>
 801494a:	6822      	ldr	r2, [r4, #0]
 801494c:	1b52      	subs	r2, r2, r5
 801494e:	d41e      	bmi.n	801498e <_malloc_r+0xc6>
 8014950:	2a0b      	cmp	r2, #11
 8014952:	d916      	bls.n	8014982 <_malloc_r+0xba>
 8014954:	1961      	adds	r1, r4, r5
 8014956:	42a3      	cmp	r3, r4
 8014958:	6025      	str	r5, [r4, #0]
 801495a:	bf18      	it	ne
 801495c:	6059      	strne	r1, [r3, #4]
 801495e:	6863      	ldr	r3, [r4, #4]
 8014960:	bf08      	it	eq
 8014962:	6031      	streq	r1, [r6, #0]
 8014964:	5162      	str	r2, [r4, r5]
 8014966:	604b      	str	r3, [r1, #4]
 8014968:	4638      	mov	r0, r7
 801496a:	f104 060b 	add.w	r6, r4, #11
 801496e:	f001 fd67 	bl	8016440 <__malloc_unlock>
 8014972:	f026 0607 	bic.w	r6, r6, #7
 8014976:	1d23      	adds	r3, r4, #4
 8014978:	1af2      	subs	r2, r6, r3
 801497a:	d0b6      	beq.n	80148ea <_malloc_r+0x22>
 801497c:	1b9b      	subs	r3, r3, r6
 801497e:	50a3      	str	r3, [r4, r2]
 8014980:	e7b3      	b.n	80148ea <_malloc_r+0x22>
 8014982:	6862      	ldr	r2, [r4, #4]
 8014984:	42a3      	cmp	r3, r4
 8014986:	bf0c      	ite	eq
 8014988:	6032      	streq	r2, [r6, #0]
 801498a:	605a      	strne	r2, [r3, #4]
 801498c:	e7ec      	b.n	8014968 <_malloc_r+0xa0>
 801498e:	4623      	mov	r3, r4
 8014990:	6864      	ldr	r4, [r4, #4]
 8014992:	e7b2      	b.n	80148fa <_malloc_r+0x32>
 8014994:	4634      	mov	r4, r6
 8014996:	6876      	ldr	r6, [r6, #4]
 8014998:	e7b9      	b.n	801490e <_malloc_r+0x46>
 801499a:	230c      	movs	r3, #12
 801499c:	603b      	str	r3, [r7, #0]
 801499e:	4638      	mov	r0, r7
 80149a0:	f001 fd4e 	bl	8016440 <__malloc_unlock>
 80149a4:	e7a1      	b.n	80148ea <_malloc_r+0x22>
 80149a6:	6025      	str	r5, [r4, #0]
 80149a8:	e7de      	b.n	8014968 <_malloc_r+0xa0>
 80149aa:	bf00      	nop
 80149ac:	2000a2a8 	.word	0x2000a2a8

080149b0 <__cvt>:
 80149b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80149b4:	ec55 4b10 	vmov	r4, r5, d0
 80149b8:	2d00      	cmp	r5, #0
 80149ba:	460e      	mov	r6, r1
 80149bc:	4619      	mov	r1, r3
 80149be:	462b      	mov	r3, r5
 80149c0:	bfbb      	ittet	lt
 80149c2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80149c6:	461d      	movlt	r5, r3
 80149c8:	2300      	movge	r3, #0
 80149ca:	232d      	movlt	r3, #45	; 0x2d
 80149cc:	700b      	strb	r3, [r1, #0]
 80149ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80149d0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80149d4:	4691      	mov	r9, r2
 80149d6:	f023 0820 	bic.w	r8, r3, #32
 80149da:	bfbc      	itt	lt
 80149dc:	4622      	movlt	r2, r4
 80149de:	4614      	movlt	r4, r2
 80149e0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80149e4:	d005      	beq.n	80149f2 <__cvt+0x42>
 80149e6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80149ea:	d100      	bne.n	80149ee <__cvt+0x3e>
 80149ec:	3601      	adds	r6, #1
 80149ee:	2102      	movs	r1, #2
 80149f0:	e000      	b.n	80149f4 <__cvt+0x44>
 80149f2:	2103      	movs	r1, #3
 80149f4:	ab03      	add	r3, sp, #12
 80149f6:	9301      	str	r3, [sp, #4]
 80149f8:	ab02      	add	r3, sp, #8
 80149fa:	9300      	str	r3, [sp, #0]
 80149fc:	ec45 4b10 	vmov	d0, r4, r5
 8014a00:	4653      	mov	r3, sl
 8014a02:	4632      	mov	r2, r6
 8014a04:	f000 fe50 	bl	80156a8 <_dtoa_r>
 8014a08:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8014a0c:	4607      	mov	r7, r0
 8014a0e:	d102      	bne.n	8014a16 <__cvt+0x66>
 8014a10:	f019 0f01 	tst.w	r9, #1
 8014a14:	d022      	beq.n	8014a5c <__cvt+0xac>
 8014a16:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8014a1a:	eb07 0906 	add.w	r9, r7, r6
 8014a1e:	d110      	bne.n	8014a42 <__cvt+0x92>
 8014a20:	783b      	ldrb	r3, [r7, #0]
 8014a22:	2b30      	cmp	r3, #48	; 0x30
 8014a24:	d10a      	bne.n	8014a3c <__cvt+0x8c>
 8014a26:	2200      	movs	r2, #0
 8014a28:	2300      	movs	r3, #0
 8014a2a:	4620      	mov	r0, r4
 8014a2c:	4629      	mov	r1, r5
 8014a2e:	f7ec f84b 	bl	8000ac8 <__aeabi_dcmpeq>
 8014a32:	b918      	cbnz	r0, 8014a3c <__cvt+0x8c>
 8014a34:	f1c6 0601 	rsb	r6, r6, #1
 8014a38:	f8ca 6000 	str.w	r6, [sl]
 8014a3c:	f8da 3000 	ldr.w	r3, [sl]
 8014a40:	4499      	add	r9, r3
 8014a42:	2200      	movs	r2, #0
 8014a44:	2300      	movs	r3, #0
 8014a46:	4620      	mov	r0, r4
 8014a48:	4629      	mov	r1, r5
 8014a4a:	f7ec f83d 	bl	8000ac8 <__aeabi_dcmpeq>
 8014a4e:	b108      	cbz	r0, 8014a54 <__cvt+0xa4>
 8014a50:	f8cd 900c 	str.w	r9, [sp, #12]
 8014a54:	2230      	movs	r2, #48	; 0x30
 8014a56:	9b03      	ldr	r3, [sp, #12]
 8014a58:	454b      	cmp	r3, r9
 8014a5a:	d307      	bcc.n	8014a6c <__cvt+0xbc>
 8014a5c:	9b03      	ldr	r3, [sp, #12]
 8014a5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014a60:	1bdb      	subs	r3, r3, r7
 8014a62:	4638      	mov	r0, r7
 8014a64:	6013      	str	r3, [r2, #0]
 8014a66:	b004      	add	sp, #16
 8014a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a6c:	1c59      	adds	r1, r3, #1
 8014a6e:	9103      	str	r1, [sp, #12]
 8014a70:	701a      	strb	r2, [r3, #0]
 8014a72:	e7f0      	b.n	8014a56 <__cvt+0xa6>

08014a74 <__exponent>:
 8014a74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014a76:	4603      	mov	r3, r0
 8014a78:	2900      	cmp	r1, #0
 8014a7a:	bfb8      	it	lt
 8014a7c:	4249      	neglt	r1, r1
 8014a7e:	f803 2b02 	strb.w	r2, [r3], #2
 8014a82:	bfb4      	ite	lt
 8014a84:	222d      	movlt	r2, #45	; 0x2d
 8014a86:	222b      	movge	r2, #43	; 0x2b
 8014a88:	2909      	cmp	r1, #9
 8014a8a:	7042      	strb	r2, [r0, #1]
 8014a8c:	dd2a      	ble.n	8014ae4 <__exponent+0x70>
 8014a8e:	f10d 0407 	add.w	r4, sp, #7
 8014a92:	46a4      	mov	ip, r4
 8014a94:	270a      	movs	r7, #10
 8014a96:	46a6      	mov	lr, r4
 8014a98:	460a      	mov	r2, r1
 8014a9a:	fb91 f6f7 	sdiv	r6, r1, r7
 8014a9e:	fb07 1516 	mls	r5, r7, r6, r1
 8014aa2:	3530      	adds	r5, #48	; 0x30
 8014aa4:	2a63      	cmp	r2, #99	; 0x63
 8014aa6:	f104 34ff 	add.w	r4, r4, #4294967295
 8014aaa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8014aae:	4631      	mov	r1, r6
 8014ab0:	dcf1      	bgt.n	8014a96 <__exponent+0x22>
 8014ab2:	3130      	adds	r1, #48	; 0x30
 8014ab4:	f1ae 0502 	sub.w	r5, lr, #2
 8014ab8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8014abc:	1c44      	adds	r4, r0, #1
 8014abe:	4629      	mov	r1, r5
 8014ac0:	4561      	cmp	r1, ip
 8014ac2:	d30a      	bcc.n	8014ada <__exponent+0x66>
 8014ac4:	f10d 0209 	add.w	r2, sp, #9
 8014ac8:	eba2 020e 	sub.w	r2, r2, lr
 8014acc:	4565      	cmp	r5, ip
 8014ace:	bf88      	it	hi
 8014ad0:	2200      	movhi	r2, #0
 8014ad2:	4413      	add	r3, r2
 8014ad4:	1a18      	subs	r0, r3, r0
 8014ad6:	b003      	add	sp, #12
 8014ad8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ada:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014ade:	f804 2f01 	strb.w	r2, [r4, #1]!
 8014ae2:	e7ed      	b.n	8014ac0 <__exponent+0x4c>
 8014ae4:	2330      	movs	r3, #48	; 0x30
 8014ae6:	3130      	adds	r1, #48	; 0x30
 8014ae8:	7083      	strb	r3, [r0, #2]
 8014aea:	70c1      	strb	r1, [r0, #3]
 8014aec:	1d03      	adds	r3, r0, #4
 8014aee:	e7f1      	b.n	8014ad4 <__exponent+0x60>

08014af0 <_printf_float>:
 8014af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014af4:	ed2d 8b02 	vpush	{d8}
 8014af8:	b08d      	sub	sp, #52	; 0x34
 8014afa:	460c      	mov	r4, r1
 8014afc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8014b00:	4616      	mov	r6, r2
 8014b02:	461f      	mov	r7, r3
 8014b04:	4605      	mov	r5, r0
 8014b06:	f001 fc7f 	bl	8016408 <_localeconv_r>
 8014b0a:	f8d0 a000 	ldr.w	sl, [r0]
 8014b0e:	4650      	mov	r0, sl
 8014b10:	f7eb fb5e 	bl	80001d0 <strlen>
 8014b14:	2300      	movs	r3, #0
 8014b16:	930a      	str	r3, [sp, #40]	; 0x28
 8014b18:	6823      	ldr	r3, [r4, #0]
 8014b1a:	9305      	str	r3, [sp, #20]
 8014b1c:	f8d8 3000 	ldr.w	r3, [r8]
 8014b20:	f894 b018 	ldrb.w	fp, [r4, #24]
 8014b24:	3307      	adds	r3, #7
 8014b26:	f023 0307 	bic.w	r3, r3, #7
 8014b2a:	f103 0208 	add.w	r2, r3, #8
 8014b2e:	f8c8 2000 	str.w	r2, [r8]
 8014b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b36:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014b3a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014b3e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014b42:	9307      	str	r3, [sp, #28]
 8014b44:	f8cd 8018 	str.w	r8, [sp, #24]
 8014b48:	ee08 0a10 	vmov	s16, r0
 8014b4c:	4b9f      	ldr	r3, [pc, #636]	; (8014dcc <_printf_float+0x2dc>)
 8014b4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014b52:	f04f 32ff 	mov.w	r2, #4294967295
 8014b56:	f7eb ffe9 	bl	8000b2c <__aeabi_dcmpun>
 8014b5a:	bb88      	cbnz	r0, 8014bc0 <_printf_float+0xd0>
 8014b5c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014b60:	4b9a      	ldr	r3, [pc, #616]	; (8014dcc <_printf_float+0x2dc>)
 8014b62:	f04f 32ff 	mov.w	r2, #4294967295
 8014b66:	f7eb ffc3 	bl	8000af0 <__aeabi_dcmple>
 8014b6a:	bb48      	cbnz	r0, 8014bc0 <_printf_float+0xd0>
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	2300      	movs	r3, #0
 8014b70:	4640      	mov	r0, r8
 8014b72:	4649      	mov	r1, r9
 8014b74:	f7eb ffb2 	bl	8000adc <__aeabi_dcmplt>
 8014b78:	b110      	cbz	r0, 8014b80 <_printf_float+0x90>
 8014b7a:	232d      	movs	r3, #45	; 0x2d
 8014b7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014b80:	4b93      	ldr	r3, [pc, #588]	; (8014dd0 <_printf_float+0x2e0>)
 8014b82:	4894      	ldr	r0, [pc, #592]	; (8014dd4 <_printf_float+0x2e4>)
 8014b84:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8014b88:	bf94      	ite	ls
 8014b8a:	4698      	movls	r8, r3
 8014b8c:	4680      	movhi	r8, r0
 8014b8e:	2303      	movs	r3, #3
 8014b90:	6123      	str	r3, [r4, #16]
 8014b92:	9b05      	ldr	r3, [sp, #20]
 8014b94:	f023 0204 	bic.w	r2, r3, #4
 8014b98:	6022      	str	r2, [r4, #0]
 8014b9a:	f04f 0900 	mov.w	r9, #0
 8014b9e:	9700      	str	r7, [sp, #0]
 8014ba0:	4633      	mov	r3, r6
 8014ba2:	aa0b      	add	r2, sp, #44	; 0x2c
 8014ba4:	4621      	mov	r1, r4
 8014ba6:	4628      	mov	r0, r5
 8014ba8:	f000 f9d8 	bl	8014f5c <_printf_common>
 8014bac:	3001      	adds	r0, #1
 8014bae:	f040 8090 	bne.w	8014cd2 <_printf_float+0x1e2>
 8014bb2:	f04f 30ff 	mov.w	r0, #4294967295
 8014bb6:	b00d      	add	sp, #52	; 0x34
 8014bb8:	ecbd 8b02 	vpop	{d8}
 8014bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bc0:	4642      	mov	r2, r8
 8014bc2:	464b      	mov	r3, r9
 8014bc4:	4640      	mov	r0, r8
 8014bc6:	4649      	mov	r1, r9
 8014bc8:	f7eb ffb0 	bl	8000b2c <__aeabi_dcmpun>
 8014bcc:	b140      	cbz	r0, 8014be0 <_printf_float+0xf0>
 8014bce:	464b      	mov	r3, r9
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	bfbc      	itt	lt
 8014bd4:	232d      	movlt	r3, #45	; 0x2d
 8014bd6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8014bda:	487f      	ldr	r0, [pc, #508]	; (8014dd8 <_printf_float+0x2e8>)
 8014bdc:	4b7f      	ldr	r3, [pc, #508]	; (8014ddc <_printf_float+0x2ec>)
 8014bde:	e7d1      	b.n	8014b84 <_printf_float+0x94>
 8014be0:	6863      	ldr	r3, [r4, #4]
 8014be2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8014be6:	9206      	str	r2, [sp, #24]
 8014be8:	1c5a      	adds	r2, r3, #1
 8014bea:	d13f      	bne.n	8014c6c <_printf_float+0x17c>
 8014bec:	2306      	movs	r3, #6
 8014bee:	6063      	str	r3, [r4, #4]
 8014bf0:	9b05      	ldr	r3, [sp, #20]
 8014bf2:	6861      	ldr	r1, [r4, #4]
 8014bf4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8014bf8:	2300      	movs	r3, #0
 8014bfa:	9303      	str	r3, [sp, #12]
 8014bfc:	ab0a      	add	r3, sp, #40	; 0x28
 8014bfe:	e9cd b301 	strd	fp, r3, [sp, #4]
 8014c02:	ab09      	add	r3, sp, #36	; 0x24
 8014c04:	ec49 8b10 	vmov	d0, r8, r9
 8014c08:	9300      	str	r3, [sp, #0]
 8014c0a:	6022      	str	r2, [r4, #0]
 8014c0c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014c10:	4628      	mov	r0, r5
 8014c12:	f7ff fecd 	bl	80149b0 <__cvt>
 8014c16:	9b06      	ldr	r3, [sp, #24]
 8014c18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014c1a:	2b47      	cmp	r3, #71	; 0x47
 8014c1c:	4680      	mov	r8, r0
 8014c1e:	d108      	bne.n	8014c32 <_printf_float+0x142>
 8014c20:	1cc8      	adds	r0, r1, #3
 8014c22:	db02      	blt.n	8014c2a <_printf_float+0x13a>
 8014c24:	6863      	ldr	r3, [r4, #4]
 8014c26:	4299      	cmp	r1, r3
 8014c28:	dd41      	ble.n	8014cae <_printf_float+0x1be>
 8014c2a:	f1ab 0b02 	sub.w	fp, fp, #2
 8014c2e:	fa5f fb8b 	uxtb.w	fp, fp
 8014c32:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014c36:	d820      	bhi.n	8014c7a <_printf_float+0x18a>
 8014c38:	3901      	subs	r1, #1
 8014c3a:	465a      	mov	r2, fp
 8014c3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014c40:	9109      	str	r1, [sp, #36]	; 0x24
 8014c42:	f7ff ff17 	bl	8014a74 <__exponent>
 8014c46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014c48:	1813      	adds	r3, r2, r0
 8014c4a:	2a01      	cmp	r2, #1
 8014c4c:	4681      	mov	r9, r0
 8014c4e:	6123      	str	r3, [r4, #16]
 8014c50:	dc02      	bgt.n	8014c58 <_printf_float+0x168>
 8014c52:	6822      	ldr	r2, [r4, #0]
 8014c54:	07d2      	lsls	r2, r2, #31
 8014c56:	d501      	bpl.n	8014c5c <_printf_float+0x16c>
 8014c58:	3301      	adds	r3, #1
 8014c5a:	6123      	str	r3, [r4, #16]
 8014c5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d09c      	beq.n	8014b9e <_printf_float+0xae>
 8014c64:	232d      	movs	r3, #45	; 0x2d
 8014c66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014c6a:	e798      	b.n	8014b9e <_printf_float+0xae>
 8014c6c:	9a06      	ldr	r2, [sp, #24]
 8014c6e:	2a47      	cmp	r2, #71	; 0x47
 8014c70:	d1be      	bne.n	8014bf0 <_printf_float+0x100>
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d1bc      	bne.n	8014bf0 <_printf_float+0x100>
 8014c76:	2301      	movs	r3, #1
 8014c78:	e7b9      	b.n	8014bee <_printf_float+0xfe>
 8014c7a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8014c7e:	d118      	bne.n	8014cb2 <_printf_float+0x1c2>
 8014c80:	2900      	cmp	r1, #0
 8014c82:	6863      	ldr	r3, [r4, #4]
 8014c84:	dd0b      	ble.n	8014c9e <_printf_float+0x1ae>
 8014c86:	6121      	str	r1, [r4, #16]
 8014c88:	b913      	cbnz	r3, 8014c90 <_printf_float+0x1a0>
 8014c8a:	6822      	ldr	r2, [r4, #0]
 8014c8c:	07d0      	lsls	r0, r2, #31
 8014c8e:	d502      	bpl.n	8014c96 <_printf_float+0x1a6>
 8014c90:	3301      	adds	r3, #1
 8014c92:	440b      	add	r3, r1
 8014c94:	6123      	str	r3, [r4, #16]
 8014c96:	65a1      	str	r1, [r4, #88]	; 0x58
 8014c98:	f04f 0900 	mov.w	r9, #0
 8014c9c:	e7de      	b.n	8014c5c <_printf_float+0x16c>
 8014c9e:	b913      	cbnz	r3, 8014ca6 <_printf_float+0x1b6>
 8014ca0:	6822      	ldr	r2, [r4, #0]
 8014ca2:	07d2      	lsls	r2, r2, #31
 8014ca4:	d501      	bpl.n	8014caa <_printf_float+0x1ba>
 8014ca6:	3302      	adds	r3, #2
 8014ca8:	e7f4      	b.n	8014c94 <_printf_float+0x1a4>
 8014caa:	2301      	movs	r3, #1
 8014cac:	e7f2      	b.n	8014c94 <_printf_float+0x1a4>
 8014cae:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8014cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014cb4:	4299      	cmp	r1, r3
 8014cb6:	db05      	blt.n	8014cc4 <_printf_float+0x1d4>
 8014cb8:	6823      	ldr	r3, [r4, #0]
 8014cba:	6121      	str	r1, [r4, #16]
 8014cbc:	07d8      	lsls	r0, r3, #31
 8014cbe:	d5ea      	bpl.n	8014c96 <_printf_float+0x1a6>
 8014cc0:	1c4b      	adds	r3, r1, #1
 8014cc2:	e7e7      	b.n	8014c94 <_printf_float+0x1a4>
 8014cc4:	2900      	cmp	r1, #0
 8014cc6:	bfd4      	ite	le
 8014cc8:	f1c1 0202 	rsble	r2, r1, #2
 8014ccc:	2201      	movgt	r2, #1
 8014cce:	4413      	add	r3, r2
 8014cd0:	e7e0      	b.n	8014c94 <_printf_float+0x1a4>
 8014cd2:	6823      	ldr	r3, [r4, #0]
 8014cd4:	055a      	lsls	r2, r3, #21
 8014cd6:	d407      	bmi.n	8014ce8 <_printf_float+0x1f8>
 8014cd8:	6923      	ldr	r3, [r4, #16]
 8014cda:	4642      	mov	r2, r8
 8014cdc:	4631      	mov	r1, r6
 8014cde:	4628      	mov	r0, r5
 8014ce0:	47b8      	blx	r7
 8014ce2:	3001      	adds	r0, #1
 8014ce4:	d12c      	bne.n	8014d40 <_printf_float+0x250>
 8014ce6:	e764      	b.n	8014bb2 <_printf_float+0xc2>
 8014ce8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8014cec:	f240 80e0 	bls.w	8014eb0 <_printf_float+0x3c0>
 8014cf0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014cf4:	2200      	movs	r2, #0
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	f7eb fee6 	bl	8000ac8 <__aeabi_dcmpeq>
 8014cfc:	2800      	cmp	r0, #0
 8014cfe:	d034      	beq.n	8014d6a <_printf_float+0x27a>
 8014d00:	4a37      	ldr	r2, [pc, #220]	; (8014de0 <_printf_float+0x2f0>)
 8014d02:	2301      	movs	r3, #1
 8014d04:	4631      	mov	r1, r6
 8014d06:	4628      	mov	r0, r5
 8014d08:	47b8      	blx	r7
 8014d0a:	3001      	adds	r0, #1
 8014d0c:	f43f af51 	beq.w	8014bb2 <_printf_float+0xc2>
 8014d10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014d14:	429a      	cmp	r2, r3
 8014d16:	db02      	blt.n	8014d1e <_printf_float+0x22e>
 8014d18:	6823      	ldr	r3, [r4, #0]
 8014d1a:	07d8      	lsls	r0, r3, #31
 8014d1c:	d510      	bpl.n	8014d40 <_printf_float+0x250>
 8014d1e:	ee18 3a10 	vmov	r3, s16
 8014d22:	4652      	mov	r2, sl
 8014d24:	4631      	mov	r1, r6
 8014d26:	4628      	mov	r0, r5
 8014d28:	47b8      	blx	r7
 8014d2a:	3001      	adds	r0, #1
 8014d2c:	f43f af41 	beq.w	8014bb2 <_printf_float+0xc2>
 8014d30:	f04f 0800 	mov.w	r8, #0
 8014d34:	f104 091a 	add.w	r9, r4, #26
 8014d38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014d3a:	3b01      	subs	r3, #1
 8014d3c:	4543      	cmp	r3, r8
 8014d3e:	dc09      	bgt.n	8014d54 <_printf_float+0x264>
 8014d40:	6823      	ldr	r3, [r4, #0]
 8014d42:	079b      	lsls	r3, r3, #30
 8014d44:	f100 8105 	bmi.w	8014f52 <_printf_float+0x462>
 8014d48:	68e0      	ldr	r0, [r4, #12]
 8014d4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d4c:	4298      	cmp	r0, r3
 8014d4e:	bfb8      	it	lt
 8014d50:	4618      	movlt	r0, r3
 8014d52:	e730      	b.n	8014bb6 <_printf_float+0xc6>
 8014d54:	2301      	movs	r3, #1
 8014d56:	464a      	mov	r2, r9
 8014d58:	4631      	mov	r1, r6
 8014d5a:	4628      	mov	r0, r5
 8014d5c:	47b8      	blx	r7
 8014d5e:	3001      	adds	r0, #1
 8014d60:	f43f af27 	beq.w	8014bb2 <_printf_float+0xc2>
 8014d64:	f108 0801 	add.w	r8, r8, #1
 8014d68:	e7e6      	b.n	8014d38 <_printf_float+0x248>
 8014d6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	dc39      	bgt.n	8014de4 <_printf_float+0x2f4>
 8014d70:	4a1b      	ldr	r2, [pc, #108]	; (8014de0 <_printf_float+0x2f0>)
 8014d72:	2301      	movs	r3, #1
 8014d74:	4631      	mov	r1, r6
 8014d76:	4628      	mov	r0, r5
 8014d78:	47b8      	blx	r7
 8014d7a:	3001      	adds	r0, #1
 8014d7c:	f43f af19 	beq.w	8014bb2 <_printf_float+0xc2>
 8014d80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014d84:	4313      	orrs	r3, r2
 8014d86:	d102      	bne.n	8014d8e <_printf_float+0x29e>
 8014d88:	6823      	ldr	r3, [r4, #0]
 8014d8a:	07d9      	lsls	r1, r3, #31
 8014d8c:	d5d8      	bpl.n	8014d40 <_printf_float+0x250>
 8014d8e:	ee18 3a10 	vmov	r3, s16
 8014d92:	4652      	mov	r2, sl
 8014d94:	4631      	mov	r1, r6
 8014d96:	4628      	mov	r0, r5
 8014d98:	47b8      	blx	r7
 8014d9a:	3001      	adds	r0, #1
 8014d9c:	f43f af09 	beq.w	8014bb2 <_printf_float+0xc2>
 8014da0:	f04f 0900 	mov.w	r9, #0
 8014da4:	f104 0a1a 	add.w	sl, r4, #26
 8014da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014daa:	425b      	negs	r3, r3
 8014dac:	454b      	cmp	r3, r9
 8014dae:	dc01      	bgt.n	8014db4 <_printf_float+0x2c4>
 8014db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014db2:	e792      	b.n	8014cda <_printf_float+0x1ea>
 8014db4:	2301      	movs	r3, #1
 8014db6:	4652      	mov	r2, sl
 8014db8:	4631      	mov	r1, r6
 8014dba:	4628      	mov	r0, r5
 8014dbc:	47b8      	blx	r7
 8014dbe:	3001      	adds	r0, #1
 8014dc0:	f43f aef7 	beq.w	8014bb2 <_printf_float+0xc2>
 8014dc4:	f109 0901 	add.w	r9, r9, #1
 8014dc8:	e7ee      	b.n	8014da8 <_printf_float+0x2b8>
 8014dca:	bf00      	nop
 8014dcc:	7fefffff 	.word	0x7fefffff
 8014dd0:	08017774 	.word	0x08017774
 8014dd4:	08017778 	.word	0x08017778
 8014dd8:	08017780 	.word	0x08017780
 8014ddc:	0801777c 	.word	0x0801777c
 8014de0:	08017784 	.word	0x08017784
 8014de4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014de6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014de8:	429a      	cmp	r2, r3
 8014dea:	bfa8      	it	ge
 8014dec:	461a      	movge	r2, r3
 8014dee:	2a00      	cmp	r2, #0
 8014df0:	4691      	mov	r9, r2
 8014df2:	dc37      	bgt.n	8014e64 <_printf_float+0x374>
 8014df4:	f04f 0b00 	mov.w	fp, #0
 8014df8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014dfc:	f104 021a 	add.w	r2, r4, #26
 8014e00:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014e02:	9305      	str	r3, [sp, #20]
 8014e04:	eba3 0309 	sub.w	r3, r3, r9
 8014e08:	455b      	cmp	r3, fp
 8014e0a:	dc33      	bgt.n	8014e74 <_printf_float+0x384>
 8014e0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014e10:	429a      	cmp	r2, r3
 8014e12:	db3b      	blt.n	8014e8c <_printf_float+0x39c>
 8014e14:	6823      	ldr	r3, [r4, #0]
 8014e16:	07da      	lsls	r2, r3, #31
 8014e18:	d438      	bmi.n	8014e8c <_printf_float+0x39c>
 8014e1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014e1c:	9a05      	ldr	r2, [sp, #20]
 8014e1e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014e20:	1a9a      	subs	r2, r3, r2
 8014e22:	eba3 0901 	sub.w	r9, r3, r1
 8014e26:	4591      	cmp	r9, r2
 8014e28:	bfa8      	it	ge
 8014e2a:	4691      	movge	r9, r2
 8014e2c:	f1b9 0f00 	cmp.w	r9, #0
 8014e30:	dc35      	bgt.n	8014e9e <_printf_float+0x3ae>
 8014e32:	f04f 0800 	mov.w	r8, #0
 8014e36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8014e3a:	f104 0a1a 	add.w	sl, r4, #26
 8014e3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014e42:	1a9b      	subs	r3, r3, r2
 8014e44:	eba3 0309 	sub.w	r3, r3, r9
 8014e48:	4543      	cmp	r3, r8
 8014e4a:	f77f af79 	ble.w	8014d40 <_printf_float+0x250>
 8014e4e:	2301      	movs	r3, #1
 8014e50:	4652      	mov	r2, sl
 8014e52:	4631      	mov	r1, r6
 8014e54:	4628      	mov	r0, r5
 8014e56:	47b8      	blx	r7
 8014e58:	3001      	adds	r0, #1
 8014e5a:	f43f aeaa 	beq.w	8014bb2 <_printf_float+0xc2>
 8014e5e:	f108 0801 	add.w	r8, r8, #1
 8014e62:	e7ec      	b.n	8014e3e <_printf_float+0x34e>
 8014e64:	4613      	mov	r3, r2
 8014e66:	4631      	mov	r1, r6
 8014e68:	4642      	mov	r2, r8
 8014e6a:	4628      	mov	r0, r5
 8014e6c:	47b8      	blx	r7
 8014e6e:	3001      	adds	r0, #1
 8014e70:	d1c0      	bne.n	8014df4 <_printf_float+0x304>
 8014e72:	e69e      	b.n	8014bb2 <_printf_float+0xc2>
 8014e74:	2301      	movs	r3, #1
 8014e76:	4631      	mov	r1, r6
 8014e78:	4628      	mov	r0, r5
 8014e7a:	9205      	str	r2, [sp, #20]
 8014e7c:	47b8      	blx	r7
 8014e7e:	3001      	adds	r0, #1
 8014e80:	f43f ae97 	beq.w	8014bb2 <_printf_float+0xc2>
 8014e84:	9a05      	ldr	r2, [sp, #20]
 8014e86:	f10b 0b01 	add.w	fp, fp, #1
 8014e8a:	e7b9      	b.n	8014e00 <_printf_float+0x310>
 8014e8c:	ee18 3a10 	vmov	r3, s16
 8014e90:	4652      	mov	r2, sl
 8014e92:	4631      	mov	r1, r6
 8014e94:	4628      	mov	r0, r5
 8014e96:	47b8      	blx	r7
 8014e98:	3001      	adds	r0, #1
 8014e9a:	d1be      	bne.n	8014e1a <_printf_float+0x32a>
 8014e9c:	e689      	b.n	8014bb2 <_printf_float+0xc2>
 8014e9e:	9a05      	ldr	r2, [sp, #20]
 8014ea0:	464b      	mov	r3, r9
 8014ea2:	4442      	add	r2, r8
 8014ea4:	4631      	mov	r1, r6
 8014ea6:	4628      	mov	r0, r5
 8014ea8:	47b8      	blx	r7
 8014eaa:	3001      	adds	r0, #1
 8014eac:	d1c1      	bne.n	8014e32 <_printf_float+0x342>
 8014eae:	e680      	b.n	8014bb2 <_printf_float+0xc2>
 8014eb0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014eb2:	2a01      	cmp	r2, #1
 8014eb4:	dc01      	bgt.n	8014eba <_printf_float+0x3ca>
 8014eb6:	07db      	lsls	r3, r3, #31
 8014eb8:	d538      	bpl.n	8014f2c <_printf_float+0x43c>
 8014eba:	2301      	movs	r3, #1
 8014ebc:	4642      	mov	r2, r8
 8014ebe:	4631      	mov	r1, r6
 8014ec0:	4628      	mov	r0, r5
 8014ec2:	47b8      	blx	r7
 8014ec4:	3001      	adds	r0, #1
 8014ec6:	f43f ae74 	beq.w	8014bb2 <_printf_float+0xc2>
 8014eca:	ee18 3a10 	vmov	r3, s16
 8014ece:	4652      	mov	r2, sl
 8014ed0:	4631      	mov	r1, r6
 8014ed2:	4628      	mov	r0, r5
 8014ed4:	47b8      	blx	r7
 8014ed6:	3001      	adds	r0, #1
 8014ed8:	f43f ae6b 	beq.w	8014bb2 <_printf_float+0xc2>
 8014edc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8014ee0:	2200      	movs	r2, #0
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	f7eb fdf0 	bl	8000ac8 <__aeabi_dcmpeq>
 8014ee8:	b9d8      	cbnz	r0, 8014f22 <_printf_float+0x432>
 8014eea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014eec:	f108 0201 	add.w	r2, r8, #1
 8014ef0:	3b01      	subs	r3, #1
 8014ef2:	4631      	mov	r1, r6
 8014ef4:	4628      	mov	r0, r5
 8014ef6:	47b8      	blx	r7
 8014ef8:	3001      	adds	r0, #1
 8014efa:	d10e      	bne.n	8014f1a <_printf_float+0x42a>
 8014efc:	e659      	b.n	8014bb2 <_printf_float+0xc2>
 8014efe:	2301      	movs	r3, #1
 8014f00:	4652      	mov	r2, sl
 8014f02:	4631      	mov	r1, r6
 8014f04:	4628      	mov	r0, r5
 8014f06:	47b8      	blx	r7
 8014f08:	3001      	adds	r0, #1
 8014f0a:	f43f ae52 	beq.w	8014bb2 <_printf_float+0xc2>
 8014f0e:	f108 0801 	add.w	r8, r8, #1
 8014f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014f14:	3b01      	subs	r3, #1
 8014f16:	4543      	cmp	r3, r8
 8014f18:	dcf1      	bgt.n	8014efe <_printf_float+0x40e>
 8014f1a:	464b      	mov	r3, r9
 8014f1c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8014f20:	e6dc      	b.n	8014cdc <_printf_float+0x1ec>
 8014f22:	f04f 0800 	mov.w	r8, #0
 8014f26:	f104 0a1a 	add.w	sl, r4, #26
 8014f2a:	e7f2      	b.n	8014f12 <_printf_float+0x422>
 8014f2c:	2301      	movs	r3, #1
 8014f2e:	4642      	mov	r2, r8
 8014f30:	e7df      	b.n	8014ef2 <_printf_float+0x402>
 8014f32:	2301      	movs	r3, #1
 8014f34:	464a      	mov	r2, r9
 8014f36:	4631      	mov	r1, r6
 8014f38:	4628      	mov	r0, r5
 8014f3a:	47b8      	blx	r7
 8014f3c:	3001      	adds	r0, #1
 8014f3e:	f43f ae38 	beq.w	8014bb2 <_printf_float+0xc2>
 8014f42:	f108 0801 	add.w	r8, r8, #1
 8014f46:	68e3      	ldr	r3, [r4, #12]
 8014f48:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8014f4a:	1a5b      	subs	r3, r3, r1
 8014f4c:	4543      	cmp	r3, r8
 8014f4e:	dcf0      	bgt.n	8014f32 <_printf_float+0x442>
 8014f50:	e6fa      	b.n	8014d48 <_printf_float+0x258>
 8014f52:	f04f 0800 	mov.w	r8, #0
 8014f56:	f104 0919 	add.w	r9, r4, #25
 8014f5a:	e7f4      	b.n	8014f46 <_printf_float+0x456>

08014f5c <_printf_common>:
 8014f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f60:	4616      	mov	r6, r2
 8014f62:	4699      	mov	r9, r3
 8014f64:	688a      	ldr	r2, [r1, #8]
 8014f66:	690b      	ldr	r3, [r1, #16]
 8014f68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014f6c:	4293      	cmp	r3, r2
 8014f6e:	bfb8      	it	lt
 8014f70:	4613      	movlt	r3, r2
 8014f72:	6033      	str	r3, [r6, #0]
 8014f74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014f78:	4607      	mov	r7, r0
 8014f7a:	460c      	mov	r4, r1
 8014f7c:	b10a      	cbz	r2, 8014f82 <_printf_common+0x26>
 8014f7e:	3301      	adds	r3, #1
 8014f80:	6033      	str	r3, [r6, #0]
 8014f82:	6823      	ldr	r3, [r4, #0]
 8014f84:	0699      	lsls	r1, r3, #26
 8014f86:	bf42      	ittt	mi
 8014f88:	6833      	ldrmi	r3, [r6, #0]
 8014f8a:	3302      	addmi	r3, #2
 8014f8c:	6033      	strmi	r3, [r6, #0]
 8014f8e:	6825      	ldr	r5, [r4, #0]
 8014f90:	f015 0506 	ands.w	r5, r5, #6
 8014f94:	d106      	bne.n	8014fa4 <_printf_common+0x48>
 8014f96:	f104 0a19 	add.w	sl, r4, #25
 8014f9a:	68e3      	ldr	r3, [r4, #12]
 8014f9c:	6832      	ldr	r2, [r6, #0]
 8014f9e:	1a9b      	subs	r3, r3, r2
 8014fa0:	42ab      	cmp	r3, r5
 8014fa2:	dc26      	bgt.n	8014ff2 <_printf_common+0x96>
 8014fa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014fa8:	1e13      	subs	r3, r2, #0
 8014faa:	6822      	ldr	r2, [r4, #0]
 8014fac:	bf18      	it	ne
 8014fae:	2301      	movne	r3, #1
 8014fb0:	0692      	lsls	r2, r2, #26
 8014fb2:	d42b      	bmi.n	801500c <_printf_common+0xb0>
 8014fb4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014fb8:	4649      	mov	r1, r9
 8014fba:	4638      	mov	r0, r7
 8014fbc:	47c0      	blx	r8
 8014fbe:	3001      	adds	r0, #1
 8014fc0:	d01e      	beq.n	8015000 <_printf_common+0xa4>
 8014fc2:	6823      	ldr	r3, [r4, #0]
 8014fc4:	68e5      	ldr	r5, [r4, #12]
 8014fc6:	6832      	ldr	r2, [r6, #0]
 8014fc8:	f003 0306 	and.w	r3, r3, #6
 8014fcc:	2b04      	cmp	r3, #4
 8014fce:	bf08      	it	eq
 8014fd0:	1aad      	subeq	r5, r5, r2
 8014fd2:	68a3      	ldr	r3, [r4, #8]
 8014fd4:	6922      	ldr	r2, [r4, #16]
 8014fd6:	bf0c      	ite	eq
 8014fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014fdc:	2500      	movne	r5, #0
 8014fde:	4293      	cmp	r3, r2
 8014fe0:	bfc4      	itt	gt
 8014fe2:	1a9b      	subgt	r3, r3, r2
 8014fe4:	18ed      	addgt	r5, r5, r3
 8014fe6:	2600      	movs	r6, #0
 8014fe8:	341a      	adds	r4, #26
 8014fea:	42b5      	cmp	r5, r6
 8014fec:	d11a      	bne.n	8015024 <_printf_common+0xc8>
 8014fee:	2000      	movs	r0, #0
 8014ff0:	e008      	b.n	8015004 <_printf_common+0xa8>
 8014ff2:	2301      	movs	r3, #1
 8014ff4:	4652      	mov	r2, sl
 8014ff6:	4649      	mov	r1, r9
 8014ff8:	4638      	mov	r0, r7
 8014ffa:	47c0      	blx	r8
 8014ffc:	3001      	adds	r0, #1
 8014ffe:	d103      	bne.n	8015008 <_printf_common+0xac>
 8015000:	f04f 30ff 	mov.w	r0, #4294967295
 8015004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015008:	3501      	adds	r5, #1
 801500a:	e7c6      	b.n	8014f9a <_printf_common+0x3e>
 801500c:	18e1      	adds	r1, r4, r3
 801500e:	1c5a      	adds	r2, r3, #1
 8015010:	2030      	movs	r0, #48	; 0x30
 8015012:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015016:	4422      	add	r2, r4
 8015018:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801501c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015020:	3302      	adds	r3, #2
 8015022:	e7c7      	b.n	8014fb4 <_printf_common+0x58>
 8015024:	2301      	movs	r3, #1
 8015026:	4622      	mov	r2, r4
 8015028:	4649      	mov	r1, r9
 801502a:	4638      	mov	r0, r7
 801502c:	47c0      	blx	r8
 801502e:	3001      	adds	r0, #1
 8015030:	d0e6      	beq.n	8015000 <_printf_common+0xa4>
 8015032:	3601      	adds	r6, #1
 8015034:	e7d9      	b.n	8014fea <_printf_common+0x8e>
	...

08015038 <_printf_i>:
 8015038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801503c:	7e0f      	ldrb	r7, [r1, #24]
 801503e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015040:	2f78      	cmp	r7, #120	; 0x78
 8015042:	4691      	mov	r9, r2
 8015044:	4680      	mov	r8, r0
 8015046:	460c      	mov	r4, r1
 8015048:	469a      	mov	sl, r3
 801504a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801504e:	d807      	bhi.n	8015060 <_printf_i+0x28>
 8015050:	2f62      	cmp	r7, #98	; 0x62
 8015052:	d80a      	bhi.n	801506a <_printf_i+0x32>
 8015054:	2f00      	cmp	r7, #0
 8015056:	f000 80d8 	beq.w	801520a <_printf_i+0x1d2>
 801505a:	2f58      	cmp	r7, #88	; 0x58
 801505c:	f000 80a3 	beq.w	80151a6 <_printf_i+0x16e>
 8015060:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015064:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015068:	e03a      	b.n	80150e0 <_printf_i+0xa8>
 801506a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801506e:	2b15      	cmp	r3, #21
 8015070:	d8f6      	bhi.n	8015060 <_printf_i+0x28>
 8015072:	a101      	add	r1, pc, #4	; (adr r1, 8015078 <_printf_i+0x40>)
 8015074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015078:	080150d1 	.word	0x080150d1
 801507c:	080150e5 	.word	0x080150e5
 8015080:	08015061 	.word	0x08015061
 8015084:	08015061 	.word	0x08015061
 8015088:	08015061 	.word	0x08015061
 801508c:	08015061 	.word	0x08015061
 8015090:	080150e5 	.word	0x080150e5
 8015094:	08015061 	.word	0x08015061
 8015098:	08015061 	.word	0x08015061
 801509c:	08015061 	.word	0x08015061
 80150a0:	08015061 	.word	0x08015061
 80150a4:	080151f1 	.word	0x080151f1
 80150a8:	08015115 	.word	0x08015115
 80150ac:	080151d3 	.word	0x080151d3
 80150b0:	08015061 	.word	0x08015061
 80150b4:	08015061 	.word	0x08015061
 80150b8:	08015213 	.word	0x08015213
 80150bc:	08015061 	.word	0x08015061
 80150c0:	08015115 	.word	0x08015115
 80150c4:	08015061 	.word	0x08015061
 80150c8:	08015061 	.word	0x08015061
 80150cc:	080151db 	.word	0x080151db
 80150d0:	682b      	ldr	r3, [r5, #0]
 80150d2:	1d1a      	adds	r2, r3, #4
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	602a      	str	r2, [r5, #0]
 80150d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80150dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80150e0:	2301      	movs	r3, #1
 80150e2:	e0a3      	b.n	801522c <_printf_i+0x1f4>
 80150e4:	6820      	ldr	r0, [r4, #0]
 80150e6:	6829      	ldr	r1, [r5, #0]
 80150e8:	0606      	lsls	r6, r0, #24
 80150ea:	f101 0304 	add.w	r3, r1, #4
 80150ee:	d50a      	bpl.n	8015106 <_printf_i+0xce>
 80150f0:	680e      	ldr	r6, [r1, #0]
 80150f2:	602b      	str	r3, [r5, #0]
 80150f4:	2e00      	cmp	r6, #0
 80150f6:	da03      	bge.n	8015100 <_printf_i+0xc8>
 80150f8:	232d      	movs	r3, #45	; 0x2d
 80150fa:	4276      	negs	r6, r6
 80150fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015100:	485e      	ldr	r0, [pc, #376]	; (801527c <_printf_i+0x244>)
 8015102:	230a      	movs	r3, #10
 8015104:	e019      	b.n	801513a <_printf_i+0x102>
 8015106:	680e      	ldr	r6, [r1, #0]
 8015108:	602b      	str	r3, [r5, #0]
 801510a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801510e:	bf18      	it	ne
 8015110:	b236      	sxthne	r6, r6
 8015112:	e7ef      	b.n	80150f4 <_printf_i+0xbc>
 8015114:	682b      	ldr	r3, [r5, #0]
 8015116:	6820      	ldr	r0, [r4, #0]
 8015118:	1d19      	adds	r1, r3, #4
 801511a:	6029      	str	r1, [r5, #0]
 801511c:	0601      	lsls	r1, r0, #24
 801511e:	d501      	bpl.n	8015124 <_printf_i+0xec>
 8015120:	681e      	ldr	r6, [r3, #0]
 8015122:	e002      	b.n	801512a <_printf_i+0xf2>
 8015124:	0646      	lsls	r6, r0, #25
 8015126:	d5fb      	bpl.n	8015120 <_printf_i+0xe8>
 8015128:	881e      	ldrh	r6, [r3, #0]
 801512a:	4854      	ldr	r0, [pc, #336]	; (801527c <_printf_i+0x244>)
 801512c:	2f6f      	cmp	r7, #111	; 0x6f
 801512e:	bf0c      	ite	eq
 8015130:	2308      	moveq	r3, #8
 8015132:	230a      	movne	r3, #10
 8015134:	2100      	movs	r1, #0
 8015136:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801513a:	6865      	ldr	r5, [r4, #4]
 801513c:	60a5      	str	r5, [r4, #8]
 801513e:	2d00      	cmp	r5, #0
 8015140:	bfa2      	ittt	ge
 8015142:	6821      	ldrge	r1, [r4, #0]
 8015144:	f021 0104 	bicge.w	r1, r1, #4
 8015148:	6021      	strge	r1, [r4, #0]
 801514a:	b90e      	cbnz	r6, 8015150 <_printf_i+0x118>
 801514c:	2d00      	cmp	r5, #0
 801514e:	d04d      	beq.n	80151ec <_printf_i+0x1b4>
 8015150:	4615      	mov	r5, r2
 8015152:	fbb6 f1f3 	udiv	r1, r6, r3
 8015156:	fb03 6711 	mls	r7, r3, r1, r6
 801515a:	5dc7      	ldrb	r7, [r0, r7]
 801515c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015160:	4637      	mov	r7, r6
 8015162:	42bb      	cmp	r3, r7
 8015164:	460e      	mov	r6, r1
 8015166:	d9f4      	bls.n	8015152 <_printf_i+0x11a>
 8015168:	2b08      	cmp	r3, #8
 801516a:	d10b      	bne.n	8015184 <_printf_i+0x14c>
 801516c:	6823      	ldr	r3, [r4, #0]
 801516e:	07de      	lsls	r6, r3, #31
 8015170:	d508      	bpl.n	8015184 <_printf_i+0x14c>
 8015172:	6923      	ldr	r3, [r4, #16]
 8015174:	6861      	ldr	r1, [r4, #4]
 8015176:	4299      	cmp	r1, r3
 8015178:	bfde      	ittt	le
 801517a:	2330      	movle	r3, #48	; 0x30
 801517c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015180:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015184:	1b52      	subs	r2, r2, r5
 8015186:	6122      	str	r2, [r4, #16]
 8015188:	f8cd a000 	str.w	sl, [sp]
 801518c:	464b      	mov	r3, r9
 801518e:	aa03      	add	r2, sp, #12
 8015190:	4621      	mov	r1, r4
 8015192:	4640      	mov	r0, r8
 8015194:	f7ff fee2 	bl	8014f5c <_printf_common>
 8015198:	3001      	adds	r0, #1
 801519a:	d14c      	bne.n	8015236 <_printf_i+0x1fe>
 801519c:	f04f 30ff 	mov.w	r0, #4294967295
 80151a0:	b004      	add	sp, #16
 80151a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151a6:	4835      	ldr	r0, [pc, #212]	; (801527c <_printf_i+0x244>)
 80151a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80151ac:	6829      	ldr	r1, [r5, #0]
 80151ae:	6823      	ldr	r3, [r4, #0]
 80151b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80151b4:	6029      	str	r1, [r5, #0]
 80151b6:	061d      	lsls	r5, r3, #24
 80151b8:	d514      	bpl.n	80151e4 <_printf_i+0x1ac>
 80151ba:	07df      	lsls	r7, r3, #31
 80151bc:	bf44      	itt	mi
 80151be:	f043 0320 	orrmi.w	r3, r3, #32
 80151c2:	6023      	strmi	r3, [r4, #0]
 80151c4:	b91e      	cbnz	r6, 80151ce <_printf_i+0x196>
 80151c6:	6823      	ldr	r3, [r4, #0]
 80151c8:	f023 0320 	bic.w	r3, r3, #32
 80151cc:	6023      	str	r3, [r4, #0]
 80151ce:	2310      	movs	r3, #16
 80151d0:	e7b0      	b.n	8015134 <_printf_i+0xfc>
 80151d2:	6823      	ldr	r3, [r4, #0]
 80151d4:	f043 0320 	orr.w	r3, r3, #32
 80151d8:	6023      	str	r3, [r4, #0]
 80151da:	2378      	movs	r3, #120	; 0x78
 80151dc:	4828      	ldr	r0, [pc, #160]	; (8015280 <_printf_i+0x248>)
 80151de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80151e2:	e7e3      	b.n	80151ac <_printf_i+0x174>
 80151e4:	0659      	lsls	r1, r3, #25
 80151e6:	bf48      	it	mi
 80151e8:	b2b6      	uxthmi	r6, r6
 80151ea:	e7e6      	b.n	80151ba <_printf_i+0x182>
 80151ec:	4615      	mov	r5, r2
 80151ee:	e7bb      	b.n	8015168 <_printf_i+0x130>
 80151f0:	682b      	ldr	r3, [r5, #0]
 80151f2:	6826      	ldr	r6, [r4, #0]
 80151f4:	6961      	ldr	r1, [r4, #20]
 80151f6:	1d18      	adds	r0, r3, #4
 80151f8:	6028      	str	r0, [r5, #0]
 80151fa:	0635      	lsls	r5, r6, #24
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	d501      	bpl.n	8015204 <_printf_i+0x1cc>
 8015200:	6019      	str	r1, [r3, #0]
 8015202:	e002      	b.n	801520a <_printf_i+0x1d2>
 8015204:	0670      	lsls	r0, r6, #25
 8015206:	d5fb      	bpl.n	8015200 <_printf_i+0x1c8>
 8015208:	8019      	strh	r1, [r3, #0]
 801520a:	2300      	movs	r3, #0
 801520c:	6123      	str	r3, [r4, #16]
 801520e:	4615      	mov	r5, r2
 8015210:	e7ba      	b.n	8015188 <_printf_i+0x150>
 8015212:	682b      	ldr	r3, [r5, #0]
 8015214:	1d1a      	adds	r2, r3, #4
 8015216:	602a      	str	r2, [r5, #0]
 8015218:	681d      	ldr	r5, [r3, #0]
 801521a:	6862      	ldr	r2, [r4, #4]
 801521c:	2100      	movs	r1, #0
 801521e:	4628      	mov	r0, r5
 8015220:	f7ea ffde 	bl	80001e0 <memchr>
 8015224:	b108      	cbz	r0, 801522a <_printf_i+0x1f2>
 8015226:	1b40      	subs	r0, r0, r5
 8015228:	6060      	str	r0, [r4, #4]
 801522a:	6863      	ldr	r3, [r4, #4]
 801522c:	6123      	str	r3, [r4, #16]
 801522e:	2300      	movs	r3, #0
 8015230:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015234:	e7a8      	b.n	8015188 <_printf_i+0x150>
 8015236:	6923      	ldr	r3, [r4, #16]
 8015238:	462a      	mov	r2, r5
 801523a:	4649      	mov	r1, r9
 801523c:	4640      	mov	r0, r8
 801523e:	47d0      	blx	sl
 8015240:	3001      	adds	r0, #1
 8015242:	d0ab      	beq.n	801519c <_printf_i+0x164>
 8015244:	6823      	ldr	r3, [r4, #0]
 8015246:	079b      	lsls	r3, r3, #30
 8015248:	d413      	bmi.n	8015272 <_printf_i+0x23a>
 801524a:	68e0      	ldr	r0, [r4, #12]
 801524c:	9b03      	ldr	r3, [sp, #12]
 801524e:	4298      	cmp	r0, r3
 8015250:	bfb8      	it	lt
 8015252:	4618      	movlt	r0, r3
 8015254:	e7a4      	b.n	80151a0 <_printf_i+0x168>
 8015256:	2301      	movs	r3, #1
 8015258:	4632      	mov	r2, r6
 801525a:	4649      	mov	r1, r9
 801525c:	4640      	mov	r0, r8
 801525e:	47d0      	blx	sl
 8015260:	3001      	adds	r0, #1
 8015262:	d09b      	beq.n	801519c <_printf_i+0x164>
 8015264:	3501      	adds	r5, #1
 8015266:	68e3      	ldr	r3, [r4, #12]
 8015268:	9903      	ldr	r1, [sp, #12]
 801526a:	1a5b      	subs	r3, r3, r1
 801526c:	42ab      	cmp	r3, r5
 801526e:	dcf2      	bgt.n	8015256 <_printf_i+0x21e>
 8015270:	e7eb      	b.n	801524a <_printf_i+0x212>
 8015272:	2500      	movs	r5, #0
 8015274:	f104 0619 	add.w	r6, r4, #25
 8015278:	e7f5      	b.n	8015266 <_printf_i+0x22e>
 801527a:	bf00      	nop
 801527c:	08017786 	.word	0x08017786
 8015280:	08017797 	.word	0x08017797

08015284 <cleanup_glue>:
 8015284:	b538      	push	{r3, r4, r5, lr}
 8015286:	460c      	mov	r4, r1
 8015288:	6809      	ldr	r1, [r1, #0]
 801528a:	4605      	mov	r5, r0
 801528c:	b109      	cbz	r1, 8015292 <cleanup_glue+0xe>
 801528e:	f7ff fff9 	bl	8015284 <cleanup_glue>
 8015292:	4621      	mov	r1, r4
 8015294:	4628      	mov	r0, r5
 8015296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801529a:	f7ff baa9 	b.w	80147f0 <_free_r>
	...

080152a0 <_reclaim_reent>:
 80152a0:	4b2c      	ldr	r3, [pc, #176]	; (8015354 <_reclaim_reent+0xb4>)
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	4283      	cmp	r3, r0
 80152a6:	b570      	push	{r4, r5, r6, lr}
 80152a8:	4604      	mov	r4, r0
 80152aa:	d051      	beq.n	8015350 <_reclaim_reent+0xb0>
 80152ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80152ae:	b143      	cbz	r3, 80152c2 <_reclaim_reent+0x22>
 80152b0:	68db      	ldr	r3, [r3, #12]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d14a      	bne.n	801534c <_reclaim_reent+0xac>
 80152b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80152b8:	6819      	ldr	r1, [r3, #0]
 80152ba:	b111      	cbz	r1, 80152c2 <_reclaim_reent+0x22>
 80152bc:	4620      	mov	r0, r4
 80152be:	f7ff fa97 	bl	80147f0 <_free_r>
 80152c2:	6961      	ldr	r1, [r4, #20]
 80152c4:	b111      	cbz	r1, 80152cc <_reclaim_reent+0x2c>
 80152c6:	4620      	mov	r0, r4
 80152c8:	f7ff fa92 	bl	80147f0 <_free_r>
 80152cc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80152ce:	b111      	cbz	r1, 80152d6 <_reclaim_reent+0x36>
 80152d0:	4620      	mov	r0, r4
 80152d2:	f7ff fa8d 	bl	80147f0 <_free_r>
 80152d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80152d8:	b111      	cbz	r1, 80152e0 <_reclaim_reent+0x40>
 80152da:	4620      	mov	r0, r4
 80152dc:	f7ff fa88 	bl	80147f0 <_free_r>
 80152e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80152e2:	b111      	cbz	r1, 80152ea <_reclaim_reent+0x4a>
 80152e4:	4620      	mov	r0, r4
 80152e6:	f7ff fa83 	bl	80147f0 <_free_r>
 80152ea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80152ec:	b111      	cbz	r1, 80152f4 <_reclaim_reent+0x54>
 80152ee:	4620      	mov	r0, r4
 80152f0:	f7ff fa7e 	bl	80147f0 <_free_r>
 80152f4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80152f6:	b111      	cbz	r1, 80152fe <_reclaim_reent+0x5e>
 80152f8:	4620      	mov	r0, r4
 80152fa:	f7ff fa79 	bl	80147f0 <_free_r>
 80152fe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015300:	b111      	cbz	r1, 8015308 <_reclaim_reent+0x68>
 8015302:	4620      	mov	r0, r4
 8015304:	f7ff fa74 	bl	80147f0 <_free_r>
 8015308:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801530a:	b111      	cbz	r1, 8015312 <_reclaim_reent+0x72>
 801530c:	4620      	mov	r0, r4
 801530e:	f7ff fa6f 	bl	80147f0 <_free_r>
 8015312:	69a3      	ldr	r3, [r4, #24]
 8015314:	b1e3      	cbz	r3, 8015350 <_reclaim_reent+0xb0>
 8015316:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8015318:	4620      	mov	r0, r4
 801531a:	4798      	blx	r3
 801531c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801531e:	b1b9      	cbz	r1, 8015350 <_reclaim_reent+0xb0>
 8015320:	4620      	mov	r0, r4
 8015322:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015326:	f7ff bfad 	b.w	8015284 <cleanup_glue>
 801532a:	5949      	ldr	r1, [r1, r5]
 801532c:	b941      	cbnz	r1, 8015340 <_reclaim_reent+0xa0>
 801532e:	3504      	adds	r5, #4
 8015330:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015332:	2d80      	cmp	r5, #128	; 0x80
 8015334:	68d9      	ldr	r1, [r3, #12]
 8015336:	d1f8      	bne.n	801532a <_reclaim_reent+0x8a>
 8015338:	4620      	mov	r0, r4
 801533a:	f7ff fa59 	bl	80147f0 <_free_r>
 801533e:	e7ba      	b.n	80152b6 <_reclaim_reent+0x16>
 8015340:	680e      	ldr	r6, [r1, #0]
 8015342:	4620      	mov	r0, r4
 8015344:	f7ff fa54 	bl	80147f0 <_free_r>
 8015348:	4631      	mov	r1, r6
 801534a:	e7ef      	b.n	801532c <_reclaim_reent+0x8c>
 801534c:	2500      	movs	r5, #0
 801534e:	e7ef      	b.n	8015330 <_reclaim_reent+0x90>
 8015350:	bd70      	pop	{r4, r5, r6, pc}
 8015352:	bf00      	nop
 8015354:	20000030 	.word	0x20000030

08015358 <_sbrk_r>:
 8015358:	b538      	push	{r3, r4, r5, lr}
 801535a:	4d06      	ldr	r5, [pc, #24]	; (8015374 <_sbrk_r+0x1c>)
 801535c:	2300      	movs	r3, #0
 801535e:	4604      	mov	r4, r0
 8015360:	4608      	mov	r0, r1
 8015362:	602b      	str	r3, [r5, #0]
 8015364:	f7f4 fd7c 	bl	8009e60 <_sbrk>
 8015368:	1c43      	adds	r3, r0, #1
 801536a:	d102      	bne.n	8015372 <_sbrk_r+0x1a>
 801536c:	682b      	ldr	r3, [r5, #0]
 801536e:	b103      	cbz	r3, 8015372 <_sbrk_r+0x1a>
 8015370:	6023      	str	r3, [r4, #0]
 8015372:	bd38      	pop	{r3, r4, r5, pc}
 8015374:	2000a2b0 	.word	0x2000a2b0

08015378 <_raise_r>:
 8015378:	291f      	cmp	r1, #31
 801537a:	b538      	push	{r3, r4, r5, lr}
 801537c:	4604      	mov	r4, r0
 801537e:	460d      	mov	r5, r1
 8015380:	d904      	bls.n	801538c <_raise_r+0x14>
 8015382:	2316      	movs	r3, #22
 8015384:	6003      	str	r3, [r0, #0]
 8015386:	f04f 30ff 	mov.w	r0, #4294967295
 801538a:	bd38      	pop	{r3, r4, r5, pc}
 801538c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801538e:	b112      	cbz	r2, 8015396 <_raise_r+0x1e>
 8015390:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015394:	b94b      	cbnz	r3, 80153aa <_raise_r+0x32>
 8015396:	4620      	mov	r0, r4
 8015398:	f000 f830 	bl	80153fc <_getpid_r>
 801539c:	462a      	mov	r2, r5
 801539e:	4601      	mov	r1, r0
 80153a0:	4620      	mov	r0, r4
 80153a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80153a6:	f000 b817 	b.w	80153d8 <_kill_r>
 80153aa:	2b01      	cmp	r3, #1
 80153ac:	d00a      	beq.n	80153c4 <_raise_r+0x4c>
 80153ae:	1c59      	adds	r1, r3, #1
 80153b0:	d103      	bne.n	80153ba <_raise_r+0x42>
 80153b2:	2316      	movs	r3, #22
 80153b4:	6003      	str	r3, [r0, #0]
 80153b6:	2001      	movs	r0, #1
 80153b8:	e7e7      	b.n	801538a <_raise_r+0x12>
 80153ba:	2400      	movs	r4, #0
 80153bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80153c0:	4628      	mov	r0, r5
 80153c2:	4798      	blx	r3
 80153c4:	2000      	movs	r0, #0
 80153c6:	e7e0      	b.n	801538a <_raise_r+0x12>

080153c8 <raise>:
 80153c8:	4b02      	ldr	r3, [pc, #8]	; (80153d4 <raise+0xc>)
 80153ca:	4601      	mov	r1, r0
 80153cc:	6818      	ldr	r0, [r3, #0]
 80153ce:	f7ff bfd3 	b.w	8015378 <_raise_r>
 80153d2:	bf00      	nop
 80153d4:	20000030 	.word	0x20000030

080153d8 <_kill_r>:
 80153d8:	b538      	push	{r3, r4, r5, lr}
 80153da:	4d07      	ldr	r5, [pc, #28]	; (80153f8 <_kill_r+0x20>)
 80153dc:	2300      	movs	r3, #0
 80153de:	4604      	mov	r4, r0
 80153e0:	4608      	mov	r0, r1
 80153e2:	4611      	mov	r1, r2
 80153e4:	602b      	str	r3, [r5, #0]
 80153e6:	f7f4 fcb3 	bl	8009d50 <_kill>
 80153ea:	1c43      	adds	r3, r0, #1
 80153ec:	d102      	bne.n	80153f4 <_kill_r+0x1c>
 80153ee:	682b      	ldr	r3, [r5, #0]
 80153f0:	b103      	cbz	r3, 80153f4 <_kill_r+0x1c>
 80153f2:	6023      	str	r3, [r4, #0]
 80153f4:	bd38      	pop	{r3, r4, r5, pc}
 80153f6:	bf00      	nop
 80153f8:	2000a2b0 	.word	0x2000a2b0

080153fc <_getpid_r>:
 80153fc:	f7f4 bca0 	b.w	8009d40 <_getpid>

08015400 <__sread>:
 8015400:	b510      	push	{r4, lr}
 8015402:	460c      	mov	r4, r1
 8015404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015408:	f001 fbba 	bl	8016b80 <_read_r>
 801540c:	2800      	cmp	r0, #0
 801540e:	bfab      	itete	ge
 8015410:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015412:	89a3      	ldrhlt	r3, [r4, #12]
 8015414:	181b      	addge	r3, r3, r0
 8015416:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801541a:	bfac      	ite	ge
 801541c:	6563      	strge	r3, [r4, #84]	; 0x54
 801541e:	81a3      	strhlt	r3, [r4, #12]
 8015420:	bd10      	pop	{r4, pc}

08015422 <__swrite>:
 8015422:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015426:	461f      	mov	r7, r3
 8015428:	898b      	ldrh	r3, [r1, #12]
 801542a:	05db      	lsls	r3, r3, #23
 801542c:	4605      	mov	r5, r0
 801542e:	460c      	mov	r4, r1
 8015430:	4616      	mov	r6, r2
 8015432:	d505      	bpl.n	8015440 <__swrite+0x1e>
 8015434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015438:	2302      	movs	r3, #2
 801543a:	2200      	movs	r2, #0
 801543c:	f000 ffe8 	bl	8016410 <_lseek_r>
 8015440:	89a3      	ldrh	r3, [r4, #12]
 8015442:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015446:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801544a:	81a3      	strh	r3, [r4, #12]
 801544c:	4632      	mov	r2, r6
 801544e:	463b      	mov	r3, r7
 8015450:	4628      	mov	r0, r5
 8015452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015456:	f000 b817 	b.w	8015488 <_write_r>

0801545a <__sseek>:
 801545a:	b510      	push	{r4, lr}
 801545c:	460c      	mov	r4, r1
 801545e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015462:	f000 ffd5 	bl	8016410 <_lseek_r>
 8015466:	1c43      	adds	r3, r0, #1
 8015468:	89a3      	ldrh	r3, [r4, #12]
 801546a:	bf15      	itete	ne
 801546c:	6560      	strne	r0, [r4, #84]	; 0x54
 801546e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015472:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015476:	81a3      	strheq	r3, [r4, #12]
 8015478:	bf18      	it	ne
 801547a:	81a3      	strhne	r3, [r4, #12]
 801547c:	bd10      	pop	{r4, pc}

0801547e <__sclose>:
 801547e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015482:	f000 b875 	b.w	8015570 <_close_r>
	...

08015488 <_write_r>:
 8015488:	b538      	push	{r3, r4, r5, lr}
 801548a:	4d07      	ldr	r5, [pc, #28]	; (80154a8 <_write_r+0x20>)
 801548c:	4604      	mov	r4, r0
 801548e:	4608      	mov	r0, r1
 8015490:	4611      	mov	r1, r2
 8015492:	2200      	movs	r2, #0
 8015494:	602a      	str	r2, [r5, #0]
 8015496:	461a      	mov	r2, r3
 8015498:	f7f4 fc91 	bl	8009dbe <_write>
 801549c:	1c43      	adds	r3, r0, #1
 801549e:	d102      	bne.n	80154a6 <_write_r+0x1e>
 80154a0:	682b      	ldr	r3, [r5, #0]
 80154a2:	b103      	cbz	r3, 80154a6 <_write_r+0x1e>
 80154a4:	6023      	str	r3, [r4, #0]
 80154a6:	bd38      	pop	{r3, r4, r5, pc}
 80154a8:	2000a2b0 	.word	0x2000a2b0

080154ac <__register_exitproc>:
 80154ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80154b0:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801556c <__register_exitproc+0xc0>
 80154b4:	4606      	mov	r6, r0
 80154b6:	f8d8 0000 	ldr.w	r0, [r8]
 80154ba:	461f      	mov	r7, r3
 80154bc:	460d      	mov	r5, r1
 80154be:	4691      	mov	r9, r2
 80154c0:	f7ff f975 	bl	80147ae <__retarget_lock_acquire_recursive>
 80154c4:	4b25      	ldr	r3, [pc, #148]	; (801555c <__register_exitproc+0xb0>)
 80154c6:	681c      	ldr	r4, [r3, #0]
 80154c8:	b934      	cbnz	r4, 80154d8 <__register_exitproc+0x2c>
 80154ca:	4c25      	ldr	r4, [pc, #148]	; (8015560 <__register_exitproc+0xb4>)
 80154cc:	601c      	str	r4, [r3, #0]
 80154ce:	4b25      	ldr	r3, [pc, #148]	; (8015564 <__register_exitproc+0xb8>)
 80154d0:	b113      	cbz	r3, 80154d8 <__register_exitproc+0x2c>
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80154d8:	6863      	ldr	r3, [r4, #4]
 80154da:	2b1f      	cmp	r3, #31
 80154dc:	dd07      	ble.n	80154ee <__register_exitproc+0x42>
 80154de:	f8d8 0000 	ldr.w	r0, [r8]
 80154e2:	f7ff f966 	bl	80147b2 <__retarget_lock_release_recursive>
 80154e6:	f04f 30ff 	mov.w	r0, #4294967295
 80154ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80154ee:	b34e      	cbz	r6, 8015544 <__register_exitproc+0x98>
 80154f0:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80154f4:	b988      	cbnz	r0, 801551a <__register_exitproc+0x6e>
 80154f6:	4b1c      	ldr	r3, [pc, #112]	; (8015568 <__register_exitproc+0xbc>)
 80154f8:	b923      	cbnz	r3, 8015504 <__register_exitproc+0x58>
 80154fa:	f8d8 0000 	ldr.w	r0, [r8]
 80154fe:	f7ff f957 	bl	80147b0 <__retarget_lock_release>
 8015502:	e7f0      	b.n	80154e6 <__register_exitproc+0x3a>
 8015504:	f44f 7084 	mov.w	r0, #264	; 0x108
 8015508:	f7ff f954 	bl	80147b4 <malloc>
 801550c:	2800      	cmp	r0, #0
 801550e:	d0f4      	beq.n	80154fa <__register_exitproc+0x4e>
 8015510:	2300      	movs	r3, #0
 8015512:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8015516:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801551a:	6863      	ldr	r3, [r4, #4]
 801551c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8015520:	2201      	movs	r2, #1
 8015522:	409a      	lsls	r2, r3
 8015524:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8015528:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801552c:	4313      	orrs	r3, r2
 801552e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8015532:	2e02      	cmp	r6, #2
 8015534:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8015538:	bf02      	ittt	eq
 801553a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801553e:	4313      	orreq	r3, r2
 8015540:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8015544:	6863      	ldr	r3, [r4, #4]
 8015546:	f8d8 0000 	ldr.w	r0, [r8]
 801554a:	1c5a      	adds	r2, r3, #1
 801554c:	3302      	adds	r3, #2
 801554e:	6062      	str	r2, [r4, #4]
 8015550:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8015554:	f7ff f92d 	bl	80147b2 <__retarget_lock_release_recursive>
 8015558:	2000      	movs	r0, #0
 801555a:	e7c6      	b.n	80154ea <__register_exitproc+0x3e>
 801555c:	2000a340 	.word	0x2000a340
 8015560:	2000a2b4 	.word	0x2000a2b4
 8015564:	00000000 	.word	0x00000000
 8015568:	080147b5 	.word	0x080147b5
 801556c:	20000094 	.word	0x20000094

08015570 <_close_r>:
 8015570:	b538      	push	{r3, r4, r5, lr}
 8015572:	4d06      	ldr	r5, [pc, #24]	; (801558c <_close_r+0x1c>)
 8015574:	2300      	movs	r3, #0
 8015576:	4604      	mov	r4, r0
 8015578:	4608      	mov	r0, r1
 801557a:	602b      	str	r3, [r5, #0]
 801557c:	f7f4 fc3b 	bl	8009df6 <_close>
 8015580:	1c43      	adds	r3, r0, #1
 8015582:	d102      	bne.n	801558a <_close_r+0x1a>
 8015584:	682b      	ldr	r3, [r5, #0]
 8015586:	b103      	cbz	r3, 801558a <_close_r+0x1a>
 8015588:	6023      	str	r3, [r4, #0]
 801558a:	bd38      	pop	{r3, r4, r5, pc}
 801558c:	2000a2b0 	.word	0x2000a2b0

08015590 <quorem>:
 8015590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015594:	6903      	ldr	r3, [r0, #16]
 8015596:	690c      	ldr	r4, [r1, #16]
 8015598:	42a3      	cmp	r3, r4
 801559a:	4607      	mov	r7, r0
 801559c:	f2c0 8081 	blt.w	80156a2 <quorem+0x112>
 80155a0:	3c01      	subs	r4, #1
 80155a2:	f101 0814 	add.w	r8, r1, #20
 80155a6:	f100 0514 	add.w	r5, r0, #20
 80155aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80155ae:	9301      	str	r3, [sp, #4]
 80155b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80155b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80155b8:	3301      	adds	r3, #1
 80155ba:	429a      	cmp	r2, r3
 80155bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80155c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80155c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80155c8:	d331      	bcc.n	801562e <quorem+0x9e>
 80155ca:	f04f 0e00 	mov.w	lr, #0
 80155ce:	4640      	mov	r0, r8
 80155d0:	46ac      	mov	ip, r5
 80155d2:	46f2      	mov	sl, lr
 80155d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80155d8:	b293      	uxth	r3, r2
 80155da:	fb06 e303 	mla	r3, r6, r3, lr
 80155de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80155e2:	b29b      	uxth	r3, r3
 80155e4:	ebaa 0303 	sub.w	r3, sl, r3
 80155e8:	f8dc a000 	ldr.w	sl, [ip]
 80155ec:	0c12      	lsrs	r2, r2, #16
 80155ee:	fa13 f38a 	uxtah	r3, r3, sl
 80155f2:	fb06 e202 	mla	r2, r6, r2, lr
 80155f6:	9300      	str	r3, [sp, #0]
 80155f8:	9b00      	ldr	r3, [sp, #0]
 80155fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80155fe:	b292      	uxth	r2, r2
 8015600:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8015604:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015608:	f8bd 3000 	ldrh.w	r3, [sp]
 801560c:	4581      	cmp	r9, r0
 801560e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015612:	f84c 3b04 	str.w	r3, [ip], #4
 8015616:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801561a:	d2db      	bcs.n	80155d4 <quorem+0x44>
 801561c:	f855 300b 	ldr.w	r3, [r5, fp]
 8015620:	b92b      	cbnz	r3, 801562e <quorem+0x9e>
 8015622:	9b01      	ldr	r3, [sp, #4]
 8015624:	3b04      	subs	r3, #4
 8015626:	429d      	cmp	r5, r3
 8015628:	461a      	mov	r2, r3
 801562a:	d32e      	bcc.n	801568a <quorem+0xfa>
 801562c:	613c      	str	r4, [r7, #16]
 801562e:	4638      	mov	r0, r7
 8015630:	f001 f98e 	bl	8016950 <__mcmp>
 8015634:	2800      	cmp	r0, #0
 8015636:	db24      	blt.n	8015682 <quorem+0xf2>
 8015638:	3601      	adds	r6, #1
 801563a:	4628      	mov	r0, r5
 801563c:	f04f 0c00 	mov.w	ip, #0
 8015640:	f858 2b04 	ldr.w	r2, [r8], #4
 8015644:	f8d0 e000 	ldr.w	lr, [r0]
 8015648:	b293      	uxth	r3, r2
 801564a:	ebac 0303 	sub.w	r3, ip, r3
 801564e:	0c12      	lsrs	r2, r2, #16
 8015650:	fa13 f38e 	uxtah	r3, r3, lr
 8015654:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015658:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801565c:	b29b      	uxth	r3, r3
 801565e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015662:	45c1      	cmp	r9, r8
 8015664:	f840 3b04 	str.w	r3, [r0], #4
 8015668:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801566c:	d2e8      	bcs.n	8015640 <quorem+0xb0>
 801566e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8015672:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8015676:	b922      	cbnz	r2, 8015682 <quorem+0xf2>
 8015678:	3b04      	subs	r3, #4
 801567a:	429d      	cmp	r5, r3
 801567c:	461a      	mov	r2, r3
 801567e:	d30a      	bcc.n	8015696 <quorem+0x106>
 8015680:	613c      	str	r4, [r7, #16]
 8015682:	4630      	mov	r0, r6
 8015684:	b003      	add	sp, #12
 8015686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801568a:	6812      	ldr	r2, [r2, #0]
 801568c:	3b04      	subs	r3, #4
 801568e:	2a00      	cmp	r2, #0
 8015690:	d1cc      	bne.n	801562c <quorem+0x9c>
 8015692:	3c01      	subs	r4, #1
 8015694:	e7c7      	b.n	8015626 <quorem+0x96>
 8015696:	6812      	ldr	r2, [r2, #0]
 8015698:	3b04      	subs	r3, #4
 801569a:	2a00      	cmp	r2, #0
 801569c:	d1f0      	bne.n	8015680 <quorem+0xf0>
 801569e:	3c01      	subs	r4, #1
 80156a0:	e7eb      	b.n	801567a <quorem+0xea>
 80156a2:	2000      	movs	r0, #0
 80156a4:	e7ee      	b.n	8015684 <quorem+0xf4>
	...

080156a8 <_dtoa_r>:
 80156a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156ac:	ed2d 8b04 	vpush	{d8-d9}
 80156b0:	ec57 6b10 	vmov	r6, r7, d0
 80156b4:	b093      	sub	sp, #76	; 0x4c
 80156b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80156b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80156bc:	9106      	str	r1, [sp, #24]
 80156be:	ee10 aa10 	vmov	sl, s0
 80156c2:	4604      	mov	r4, r0
 80156c4:	9209      	str	r2, [sp, #36]	; 0x24
 80156c6:	930c      	str	r3, [sp, #48]	; 0x30
 80156c8:	46bb      	mov	fp, r7
 80156ca:	b975      	cbnz	r5, 80156ea <_dtoa_r+0x42>
 80156cc:	2010      	movs	r0, #16
 80156ce:	f7ff f871 	bl	80147b4 <malloc>
 80156d2:	4602      	mov	r2, r0
 80156d4:	6260      	str	r0, [r4, #36]	; 0x24
 80156d6:	b920      	cbnz	r0, 80156e2 <_dtoa_r+0x3a>
 80156d8:	4ba7      	ldr	r3, [pc, #668]	; (8015978 <_dtoa_r+0x2d0>)
 80156da:	21ea      	movs	r1, #234	; 0xea
 80156dc:	48a7      	ldr	r0, [pc, #668]	; (801597c <_dtoa_r+0x2d4>)
 80156de:	f001 fa61 	bl	8016ba4 <__assert_func>
 80156e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80156e6:	6005      	str	r5, [r0, #0]
 80156e8:	60c5      	str	r5, [r0, #12]
 80156ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80156ec:	6819      	ldr	r1, [r3, #0]
 80156ee:	b151      	cbz	r1, 8015706 <_dtoa_r+0x5e>
 80156f0:	685a      	ldr	r2, [r3, #4]
 80156f2:	604a      	str	r2, [r1, #4]
 80156f4:	2301      	movs	r3, #1
 80156f6:	4093      	lsls	r3, r2
 80156f8:	608b      	str	r3, [r1, #8]
 80156fa:	4620      	mov	r0, r4
 80156fc:	f000 fee6 	bl	80164cc <_Bfree>
 8015700:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015702:	2200      	movs	r2, #0
 8015704:	601a      	str	r2, [r3, #0]
 8015706:	1e3b      	subs	r3, r7, #0
 8015708:	bfaa      	itet	ge
 801570a:	2300      	movge	r3, #0
 801570c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8015710:	f8c8 3000 	strge.w	r3, [r8]
 8015714:	4b9a      	ldr	r3, [pc, #616]	; (8015980 <_dtoa_r+0x2d8>)
 8015716:	bfbc      	itt	lt
 8015718:	2201      	movlt	r2, #1
 801571a:	f8c8 2000 	strlt.w	r2, [r8]
 801571e:	ea33 030b 	bics.w	r3, r3, fp
 8015722:	d11b      	bne.n	801575c <_dtoa_r+0xb4>
 8015724:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015726:	f242 730f 	movw	r3, #9999	; 0x270f
 801572a:	6013      	str	r3, [r2, #0]
 801572c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015730:	4333      	orrs	r3, r6
 8015732:	f000 8592 	beq.w	801625a <_dtoa_r+0xbb2>
 8015736:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015738:	b963      	cbnz	r3, 8015754 <_dtoa_r+0xac>
 801573a:	4b92      	ldr	r3, [pc, #584]	; (8015984 <_dtoa_r+0x2dc>)
 801573c:	e022      	b.n	8015784 <_dtoa_r+0xdc>
 801573e:	4b92      	ldr	r3, [pc, #584]	; (8015988 <_dtoa_r+0x2e0>)
 8015740:	9301      	str	r3, [sp, #4]
 8015742:	3308      	adds	r3, #8
 8015744:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015746:	6013      	str	r3, [r2, #0]
 8015748:	9801      	ldr	r0, [sp, #4]
 801574a:	b013      	add	sp, #76	; 0x4c
 801574c:	ecbd 8b04 	vpop	{d8-d9}
 8015750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015754:	4b8b      	ldr	r3, [pc, #556]	; (8015984 <_dtoa_r+0x2dc>)
 8015756:	9301      	str	r3, [sp, #4]
 8015758:	3303      	adds	r3, #3
 801575a:	e7f3      	b.n	8015744 <_dtoa_r+0x9c>
 801575c:	2200      	movs	r2, #0
 801575e:	2300      	movs	r3, #0
 8015760:	4650      	mov	r0, sl
 8015762:	4659      	mov	r1, fp
 8015764:	f7eb f9b0 	bl	8000ac8 <__aeabi_dcmpeq>
 8015768:	ec4b ab19 	vmov	d9, sl, fp
 801576c:	4680      	mov	r8, r0
 801576e:	b158      	cbz	r0, 8015788 <_dtoa_r+0xe0>
 8015770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015772:	2301      	movs	r3, #1
 8015774:	6013      	str	r3, [r2, #0]
 8015776:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015778:	2b00      	cmp	r3, #0
 801577a:	f000 856b 	beq.w	8016254 <_dtoa_r+0xbac>
 801577e:	4883      	ldr	r0, [pc, #524]	; (801598c <_dtoa_r+0x2e4>)
 8015780:	6018      	str	r0, [r3, #0]
 8015782:	1e43      	subs	r3, r0, #1
 8015784:	9301      	str	r3, [sp, #4]
 8015786:	e7df      	b.n	8015748 <_dtoa_r+0xa0>
 8015788:	ec4b ab10 	vmov	d0, sl, fp
 801578c:	aa10      	add	r2, sp, #64	; 0x40
 801578e:	a911      	add	r1, sp, #68	; 0x44
 8015790:	4620      	mov	r0, r4
 8015792:	f001 f983 	bl	8016a9c <__d2b>
 8015796:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801579a:	ee08 0a10 	vmov	s16, r0
 801579e:	2d00      	cmp	r5, #0
 80157a0:	f000 8084 	beq.w	80158ac <_dtoa_r+0x204>
 80157a4:	ee19 3a90 	vmov	r3, s19
 80157a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80157ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80157b0:	4656      	mov	r6, sl
 80157b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80157b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80157ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80157be:	4b74      	ldr	r3, [pc, #464]	; (8015990 <_dtoa_r+0x2e8>)
 80157c0:	2200      	movs	r2, #0
 80157c2:	4630      	mov	r0, r6
 80157c4:	4639      	mov	r1, r7
 80157c6:	f7ea fd5f 	bl	8000288 <__aeabi_dsub>
 80157ca:	a365      	add	r3, pc, #404	; (adr r3, 8015960 <_dtoa_r+0x2b8>)
 80157cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157d0:	f7ea ff12 	bl	80005f8 <__aeabi_dmul>
 80157d4:	a364      	add	r3, pc, #400	; (adr r3, 8015968 <_dtoa_r+0x2c0>)
 80157d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157da:	f7ea fd57 	bl	800028c <__adddf3>
 80157de:	4606      	mov	r6, r0
 80157e0:	4628      	mov	r0, r5
 80157e2:	460f      	mov	r7, r1
 80157e4:	f7ea fe9e 	bl	8000524 <__aeabi_i2d>
 80157e8:	a361      	add	r3, pc, #388	; (adr r3, 8015970 <_dtoa_r+0x2c8>)
 80157ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ee:	f7ea ff03 	bl	80005f8 <__aeabi_dmul>
 80157f2:	4602      	mov	r2, r0
 80157f4:	460b      	mov	r3, r1
 80157f6:	4630      	mov	r0, r6
 80157f8:	4639      	mov	r1, r7
 80157fa:	f7ea fd47 	bl	800028c <__adddf3>
 80157fe:	4606      	mov	r6, r0
 8015800:	460f      	mov	r7, r1
 8015802:	f7eb f9a9 	bl	8000b58 <__aeabi_d2iz>
 8015806:	2200      	movs	r2, #0
 8015808:	9000      	str	r0, [sp, #0]
 801580a:	2300      	movs	r3, #0
 801580c:	4630      	mov	r0, r6
 801580e:	4639      	mov	r1, r7
 8015810:	f7eb f964 	bl	8000adc <__aeabi_dcmplt>
 8015814:	b150      	cbz	r0, 801582c <_dtoa_r+0x184>
 8015816:	9800      	ldr	r0, [sp, #0]
 8015818:	f7ea fe84 	bl	8000524 <__aeabi_i2d>
 801581c:	4632      	mov	r2, r6
 801581e:	463b      	mov	r3, r7
 8015820:	f7eb f952 	bl	8000ac8 <__aeabi_dcmpeq>
 8015824:	b910      	cbnz	r0, 801582c <_dtoa_r+0x184>
 8015826:	9b00      	ldr	r3, [sp, #0]
 8015828:	3b01      	subs	r3, #1
 801582a:	9300      	str	r3, [sp, #0]
 801582c:	9b00      	ldr	r3, [sp, #0]
 801582e:	2b16      	cmp	r3, #22
 8015830:	d85a      	bhi.n	80158e8 <_dtoa_r+0x240>
 8015832:	9a00      	ldr	r2, [sp, #0]
 8015834:	4b57      	ldr	r3, [pc, #348]	; (8015994 <_dtoa_r+0x2ec>)
 8015836:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801583a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801583e:	ec51 0b19 	vmov	r0, r1, d9
 8015842:	f7eb f94b 	bl	8000adc <__aeabi_dcmplt>
 8015846:	2800      	cmp	r0, #0
 8015848:	d050      	beq.n	80158ec <_dtoa_r+0x244>
 801584a:	9b00      	ldr	r3, [sp, #0]
 801584c:	3b01      	subs	r3, #1
 801584e:	9300      	str	r3, [sp, #0]
 8015850:	2300      	movs	r3, #0
 8015852:	930b      	str	r3, [sp, #44]	; 0x2c
 8015854:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015856:	1b5d      	subs	r5, r3, r5
 8015858:	1e6b      	subs	r3, r5, #1
 801585a:	9305      	str	r3, [sp, #20]
 801585c:	bf45      	ittet	mi
 801585e:	f1c5 0301 	rsbmi	r3, r5, #1
 8015862:	9304      	strmi	r3, [sp, #16]
 8015864:	2300      	movpl	r3, #0
 8015866:	2300      	movmi	r3, #0
 8015868:	bf4c      	ite	mi
 801586a:	9305      	strmi	r3, [sp, #20]
 801586c:	9304      	strpl	r3, [sp, #16]
 801586e:	9b00      	ldr	r3, [sp, #0]
 8015870:	2b00      	cmp	r3, #0
 8015872:	db3d      	blt.n	80158f0 <_dtoa_r+0x248>
 8015874:	9b05      	ldr	r3, [sp, #20]
 8015876:	9a00      	ldr	r2, [sp, #0]
 8015878:	920a      	str	r2, [sp, #40]	; 0x28
 801587a:	4413      	add	r3, r2
 801587c:	9305      	str	r3, [sp, #20]
 801587e:	2300      	movs	r3, #0
 8015880:	9307      	str	r3, [sp, #28]
 8015882:	9b06      	ldr	r3, [sp, #24]
 8015884:	2b09      	cmp	r3, #9
 8015886:	f200 8089 	bhi.w	801599c <_dtoa_r+0x2f4>
 801588a:	2b05      	cmp	r3, #5
 801588c:	bfc4      	itt	gt
 801588e:	3b04      	subgt	r3, #4
 8015890:	9306      	strgt	r3, [sp, #24]
 8015892:	9b06      	ldr	r3, [sp, #24]
 8015894:	f1a3 0302 	sub.w	r3, r3, #2
 8015898:	bfcc      	ite	gt
 801589a:	2500      	movgt	r5, #0
 801589c:	2501      	movle	r5, #1
 801589e:	2b03      	cmp	r3, #3
 80158a0:	f200 8087 	bhi.w	80159b2 <_dtoa_r+0x30a>
 80158a4:	e8df f003 	tbb	[pc, r3]
 80158a8:	59383a2d 	.word	0x59383a2d
 80158ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80158b0:	441d      	add	r5, r3
 80158b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80158b6:	2b20      	cmp	r3, #32
 80158b8:	bfc1      	itttt	gt
 80158ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80158be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80158c2:	fa0b f303 	lslgt.w	r3, fp, r3
 80158c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80158ca:	bfda      	itte	le
 80158cc:	f1c3 0320 	rsble	r3, r3, #32
 80158d0:	fa06 f003 	lslle.w	r0, r6, r3
 80158d4:	4318      	orrgt	r0, r3
 80158d6:	f7ea fe15 	bl	8000504 <__aeabi_ui2d>
 80158da:	2301      	movs	r3, #1
 80158dc:	4606      	mov	r6, r0
 80158de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80158e2:	3d01      	subs	r5, #1
 80158e4:	930e      	str	r3, [sp, #56]	; 0x38
 80158e6:	e76a      	b.n	80157be <_dtoa_r+0x116>
 80158e8:	2301      	movs	r3, #1
 80158ea:	e7b2      	b.n	8015852 <_dtoa_r+0x1aa>
 80158ec:	900b      	str	r0, [sp, #44]	; 0x2c
 80158ee:	e7b1      	b.n	8015854 <_dtoa_r+0x1ac>
 80158f0:	9b04      	ldr	r3, [sp, #16]
 80158f2:	9a00      	ldr	r2, [sp, #0]
 80158f4:	1a9b      	subs	r3, r3, r2
 80158f6:	9304      	str	r3, [sp, #16]
 80158f8:	4253      	negs	r3, r2
 80158fa:	9307      	str	r3, [sp, #28]
 80158fc:	2300      	movs	r3, #0
 80158fe:	930a      	str	r3, [sp, #40]	; 0x28
 8015900:	e7bf      	b.n	8015882 <_dtoa_r+0x1da>
 8015902:	2300      	movs	r3, #0
 8015904:	9308      	str	r3, [sp, #32]
 8015906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015908:	2b00      	cmp	r3, #0
 801590a:	dc55      	bgt.n	80159b8 <_dtoa_r+0x310>
 801590c:	2301      	movs	r3, #1
 801590e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8015912:	461a      	mov	r2, r3
 8015914:	9209      	str	r2, [sp, #36]	; 0x24
 8015916:	e00c      	b.n	8015932 <_dtoa_r+0x28a>
 8015918:	2301      	movs	r3, #1
 801591a:	e7f3      	b.n	8015904 <_dtoa_r+0x25c>
 801591c:	2300      	movs	r3, #0
 801591e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015920:	9308      	str	r3, [sp, #32]
 8015922:	9b00      	ldr	r3, [sp, #0]
 8015924:	4413      	add	r3, r2
 8015926:	9302      	str	r3, [sp, #8]
 8015928:	3301      	adds	r3, #1
 801592a:	2b01      	cmp	r3, #1
 801592c:	9303      	str	r3, [sp, #12]
 801592e:	bfb8      	it	lt
 8015930:	2301      	movlt	r3, #1
 8015932:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8015934:	2200      	movs	r2, #0
 8015936:	6042      	str	r2, [r0, #4]
 8015938:	2204      	movs	r2, #4
 801593a:	f102 0614 	add.w	r6, r2, #20
 801593e:	429e      	cmp	r6, r3
 8015940:	6841      	ldr	r1, [r0, #4]
 8015942:	d93d      	bls.n	80159c0 <_dtoa_r+0x318>
 8015944:	4620      	mov	r0, r4
 8015946:	f000 fd81 	bl	801644c <_Balloc>
 801594a:	9001      	str	r0, [sp, #4]
 801594c:	2800      	cmp	r0, #0
 801594e:	d13b      	bne.n	80159c8 <_dtoa_r+0x320>
 8015950:	4b11      	ldr	r3, [pc, #68]	; (8015998 <_dtoa_r+0x2f0>)
 8015952:	4602      	mov	r2, r0
 8015954:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8015958:	e6c0      	b.n	80156dc <_dtoa_r+0x34>
 801595a:	2301      	movs	r3, #1
 801595c:	e7df      	b.n	801591e <_dtoa_r+0x276>
 801595e:	bf00      	nop
 8015960:	636f4361 	.word	0x636f4361
 8015964:	3fd287a7 	.word	0x3fd287a7
 8015968:	8b60c8b3 	.word	0x8b60c8b3
 801596c:	3fc68a28 	.word	0x3fc68a28
 8015970:	509f79fb 	.word	0x509f79fb
 8015974:	3fd34413 	.word	0x3fd34413
 8015978:	080177b5 	.word	0x080177b5
 801597c:	080177cc 	.word	0x080177cc
 8015980:	7ff00000 	.word	0x7ff00000
 8015984:	080177b1 	.word	0x080177b1
 8015988:	080177a8 	.word	0x080177a8
 801598c:	08017785 	.word	0x08017785
 8015990:	3ff80000 	.word	0x3ff80000
 8015994:	080178c0 	.word	0x080178c0
 8015998:	08017827 	.word	0x08017827
 801599c:	2501      	movs	r5, #1
 801599e:	2300      	movs	r3, #0
 80159a0:	9306      	str	r3, [sp, #24]
 80159a2:	9508      	str	r5, [sp, #32]
 80159a4:	f04f 33ff 	mov.w	r3, #4294967295
 80159a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80159ac:	2200      	movs	r2, #0
 80159ae:	2312      	movs	r3, #18
 80159b0:	e7b0      	b.n	8015914 <_dtoa_r+0x26c>
 80159b2:	2301      	movs	r3, #1
 80159b4:	9308      	str	r3, [sp, #32]
 80159b6:	e7f5      	b.n	80159a4 <_dtoa_r+0x2fc>
 80159b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80159ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80159be:	e7b8      	b.n	8015932 <_dtoa_r+0x28a>
 80159c0:	3101      	adds	r1, #1
 80159c2:	6041      	str	r1, [r0, #4]
 80159c4:	0052      	lsls	r2, r2, #1
 80159c6:	e7b8      	b.n	801593a <_dtoa_r+0x292>
 80159c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80159ca:	9a01      	ldr	r2, [sp, #4]
 80159cc:	601a      	str	r2, [r3, #0]
 80159ce:	9b03      	ldr	r3, [sp, #12]
 80159d0:	2b0e      	cmp	r3, #14
 80159d2:	f200 809d 	bhi.w	8015b10 <_dtoa_r+0x468>
 80159d6:	2d00      	cmp	r5, #0
 80159d8:	f000 809a 	beq.w	8015b10 <_dtoa_r+0x468>
 80159dc:	9b00      	ldr	r3, [sp, #0]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	dd32      	ble.n	8015a48 <_dtoa_r+0x3a0>
 80159e2:	4ab7      	ldr	r2, [pc, #732]	; (8015cc0 <_dtoa_r+0x618>)
 80159e4:	f003 030f 	and.w	r3, r3, #15
 80159e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80159ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80159f0:	9b00      	ldr	r3, [sp, #0]
 80159f2:	05d8      	lsls	r0, r3, #23
 80159f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80159f8:	d516      	bpl.n	8015a28 <_dtoa_r+0x380>
 80159fa:	4bb2      	ldr	r3, [pc, #712]	; (8015cc4 <_dtoa_r+0x61c>)
 80159fc:	ec51 0b19 	vmov	r0, r1, d9
 8015a00:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015a04:	f7ea ff22 	bl	800084c <__aeabi_ddiv>
 8015a08:	f007 070f 	and.w	r7, r7, #15
 8015a0c:	4682      	mov	sl, r0
 8015a0e:	468b      	mov	fp, r1
 8015a10:	2503      	movs	r5, #3
 8015a12:	4eac      	ldr	r6, [pc, #688]	; (8015cc4 <_dtoa_r+0x61c>)
 8015a14:	b957      	cbnz	r7, 8015a2c <_dtoa_r+0x384>
 8015a16:	4642      	mov	r2, r8
 8015a18:	464b      	mov	r3, r9
 8015a1a:	4650      	mov	r0, sl
 8015a1c:	4659      	mov	r1, fp
 8015a1e:	f7ea ff15 	bl	800084c <__aeabi_ddiv>
 8015a22:	4682      	mov	sl, r0
 8015a24:	468b      	mov	fp, r1
 8015a26:	e028      	b.n	8015a7a <_dtoa_r+0x3d2>
 8015a28:	2502      	movs	r5, #2
 8015a2a:	e7f2      	b.n	8015a12 <_dtoa_r+0x36a>
 8015a2c:	07f9      	lsls	r1, r7, #31
 8015a2e:	d508      	bpl.n	8015a42 <_dtoa_r+0x39a>
 8015a30:	4640      	mov	r0, r8
 8015a32:	4649      	mov	r1, r9
 8015a34:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015a38:	f7ea fdde 	bl	80005f8 <__aeabi_dmul>
 8015a3c:	3501      	adds	r5, #1
 8015a3e:	4680      	mov	r8, r0
 8015a40:	4689      	mov	r9, r1
 8015a42:	107f      	asrs	r7, r7, #1
 8015a44:	3608      	adds	r6, #8
 8015a46:	e7e5      	b.n	8015a14 <_dtoa_r+0x36c>
 8015a48:	f000 809b 	beq.w	8015b82 <_dtoa_r+0x4da>
 8015a4c:	9b00      	ldr	r3, [sp, #0]
 8015a4e:	4f9d      	ldr	r7, [pc, #628]	; (8015cc4 <_dtoa_r+0x61c>)
 8015a50:	425e      	negs	r6, r3
 8015a52:	4b9b      	ldr	r3, [pc, #620]	; (8015cc0 <_dtoa_r+0x618>)
 8015a54:	f006 020f 	and.w	r2, r6, #15
 8015a58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a60:	ec51 0b19 	vmov	r0, r1, d9
 8015a64:	f7ea fdc8 	bl	80005f8 <__aeabi_dmul>
 8015a68:	1136      	asrs	r6, r6, #4
 8015a6a:	4682      	mov	sl, r0
 8015a6c:	468b      	mov	fp, r1
 8015a6e:	2300      	movs	r3, #0
 8015a70:	2502      	movs	r5, #2
 8015a72:	2e00      	cmp	r6, #0
 8015a74:	d17a      	bne.n	8015b6c <_dtoa_r+0x4c4>
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d1d3      	bne.n	8015a22 <_dtoa_r+0x37a>
 8015a7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	f000 8082 	beq.w	8015b86 <_dtoa_r+0x4de>
 8015a82:	4b91      	ldr	r3, [pc, #580]	; (8015cc8 <_dtoa_r+0x620>)
 8015a84:	2200      	movs	r2, #0
 8015a86:	4650      	mov	r0, sl
 8015a88:	4659      	mov	r1, fp
 8015a8a:	f7eb f827 	bl	8000adc <__aeabi_dcmplt>
 8015a8e:	2800      	cmp	r0, #0
 8015a90:	d079      	beq.n	8015b86 <_dtoa_r+0x4de>
 8015a92:	9b03      	ldr	r3, [sp, #12]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d076      	beq.n	8015b86 <_dtoa_r+0x4de>
 8015a98:	9b02      	ldr	r3, [sp, #8]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	dd36      	ble.n	8015b0c <_dtoa_r+0x464>
 8015a9e:	9b00      	ldr	r3, [sp, #0]
 8015aa0:	4650      	mov	r0, sl
 8015aa2:	4659      	mov	r1, fp
 8015aa4:	1e5f      	subs	r7, r3, #1
 8015aa6:	2200      	movs	r2, #0
 8015aa8:	4b88      	ldr	r3, [pc, #544]	; (8015ccc <_dtoa_r+0x624>)
 8015aaa:	f7ea fda5 	bl	80005f8 <__aeabi_dmul>
 8015aae:	9e02      	ldr	r6, [sp, #8]
 8015ab0:	4682      	mov	sl, r0
 8015ab2:	468b      	mov	fp, r1
 8015ab4:	3501      	adds	r5, #1
 8015ab6:	4628      	mov	r0, r5
 8015ab8:	f7ea fd34 	bl	8000524 <__aeabi_i2d>
 8015abc:	4652      	mov	r2, sl
 8015abe:	465b      	mov	r3, fp
 8015ac0:	f7ea fd9a 	bl	80005f8 <__aeabi_dmul>
 8015ac4:	4b82      	ldr	r3, [pc, #520]	; (8015cd0 <_dtoa_r+0x628>)
 8015ac6:	2200      	movs	r2, #0
 8015ac8:	f7ea fbe0 	bl	800028c <__adddf3>
 8015acc:	46d0      	mov	r8, sl
 8015ace:	46d9      	mov	r9, fp
 8015ad0:	4682      	mov	sl, r0
 8015ad2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8015ad6:	2e00      	cmp	r6, #0
 8015ad8:	d158      	bne.n	8015b8c <_dtoa_r+0x4e4>
 8015ada:	4b7e      	ldr	r3, [pc, #504]	; (8015cd4 <_dtoa_r+0x62c>)
 8015adc:	2200      	movs	r2, #0
 8015ade:	4640      	mov	r0, r8
 8015ae0:	4649      	mov	r1, r9
 8015ae2:	f7ea fbd1 	bl	8000288 <__aeabi_dsub>
 8015ae6:	4652      	mov	r2, sl
 8015ae8:	465b      	mov	r3, fp
 8015aea:	4680      	mov	r8, r0
 8015aec:	4689      	mov	r9, r1
 8015aee:	f7eb f813 	bl	8000b18 <__aeabi_dcmpgt>
 8015af2:	2800      	cmp	r0, #0
 8015af4:	f040 8295 	bne.w	8016022 <_dtoa_r+0x97a>
 8015af8:	4652      	mov	r2, sl
 8015afa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015afe:	4640      	mov	r0, r8
 8015b00:	4649      	mov	r1, r9
 8015b02:	f7ea ffeb 	bl	8000adc <__aeabi_dcmplt>
 8015b06:	2800      	cmp	r0, #0
 8015b08:	f040 8289 	bne.w	801601e <_dtoa_r+0x976>
 8015b0c:	ec5b ab19 	vmov	sl, fp, d9
 8015b10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	f2c0 8148 	blt.w	8015da8 <_dtoa_r+0x700>
 8015b18:	9a00      	ldr	r2, [sp, #0]
 8015b1a:	2a0e      	cmp	r2, #14
 8015b1c:	f300 8144 	bgt.w	8015da8 <_dtoa_r+0x700>
 8015b20:	4b67      	ldr	r3, [pc, #412]	; (8015cc0 <_dtoa_r+0x618>)
 8015b22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015b26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015b2c:	2b00      	cmp	r3, #0
 8015b2e:	f280 80d5 	bge.w	8015cdc <_dtoa_r+0x634>
 8015b32:	9b03      	ldr	r3, [sp, #12]
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	f300 80d1 	bgt.w	8015cdc <_dtoa_r+0x634>
 8015b3a:	f040 826f 	bne.w	801601c <_dtoa_r+0x974>
 8015b3e:	4b65      	ldr	r3, [pc, #404]	; (8015cd4 <_dtoa_r+0x62c>)
 8015b40:	2200      	movs	r2, #0
 8015b42:	4640      	mov	r0, r8
 8015b44:	4649      	mov	r1, r9
 8015b46:	f7ea fd57 	bl	80005f8 <__aeabi_dmul>
 8015b4a:	4652      	mov	r2, sl
 8015b4c:	465b      	mov	r3, fp
 8015b4e:	f7ea ffd9 	bl	8000b04 <__aeabi_dcmpge>
 8015b52:	9e03      	ldr	r6, [sp, #12]
 8015b54:	4637      	mov	r7, r6
 8015b56:	2800      	cmp	r0, #0
 8015b58:	f040 8245 	bne.w	8015fe6 <_dtoa_r+0x93e>
 8015b5c:	9d01      	ldr	r5, [sp, #4]
 8015b5e:	2331      	movs	r3, #49	; 0x31
 8015b60:	f805 3b01 	strb.w	r3, [r5], #1
 8015b64:	9b00      	ldr	r3, [sp, #0]
 8015b66:	3301      	adds	r3, #1
 8015b68:	9300      	str	r3, [sp, #0]
 8015b6a:	e240      	b.n	8015fee <_dtoa_r+0x946>
 8015b6c:	07f2      	lsls	r2, r6, #31
 8015b6e:	d505      	bpl.n	8015b7c <_dtoa_r+0x4d4>
 8015b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015b74:	f7ea fd40 	bl	80005f8 <__aeabi_dmul>
 8015b78:	3501      	adds	r5, #1
 8015b7a:	2301      	movs	r3, #1
 8015b7c:	1076      	asrs	r6, r6, #1
 8015b7e:	3708      	adds	r7, #8
 8015b80:	e777      	b.n	8015a72 <_dtoa_r+0x3ca>
 8015b82:	2502      	movs	r5, #2
 8015b84:	e779      	b.n	8015a7a <_dtoa_r+0x3d2>
 8015b86:	9f00      	ldr	r7, [sp, #0]
 8015b88:	9e03      	ldr	r6, [sp, #12]
 8015b8a:	e794      	b.n	8015ab6 <_dtoa_r+0x40e>
 8015b8c:	9901      	ldr	r1, [sp, #4]
 8015b8e:	4b4c      	ldr	r3, [pc, #304]	; (8015cc0 <_dtoa_r+0x618>)
 8015b90:	4431      	add	r1, r6
 8015b92:	910d      	str	r1, [sp, #52]	; 0x34
 8015b94:	9908      	ldr	r1, [sp, #32]
 8015b96:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8015b9a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8015b9e:	2900      	cmp	r1, #0
 8015ba0:	d043      	beq.n	8015c2a <_dtoa_r+0x582>
 8015ba2:	494d      	ldr	r1, [pc, #308]	; (8015cd8 <_dtoa_r+0x630>)
 8015ba4:	2000      	movs	r0, #0
 8015ba6:	f7ea fe51 	bl	800084c <__aeabi_ddiv>
 8015baa:	4652      	mov	r2, sl
 8015bac:	465b      	mov	r3, fp
 8015bae:	f7ea fb6b 	bl	8000288 <__aeabi_dsub>
 8015bb2:	9d01      	ldr	r5, [sp, #4]
 8015bb4:	4682      	mov	sl, r0
 8015bb6:	468b      	mov	fp, r1
 8015bb8:	4649      	mov	r1, r9
 8015bba:	4640      	mov	r0, r8
 8015bbc:	f7ea ffcc 	bl	8000b58 <__aeabi_d2iz>
 8015bc0:	4606      	mov	r6, r0
 8015bc2:	f7ea fcaf 	bl	8000524 <__aeabi_i2d>
 8015bc6:	4602      	mov	r2, r0
 8015bc8:	460b      	mov	r3, r1
 8015bca:	4640      	mov	r0, r8
 8015bcc:	4649      	mov	r1, r9
 8015bce:	f7ea fb5b 	bl	8000288 <__aeabi_dsub>
 8015bd2:	3630      	adds	r6, #48	; 0x30
 8015bd4:	f805 6b01 	strb.w	r6, [r5], #1
 8015bd8:	4652      	mov	r2, sl
 8015bda:	465b      	mov	r3, fp
 8015bdc:	4680      	mov	r8, r0
 8015bde:	4689      	mov	r9, r1
 8015be0:	f7ea ff7c 	bl	8000adc <__aeabi_dcmplt>
 8015be4:	2800      	cmp	r0, #0
 8015be6:	d163      	bne.n	8015cb0 <_dtoa_r+0x608>
 8015be8:	4642      	mov	r2, r8
 8015bea:	464b      	mov	r3, r9
 8015bec:	4936      	ldr	r1, [pc, #216]	; (8015cc8 <_dtoa_r+0x620>)
 8015bee:	2000      	movs	r0, #0
 8015bf0:	f7ea fb4a 	bl	8000288 <__aeabi_dsub>
 8015bf4:	4652      	mov	r2, sl
 8015bf6:	465b      	mov	r3, fp
 8015bf8:	f7ea ff70 	bl	8000adc <__aeabi_dcmplt>
 8015bfc:	2800      	cmp	r0, #0
 8015bfe:	f040 80b5 	bne.w	8015d6c <_dtoa_r+0x6c4>
 8015c02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c04:	429d      	cmp	r5, r3
 8015c06:	d081      	beq.n	8015b0c <_dtoa_r+0x464>
 8015c08:	4b30      	ldr	r3, [pc, #192]	; (8015ccc <_dtoa_r+0x624>)
 8015c0a:	2200      	movs	r2, #0
 8015c0c:	4650      	mov	r0, sl
 8015c0e:	4659      	mov	r1, fp
 8015c10:	f7ea fcf2 	bl	80005f8 <__aeabi_dmul>
 8015c14:	4b2d      	ldr	r3, [pc, #180]	; (8015ccc <_dtoa_r+0x624>)
 8015c16:	4682      	mov	sl, r0
 8015c18:	468b      	mov	fp, r1
 8015c1a:	4640      	mov	r0, r8
 8015c1c:	4649      	mov	r1, r9
 8015c1e:	2200      	movs	r2, #0
 8015c20:	f7ea fcea 	bl	80005f8 <__aeabi_dmul>
 8015c24:	4680      	mov	r8, r0
 8015c26:	4689      	mov	r9, r1
 8015c28:	e7c6      	b.n	8015bb8 <_dtoa_r+0x510>
 8015c2a:	4650      	mov	r0, sl
 8015c2c:	4659      	mov	r1, fp
 8015c2e:	f7ea fce3 	bl	80005f8 <__aeabi_dmul>
 8015c32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c34:	9d01      	ldr	r5, [sp, #4]
 8015c36:	930f      	str	r3, [sp, #60]	; 0x3c
 8015c38:	4682      	mov	sl, r0
 8015c3a:	468b      	mov	fp, r1
 8015c3c:	4649      	mov	r1, r9
 8015c3e:	4640      	mov	r0, r8
 8015c40:	f7ea ff8a 	bl	8000b58 <__aeabi_d2iz>
 8015c44:	4606      	mov	r6, r0
 8015c46:	f7ea fc6d 	bl	8000524 <__aeabi_i2d>
 8015c4a:	3630      	adds	r6, #48	; 0x30
 8015c4c:	4602      	mov	r2, r0
 8015c4e:	460b      	mov	r3, r1
 8015c50:	4640      	mov	r0, r8
 8015c52:	4649      	mov	r1, r9
 8015c54:	f7ea fb18 	bl	8000288 <__aeabi_dsub>
 8015c58:	f805 6b01 	strb.w	r6, [r5], #1
 8015c5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015c5e:	429d      	cmp	r5, r3
 8015c60:	4680      	mov	r8, r0
 8015c62:	4689      	mov	r9, r1
 8015c64:	f04f 0200 	mov.w	r2, #0
 8015c68:	d124      	bne.n	8015cb4 <_dtoa_r+0x60c>
 8015c6a:	4b1b      	ldr	r3, [pc, #108]	; (8015cd8 <_dtoa_r+0x630>)
 8015c6c:	4650      	mov	r0, sl
 8015c6e:	4659      	mov	r1, fp
 8015c70:	f7ea fb0c 	bl	800028c <__adddf3>
 8015c74:	4602      	mov	r2, r0
 8015c76:	460b      	mov	r3, r1
 8015c78:	4640      	mov	r0, r8
 8015c7a:	4649      	mov	r1, r9
 8015c7c:	f7ea ff4c 	bl	8000b18 <__aeabi_dcmpgt>
 8015c80:	2800      	cmp	r0, #0
 8015c82:	d173      	bne.n	8015d6c <_dtoa_r+0x6c4>
 8015c84:	4652      	mov	r2, sl
 8015c86:	465b      	mov	r3, fp
 8015c88:	4913      	ldr	r1, [pc, #76]	; (8015cd8 <_dtoa_r+0x630>)
 8015c8a:	2000      	movs	r0, #0
 8015c8c:	f7ea fafc 	bl	8000288 <__aeabi_dsub>
 8015c90:	4602      	mov	r2, r0
 8015c92:	460b      	mov	r3, r1
 8015c94:	4640      	mov	r0, r8
 8015c96:	4649      	mov	r1, r9
 8015c98:	f7ea ff20 	bl	8000adc <__aeabi_dcmplt>
 8015c9c:	2800      	cmp	r0, #0
 8015c9e:	f43f af35 	beq.w	8015b0c <_dtoa_r+0x464>
 8015ca2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8015ca4:	1e6b      	subs	r3, r5, #1
 8015ca6:	930f      	str	r3, [sp, #60]	; 0x3c
 8015ca8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8015cac:	2b30      	cmp	r3, #48	; 0x30
 8015cae:	d0f8      	beq.n	8015ca2 <_dtoa_r+0x5fa>
 8015cb0:	9700      	str	r7, [sp, #0]
 8015cb2:	e049      	b.n	8015d48 <_dtoa_r+0x6a0>
 8015cb4:	4b05      	ldr	r3, [pc, #20]	; (8015ccc <_dtoa_r+0x624>)
 8015cb6:	f7ea fc9f 	bl	80005f8 <__aeabi_dmul>
 8015cba:	4680      	mov	r8, r0
 8015cbc:	4689      	mov	r9, r1
 8015cbe:	e7bd      	b.n	8015c3c <_dtoa_r+0x594>
 8015cc0:	080178c0 	.word	0x080178c0
 8015cc4:	08017898 	.word	0x08017898
 8015cc8:	3ff00000 	.word	0x3ff00000
 8015ccc:	40240000 	.word	0x40240000
 8015cd0:	401c0000 	.word	0x401c0000
 8015cd4:	40140000 	.word	0x40140000
 8015cd8:	3fe00000 	.word	0x3fe00000
 8015cdc:	9d01      	ldr	r5, [sp, #4]
 8015cde:	4656      	mov	r6, sl
 8015ce0:	465f      	mov	r7, fp
 8015ce2:	4642      	mov	r2, r8
 8015ce4:	464b      	mov	r3, r9
 8015ce6:	4630      	mov	r0, r6
 8015ce8:	4639      	mov	r1, r7
 8015cea:	f7ea fdaf 	bl	800084c <__aeabi_ddiv>
 8015cee:	f7ea ff33 	bl	8000b58 <__aeabi_d2iz>
 8015cf2:	4682      	mov	sl, r0
 8015cf4:	f7ea fc16 	bl	8000524 <__aeabi_i2d>
 8015cf8:	4642      	mov	r2, r8
 8015cfa:	464b      	mov	r3, r9
 8015cfc:	f7ea fc7c 	bl	80005f8 <__aeabi_dmul>
 8015d00:	4602      	mov	r2, r0
 8015d02:	460b      	mov	r3, r1
 8015d04:	4630      	mov	r0, r6
 8015d06:	4639      	mov	r1, r7
 8015d08:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8015d0c:	f7ea fabc 	bl	8000288 <__aeabi_dsub>
 8015d10:	f805 6b01 	strb.w	r6, [r5], #1
 8015d14:	9e01      	ldr	r6, [sp, #4]
 8015d16:	9f03      	ldr	r7, [sp, #12]
 8015d18:	1bae      	subs	r6, r5, r6
 8015d1a:	42b7      	cmp	r7, r6
 8015d1c:	4602      	mov	r2, r0
 8015d1e:	460b      	mov	r3, r1
 8015d20:	d135      	bne.n	8015d8e <_dtoa_r+0x6e6>
 8015d22:	f7ea fab3 	bl	800028c <__adddf3>
 8015d26:	4642      	mov	r2, r8
 8015d28:	464b      	mov	r3, r9
 8015d2a:	4606      	mov	r6, r0
 8015d2c:	460f      	mov	r7, r1
 8015d2e:	f7ea fef3 	bl	8000b18 <__aeabi_dcmpgt>
 8015d32:	b9d0      	cbnz	r0, 8015d6a <_dtoa_r+0x6c2>
 8015d34:	4642      	mov	r2, r8
 8015d36:	464b      	mov	r3, r9
 8015d38:	4630      	mov	r0, r6
 8015d3a:	4639      	mov	r1, r7
 8015d3c:	f7ea fec4 	bl	8000ac8 <__aeabi_dcmpeq>
 8015d40:	b110      	cbz	r0, 8015d48 <_dtoa_r+0x6a0>
 8015d42:	f01a 0f01 	tst.w	sl, #1
 8015d46:	d110      	bne.n	8015d6a <_dtoa_r+0x6c2>
 8015d48:	4620      	mov	r0, r4
 8015d4a:	ee18 1a10 	vmov	r1, s16
 8015d4e:	f000 fbbd 	bl	80164cc <_Bfree>
 8015d52:	2300      	movs	r3, #0
 8015d54:	9800      	ldr	r0, [sp, #0]
 8015d56:	702b      	strb	r3, [r5, #0]
 8015d58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015d5a:	3001      	adds	r0, #1
 8015d5c:	6018      	str	r0, [r3, #0]
 8015d5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	f43f acf1 	beq.w	8015748 <_dtoa_r+0xa0>
 8015d66:	601d      	str	r5, [r3, #0]
 8015d68:	e4ee      	b.n	8015748 <_dtoa_r+0xa0>
 8015d6a:	9f00      	ldr	r7, [sp, #0]
 8015d6c:	462b      	mov	r3, r5
 8015d6e:	461d      	mov	r5, r3
 8015d70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8015d74:	2a39      	cmp	r2, #57	; 0x39
 8015d76:	d106      	bne.n	8015d86 <_dtoa_r+0x6de>
 8015d78:	9a01      	ldr	r2, [sp, #4]
 8015d7a:	429a      	cmp	r2, r3
 8015d7c:	d1f7      	bne.n	8015d6e <_dtoa_r+0x6c6>
 8015d7e:	9901      	ldr	r1, [sp, #4]
 8015d80:	2230      	movs	r2, #48	; 0x30
 8015d82:	3701      	adds	r7, #1
 8015d84:	700a      	strb	r2, [r1, #0]
 8015d86:	781a      	ldrb	r2, [r3, #0]
 8015d88:	3201      	adds	r2, #1
 8015d8a:	701a      	strb	r2, [r3, #0]
 8015d8c:	e790      	b.n	8015cb0 <_dtoa_r+0x608>
 8015d8e:	4ba6      	ldr	r3, [pc, #664]	; (8016028 <_dtoa_r+0x980>)
 8015d90:	2200      	movs	r2, #0
 8015d92:	f7ea fc31 	bl	80005f8 <__aeabi_dmul>
 8015d96:	2200      	movs	r2, #0
 8015d98:	2300      	movs	r3, #0
 8015d9a:	4606      	mov	r6, r0
 8015d9c:	460f      	mov	r7, r1
 8015d9e:	f7ea fe93 	bl	8000ac8 <__aeabi_dcmpeq>
 8015da2:	2800      	cmp	r0, #0
 8015da4:	d09d      	beq.n	8015ce2 <_dtoa_r+0x63a>
 8015da6:	e7cf      	b.n	8015d48 <_dtoa_r+0x6a0>
 8015da8:	9a08      	ldr	r2, [sp, #32]
 8015daa:	2a00      	cmp	r2, #0
 8015dac:	f000 80d7 	beq.w	8015f5e <_dtoa_r+0x8b6>
 8015db0:	9a06      	ldr	r2, [sp, #24]
 8015db2:	2a01      	cmp	r2, #1
 8015db4:	f300 80ba 	bgt.w	8015f2c <_dtoa_r+0x884>
 8015db8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015dba:	2a00      	cmp	r2, #0
 8015dbc:	f000 80b2 	beq.w	8015f24 <_dtoa_r+0x87c>
 8015dc0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015dc4:	9e07      	ldr	r6, [sp, #28]
 8015dc6:	9d04      	ldr	r5, [sp, #16]
 8015dc8:	9a04      	ldr	r2, [sp, #16]
 8015dca:	441a      	add	r2, r3
 8015dcc:	9204      	str	r2, [sp, #16]
 8015dce:	9a05      	ldr	r2, [sp, #20]
 8015dd0:	2101      	movs	r1, #1
 8015dd2:	441a      	add	r2, r3
 8015dd4:	4620      	mov	r0, r4
 8015dd6:	9205      	str	r2, [sp, #20]
 8015dd8:	f000 fc30 	bl	801663c <__i2b>
 8015ddc:	4607      	mov	r7, r0
 8015dde:	2d00      	cmp	r5, #0
 8015de0:	dd0c      	ble.n	8015dfc <_dtoa_r+0x754>
 8015de2:	9b05      	ldr	r3, [sp, #20]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	dd09      	ble.n	8015dfc <_dtoa_r+0x754>
 8015de8:	42ab      	cmp	r3, r5
 8015dea:	9a04      	ldr	r2, [sp, #16]
 8015dec:	bfa8      	it	ge
 8015dee:	462b      	movge	r3, r5
 8015df0:	1ad2      	subs	r2, r2, r3
 8015df2:	9204      	str	r2, [sp, #16]
 8015df4:	9a05      	ldr	r2, [sp, #20]
 8015df6:	1aed      	subs	r5, r5, r3
 8015df8:	1ad3      	subs	r3, r2, r3
 8015dfa:	9305      	str	r3, [sp, #20]
 8015dfc:	9b07      	ldr	r3, [sp, #28]
 8015dfe:	b31b      	cbz	r3, 8015e48 <_dtoa_r+0x7a0>
 8015e00:	9b08      	ldr	r3, [sp, #32]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	f000 80af 	beq.w	8015f66 <_dtoa_r+0x8be>
 8015e08:	2e00      	cmp	r6, #0
 8015e0a:	dd13      	ble.n	8015e34 <_dtoa_r+0x78c>
 8015e0c:	4639      	mov	r1, r7
 8015e0e:	4632      	mov	r2, r6
 8015e10:	4620      	mov	r0, r4
 8015e12:	f000 fcd3 	bl	80167bc <__pow5mult>
 8015e16:	ee18 2a10 	vmov	r2, s16
 8015e1a:	4601      	mov	r1, r0
 8015e1c:	4607      	mov	r7, r0
 8015e1e:	4620      	mov	r0, r4
 8015e20:	f000 fc22 	bl	8016668 <__multiply>
 8015e24:	ee18 1a10 	vmov	r1, s16
 8015e28:	4680      	mov	r8, r0
 8015e2a:	4620      	mov	r0, r4
 8015e2c:	f000 fb4e 	bl	80164cc <_Bfree>
 8015e30:	ee08 8a10 	vmov	s16, r8
 8015e34:	9b07      	ldr	r3, [sp, #28]
 8015e36:	1b9a      	subs	r2, r3, r6
 8015e38:	d006      	beq.n	8015e48 <_dtoa_r+0x7a0>
 8015e3a:	ee18 1a10 	vmov	r1, s16
 8015e3e:	4620      	mov	r0, r4
 8015e40:	f000 fcbc 	bl	80167bc <__pow5mult>
 8015e44:	ee08 0a10 	vmov	s16, r0
 8015e48:	2101      	movs	r1, #1
 8015e4a:	4620      	mov	r0, r4
 8015e4c:	f000 fbf6 	bl	801663c <__i2b>
 8015e50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e52:	2b00      	cmp	r3, #0
 8015e54:	4606      	mov	r6, r0
 8015e56:	f340 8088 	ble.w	8015f6a <_dtoa_r+0x8c2>
 8015e5a:	461a      	mov	r2, r3
 8015e5c:	4601      	mov	r1, r0
 8015e5e:	4620      	mov	r0, r4
 8015e60:	f000 fcac 	bl	80167bc <__pow5mult>
 8015e64:	9b06      	ldr	r3, [sp, #24]
 8015e66:	2b01      	cmp	r3, #1
 8015e68:	4606      	mov	r6, r0
 8015e6a:	f340 8081 	ble.w	8015f70 <_dtoa_r+0x8c8>
 8015e6e:	f04f 0800 	mov.w	r8, #0
 8015e72:	6933      	ldr	r3, [r6, #16]
 8015e74:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8015e78:	6918      	ldr	r0, [r3, #16]
 8015e7a:	f000 fb8f 	bl	801659c <__hi0bits>
 8015e7e:	f1c0 0020 	rsb	r0, r0, #32
 8015e82:	9b05      	ldr	r3, [sp, #20]
 8015e84:	4418      	add	r0, r3
 8015e86:	f010 001f 	ands.w	r0, r0, #31
 8015e8a:	f000 8092 	beq.w	8015fb2 <_dtoa_r+0x90a>
 8015e8e:	f1c0 0320 	rsb	r3, r0, #32
 8015e92:	2b04      	cmp	r3, #4
 8015e94:	f340 808a 	ble.w	8015fac <_dtoa_r+0x904>
 8015e98:	f1c0 001c 	rsb	r0, r0, #28
 8015e9c:	9b04      	ldr	r3, [sp, #16]
 8015e9e:	4403      	add	r3, r0
 8015ea0:	9304      	str	r3, [sp, #16]
 8015ea2:	9b05      	ldr	r3, [sp, #20]
 8015ea4:	4403      	add	r3, r0
 8015ea6:	4405      	add	r5, r0
 8015ea8:	9305      	str	r3, [sp, #20]
 8015eaa:	9b04      	ldr	r3, [sp, #16]
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	dd07      	ble.n	8015ec0 <_dtoa_r+0x818>
 8015eb0:	ee18 1a10 	vmov	r1, s16
 8015eb4:	461a      	mov	r2, r3
 8015eb6:	4620      	mov	r0, r4
 8015eb8:	f000 fcda 	bl	8016870 <__lshift>
 8015ebc:	ee08 0a10 	vmov	s16, r0
 8015ec0:	9b05      	ldr	r3, [sp, #20]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	dd05      	ble.n	8015ed2 <_dtoa_r+0x82a>
 8015ec6:	4631      	mov	r1, r6
 8015ec8:	461a      	mov	r2, r3
 8015eca:	4620      	mov	r0, r4
 8015ecc:	f000 fcd0 	bl	8016870 <__lshift>
 8015ed0:	4606      	mov	r6, r0
 8015ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d06e      	beq.n	8015fb6 <_dtoa_r+0x90e>
 8015ed8:	ee18 0a10 	vmov	r0, s16
 8015edc:	4631      	mov	r1, r6
 8015ede:	f000 fd37 	bl	8016950 <__mcmp>
 8015ee2:	2800      	cmp	r0, #0
 8015ee4:	da67      	bge.n	8015fb6 <_dtoa_r+0x90e>
 8015ee6:	9b00      	ldr	r3, [sp, #0]
 8015ee8:	3b01      	subs	r3, #1
 8015eea:	ee18 1a10 	vmov	r1, s16
 8015eee:	9300      	str	r3, [sp, #0]
 8015ef0:	220a      	movs	r2, #10
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	4620      	mov	r0, r4
 8015ef6:	f000 fb0b 	bl	8016510 <__multadd>
 8015efa:	9b08      	ldr	r3, [sp, #32]
 8015efc:	ee08 0a10 	vmov	s16, r0
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	f000 81b1 	beq.w	8016268 <_dtoa_r+0xbc0>
 8015f06:	2300      	movs	r3, #0
 8015f08:	4639      	mov	r1, r7
 8015f0a:	220a      	movs	r2, #10
 8015f0c:	4620      	mov	r0, r4
 8015f0e:	f000 faff 	bl	8016510 <__multadd>
 8015f12:	9b02      	ldr	r3, [sp, #8]
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	4607      	mov	r7, r0
 8015f18:	f300 808e 	bgt.w	8016038 <_dtoa_r+0x990>
 8015f1c:	9b06      	ldr	r3, [sp, #24]
 8015f1e:	2b02      	cmp	r3, #2
 8015f20:	dc51      	bgt.n	8015fc6 <_dtoa_r+0x91e>
 8015f22:	e089      	b.n	8016038 <_dtoa_r+0x990>
 8015f24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8015f26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8015f2a:	e74b      	b.n	8015dc4 <_dtoa_r+0x71c>
 8015f2c:	9b03      	ldr	r3, [sp, #12]
 8015f2e:	1e5e      	subs	r6, r3, #1
 8015f30:	9b07      	ldr	r3, [sp, #28]
 8015f32:	42b3      	cmp	r3, r6
 8015f34:	bfbf      	itttt	lt
 8015f36:	9b07      	ldrlt	r3, [sp, #28]
 8015f38:	9607      	strlt	r6, [sp, #28]
 8015f3a:	1af2      	sublt	r2, r6, r3
 8015f3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8015f3e:	bfb6      	itet	lt
 8015f40:	189b      	addlt	r3, r3, r2
 8015f42:	1b9e      	subge	r6, r3, r6
 8015f44:	930a      	strlt	r3, [sp, #40]	; 0x28
 8015f46:	9b03      	ldr	r3, [sp, #12]
 8015f48:	bfb8      	it	lt
 8015f4a:	2600      	movlt	r6, #0
 8015f4c:	2b00      	cmp	r3, #0
 8015f4e:	bfb7      	itett	lt
 8015f50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8015f54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8015f58:	1a9d      	sublt	r5, r3, r2
 8015f5a:	2300      	movlt	r3, #0
 8015f5c:	e734      	b.n	8015dc8 <_dtoa_r+0x720>
 8015f5e:	9e07      	ldr	r6, [sp, #28]
 8015f60:	9d04      	ldr	r5, [sp, #16]
 8015f62:	9f08      	ldr	r7, [sp, #32]
 8015f64:	e73b      	b.n	8015dde <_dtoa_r+0x736>
 8015f66:	9a07      	ldr	r2, [sp, #28]
 8015f68:	e767      	b.n	8015e3a <_dtoa_r+0x792>
 8015f6a:	9b06      	ldr	r3, [sp, #24]
 8015f6c:	2b01      	cmp	r3, #1
 8015f6e:	dc18      	bgt.n	8015fa2 <_dtoa_r+0x8fa>
 8015f70:	f1ba 0f00 	cmp.w	sl, #0
 8015f74:	d115      	bne.n	8015fa2 <_dtoa_r+0x8fa>
 8015f76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015f7a:	b993      	cbnz	r3, 8015fa2 <_dtoa_r+0x8fa>
 8015f7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015f80:	0d1b      	lsrs	r3, r3, #20
 8015f82:	051b      	lsls	r3, r3, #20
 8015f84:	b183      	cbz	r3, 8015fa8 <_dtoa_r+0x900>
 8015f86:	9b04      	ldr	r3, [sp, #16]
 8015f88:	3301      	adds	r3, #1
 8015f8a:	9304      	str	r3, [sp, #16]
 8015f8c:	9b05      	ldr	r3, [sp, #20]
 8015f8e:	3301      	adds	r3, #1
 8015f90:	9305      	str	r3, [sp, #20]
 8015f92:	f04f 0801 	mov.w	r8, #1
 8015f96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	f47f af6a 	bne.w	8015e72 <_dtoa_r+0x7ca>
 8015f9e:	2001      	movs	r0, #1
 8015fa0:	e76f      	b.n	8015e82 <_dtoa_r+0x7da>
 8015fa2:	f04f 0800 	mov.w	r8, #0
 8015fa6:	e7f6      	b.n	8015f96 <_dtoa_r+0x8ee>
 8015fa8:	4698      	mov	r8, r3
 8015faa:	e7f4      	b.n	8015f96 <_dtoa_r+0x8ee>
 8015fac:	f43f af7d 	beq.w	8015eaa <_dtoa_r+0x802>
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	301c      	adds	r0, #28
 8015fb4:	e772      	b.n	8015e9c <_dtoa_r+0x7f4>
 8015fb6:	9b03      	ldr	r3, [sp, #12]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	dc37      	bgt.n	801602c <_dtoa_r+0x984>
 8015fbc:	9b06      	ldr	r3, [sp, #24]
 8015fbe:	2b02      	cmp	r3, #2
 8015fc0:	dd34      	ble.n	801602c <_dtoa_r+0x984>
 8015fc2:	9b03      	ldr	r3, [sp, #12]
 8015fc4:	9302      	str	r3, [sp, #8]
 8015fc6:	9b02      	ldr	r3, [sp, #8]
 8015fc8:	b96b      	cbnz	r3, 8015fe6 <_dtoa_r+0x93e>
 8015fca:	4631      	mov	r1, r6
 8015fcc:	2205      	movs	r2, #5
 8015fce:	4620      	mov	r0, r4
 8015fd0:	f000 fa9e 	bl	8016510 <__multadd>
 8015fd4:	4601      	mov	r1, r0
 8015fd6:	4606      	mov	r6, r0
 8015fd8:	ee18 0a10 	vmov	r0, s16
 8015fdc:	f000 fcb8 	bl	8016950 <__mcmp>
 8015fe0:	2800      	cmp	r0, #0
 8015fe2:	f73f adbb 	bgt.w	8015b5c <_dtoa_r+0x4b4>
 8015fe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015fe8:	9d01      	ldr	r5, [sp, #4]
 8015fea:	43db      	mvns	r3, r3
 8015fec:	9300      	str	r3, [sp, #0]
 8015fee:	f04f 0800 	mov.w	r8, #0
 8015ff2:	4631      	mov	r1, r6
 8015ff4:	4620      	mov	r0, r4
 8015ff6:	f000 fa69 	bl	80164cc <_Bfree>
 8015ffa:	2f00      	cmp	r7, #0
 8015ffc:	f43f aea4 	beq.w	8015d48 <_dtoa_r+0x6a0>
 8016000:	f1b8 0f00 	cmp.w	r8, #0
 8016004:	d005      	beq.n	8016012 <_dtoa_r+0x96a>
 8016006:	45b8      	cmp	r8, r7
 8016008:	d003      	beq.n	8016012 <_dtoa_r+0x96a>
 801600a:	4641      	mov	r1, r8
 801600c:	4620      	mov	r0, r4
 801600e:	f000 fa5d 	bl	80164cc <_Bfree>
 8016012:	4639      	mov	r1, r7
 8016014:	4620      	mov	r0, r4
 8016016:	f000 fa59 	bl	80164cc <_Bfree>
 801601a:	e695      	b.n	8015d48 <_dtoa_r+0x6a0>
 801601c:	2600      	movs	r6, #0
 801601e:	4637      	mov	r7, r6
 8016020:	e7e1      	b.n	8015fe6 <_dtoa_r+0x93e>
 8016022:	9700      	str	r7, [sp, #0]
 8016024:	4637      	mov	r7, r6
 8016026:	e599      	b.n	8015b5c <_dtoa_r+0x4b4>
 8016028:	40240000 	.word	0x40240000
 801602c:	9b08      	ldr	r3, [sp, #32]
 801602e:	2b00      	cmp	r3, #0
 8016030:	f000 80ca 	beq.w	80161c8 <_dtoa_r+0xb20>
 8016034:	9b03      	ldr	r3, [sp, #12]
 8016036:	9302      	str	r3, [sp, #8]
 8016038:	2d00      	cmp	r5, #0
 801603a:	dd05      	ble.n	8016048 <_dtoa_r+0x9a0>
 801603c:	4639      	mov	r1, r7
 801603e:	462a      	mov	r2, r5
 8016040:	4620      	mov	r0, r4
 8016042:	f000 fc15 	bl	8016870 <__lshift>
 8016046:	4607      	mov	r7, r0
 8016048:	f1b8 0f00 	cmp.w	r8, #0
 801604c:	d05b      	beq.n	8016106 <_dtoa_r+0xa5e>
 801604e:	6879      	ldr	r1, [r7, #4]
 8016050:	4620      	mov	r0, r4
 8016052:	f000 f9fb 	bl	801644c <_Balloc>
 8016056:	4605      	mov	r5, r0
 8016058:	b928      	cbnz	r0, 8016066 <_dtoa_r+0x9be>
 801605a:	4b87      	ldr	r3, [pc, #540]	; (8016278 <_dtoa_r+0xbd0>)
 801605c:	4602      	mov	r2, r0
 801605e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8016062:	f7ff bb3b 	b.w	80156dc <_dtoa_r+0x34>
 8016066:	693a      	ldr	r2, [r7, #16]
 8016068:	3202      	adds	r2, #2
 801606a:	0092      	lsls	r2, r2, #2
 801606c:	f107 010c 	add.w	r1, r7, #12
 8016070:	300c      	adds	r0, #12
 8016072:	f7fe fba7 	bl	80147c4 <memcpy>
 8016076:	2201      	movs	r2, #1
 8016078:	4629      	mov	r1, r5
 801607a:	4620      	mov	r0, r4
 801607c:	f000 fbf8 	bl	8016870 <__lshift>
 8016080:	9b01      	ldr	r3, [sp, #4]
 8016082:	f103 0901 	add.w	r9, r3, #1
 8016086:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801608a:	4413      	add	r3, r2
 801608c:	9305      	str	r3, [sp, #20]
 801608e:	f00a 0301 	and.w	r3, sl, #1
 8016092:	46b8      	mov	r8, r7
 8016094:	9304      	str	r3, [sp, #16]
 8016096:	4607      	mov	r7, r0
 8016098:	4631      	mov	r1, r6
 801609a:	ee18 0a10 	vmov	r0, s16
 801609e:	f7ff fa77 	bl	8015590 <quorem>
 80160a2:	4641      	mov	r1, r8
 80160a4:	9002      	str	r0, [sp, #8]
 80160a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80160aa:	ee18 0a10 	vmov	r0, s16
 80160ae:	f000 fc4f 	bl	8016950 <__mcmp>
 80160b2:	463a      	mov	r2, r7
 80160b4:	9003      	str	r0, [sp, #12]
 80160b6:	4631      	mov	r1, r6
 80160b8:	4620      	mov	r0, r4
 80160ba:	f000 fc65 	bl	8016988 <__mdiff>
 80160be:	68c2      	ldr	r2, [r0, #12]
 80160c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80160c4:	4605      	mov	r5, r0
 80160c6:	bb02      	cbnz	r2, 801610a <_dtoa_r+0xa62>
 80160c8:	4601      	mov	r1, r0
 80160ca:	ee18 0a10 	vmov	r0, s16
 80160ce:	f000 fc3f 	bl	8016950 <__mcmp>
 80160d2:	4602      	mov	r2, r0
 80160d4:	4629      	mov	r1, r5
 80160d6:	4620      	mov	r0, r4
 80160d8:	9207      	str	r2, [sp, #28]
 80160da:	f000 f9f7 	bl	80164cc <_Bfree>
 80160de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80160e2:	ea43 0102 	orr.w	r1, r3, r2
 80160e6:	9b04      	ldr	r3, [sp, #16]
 80160e8:	430b      	orrs	r3, r1
 80160ea:	464d      	mov	r5, r9
 80160ec:	d10f      	bne.n	801610e <_dtoa_r+0xa66>
 80160ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80160f2:	d02a      	beq.n	801614a <_dtoa_r+0xaa2>
 80160f4:	9b03      	ldr	r3, [sp, #12]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	dd02      	ble.n	8016100 <_dtoa_r+0xa58>
 80160fa:	9b02      	ldr	r3, [sp, #8]
 80160fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8016100:	f88b a000 	strb.w	sl, [fp]
 8016104:	e775      	b.n	8015ff2 <_dtoa_r+0x94a>
 8016106:	4638      	mov	r0, r7
 8016108:	e7ba      	b.n	8016080 <_dtoa_r+0x9d8>
 801610a:	2201      	movs	r2, #1
 801610c:	e7e2      	b.n	80160d4 <_dtoa_r+0xa2c>
 801610e:	9b03      	ldr	r3, [sp, #12]
 8016110:	2b00      	cmp	r3, #0
 8016112:	db04      	blt.n	801611e <_dtoa_r+0xa76>
 8016114:	9906      	ldr	r1, [sp, #24]
 8016116:	430b      	orrs	r3, r1
 8016118:	9904      	ldr	r1, [sp, #16]
 801611a:	430b      	orrs	r3, r1
 801611c:	d122      	bne.n	8016164 <_dtoa_r+0xabc>
 801611e:	2a00      	cmp	r2, #0
 8016120:	ddee      	ble.n	8016100 <_dtoa_r+0xa58>
 8016122:	ee18 1a10 	vmov	r1, s16
 8016126:	2201      	movs	r2, #1
 8016128:	4620      	mov	r0, r4
 801612a:	f000 fba1 	bl	8016870 <__lshift>
 801612e:	4631      	mov	r1, r6
 8016130:	ee08 0a10 	vmov	s16, r0
 8016134:	f000 fc0c 	bl	8016950 <__mcmp>
 8016138:	2800      	cmp	r0, #0
 801613a:	dc03      	bgt.n	8016144 <_dtoa_r+0xa9c>
 801613c:	d1e0      	bne.n	8016100 <_dtoa_r+0xa58>
 801613e:	f01a 0f01 	tst.w	sl, #1
 8016142:	d0dd      	beq.n	8016100 <_dtoa_r+0xa58>
 8016144:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8016148:	d1d7      	bne.n	80160fa <_dtoa_r+0xa52>
 801614a:	2339      	movs	r3, #57	; 0x39
 801614c:	f88b 3000 	strb.w	r3, [fp]
 8016150:	462b      	mov	r3, r5
 8016152:	461d      	mov	r5, r3
 8016154:	3b01      	subs	r3, #1
 8016156:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801615a:	2a39      	cmp	r2, #57	; 0x39
 801615c:	d071      	beq.n	8016242 <_dtoa_r+0xb9a>
 801615e:	3201      	adds	r2, #1
 8016160:	701a      	strb	r2, [r3, #0]
 8016162:	e746      	b.n	8015ff2 <_dtoa_r+0x94a>
 8016164:	2a00      	cmp	r2, #0
 8016166:	dd07      	ble.n	8016178 <_dtoa_r+0xad0>
 8016168:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801616c:	d0ed      	beq.n	801614a <_dtoa_r+0xaa2>
 801616e:	f10a 0301 	add.w	r3, sl, #1
 8016172:	f88b 3000 	strb.w	r3, [fp]
 8016176:	e73c      	b.n	8015ff2 <_dtoa_r+0x94a>
 8016178:	9b05      	ldr	r3, [sp, #20]
 801617a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801617e:	4599      	cmp	r9, r3
 8016180:	d047      	beq.n	8016212 <_dtoa_r+0xb6a>
 8016182:	ee18 1a10 	vmov	r1, s16
 8016186:	2300      	movs	r3, #0
 8016188:	220a      	movs	r2, #10
 801618a:	4620      	mov	r0, r4
 801618c:	f000 f9c0 	bl	8016510 <__multadd>
 8016190:	45b8      	cmp	r8, r7
 8016192:	ee08 0a10 	vmov	s16, r0
 8016196:	f04f 0300 	mov.w	r3, #0
 801619a:	f04f 020a 	mov.w	r2, #10
 801619e:	4641      	mov	r1, r8
 80161a0:	4620      	mov	r0, r4
 80161a2:	d106      	bne.n	80161b2 <_dtoa_r+0xb0a>
 80161a4:	f000 f9b4 	bl	8016510 <__multadd>
 80161a8:	4680      	mov	r8, r0
 80161aa:	4607      	mov	r7, r0
 80161ac:	f109 0901 	add.w	r9, r9, #1
 80161b0:	e772      	b.n	8016098 <_dtoa_r+0x9f0>
 80161b2:	f000 f9ad 	bl	8016510 <__multadd>
 80161b6:	4639      	mov	r1, r7
 80161b8:	4680      	mov	r8, r0
 80161ba:	2300      	movs	r3, #0
 80161bc:	220a      	movs	r2, #10
 80161be:	4620      	mov	r0, r4
 80161c0:	f000 f9a6 	bl	8016510 <__multadd>
 80161c4:	4607      	mov	r7, r0
 80161c6:	e7f1      	b.n	80161ac <_dtoa_r+0xb04>
 80161c8:	9b03      	ldr	r3, [sp, #12]
 80161ca:	9302      	str	r3, [sp, #8]
 80161cc:	9d01      	ldr	r5, [sp, #4]
 80161ce:	ee18 0a10 	vmov	r0, s16
 80161d2:	4631      	mov	r1, r6
 80161d4:	f7ff f9dc 	bl	8015590 <quorem>
 80161d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80161dc:	9b01      	ldr	r3, [sp, #4]
 80161de:	f805 ab01 	strb.w	sl, [r5], #1
 80161e2:	1aea      	subs	r2, r5, r3
 80161e4:	9b02      	ldr	r3, [sp, #8]
 80161e6:	4293      	cmp	r3, r2
 80161e8:	dd09      	ble.n	80161fe <_dtoa_r+0xb56>
 80161ea:	ee18 1a10 	vmov	r1, s16
 80161ee:	2300      	movs	r3, #0
 80161f0:	220a      	movs	r2, #10
 80161f2:	4620      	mov	r0, r4
 80161f4:	f000 f98c 	bl	8016510 <__multadd>
 80161f8:	ee08 0a10 	vmov	s16, r0
 80161fc:	e7e7      	b.n	80161ce <_dtoa_r+0xb26>
 80161fe:	9b02      	ldr	r3, [sp, #8]
 8016200:	2b00      	cmp	r3, #0
 8016202:	bfc8      	it	gt
 8016204:	461d      	movgt	r5, r3
 8016206:	9b01      	ldr	r3, [sp, #4]
 8016208:	bfd8      	it	le
 801620a:	2501      	movle	r5, #1
 801620c:	441d      	add	r5, r3
 801620e:	f04f 0800 	mov.w	r8, #0
 8016212:	ee18 1a10 	vmov	r1, s16
 8016216:	2201      	movs	r2, #1
 8016218:	4620      	mov	r0, r4
 801621a:	f000 fb29 	bl	8016870 <__lshift>
 801621e:	4631      	mov	r1, r6
 8016220:	ee08 0a10 	vmov	s16, r0
 8016224:	f000 fb94 	bl	8016950 <__mcmp>
 8016228:	2800      	cmp	r0, #0
 801622a:	dc91      	bgt.n	8016150 <_dtoa_r+0xaa8>
 801622c:	d102      	bne.n	8016234 <_dtoa_r+0xb8c>
 801622e:	f01a 0f01 	tst.w	sl, #1
 8016232:	d18d      	bne.n	8016150 <_dtoa_r+0xaa8>
 8016234:	462b      	mov	r3, r5
 8016236:	461d      	mov	r5, r3
 8016238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801623c:	2a30      	cmp	r2, #48	; 0x30
 801623e:	d0fa      	beq.n	8016236 <_dtoa_r+0xb8e>
 8016240:	e6d7      	b.n	8015ff2 <_dtoa_r+0x94a>
 8016242:	9a01      	ldr	r2, [sp, #4]
 8016244:	429a      	cmp	r2, r3
 8016246:	d184      	bne.n	8016152 <_dtoa_r+0xaaa>
 8016248:	9b00      	ldr	r3, [sp, #0]
 801624a:	3301      	adds	r3, #1
 801624c:	9300      	str	r3, [sp, #0]
 801624e:	2331      	movs	r3, #49	; 0x31
 8016250:	7013      	strb	r3, [r2, #0]
 8016252:	e6ce      	b.n	8015ff2 <_dtoa_r+0x94a>
 8016254:	4b09      	ldr	r3, [pc, #36]	; (801627c <_dtoa_r+0xbd4>)
 8016256:	f7ff ba95 	b.w	8015784 <_dtoa_r+0xdc>
 801625a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801625c:	2b00      	cmp	r3, #0
 801625e:	f47f aa6e 	bne.w	801573e <_dtoa_r+0x96>
 8016262:	4b07      	ldr	r3, [pc, #28]	; (8016280 <_dtoa_r+0xbd8>)
 8016264:	f7ff ba8e 	b.w	8015784 <_dtoa_r+0xdc>
 8016268:	9b02      	ldr	r3, [sp, #8]
 801626a:	2b00      	cmp	r3, #0
 801626c:	dcae      	bgt.n	80161cc <_dtoa_r+0xb24>
 801626e:	9b06      	ldr	r3, [sp, #24]
 8016270:	2b02      	cmp	r3, #2
 8016272:	f73f aea8 	bgt.w	8015fc6 <_dtoa_r+0x91e>
 8016276:	e7a9      	b.n	80161cc <_dtoa_r+0xb24>
 8016278:	08017827 	.word	0x08017827
 801627c:	08017784 	.word	0x08017784
 8016280:	080177a8 	.word	0x080177a8

08016284 <__sflush_r>:
 8016284:	898a      	ldrh	r2, [r1, #12]
 8016286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801628a:	4605      	mov	r5, r0
 801628c:	0710      	lsls	r0, r2, #28
 801628e:	460c      	mov	r4, r1
 8016290:	d458      	bmi.n	8016344 <__sflush_r+0xc0>
 8016292:	684b      	ldr	r3, [r1, #4]
 8016294:	2b00      	cmp	r3, #0
 8016296:	dc05      	bgt.n	80162a4 <__sflush_r+0x20>
 8016298:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801629a:	2b00      	cmp	r3, #0
 801629c:	dc02      	bgt.n	80162a4 <__sflush_r+0x20>
 801629e:	2000      	movs	r0, #0
 80162a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80162a6:	2e00      	cmp	r6, #0
 80162a8:	d0f9      	beq.n	801629e <__sflush_r+0x1a>
 80162aa:	2300      	movs	r3, #0
 80162ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80162b0:	682f      	ldr	r7, [r5, #0]
 80162b2:	602b      	str	r3, [r5, #0]
 80162b4:	d032      	beq.n	801631c <__sflush_r+0x98>
 80162b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80162b8:	89a3      	ldrh	r3, [r4, #12]
 80162ba:	075a      	lsls	r2, r3, #29
 80162bc:	d505      	bpl.n	80162ca <__sflush_r+0x46>
 80162be:	6863      	ldr	r3, [r4, #4]
 80162c0:	1ac0      	subs	r0, r0, r3
 80162c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80162c4:	b10b      	cbz	r3, 80162ca <__sflush_r+0x46>
 80162c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80162c8:	1ac0      	subs	r0, r0, r3
 80162ca:	2300      	movs	r3, #0
 80162cc:	4602      	mov	r2, r0
 80162ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80162d0:	6a21      	ldr	r1, [r4, #32]
 80162d2:	4628      	mov	r0, r5
 80162d4:	47b0      	blx	r6
 80162d6:	1c43      	adds	r3, r0, #1
 80162d8:	89a3      	ldrh	r3, [r4, #12]
 80162da:	d106      	bne.n	80162ea <__sflush_r+0x66>
 80162dc:	6829      	ldr	r1, [r5, #0]
 80162de:	291d      	cmp	r1, #29
 80162e0:	d82c      	bhi.n	801633c <__sflush_r+0xb8>
 80162e2:	4a2a      	ldr	r2, [pc, #168]	; (801638c <__sflush_r+0x108>)
 80162e4:	40ca      	lsrs	r2, r1
 80162e6:	07d6      	lsls	r6, r2, #31
 80162e8:	d528      	bpl.n	801633c <__sflush_r+0xb8>
 80162ea:	2200      	movs	r2, #0
 80162ec:	6062      	str	r2, [r4, #4]
 80162ee:	04d9      	lsls	r1, r3, #19
 80162f0:	6922      	ldr	r2, [r4, #16]
 80162f2:	6022      	str	r2, [r4, #0]
 80162f4:	d504      	bpl.n	8016300 <__sflush_r+0x7c>
 80162f6:	1c42      	adds	r2, r0, #1
 80162f8:	d101      	bne.n	80162fe <__sflush_r+0x7a>
 80162fa:	682b      	ldr	r3, [r5, #0]
 80162fc:	b903      	cbnz	r3, 8016300 <__sflush_r+0x7c>
 80162fe:	6560      	str	r0, [r4, #84]	; 0x54
 8016300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016302:	602f      	str	r7, [r5, #0]
 8016304:	2900      	cmp	r1, #0
 8016306:	d0ca      	beq.n	801629e <__sflush_r+0x1a>
 8016308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801630c:	4299      	cmp	r1, r3
 801630e:	d002      	beq.n	8016316 <__sflush_r+0x92>
 8016310:	4628      	mov	r0, r5
 8016312:	f7fe fa6d 	bl	80147f0 <_free_r>
 8016316:	2000      	movs	r0, #0
 8016318:	6360      	str	r0, [r4, #52]	; 0x34
 801631a:	e7c1      	b.n	80162a0 <__sflush_r+0x1c>
 801631c:	6a21      	ldr	r1, [r4, #32]
 801631e:	2301      	movs	r3, #1
 8016320:	4628      	mov	r0, r5
 8016322:	47b0      	blx	r6
 8016324:	1c41      	adds	r1, r0, #1
 8016326:	d1c7      	bne.n	80162b8 <__sflush_r+0x34>
 8016328:	682b      	ldr	r3, [r5, #0]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d0c4      	beq.n	80162b8 <__sflush_r+0x34>
 801632e:	2b1d      	cmp	r3, #29
 8016330:	d001      	beq.n	8016336 <__sflush_r+0xb2>
 8016332:	2b16      	cmp	r3, #22
 8016334:	d101      	bne.n	801633a <__sflush_r+0xb6>
 8016336:	602f      	str	r7, [r5, #0]
 8016338:	e7b1      	b.n	801629e <__sflush_r+0x1a>
 801633a:	89a3      	ldrh	r3, [r4, #12]
 801633c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016340:	81a3      	strh	r3, [r4, #12]
 8016342:	e7ad      	b.n	80162a0 <__sflush_r+0x1c>
 8016344:	690f      	ldr	r7, [r1, #16]
 8016346:	2f00      	cmp	r7, #0
 8016348:	d0a9      	beq.n	801629e <__sflush_r+0x1a>
 801634a:	0793      	lsls	r3, r2, #30
 801634c:	680e      	ldr	r6, [r1, #0]
 801634e:	bf08      	it	eq
 8016350:	694b      	ldreq	r3, [r1, #20]
 8016352:	600f      	str	r7, [r1, #0]
 8016354:	bf18      	it	ne
 8016356:	2300      	movne	r3, #0
 8016358:	eba6 0807 	sub.w	r8, r6, r7
 801635c:	608b      	str	r3, [r1, #8]
 801635e:	f1b8 0f00 	cmp.w	r8, #0
 8016362:	dd9c      	ble.n	801629e <__sflush_r+0x1a>
 8016364:	6a21      	ldr	r1, [r4, #32]
 8016366:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016368:	4643      	mov	r3, r8
 801636a:	463a      	mov	r2, r7
 801636c:	4628      	mov	r0, r5
 801636e:	47b0      	blx	r6
 8016370:	2800      	cmp	r0, #0
 8016372:	dc06      	bgt.n	8016382 <__sflush_r+0xfe>
 8016374:	89a3      	ldrh	r3, [r4, #12]
 8016376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801637a:	81a3      	strh	r3, [r4, #12]
 801637c:	f04f 30ff 	mov.w	r0, #4294967295
 8016380:	e78e      	b.n	80162a0 <__sflush_r+0x1c>
 8016382:	4407      	add	r7, r0
 8016384:	eba8 0800 	sub.w	r8, r8, r0
 8016388:	e7e9      	b.n	801635e <__sflush_r+0xda>
 801638a:	bf00      	nop
 801638c:	20400001 	.word	0x20400001

08016390 <_fflush_r>:
 8016390:	b538      	push	{r3, r4, r5, lr}
 8016392:	690b      	ldr	r3, [r1, #16]
 8016394:	4605      	mov	r5, r0
 8016396:	460c      	mov	r4, r1
 8016398:	b913      	cbnz	r3, 80163a0 <_fflush_r+0x10>
 801639a:	2500      	movs	r5, #0
 801639c:	4628      	mov	r0, r5
 801639e:	bd38      	pop	{r3, r4, r5, pc}
 80163a0:	b118      	cbz	r0, 80163aa <_fflush_r+0x1a>
 80163a2:	6983      	ldr	r3, [r0, #24]
 80163a4:	b90b      	cbnz	r3, 80163aa <_fflush_r+0x1a>
 80163a6:	f7fe f93f 	bl	8014628 <__sinit>
 80163aa:	4b14      	ldr	r3, [pc, #80]	; (80163fc <_fflush_r+0x6c>)
 80163ac:	429c      	cmp	r4, r3
 80163ae:	d11b      	bne.n	80163e8 <_fflush_r+0x58>
 80163b0:	686c      	ldr	r4, [r5, #4]
 80163b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d0ef      	beq.n	801639a <_fflush_r+0xa>
 80163ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80163bc:	07d0      	lsls	r0, r2, #31
 80163be:	d404      	bmi.n	80163ca <_fflush_r+0x3a>
 80163c0:	0599      	lsls	r1, r3, #22
 80163c2:	d402      	bmi.n	80163ca <_fflush_r+0x3a>
 80163c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80163c6:	f7fe f9f2 	bl	80147ae <__retarget_lock_acquire_recursive>
 80163ca:	4628      	mov	r0, r5
 80163cc:	4621      	mov	r1, r4
 80163ce:	f7ff ff59 	bl	8016284 <__sflush_r>
 80163d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80163d4:	07da      	lsls	r2, r3, #31
 80163d6:	4605      	mov	r5, r0
 80163d8:	d4e0      	bmi.n	801639c <_fflush_r+0xc>
 80163da:	89a3      	ldrh	r3, [r4, #12]
 80163dc:	059b      	lsls	r3, r3, #22
 80163de:	d4dd      	bmi.n	801639c <_fflush_r+0xc>
 80163e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80163e2:	f7fe f9e6 	bl	80147b2 <__retarget_lock_release_recursive>
 80163e6:	e7d9      	b.n	801639c <_fflush_r+0xc>
 80163e8:	4b05      	ldr	r3, [pc, #20]	; (8016400 <_fflush_r+0x70>)
 80163ea:	429c      	cmp	r4, r3
 80163ec:	d101      	bne.n	80163f2 <_fflush_r+0x62>
 80163ee:	68ac      	ldr	r4, [r5, #8]
 80163f0:	e7df      	b.n	80163b2 <_fflush_r+0x22>
 80163f2:	4b04      	ldr	r3, [pc, #16]	; (8016404 <_fflush_r+0x74>)
 80163f4:	429c      	cmp	r4, r3
 80163f6:	bf08      	it	eq
 80163f8:	68ec      	ldreq	r4, [r5, #12]
 80163fa:	e7da      	b.n	80163b2 <_fflush_r+0x22>
 80163fc:	08017730 	.word	0x08017730
 8016400:	08017750 	.word	0x08017750
 8016404:	08017710 	.word	0x08017710

08016408 <_localeconv_r>:
 8016408:	4800      	ldr	r0, [pc, #0]	; (801640c <_localeconv_r+0x4>)
 801640a:	4770      	bx	lr
 801640c:	20000188 	.word	0x20000188

08016410 <_lseek_r>:
 8016410:	b538      	push	{r3, r4, r5, lr}
 8016412:	4d07      	ldr	r5, [pc, #28]	; (8016430 <_lseek_r+0x20>)
 8016414:	4604      	mov	r4, r0
 8016416:	4608      	mov	r0, r1
 8016418:	4611      	mov	r1, r2
 801641a:	2200      	movs	r2, #0
 801641c:	602a      	str	r2, [r5, #0]
 801641e:	461a      	mov	r2, r3
 8016420:	f7f3 fd10 	bl	8009e44 <_lseek>
 8016424:	1c43      	adds	r3, r0, #1
 8016426:	d102      	bne.n	801642e <_lseek_r+0x1e>
 8016428:	682b      	ldr	r3, [r5, #0]
 801642a:	b103      	cbz	r3, 801642e <_lseek_r+0x1e>
 801642c:	6023      	str	r3, [r4, #0]
 801642e:	bd38      	pop	{r3, r4, r5, pc}
 8016430:	2000a2b0 	.word	0x2000a2b0

08016434 <__malloc_lock>:
 8016434:	4801      	ldr	r0, [pc, #4]	; (801643c <__malloc_lock+0x8>)
 8016436:	f7fe b9ba 	b.w	80147ae <__retarget_lock_acquire_recursive>
 801643a:	bf00      	nop
 801643c:	2000a2a5 	.word	0x2000a2a5

08016440 <__malloc_unlock>:
 8016440:	4801      	ldr	r0, [pc, #4]	; (8016448 <__malloc_unlock+0x8>)
 8016442:	f7fe b9b6 	b.w	80147b2 <__retarget_lock_release_recursive>
 8016446:	bf00      	nop
 8016448:	2000a2a5 	.word	0x2000a2a5

0801644c <_Balloc>:
 801644c:	b570      	push	{r4, r5, r6, lr}
 801644e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016450:	4604      	mov	r4, r0
 8016452:	460d      	mov	r5, r1
 8016454:	b976      	cbnz	r6, 8016474 <_Balloc+0x28>
 8016456:	2010      	movs	r0, #16
 8016458:	f7fe f9ac 	bl	80147b4 <malloc>
 801645c:	4602      	mov	r2, r0
 801645e:	6260      	str	r0, [r4, #36]	; 0x24
 8016460:	b920      	cbnz	r0, 801646c <_Balloc+0x20>
 8016462:	4b18      	ldr	r3, [pc, #96]	; (80164c4 <_Balloc+0x78>)
 8016464:	4818      	ldr	r0, [pc, #96]	; (80164c8 <_Balloc+0x7c>)
 8016466:	2166      	movs	r1, #102	; 0x66
 8016468:	f000 fb9c 	bl	8016ba4 <__assert_func>
 801646c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016470:	6006      	str	r6, [r0, #0]
 8016472:	60c6      	str	r6, [r0, #12]
 8016474:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016476:	68f3      	ldr	r3, [r6, #12]
 8016478:	b183      	cbz	r3, 801649c <_Balloc+0x50>
 801647a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801647c:	68db      	ldr	r3, [r3, #12]
 801647e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016482:	b9b8      	cbnz	r0, 80164b4 <_Balloc+0x68>
 8016484:	2101      	movs	r1, #1
 8016486:	fa01 f605 	lsl.w	r6, r1, r5
 801648a:	1d72      	adds	r2, r6, #5
 801648c:	0092      	lsls	r2, r2, #2
 801648e:	4620      	mov	r0, r4
 8016490:	f000 fb60 	bl	8016b54 <_calloc_r>
 8016494:	b160      	cbz	r0, 80164b0 <_Balloc+0x64>
 8016496:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801649a:	e00e      	b.n	80164ba <_Balloc+0x6e>
 801649c:	2221      	movs	r2, #33	; 0x21
 801649e:	2104      	movs	r1, #4
 80164a0:	4620      	mov	r0, r4
 80164a2:	f000 fb57 	bl	8016b54 <_calloc_r>
 80164a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80164a8:	60f0      	str	r0, [r6, #12]
 80164aa:	68db      	ldr	r3, [r3, #12]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d1e4      	bne.n	801647a <_Balloc+0x2e>
 80164b0:	2000      	movs	r0, #0
 80164b2:	bd70      	pop	{r4, r5, r6, pc}
 80164b4:	6802      	ldr	r2, [r0, #0]
 80164b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80164ba:	2300      	movs	r3, #0
 80164bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80164c0:	e7f7      	b.n	80164b2 <_Balloc+0x66>
 80164c2:	bf00      	nop
 80164c4:	080177b5 	.word	0x080177b5
 80164c8:	08017838 	.word	0x08017838

080164cc <_Bfree>:
 80164cc:	b570      	push	{r4, r5, r6, lr}
 80164ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80164d0:	4605      	mov	r5, r0
 80164d2:	460c      	mov	r4, r1
 80164d4:	b976      	cbnz	r6, 80164f4 <_Bfree+0x28>
 80164d6:	2010      	movs	r0, #16
 80164d8:	f7fe f96c 	bl	80147b4 <malloc>
 80164dc:	4602      	mov	r2, r0
 80164de:	6268      	str	r0, [r5, #36]	; 0x24
 80164e0:	b920      	cbnz	r0, 80164ec <_Bfree+0x20>
 80164e2:	4b09      	ldr	r3, [pc, #36]	; (8016508 <_Bfree+0x3c>)
 80164e4:	4809      	ldr	r0, [pc, #36]	; (801650c <_Bfree+0x40>)
 80164e6:	218a      	movs	r1, #138	; 0x8a
 80164e8:	f000 fb5c 	bl	8016ba4 <__assert_func>
 80164ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80164f0:	6006      	str	r6, [r0, #0]
 80164f2:	60c6      	str	r6, [r0, #12]
 80164f4:	b13c      	cbz	r4, 8016506 <_Bfree+0x3a>
 80164f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80164f8:	6862      	ldr	r2, [r4, #4]
 80164fa:	68db      	ldr	r3, [r3, #12]
 80164fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016500:	6021      	str	r1, [r4, #0]
 8016502:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016506:	bd70      	pop	{r4, r5, r6, pc}
 8016508:	080177b5 	.word	0x080177b5
 801650c:	08017838 	.word	0x08017838

08016510 <__multadd>:
 8016510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016514:	690d      	ldr	r5, [r1, #16]
 8016516:	4607      	mov	r7, r0
 8016518:	460c      	mov	r4, r1
 801651a:	461e      	mov	r6, r3
 801651c:	f101 0c14 	add.w	ip, r1, #20
 8016520:	2000      	movs	r0, #0
 8016522:	f8dc 3000 	ldr.w	r3, [ip]
 8016526:	b299      	uxth	r1, r3
 8016528:	fb02 6101 	mla	r1, r2, r1, r6
 801652c:	0c1e      	lsrs	r6, r3, #16
 801652e:	0c0b      	lsrs	r3, r1, #16
 8016530:	fb02 3306 	mla	r3, r2, r6, r3
 8016534:	b289      	uxth	r1, r1
 8016536:	3001      	adds	r0, #1
 8016538:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801653c:	4285      	cmp	r5, r0
 801653e:	f84c 1b04 	str.w	r1, [ip], #4
 8016542:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8016546:	dcec      	bgt.n	8016522 <__multadd+0x12>
 8016548:	b30e      	cbz	r6, 801658e <__multadd+0x7e>
 801654a:	68a3      	ldr	r3, [r4, #8]
 801654c:	42ab      	cmp	r3, r5
 801654e:	dc19      	bgt.n	8016584 <__multadd+0x74>
 8016550:	6861      	ldr	r1, [r4, #4]
 8016552:	4638      	mov	r0, r7
 8016554:	3101      	adds	r1, #1
 8016556:	f7ff ff79 	bl	801644c <_Balloc>
 801655a:	4680      	mov	r8, r0
 801655c:	b928      	cbnz	r0, 801656a <__multadd+0x5a>
 801655e:	4602      	mov	r2, r0
 8016560:	4b0c      	ldr	r3, [pc, #48]	; (8016594 <__multadd+0x84>)
 8016562:	480d      	ldr	r0, [pc, #52]	; (8016598 <__multadd+0x88>)
 8016564:	21b5      	movs	r1, #181	; 0xb5
 8016566:	f000 fb1d 	bl	8016ba4 <__assert_func>
 801656a:	6922      	ldr	r2, [r4, #16]
 801656c:	3202      	adds	r2, #2
 801656e:	f104 010c 	add.w	r1, r4, #12
 8016572:	0092      	lsls	r2, r2, #2
 8016574:	300c      	adds	r0, #12
 8016576:	f7fe f925 	bl	80147c4 <memcpy>
 801657a:	4621      	mov	r1, r4
 801657c:	4638      	mov	r0, r7
 801657e:	f7ff ffa5 	bl	80164cc <_Bfree>
 8016582:	4644      	mov	r4, r8
 8016584:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016588:	3501      	adds	r5, #1
 801658a:	615e      	str	r6, [r3, #20]
 801658c:	6125      	str	r5, [r4, #16]
 801658e:	4620      	mov	r0, r4
 8016590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016594:	08017827 	.word	0x08017827
 8016598:	08017838 	.word	0x08017838

0801659c <__hi0bits>:
 801659c:	0c03      	lsrs	r3, r0, #16
 801659e:	041b      	lsls	r3, r3, #16
 80165a0:	b9d3      	cbnz	r3, 80165d8 <__hi0bits+0x3c>
 80165a2:	0400      	lsls	r0, r0, #16
 80165a4:	2310      	movs	r3, #16
 80165a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80165aa:	bf04      	itt	eq
 80165ac:	0200      	lsleq	r0, r0, #8
 80165ae:	3308      	addeq	r3, #8
 80165b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80165b4:	bf04      	itt	eq
 80165b6:	0100      	lsleq	r0, r0, #4
 80165b8:	3304      	addeq	r3, #4
 80165ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80165be:	bf04      	itt	eq
 80165c0:	0080      	lsleq	r0, r0, #2
 80165c2:	3302      	addeq	r3, #2
 80165c4:	2800      	cmp	r0, #0
 80165c6:	db05      	blt.n	80165d4 <__hi0bits+0x38>
 80165c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80165cc:	f103 0301 	add.w	r3, r3, #1
 80165d0:	bf08      	it	eq
 80165d2:	2320      	moveq	r3, #32
 80165d4:	4618      	mov	r0, r3
 80165d6:	4770      	bx	lr
 80165d8:	2300      	movs	r3, #0
 80165da:	e7e4      	b.n	80165a6 <__hi0bits+0xa>

080165dc <__lo0bits>:
 80165dc:	6803      	ldr	r3, [r0, #0]
 80165de:	f013 0207 	ands.w	r2, r3, #7
 80165e2:	4601      	mov	r1, r0
 80165e4:	d00b      	beq.n	80165fe <__lo0bits+0x22>
 80165e6:	07da      	lsls	r2, r3, #31
 80165e8:	d423      	bmi.n	8016632 <__lo0bits+0x56>
 80165ea:	0798      	lsls	r0, r3, #30
 80165ec:	bf49      	itett	mi
 80165ee:	085b      	lsrmi	r3, r3, #1
 80165f0:	089b      	lsrpl	r3, r3, #2
 80165f2:	2001      	movmi	r0, #1
 80165f4:	600b      	strmi	r3, [r1, #0]
 80165f6:	bf5c      	itt	pl
 80165f8:	600b      	strpl	r3, [r1, #0]
 80165fa:	2002      	movpl	r0, #2
 80165fc:	4770      	bx	lr
 80165fe:	b298      	uxth	r0, r3
 8016600:	b9a8      	cbnz	r0, 801662e <__lo0bits+0x52>
 8016602:	0c1b      	lsrs	r3, r3, #16
 8016604:	2010      	movs	r0, #16
 8016606:	b2da      	uxtb	r2, r3
 8016608:	b90a      	cbnz	r2, 801660e <__lo0bits+0x32>
 801660a:	3008      	adds	r0, #8
 801660c:	0a1b      	lsrs	r3, r3, #8
 801660e:	071a      	lsls	r2, r3, #28
 8016610:	bf04      	itt	eq
 8016612:	091b      	lsreq	r3, r3, #4
 8016614:	3004      	addeq	r0, #4
 8016616:	079a      	lsls	r2, r3, #30
 8016618:	bf04      	itt	eq
 801661a:	089b      	lsreq	r3, r3, #2
 801661c:	3002      	addeq	r0, #2
 801661e:	07da      	lsls	r2, r3, #31
 8016620:	d403      	bmi.n	801662a <__lo0bits+0x4e>
 8016622:	085b      	lsrs	r3, r3, #1
 8016624:	f100 0001 	add.w	r0, r0, #1
 8016628:	d005      	beq.n	8016636 <__lo0bits+0x5a>
 801662a:	600b      	str	r3, [r1, #0]
 801662c:	4770      	bx	lr
 801662e:	4610      	mov	r0, r2
 8016630:	e7e9      	b.n	8016606 <__lo0bits+0x2a>
 8016632:	2000      	movs	r0, #0
 8016634:	4770      	bx	lr
 8016636:	2020      	movs	r0, #32
 8016638:	4770      	bx	lr
	...

0801663c <__i2b>:
 801663c:	b510      	push	{r4, lr}
 801663e:	460c      	mov	r4, r1
 8016640:	2101      	movs	r1, #1
 8016642:	f7ff ff03 	bl	801644c <_Balloc>
 8016646:	4602      	mov	r2, r0
 8016648:	b928      	cbnz	r0, 8016656 <__i2b+0x1a>
 801664a:	4b05      	ldr	r3, [pc, #20]	; (8016660 <__i2b+0x24>)
 801664c:	4805      	ldr	r0, [pc, #20]	; (8016664 <__i2b+0x28>)
 801664e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016652:	f000 faa7 	bl	8016ba4 <__assert_func>
 8016656:	2301      	movs	r3, #1
 8016658:	6144      	str	r4, [r0, #20]
 801665a:	6103      	str	r3, [r0, #16]
 801665c:	bd10      	pop	{r4, pc}
 801665e:	bf00      	nop
 8016660:	08017827 	.word	0x08017827
 8016664:	08017838 	.word	0x08017838

08016668 <__multiply>:
 8016668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801666c:	4691      	mov	r9, r2
 801666e:	690a      	ldr	r2, [r1, #16]
 8016670:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016674:	429a      	cmp	r2, r3
 8016676:	bfb8      	it	lt
 8016678:	460b      	movlt	r3, r1
 801667a:	460c      	mov	r4, r1
 801667c:	bfbc      	itt	lt
 801667e:	464c      	movlt	r4, r9
 8016680:	4699      	movlt	r9, r3
 8016682:	6927      	ldr	r7, [r4, #16]
 8016684:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8016688:	68a3      	ldr	r3, [r4, #8]
 801668a:	6861      	ldr	r1, [r4, #4]
 801668c:	eb07 060a 	add.w	r6, r7, sl
 8016690:	42b3      	cmp	r3, r6
 8016692:	b085      	sub	sp, #20
 8016694:	bfb8      	it	lt
 8016696:	3101      	addlt	r1, #1
 8016698:	f7ff fed8 	bl	801644c <_Balloc>
 801669c:	b930      	cbnz	r0, 80166ac <__multiply+0x44>
 801669e:	4602      	mov	r2, r0
 80166a0:	4b44      	ldr	r3, [pc, #272]	; (80167b4 <__multiply+0x14c>)
 80166a2:	4845      	ldr	r0, [pc, #276]	; (80167b8 <__multiply+0x150>)
 80166a4:	f240 115d 	movw	r1, #349	; 0x15d
 80166a8:	f000 fa7c 	bl	8016ba4 <__assert_func>
 80166ac:	f100 0514 	add.w	r5, r0, #20
 80166b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80166b4:	462b      	mov	r3, r5
 80166b6:	2200      	movs	r2, #0
 80166b8:	4543      	cmp	r3, r8
 80166ba:	d321      	bcc.n	8016700 <__multiply+0x98>
 80166bc:	f104 0314 	add.w	r3, r4, #20
 80166c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80166c4:	f109 0314 	add.w	r3, r9, #20
 80166c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80166cc:	9202      	str	r2, [sp, #8]
 80166ce:	1b3a      	subs	r2, r7, r4
 80166d0:	3a15      	subs	r2, #21
 80166d2:	f022 0203 	bic.w	r2, r2, #3
 80166d6:	3204      	adds	r2, #4
 80166d8:	f104 0115 	add.w	r1, r4, #21
 80166dc:	428f      	cmp	r7, r1
 80166de:	bf38      	it	cc
 80166e0:	2204      	movcc	r2, #4
 80166e2:	9201      	str	r2, [sp, #4]
 80166e4:	9a02      	ldr	r2, [sp, #8]
 80166e6:	9303      	str	r3, [sp, #12]
 80166e8:	429a      	cmp	r2, r3
 80166ea:	d80c      	bhi.n	8016706 <__multiply+0x9e>
 80166ec:	2e00      	cmp	r6, #0
 80166ee:	dd03      	ble.n	80166f8 <__multiply+0x90>
 80166f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d05a      	beq.n	80167ae <__multiply+0x146>
 80166f8:	6106      	str	r6, [r0, #16]
 80166fa:	b005      	add	sp, #20
 80166fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016700:	f843 2b04 	str.w	r2, [r3], #4
 8016704:	e7d8      	b.n	80166b8 <__multiply+0x50>
 8016706:	f8b3 a000 	ldrh.w	sl, [r3]
 801670a:	f1ba 0f00 	cmp.w	sl, #0
 801670e:	d024      	beq.n	801675a <__multiply+0xf2>
 8016710:	f104 0e14 	add.w	lr, r4, #20
 8016714:	46a9      	mov	r9, r5
 8016716:	f04f 0c00 	mov.w	ip, #0
 801671a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801671e:	f8d9 1000 	ldr.w	r1, [r9]
 8016722:	fa1f fb82 	uxth.w	fp, r2
 8016726:	b289      	uxth	r1, r1
 8016728:	fb0a 110b 	mla	r1, sl, fp, r1
 801672c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8016730:	f8d9 2000 	ldr.w	r2, [r9]
 8016734:	4461      	add	r1, ip
 8016736:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801673a:	fb0a c20b 	mla	r2, sl, fp, ip
 801673e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8016742:	b289      	uxth	r1, r1
 8016744:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8016748:	4577      	cmp	r7, lr
 801674a:	f849 1b04 	str.w	r1, [r9], #4
 801674e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8016752:	d8e2      	bhi.n	801671a <__multiply+0xb2>
 8016754:	9a01      	ldr	r2, [sp, #4]
 8016756:	f845 c002 	str.w	ip, [r5, r2]
 801675a:	9a03      	ldr	r2, [sp, #12]
 801675c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8016760:	3304      	adds	r3, #4
 8016762:	f1b9 0f00 	cmp.w	r9, #0
 8016766:	d020      	beq.n	80167aa <__multiply+0x142>
 8016768:	6829      	ldr	r1, [r5, #0]
 801676a:	f104 0c14 	add.w	ip, r4, #20
 801676e:	46ae      	mov	lr, r5
 8016770:	f04f 0a00 	mov.w	sl, #0
 8016774:	f8bc b000 	ldrh.w	fp, [ip]
 8016778:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801677c:	fb09 220b 	mla	r2, r9, fp, r2
 8016780:	4492      	add	sl, r2
 8016782:	b289      	uxth	r1, r1
 8016784:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8016788:	f84e 1b04 	str.w	r1, [lr], #4
 801678c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8016790:	f8be 1000 	ldrh.w	r1, [lr]
 8016794:	0c12      	lsrs	r2, r2, #16
 8016796:	fb09 1102 	mla	r1, r9, r2, r1
 801679a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801679e:	4567      	cmp	r7, ip
 80167a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80167a4:	d8e6      	bhi.n	8016774 <__multiply+0x10c>
 80167a6:	9a01      	ldr	r2, [sp, #4]
 80167a8:	50a9      	str	r1, [r5, r2]
 80167aa:	3504      	adds	r5, #4
 80167ac:	e79a      	b.n	80166e4 <__multiply+0x7c>
 80167ae:	3e01      	subs	r6, #1
 80167b0:	e79c      	b.n	80166ec <__multiply+0x84>
 80167b2:	bf00      	nop
 80167b4:	08017827 	.word	0x08017827
 80167b8:	08017838 	.word	0x08017838

080167bc <__pow5mult>:
 80167bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80167c0:	4615      	mov	r5, r2
 80167c2:	f012 0203 	ands.w	r2, r2, #3
 80167c6:	4606      	mov	r6, r0
 80167c8:	460f      	mov	r7, r1
 80167ca:	d007      	beq.n	80167dc <__pow5mult+0x20>
 80167cc:	4c25      	ldr	r4, [pc, #148]	; (8016864 <__pow5mult+0xa8>)
 80167ce:	3a01      	subs	r2, #1
 80167d0:	2300      	movs	r3, #0
 80167d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80167d6:	f7ff fe9b 	bl	8016510 <__multadd>
 80167da:	4607      	mov	r7, r0
 80167dc:	10ad      	asrs	r5, r5, #2
 80167de:	d03d      	beq.n	801685c <__pow5mult+0xa0>
 80167e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80167e2:	b97c      	cbnz	r4, 8016804 <__pow5mult+0x48>
 80167e4:	2010      	movs	r0, #16
 80167e6:	f7fd ffe5 	bl	80147b4 <malloc>
 80167ea:	4602      	mov	r2, r0
 80167ec:	6270      	str	r0, [r6, #36]	; 0x24
 80167ee:	b928      	cbnz	r0, 80167fc <__pow5mult+0x40>
 80167f0:	4b1d      	ldr	r3, [pc, #116]	; (8016868 <__pow5mult+0xac>)
 80167f2:	481e      	ldr	r0, [pc, #120]	; (801686c <__pow5mult+0xb0>)
 80167f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80167f8:	f000 f9d4 	bl	8016ba4 <__assert_func>
 80167fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016800:	6004      	str	r4, [r0, #0]
 8016802:	60c4      	str	r4, [r0, #12]
 8016804:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8016808:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801680c:	b94c      	cbnz	r4, 8016822 <__pow5mult+0x66>
 801680e:	f240 2171 	movw	r1, #625	; 0x271
 8016812:	4630      	mov	r0, r6
 8016814:	f7ff ff12 	bl	801663c <__i2b>
 8016818:	2300      	movs	r3, #0
 801681a:	f8c8 0008 	str.w	r0, [r8, #8]
 801681e:	4604      	mov	r4, r0
 8016820:	6003      	str	r3, [r0, #0]
 8016822:	f04f 0900 	mov.w	r9, #0
 8016826:	07eb      	lsls	r3, r5, #31
 8016828:	d50a      	bpl.n	8016840 <__pow5mult+0x84>
 801682a:	4639      	mov	r1, r7
 801682c:	4622      	mov	r2, r4
 801682e:	4630      	mov	r0, r6
 8016830:	f7ff ff1a 	bl	8016668 <__multiply>
 8016834:	4639      	mov	r1, r7
 8016836:	4680      	mov	r8, r0
 8016838:	4630      	mov	r0, r6
 801683a:	f7ff fe47 	bl	80164cc <_Bfree>
 801683e:	4647      	mov	r7, r8
 8016840:	106d      	asrs	r5, r5, #1
 8016842:	d00b      	beq.n	801685c <__pow5mult+0xa0>
 8016844:	6820      	ldr	r0, [r4, #0]
 8016846:	b938      	cbnz	r0, 8016858 <__pow5mult+0x9c>
 8016848:	4622      	mov	r2, r4
 801684a:	4621      	mov	r1, r4
 801684c:	4630      	mov	r0, r6
 801684e:	f7ff ff0b 	bl	8016668 <__multiply>
 8016852:	6020      	str	r0, [r4, #0]
 8016854:	f8c0 9000 	str.w	r9, [r0]
 8016858:	4604      	mov	r4, r0
 801685a:	e7e4      	b.n	8016826 <__pow5mult+0x6a>
 801685c:	4638      	mov	r0, r7
 801685e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016862:	bf00      	nop
 8016864:	08017988 	.word	0x08017988
 8016868:	080177b5 	.word	0x080177b5
 801686c:	08017838 	.word	0x08017838

08016870 <__lshift>:
 8016870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016874:	460c      	mov	r4, r1
 8016876:	6849      	ldr	r1, [r1, #4]
 8016878:	6923      	ldr	r3, [r4, #16]
 801687a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801687e:	68a3      	ldr	r3, [r4, #8]
 8016880:	4607      	mov	r7, r0
 8016882:	4691      	mov	r9, r2
 8016884:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016888:	f108 0601 	add.w	r6, r8, #1
 801688c:	42b3      	cmp	r3, r6
 801688e:	db0b      	blt.n	80168a8 <__lshift+0x38>
 8016890:	4638      	mov	r0, r7
 8016892:	f7ff fddb 	bl	801644c <_Balloc>
 8016896:	4605      	mov	r5, r0
 8016898:	b948      	cbnz	r0, 80168ae <__lshift+0x3e>
 801689a:	4602      	mov	r2, r0
 801689c:	4b2a      	ldr	r3, [pc, #168]	; (8016948 <__lshift+0xd8>)
 801689e:	482b      	ldr	r0, [pc, #172]	; (801694c <__lshift+0xdc>)
 80168a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80168a4:	f000 f97e 	bl	8016ba4 <__assert_func>
 80168a8:	3101      	adds	r1, #1
 80168aa:	005b      	lsls	r3, r3, #1
 80168ac:	e7ee      	b.n	801688c <__lshift+0x1c>
 80168ae:	2300      	movs	r3, #0
 80168b0:	f100 0114 	add.w	r1, r0, #20
 80168b4:	f100 0210 	add.w	r2, r0, #16
 80168b8:	4618      	mov	r0, r3
 80168ba:	4553      	cmp	r3, sl
 80168bc:	db37      	blt.n	801692e <__lshift+0xbe>
 80168be:	6920      	ldr	r0, [r4, #16]
 80168c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80168c4:	f104 0314 	add.w	r3, r4, #20
 80168c8:	f019 091f 	ands.w	r9, r9, #31
 80168cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80168d0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80168d4:	d02f      	beq.n	8016936 <__lshift+0xc6>
 80168d6:	f1c9 0e20 	rsb	lr, r9, #32
 80168da:	468a      	mov	sl, r1
 80168dc:	f04f 0c00 	mov.w	ip, #0
 80168e0:	681a      	ldr	r2, [r3, #0]
 80168e2:	fa02 f209 	lsl.w	r2, r2, r9
 80168e6:	ea42 020c 	orr.w	r2, r2, ip
 80168ea:	f84a 2b04 	str.w	r2, [sl], #4
 80168ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80168f2:	4298      	cmp	r0, r3
 80168f4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80168f8:	d8f2      	bhi.n	80168e0 <__lshift+0x70>
 80168fa:	1b03      	subs	r3, r0, r4
 80168fc:	3b15      	subs	r3, #21
 80168fe:	f023 0303 	bic.w	r3, r3, #3
 8016902:	3304      	adds	r3, #4
 8016904:	f104 0215 	add.w	r2, r4, #21
 8016908:	4290      	cmp	r0, r2
 801690a:	bf38      	it	cc
 801690c:	2304      	movcc	r3, #4
 801690e:	f841 c003 	str.w	ip, [r1, r3]
 8016912:	f1bc 0f00 	cmp.w	ip, #0
 8016916:	d001      	beq.n	801691c <__lshift+0xac>
 8016918:	f108 0602 	add.w	r6, r8, #2
 801691c:	3e01      	subs	r6, #1
 801691e:	4638      	mov	r0, r7
 8016920:	612e      	str	r6, [r5, #16]
 8016922:	4621      	mov	r1, r4
 8016924:	f7ff fdd2 	bl	80164cc <_Bfree>
 8016928:	4628      	mov	r0, r5
 801692a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801692e:	f842 0f04 	str.w	r0, [r2, #4]!
 8016932:	3301      	adds	r3, #1
 8016934:	e7c1      	b.n	80168ba <__lshift+0x4a>
 8016936:	3904      	subs	r1, #4
 8016938:	f853 2b04 	ldr.w	r2, [r3], #4
 801693c:	f841 2f04 	str.w	r2, [r1, #4]!
 8016940:	4298      	cmp	r0, r3
 8016942:	d8f9      	bhi.n	8016938 <__lshift+0xc8>
 8016944:	e7ea      	b.n	801691c <__lshift+0xac>
 8016946:	bf00      	nop
 8016948:	08017827 	.word	0x08017827
 801694c:	08017838 	.word	0x08017838

08016950 <__mcmp>:
 8016950:	b530      	push	{r4, r5, lr}
 8016952:	6902      	ldr	r2, [r0, #16]
 8016954:	690c      	ldr	r4, [r1, #16]
 8016956:	1b12      	subs	r2, r2, r4
 8016958:	d10e      	bne.n	8016978 <__mcmp+0x28>
 801695a:	f100 0314 	add.w	r3, r0, #20
 801695e:	3114      	adds	r1, #20
 8016960:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8016964:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8016968:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801696c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016970:	42a5      	cmp	r5, r4
 8016972:	d003      	beq.n	801697c <__mcmp+0x2c>
 8016974:	d305      	bcc.n	8016982 <__mcmp+0x32>
 8016976:	2201      	movs	r2, #1
 8016978:	4610      	mov	r0, r2
 801697a:	bd30      	pop	{r4, r5, pc}
 801697c:	4283      	cmp	r3, r0
 801697e:	d3f3      	bcc.n	8016968 <__mcmp+0x18>
 8016980:	e7fa      	b.n	8016978 <__mcmp+0x28>
 8016982:	f04f 32ff 	mov.w	r2, #4294967295
 8016986:	e7f7      	b.n	8016978 <__mcmp+0x28>

08016988 <__mdiff>:
 8016988:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801698c:	460c      	mov	r4, r1
 801698e:	4606      	mov	r6, r0
 8016990:	4611      	mov	r1, r2
 8016992:	4620      	mov	r0, r4
 8016994:	4690      	mov	r8, r2
 8016996:	f7ff ffdb 	bl	8016950 <__mcmp>
 801699a:	1e05      	subs	r5, r0, #0
 801699c:	d110      	bne.n	80169c0 <__mdiff+0x38>
 801699e:	4629      	mov	r1, r5
 80169a0:	4630      	mov	r0, r6
 80169a2:	f7ff fd53 	bl	801644c <_Balloc>
 80169a6:	b930      	cbnz	r0, 80169b6 <__mdiff+0x2e>
 80169a8:	4b3a      	ldr	r3, [pc, #232]	; (8016a94 <__mdiff+0x10c>)
 80169aa:	4602      	mov	r2, r0
 80169ac:	f240 2132 	movw	r1, #562	; 0x232
 80169b0:	4839      	ldr	r0, [pc, #228]	; (8016a98 <__mdiff+0x110>)
 80169b2:	f000 f8f7 	bl	8016ba4 <__assert_func>
 80169b6:	2301      	movs	r3, #1
 80169b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80169bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169c0:	bfa4      	itt	ge
 80169c2:	4643      	movge	r3, r8
 80169c4:	46a0      	movge	r8, r4
 80169c6:	4630      	mov	r0, r6
 80169c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80169cc:	bfa6      	itte	ge
 80169ce:	461c      	movge	r4, r3
 80169d0:	2500      	movge	r5, #0
 80169d2:	2501      	movlt	r5, #1
 80169d4:	f7ff fd3a 	bl	801644c <_Balloc>
 80169d8:	b920      	cbnz	r0, 80169e4 <__mdiff+0x5c>
 80169da:	4b2e      	ldr	r3, [pc, #184]	; (8016a94 <__mdiff+0x10c>)
 80169dc:	4602      	mov	r2, r0
 80169de:	f44f 7110 	mov.w	r1, #576	; 0x240
 80169e2:	e7e5      	b.n	80169b0 <__mdiff+0x28>
 80169e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80169e8:	6926      	ldr	r6, [r4, #16]
 80169ea:	60c5      	str	r5, [r0, #12]
 80169ec:	f104 0914 	add.w	r9, r4, #20
 80169f0:	f108 0514 	add.w	r5, r8, #20
 80169f4:	f100 0e14 	add.w	lr, r0, #20
 80169f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80169fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8016a00:	f108 0210 	add.w	r2, r8, #16
 8016a04:	46f2      	mov	sl, lr
 8016a06:	2100      	movs	r1, #0
 8016a08:	f859 3b04 	ldr.w	r3, [r9], #4
 8016a0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016a10:	fa1f f883 	uxth.w	r8, r3
 8016a14:	fa11 f18b 	uxtah	r1, r1, fp
 8016a18:	0c1b      	lsrs	r3, r3, #16
 8016a1a:	eba1 0808 	sub.w	r8, r1, r8
 8016a1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016a22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016a26:	fa1f f888 	uxth.w	r8, r8
 8016a2a:	1419      	asrs	r1, r3, #16
 8016a2c:	454e      	cmp	r6, r9
 8016a2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016a32:	f84a 3b04 	str.w	r3, [sl], #4
 8016a36:	d8e7      	bhi.n	8016a08 <__mdiff+0x80>
 8016a38:	1b33      	subs	r3, r6, r4
 8016a3a:	3b15      	subs	r3, #21
 8016a3c:	f023 0303 	bic.w	r3, r3, #3
 8016a40:	3304      	adds	r3, #4
 8016a42:	3415      	adds	r4, #21
 8016a44:	42a6      	cmp	r6, r4
 8016a46:	bf38      	it	cc
 8016a48:	2304      	movcc	r3, #4
 8016a4a:	441d      	add	r5, r3
 8016a4c:	4473      	add	r3, lr
 8016a4e:	469e      	mov	lr, r3
 8016a50:	462e      	mov	r6, r5
 8016a52:	4566      	cmp	r6, ip
 8016a54:	d30e      	bcc.n	8016a74 <__mdiff+0xec>
 8016a56:	f10c 0203 	add.w	r2, ip, #3
 8016a5a:	1b52      	subs	r2, r2, r5
 8016a5c:	f022 0203 	bic.w	r2, r2, #3
 8016a60:	3d03      	subs	r5, #3
 8016a62:	45ac      	cmp	ip, r5
 8016a64:	bf38      	it	cc
 8016a66:	2200      	movcc	r2, #0
 8016a68:	441a      	add	r2, r3
 8016a6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016a6e:	b17b      	cbz	r3, 8016a90 <__mdiff+0x108>
 8016a70:	6107      	str	r7, [r0, #16]
 8016a72:	e7a3      	b.n	80169bc <__mdiff+0x34>
 8016a74:	f856 8b04 	ldr.w	r8, [r6], #4
 8016a78:	fa11 f288 	uxtah	r2, r1, r8
 8016a7c:	1414      	asrs	r4, r2, #16
 8016a7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8016a82:	b292      	uxth	r2, r2
 8016a84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8016a88:	f84e 2b04 	str.w	r2, [lr], #4
 8016a8c:	1421      	asrs	r1, r4, #16
 8016a8e:	e7e0      	b.n	8016a52 <__mdiff+0xca>
 8016a90:	3f01      	subs	r7, #1
 8016a92:	e7ea      	b.n	8016a6a <__mdiff+0xe2>
 8016a94:	08017827 	.word	0x08017827
 8016a98:	08017838 	.word	0x08017838

08016a9c <__d2b>:
 8016a9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016aa0:	4689      	mov	r9, r1
 8016aa2:	2101      	movs	r1, #1
 8016aa4:	ec57 6b10 	vmov	r6, r7, d0
 8016aa8:	4690      	mov	r8, r2
 8016aaa:	f7ff fccf 	bl	801644c <_Balloc>
 8016aae:	4604      	mov	r4, r0
 8016ab0:	b930      	cbnz	r0, 8016ac0 <__d2b+0x24>
 8016ab2:	4602      	mov	r2, r0
 8016ab4:	4b25      	ldr	r3, [pc, #148]	; (8016b4c <__d2b+0xb0>)
 8016ab6:	4826      	ldr	r0, [pc, #152]	; (8016b50 <__d2b+0xb4>)
 8016ab8:	f240 310a 	movw	r1, #778	; 0x30a
 8016abc:	f000 f872 	bl	8016ba4 <__assert_func>
 8016ac0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016ac4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016ac8:	bb35      	cbnz	r5, 8016b18 <__d2b+0x7c>
 8016aca:	2e00      	cmp	r6, #0
 8016acc:	9301      	str	r3, [sp, #4]
 8016ace:	d028      	beq.n	8016b22 <__d2b+0x86>
 8016ad0:	4668      	mov	r0, sp
 8016ad2:	9600      	str	r6, [sp, #0]
 8016ad4:	f7ff fd82 	bl	80165dc <__lo0bits>
 8016ad8:	9900      	ldr	r1, [sp, #0]
 8016ada:	b300      	cbz	r0, 8016b1e <__d2b+0x82>
 8016adc:	9a01      	ldr	r2, [sp, #4]
 8016ade:	f1c0 0320 	rsb	r3, r0, #32
 8016ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8016ae6:	430b      	orrs	r3, r1
 8016ae8:	40c2      	lsrs	r2, r0
 8016aea:	6163      	str	r3, [r4, #20]
 8016aec:	9201      	str	r2, [sp, #4]
 8016aee:	9b01      	ldr	r3, [sp, #4]
 8016af0:	61a3      	str	r3, [r4, #24]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	bf14      	ite	ne
 8016af6:	2202      	movne	r2, #2
 8016af8:	2201      	moveq	r2, #1
 8016afa:	6122      	str	r2, [r4, #16]
 8016afc:	b1d5      	cbz	r5, 8016b34 <__d2b+0x98>
 8016afe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016b02:	4405      	add	r5, r0
 8016b04:	f8c9 5000 	str.w	r5, [r9]
 8016b08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016b0c:	f8c8 0000 	str.w	r0, [r8]
 8016b10:	4620      	mov	r0, r4
 8016b12:	b003      	add	sp, #12
 8016b14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016b18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016b1c:	e7d5      	b.n	8016aca <__d2b+0x2e>
 8016b1e:	6161      	str	r1, [r4, #20]
 8016b20:	e7e5      	b.n	8016aee <__d2b+0x52>
 8016b22:	a801      	add	r0, sp, #4
 8016b24:	f7ff fd5a 	bl	80165dc <__lo0bits>
 8016b28:	9b01      	ldr	r3, [sp, #4]
 8016b2a:	6163      	str	r3, [r4, #20]
 8016b2c:	2201      	movs	r2, #1
 8016b2e:	6122      	str	r2, [r4, #16]
 8016b30:	3020      	adds	r0, #32
 8016b32:	e7e3      	b.n	8016afc <__d2b+0x60>
 8016b34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016b38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016b3c:	f8c9 0000 	str.w	r0, [r9]
 8016b40:	6918      	ldr	r0, [r3, #16]
 8016b42:	f7ff fd2b 	bl	801659c <__hi0bits>
 8016b46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016b4a:	e7df      	b.n	8016b0c <__d2b+0x70>
 8016b4c:	08017827 	.word	0x08017827
 8016b50:	08017838 	.word	0x08017838

08016b54 <_calloc_r>:
 8016b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b56:	fba1 2402 	umull	r2, r4, r1, r2
 8016b5a:	b94c      	cbnz	r4, 8016b70 <_calloc_r+0x1c>
 8016b5c:	4611      	mov	r1, r2
 8016b5e:	9201      	str	r2, [sp, #4]
 8016b60:	f7fd feb2 	bl	80148c8 <_malloc_r>
 8016b64:	9a01      	ldr	r2, [sp, #4]
 8016b66:	4605      	mov	r5, r0
 8016b68:	b930      	cbnz	r0, 8016b78 <_calloc_r+0x24>
 8016b6a:	4628      	mov	r0, r5
 8016b6c:	b003      	add	sp, #12
 8016b6e:	bd30      	pop	{r4, r5, pc}
 8016b70:	220c      	movs	r2, #12
 8016b72:	6002      	str	r2, [r0, #0]
 8016b74:	2500      	movs	r5, #0
 8016b76:	e7f8      	b.n	8016b6a <_calloc_r+0x16>
 8016b78:	4621      	mov	r1, r4
 8016b7a:	f7fd fe31 	bl	80147e0 <memset>
 8016b7e:	e7f4      	b.n	8016b6a <_calloc_r+0x16>

08016b80 <_read_r>:
 8016b80:	b538      	push	{r3, r4, r5, lr}
 8016b82:	4d07      	ldr	r5, [pc, #28]	; (8016ba0 <_read_r+0x20>)
 8016b84:	4604      	mov	r4, r0
 8016b86:	4608      	mov	r0, r1
 8016b88:	4611      	mov	r1, r2
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	602a      	str	r2, [r5, #0]
 8016b8e:	461a      	mov	r2, r3
 8016b90:	f7f3 f8f8 	bl	8009d84 <_read>
 8016b94:	1c43      	adds	r3, r0, #1
 8016b96:	d102      	bne.n	8016b9e <_read_r+0x1e>
 8016b98:	682b      	ldr	r3, [r5, #0]
 8016b9a:	b103      	cbz	r3, 8016b9e <_read_r+0x1e>
 8016b9c:	6023      	str	r3, [r4, #0]
 8016b9e:	bd38      	pop	{r3, r4, r5, pc}
 8016ba0:	2000a2b0 	.word	0x2000a2b0

08016ba4 <__assert_func>:
 8016ba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016ba6:	4614      	mov	r4, r2
 8016ba8:	461a      	mov	r2, r3
 8016baa:	4b09      	ldr	r3, [pc, #36]	; (8016bd0 <__assert_func+0x2c>)
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	4605      	mov	r5, r0
 8016bb0:	68d8      	ldr	r0, [r3, #12]
 8016bb2:	b14c      	cbz	r4, 8016bc8 <__assert_func+0x24>
 8016bb4:	4b07      	ldr	r3, [pc, #28]	; (8016bd4 <__assert_func+0x30>)
 8016bb6:	9100      	str	r1, [sp, #0]
 8016bb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016bbc:	4906      	ldr	r1, [pc, #24]	; (8016bd8 <__assert_func+0x34>)
 8016bbe:	462b      	mov	r3, r5
 8016bc0:	f000 f80e 	bl	8016be0 <fiprintf>
 8016bc4:	f7fd fcc4 	bl	8014550 <abort>
 8016bc8:	4b04      	ldr	r3, [pc, #16]	; (8016bdc <__assert_func+0x38>)
 8016bca:	461c      	mov	r4, r3
 8016bcc:	e7f3      	b.n	8016bb6 <__assert_func+0x12>
 8016bce:	bf00      	nop
 8016bd0:	20000030 	.word	0x20000030
 8016bd4:	08017994 	.word	0x08017994
 8016bd8:	080179a1 	.word	0x080179a1
 8016bdc:	080179cf 	.word	0x080179cf

08016be0 <fiprintf>:
 8016be0:	b40e      	push	{r1, r2, r3}
 8016be2:	b503      	push	{r0, r1, lr}
 8016be4:	4601      	mov	r1, r0
 8016be6:	ab03      	add	r3, sp, #12
 8016be8:	4805      	ldr	r0, [pc, #20]	; (8016c00 <fiprintf+0x20>)
 8016bea:	f853 2b04 	ldr.w	r2, [r3], #4
 8016bee:	6800      	ldr	r0, [r0, #0]
 8016bf0:	9301      	str	r3, [sp, #4]
 8016bf2:	f000 f843 	bl	8016c7c <_vfiprintf_r>
 8016bf6:	b002      	add	sp, #8
 8016bf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8016bfc:	b003      	add	sp, #12
 8016bfe:	4770      	bx	lr
 8016c00:	20000030 	.word	0x20000030

08016c04 <__ascii_mbtowc>:
 8016c04:	b082      	sub	sp, #8
 8016c06:	b901      	cbnz	r1, 8016c0a <__ascii_mbtowc+0x6>
 8016c08:	a901      	add	r1, sp, #4
 8016c0a:	b142      	cbz	r2, 8016c1e <__ascii_mbtowc+0x1a>
 8016c0c:	b14b      	cbz	r3, 8016c22 <__ascii_mbtowc+0x1e>
 8016c0e:	7813      	ldrb	r3, [r2, #0]
 8016c10:	600b      	str	r3, [r1, #0]
 8016c12:	7812      	ldrb	r2, [r2, #0]
 8016c14:	1e10      	subs	r0, r2, #0
 8016c16:	bf18      	it	ne
 8016c18:	2001      	movne	r0, #1
 8016c1a:	b002      	add	sp, #8
 8016c1c:	4770      	bx	lr
 8016c1e:	4610      	mov	r0, r2
 8016c20:	e7fb      	b.n	8016c1a <__ascii_mbtowc+0x16>
 8016c22:	f06f 0001 	mvn.w	r0, #1
 8016c26:	e7f8      	b.n	8016c1a <__ascii_mbtowc+0x16>

08016c28 <__sfputc_r>:
 8016c28:	6893      	ldr	r3, [r2, #8]
 8016c2a:	3b01      	subs	r3, #1
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	b410      	push	{r4}
 8016c30:	6093      	str	r3, [r2, #8]
 8016c32:	da08      	bge.n	8016c46 <__sfputc_r+0x1e>
 8016c34:	6994      	ldr	r4, [r2, #24]
 8016c36:	42a3      	cmp	r3, r4
 8016c38:	db01      	blt.n	8016c3e <__sfputc_r+0x16>
 8016c3a:	290a      	cmp	r1, #10
 8016c3c:	d103      	bne.n	8016c46 <__sfputc_r+0x1e>
 8016c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c42:	f000 b94b 	b.w	8016edc <__swbuf_r>
 8016c46:	6813      	ldr	r3, [r2, #0]
 8016c48:	1c58      	adds	r0, r3, #1
 8016c4a:	6010      	str	r0, [r2, #0]
 8016c4c:	7019      	strb	r1, [r3, #0]
 8016c4e:	4608      	mov	r0, r1
 8016c50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c54:	4770      	bx	lr

08016c56 <__sfputs_r>:
 8016c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c58:	4606      	mov	r6, r0
 8016c5a:	460f      	mov	r7, r1
 8016c5c:	4614      	mov	r4, r2
 8016c5e:	18d5      	adds	r5, r2, r3
 8016c60:	42ac      	cmp	r4, r5
 8016c62:	d101      	bne.n	8016c68 <__sfputs_r+0x12>
 8016c64:	2000      	movs	r0, #0
 8016c66:	e007      	b.n	8016c78 <__sfputs_r+0x22>
 8016c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016c6c:	463a      	mov	r2, r7
 8016c6e:	4630      	mov	r0, r6
 8016c70:	f7ff ffda 	bl	8016c28 <__sfputc_r>
 8016c74:	1c43      	adds	r3, r0, #1
 8016c76:	d1f3      	bne.n	8016c60 <__sfputs_r+0xa>
 8016c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016c7c <_vfiprintf_r>:
 8016c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c80:	460d      	mov	r5, r1
 8016c82:	b09d      	sub	sp, #116	; 0x74
 8016c84:	4614      	mov	r4, r2
 8016c86:	4698      	mov	r8, r3
 8016c88:	4606      	mov	r6, r0
 8016c8a:	b118      	cbz	r0, 8016c94 <_vfiprintf_r+0x18>
 8016c8c:	6983      	ldr	r3, [r0, #24]
 8016c8e:	b90b      	cbnz	r3, 8016c94 <_vfiprintf_r+0x18>
 8016c90:	f7fd fcca 	bl	8014628 <__sinit>
 8016c94:	4b89      	ldr	r3, [pc, #548]	; (8016ebc <_vfiprintf_r+0x240>)
 8016c96:	429d      	cmp	r5, r3
 8016c98:	d11b      	bne.n	8016cd2 <_vfiprintf_r+0x56>
 8016c9a:	6875      	ldr	r5, [r6, #4]
 8016c9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016c9e:	07d9      	lsls	r1, r3, #31
 8016ca0:	d405      	bmi.n	8016cae <_vfiprintf_r+0x32>
 8016ca2:	89ab      	ldrh	r3, [r5, #12]
 8016ca4:	059a      	lsls	r2, r3, #22
 8016ca6:	d402      	bmi.n	8016cae <_vfiprintf_r+0x32>
 8016ca8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016caa:	f7fd fd80 	bl	80147ae <__retarget_lock_acquire_recursive>
 8016cae:	89ab      	ldrh	r3, [r5, #12]
 8016cb0:	071b      	lsls	r3, r3, #28
 8016cb2:	d501      	bpl.n	8016cb8 <_vfiprintf_r+0x3c>
 8016cb4:	692b      	ldr	r3, [r5, #16]
 8016cb6:	b9eb      	cbnz	r3, 8016cf4 <_vfiprintf_r+0x78>
 8016cb8:	4629      	mov	r1, r5
 8016cba:	4630      	mov	r0, r6
 8016cbc:	f000 f96e 	bl	8016f9c <__swsetup_r>
 8016cc0:	b1c0      	cbz	r0, 8016cf4 <_vfiprintf_r+0x78>
 8016cc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016cc4:	07dc      	lsls	r4, r3, #31
 8016cc6:	d50e      	bpl.n	8016ce6 <_vfiprintf_r+0x6a>
 8016cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8016ccc:	b01d      	add	sp, #116	; 0x74
 8016cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cd2:	4b7b      	ldr	r3, [pc, #492]	; (8016ec0 <_vfiprintf_r+0x244>)
 8016cd4:	429d      	cmp	r5, r3
 8016cd6:	d101      	bne.n	8016cdc <_vfiprintf_r+0x60>
 8016cd8:	68b5      	ldr	r5, [r6, #8]
 8016cda:	e7df      	b.n	8016c9c <_vfiprintf_r+0x20>
 8016cdc:	4b79      	ldr	r3, [pc, #484]	; (8016ec4 <_vfiprintf_r+0x248>)
 8016cde:	429d      	cmp	r5, r3
 8016ce0:	bf08      	it	eq
 8016ce2:	68f5      	ldreq	r5, [r6, #12]
 8016ce4:	e7da      	b.n	8016c9c <_vfiprintf_r+0x20>
 8016ce6:	89ab      	ldrh	r3, [r5, #12]
 8016ce8:	0598      	lsls	r0, r3, #22
 8016cea:	d4ed      	bmi.n	8016cc8 <_vfiprintf_r+0x4c>
 8016cec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016cee:	f7fd fd60 	bl	80147b2 <__retarget_lock_release_recursive>
 8016cf2:	e7e9      	b.n	8016cc8 <_vfiprintf_r+0x4c>
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8016cf8:	2320      	movs	r3, #32
 8016cfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016cfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8016d02:	2330      	movs	r3, #48	; 0x30
 8016d04:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8016ec8 <_vfiprintf_r+0x24c>
 8016d08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016d0c:	f04f 0901 	mov.w	r9, #1
 8016d10:	4623      	mov	r3, r4
 8016d12:	469a      	mov	sl, r3
 8016d14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016d18:	b10a      	cbz	r2, 8016d1e <_vfiprintf_r+0xa2>
 8016d1a:	2a25      	cmp	r2, #37	; 0x25
 8016d1c:	d1f9      	bne.n	8016d12 <_vfiprintf_r+0x96>
 8016d1e:	ebba 0b04 	subs.w	fp, sl, r4
 8016d22:	d00b      	beq.n	8016d3c <_vfiprintf_r+0xc0>
 8016d24:	465b      	mov	r3, fp
 8016d26:	4622      	mov	r2, r4
 8016d28:	4629      	mov	r1, r5
 8016d2a:	4630      	mov	r0, r6
 8016d2c:	f7ff ff93 	bl	8016c56 <__sfputs_r>
 8016d30:	3001      	adds	r0, #1
 8016d32:	f000 80aa 	beq.w	8016e8a <_vfiprintf_r+0x20e>
 8016d36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016d38:	445a      	add	r2, fp
 8016d3a:	9209      	str	r2, [sp, #36]	; 0x24
 8016d3c:	f89a 3000 	ldrb.w	r3, [sl]
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	f000 80a2 	beq.w	8016e8a <_vfiprintf_r+0x20e>
 8016d46:	2300      	movs	r3, #0
 8016d48:	f04f 32ff 	mov.w	r2, #4294967295
 8016d4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016d50:	f10a 0a01 	add.w	sl, sl, #1
 8016d54:	9304      	str	r3, [sp, #16]
 8016d56:	9307      	str	r3, [sp, #28]
 8016d58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016d5c:	931a      	str	r3, [sp, #104]	; 0x68
 8016d5e:	4654      	mov	r4, sl
 8016d60:	2205      	movs	r2, #5
 8016d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016d66:	4858      	ldr	r0, [pc, #352]	; (8016ec8 <_vfiprintf_r+0x24c>)
 8016d68:	f7e9 fa3a 	bl	80001e0 <memchr>
 8016d6c:	9a04      	ldr	r2, [sp, #16]
 8016d6e:	b9d8      	cbnz	r0, 8016da8 <_vfiprintf_r+0x12c>
 8016d70:	06d1      	lsls	r1, r2, #27
 8016d72:	bf44      	itt	mi
 8016d74:	2320      	movmi	r3, #32
 8016d76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016d7a:	0713      	lsls	r3, r2, #28
 8016d7c:	bf44      	itt	mi
 8016d7e:	232b      	movmi	r3, #43	; 0x2b
 8016d80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016d84:	f89a 3000 	ldrb.w	r3, [sl]
 8016d88:	2b2a      	cmp	r3, #42	; 0x2a
 8016d8a:	d015      	beq.n	8016db8 <_vfiprintf_r+0x13c>
 8016d8c:	9a07      	ldr	r2, [sp, #28]
 8016d8e:	4654      	mov	r4, sl
 8016d90:	2000      	movs	r0, #0
 8016d92:	f04f 0c0a 	mov.w	ip, #10
 8016d96:	4621      	mov	r1, r4
 8016d98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016d9c:	3b30      	subs	r3, #48	; 0x30
 8016d9e:	2b09      	cmp	r3, #9
 8016da0:	d94e      	bls.n	8016e40 <_vfiprintf_r+0x1c4>
 8016da2:	b1b0      	cbz	r0, 8016dd2 <_vfiprintf_r+0x156>
 8016da4:	9207      	str	r2, [sp, #28]
 8016da6:	e014      	b.n	8016dd2 <_vfiprintf_r+0x156>
 8016da8:	eba0 0308 	sub.w	r3, r0, r8
 8016dac:	fa09 f303 	lsl.w	r3, r9, r3
 8016db0:	4313      	orrs	r3, r2
 8016db2:	9304      	str	r3, [sp, #16]
 8016db4:	46a2      	mov	sl, r4
 8016db6:	e7d2      	b.n	8016d5e <_vfiprintf_r+0xe2>
 8016db8:	9b03      	ldr	r3, [sp, #12]
 8016dba:	1d19      	adds	r1, r3, #4
 8016dbc:	681b      	ldr	r3, [r3, #0]
 8016dbe:	9103      	str	r1, [sp, #12]
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	bfbb      	ittet	lt
 8016dc4:	425b      	neglt	r3, r3
 8016dc6:	f042 0202 	orrlt.w	r2, r2, #2
 8016dca:	9307      	strge	r3, [sp, #28]
 8016dcc:	9307      	strlt	r3, [sp, #28]
 8016dce:	bfb8      	it	lt
 8016dd0:	9204      	strlt	r2, [sp, #16]
 8016dd2:	7823      	ldrb	r3, [r4, #0]
 8016dd4:	2b2e      	cmp	r3, #46	; 0x2e
 8016dd6:	d10c      	bne.n	8016df2 <_vfiprintf_r+0x176>
 8016dd8:	7863      	ldrb	r3, [r4, #1]
 8016dda:	2b2a      	cmp	r3, #42	; 0x2a
 8016ddc:	d135      	bne.n	8016e4a <_vfiprintf_r+0x1ce>
 8016dde:	9b03      	ldr	r3, [sp, #12]
 8016de0:	1d1a      	adds	r2, r3, #4
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	9203      	str	r2, [sp, #12]
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	bfb8      	it	lt
 8016dea:	f04f 33ff 	movlt.w	r3, #4294967295
 8016dee:	3402      	adds	r4, #2
 8016df0:	9305      	str	r3, [sp, #20]
 8016df2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016ed8 <_vfiprintf_r+0x25c>
 8016df6:	7821      	ldrb	r1, [r4, #0]
 8016df8:	2203      	movs	r2, #3
 8016dfa:	4650      	mov	r0, sl
 8016dfc:	f7e9 f9f0 	bl	80001e0 <memchr>
 8016e00:	b140      	cbz	r0, 8016e14 <_vfiprintf_r+0x198>
 8016e02:	2340      	movs	r3, #64	; 0x40
 8016e04:	eba0 000a 	sub.w	r0, r0, sl
 8016e08:	fa03 f000 	lsl.w	r0, r3, r0
 8016e0c:	9b04      	ldr	r3, [sp, #16]
 8016e0e:	4303      	orrs	r3, r0
 8016e10:	3401      	adds	r4, #1
 8016e12:	9304      	str	r3, [sp, #16]
 8016e14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e18:	482c      	ldr	r0, [pc, #176]	; (8016ecc <_vfiprintf_r+0x250>)
 8016e1a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016e1e:	2206      	movs	r2, #6
 8016e20:	f7e9 f9de 	bl	80001e0 <memchr>
 8016e24:	2800      	cmp	r0, #0
 8016e26:	d03f      	beq.n	8016ea8 <_vfiprintf_r+0x22c>
 8016e28:	4b29      	ldr	r3, [pc, #164]	; (8016ed0 <_vfiprintf_r+0x254>)
 8016e2a:	bb1b      	cbnz	r3, 8016e74 <_vfiprintf_r+0x1f8>
 8016e2c:	9b03      	ldr	r3, [sp, #12]
 8016e2e:	3307      	adds	r3, #7
 8016e30:	f023 0307 	bic.w	r3, r3, #7
 8016e34:	3308      	adds	r3, #8
 8016e36:	9303      	str	r3, [sp, #12]
 8016e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e3a:	443b      	add	r3, r7
 8016e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8016e3e:	e767      	b.n	8016d10 <_vfiprintf_r+0x94>
 8016e40:	fb0c 3202 	mla	r2, ip, r2, r3
 8016e44:	460c      	mov	r4, r1
 8016e46:	2001      	movs	r0, #1
 8016e48:	e7a5      	b.n	8016d96 <_vfiprintf_r+0x11a>
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	3401      	adds	r4, #1
 8016e4e:	9305      	str	r3, [sp, #20]
 8016e50:	4619      	mov	r1, r3
 8016e52:	f04f 0c0a 	mov.w	ip, #10
 8016e56:	4620      	mov	r0, r4
 8016e58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016e5c:	3a30      	subs	r2, #48	; 0x30
 8016e5e:	2a09      	cmp	r2, #9
 8016e60:	d903      	bls.n	8016e6a <_vfiprintf_r+0x1ee>
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d0c5      	beq.n	8016df2 <_vfiprintf_r+0x176>
 8016e66:	9105      	str	r1, [sp, #20]
 8016e68:	e7c3      	b.n	8016df2 <_vfiprintf_r+0x176>
 8016e6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8016e6e:	4604      	mov	r4, r0
 8016e70:	2301      	movs	r3, #1
 8016e72:	e7f0      	b.n	8016e56 <_vfiprintf_r+0x1da>
 8016e74:	ab03      	add	r3, sp, #12
 8016e76:	9300      	str	r3, [sp, #0]
 8016e78:	462a      	mov	r2, r5
 8016e7a:	4b16      	ldr	r3, [pc, #88]	; (8016ed4 <_vfiprintf_r+0x258>)
 8016e7c:	a904      	add	r1, sp, #16
 8016e7e:	4630      	mov	r0, r6
 8016e80:	f7fd fe36 	bl	8014af0 <_printf_float>
 8016e84:	4607      	mov	r7, r0
 8016e86:	1c78      	adds	r0, r7, #1
 8016e88:	d1d6      	bne.n	8016e38 <_vfiprintf_r+0x1bc>
 8016e8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016e8c:	07d9      	lsls	r1, r3, #31
 8016e8e:	d405      	bmi.n	8016e9c <_vfiprintf_r+0x220>
 8016e90:	89ab      	ldrh	r3, [r5, #12]
 8016e92:	059a      	lsls	r2, r3, #22
 8016e94:	d402      	bmi.n	8016e9c <_vfiprintf_r+0x220>
 8016e96:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016e98:	f7fd fc8b 	bl	80147b2 <__retarget_lock_release_recursive>
 8016e9c:	89ab      	ldrh	r3, [r5, #12]
 8016e9e:	065b      	lsls	r3, r3, #25
 8016ea0:	f53f af12 	bmi.w	8016cc8 <_vfiprintf_r+0x4c>
 8016ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ea6:	e711      	b.n	8016ccc <_vfiprintf_r+0x50>
 8016ea8:	ab03      	add	r3, sp, #12
 8016eaa:	9300      	str	r3, [sp, #0]
 8016eac:	462a      	mov	r2, r5
 8016eae:	4b09      	ldr	r3, [pc, #36]	; (8016ed4 <_vfiprintf_r+0x258>)
 8016eb0:	a904      	add	r1, sp, #16
 8016eb2:	4630      	mov	r0, r6
 8016eb4:	f7fe f8c0 	bl	8015038 <_printf_i>
 8016eb8:	e7e4      	b.n	8016e84 <_vfiprintf_r+0x208>
 8016eba:	bf00      	nop
 8016ebc:	08017730 	.word	0x08017730
 8016ec0:	08017750 	.word	0x08017750
 8016ec4:	08017710 	.word	0x08017710
 8016ec8:	080179da 	.word	0x080179da
 8016ecc:	080179e4 	.word	0x080179e4
 8016ed0:	08014af1 	.word	0x08014af1
 8016ed4:	08016c57 	.word	0x08016c57
 8016ed8:	080179e0 	.word	0x080179e0

08016edc <__swbuf_r>:
 8016edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ede:	460e      	mov	r6, r1
 8016ee0:	4614      	mov	r4, r2
 8016ee2:	4605      	mov	r5, r0
 8016ee4:	b118      	cbz	r0, 8016eee <__swbuf_r+0x12>
 8016ee6:	6983      	ldr	r3, [r0, #24]
 8016ee8:	b90b      	cbnz	r3, 8016eee <__swbuf_r+0x12>
 8016eea:	f7fd fb9d 	bl	8014628 <__sinit>
 8016eee:	4b21      	ldr	r3, [pc, #132]	; (8016f74 <__swbuf_r+0x98>)
 8016ef0:	429c      	cmp	r4, r3
 8016ef2:	d12b      	bne.n	8016f4c <__swbuf_r+0x70>
 8016ef4:	686c      	ldr	r4, [r5, #4]
 8016ef6:	69a3      	ldr	r3, [r4, #24]
 8016ef8:	60a3      	str	r3, [r4, #8]
 8016efa:	89a3      	ldrh	r3, [r4, #12]
 8016efc:	071a      	lsls	r2, r3, #28
 8016efe:	d52f      	bpl.n	8016f60 <__swbuf_r+0x84>
 8016f00:	6923      	ldr	r3, [r4, #16]
 8016f02:	b36b      	cbz	r3, 8016f60 <__swbuf_r+0x84>
 8016f04:	6923      	ldr	r3, [r4, #16]
 8016f06:	6820      	ldr	r0, [r4, #0]
 8016f08:	1ac0      	subs	r0, r0, r3
 8016f0a:	6963      	ldr	r3, [r4, #20]
 8016f0c:	b2f6      	uxtb	r6, r6
 8016f0e:	4283      	cmp	r3, r0
 8016f10:	4637      	mov	r7, r6
 8016f12:	dc04      	bgt.n	8016f1e <__swbuf_r+0x42>
 8016f14:	4621      	mov	r1, r4
 8016f16:	4628      	mov	r0, r5
 8016f18:	f7ff fa3a 	bl	8016390 <_fflush_r>
 8016f1c:	bb30      	cbnz	r0, 8016f6c <__swbuf_r+0x90>
 8016f1e:	68a3      	ldr	r3, [r4, #8]
 8016f20:	3b01      	subs	r3, #1
 8016f22:	60a3      	str	r3, [r4, #8]
 8016f24:	6823      	ldr	r3, [r4, #0]
 8016f26:	1c5a      	adds	r2, r3, #1
 8016f28:	6022      	str	r2, [r4, #0]
 8016f2a:	701e      	strb	r6, [r3, #0]
 8016f2c:	6963      	ldr	r3, [r4, #20]
 8016f2e:	3001      	adds	r0, #1
 8016f30:	4283      	cmp	r3, r0
 8016f32:	d004      	beq.n	8016f3e <__swbuf_r+0x62>
 8016f34:	89a3      	ldrh	r3, [r4, #12]
 8016f36:	07db      	lsls	r3, r3, #31
 8016f38:	d506      	bpl.n	8016f48 <__swbuf_r+0x6c>
 8016f3a:	2e0a      	cmp	r6, #10
 8016f3c:	d104      	bne.n	8016f48 <__swbuf_r+0x6c>
 8016f3e:	4621      	mov	r1, r4
 8016f40:	4628      	mov	r0, r5
 8016f42:	f7ff fa25 	bl	8016390 <_fflush_r>
 8016f46:	b988      	cbnz	r0, 8016f6c <__swbuf_r+0x90>
 8016f48:	4638      	mov	r0, r7
 8016f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f4c:	4b0a      	ldr	r3, [pc, #40]	; (8016f78 <__swbuf_r+0x9c>)
 8016f4e:	429c      	cmp	r4, r3
 8016f50:	d101      	bne.n	8016f56 <__swbuf_r+0x7a>
 8016f52:	68ac      	ldr	r4, [r5, #8]
 8016f54:	e7cf      	b.n	8016ef6 <__swbuf_r+0x1a>
 8016f56:	4b09      	ldr	r3, [pc, #36]	; (8016f7c <__swbuf_r+0xa0>)
 8016f58:	429c      	cmp	r4, r3
 8016f5a:	bf08      	it	eq
 8016f5c:	68ec      	ldreq	r4, [r5, #12]
 8016f5e:	e7ca      	b.n	8016ef6 <__swbuf_r+0x1a>
 8016f60:	4621      	mov	r1, r4
 8016f62:	4628      	mov	r0, r5
 8016f64:	f000 f81a 	bl	8016f9c <__swsetup_r>
 8016f68:	2800      	cmp	r0, #0
 8016f6a:	d0cb      	beq.n	8016f04 <__swbuf_r+0x28>
 8016f6c:	f04f 37ff 	mov.w	r7, #4294967295
 8016f70:	e7ea      	b.n	8016f48 <__swbuf_r+0x6c>
 8016f72:	bf00      	nop
 8016f74:	08017730 	.word	0x08017730
 8016f78:	08017750 	.word	0x08017750
 8016f7c:	08017710 	.word	0x08017710

08016f80 <__ascii_wctomb>:
 8016f80:	b149      	cbz	r1, 8016f96 <__ascii_wctomb+0x16>
 8016f82:	2aff      	cmp	r2, #255	; 0xff
 8016f84:	bf85      	ittet	hi
 8016f86:	238a      	movhi	r3, #138	; 0x8a
 8016f88:	6003      	strhi	r3, [r0, #0]
 8016f8a:	700a      	strbls	r2, [r1, #0]
 8016f8c:	f04f 30ff 	movhi.w	r0, #4294967295
 8016f90:	bf98      	it	ls
 8016f92:	2001      	movls	r0, #1
 8016f94:	4770      	bx	lr
 8016f96:	4608      	mov	r0, r1
 8016f98:	4770      	bx	lr
	...

08016f9c <__swsetup_r>:
 8016f9c:	4b32      	ldr	r3, [pc, #200]	; (8017068 <__swsetup_r+0xcc>)
 8016f9e:	b570      	push	{r4, r5, r6, lr}
 8016fa0:	681d      	ldr	r5, [r3, #0]
 8016fa2:	4606      	mov	r6, r0
 8016fa4:	460c      	mov	r4, r1
 8016fa6:	b125      	cbz	r5, 8016fb2 <__swsetup_r+0x16>
 8016fa8:	69ab      	ldr	r3, [r5, #24]
 8016faa:	b913      	cbnz	r3, 8016fb2 <__swsetup_r+0x16>
 8016fac:	4628      	mov	r0, r5
 8016fae:	f7fd fb3b 	bl	8014628 <__sinit>
 8016fb2:	4b2e      	ldr	r3, [pc, #184]	; (801706c <__swsetup_r+0xd0>)
 8016fb4:	429c      	cmp	r4, r3
 8016fb6:	d10f      	bne.n	8016fd8 <__swsetup_r+0x3c>
 8016fb8:	686c      	ldr	r4, [r5, #4]
 8016fba:	89a3      	ldrh	r3, [r4, #12]
 8016fbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016fc0:	0719      	lsls	r1, r3, #28
 8016fc2:	d42c      	bmi.n	801701e <__swsetup_r+0x82>
 8016fc4:	06dd      	lsls	r5, r3, #27
 8016fc6:	d411      	bmi.n	8016fec <__swsetup_r+0x50>
 8016fc8:	2309      	movs	r3, #9
 8016fca:	6033      	str	r3, [r6, #0]
 8016fcc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016fd0:	81a3      	strh	r3, [r4, #12]
 8016fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8016fd6:	e03e      	b.n	8017056 <__swsetup_r+0xba>
 8016fd8:	4b25      	ldr	r3, [pc, #148]	; (8017070 <__swsetup_r+0xd4>)
 8016fda:	429c      	cmp	r4, r3
 8016fdc:	d101      	bne.n	8016fe2 <__swsetup_r+0x46>
 8016fde:	68ac      	ldr	r4, [r5, #8]
 8016fe0:	e7eb      	b.n	8016fba <__swsetup_r+0x1e>
 8016fe2:	4b24      	ldr	r3, [pc, #144]	; (8017074 <__swsetup_r+0xd8>)
 8016fe4:	429c      	cmp	r4, r3
 8016fe6:	bf08      	it	eq
 8016fe8:	68ec      	ldreq	r4, [r5, #12]
 8016fea:	e7e6      	b.n	8016fba <__swsetup_r+0x1e>
 8016fec:	0758      	lsls	r0, r3, #29
 8016fee:	d512      	bpl.n	8017016 <__swsetup_r+0x7a>
 8016ff0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ff2:	b141      	cbz	r1, 8017006 <__swsetup_r+0x6a>
 8016ff4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016ff8:	4299      	cmp	r1, r3
 8016ffa:	d002      	beq.n	8017002 <__swsetup_r+0x66>
 8016ffc:	4630      	mov	r0, r6
 8016ffe:	f7fd fbf7 	bl	80147f0 <_free_r>
 8017002:	2300      	movs	r3, #0
 8017004:	6363      	str	r3, [r4, #52]	; 0x34
 8017006:	89a3      	ldrh	r3, [r4, #12]
 8017008:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801700c:	81a3      	strh	r3, [r4, #12]
 801700e:	2300      	movs	r3, #0
 8017010:	6063      	str	r3, [r4, #4]
 8017012:	6923      	ldr	r3, [r4, #16]
 8017014:	6023      	str	r3, [r4, #0]
 8017016:	89a3      	ldrh	r3, [r4, #12]
 8017018:	f043 0308 	orr.w	r3, r3, #8
 801701c:	81a3      	strh	r3, [r4, #12]
 801701e:	6923      	ldr	r3, [r4, #16]
 8017020:	b94b      	cbnz	r3, 8017036 <__swsetup_r+0x9a>
 8017022:	89a3      	ldrh	r3, [r4, #12]
 8017024:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017028:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801702c:	d003      	beq.n	8017036 <__swsetup_r+0x9a>
 801702e:	4621      	mov	r1, r4
 8017030:	4630      	mov	r0, r6
 8017032:	f000 f847 	bl	80170c4 <__smakebuf_r>
 8017036:	89a0      	ldrh	r0, [r4, #12]
 8017038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801703c:	f010 0301 	ands.w	r3, r0, #1
 8017040:	d00a      	beq.n	8017058 <__swsetup_r+0xbc>
 8017042:	2300      	movs	r3, #0
 8017044:	60a3      	str	r3, [r4, #8]
 8017046:	6963      	ldr	r3, [r4, #20]
 8017048:	425b      	negs	r3, r3
 801704a:	61a3      	str	r3, [r4, #24]
 801704c:	6923      	ldr	r3, [r4, #16]
 801704e:	b943      	cbnz	r3, 8017062 <__swsetup_r+0xc6>
 8017050:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017054:	d1ba      	bne.n	8016fcc <__swsetup_r+0x30>
 8017056:	bd70      	pop	{r4, r5, r6, pc}
 8017058:	0781      	lsls	r1, r0, #30
 801705a:	bf58      	it	pl
 801705c:	6963      	ldrpl	r3, [r4, #20]
 801705e:	60a3      	str	r3, [r4, #8]
 8017060:	e7f4      	b.n	801704c <__swsetup_r+0xb0>
 8017062:	2000      	movs	r0, #0
 8017064:	e7f7      	b.n	8017056 <__swsetup_r+0xba>
 8017066:	bf00      	nop
 8017068:	20000030 	.word	0x20000030
 801706c:	08017730 	.word	0x08017730
 8017070:	08017750 	.word	0x08017750
 8017074:	08017710 	.word	0x08017710

08017078 <__swhatbuf_r>:
 8017078:	b570      	push	{r4, r5, r6, lr}
 801707a:	460e      	mov	r6, r1
 801707c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017080:	2900      	cmp	r1, #0
 8017082:	b096      	sub	sp, #88	; 0x58
 8017084:	4614      	mov	r4, r2
 8017086:	461d      	mov	r5, r3
 8017088:	da08      	bge.n	801709c <__swhatbuf_r+0x24>
 801708a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801708e:	2200      	movs	r2, #0
 8017090:	602a      	str	r2, [r5, #0]
 8017092:	061a      	lsls	r2, r3, #24
 8017094:	d410      	bmi.n	80170b8 <__swhatbuf_r+0x40>
 8017096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801709a:	e00e      	b.n	80170ba <__swhatbuf_r+0x42>
 801709c:	466a      	mov	r2, sp
 801709e:	f000 f851 	bl	8017144 <_fstat_r>
 80170a2:	2800      	cmp	r0, #0
 80170a4:	dbf1      	blt.n	801708a <__swhatbuf_r+0x12>
 80170a6:	9a01      	ldr	r2, [sp, #4]
 80170a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80170ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80170b0:	425a      	negs	r2, r3
 80170b2:	415a      	adcs	r2, r3
 80170b4:	602a      	str	r2, [r5, #0]
 80170b6:	e7ee      	b.n	8017096 <__swhatbuf_r+0x1e>
 80170b8:	2340      	movs	r3, #64	; 0x40
 80170ba:	2000      	movs	r0, #0
 80170bc:	6023      	str	r3, [r4, #0]
 80170be:	b016      	add	sp, #88	; 0x58
 80170c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080170c4 <__smakebuf_r>:
 80170c4:	898b      	ldrh	r3, [r1, #12]
 80170c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80170c8:	079d      	lsls	r5, r3, #30
 80170ca:	4606      	mov	r6, r0
 80170cc:	460c      	mov	r4, r1
 80170ce:	d507      	bpl.n	80170e0 <__smakebuf_r+0x1c>
 80170d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80170d4:	6023      	str	r3, [r4, #0]
 80170d6:	6123      	str	r3, [r4, #16]
 80170d8:	2301      	movs	r3, #1
 80170da:	6163      	str	r3, [r4, #20]
 80170dc:	b002      	add	sp, #8
 80170de:	bd70      	pop	{r4, r5, r6, pc}
 80170e0:	ab01      	add	r3, sp, #4
 80170e2:	466a      	mov	r2, sp
 80170e4:	f7ff ffc8 	bl	8017078 <__swhatbuf_r>
 80170e8:	9900      	ldr	r1, [sp, #0]
 80170ea:	4605      	mov	r5, r0
 80170ec:	4630      	mov	r0, r6
 80170ee:	f7fd fbeb 	bl	80148c8 <_malloc_r>
 80170f2:	b948      	cbnz	r0, 8017108 <__smakebuf_r+0x44>
 80170f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80170f8:	059a      	lsls	r2, r3, #22
 80170fa:	d4ef      	bmi.n	80170dc <__smakebuf_r+0x18>
 80170fc:	f023 0303 	bic.w	r3, r3, #3
 8017100:	f043 0302 	orr.w	r3, r3, #2
 8017104:	81a3      	strh	r3, [r4, #12]
 8017106:	e7e3      	b.n	80170d0 <__smakebuf_r+0xc>
 8017108:	4b0d      	ldr	r3, [pc, #52]	; (8017140 <__smakebuf_r+0x7c>)
 801710a:	62b3      	str	r3, [r6, #40]	; 0x28
 801710c:	89a3      	ldrh	r3, [r4, #12]
 801710e:	6020      	str	r0, [r4, #0]
 8017110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017114:	81a3      	strh	r3, [r4, #12]
 8017116:	9b00      	ldr	r3, [sp, #0]
 8017118:	6163      	str	r3, [r4, #20]
 801711a:	9b01      	ldr	r3, [sp, #4]
 801711c:	6120      	str	r0, [r4, #16]
 801711e:	b15b      	cbz	r3, 8017138 <__smakebuf_r+0x74>
 8017120:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017124:	4630      	mov	r0, r6
 8017126:	f000 f81f 	bl	8017168 <_isatty_r>
 801712a:	b128      	cbz	r0, 8017138 <__smakebuf_r+0x74>
 801712c:	89a3      	ldrh	r3, [r4, #12]
 801712e:	f023 0303 	bic.w	r3, r3, #3
 8017132:	f043 0301 	orr.w	r3, r3, #1
 8017136:	81a3      	strh	r3, [r4, #12]
 8017138:	89a0      	ldrh	r0, [r4, #12]
 801713a:	4305      	orrs	r5, r0
 801713c:	81a5      	strh	r5, [r4, #12]
 801713e:	e7cd      	b.n	80170dc <__smakebuf_r+0x18>
 8017140:	080145c1 	.word	0x080145c1

08017144 <_fstat_r>:
 8017144:	b538      	push	{r3, r4, r5, lr}
 8017146:	4d07      	ldr	r5, [pc, #28]	; (8017164 <_fstat_r+0x20>)
 8017148:	2300      	movs	r3, #0
 801714a:	4604      	mov	r4, r0
 801714c:	4608      	mov	r0, r1
 801714e:	4611      	mov	r1, r2
 8017150:	602b      	str	r3, [r5, #0]
 8017152:	f7f2 fe5c 	bl	8009e0e <_fstat>
 8017156:	1c43      	adds	r3, r0, #1
 8017158:	d102      	bne.n	8017160 <_fstat_r+0x1c>
 801715a:	682b      	ldr	r3, [r5, #0]
 801715c:	b103      	cbz	r3, 8017160 <_fstat_r+0x1c>
 801715e:	6023      	str	r3, [r4, #0]
 8017160:	bd38      	pop	{r3, r4, r5, pc}
 8017162:	bf00      	nop
 8017164:	2000a2b0 	.word	0x2000a2b0

08017168 <_isatty_r>:
 8017168:	b538      	push	{r3, r4, r5, lr}
 801716a:	4d06      	ldr	r5, [pc, #24]	; (8017184 <_isatty_r+0x1c>)
 801716c:	2300      	movs	r3, #0
 801716e:	4604      	mov	r4, r0
 8017170:	4608      	mov	r0, r1
 8017172:	602b      	str	r3, [r5, #0]
 8017174:	f7f2 fe5b 	bl	8009e2e <_isatty>
 8017178:	1c43      	adds	r3, r0, #1
 801717a:	d102      	bne.n	8017182 <_isatty_r+0x1a>
 801717c:	682b      	ldr	r3, [r5, #0]
 801717e:	b103      	cbz	r3, 8017182 <_isatty_r+0x1a>
 8017180:	6023      	str	r3, [r4, #0]
 8017182:	bd38      	pop	{r3, r4, r5, pc}
 8017184:	2000a2b0 	.word	0x2000a2b0

08017188 <_init>:
 8017188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801718a:	bf00      	nop
 801718c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801718e:	bc08      	pop	{r3}
 8017190:	469e      	mov	lr, r3
 8017192:	4770      	bx	lr

08017194 <_fini>:
 8017194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017196:	bf00      	nop
 8017198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801719a:	bc08      	pop	{r3}
 801719c:	469e      	mov	lr, r3
 801719e:	4770      	bx	lr
