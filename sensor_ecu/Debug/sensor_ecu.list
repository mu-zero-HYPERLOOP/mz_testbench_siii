
sensor_ecu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011bc8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000694  08011d58  08011d58  00021d58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080123ec  080123ec  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  080123ec  080123ec  000223ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080123f4  080123f4  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000002c  080123f4  080123f4  000223f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08012420  08012420  00022420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08012428  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e4  2**0
                  CONTENTS
 10 .bss          0000a2a0  200001e4  200001e4  000301e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  2000a484  2000a484  000301e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005c8c1  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000dc87  00000000  00000000  0008cad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003cf8  00000000  00000000  0009a760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00003948  00000000  00000000  0009e458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010d8b  00000000  00000000  000a1da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000479d5  00000000  00000000  000b2b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00108c68  00000000  00000000  000fa500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00203168  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00011934  00000000  00000000  002031b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011d40 	.word	0x08011d40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08011d40 	.word	0x08011d40

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <_Z41__static_initialization_and_destruction_0ii>:
	OD_HeartbeatInterval_set(value);
}

uint16_t canzero::heartbeat::getInterval(){
	return OD_HeartbeatInterval_get();
}
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d10c      	bne.n	8000fb6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d107      	bne.n	8000fb6 <_Z41__static_initialization_and_destruction_0ii+0x2a>
static MessageBufferHandle_t heartbeatMessageBuffer = xMessageBufferCreate(MSG_BUFFER_SIZE);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2100      	movs	r1, #0
 8000faa:	20c8      	movs	r0, #200	; 0xc8
 8000fac:	f00b fff4 	bl	800cf98 <xStreamBufferGenericCreate>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000fb4:	6013      	str	r3, [r2, #0]
}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000200 	.word	0x20000200

08000fc4 <_GLOBAL__sub_I__ZN7canzero9heartbeat14producer_entryEPv>:
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000fcc:	2001      	movs	r0, #1
 8000fce:	f7ff ffdd 	bl	8000f8c <_Z41__static_initialization_and_destruction_0ii>
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d005      	beq.n	800100c <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	6879      	ldr	r1, [r7, #4]
 8001008:	2203      	movs	r2, #3
 800100a:	4798      	blx	r3
    }
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001016:	b480      	push	{r7}
 8001018:	b083      	sub	sp, #12
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	2b00      	cmp	r3, #0
 8001024:	bf0c      	ite	eq
 8001026:	2301      	moveq	r3, #1
 8001028:	2300      	movne	r3, #0
 800102a:	b2db      	uxtb	r3, r3
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <_ZNSt8functionIFvR9RxMessageEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ffd4 	bl	8000ff0 <_ZNSt14_Function_baseD1Ev>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <_ZN7canzero10receiver_tC1Ev>:

namespace canzero {

static unsigned int receiverIdAcc = 0;

struct receiver_t {
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f875 	bl	800114c <_ZNSt8functionIFvR9RxMessageEEC1Ev>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <_ZN7canzero10receiver_tD1Ev>:
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ffde 	bl	8001038 <_ZNSt8functionIFvR9RxMessageEED1Ev>
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <_ZN7canzero10receiver_taSERKS0_>:
 8001086:	b580      	push	{r7, lr}
 8001088:	b082      	sub	sp, #8
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	6039      	str	r1, [r7, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	4611      	mov	r1, r2
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f887 	bl	80011aa <_ZNSt8functionIFvR9RxMessageEEaSERKS3_>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	611a      	str	r2, [r3, #16]
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	7d1a      	ldrb	r2, [r3, #20]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	751a      	strb	r2, [r3, #20]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	699a      	ldr	r2, [r3, #24]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	619a      	str	r2, [r3, #24]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>:
};

static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
uint32_t g_size = 0;

unsigned int registerMessageReceiverInternal(std::function<void(RxMessage&)> receiver, uint32_t msgId, bool extendedId){
 80010c0:	b590      	push	{r4, r7, lr}
 80010c2:	b08d      	sub	sp, #52	; 0x34
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	4613      	mov	r3, r2
 80010cc:	71fb      	strb	r3, [r7, #7]
	printf("registered Message receiver for id = %u\n", msgId);
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	481a      	ldr	r0, [pc, #104]	; (800113c <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x7c>)
 80010d2:	f00a f8c3 	bl	800b25c <printf_>
	taskENTER_CRITICAL();
 80010d6:	f00d fccd 	bl	800ea74 <vPortEnterCritical>
	const unsigned int id = receiverIdAcc++;
 80010da:	4b19      	ldr	r3, [pc, #100]	; (8001140 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x80>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	4917      	ldr	r1, [pc, #92]	; (8001140 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x80>)
 80010e2:	600a      	str	r2, [r1, #0]
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	const receiver_t recv = {
		.m_callback = receiver,
		.m_id = msgId,
		.m_extendedId = extendedId,
		.m_receiverId = id
	};
 80010e6:	f107 0310 	add.w	r3, r7, #16
 80010ea:	68f9      	ldr	r1, [r7, #12]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 f83a 	bl	8001166 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	623b      	str	r3, [r7, #32]
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80010fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010fe:	62bb      	str	r3, [r7, #40]	; 0x28
	g_receivers[g_size++] = recv;
 8001100:	4b10      	ldr	r3, [pc, #64]	; (8001144 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x84>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	1c53      	adds	r3, r2, #1
 8001106:	490f      	ldr	r1, [pc, #60]	; (8001144 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x84>)
 8001108:	600b      	str	r3, [r1, #0]
 800110a:	4613      	mov	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	1a9b      	subs	r3, r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4a0d      	ldr	r2, [pc, #52]	; (8001148 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb+0x88>)
 8001114:	4413      	add	r3, r2
 8001116:	f107 0210 	add.w	r2, r7, #16
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ffb2 	bl	8001086 <_ZN7canzero10receiver_taSERKS0_>
	taskEXIT_CRITICAL();
 8001122:	f00d fcd7 	bl	800ead4 <vPortExitCritical>
	return id;
 8001126:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	};
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff9d 	bl	800106c <_ZN7canzero10receiver_tD1Ev>
	return id;
 8001132:	4623      	mov	r3, r4
}
 8001134:	4618      	mov	r0, r3
 8001136:	3734      	adds	r7, #52	; 0x34
 8001138:	46bd      	mov	sp, r7
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	08011d58 	.word	0x08011d58
 8001140:	20000204 	.word	0x20000204
 8001144:	20000780 	.word	0x20000780
 8001148:	20000208 	.word	0x20000208

0800114c <_ZNSt8functionIFvR9RxMessageEEC1Ev>:

      /**
       *  @brief Default construct creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function() noexcept
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff3c 	bl	8000fd4 <_ZNSt14_Function_baseC1Ev>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>:
    function(_Functor) -> function<_Signature>;
#endif

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
 800116e:	6039      	str	r1, [r7, #0]
    function(const function& __x)
    : _Function_base()
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff ff2e 	bl	8000fd4 <_ZNSt14_Function_baseC1Ev>
    {
      if (static_cast<bool>(__x))
 8001178:	6838      	ldr	r0, [r7, #0]
 800117a:	f000 f831 	bl	80011e0 <_ZNKSt8functionIFvR9RxMessageEEcvbEv>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d00d      	beq.n	80011a0 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_+0x3a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	6839      	ldr	r1, [r7, #0]
 800118c:	2202      	movs	r2, #2
 800118e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	68da      	ldr	r2, [r3, #12]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	609a      	str	r2, [r3, #8]
	}
    }
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_ZNSt8functionIFvR9RxMessageEEaSERKS3_>:
      operator=(const function& __x)
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	6839      	ldr	r1, [r7, #0]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ffd3 	bl	8001166 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	6879      	ldr	r1, [r7, #4]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f000 f81a 	bl	8001200 <_ZNSt8functionIFvR9RxMessageEE4swapERS3_>
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff31 	bl	8001038 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	return *this;
 80011d6:	687b      	ldr	r3, [r7, #4]
      }
 80011d8:	4618      	mov	r0, r3
 80011da:	3718      	adds	r7, #24
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <_ZNKSt8functionIFvR9RxMessageEEcvbEv>:
      explicit operator bool() const noexcept
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ff13 	bl	8001016 <_ZNKSt14_Function_base8_M_emptyEv>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f083 0301 	eor.w	r3, r3, #1
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}

08001200 <_ZNSt8functionIFvR9RxMessageEE4swapERS3_>:
      void swap(function& __x) noexcept
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	4611      	mov	r1, r2
 8001210:	4618      	mov	r0, r3
 8001212:	f000 f82c 	bl	800126e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f103 0208 	add.w	r2, r3, #8
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	3308      	adds	r3, #8
 8001220:	4619      	mov	r1, r3
 8001222:	4610      	mov	r0, r2
 8001224:	f000 f855 	bl	80012d2 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f103 020c 	add.w	r2, r3, #12
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	330c      	adds	r3, #12
 8001232:	4619      	mov	r1, r3
 8001234:	4610      	mov	r0, r2
 8001236:	f000 f876 	bl	8001326 <_ZSt4swapIPFvRKSt9_Any_dataR9RxMessageEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
      }
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 800126e:	b580      	push	{r7, lr}
 8001270:	b084      	sub	sp, #16
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ffed 	bl	8001258 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 800127e:	4602      	mov	r2, r0
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001288:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 800128c:	6838      	ldr	r0, [r7, #0]
 800128e:	f7ff ffe3 	bl	8001258 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8001292:	4602      	mov	r2, r0
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	e892 0003 	ldmia.w	r2, {r0, r1}
 800129a:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800129e:	f107 0308 	add.w	r3, r7, #8
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ffd8 	bl	8001258 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 80012a8:	4602      	mov	r2, r0
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012b0:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80012b4:	bf00      	nop
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4618      	mov	r0, r3
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b084      	sub	sp, #16
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
 80012da:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ffed 	bl	80012bc <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80012e2:	4603      	mov	r3, r0
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80012e8:	6838      	ldr	r0, [r7, #0]
 80012ea:	f7ff ffe7 	bl	80012bc <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80012ee:	4603      	mov	r3, r0
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80012f6:	f107 030c 	add.w	r3, r7, #12
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ffde 	bl	80012bc <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8001300:	4603      	mov	r3, r0
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	601a      	str	r2, [r3, #0]
    }
 8001308:	bf00      	nop
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4618      	mov	r0, r3
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <_ZSt4swapIPFvRKSt9_Any_dataR9RxMessageEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8001326:	b580      	push	{r7, lr}
 8001328:	b084      	sub	sp, #16
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
 800132e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ffed 	bl	8001310 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 8001336:	4603      	mov	r3, r0
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 800133c:	6838      	ldr	r0, [r7, #0]
 800133e:	f7ff ffe7 	bl	8001310 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 8001342:	4603      	mov	r3, r0
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800134a:	f107 030c 	add.w	r3, r7, #12
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ffde 	bl	8001310 <_ZSt4moveIRPFvRKSt9_Any_dataR9RxMessageEEONSt16remove_referenceIT_E4typeEOS9_>
 8001354:	4603      	mov	r3, r0
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	601a      	str	r2, [r3, #0]
    }
 800135c:	bf00      	nop
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}

08001364 <_Z41__static_initialization_and_destruction_0ii>:
		}
	}
	taskEXIT_CRITICAL();
}

}
 8001364:	b5b0      	push	{r4, r5, r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d10f      	bne.n	8001394 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800137a:	4293      	cmp	r3, r2
 800137c:	d10a      	bne.n	8001394 <_Z41__static_initialization_and_destruction_0ii+0x30>
static receiver_t g_receivers[MAX_REGISTERD_RECEIVERS];
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8001380:	2431      	movs	r4, #49	; 0x31
 8001382:	461d      	mov	r5, r3
 8001384:	2c00      	cmp	r4, #0
 8001386:	db05      	blt.n	8001394 <_Z41__static_initialization_and_destruction_0ii+0x30>
 8001388:	4628      	mov	r0, r5
 800138a:	f7ff fe62 	bl	8001052 <_ZN7canzero10receiver_tC1Ev>
 800138e:	351c      	adds	r5, #28
 8001390:	3c01      	subs	r4, #1
 8001392:	e7f7      	b.n	8001384 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d10d      	bne.n	80013b6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d108      	bne.n	80013b6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 80013a4:	4c07      	ldr	r4, [pc, #28]	; (80013c4 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 80013a8:	429c      	cmp	r4, r3
 80013aa:	d004      	beq.n	80013b6 <_Z41__static_initialization_and_destruction_0ii+0x52>
 80013ac:	3c1c      	subs	r4, #28
 80013ae:	4620      	mov	r0, r4
 80013b0:	f7ff fe5c 	bl	800106c <_ZN7canzero10receiver_tD1Ev>
 80013b4:	e7f7      	b.n	80013a6 <_Z41__static_initialization_and_destruction_0ii+0x42>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bdb0      	pop	{r4, r5, r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000208 	.word	0x20000208
 80013c4:	20000780 	.word	0x20000780

080013c8 <_GLOBAL__sub_I__ZN7canzero6g_sizeE>:
 80013c8:	b580      	push	{r7, lr}
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013d0:	2001      	movs	r0, #1
 80013d2:	f7ff ffc7 	bl	8001364 <_Z41__static_initialization_and_destruction_0ii>
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <_GLOBAL__sub_D__ZN7canzero6g_sizeE>:
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
 80013dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80013e0:	2000      	movs	r0, #0
 80013e2:	f7ff ffbf 	bl	8001364 <_Z41__static_initialization_and_destruction_0ii>
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <_Z41__static_initialization_and_destruction_0ii>:
	 else {
	 printDebug("unknown/unhandled CAN Ext-ID: %lu\n", message.rxHeader.ExtId);
	 }
	 }
	 */
}
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d10c      	bne.n	8001412 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013fe:	4293      	cmp	r3, r2
 8001400:	d107      	bne.n	8001412 <_Z41__static_initialization_and_destruction_0ii+0x2a>
MessageBufferHandle_t handlePDO1MessageBuffer = xMessageBufferCreate(
 8001402:	2201      	movs	r2, #1
 8001404:	2100      	movs	r1, #0
 8001406:	20c8      	movs	r0, #200	; 0xc8
 8001408:	f00b fdc6 	bl	800cf98 <xStreamBufferGenericCreate>
 800140c:	4603      	mov	r3, r0
 800140e:	4a03      	ldr	r2, [pc, #12]	; (800141c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001410:	6013      	str	r3, [r2, #0]
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	20000784 	.word	0x20000784

08001420 <_GLOBAL__sub_I_handlePDO1MessageBuffer>:
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
 8001424:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff ffdd 	bl	80013e8 <_Z41__static_initialization_and_destruction_0ii>
 800142e:	bd80      	pop	{r7, pc}

08001430 <_Z41__static_initialization_and_destruction_0ii>:
 */
#include "cz_receive_queue.hpp"
#include "cz_typedefinitions.hpp"

static const osMessageQueueAttr_t czReceiveQueueAttr = {"czReceiveQueue",0,NULL,0,NULL,0};
osMessageQueueId_t czReceiveQueue = osMessageQueueNew(16, sizeof(RxMessage), &czReceiveQueueAttr);
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d10c      	bne.n	800145a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001446:	4293      	cmp	r3, r2
 8001448:	d107      	bne.n	800145a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 800144a:	4a06      	ldr	r2, [pc, #24]	; (8001464 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800144c:	2124      	movs	r1, #36	; 0x24
 800144e:	2010      	movs	r0, #16
 8001450:	f00a fae6 	bl	800ba20 <osMessageQueueNew>
 8001454:	4603      	mov	r3, r0
 8001456:	4a04      	ldr	r2, [pc, #16]	; (8001468 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	bf00      	nop
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	08011e90 	.word	0x08011e90
 8001468:	20000788 	.word	0x20000788

0800146c <_GLOBAL__sub_I_czReceiveQueue>:
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
 8001470:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001474:	2001      	movs	r0, #1
 8001476:	f7ff ffdb 	bl	8001430 <_Z41__static_initialization_and_destruction_0ii>
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_CAN_RxFifo0MsgPendingCallback>:
			printDebug("RTR must not be used!\n");
		}
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800147c:	b5b0      	push	{r4, r5, r7, lr}
 800147e:	b096      	sub	sp, #88	; 0x58
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001484:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001488:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800148c:	2100      	movs	r1, #0
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f004 fe3b 	bl	800610a <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001494:	f107 040c 	add.w	r4, r7, #12
 8001498:	f107 0530 	add.w	r5, r7, #48	; 0x30
 800149c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800149e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 80014a8:	2300      	movs	r3, #0
 80014aa:	657b      	str	r3, [r7, #84]	; 0x54
 80014ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ae:	2b07      	cmp	r3, #7
 80014b0:	dc0e      	bgt.n	80014d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 80014b2:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80014b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014b8:	4413      	add	r3, r2
 80014ba:	7819      	ldrb	r1, [r3, #0]
 80014bc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014c2:	4413      	add	r3, r2
 80014c4:	460a      	mov	r2, r1
 80014c6:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 80014c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014ca:	3301      	adds	r3, #1
 80014cc:	657b      	str	r3, [r7, #84]	; 0x54
 80014ce:	e7ed      	b.n	80014ac <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80014d2:	6818      	ldr	r0, [r3, #0]
 80014d4:	f107 010c 	add.w	r1, r7, #12
 80014d8:	2300      	movs	r3, #0
 80014da:	2200      	movs	r2, #0
 80014dc:	f00a fb14 	bl	800bb08 <osMessageQueuePut>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0

	}
}
 80014e4:	bf00      	nop
 80014e6:	3758      	adds	r7, #88	; 0x58
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bdb0      	pop	{r4, r5, r7, pc}
 80014ec:	20000788 	.word	0x20000788

080014f0 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80014f0:	b5b0      	push	{r4, r5, r7, lr}
 80014f2:	b096      	sub	sp, #88	; 0x58
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;

	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 80014f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001500:	2101      	movs	r1, #1
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f004 fe01 	bl	800610a <HAL_CAN_GetRxMessage>
	RxMessage m;
	m.rxHeader = RxHeader;
 8001508:	f107 040c 	add.w	r4, r7, #12
 800150c:	f107 0530 	add.w	r5, r7, #48	; 0x30
 8001510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001514:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001518:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for(int i = 0; i<8;i++)
 800151c:	2300      	movs	r3, #0
 800151e:	657b      	str	r3, [r7, #84]	; 0x54
 8001520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001522:	2b07      	cmp	r3, #7
 8001524:	dc0e      	bgt.n	8001544 <HAL_CAN_RxFifo1MsgPendingCallback+0x54>
		m.rxBuf[i] = RxData[i];
 8001526:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800152a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800152c:	4413      	add	r3, r2
 800152e:	7819      	ldrb	r1, [r3, #0]
 8001530:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001534:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001536:	4413      	add	r3, r2
 8001538:	460a      	mov	r2, r1
 800153a:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8;i++)
 800153c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800153e:	3301      	adds	r3, #1
 8001540:	657b      	str	r3, [r7, #84]	; 0x54
 8001542:	e7ed      	b.n	8001520 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>
	//if the function hangs/does not return it might because the interrupts have invalid priorities.
	//They have to be greater or equal to the max interrupt priority (default: 5) set in the FreeRTOS config Parameters
	//Interrupt priority is set in HAL_CAN_MspInit in can.c
	if(osMessageQueuePut(czReceiveQueue, &m, 0, 0) != osOK){
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_CAN_RxFifo1MsgPendingCallback+0x70>)
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	f107 010c 	add.w	r1, r7, #12
 800154c:	2300      	movs	r3, #0
 800154e:	2200      	movs	r2, #0
 8001550:	f00a fada 	bl	800bb08 <osMessageQueuePut>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0

	}
}
 8001558:	bf00      	nop
 800155a:	3758      	adds	r7, #88	; 0x58
 800155c:	46bd      	mov	sp, r7
 800155e:	bdb0      	pop	{r4, r5, r7, pc}
 8001560:	20000788 	.word	0x20000788

08001564 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan){
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	HAL_CAN_ResetError(hcan);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f005 f8ef 	bl	8006750 <HAL_CAN_ResetError>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001572:	f3ef 8211 	mrs	r2, BASEPRI
 8001576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800157a:	f383 8811 	msr	BASEPRI, r3
 800157e:	f3bf 8f6f 	isb	sy
 8001582:	f3bf 8f4f 	dsb	sy
 8001586:	60fa      	str	r2, [r7, #12]
 8001588:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800158a:	68fb      	ldr	r3, [r7, #12]
	printDebugISR("CAN Errors got reseted!\n");
 800158c:	617b      	str	r3, [r7, #20]
 800158e:	4806      	ldr	r0, [pc, #24]	; (80015a8 <HAL_CAN_ErrorCallback+0x44>)
 8001590:	f009 fe64 	bl	800b25c <printf_>
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800159e:	bf00      	nop
}
 80015a0:	bf00      	nop
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	08011dac 	.word	0x08011dac

080015ac <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	//LED_RGB_Write(100, 0, 0);
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <_Z41__static_initialization_and_destruction_0ii>:
#include "cz_typedefinitions.hpp"


static const osMessageQueueAttr_t czSendQueueAttr = {"czSendQueue",0,NULL,0,NULL,0};

osMessageQueueId_t czSendQueue = osMessageQueueNew(16, sizeof(TxMessage), &czSendQueueAttr);
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d10c      	bne.n	80015ea <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d107      	bne.n	80015ea <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80015da:	4a06      	ldr	r2, [pc, #24]	; (80015f4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80015dc:	2120      	movs	r1, #32
 80015de:	2010      	movs	r0, #16
 80015e0:	f00a fa1e 	bl	800ba20 <osMessageQueueNew>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4a04      	ldr	r2, [pc, #16]	; (80015f8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	08011ea8 	.word	0x08011ea8
 80015f8:	2000078c 	.word	0x2000078c

080015fc <_GLOBAL__sub_I_czSendQueue>:
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
 8001600:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001604:	2001      	movs	r0, #1
 8001606:	f7ff ffdb 	bl	80015c0 <_Z41__static_initialization_and_destruction_0ii>
 800160a:	bd80      	pop	{r7, pc}

0800160c <_Z41__static_initialization_and_destruction_0ii>:
cz_status canzero::getStatus(){
	osMutexAcquire(nodeStateMutex, osWaitForever);
	cz_status returnValue = (cz_status) nodeStatus;
	osMutexRelease(nodeStateMutex);
	return returnValue;
}
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d10a      	bne.n	8001632 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001622:	4293      	cmp	r3, r2
 8001624:	d105      	bne.n	8001632 <_Z41__static_initialization_and_destruction_0ii+0x26>
static osMutexId_t nodeStateMutex = osMutexNew(&nodeStateMutexAttr);
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8001628:	f009 ffad 	bl	800b586 <osMutexNew>
 800162c:	4603      	mov	r3, r0
 800162e:	4a04      	ldr	r2, [pc, #16]	; (8001640 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8001630:	6013      	str	r3, [r2, #0]
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	08011ec0 	.word	0x08011ec0
 8001640:	20000790 	.word	0x20000790

08001644 <_GLOBAL__sub_I__ZN7canzero4initEv>:
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
 8001648:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800164c:	2001      	movs	r0, #1
 800164e:	f7ff ffdd 	bl	800160c <_Z41__static_initialization_and_destruction_0ii>
 8001652:	bd80      	pop	{r7, pc}

08001654 <canzero_start>:

#ifdef __cplusplus
extern "C" {
#endif

void canzero_start(void *argv) {
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	}

*/

	while (true) {
		osDelay(osWaitForever);
 800165c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001660:	f009 ff76 	bl	800b550 <osDelay>
 8001664:	e7fa      	b.n	800165c <canzero_start+0x8>

08001666 <_ZN3can11MessageBaseC1EmhbPKh>:
        uint64_t intel;
        uint64_t motorola;

        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt) : id{_id}, dlc{_dlc}, isExtendedId{_isExt}, intel{0}, motorola{0} {}

        MessageBase(uint32_t _id, uint8_t _dlc, bool _isExt, const uint8_t rxBuf[8]) noexcept : id{_id}, dlc{_dlc}, isExtendedId{_isExt} {
 8001666:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800166a:	b0a2      	sub	sp, #136	; 0x88
 800166c:	af00      	add	r7, sp, #0
 800166e:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
 8001672:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8001676:	4619      	mov	r1, r3
 8001678:	4613      	mov	r3, r2
 800167a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800167e:	460b      	mov	r3, r1
 8001680:	f887 307e 	strb.w	r3, [r7, #126]	; 0x7e
 8001684:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001688:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001692:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001696:	7113      	strb	r3, [r2, #4]
 8001698:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800169c:	f897 307e 	ldrb.w	r3, [r7, #126]	; 0x7e
 80016a0:	7153      	strb	r3, [r2, #5]
            // Using bitshift instead of memcpy because in this way the code does not depend on the endianess of the used microcontroller
            intel = static_cast<uint32_t>(rxBuf[0]) + (static_cast<uint32_t>(rxBuf[1]) << 8) + (static_cast<uint32_t>(rxBuf[2]) << 16) + (static_cast<uint32_t>(rxBuf[3]) << 24);
 80016a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016ae:	3301      	adds	r3, #1
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	441a      	add	r2, r3
 80016b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016ba:	3302      	adds	r3, #2
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	041b      	lsls	r3, r3, #16
 80016c0:	441a      	add	r2, r3
 80016c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016c6:	3303      	adds	r3, #3
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	061b      	lsls	r3, r3, #24
 80016cc:	4413      	add	r3, r2
 80016ce:	2200      	movs	r2, #0
 80016d0:	461c      	mov	r4, r3
 80016d2:	4615      	mov	r5, r2
 80016d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016d8:	e9c3 4502 	strd	r4, r5, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[4]) << 32) + (static_cast<uint64_t>(rxBuf[5]) << 40);
 80016dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016e0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80016e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016e8:	3304      	adds	r3, #4
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2200      	movs	r2, #0
 80016f0:	673b      	str	r3, [r7, #112]	; 0x70
 80016f2:	677a      	str	r2, [r7, #116]	; 0x74
 80016f4:	f04f 0000 	mov.w	r0, #0
 80016f8:	f04f 0100 	mov.w	r1, #0
 80016fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016fe:	0019      	movs	r1, r3
 8001700:	2000      	movs	r0, #0
 8001702:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001706:	3305      	adds	r3, #5
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2200      	movs	r2, #0
 800170e:	66bb      	str	r3, [r7, #104]	; 0x68
 8001710:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	6ebe      	ldr	r6, [r7, #104]	; 0x68
 800171c:	0233      	lsls	r3, r6, #8
 800171e:	2200      	movs	r2, #0
 8001720:	eb10 0802 	adds.w	r8, r0, r2
 8001724:	eb41 0903 	adc.w	r9, r1, r3
 8001728:	eb14 0308 	adds.w	r3, r4, r8
 800172c:	663b      	str	r3, [r7, #96]	; 0x60
 800172e:	eb45 0309 	adc.w	r3, r5, r9
 8001732:	667b      	str	r3, [r7, #100]	; 0x64
 8001734:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001738:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800173c:	e9c3 1202 	strd	r1, r2, [r3, #8]
            intel += (static_cast<uint64_t>(rxBuf[6]) << 48) + (static_cast<uint64_t>(rxBuf[7]) << 56);
 8001740:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001744:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001748:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800174c:	3306      	adds	r3, #6
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2200      	movs	r2, #0
 8001754:	65bb      	str	r3, [r7, #88]	; 0x58
 8001756:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001758:	f04f 0000 	mov.w	r0, #0
 800175c:	f04f 0100 	mov.w	r1, #0
 8001760:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001762:	0419      	lsls	r1, r3, #16
 8001764:	2000      	movs	r0, #0
 8001766:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800176a:	3307      	adds	r3, #7
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2200      	movs	r2, #0
 8001772:	653b      	str	r3, [r7, #80]	; 0x50
 8001774:	657a      	str	r2, [r7, #84]	; 0x54
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	f04f 0300 	mov.w	r3, #0
 800177e:	6d3e      	ldr	r6, [r7, #80]	; 0x50
 8001780:	0633      	lsls	r3, r6, #24
 8001782:	2200      	movs	r2, #0
 8001784:	eb10 0a02 	adds.w	sl, r0, r2
 8001788:	eb41 0b03 	adc.w	fp, r1, r3
 800178c:	eb14 030a 	adds.w	r3, r4, sl
 8001790:	64bb      	str	r3, [r7, #72]	; 0x48
 8001792:	eb45 030b 	adc.w	r3, r5, fp
 8001796:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001798:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800179c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80017a0:	e9c3 1202 	strd	r1, r2, [r3, #8]
            motorola = static_cast<uint32_t>(rxBuf[7]) + (static_cast<uint32_t>(rxBuf[6]) << 8) + (static_cast<uint32_t>(rxBuf[5]) << 16) + (static_cast<uint32_t>(rxBuf[4]) << 24);
 80017a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017a8:	3307      	adds	r3, #7
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017b2:	3306      	adds	r3, #6
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	021b      	lsls	r3, r3, #8
 80017b8:	441a      	add	r2, r3
 80017ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017be:	3305      	adds	r3, #5
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	041b      	lsls	r3, r3, #16
 80017c4:	441a      	add	r2, r3
 80017c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017ca:	3304      	adds	r3, #4
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	061b      	lsls	r3, r3, #24
 80017d0:	4413      	add	r3, r2
 80017d2:	2200      	movs	r2, #0
 80017d4:	643b      	str	r3, [r7, #64]	; 0x40
 80017d6:	647a      	str	r2, [r7, #68]	; 0x44
 80017d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017dc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80017e0:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[3]) << 32) + (static_cast<uint64_t>(rxBuf[2]) << 40);
 80017e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017e8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80017ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80017f0:	3303      	adds	r3, #3
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2200      	movs	r2, #0
 80017f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80017fa:	63fa      	str	r2, [r7, #60]	; 0x3c
 80017fc:	f04f 0000 	mov.w	r0, #0
 8001800:	f04f 0100 	mov.w	r1, #0
 8001804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001806:	0019      	movs	r1, r3
 8001808:	2000      	movs	r0, #0
 800180a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800180e:	3302      	adds	r3, #2
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2200      	movs	r2, #0
 8001816:	633b      	str	r3, [r7, #48]	; 0x30
 8001818:	637a      	str	r2, [r7, #52]	; 0x34
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	f04f 0300 	mov.w	r3, #0
 8001822:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 8001824:	0233      	lsls	r3, r6, #8
 8001826:	2200      	movs	r2, #0
 8001828:	1886      	adds	r6, r0, r2
 800182a:	62be      	str	r6, [r7, #40]	; 0x28
 800182c:	eb41 0303 	adc.w	r3, r1, r3
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001832:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8001836:	460b      	mov	r3, r1
 8001838:	18e3      	adds	r3, r4, r3
 800183a:	623b      	str	r3, [r7, #32]
 800183c:	4613      	mov	r3, r2
 800183e:	eb45 0303 	adc.w	r3, r5, r3
 8001842:	627b      	str	r3, [r7, #36]	; 0x24
 8001844:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001848:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800184c:	e9c3 1204 	strd	r1, r2, [r3, #16]
            motorola += (static_cast<uint64_t>(rxBuf[1]) << 48) + (static_cast<uint64_t>(rxBuf[0]) << 56);
 8001850:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001854:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001858:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800185c:	3301      	adds	r3, #1
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2200      	movs	r2, #0
 8001864:	61bb      	str	r3, [r7, #24]
 8001866:	61fa      	str	r2, [r7, #28]
 8001868:	f04f 0000 	mov.w	r0, #0
 800186c:	f04f 0100 	mov.w	r1, #0
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	0419      	lsls	r1, r3, #16
 8001874:	2000      	movs	r0, #0
 8001876:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2200      	movs	r2, #0
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	617a      	str	r2, [r7, #20]
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	693e      	ldr	r6, [r7, #16]
 800188e:	0633      	lsls	r3, r6, #24
 8001890:	2200      	movs	r2, #0
 8001892:	1886      	adds	r6, r0, r2
 8001894:	60be      	str	r6, [r7, #8]
 8001896:	eb41 0303 	adc.w	r3, r1, r3
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80018a0:	460b      	mov	r3, r1
 80018a2:	18e3      	adds	r3, r4, r3
 80018a4:	603b      	str	r3, [r7, #0]
 80018a6:	4613      	mov	r3, r2
 80018a8:	eb45 0303 	adc.w	r3, r5, r3
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018b2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80018b6:	e9c3 1204 	strd	r1, r2, [r3, #16]
        };
 80018ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80018be:	4618      	mov	r0, r3
 80018c0:	3788      	adds	r7, #136	; 0x88
 80018c2:	46bd      	mov	sp, r7
 80018c4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80018c8:	4770      	bx	lr
	...

080018cc <_Z41__static_initialization_and_destruction_0ii>:

        } else {    // Sending OD entries is disabled, sleep for one second and then check again
            osDelay(pdMS_TO_TICKS(1000));
        }
    }
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	f040 816e 	bne.w	8001bba <_Z41__static_initialization_and_destruction_0ii+0x2ee>
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018e4:	4293      	cmp	r3, r2
 80018e6:	f040 8168 	bne.w	8001bba <_Z41__static_initialization_and_destruction_0ii+0x2ee>
osMutexId_t mutex_OD_NodeID                   = osMutexNew(NULL);
 80018ea:	2000      	movs	r0, #0
 80018ec:	f009 fe4b 	bl	800b586 <osMutexNew>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4ab4      	ldr	r2, [pc, #720]	; (8001bc4 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 80018f4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_NodeStatus               = osMutexNew(NULL);
 80018f6:	2000      	movs	r0, #0
 80018f8:	f009 fe45 	bl	800b586 <osMutexNew>
 80018fc:	4603      	mov	r3, r0
 80018fe:	4ab2      	ldr	r2, [pc, #712]	; (8001bc8 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8001900:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ProtocolVersion          = osMutexNew(NULL);
 8001902:	2000      	movs	r0, #0
 8001904:	f009 fe3f 	bl	800b586 <osMutexNew>
 8001908:	4603      	mov	r3, r0
 800190a:	4ab0      	ldr	r2, [pc, #704]	; (8001bcc <_Z41__static_initialization_and_destruction_0ii+0x300>)
 800190c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StackVersion             = osMutexNew(NULL);
 800190e:	2000      	movs	r0, #0
 8001910:	f009 fe39 	bl	800b586 <osMutexNew>
 8001914:	4603      	mov	r3, r0
 8001916:	4aae      	ldr	r2, [pc, #696]	; (8001bd0 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8001918:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_DbcVersion               = osMutexNew(NULL);
 800191a:	2000      	movs	r0, #0
 800191c:	f009 fe33 	bl	800b586 <osMutexNew>
 8001920:	4603      	mov	r3, r0
 8001922:	4aac      	ldr	r2, [pc, #688]	; (8001bd4 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8001924:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HeartbeatInterval        = osMutexNew(NULL);
 8001926:	2000      	movs	r0, #0
 8001928:	f009 fe2d 	bl	800b586 <osMutexNew>
 800192c:	4603      	mov	r3, r0
 800192e:	4aaa      	ldr	r2, [pc, #680]	; (8001bd8 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8001930:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SendOdOnBootup           = osMutexNew(NULL);
 8001932:	2000      	movs	r0, #0
 8001934:	f009 fe27 	bl	800b586 <osMutexNew>
 8001938:	4603      	mov	r3, r0
 800193a:	4aa8      	ldr	r2, [pc, #672]	; (8001bdc <_Z41__static_initialization_and_destruction_0ii+0x310>)
 800193c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_OdEntrySendInterval      = osMutexNew(NULL);
 800193e:	2000      	movs	r0, #0
 8001940:	f009 fe21 	bl	800b586 <osMutexNew>
 8001944:	4603      	mov	r3, r0
 8001946:	4aa6      	ldr	r2, [pc, #664]	; (8001be0 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8001948:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CpuUsage                 = osMutexNew(NULL);
 800194a:	2000      	movs	r0, #0
 800194c:	f009 fe1b 	bl	800b586 <osMutexNew>
 8001950:	4603      	mov	r3, r0
 8001952:	4aa4      	ldr	r2, [pc, #656]	; (8001be4 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8001954:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_MemFree                  = osMutexNew(NULL);
 8001956:	2000      	movs	r0, #0
 8001958:	f009 fe15 	bl	800b586 <osMutexNew>
 800195c:	4603      	mov	r3, r0
 800195e:	4aa2      	ldr	r2, [pc, #648]	; (8001be8 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8001960:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BoardTemp                = osMutexNew(NULL);
 8001962:	2000      	movs	r0, #0
 8001964:	f009 fe0f 	bl	800b586 <osMutexNew>
 8001968:	4603      	mov	r3, r0
 800196a:	4aa0      	ldr	r2, [pc, #640]	; (8001bec <_Z41__static_initialization_and_destruction_0ii+0x320>)
 800196c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_InputVoltage             = osMutexNew(NULL);
 800196e:	2000      	movs	r0, #0
 8001970:	f009 fe09 	bl	800b586 <osMutexNew>
 8001974:	4603      	mov	r3, r0
 8001976:	4a9e      	ldr	r2, [pc, #632]	; (8001bf0 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8001978:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_runtime                  = osMutexNew(NULL);
 800197a:	2000      	movs	r0, #0
 800197c:	f009 fe03 	bl	800b586 <osMutexNew>
 8001980:	4603      	mov	r3, r0
 8001982:	4a9c      	ldr	r2, [pc, #624]	; (8001bf4 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8001984:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcIn                    = osMutexNew(NULL);
 8001986:	2000      	movs	r0, #0
 8001988:	f009 fdfd 	bl	800b586 <osMutexNew>
 800198c:	4603      	mov	r3, r0
 800198e:	4a9a      	ldr	r2, [pc, #616]	; (8001bf8 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8001990:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SdcOut                   = osMutexNew(NULL);
 8001992:	2000      	movs	r0, #0
 8001994:	f009 fdf7 	bl	800b586 <osMutexNew>
 8001998:	4603      	mov	r3, r0
 800199a:	4a98      	ldr	r2, [pc, #608]	; (8001bfc <_Z41__static_initialization_and_destruction_0ii+0x330>)
 800199c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID1                 = osMutexNew(NULL);
 800199e:	2000      	movs	r0, #0
 80019a0:	f009 fdf1 	bl	800b586 <osMutexNew>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4a96      	ldr	r2, [pc, #600]	; (8001c00 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 80019a8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_ChipUID2                 = osMutexNew(NULL);
 80019aa:	2000      	movs	r0, #0
 80019ac:	f009 fdeb 	bl	800b586 <osMutexNew>
 80019b0:	4603      	mov	r3, r0
 80019b2:	4a94      	ldr	r2, [pc, #592]	; (8001c04 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 80019b4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildDate                = osMutexNew(NULL);
 80019b6:	2000      	movs	r0, #0
 80019b8:	f009 fde5 	bl	800b586 <osMutexNew>
 80019bc:	4603      	mov	r3, r0
 80019be:	4a92      	ldr	r2, [pc, #584]	; (8001c08 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 80019c0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_BuildTime                = osMutexNew(NULL);
 80019c2:	2000      	movs	r0, #0
 80019c4:	f009 fddf 	bl	800b586 <osMutexNew>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4a90      	ldr	r2, [pc, #576]	; (8001c0c <_Z41__static_initialization_and_destruction_0ii+0x340>)
 80019cc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_TxErrCnt            = osMutexNew(NULL);
 80019ce:	2000      	movs	r0, #0
 80019d0:	f009 fdd9 	bl	800b586 <osMutexNew>
 80019d4:	4603      	mov	r3, r0
 80019d6:	4a8e      	ldr	r2, [pc, #568]	; (8001c10 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 80019d8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_RxErrCnt            = osMutexNew(NULL);
 80019da:	2000      	movs	r0, #0
 80019dc:	f009 fdd3 	bl	800b586 <osMutexNew>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4a8c      	ldr	r2, [pc, #560]	; (8001c14 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 80019e4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_lastErrorCode       = osMutexNew(NULL);
 80019e6:	2000      	movs	r0, #0
 80019e8:	f009 fdcd 	bl	800b586 <osMutexNew>
 80019ec:	4603      	mov	r3, r0
 80019ee:	4a8a      	ldr	r2, [pc, #552]	; (8001c18 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 80019f0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_autoErrorReset      = osMutexNew(NULL);
 80019f2:	2000      	movs	r0, #0
 80019f4:	f009 fdc7 	bl	800b586 <osMutexNew>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4a88      	ldr	r2, [pc, #544]	; (8001c1c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 80019fc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Baudrate            = osMutexNew(NULL);
 80019fe:	2000      	movs	r0, #0
 8001a00:	f009 fdc1 	bl	800b586 <osMutexNew>
 8001a04:	4603      	mov	r3, r0
 8001a06:	4a86      	ldr	r2, [pc, #536]	; (8001c20 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8001a08:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_Status              = osMutexNew(NULL);
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f009 fdbb 	bl	800b586 <osMutexNew>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4a84      	ldr	r2, [pc, #528]	; (8001c24 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8001a14:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DiscardedTxMessages = osMutexNew(NULL);
 8001a16:	2000      	movs	r0, #0
 8001a18:	f009 fdb5 	bl	800b586 <osMutexNew>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4a82      	ldr	r2, [pc, #520]	; (8001c28 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8001a20:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_ErrorStatus         = osMutexNew(NULL);
 8001a22:	2000      	movs	r0, #0
 8001a24:	f009 fdaf 	bl	800b586 <osMutexNew>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	4a80      	ldr	r2, [pc, #512]	; (8001c2c <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8001a2c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN1_DelayedTxMessages   = osMutexNew(NULL);
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f009 fda9 	bl	800b586 <osMutexNew>
 8001a34:	4603      	mov	r3, r0
 8001a36:	4a7e      	ldr	r2, [pc, #504]	; (8001c30 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8001a38:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_TxErrCnt            = osMutexNew(NULL);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f009 fda3 	bl	800b586 <osMutexNew>
 8001a40:	4603      	mov	r3, r0
 8001a42:	4a7c      	ldr	r2, [pc, #496]	; (8001c34 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8001a44:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_RxErrCnt            = osMutexNew(NULL);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f009 fd9d 	bl	800b586 <osMutexNew>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4a7a      	ldr	r2, [pc, #488]	; (8001c38 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8001a50:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_lastErrorCode       = osMutexNew(NULL);
 8001a52:	2000      	movs	r0, #0
 8001a54:	f009 fd97 	bl	800b586 <osMutexNew>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4a78      	ldr	r2, [pc, #480]	; (8001c3c <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8001a5c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_autoErrorReset      = osMutexNew(NULL);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f009 fd91 	bl	800b586 <osMutexNew>
 8001a64:	4603      	mov	r3, r0
 8001a66:	4a76      	ldr	r2, [pc, #472]	; (8001c40 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8001a68:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Baudrate            = osMutexNew(NULL);
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	f009 fd8b 	bl	800b586 <osMutexNew>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4a74      	ldr	r2, [pc, #464]	; (8001c44 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8001a74:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_Status              = osMutexNew(NULL);
 8001a76:	2000      	movs	r0, #0
 8001a78:	f009 fd85 	bl	800b586 <osMutexNew>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	4a72      	ldr	r2, [pc, #456]	; (8001c48 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8001a80:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DiscardedTxMessages = osMutexNew(NULL);
 8001a82:	2000      	movs	r0, #0
 8001a84:	f009 fd7f 	bl	800b586 <osMutexNew>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	4a70      	ldr	r2, [pc, #448]	; (8001c4c <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8001a8c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_ErrorStatus         = osMutexNew(NULL);
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f009 fd79 	bl	800b586 <osMutexNew>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4a6e      	ldr	r2, [pc, #440]	; (8001c50 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8001a98:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CAN2_DelayedTxMessages   = osMutexNew(NULL);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f009 fd73 	bl	800b586 <osMutexNew>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	4a6c      	ldr	r2, [pc, #432]	; (8001c54 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8001aa4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_samplingInterval         = osMutexNew(NULL);
 8001aa6:	2000      	movs	r0, #0
 8001aa8:	f009 fd6d 	bl	800b586 <osMutexNew>
 8001aac:	4603      	mov	r3, r0
 8001aae:	4a6a      	ldr	r2, [pc, #424]	; (8001c58 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8001ab0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_TelemetryCommands        = osMutexNew(NULL);
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f009 fd67 	bl	800b586 <osMutexNew>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	4a68      	ldr	r2, [pc, #416]	; (8001c5c <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8001abc:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StateMachineInterval     = osMutexNew(NULL);
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f009 fd61 	bl	800b586 <osMutexNew>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	4a66      	ldr	r2, [pc, #408]	; (8001c60 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8001ac8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_StateMachineActivate     = osMutexNew(NULL);
 8001aca:	2000      	movs	r0, #0
 8001acc:	f009 fd5b 	bl	800b586 <osMutexNew>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4a64      	ldr	r2, [pc, #400]	; (8001c64 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8001ad4:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_HVBatteryMode            = osMutexNew(NULL);
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f009 fd55 	bl	800b586 <osMutexNew>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4a62      	ldr	r2, [pc, #392]	; (8001c68 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8001ae0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_EncoderWheelDiameter     = osMutexNew(NULL);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f009 fd4f 	bl	800b586 <osMutexNew>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4a60      	ldr	r2, [pc, #384]	; (8001c6c <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8001aec:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_EncoderResetPosition     = osMutexNew(NULL);
 8001aee:	2000      	movs	r0, #0
 8001af0:	f009 fd49 	bl	800b586 <osMutexNew>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4a5e      	ldr	r2, [pc, #376]	; (8001c70 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8001af8:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_SetReset                 = osMutexNew(NULL);
 8001afa:	2000      	movs	r0, #0
 8001afc:	f009 fd43 	bl	800b586 <osMutexNew>
 8001b00:	4603      	mov	r3, r0
 8001b02:	4a5c      	ldr	r2, [pc, #368]	; (8001c74 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8001b04:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_number               = osMutexNew(NULL);
 8001b06:	2000      	movs	r0, #0
 8001b08:	f009 fd3d 	bl	800b586 <osMutexNew>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4a5a      	ldr	r2, [pc, #360]	; (8001c78 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8001b10:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU1_Temperature         = osMutexNew(NULL);
 8001b12:	2000      	movs	r0, #0
 8001b14:	f009 fd37 	bl	800b586 <osMutexNew>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4a58      	ldr	r2, [pc, #352]	; (8001c7c <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8001b1c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU2_Temperature         = osMutexNew(NULL);
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f009 fd31 	bl	800b586 <osMutexNew>
 8001b24:	4603      	mov	r3, r0
 8001b26:	4a56      	ldr	r2, [pc, #344]	; (8001c80 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8001b28:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU3_Temperature         = osMutexNew(NULL);
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f009 fd2b 	bl	800b586 <osMutexNew>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4a54      	ldr	r2, [pc, #336]	; (8001c84 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8001b34:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_AccelX               = osMutexNew(NULL);
 8001b36:	2000      	movs	r0, #0
 8001b38:	f009 fd25 	bl	800b586 <osMutexNew>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	4a52      	ldr	r2, [pc, #328]	; (8001c88 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8001b40:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_AccelY               = osMutexNew(NULL);
 8001b42:	2000      	movs	r0, #0
 8001b44:	f009 fd1f 	bl	800b586 <osMutexNew>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4a50      	ldr	r2, [pc, #320]	; (8001c8c <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8001b4c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_AccelZ               = osMutexNew(NULL);
 8001b4e:	2000      	movs	r0, #0
 8001b50:	f009 fd19 	bl	800b586 <osMutexNew>
 8001b54:	4603      	mov	r3, r0
 8001b56:	4a4e      	ldr	r2, [pc, #312]	; (8001c90 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8001b58:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_GyroX                = osMutexNew(NULL);
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	f009 fd13 	bl	800b586 <osMutexNew>
 8001b60:	4603      	mov	r3, r0
 8001b62:	4a4c      	ldr	r2, [pc, #304]	; (8001c94 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 8001b64:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_GyroY                = osMutexNew(NULL);
 8001b66:	2000      	movs	r0, #0
 8001b68:	f009 fd0d 	bl	800b586 <osMutexNew>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	4a4a      	ldr	r2, [pc, #296]	; (8001c98 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8001b70:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_IMU_GyroZ                = osMutexNew(NULL);
 8001b72:	2000      	movs	r0, #0
 8001b74:	f009 fd07 	bl	800b586 <osMutexNew>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	4a48      	ldr	r2, [pc, #288]	; (8001c9c <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8001b7c:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_CoolingPressure          = osMutexNew(NULL);
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f009 fd01 	bl	800b586 <osMutexNew>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4a46      	ldr	r2, [pc, #280]	; (8001ca0 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8001b88:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_FiducialRightCounter     = osMutexNew(NULL);
 8001b8a:	2000      	movs	r0, #0
 8001b8c:	f009 fcfb 	bl	800b586 <osMutexNew>
 8001b90:	4603      	mov	r3, r0
 8001b92:	4a44      	ldr	r2, [pc, #272]	; (8001ca4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8001b94:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_FiducialLeftCounter      = osMutexNew(NULL);
 8001b96:	2000      	movs	r0, #0
 8001b98:	f009 fcf5 	bl	800b586 <osMutexNew>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4a42      	ldr	r2, [pc, #264]	; (8001ca8 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8001ba0:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_Position                 = osMutexNew(NULL);
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f009 fcef 	bl	800b586 <osMutexNew>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	4a40      	ldr	r2, [pc, #256]	; (8001cac <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8001bac:	6013      	str	r3, [r2, #0]
osMutexId_t mutex_OD_Velocity                 = osMutexNew(NULL);
 8001bae:	2000      	movs	r0, #0
 8001bb0:	f009 fce9 	bl	800b586 <osMutexNew>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4a3e      	ldr	r2, [pc, #248]	; (8001cb0 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8001bb8:	6013      	str	r3, [r2, #0]
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000794 	.word	0x20000794
 8001bc8:	20000798 	.word	0x20000798
 8001bcc:	2000079c 	.word	0x2000079c
 8001bd0:	200007a0 	.word	0x200007a0
 8001bd4:	200007a4 	.word	0x200007a4
 8001bd8:	200007a8 	.word	0x200007a8
 8001bdc:	200007ac 	.word	0x200007ac
 8001be0:	200007b0 	.word	0x200007b0
 8001be4:	200007b4 	.word	0x200007b4
 8001be8:	200007b8 	.word	0x200007b8
 8001bec:	200007bc 	.word	0x200007bc
 8001bf0:	200007c0 	.word	0x200007c0
 8001bf4:	200007c4 	.word	0x200007c4
 8001bf8:	200007c8 	.word	0x200007c8
 8001bfc:	200007cc 	.word	0x200007cc
 8001c00:	200007d0 	.word	0x200007d0
 8001c04:	200007d4 	.word	0x200007d4
 8001c08:	200007d8 	.word	0x200007d8
 8001c0c:	200007dc 	.word	0x200007dc
 8001c10:	200007e0 	.word	0x200007e0
 8001c14:	200007e4 	.word	0x200007e4
 8001c18:	200007e8 	.word	0x200007e8
 8001c1c:	200007ec 	.word	0x200007ec
 8001c20:	200007f0 	.word	0x200007f0
 8001c24:	200007f4 	.word	0x200007f4
 8001c28:	200007f8 	.word	0x200007f8
 8001c2c:	200007fc 	.word	0x200007fc
 8001c30:	20000800 	.word	0x20000800
 8001c34:	20000804 	.word	0x20000804
 8001c38:	20000808 	.word	0x20000808
 8001c3c:	2000080c 	.word	0x2000080c
 8001c40:	20000810 	.word	0x20000810
 8001c44:	20000814 	.word	0x20000814
 8001c48:	20000818 	.word	0x20000818
 8001c4c:	2000081c 	.word	0x2000081c
 8001c50:	20000820 	.word	0x20000820
 8001c54:	20000824 	.word	0x20000824
 8001c58:	20000828 	.word	0x20000828
 8001c5c:	2000082c 	.word	0x2000082c
 8001c60:	20000830 	.word	0x20000830
 8001c64:	20000834 	.word	0x20000834
 8001c68:	20000838 	.word	0x20000838
 8001c6c:	2000083c 	.word	0x2000083c
 8001c70:	20000840 	.word	0x20000840
 8001c74:	20000844 	.word	0x20000844
 8001c78:	20000848 	.word	0x20000848
 8001c7c:	2000084c 	.word	0x2000084c
 8001c80:	20000850 	.word	0x20000850
 8001c84:	20000854 	.word	0x20000854
 8001c88:	20000858 	.word	0x20000858
 8001c8c:	2000085c 	.word	0x2000085c
 8001c90:	20000860 	.word	0x20000860
 8001c94:	20000864 	.word	0x20000864
 8001c98:	20000868 	.word	0x20000868
 8001c9c:	2000086c 	.word	0x2000086c
 8001ca0:	20000870 	.word	0x20000870
 8001ca4:	20000874 	.word	0x20000874
 8001ca8:	20000878 	.word	0x20000878
 8001cac:	2000087c 	.word	0x2000087c
 8001cb0:	20000880 	.word	0x20000880

08001cb4 <_GLOBAL__sub_I_OD_NodeID>:
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f7ff fe05 	bl	80018cc <_Z41__static_initialization_and_destruction_0ii>
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <_ZNSt9_Any_data9_M_accessEv>:
    void*       _M_access()       { return &_M_pod_data[0]; }
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr

08001cf2 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <_ZNSt8functionIFvtEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff f96c 	bl	8000ff0 <_ZNSt14_Function_baseD1Ev>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <_ZN23GPIOExtiCallbackHandlerC1Ev>:
			m_listeners[i](pin);
		}
	}

private:
	GPIOExtiCallbackHandler() = default;
 8001d22:	b5b0      	push	{r4, r5, r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	240f      	movs	r4, #15
 8001d2e:	461d      	mov	r5, r3
 8001d30:	2c00      	cmp	r4, #0
 8001d32:	db05      	blt.n	8001d40 <_ZN23GPIOExtiCallbackHandlerC1Ev+0x1e>
 8001d34:	4628      	mov	r0, r5
 8001d36:	f000 f8cb 	bl	8001ed0 <_ZNSt8functionIFvtEEC1Ev>
 8001d3a:	3510      	adds	r5, #16
 8001d3c:	3c01      	subs	r4, #1
 8001d3e:	e7f7      	b.n	8001d30 <_ZN23GPIOExtiCallbackHandlerC1Ev+0xe>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bdb0      	pop	{r4, r5, r7, pc}

08001d52 <_ZN23GPIOExtiCallbackHandlerD1Ev>:
class GPIOExtiCallbackHandler {
 8001d52:	b590      	push	{r4, r7, lr}
 8001d54:	b083      	sub	sp, #12
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d00a      	beq.n	8001d76 <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	429c      	cmp	r4, r3
 8001d6a:	d004      	beq.n	8001d76 <_ZN23GPIOExtiCallbackHandlerD1Ev+0x24>
 8001d6c:	3c10      	subs	r4, #16
 8001d6e:	4620      	mov	r0, r4
 8001d70:	f7ff ffca 	bl	8001d08 <_ZNSt8functionIFvtEED1Ev>
 8001d74:	e7f7      	b.n	8001d66 <_ZN23GPIOExtiCallbackHandlerD1Ev+0x14>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd90      	pop	{r4, r7, pc}

08001d80 <__tcf_0>:
		static GPIOExtiCallbackHandler instance;
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4801      	ldr	r0, [pc, #4]	; (8001d8c <__tcf_0+0xc>)
 8001d86:	f7ff ffe4 	bl	8001d52 <_ZN23GPIOExtiCallbackHandlerD1Ev>
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000884 	.word	0x20000884

08001d90 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>:
	static GPIOExtiCallbackHandler& getInstance() {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
		static GPIOExtiCallbackHandler instance;
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	f3bf 8f5b 	dmb	ish
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	bf0c      	ite	eq
 8001da6:	2301      	moveq	r3, #1
 8001da8:	2300      	movne	r3, #0
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d013      	beq.n	8001dd8 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 8001db0:	480b      	ldr	r0, [pc, #44]	; (8001de0 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8001db2:	f00d f971 	bl	800f098 <__cxa_guard_acquire>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf14      	ite	ne
 8001dbc:	2301      	movne	r3, #1
 8001dbe:	2300      	moveq	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d008      	beq.n	8001dd8 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x48>
 8001dc6:	4807      	ldr	r0, [pc, #28]	; (8001de4 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
 8001dc8:	f7ff ffab 	bl	8001d22 <_ZN23GPIOExtiCallbackHandlerC1Ev>
 8001dcc:	4806      	ldr	r0, [pc, #24]	; (8001de8 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x58>)
 8001dce:	f00d f99a 	bl	800f106 <atexit>
 8001dd2:	4803      	ldr	r0, [pc, #12]	; (8001de0 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x50>)
 8001dd4:	f00d f96c 	bl	800f0b0 <__cxa_guard_release>
		return instance;
 8001dd8:	4b02      	ldr	r3, [pc, #8]	; (8001de4 <_ZN23GPIOExtiCallbackHandler11getInstanceEv+0x54>)
	}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000988 	.word	0x20000988
 8001de4:	20000884 	.word	0x20000884
 8001de8:	08001d81 	.word	0x08001d81

08001dec <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>:
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff f8fa 	bl	8000ff0 <_ZNSt14_Function_baseD1Ev>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev>:
			m_listeners[i](htim);
		}
	}

private:
	TimPeriodElapsedCallbackHandler() = default;
 8001e06:	b5b0      	push	{r4, r5, r7, lr}
 8001e08:	b082      	sub	sp, #8
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	240f      	movs	r4, #15
 8001e12:	461d      	mov	r5, r3
 8001e14:	2c00      	cmp	r4, #0
 8001e16:	db05      	blt.n	8001e24 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev+0x1e>
 8001e18:	4628      	mov	r0, r5
 8001e1a:	f000 f866 	bl	8001eea <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1Ev>
 8001e1e:	3510      	adds	r5, #16
 8001e20:	3c01      	subs	r4, #1
 8001e22:	e7f7      	b.n	8001e14 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev+0xe>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bdb0      	pop	{r4, r5, r7, pc}

08001e36 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev>:
class TimPeriodElapsedCallbackHandler {
 8001e36:	b590      	push	{r4, r7, lr}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d00a      	beq.n	8001e5a <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x24>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f503 7480 	add.w	r4, r3, #256	; 0x100
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	d004      	beq.n	8001e5a <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x24>
 8001e50:	3c10      	subs	r4, #16
 8001e52:	4620      	mov	r0, r4
 8001e54:	f7ff ffca 	bl	8001dec <_ZNSt8functionIFvP17TIM_HandleTypeDefEED1Ev>
 8001e58:	e7f7      	b.n	8001e4a <_ZN31TimPeriodElapsedCallbackHandlerD1Ev+0x14>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	370c      	adds	r7, #12
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd90      	pop	{r4, r7, pc}

08001e64 <__tcf_1>:
		static TimPeriodElapsedCallbackHandler instance;
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4801      	ldr	r0, [pc, #4]	; (8001e70 <__tcf_1+0xc>)
 8001e6a:	f7ff ffe4 	bl	8001e36 <_ZN31TimPeriodElapsedCallbackHandlerD1Ev>
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	2000098c 	.word	0x2000098c

08001e74 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv>:
	static TimPeriodElapsedCallbackHandler& getInstance() {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
		static TimPeriodElapsedCallbackHandler instance;
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	f3bf 8f5b 	dmb	ish
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	bf0c      	ite	eq
 8001e8a:	2301      	moveq	r3, #1
 8001e8c:	2300      	movne	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d013      	beq.n	8001ebc <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x48>
 8001e94:	480b      	ldr	r0, [pc, #44]	; (8001ec4 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 8001e96:	f00d f8ff 	bl	800f098 <__cxa_guard_acquire>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	bf14      	ite	ne
 8001ea0:	2301      	movne	r3, #1
 8001ea2:	2300      	moveq	r3, #0
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d008      	beq.n	8001ebc <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x48>
 8001eaa:	4807      	ldr	r0, [pc, #28]	; (8001ec8 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x54>)
 8001eac:	f7ff ffab 	bl	8001e06 <_ZN31TimPeriodElapsedCallbackHandlerC1Ev>
 8001eb0:	4806      	ldr	r0, [pc, #24]	; (8001ecc <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x58>)
 8001eb2:	f00d f928 	bl	800f106 <atexit>
 8001eb6:	4803      	ldr	r0, [pc, #12]	; (8001ec4 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x50>)
 8001eb8:	f00d f8fa 	bl	800f0b0 <__cxa_guard_release>
		return instance;
 8001ebc:	4b02      	ldr	r3, [pc, #8]	; (8001ec8 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv+0x54>)
	}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000a90 	.word	0x20000a90
 8001ec8:	2000098c 	.word	0x2000098c
 8001ecc:	08001e65 	.word	0x08001e65

08001ed0 <_ZNSt8functionIFvtEEC1Ev>:
      function() noexcept
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4618      	mov	r0, r3
 8001edc:	f7ff f87a 	bl	8000fd4 <_ZNSt14_Function_baseC1Ev>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <_ZNSt8functionIFvP17TIM_HandleTypeDefEEC1Ev>:
      function() noexcept
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff f86d 	bl	8000fd4 <_ZNSt14_Function_baseC1Ev>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4618      	mov	r0, r3
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001f1a:	b480      	push	{r7}
 8001f1c:	b083      	sub	sp, #12
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <_ZN5bms4417bms_frame_builderC1Ev>:
	bool m_toggleFlag;
	uint8_t m_transferId;

};

struct bms_frame_builder {
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	711a      	strb	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	715a      	strb	r2, [r3, #5]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	719a      	strb	r2, [r3, #6]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	71da      	strb	r2, [r3, #7]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_>:

  template<typename _Res, typename... _ArgTypes>
    template<typename _Functor, typename, typename>
      function<_Res(_ArgTypes...)>::
 8001f64:	b590      	push	{r4, r7, lr}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
      function(_Functor __f)
      : _Function_base()
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff f82f 	bl	8000fd4 <_ZNSt14_Function_baseC1Ev>
      {
	typedef _Function_handler<_Res(_ArgTypes...), _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 f81d 	bl	8001fb8 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE21_M_not_empty_functionIS3_EEbPT_>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d00f      	beq.n	8001fa4 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_+0x40>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8001f84:	687c      	ldr	r4, [r7, #4]
 8001f86:	463b      	mov	r3, r7
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 f825 	bl	8001fd8 <_ZSt4moveIRPFvR9RxMessageEEONSt16remove_referenceIT_E4typeEOS6_>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4619      	mov	r1, r3
 8001f92:	4620      	mov	r0, r4
 8001f94:	f000 f82b 	bl	8001fee <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_+0x4c>)
 8001f9c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_+0x50>)
 8001fa2:	609a      	str	r2, [r3, #8]
	  }
      }
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd90      	pop	{r4, r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	08002013 	.word	0x08002013
 8001fb4:	0800203d 	.word	0x0800203d

08001fb8 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE21_M_not_empty_functionIS3_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	bf14      	ite	ne
 8001fc6:	2301      	movne	r3, #1
 8001fc8:	2300      	moveq	r3, #0
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <_ZSt4moveIRPFvR9RxMessageEEONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8001fee:	b590      	push	{r4, r7, lr}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
 8001ff6:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8001ff8:	6838      	ldr	r0, [r7, #0]
 8001ffa:	f7ff ffed 	bl	8001fd8 <_ZSt4moveIRPFvR9RxMessageEEONSt16remove_referenceIT_E4typeEOS6_>
 8001ffe:	4603      	mov	r3, r0
 8002000:	4622      	mov	r2, r4
 8002002:	4619      	mov	r1, r3
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f838 	bl	800207a <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	bd90      	pop	{r4, r7, pc}

08002012 <_ZNSt17_Function_handlerIFvR9RxMessageEPS2_E9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8002012:	b590      	push	{r4, r7, lr}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f845 	bl	80020ac <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE14_M_get_pointerERKSt9_Any_data>
 8002022:	4604      	mov	r4, r0
 8002024:	6838      	ldr	r0, [r7, #0]
 8002026:	f7ff f90c 	bl	8001242 <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800202a:	4603      	mov	r3, r0
 800202c:	4619      	mov	r1, r3
 800202e:	4620      	mov	r0, r4
 8002030:	f000 f84d 	bl	80020ce <_ZSt10__invoke_rIvRPFvR9RxMessageEJS1_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>
				     std::forward<_ArgTypes>(__args)...);
 8002034:	bf00      	nop
      }
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bd90      	pop	{r4, r7, pc}

0800203c <_ZNSt17_Function_handlerIFvR9RxMessageEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 800203c:	b590      	push	{r4, r7, lr}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	60b9      	str	r1, [r7, #8]
 8002046:	4613      	mov	r3, r2
 8002048:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d109      	bne.n	8002064 <_ZNSt17_Function_handlerIFvR9RxMessageEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 f852 	bl	80020fa <_ZNSt9_Any_data9_M_accessIPPFvR9RxMessageEEERT_v>
 8002056:	4604      	mov	r4, r0
 8002058:	68b8      	ldr	r0, [r7, #8]
 800205a:	f000 f827 	bl	80020ac <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE14_M_get_pointerERKSt9_Any_data>
 800205e:	4603      	mov	r3, r0
 8002060:	6023      	str	r3, [r4, #0]
	    break;
 8002062:	e005      	b.n	8002070 <_ZNSt17_Function_handlerIFvR9RxMessageEPS2_E10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	461a      	mov	r2, r3
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 f851 	bl	8002112 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 8002070:	2300      	movs	r3, #0
      }
 8002072:	4618      	mov	r0, r3
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	bd90      	pop	{r4, r7, pc}

0800207a <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 800207a:	b590      	push	{r4, r7, lr}
 800207c:	b085      	sub	sp, #20
 800207e:	af00      	add	r7, sp, #0
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8002086:	68b8      	ldr	r0, [r7, #8]
 8002088:	f7ff ffa6 	bl	8001fd8 <_ZSt4moveIRPFvR9RxMessageEEONSt16remove_referenceIT_E4typeEOS6_>
 800208c:	4603      	mov	r3, r0
 800208e:	681c      	ldr	r4, [r3, #0]
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f7ff fe23 	bl	8001cdc <_ZNSt9_Any_data9_M_accessEv>
 8002096:	4603      	mov	r3, r0
 8002098:	4619      	mov	r1, r3
 800209a:	2004      	movs	r0, #4
 800209c:	f7ff fe12 	bl	8001cc4 <_ZnwjPv>
 80020a0:	4603      	mov	r3, r0
 80020a2:	601c      	str	r4, [r3, #0]
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd90      	pop	{r4, r7, pc}

080020ac <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f000 f857 	bl	8002168 <_ZNKSt9_Any_data9_M_accessIPFvR9RxMessageEEERKT_v>
 80020ba:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80020bc:	68f8      	ldr	r0, [r7, #12]
 80020be:	f000 f85f 	bl	8002180 <_ZSt11__addressofIKPFvR9RxMessageEEPT_RS5_>
 80020c2:	4603      	mov	r3, r0
 80020c4:	bf00      	nop
	}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}

080020ce <_ZSt10__invoke_rIvRPFvR9RxMessageEJS1_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES8_E4typeEOSB_DpOSC_>:
    }

  // INVOKE<R> when R is cv void
  template<typename _Res, typename _Callable, typename... _Args>
    _GLIBCXX14_CONSTEXPR __can_invoke_as_void<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80020ce:	b5b0      	push	{r4, r5, r7, lr}
 80020d0:	b082      	sub	sp, #8
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f85c 	bl	8002196 <_ZSt7forwardIRPFvR9RxMessageEEOT_RNSt16remove_referenceIS5_E4typeE>
 80020de:	4604      	mov	r4, r0
 80020e0:	6838      	ldr	r0, [r7, #0]
 80020e2:	f7ff f8ae 	bl	8001242 <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 80020e6:	4603      	mov	r3, r0
 80020e8:	461a      	mov	r2, r3
 80020ea:	4621      	mov	r1, r4
 80020ec:	4628      	mov	r0, r5
 80020ee:	f000 f85d 	bl	80021ac <_ZSt13__invoke_implIvRPFvR9RxMessageEJS1_EET_St14__invoke_otherOT0_DpOT1_>
				 std::forward<_Args>(__args)...);
    }
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bdb0      	pop	{r4, r5, r7, pc}

080020fa <_ZNSt9_Any_data9_M_accessIPPFvR9RxMessageEEERT_v>:
      _M_access()
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b082      	sub	sp, #8
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f7ff fdea 	bl	8001cdc <_ZNSt9_Any_data9_M_accessEv>
 8002108:	4603      	mov	r3, r0
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8002112:	b5b0      	push	{r4, r5, r7, lr}
 8002114:	b084      	sub	sp, #16
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	4613      	mov	r3, r2
 800211e:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8002120:	79fb      	ldrb	r3, [r7, #7]
 8002122:	2b03      	cmp	r3, #3
 8002124:	d016      	beq.n	8002154 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 8002126:	2b03      	cmp	r3, #3
 8002128:	dc19      	bgt.n	800215e <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 800212a:	2b01      	cmp	r3, #1
 800212c:	d002      	beq.n	8002134 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 800212e:	2b02      	cmp	r3, #2
 8002130:	d00a      	beq.n	8002148 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 8002132:	e014      	b.n	800215e <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7ff ffe0 	bl	80020fa <_ZNSt9_Any_data9_M_accessIPPFvR9RxMessageEEERT_v>
 800213a:	4604      	mov	r4, r0
 800213c:	68b8      	ldr	r0, [r7, #8]
 800213e:	f7ff ffb5 	bl	80020ac <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE14_M_get_pointerERKSt9_Any_data>
 8002142:	4603      	mov	r3, r0
 8002144:	6023      	str	r3, [r4, #0]
	      break;
 8002146:	e00a      	b.n	800215e <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8002148:	462a      	mov	r2, r5
 800214a:	68b9      	ldr	r1, [r7, #8]
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 f842 	bl	80021d6 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 8002152:	e004      	b.n	800215e <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8002154:	4621      	mov	r1, r4
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f000 f856 	bl	8002208 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 800215c:	bf00      	nop
	  return false;
 800215e:	2300      	movs	r3, #0
	}
 8002160:	4618      	mov	r0, r3
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bdb0      	pop	{r4, r5, r7, pc}

08002168 <_ZNKSt9_Any_data9_M_accessIPFvR9RxMessageEEERKT_v>:
      _M_access() const
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7ff fdbe 	bl	8001cf2 <_ZNKSt9_Any_data9_M_accessEv>
 8002176:	4603      	mov	r3, r0
 8002178:	4618      	mov	r0, r3
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}

08002180 <_ZSt11__addressofIKPFvR9RxMessageEEPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4618      	mov	r0, r3
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr

08002196 <_ZSt7forwardIRPFvR9RxMessageEEOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002196:	b480      	push	{r7}
 8002198:	b083      	sub	sp, #12
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4618      	mov	r0, r3
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <_ZSt13__invoke_implIvRPFvR9RxMessageEJS1_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80021ac:	b590      	push	{r4, r7, lr}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	7338      	strb	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80021b8:	68b8      	ldr	r0, [r7, #8]
 80021ba:	f7ff ffec 	bl	8002196 <_ZSt7forwardIRPFvR9RxMessageEEOT_RNSt16remove_referenceIS5_E4typeE>
 80021be:	4603      	mov	r3, r0
 80021c0:	681c      	ldr	r4, [r3, #0]
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff f83d 	bl	8001242 <_ZSt7forwardIR9RxMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 80021c8:	4603      	mov	r3, r0
 80021ca:	4618      	mov	r0, r3
 80021cc:	47a0      	blx	r4
 80021ce:	bf00      	nop
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd90      	pop	{r4, r7, pc}

080021d6 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80021d6:	b590      	push	{r4, r7, lr}
 80021d8:	b085      	sub	sp, #20
 80021da:	af00      	add	r7, sp, #0
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	60b9      	str	r1, [r7, #8]
 80021e0:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80021e2:	68b8      	ldr	r0, [r7, #8]
 80021e4:	f7ff ffc0 	bl	8002168 <_ZNKSt9_Any_data9_M_accessIPFvR9RxMessageEEERKT_v>
 80021e8:	4603      	mov	r3, r0
 80021ea:	681c      	ldr	r4, [r3, #0]
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f7ff fd75 	bl	8001cdc <_ZNSt9_Any_data9_M_accessEv>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4619      	mov	r1, r3
 80021f6:	2004      	movs	r0, #4
 80021f8:	f7ff fd64 	bl	8001cc4 <_ZnwjPv>
 80021fc:	4603      	mov	r3, r0
 80021fe:	601c      	str	r4, [r3, #0]
	}
 8002200:	bf00      	nop
 8002202:	3714      	adds	r7, #20
 8002204:	46bd      	mov	sp, r7
 8002206:	bd90      	pop	{r4, r7, pc}

08002208 <_ZNSt14_Function_base13_Base_managerIPFvR9RxMessageEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f804 	bl	8002220 <_ZNSt9_Any_data9_M_accessIPFvR9RxMessageEEERT_v>
	}
 8002218:	bf00      	nop
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <_ZNSt9_Any_data9_M_accessIPFvR9RxMessageEEERT_v>:
      _M_access()
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff fd57 	bl	8001cdc <_ZNSt9_Any_data9_M_accessEv>
 800222e:	4603      	mov	r3, r0
 8002230:	4618      	mov	r0, r3
 8002232:	3708      	adds	r7, #8
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}

08002238 <_Z41__static_initialization_and_destruction_0ii>:
	printf("hours to full charge = %f\n", m_currentFrame.m_hours_to_full_charge);


}

}
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d107      	bne.n	8002258 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800224e:	4293      	cmp	r3, r2
 8002250:	d102      	bne.n	8002258 <_Z41__static_initialization_and_destruction_0ii+0x20>
bms_frame_builder frame_builder;
 8002252:	4803      	ldr	r0, [pc, #12]	; (8002260 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8002254:	f7ff fe6c 	bl	8001f30 <_ZN5bms4417bms_frame_builderC1Ev>
}
 8002258:	bf00      	nop
 800225a:	3708      	adds	r7, #8
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20000a94 	.word	0x20000a94

08002264 <_GLOBAL__sub_I__ZN5bms4414m_currentFrameE>:
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
 8002268:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800226c:	2001      	movs	r0, #1
 800226e:	f7ff ffe3 	bl	8002238 <_Z41__static_initialization_and_destruction_0ii>
 8002272:	bd80      	pop	{r7, pc}

08002274 <_Z41__static_initialization_and_destruction_0ii>:
		break;
	}

}

}
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d10a      	bne.n	800229a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800228a:	4293      	cmp	r3, r2
 800228c:	d105      	bne.n	800229a <_Z41__static_initialization_and_destruction_0ii+0x26>
static osMutexId_t s_modeMutex = osMutexNew(NULL);
 800228e:	2000      	movs	r0, #0
 8002290:	f009 f979 	bl	800b586 <osMutexNew>
 8002294:	4603      	mov	r3, r0
 8002296:	4a03      	ldr	r2, [pc, #12]	; (80022a4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8002298:	6013      	str	r3, [r2, #0]
}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000ae0 	.word	0x20000ae0

080022a8 <_GLOBAL__sub_I__ZN7cooling20COOLING_PUMP_CHANNELE>:
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80022b0:	2001      	movs	r0, #1
 80022b2:	f7ff ffdf 	bl	8002274 <_Z41__static_initialization_and_destruction_0ii>
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <_ZL17AdcModuleToHandle9AdcModule>:

enum AdcModule : int {
	ADC_MODULE1, ADC_MODULE2,
};

static inline ADC_HandleTypeDef* AdcModuleToHandle(AdcModule module) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	switch (module) {
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <_ZL17AdcModuleToHandle9AdcModule+0x16>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d002      	beq.n	80022d2 <_ZL17AdcModuleToHandle9AdcModule+0x1a>
 80022cc:	e003      	b.n	80022d6 <_ZL17AdcModuleToHandle9AdcModule+0x1e>
	case ADC_MODULE1:
		return &hadc1;
 80022ce:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <_ZL17AdcModuleToHandle9AdcModule+0x2c>)
 80022d0:	e004      	b.n	80022dc <_ZL17AdcModuleToHandle9AdcModule+0x24>
	case ADC_MODULE2:
		return &hadc2;
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <_ZL17AdcModuleToHandle9AdcModule+0x30>)
 80022d4:	e002      	b.n	80022dc <_ZL17AdcModuleToHandle9AdcModule+0x24>
	default:
		Error_Handler();
 80022d6:	f002 fac1 	bl	800485c <Error_Handler>
		return nullptr;
 80022da:	2300      	movs	r3, #0
	}
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	20000c30 	.word	0x20000c30
 80022e8:	20000c78 	.word	0x20000c78

080022ec <_ZN10AdcChannelC1Ev>:
#include "FreeRTOS.h"
#include "cmsis_os.h"

class AdcChannel {
public:
	explicit AdcChannel() {
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

	}
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <_ZN10AdcChannel3getEv>:

	uint16_t get() {
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
		return m_value;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	881b      	ldrh	r3, [r3, #0]
	}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <_ZN10AdcChannel8setValueEt>:

	void setValue(uint16_t value){
 800231a:	b480      	push	{r7}
 800231c:	b083      	sub	sp, #12
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	460b      	mov	r3, r1
 8002324:	807b      	strh	r3, [r7, #2]
		m_value = value;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	887a      	ldrh	r2, [r7, #2]
 800232a:	801a      	strh	r2, [r3, #0]
	}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>:
    class function<_Res(_ArgTypes...)>
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4618      	mov	r0, r3
 8002344:	f7fe fe54 	bl	8000ff0 <_ZNSt14_Function_baseD1Ev>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <_ZN26AdcConvCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvCpltCallbackHandler() = default;
 8002352:	b5b0      	push	{r4, r5, r7, lr}
 8002354:	b082      	sub	sp, #8
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	240d      	movs	r4, #13
 800235e:	461d      	mov	r5, r3
 8002360:	2c00      	cmp	r4, #0
 8002362:	db05      	blt.n	8002370 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0x1e>
 8002364:	4628      	mov	r0, r5
 8002366:	f000 fad9 	bl	800291c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 800236a:	3510      	adds	r5, #16
 800236c:	3c01      	subs	r4, #1
 800236e:	e7f7      	b.n	8002360 <_ZN26AdcConvCpltCallbackHandlerC1Ev+0xe>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bdb0      	pop	{r4, r5, r7, pc}

08002382 <_ZN26AdcConvCpltCallbackHandlerD1Ev>:
class AdcConvCpltCallbackHandler {
 8002382:	b590      	push	{r4, r7, lr}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00a      	beq.n	80023a6 <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	429c      	cmp	r4, r3
 800239a:	d004      	beq.n	80023a6 <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x24>
 800239c:	3c10      	subs	r4, #16
 800239e:	4620      	mov	r0, r4
 80023a0:	f7ff ffca 	bl	8002338 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 80023a4:	e7f7      	b.n	8002396 <_ZN26AdcConvCpltCallbackHandlerD1Ev+0x14>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd90      	pop	{r4, r7, pc}

080023b0 <__tcf_0>:
		static AdcConvCpltCallbackHandler instance;
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4801      	ldr	r0, [pc, #4]	; (80023bc <__tcf_0+0xc>)
 80023b6:	f7ff ffe4 	bl	8002382 <_ZN26AdcConvCpltCallbackHandlerD1Ev>
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000ae4 	.word	0x20000ae4

080023c0 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>:
	static AdcConvCpltCallbackHandler& getInstance() {
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
		static AdcConvCpltCallbackHandler instance;
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	f3bf 8f5b 	dmb	ish
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	bf0c      	ite	eq
 80023d6:	2301      	moveq	r3, #1
 80023d8:	2300      	movne	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d013      	beq.n	8002408 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 80023e0:	480b      	ldr	r0, [pc, #44]	; (8002410 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 80023e2:	f00c fe59 	bl	800f098 <__cxa_guard_acquire>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	bf14      	ite	ne
 80023ec:	2301      	movne	r3, #1
 80023ee:	2300      	moveq	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x48>
 80023f6:	4807      	ldr	r0, [pc, #28]	; (8002414 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
 80023f8:	f7ff ffab 	bl	8002352 <_ZN26AdcConvCpltCallbackHandlerC1Ev>
 80023fc:	4806      	ldr	r0, [pc, #24]	; (8002418 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x58>)
 80023fe:	f00c fe82 	bl	800f106 <atexit>
 8002402:	4803      	ldr	r0, [pc, #12]	; (8002410 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x50>)
 8002404:	f00c fe54 	bl	800f0b0 <__cxa_guard_release>
		return instance;
 8002408:	4b02      	ldr	r3, [pc, #8]	; (8002414 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv+0x54>)
	}
 800240a:	4618      	mov	r0, r3
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000bc8 	.word	0x20000bc8
 8002414:	20000ae4 	.word	0x20000ae4
 8002418:	080023b1 	.word	0x080023b1

0800241c <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>:
	unsigned int registerCallback(std::function<void(ADC_HandleTypeDef*)> isr) {
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
		unsigned int id = m_size;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800242c:	60fb      	str	r3, [r7, #12]
		m_listeners[m_size++] = isr;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002434:	1c59      	adds	r1, r3, #1
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	f8c2 10e0 	str.w	r1, [r2, #224]	; 0xe0
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	6839      	ldr	r1, [r7, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f000 fa76 	bl	8002936 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		return id;
 800244a:	68fb      	ldr	r3, [r7, #12]
	}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>:
	void unregisterCallback(unsigned int callbackId) {
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
		m_listeners[callbackId] = m_listeners[m_size];
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	18d0      	adds	r0, r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	4413      	add	r3, r2
 8002472:	4619      	mov	r1, r3
 8002474:	f000 fa5f 	bl	8002936 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>
		m_listeners[m_size] = nullptr;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	4413      	add	r3, r2
 8002484:	2100      	movs	r1, #0
 8002486:	4618      	mov	r0, r3
 8002488:	f000 fa70 	bl	800296c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>
		m_size--;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002492:	1e5a      	subs	r2, r3, #1
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
	}
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>:
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
					m_hadc->Init.NbrOfConversion), m_channels(
					new AdcChannel[m_nbrConvertions]), m_buffer(
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
							[&](ADC_HandleTypeDef *hadc) {
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b082      	sub	sp, #8
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
								if (hadc == m_hadc) {
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d104      	bne.n	80024c2 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_+0x20>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
									dmaCplrCallback();
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 f91e 	bl	80026fe <_ZN19AdcModuleController15dmaCplrCallbackEv>
								}
							}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <_ZN19AdcModuleControllerC1E9AdcModule>:
	explicit AdcModuleController(AdcModule module) :
 80024cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ce:	b087      	sub	sp, #28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
			m_hadc(AdcModuleToHandle(module)), m_nbrConvertions(
 80024d6:	6838      	ldr	r0, [r7, #0]
 80024d8:	f7ff feee 	bl	80022b8 <_ZL17AdcModuleToHandle9AdcModule>
 80024dc:	4602      	mov	r2, r0
					)) {
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	601a      	str	r2, [r3, #0]
					m_hadc->Init.NbrOfConversion), m_channels(
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	69da      	ldr	r2, [r3, #28]
					)) {
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	605a      	str	r2, [r3, #4]
					new AdcChannel[m_nbrConvertions]), m_buffer(
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685c      	ldr	r4, [r3, #4]
 80024f0:	4b33      	ldr	r3, [pc, #204]	; (80025c0 <_ZN19AdcModuleControllerC1E9AdcModule+0xf4>)
 80024f2:	429c      	cmp	r4, r3
 80024f4:	d801      	bhi.n	80024fa <_ZN19AdcModuleControllerC1E9AdcModule+0x2e>
 80024f6:	0063      	lsls	r3, r4, #1
 80024f8:	e001      	b.n	80024fe <_ZN19AdcModuleControllerC1E9AdcModule+0x32>
 80024fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024fe:	4618      	mov	r0, r3
 8002500:	f00c fdd9 	bl	800f0b6 <_Znaj>
 8002504:	4603      	mov	r3, r0
 8002506:	461e      	mov	r6, r3
 8002508:	4635      	mov	r5, r6
 800250a:	1e63      	subs	r3, r4, #1
 800250c:	461c      	mov	r4, r3
 800250e:	2c00      	cmp	r4, #0
 8002510:	db05      	blt.n	800251e <_ZN19AdcModuleControllerC1E9AdcModule+0x52>
 8002512:	4628      	mov	r0, r5
 8002514:	f7ff feea 	bl	80022ec <_ZN10AdcChannelC1Ev>
 8002518:	3502      	adds	r5, #2
 800251a:	3c01      	subs	r4, #1
 800251c:	e7f7      	b.n	800250e <_ZN19AdcModuleControllerC1E9AdcModule+0x42>
					)) {
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	609e      	str	r6, [r3, #8]
					new uint16_t[m_nbrConvertions]), m_dmaIsrId(
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4a26      	ldr	r2, [pc, #152]	; (80025c0 <_ZN19AdcModuleControllerC1E9AdcModule+0xf4>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d801      	bhi.n	8002530 <_ZN19AdcModuleControllerC1E9AdcModule+0x64>
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	e001      	b.n	8002534 <_ZN19AdcModuleControllerC1E9AdcModule+0x68>
 8002530:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002534:	4618      	mov	r0, r3
 8002536:	f00c fdbe 	bl	800f0b6 <_Znaj>
 800253a:	4603      	mov	r3, r0
 800253c:	461a      	mov	r2, r3
					)) {
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	741a      	strb	r2, [r3, #16]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 8002548:	f7ff ff3a 	bl	80023c0 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 800254c:	4604      	mov	r4, r0
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	f107 0308 	add.w	r3, r7, #8
 8002554:	4611      	mov	r1, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fa22 	bl	80029a0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>
 800255c:	f107 0308 	add.w	r3, r7, #8
 8002560:	4619      	mov	r1, r3
 8002562:	4620      	mov	r0, r4
 8002564:	f7ff ff5a 	bl	800241c <_ZN26AdcConvCpltCallbackHandler16registerCallbackESt8functionIFvP17ADC_HandleTypeDefEE>
 8002568:	4602      	mov	r2, r0
					)) {
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	61da      	str	r2, [r3, #28]
					AdcConvCpltCallbackHandler::getInstance().registerCallback(
 800256e:	f107 0308 	add.w	r3, r7, #8
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff fee0 	bl	8002338 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
		m_semaphore = osSemaphoreNew(1, 0, NULL);
 8002578:	2200      	movs	r2, #0
 800257a:	2100      	movs	r1, #0
 800257c:	2001      	movs	r0, #1
 800257e:	f009 f910 	bl	800b7a2 <osSemaphoreNew>
 8002582:	4602      	mov	r2, r0
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	615a      	str	r2, [r3, #20]
		m_mutex = osMutexNew(NULL);
 8002588:	2000      	movs	r0, #0
 800258a:	f008 fffc 	bl	800b586 <osMutexNew>
 800258e:	4602      	mov	r2, r0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	619a      	str	r2, [r3, #24]
		m_bussy = true;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	741a      	strb	r2, [r3, #16]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6818      	ldr	r0, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 80025a6:	461a      	mov	r2, r3
 80025a8:	f003 f8fa 	bl	80057a0 <HAL_ADC_Start_DMA>
		update();
 80025ac:	2100      	movs	r1, #0
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f855 	bl	800265e <_ZN19AdcModuleController6updateEb>
	}
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4618      	mov	r0, r3
 80025b8:	371c      	adds	r7, #28
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025be:	bf00      	nop
 80025c0:	3ffffffc 	.word	0x3ffffffc

080025c4 <_ZN19AdcModuleControllerD1Ev>:

	~AdcModuleController() {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
		AdcConvCpltCallbackHandler::getInstance().unregisterCallback(
 80025cc:	f7ff fef8 	bl	80023c0 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 80025d0:	4602      	mov	r2, r0
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	4619      	mov	r1, r3
 80025d8:	4610      	mov	r0, r2
 80025da:	f7ff ff3b 	bl	8002454 <_ZN26AdcConvCpltCallbackHandler18unregisterCallbackEj>
				m_dmaIsrId);
		if (osSemaphoreGetCount(m_semaphore) != 0) {
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f009 f9fc 	bl	800b9e0 <osSemaphoreGetCount>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	bf14      	ite	ne
 80025ee:	2301      	movne	r3, #1
 80025f0:	2300      	moveq	r3, #0
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d006      	beq.n	8002606 <_ZN19AdcModuleControllerD1Ev+0x42>
			osSemaphoreAcquire(m_semaphore, osWaitForever);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002600:	4618      	mov	r0, r3
 8002602:	f009 f957 	bl	800b8b4 <osSemaphoreAcquire>
		}
		delete[] m_channels;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d004      	beq.n	8002618 <_ZN19AdcModuleControllerD1Ev+0x54>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	4618      	mov	r0, r3
 8002614:	f00c fd3e 	bl	800f094 <_ZdaPv>
		delete[] m_buffer;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d004      	beq.n	800262a <_ZN19AdcModuleControllerD1Ev+0x66>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	4618      	mov	r0, r3
 8002626:	f00c fd35 	bl	800f094 <_ZdaPv>
	}
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4618      	mov	r0, r3
 800262e:	3708      	adds	r7, #8
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <_ZN19AdcModuleController16getChannelByRankEj>:
public:

	AdcChannel* getChannelByRank(size_t rank) {
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
		if (rank >= m_nbrConvertions) {
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	429a      	cmp	r2, r3
 8002646:	d301      	bcc.n	800264c <_ZN19AdcModuleController16getChannelByRankEj+0x18>
			Error_Handler();
 8002648:	f002 f908 	bl	800485c <Error_Handler>
		}
		return m_channels + rank;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4413      	add	r3, r2
	}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <_ZN19AdcModuleController6updateEb>:

	void update(bool force = false) {
 800265e:	b580      	push	{r7, lr}
 8002660:	b084      	sub	sp, #16
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	460b      	mov	r3, r1
 8002668:	70fb      	strb	r3, [r7, #3]
		if(!force && m_bussy)return;
 800266a:	78fb      	ldrb	r3, [r7, #3]
 800266c:	f083 0301 	eor.w	r3, r3, #1
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <_ZN19AdcModuleController6updateEb+0x20>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	7c1b      	ldrb	r3, [r3, #16]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d13b      	bne.n	80026f6 <_ZN19AdcModuleController6updateEb+0x98>
		osMutexAcquire(m_mutex, osWaitForever);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002686:	4618      	mov	r0, r3
 8002688:	f009 f803 	bl	800b692 <osMutexAcquire>
		m_bussy = true;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	741a      	strb	r2, [r3, #16]

		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68d9      	ldr	r1, [r3, #12]
				m_nbrConvertions);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	685b      	ldr	r3, [r3, #4]
		HAL_ADC_Start_DMA(m_hadc, reinterpret_cast<uint32_t*>(m_buffer),
 800269e:	461a      	mov	r2, r3
 80026a0:	f003 f87e 	bl	80057a0 <HAL_ADC_Start_DMA>
		osSemaphoreAcquire(m_semaphore, osWaitForever);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026ac:	4618      	mov	r0, r3
 80026ae:	f009 f901 	bl	800b8b4 <osSemaphoreAcquire>

		//update channels.
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d211      	bcs.n	80026e4 <_ZN19AdcModuleController6updateEb+0x86>
			m_channels[i].setValue(m_buffer[i]);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	18d0      	adds	r0, r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68da      	ldr	r2, [r3, #12]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	4413      	add	r3, r2
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	4619      	mov	r1, r3
 80026d8:	f7ff fe1f 	bl	800231a <_ZN10AdcChannel8setValueEt>
		for (size_t i = 0; i < m_nbrConvertions; i++) {
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	3301      	adds	r3, #1
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	e7e8      	b.n	80026b6 <_ZN19AdcModuleController6updateEb+0x58>
		}


		m_bussy = false;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	741a      	strb	r2, [r3, #16]
		osMutexRelease(m_mutex);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f009 f81a 	bl	800b728 <osMutexRelease>
 80026f4:	e000      	b.n	80026f8 <_ZN19AdcModuleController6updateEb+0x9a>
		if(!force && m_bussy)return;
 80026f6:	bf00      	nop
	}
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <_ZN19AdcModuleController15dmaCplrCallbackEv>:

private:

	void dmaCplrCallback() {
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
		m_bussy = false;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	741a      	strb	r2, [r3, #16]
		osSemaphoreRelease(m_semaphore);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	4618      	mov	r0, r3
 8002712:	f009 f921 	bl	800b958 <osSemaphoreRelease>
	}
 8002716:	bf00      	nop
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
	static AdcModuleController instance(ADC_MODULE);
	return instance;
}

static AdcModuleController& _getChannelAdcModuleControllerRuntime(AdcModule module){
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
	switch(module){
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x16>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d004      	beq.n	800273c <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x1e>
 8002732:	e007      	b.n	8002744 <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x26>
	case ADC_MODULE1: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 8002734:	f000 f966 	bl	8002a04 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 8002738:	4603      	mov	r3, r0
 800273a:	e008      	b.n	800274e <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	case ADC_MODULE2: return _getChannelAdcModuleControllerCompiletime<ADC_MODULE2>();
 800273c:	f000 f998 	bl	8002a70 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>
 8002740:	4603      	mov	r3, r0
 8002742:	e004      	b.n	800274e <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule+0x30>
	default:
		Error_Handler();
 8002744:	f002 f88a 	bl	800485c <Error_Handler>
		return _getChannelAdcModuleControllerCompiletime<ADC_MODULE1>();
 8002748:	f000 f95c 	bl	8002a04 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>
 800274c:	4603      	mov	r3, r0
	}
}
 800274e:	4618      	mov	r0, r3
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <_ZN20AdcChannelControllerC1E9AdcModulej>:



class AdcChannelController {
public:
	explicit AdcChannelController(AdcModule module, unsigned int rank) :
 8002756:	b580      	push	{r7, lr}
 8002758:	b084      	sub	sp, #16
 800275a:	af00      	add	r7, sp, #0
 800275c:	60f8      	str	r0, [r7, #12]
 800275e:	60b9      	str	r1, [r7, #8]
 8002760:	607a      	str	r2, [r7, #4]
			m_module(_getChannelAdcModuleControllerRuntime(module)),
 8002762:	68b8      	ldr	r0, [r7, #8]
 8002764:	f7ff ffdb 	bl	800271e <_ZL37_getChannelAdcModuleControllerRuntime9AdcModule>
 8002768:	4602      	mov	r2, r0
			m_channel(m_module.getChannelByRank(rank)) {
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff5d 	bl	8002634 <_ZN19AdcModuleController16getChannelByRankEj>
 800277a:	4602      	mov	r2, r0
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	605a      	str	r2, [r3, #4]
	}
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}

0800278a <_ZN20AdcChannelController3getEb>:

	uint16_t get(bool force = false) {
 800278a:	b580      	push	{r7, lr}
 800278c:	b082      	sub	sp, #8
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	70fb      	strb	r3, [r7, #3]
		m_module.update(force);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	78fa      	ldrb	r2, [r7, #3]
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff ff5d 	bl	800265e <_ZN19AdcModuleController6updateEb>
		return m_channel->get();
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff fdaa 	bl	8002302 <_ZN10AdcChannel3getEv>
 80027ae:	4603      	mov	r3, r0
	}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <_ZN9NTCSensorC1E9AdcModuletffff>:
#include <cmath>


class NTCSensor {
public:
	explicit NTCSensor(AdcModule module, uint16_t rank, float internalResistance, float supplyVoltage, float beta, float r25)
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b088      	sub	sp, #32
 80027bc:	af00      	add	r7, sp, #0
 80027be:	61f8      	str	r0, [r7, #28]
 80027c0:	61b9      	str	r1, [r7, #24]
 80027c2:	4613      	mov	r3, r2
 80027c4:	ed87 0a04 	vstr	s0, [r7, #16]
 80027c8:	edc7 0a03 	vstr	s1, [r7, #12]
 80027cc:	ed87 1a02 	vstr	s2, [r7, #8]
 80027d0:	edc7 1a01 	vstr	s3, [r7, #4]
 80027d4:	82fb      	strh	r3, [r7, #22]
		: m_channelController(module, rank),
		  m_r(internalResistance),
		  m_u0(supplyVoltage),
		  m_beta(beta),
		  m_r25(r25){
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	8afa      	ldrh	r2, [r7, #22]
 80027da:	69b9      	ldr	r1, [r7, #24]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ffba 	bl	8002756 <_ZN20AdcChannelControllerC1E9AdcModulej>
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	693a      	ldr	r2, [r7, #16]
 80027e6:	609a      	str	r2, [r3, #8]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	68ba      	ldr	r2, [r7, #8]
 80027f2:	611a      	str	r2, [r3, #16]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	615a      	str	r2, [r3, #20]
	}
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	4618      	mov	r0, r3
 80027fe:	3720      	adds	r7, #32
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	0000      	movs	r0, r0
	...

08002808 <main_entry>:

#ifdef __cplusplus
extern "C" {
#endif

void main_entry(void *argv) {
 8002808:	b580      	push	{r7, lr}
 800280a:	b092      	sub	sp, #72	; 0x48
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]


	//bms44::init();

	//PressureSensor pressureSensor(ADC_MODULE2, 3);
	pdu::init();
 8002810:	f000 ff9c 	bl	800374c <_ZN3pdu4initEv>
	KistlerController kistlerController;

	imuMaster.start();
	*/
	//MODULE | RANK | R2 | U0 | BETA | R25
	NTCSensor ntc(ADC_MODULE2, 0, 20000, 3.3, 3950, 10000);
 8002814:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002818:	eddf 1a37 	vldr	s3, [pc, #220]	; 80028f8 <main_entry+0xf0>
 800281c:	ed9f 1a37 	vldr	s2, [pc, #220]	; 80028fc <main_entry+0xf4>
 8002820:	eddf 0a37 	vldr	s1, [pc, #220]	; 8002900 <main_entry+0xf8>
 8002824:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8002904 <main_entry+0xfc>
 8002828:	2200      	movs	r2, #0
 800282a:	2101      	movs	r1, #1
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ffc3 	bl	80027b8 <_ZN9NTCSensorC1E9AdcModuletffff>
	NTCSensor ntc2(ADC_MODULE2, 1, 20000, 3.3, 3977, 10000);
 8002832:	f107 0310 	add.w	r3, r7, #16
 8002836:	eddf 1a30 	vldr	s3, [pc, #192]	; 80028f8 <main_entry+0xf0>
 800283a:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8002908 <main_entry+0x100>
 800283e:	eddf 0a30 	vldr	s1, [pc, #192]	; 8002900 <main_entry+0xf8>
 8002842:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8002904 <main_entry+0xfc>
 8002846:	2201      	movs	r2, #1
 8002848:	2101      	movs	r1, #1
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ffb4 	bl	80027b8 <_ZN9NTCSensorC1E9AdcModuletffff>
	AdcChannelController ain2(ADC_MODULE2, 1);
 8002850:	f107 0308 	add.w	r3, r7, #8
 8002854:	2201      	movs	r2, #1
 8002856:	2101      	movs	r1, #1
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff7c 	bl	8002756 <_ZN20AdcChannelControllerC1E9AdcModulej>


	while (true) {
		uint16_t avalue = ain2.get(true);
 800285e:	f107 0308 	add.w	r3, r7, #8
 8002862:	2101      	movs	r1, #1
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff ff90 	bl	800278a <_ZN20AdcChannelController3getEb>
 800286a:	4603      	mov	r3, r0
 800286c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		printf("avalue = %u/4095\n", avalue);
 8002870:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002874:	4619      	mov	r1, r3
 8002876:	4825      	ldr	r0, [pc, #148]	; (800290c <main_entry+0x104>)
 8002878:	f008 fcf0 	bl	800b25c <printf_>
		float r = 1000 * (1.0 / ((4095.0 / avalue) - 1));
 800287c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002880:	4618      	mov	r0, r3
 8002882:	f7fd fe4f 	bl	8000524 <__aeabi_i2d>
 8002886:	4602      	mov	r2, r0
 8002888:	460b      	mov	r3, r1
 800288a:	a119      	add	r1, pc, #100	; (adr r1, 80028f0 <main_entry+0xe8>)
 800288c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002890:	f7fd ffdc 	bl	800084c <__aeabi_ddiv>
 8002894:	4602      	mov	r2, r0
 8002896:	460b      	mov	r3, r1
 8002898:	4610      	mov	r0, r2
 800289a:	4619      	mov	r1, r3
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <main_entry+0x108>)
 80028a2:	f7fd fcf1 	bl	8000288 <__aeabi_dsub>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	f04f 0000 	mov.w	r0, #0
 80028ae:	4918      	ldr	r1, [pc, #96]	; (8002910 <main_entry+0x108>)
 80028b0:	f7fd ffcc 	bl	800084c <__aeabi_ddiv>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4610      	mov	r0, r2
 80028ba:	4619      	mov	r1, r3
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	4b14      	ldr	r3, [pc, #80]	; (8002914 <main_entry+0x10c>)
 80028c2:	f7fd fe99 	bl	80005f8 <__aeabi_dmul>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4610      	mov	r0, r2
 80028cc:	4619      	mov	r1, r3
 80028ce:	f7fe f98b 	bl	8000be8 <__aeabi_d2f>
 80028d2:	4603      	mov	r3, r0
 80028d4:	643b      	str	r3, [r7, #64]	; 0x40
		printf("r = %f\n", r);
 80028d6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80028d8:	f7fd fe36 	bl	8000548 <__aeabi_f2d>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	480d      	ldr	r0, [pc, #52]	; (8002918 <main_entry+0x110>)
 80028e2:	f008 fcbb 	bl	800b25c <printf_>


		*/
		//cooling::update();
		//pdu::update();
		osDelay(pdMS_TO_TICKS(1000));
 80028e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028ea:	f008 fe31 	bl	800b550 <osDelay>
		// ======= POSITION-ESTIMATION ======

	}
 80028ee:	e7b6      	b.n	800285e <main_entry+0x56>
 80028f0:	00000000 	.word	0x00000000
 80028f4:	40affe00 	.word	0x40affe00
 80028f8:	461c4000 	.word	0x461c4000
 80028fc:	4576e000 	.word	0x4576e000
 8002900:	40533333 	.word	0x40533333
 8002904:	469c4000 	.word	0x469c4000
 8002908:	45789000 	.word	0x45789000
 800290c:	08011de4 	.word	0x08011de4
 8002910:	3ff00000 	.word	0x3ff00000
 8002914:	408f4000 	.word	0x408f4000
 8002918:	08011df8 	.word	0x08011df8

0800291c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>:
      function() noexcept
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4618      	mov	r0, r3
 8002928:	f7fe fb54 	bl	8000fd4 <_ZNSt14_Function_baseC1Ev>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4618      	mov	r0, r3
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSERKS3_>:
      operator=(const function& __x)
 8002936:	b580      	push	{r7, lr}
 8002938:	b086      	sub	sp, #24
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 8002940:	f107 0308 	add.w	r3, r7, #8
 8002944:	6839      	ldr	r1, [r7, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f000 f8c0 	bl	8002acc <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>
 800294c:	f107 0308 	add.w	r3, r7, #8
 8002950:	6879      	ldr	r1, [r7, #4]
 8002952:	4618      	mov	r0, r3
 8002954:	f000 f8dc 	bl	8002b10 <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>
 8002958:	f107 0308 	add.w	r3, r7, #8
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff fceb 	bl	8002338 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
	return *this;
 8002962:	687b      	ldr	r3, [r7, #4]
      }
 8002964:	4618      	mov	r0, r3
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn>:
      operator=(nullptr_t) noexcept
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
	if (_M_manager)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00b      	beq.n	8002996 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEaSEDn+0x2a>
	    _M_manager(_M_functor, _M_functor, __destroy_functor);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	2203      	movs	r2, #3
 8002988:	4798      	blx	r3
	    _M_manager = nullptr;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	609a      	str	r2, [r3, #8]
	    _M_invoker = nullptr;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	60da      	str	r2, [r3, #12]
	return *this;
 8002996:	687b      	ldr	r3, [r7, #4]
      }
 8002998:	4618      	mov	r0, r3
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80029a0:	b590      	push	{r4, r7, lr}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fe fb11 	bl	8000fd4 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80029b2:	463b      	mov	r3, r7
 80029b4:	4618      	mov	r0, r3
 80029b6:	f000 f8d7 	bl	8002b68 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00f      	beq.n	80029e0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80029c0:	687c      	ldr	r4, [r7, #4]
 80029c2:	463b      	mov	r3, r7
 80029c4:	4618      	mov	r0, r3
 80029c6:	f000 f8da 	bl	8002b7e <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 80029ca:	4603      	mov	r3, r0
 80029cc:	4619      	mov	r1, r3
 80029ce:	4620      	mov	r0, r4
 80029d0:	f000 f8e0 	bl	8002b94 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>
	    _M_invoker = &_My_handler::_M_invoke;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a05      	ldr	r2, [pc, #20]	; (80029ec <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x4c>)
 80029d8:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a04      	ldr	r2, [pc, #16]	; (80029f0 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1IZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_vvEET_+0x50>)
 80029de:	609a      	str	r2, [r3, #8]
      }
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd90      	pop	{r4, r7, pc}
 80029ea:	bf00      	nop
 80029ec:	08002bb9 	.word	0x08002bb9
 80029f0:	08002be3 	.word	0x08002be3

080029f4 <__tcf_3>:
	static AdcModuleController instance(ADC_MODULE);
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	4801      	ldr	r0, [pc, #4]	; (8002a00 <__tcf_3+0xc>)
 80029fa:	f7ff fde3 	bl	80025c4 <_ZN19AdcModuleControllerD1Ev>
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	20000bcc 	.word	0x20000bcc

08002a04 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 8002a08:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	f3bf 8f5b 	dmb	ish
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	bf0c      	ite	eq
 8002a1a:	2301      	moveq	r3, #1
 8002a1c:	2300      	movne	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d014      	beq.n	8002a4e <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 8002a24:	480b      	ldr	r0, [pc, #44]	; (8002a54 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 8002a26:	f00c fb37 	bl	800f098 <__cxa_guard_acquire>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	bf14      	ite	ne
 8002a30:	2301      	movne	r3, #1
 8002a32:	2300      	moveq	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d009      	beq.n	8002a4e <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x4a>
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	4806      	ldr	r0, [pc, #24]	; (8002a58 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
 8002a3e:	f7ff fd45 	bl	80024cc <_ZN19AdcModuleControllerC1E9AdcModule>
 8002a42:	4806      	ldr	r0, [pc, #24]	; (8002a5c <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x58>)
 8002a44:	f00c fb5f 	bl	800f106 <atexit>
 8002a48:	4802      	ldr	r0, [pc, #8]	; (8002a54 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x50>)
 8002a4a:	f00c fb31 	bl	800f0b0 <__cxa_guard_release>
	return instance;
 8002a4e:	4b02      	ldr	r3, [pc, #8]	; (8002a58 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule0EER19AdcModuleControllerv+0x54>)
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000bec 	.word	0x20000bec
 8002a58:	20000bcc 	.word	0x20000bcc
 8002a5c:	080029f5 	.word	0x080029f5

08002a60 <__tcf_4>:
	static AdcModuleController instance(ADC_MODULE);
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4801      	ldr	r0, [pc, #4]	; (8002a6c <__tcf_4+0xc>)
 8002a66:	f7ff fdad 	bl	80025c4 <_ZN19AdcModuleControllerD1Ev>
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000bf0 	.word	0x20000bf0

08002a70 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv>:
static AdcModuleController& _getChannelAdcModuleControllerCompiletime(){
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
	static AdcModuleController instance(ADC_MODULE);
 8002a74:	4b12      	ldr	r3, [pc, #72]	; (8002ac0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	f3bf 8f5b 	dmb	ish
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	bf0c      	ite	eq
 8002a86:	2301      	moveq	r3, #1
 8002a88:	2300      	movne	r3, #0
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d014      	beq.n	8002aba <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 8002a90:	480b      	ldr	r0, [pc, #44]	; (8002ac0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 8002a92:	f00c fb01 	bl	800f098 <__cxa_guard_acquire>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf14      	ite	ne
 8002a9c:	2301      	movne	r3, #1
 8002a9e:	2300      	moveq	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d009      	beq.n	8002aba <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x4a>
 8002aa6:	2101      	movs	r1, #1
 8002aa8:	4806      	ldr	r0, [pc, #24]	; (8002ac4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
 8002aaa:	f7ff fd0f 	bl	80024cc <_ZN19AdcModuleControllerC1E9AdcModule>
 8002aae:	4806      	ldr	r0, [pc, #24]	; (8002ac8 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x58>)
 8002ab0:	f00c fb29 	bl	800f106 <atexit>
 8002ab4:	4802      	ldr	r0, [pc, #8]	; (8002ac0 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x50>)
 8002ab6:	f00c fafb 	bl	800f0b0 <__cxa_guard_release>
	return instance;
 8002aba:	4b02      	ldr	r3, [pc, #8]	; (8002ac4 <_Z41_getChannelAdcModuleControllerCompiletimeIL9AdcModule1EER19AdcModuleControllerv+0x54>)
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20000c10 	.word	0x20000c10
 8002ac4:	20000bf0 	.word	0x20000bf0
 8002ac8:	08002a61 	.word	0x08002a61

08002acc <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fe fa7b 	bl	8000fd4 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8002ade:	6838      	ldr	r0, [r7, #0]
 8002ae0:	f000 f89e 	bl	8002c20 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00d      	beq.n	8002b06 <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1ERKS3_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	6839      	ldr	r1, [r7, #0]
 8002af2:	2202      	movs	r2, #2
 8002af4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68da      	ldr	r2, [r3, #12]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	609a      	str	r2, [r3, #8]
    }
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <_ZNSt8functionIFvP17ADC_HandleTypeDefEE4swapERS3_>:
      void swap(function& __x) noexcept
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe fba4 	bl	800126e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f103 0208 	add.w	r2, r3, #8
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	3308      	adds	r3, #8
 8002b30:	4619      	mov	r1, r3
 8002b32:	4610      	mov	r0, r2
 8002b34:	f7fe fbcd 	bl	80012d2 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f103 020c 	add.w	r2, r3, #12
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	330c      	adds	r3, #12
 8002b42:	4619      	mov	r1, r3
 8002b44:	4610      	mov	r0, r2
 8002b46:	f000 f886 	bl	8002c56 <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
	  { return true; }
 8002b70:	2301      	movs	r3, #1
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr

08002b7e <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8002b94:	b590      	push	{r4, r7, lr}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8002b9e:	6838      	ldr	r0, [r7, #0]
 8002ba0:	f7ff ffed 	bl	8002b7e <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4622      	mov	r2, r4
 8002ba8:	4619      	mov	r1, r3
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f872 	bl	8002c94 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd90      	pop	{r4, r7, pc}

08002bb8 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E9_M_invokeERKSt9_Any_dataOS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8002bb8:	b590      	push	{r4, r7, lr}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f87f 	bl	8002cc6 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 8002bc8:	4604      	mov	r4, r0
 8002bca:	6838      	ldr	r0, [r7, #0]
 8002bcc:	f7ff ffc1 	bl	8002b52 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4620      	mov	r0, r4
 8002bd6:	f000 f887 	bl	8002ce8 <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>
				     std::forward<_ArgTypes>(__args)...);
 8002bda:	bf00      	nop
      }
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd90      	pop	{r4, r7, pc}

08002be2 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8002be2:	b590      	push	{r4, r7, lr}
 8002be4:	b085      	sub	sp, #20
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	60f8      	str	r0, [r7, #12]
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	4613      	mov	r3, r2
 8002bee:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d109      	bne.n	8002c0a <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8002bf6:	68f8      	ldr	r0, [r7, #12]
 8002bf8:	f000 f88c 	bl	8002d14 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 8002bfc:	4604      	mov	r4, r0
 8002bfe:	68b8      	ldr	r0, [r7, #8]
 8002c00:	f000 f861 	bl	8002cc6 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 8002c04:	4603      	mov	r3, r0
 8002c06:	6023      	str	r3, [r4, #0]
	    break;
 8002c08:	e005      	b.n	8002c16 <_ZNSt17_Function_handlerIFvP17ADC_HandleTypeDefEZN19AdcModuleControllerC4E9AdcModuleEUlS1_E_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8002c0a:	79fb      	ldrb	r3, [r7, #7]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	68b9      	ldr	r1, [r7, #8]
 8002c10:	68f8      	ldr	r0, [r7, #12]
 8002c12:	f000 f88b 	bl	8002d2c <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 8002c16:	2300      	movs	r3, #0
      }
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd90      	pop	{r4, r7, pc}

08002c20 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEcvbEv>:
      explicit operator bool() const noexcept
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fe f9f3 	bl	8001016 <_ZNKSt14_Function_base8_M_emptyEv>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f083 0301 	eor.w	r3, r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <_ZSt4swapIPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
 8002c5e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f7ff ffed 	bl	8002c40 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8002c66:	4603      	mov	r3, r0
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002c6c:	6838      	ldr	r0, [r7, #0]
 8002c6e:	f7ff ffe7 	bl	8002c40 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8002c72:	4603      	mov	r3, r0
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8002c7a:	f107 030c 	add.w	r3, r7, #12
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff ffde 	bl	8002c40 <_ZSt4moveIRPFvRKSt9_Any_dataOP17ADC_HandleTypeDefEEONSt16remove_referenceIT_E4typeEOSA_>
 8002c84:	4603      	mov	r3, r0
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	601a      	str	r2, [r3, #0]
    }
 8002c8c:	bf00      	nop
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E15_M_init_functorERSt9_Any_dataOS5_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8002c94:	b590      	push	{r4, r7, lr}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8002ca0:	68b8      	ldr	r0, [r7, #8]
 8002ca2:	f7ff ff6c 	bl	8002b7e <_ZSt4moveIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EONSt16remove_referenceIT_E4typeEOS7_>
 8002ca6:	4604      	mov	r4, r0
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f7ff f817 	bl	8001cdc <_ZNSt9_Any_data9_M_accessEv>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	2004      	movs	r0, #4
 8002cb4:	f7ff f806 	bl	8001cc4 <_ZnwjPv>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	6013      	str	r3, [r2, #0]
 8002cbe:	bf00      	nop
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd90      	pop	{r4, r7, pc}

08002cc6 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f857 	bl	8002d82 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 8002cd4:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 f85f 	bl	8002d9a <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	bf00      	nop
	}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3710      	adds	r7, #16
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <_ZSt10__invoke_rIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EENSt9enable_ifIXsrSt6__and_IJSt7is_voidIT_ESt14__is_invocableIT0_JDpT1_EEEE5valueES9_E4typeEOSC_DpOSD_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8002ce8:	b5b0      	push	{r4, r5, r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	6039      	str	r1, [r7, #0]
      std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f85c 	bl	8002db0 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8002cf8:	4604      	mov	r4, r0
 8002cfa:	6838      	ldr	r0, [r7, #0]
 8002cfc:	f7ff ff29 	bl	8002b52 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8002d00:	4603      	mov	r3, r0
 8002d02:	461a      	mov	r2, r3
 8002d04:	4621      	mov	r1, r4
 8002d06:	4628      	mov	r0, r5
 8002d08:	f000 f85d 	bl	8002dc6 <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>
    }
 8002d0c:	bf00      	nop
 8002d0e:	3708      	adds	r7, #8
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bdb0      	pop	{r4, r5, r7, pc}

08002d14 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7fe ffdd 	bl	8001cdc <_ZNSt9_Any_data9_M_accessEv>
 8002d22:	4603      	mov	r3, r0
 8002d24:	4618      	mov	r0, r3
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8002d2c:	b5b0      	push	{r4, r5, r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	4613      	mov	r3, r2
 8002d38:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d016      	beq.n	8002d6e <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x42>
 8002d40:	2b03      	cmp	r3, #3
 8002d42:	dc19      	bgt.n	8002d78 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d002      	beq.n	8002d4e <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x22>
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d00a      	beq.n	8002d62 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x36>
 8002d4c:	e014      	b.n	8002d78 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f7ff ffe0 	bl	8002d14 <_ZNSt9_Any_data9_M_accessIPZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
 8002d54:	4604      	mov	r4, r0
 8002d56:	68b8      	ldr	r0, [r7, #8]
 8002d58:	f7ff ffb5 	bl	8002cc6 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E14_M_get_pointerERKSt9_Any_data>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	6023      	str	r3, [r4, #0]
	      break;
 8002d60:	e00a      	b.n	8002d78 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8002d62:	462a      	mov	r2, r5
 8002d64:	68b9      	ldr	r1, [r7, #8]
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 f844 	bl	8002df4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>
	      break;
 8002d6c:	e004      	b.n	8002d78 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8002d6e:	4621      	mov	r1, r4
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 f858 	bl	8002e26 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8002d76:	bf00      	nop
	  return false;
 8002d78:	2300      	movs	r3, #0
	}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bdb0      	pop	{r4, r5, r7, pc}

08002d82 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>:
      _M_access() const
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fe ffb1 	bl	8001cf2 <_ZNKSt9_Any_data9_M_accessEv>
 8002d90:	4603      	mov	r3, r0
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <_ZSt11__addressofIKZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <_ZSt13__invoke_implIvRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_JS3_EET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8002dc6:	b590      	push	{r4, r7, lr}
 8002dc8:	b085      	sub	sp, #20
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	7338      	strb	r0, [r7, #12]
 8002dce:	60b9      	str	r1, [r7, #8]
 8002dd0:	607a      	str	r2, [r7, #4]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8002dd2:	68b8      	ldr	r0, [r7, #8]
 8002dd4:	f7ff ffec 	bl	8002db0 <_ZSt7forwardIRZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EOT_RNSt16remove_referenceIS6_E4typeE>
 8002dd8:	4604      	mov	r4, r0
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff feb9 	bl	8002b52 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 8002de0:	4603      	mov	r3, r0
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4619      	mov	r1, r3
 8002de6:	4620      	mov	r0, r4
 8002de8:	f7ff fb5b 	bl	80024a2 <_ZZN19AdcModuleControllerC4E9AdcModuleENKUlP17ADC_HandleTypeDefE_clES2_>
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd90      	pop	{r4, r7, pc}

08002df4 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E8_M_cloneERSt9_Any_dataRKS7_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8002df4:	b590      	push	{r4, r7, lr}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8002e00:	68b8      	ldr	r0, [r7, #8]
 8002e02:	f7ff ffbe 	bl	8002d82 <_ZNKSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERKT_v>
 8002e06:	4604      	mov	r4, r0
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f7fe ff67 	bl	8001cdc <_ZNSt9_Any_data9_M_accessEv>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4619      	mov	r1, r3
 8002e12:	2004      	movs	r0, #4
 8002e14:	f7fe ff56 	bl	8001cc4 <_ZnwjPv>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	6013      	str	r3, [r2, #0]
	}
 8002e1e:	bf00      	nop
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd90      	pop	{r4, r7, pc}

08002e26 <_ZNSt14_Function_base13_Base_managerIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f804 	bl	8002e3e <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>
	}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <_ZNSt9_Any_data9_M_accessIZN19AdcModuleControllerC4E9AdcModuleEUlP17ADC_HandleTypeDefE_EERT_v>:
      _M_access()
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7fe ff48 	bl	8001cdc <_ZNSt9_Any_data9_M_accessEv>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <microcontroller_info_entry>:

#ifdef __cplusplus
extern "C" {
#endif

void microcontroller_info_entry(void *argv) {
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
		frameCounter++;
		osDelay(pdMS_TO_TICKS(50));	//update every 50ms because some nodes (i.e. PDU) need high frequency voltage data
	}
	*/
	while(true){
		osDelay(osWaitForever);
 8002e5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e62:	f008 fb75 	bl	800b550 <osDelay>
 8002e66:	e7fa      	b.n	8002e5e <microcontroller_info_entry+0x8>

08002e68 <_ZN3can7signals14PDU_TX_Enabled3getERKyS3_>:
            constexpr static uint32_t ids[] = { 0x19A };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
                bool rawValue = value;
                intel |= (static_cast<uint64_t>(rawValue)) & 0x1ull;
            }
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x1ull));
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002e78:	f000 0201 	and.w	r2, r0, #1
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf14      	ite	ne
 8002e84:	2301      	movne	r3, #1
 8002e86:	2300      	moveq	r3, #0
 8002e88:	73fb      	strb	r3, [r7, #15]
                return value;
 8002e8a:	7bfb      	ldrb	r3, [r7, #15]
            }
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <_ZN3can7signals18PDU_TX_PEHWEnabled3getERKyS3_>:
            constexpr static uint32_t ids[] = { 0x19A };
            constexpr static inline void set(uint64_t& intel, uint64_t& motorola, uint8_t& dlc, bool value) noexcept {
                bool rawValue = value;
                intel |= (static_cast<uint64_t>(rawValue) << 2) & 0x4ull;
            }
            constexpr static inline bool get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
                bool value = static_cast<bool>((intel & 0x4ull) >> 2);
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ea8:	f000 0204 	and.w	r2, r0, #4
 8002eac:	2300      	movs	r3, #0
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf14      	ite	ne
 8002eb4:	2301      	movne	r3, #1
 8002eb6:	2300      	moveq	r3, #0
 8002eb8:	73fb      	strb	r3, [r7, #15]
                return value;
 8002eba:	7bfb      	ldrb	r3, [r7, #15]
            }
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <_ZN3can7signals17PDU_HPCh1_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.004f)));
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
 8002ed0:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed8:	b293      	uxth	r3, r2
 8002eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ede:	81fb      	strh	r3, [r7, #14]
                return value * (0.004f);
 8002ee0:	89fb      	ldrh	r3, [r7, #14]
 8002ee2:	ee07 3a90 	vmov	s15, r3
 8002ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002eea:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002f00 <_ZN3can7signals17PDU_HPCh1_Current3getERKyS3_+0x38>
 8002eee:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8002ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	3b83126f 	.word	0x3b83126f

08002f04 <_ZN3can7signals17PDU_HPCh2_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.004f)));
                intel |= (static_cast<uint64_t>(rawValue) << 16) & 0xFFF0000ull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFF0000ull) >> 16);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f14:	f04f 0200 	mov.w	r2, #0
 8002f18:	f04f 0300 	mov.w	r3, #0
 8002f1c:	0c02      	lsrs	r2, r0, #16
 8002f1e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002f22:	0c0b      	lsrs	r3, r1, #16
 8002f24:	b293      	uxth	r3, r2
 8002f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f2a:	81fb      	strh	r3, [r7, #14]
                return value * (0.004f);
 8002f2c:	89fb      	ldrh	r3, [r7, #14]
 8002f2e:	ee07 3a90 	vmov	s15, r3
 8002f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f36:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002f4c <_ZN3can7signals17PDU_HPCh2_Current3getERKyS3_+0x48>
 8002f3a:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8002f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f42:	3714      	adds	r7, #20
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	3b83126f 	.word	0x3b83126f

08002f50 <_ZN3can7signals17PDU_HPCh3_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.004f)));
                intel |= (static_cast<uint64_t>(rawValue) << 32) & 0xFFF00000000ull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFF00000000ull) >> 32);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f60:	f04f 0200 	mov.w	r2, #0
 8002f64:	f04f 0300 	mov.w	r3, #0
 8002f68:	000a      	movs	r2, r1
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	b293      	uxth	r3, r2
 8002f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f72:	81fb      	strh	r3, [r7, #14]
                return value * (0.004f);
 8002f74:	89fb      	ldrh	r3, [r7, #14]
 8002f76:	ee07 3a90 	vmov	s15, r3
 8002f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f7e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002f94 <_ZN3can7signals17PDU_HPCh3_Current3getERKyS3_+0x44>
 8002f82:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8002f86:	eeb0 0a67 	vmov.f32	s0, s15
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr
 8002f94:	3b83126f 	.word	0x3b83126f

08002f98 <_ZN3can7signals17PDU_HPCh4_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.004f)));
                intel |= (static_cast<uint64_t>(rawValue) << 48) & 0xFFF000000000000ull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002f98:	b480      	push	{r7}
 8002f9a:	b085      	sub	sp, #20
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFF000000000000ull) >> 48);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002fa8:	f04f 0200 	mov.w	r2, #0
 8002fac:	f04f 0300 	mov.w	r3, #0
 8002fb0:	0c0a      	lsrs	r2, r1, #16
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	b293      	uxth	r3, r2
 8002fb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fba:	81fb      	strh	r3, [r7, #14]
                return value * (0.004f);
 8002fbc:	89fb      	ldrh	r3, [r7, #14]
 8002fbe:	ee07 3a90 	vmov	s15, r3
 8002fc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fc6:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002fdc <_ZN3can7signals17PDU_HPCh4_Current3getERKyS3_+0x44>
 8002fca:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8002fce:	eeb0 0a67 	vmov.f32	s0, s15
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	3b83126f 	.word	0x3b83126f

08002fe0 <_ZN3can7signals17PDU_LPCh1_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff0:	b293      	uxth	r3, r2
 8002ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff6:	81fb      	strh	r3, [r7, #14]
                return value * (0.002f);
 8002ff8:	89fb      	ldrh	r3, [r7, #14]
 8002ffa:	ee07 3a90 	vmov	s15, r3
 8002ffe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003002:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003018 <_ZN3can7signals17PDU_LPCh1_Current3getERKyS3_+0x38>
 8003006:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800300a:	eeb0 0a67 	vmov.f32	s0, s15
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	3b03126f 	.word	0x3b03126f

0800301c <_ZN3can7signals17PDU_LPCh2_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xFFF000ull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFF000ull) >> 12);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	e9d3 0100 	ldrd	r0, r1, [r3]
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	0b02      	lsrs	r2, r0, #12
 8003036:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800303a:	0b0b      	lsrs	r3, r1, #12
 800303c:	b293      	uxth	r3, r2
 800303e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003042:	81fb      	strh	r3, [r7, #14]
                return value * (0.002f);
 8003044:	89fb      	ldrh	r3, [r7, #14]
 8003046:	ee07 3a90 	vmov	s15, r3
 800304a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800304e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003064 <_ZN3can7signals17PDU_LPCh2_Current3getERKyS3_+0x48>
 8003052:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8003056:	eeb0 0a67 	vmov.f32	s0, s15
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	3b03126f 	.word	0x3b03126f

08003068 <_ZN3can7signals17PDU_LPCh3_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
                intel |= (static_cast<uint64_t>(rawValue) << 24) & 0xFFF000000ull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFF000000ull) >> 24);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	0e02      	lsrs	r2, r0, #24
 8003082:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003086:	0e0b      	lsrs	r3, r1, #24
 8003088:	b293      	uxth	r3, r2
 800308a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308e:	81fb      	strh	r3, [r7, #14]
                return value * (0.002f);
 8003090:	89fb      	ldrh	r3, [r7, #14]
 8003092:	ee07 3a90 	vmov	s15, r3
 8003096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800309a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80030b0 <_ZN3can7signals17PDU_LPCh3_Current3getERKyS3_+0x48>
 800309e:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 80030a2:	eeb0 0a67 	vmov.f32	s0, s15
 80030a6:	3714      	adds	r7, #20
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	3b03126f 	.word	0x3b03126f

080030b4 <_ZN3can7signals17PDU_LPCh4_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
                intel |= (static_cast<uint64_t>(rawValue) << 36) & 0xFFF000000000ull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFF000000000ull) >> 36);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030c4:	f04f 0200 	mov.w	r2, #0
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	090a      	lsrs	r2, r1, #4
 80030ce:	2300      	movs	r3, #0
 80030d0:	b293      	uxth	r3, r2
 80030d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d6:	81fb      	strh	r3, [r7, #14]
                return value * (0.002f);
 80030d8:	89fb      	ldrh	r3, [r7, #14]
 80030da:	ee07 3a90 	vmov	s15, r3
 80030de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030e2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80030f8 <_ZN3can7signals17PDU_LPCh4_Current3getERKyS3_+0x44>
 80030e6:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 80030ea:	eeb0 0a67 	vmov.f32	s0, s15
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	3b03126f 	.word	0x3b03126f

080030fc <_ZN3can7signals17PDU_LPCh5_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
                intel |= (static_cast<uint64_t>(rawValue) << 48) & 0xFFF000000000000ull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80030fc:	b480      	push	{r7}
 80030fe:	b085      	sub	sp, #20
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFF000000000000ull) >> 48);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	e9d3 0100 	ldrd	r0, r1, [r3]
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	0c0a      	lsrs	r2, r1, #16
 8003116:	2300      	movs	r3, #0
 8003118:	b293      	uxth	r3, r2
 800311a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311e:	81fb      	strh	r3, [r7, #14]
                return value * (0.002f);
 8003120:	89fb      	ldrh	r3, [r7, #14]
 8003122:	ee07 3a90 	vmov	s15, r3
 8003126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800312a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003140 <_ZN3can7signals17PDU_LPCh5_Current3getERKyS3_+0x44>
 800312e:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8003132:	eeb0 0a67 	vmov.f32	s0, s15
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	3b03126f 	.word	0x3b03126f

08003144 <_ZN3can7signals18PDU_LPCh10_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
                intel |= (static_cast<uint64_t>(rawValue)) & 0xFFFull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003144:	b480      	push	{r7}
 8003146:	b085      	sub	sp, #20
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFFull));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003154:	b293      	uxth	r3, r2
 8003156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800315a:	81fb      	strh	r3, [r7, #14]
                return value * (0.002f);
 800315c:	89fb      	ldrh	r3, [r7, #14]
 800315e:	ee07 3a90 	vmov	s15, r3
 8003162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003166:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800317c <_ZN3can7signals18PDU_LPCh10_Current3getERKyS3_+0x38>
 800316a:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800316e:	eeb0 0a67 	vmov.f32	s0, s15
 8003172:	3714      	adds	r7, #20
 8003174:	46bd      	mov	sp, r7
 8003176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317a:	4770      	bx	lr
 800317c:	3b03126f 	.word	0x3b03126f

08003180 <_ZN3can7signals17PDU_LPCh6_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
                intel |= (static_cast<uint64_t>(rawValue) << 12) & 0xFFF000ull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFF000ull) >> 12);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003190:	f04f 0200 	mov.w	r2, #0
 8003194:	f04f 0300 	mov.w	r3, #0
 8003198:	0b02      	lsrs	r2, r0, #12
 800319a:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 800319e:	0b0b      	lsrs	r3, r1, #12
 80031a0:	b293      	uxth	r3, r2
 80031a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a6:	81fb      	strh	r3, [r7, #14]
                return value * (0.002f);
 80031a8:	89fb      	ldrh	r3, [r7, #14]
 80031aa:	ee07 3a90 	vmov	s15, r3
 80031ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031b2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80031c8 <_ZN3can7signals17PDU_LPCh6_Current3getERKyS3_+0x48>
 80031b6:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 80031ba:	eeb0 0a67 	vmov.f32	s0, s15
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr
 80031c8:	3b03126f 	.word	0x3b03126f

080031cc <_ZN3can7signals17PDU_LPCh7_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
                intel |= (static_cast<uint64_t>(rawValue) << 24) & 0xFFF000000ull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFF000000ull) >> 24);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031dc:	f04f 0200 	mov.w	r2, #0
 80031e0:	f04f 0300 	mov.w	r3, #0
 80031e4:	0e02      	lsrs	r2, r0, #24
 80031e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80031ea:	0e0b      	lsrs	r3, r1, #24
 80031ec:	b293      	uxth	r3, r2
 80031ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f2:	81fb      	strh	r3, [r7, #14]
                return value * (0.002f);
 80031f4:	89fb      	ldrh	r3, [r7, #14]
 80031f6:	ee07 3a90 	vmov	s15, r3
 80031fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031fe:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003214 <_ZN3can7signals17PDU_LPCh7_Current3getERKyS3_+0x48>
 8003202:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8003206:	eeb0 0a67 	vmov.f32	s0, s15
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr
 8003214:	3b03126f 	.word	0x3b03126f

08003218 <_ZN3can7signals17PDU_LPCh8_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
                intel |= (static_cast<uint64_t>(rawValue) << 36) & 0xFFF000000000ull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFF000000000ull) >> 36);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003228:	f04f 0200 	mov.w	r2, #0
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	090a      	lsrs	r2, r1, #4
 8003232:	2300      	movs	r3, #0
 8003234:	b293      	uxth	r3, r2
 8003236:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323a:	81fb      	strh	r3, [r7, #14]
                return value * (0.002f);
 800323c:	89fb      	ldrh	r3, [r7, #14]
 800323e:	ee07 3a90 	vmov	s15, r3
 8003242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003246:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800325c <_ZN3can7signals17PDU_LPCh8_Current3getERKyS3_+0x44>
 800324a:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 800324e:	eeb0 0a67 	vmov.f32	s0, s15
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	3b03126f 	.word	0x3b03126f

08003260 <_ZN3can7signals17PDU_LPCh9_Current3getERKyS3_>:
                    value = min;
                }
                uint16_t rawValue = static_cast<uint16_t>(STD_ROUND((value) / (0.002f)));
                intel |= (static_cast<uint64_t>(rawValue) << 48) & 0xFFF000000000000ull;
            }
            constexpr static inline float get(const uint64_t& intel, const uint64_t& motorola) noexcept {
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
                uint16_t value = static_cast<uint16_t>((intel & 0xFFF000000000000ull) >> 48);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	f04f 0300 	mov.w	r3, #0
 8003278:	0c0a      	lsrs	r2, r1, #16
 800327a:	2300      	movs	r3, #0
 800327c:	b293      	uxth	r3, r2
 800327e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003282:	81fb      	strh	r3, [r7, #14]
                return value * (0.002f);
 8003284:	89fb      	ldrh	r3, [r7, #14]
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800328e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80032a4 <_ZN3can7signals17PDU_LPCh9_Current3getERKyS3_+0x44>
 8003292:	ee67 7a87 	vmul.f32	s15, s15, s14
            }
 8003296:	eeb0 0a67 	vmov.f32	s0, s15
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	3b03126f 	.word	0x3b03126f

080032a8 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	2300      	movs	r3, #0
 80032bc:	2201      	movs	r2, #1
 80032be:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 80032c2:	f7fe f9d0 	bl	8001666 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 80032ca:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 80032ce:	d000      	beq.n	80032d2 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
                    while(1);
 80032d0:	e7fe      	b.n	80032d0 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh+0x28>
        };
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
 80032e6:	6839      	ldr	r1, [r7, #0]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	331c      	adds	r3, #28
 80032ec:	461a      	mov	r2, r3
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff ffda 	bl	80032a8 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK19CAN_RxHeaderTypeDefPKh>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <_ZN3pdu15receiveTxStatusER9RxMessage>:
		}
	}
}


void receiveTxStatus(RxMessage& raw) {
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
	can::Message<can::messages::PDU_TX_Status> msg {raw};
 8003308:	f107 0308 	add.w	r3, r7, #8
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4618      	mov	r0, r3
 8003310:	f7ff ffe4 	bl	80032dc <_ZN3can7MessageINS_8messages13PDU_TX_StatusEEC1ERK9RxMessage>
	s_confirmed_status.m_enabled = msg.get<can::signals::PDU_TX_Enabled>() == 1;
 8003314:	f107 0308 	add.w	r3, r7, #8
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fa63 	bl	80037e4 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals14PDU_TX_EnabledEEENT_8dataTypeEv>
 800331e:	4603      	mov	r3, r0
 8003320:	2b01      	cmp	r3, #1
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2da      	uxtb	r2, r3
 800332a:	4b07      	ldr	r3, [pc, #28]	; (8003348 <_ZN3pdu15receiveTxStatusER9RxMessage+0x48>)
 800332c:	701a      	strb	r2, [r3, #0]
	s_confirmed_status.m_pehwEnabled = msg.get<can::signals::PDU_TX_PEHWEnabled>();
 800332e:	f107 0308 	add.w	r3, r7, #8
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fa68 	bl	8003808 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals18PDU_TX_PEHWEnabledEEENT_8dataTypeEv>
 8003338:	4603      	mov	r3, r0
 800333a:	461a      	mov	r2, r3
 800333c:	4b02      	ldr	r3, [pc, #8]	; (8003348 <_ZN3pdu15receiveTxStatusER9RxMessage+0x48>)
 800333e:	705a      	strb	r2, [r3, #1]
}
 8003340:	bf00      	nop
 8003342:	3720      	adds	r7, #32
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20000c14 	.word	0x20000c14

0800334c <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af02      	add	r7, sp, #8
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	2300      	movs	r3, #0
 8003360:	2208      	movs	r2, #8
 8003362:	f240 211a 	movw	r1, #538	; 0x21a
 8003366:	f7fe f97e 	bl	8001666 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800336e:	f240 221a 	movw	r2, #538	; 0x21a
 8003372:	4293      	cmp	r3, r2
 8003374:	d000      	beq.n	8003378 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8003376:	e7fe      	b.n	8003376 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8003382:	b580      	push	{r7, lr}
 8003384:	b082      	sub	sp, #8
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
 800338a:	6039      	str	r1, [r7, #0]
 800338c:	6839      	ldr	r1, [r7, #0]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	331c      	adds	r3, #28
 8003392:	461a      	mov	r2, r3
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff ffd9 	bl	800334c <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEEC1ERK19CAN_RxHeaderTypeDefPKh>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4618      	mov	r0, r3
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <_ZN3pdu18receiveHpDutycycleER9RxMessage>:

void receiveHpDutycycle(RxMessage& raw){
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b088      	sub	sp, #32
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
	can::Message<can::messages::PDU_TX_HP_Current> msg {raw};
 80033ac:	f107 0308 	add.w	r3, r7, #8
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7ff ffe5 	bl	8003382 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEEC1ERK9RxMessage>
	s_confirmed_hpChannelConfig.m_status[0] = msg.get<can::signals::PDU_HPCh1_Current>() != 0;
 80033b8:	f107 0308 	add.w	r3, r7, #8
 80033bc:	4618      	mov	r0, r3
 80033be:	f000 fa35 	bl	800382c <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3getINS_7signals17PDU_HPCh1_CurrentEEENT_8dataTypeEv>
 80033c2:	eef0 7a40 	vmov.f32	s15, s0
 80033c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80033ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ce:	bf14      	ite	ne
 80033d0:	2301      	movne	r3, #1
 80033d2:	2300      	moveq	r3, #0
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	4b1c      	ldr	r3, [pc, #112]	; (8003448 <_ZN3pdu18receiveHpDutycycleER9RxMessage+0xa4>)
 80033d8:	701a      	strb	r2, [r3, #0]
	s_confirmed_hpChannelConfig.m_status[1] = msg.get<can::signals::PDU_HPCh2_Current>() != 0;
 80033da:	f107 0308 	add.w	r3, r7, #8
 80033de:	4618      	mov	r0, r3
 80033e0:	f000 fa38 	bl	8003854 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3getINS_7signals17PDU_HPCh2_CurrentEEENT_8dataTypeEv>
 80033e4:	eef0 7a40 	vmov.f32	s15, s0
 80033e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80033ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f0:	bf14      	ite	ne
 80033f2:	2301      	movne	r3, #1
 80033f4:	2300      	moveq	r3, #0
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	4b13      	ldr	r3, [pc, #76]	; (8003448 <_ZN3pdu18receiveHpDutycycleER9RxMessage+0xa4>)
 80033fa:	705a      	strb	r2, [r3, #1]
	s_confirmed_hpChannelConfig.m_status[2] = msg.get<can::signals::PDU_HPCh3_Current>() != 0;
 80033fc:	f107 0308 	add.w	r3, r7, #8
 8003400:	4618      	mov	r0, r3
 8003402:	f000 fa3b 	bl	800387c <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3getINS_7signals17PDU_HPCh3_CurrentEEENT_8dataTypeEv>
 8003406:	eef0 7a40 	vmov.f32	s15, s0
 800340a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800340e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003412:	bf14      	ite	ne
 8003414:	2301      	movne	r3, #1
 8003416:	2300      	moveq	r3, #0
 8003418:	b2da      	uxtb	r2, r3
 800341a:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <_ZN3pdu18receiveHpDutycycleER9RxMessage+0xa4>)
 800341c:	709a      	strb	r2, [r3, #2]
	s_confirmed_hpChannelConfig.m_status[3] = msg.get<can::signals::PDU_HPCh4_Current>() != 0;
 800341e:	f107 0308 	add.w	r3, r7, #8
 8003422:	4618      	mov	r0, r3
 8003424:	f000 fa3e 	bl	80038a4 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3getINS_7signals17PDU_HPCh4_CurrentEEENT_8dataTypeEv>
 8003428:	eef0 7a40 	vmov.f32	s15, s0
 800342c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003434:	bf14      	ite	ne
 8003436:	2301      	movne	r3, #1
 8003438:	2300      	moveq	r3, #0
 800343a:	b2da      	uxtb	r2, r3
 800343c:	4b02      	ldr	r3, [pc, #8]	; (8003448 <_ZN3pdu18receiveHpDutycycleER9RxMessage+0xa4>)
 800343e:	70da      	strb	r2, [r3, #3]
}
 8003440:	bf00      	nop
 8003442:	3720      	adds	r7, #32
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}
 8003448:	20000c24 	.word	0x20000c24

0800344c <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af02      	add	r7, sp, #8
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	9300      	str	r3, [sp, #0]
 800345e:	2300      	movs	r3, #0
 8003460:	2208      	movs	r2, #8
 8003462:	f240 511a 	movw	r1, #1306	; 0x51a
 8003466:	f7fe f8fe 	bl	8001666 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 800346e:	f240 521a 	movw	r2, #1306	; 0x51a
 8003472:	4293      	cmp	r3, r2
 8003474:	d000      	beq.n	8003478 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 8003476:	e7fe      	b.n	8003476 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	6039      	str	r1, [r7, #0]
 800348c:	6839      	ldr	r1, [r7, #0]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	331c      	adds	r3, #28
 8003492:	461a      	mov	r2, r3
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f7ff ffd9 	bl	800344c <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EEC1ERK19CAN_RxHeaderTypeDefPKh>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4618      	mov	r0, r3
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	0000      	movs	r0, r0
	...

080034a8 <_ZN3pdu22receiveLp1to5DutycycleER9RxMessage>:

void receiveLp1to5Dutycycle(RxMessage& raw){
 80034a8:	b590      	push	{r4, r7, lr}
 80034aa:	b089      	sub	sp, #36	; 0x24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
	can::Message<can::messages::PDU_TX_LP_Current1> msg {raw};
 80034b0:	f107 0308 	add.w	r3, r7, #8
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff ffe3 	bl	8003482 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EEC1ERK9RxMessage>
	s_confirmed_lpChannelConfig.m_status[0] = msg.get<can::signals::PDU_LPCh1_Current>() > 0.1;
 80034bc:	f107 0308 	add.w	r3, r7, #8
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 fa03 	bl	80038cc <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3getINS_7signals17PDU_LPCh1_CurrentEEENT_8dataTypeEv>
 80034c6:	ee10 3a10 	vmov	r3, s0
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fd f83c 	bl	8000548 <__aeabi_f2d>
 80034d0:	2301      	movs	r3, #1
 80034d2:	461c      	mov	r4, r3
 80034d4:	a33a      	add	r3, pc, #232	; (adr r3, 80035c0 <_ZN3pdu22receiveLp1to5DutycycleER9RxMessage+0x118>)
 80034d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034da:	f7fd fb1d 	bl	8000b18 <__aeabi_dcmpgt>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <_ZN3pdu22receiveLp1to5DutycycleER9RxMessage+0x40>
 80034e4:	2300      	movs	r3, #0
 80034e6:	461c      	mov	r4, r3
 80034e8:	b2e2      	uxtb	r2, r4
 80034ea:	4b37      	ldr	r3, [pc, #220]	; (80035c8 <_ZN3pdu22receiveLp1to5DutycycleER9RxMessage+0x120>)
 80034ec:	701a      	strb	r2, [r3, #0]
	s_confirmed_lpChannelConfig.m_status[1] = msg.get<can::signals::PDU_LPCh2_Current>() > 0.1;
 80034ee:	f107 0308 	add.w	r3, r7, #8
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 f9fe 	bl	80038f4 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3getINS_7signals17PDU_LPCh2_CurrentEEENT_8dataTypeEv>
 80034f8:	ee10 3a10 	vmov	r3, s0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fd f823 	bl	8000548 <__aeabi_f2d>
 8003502:	2301      	movs	r3, #1
 8003504:	461c      	mov	r4, r3
 8003506:	a32e      	add	r3, pc, #184	; (adr r3, 80035c0 <_ZN3pdu22receiveLp1to5DutycycleER9RxMessage+0x118>)
 8003508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350c:	f7fd fb04 	bl	8000b18 <__aeabi_dcmpgt>
 8003510:	4603      	mov	r3, r0
 8003512:	2b00      	cmp	r3, #0
 8003514:	d101      	bne.n	800351a <_ZN3pdu22receiveLp1to5DutycycleER9RxMessage+0x72>
 8003516:	2300      	movs	r3, #0
 8003518:	461c      	mov	r4, r3
 800351a:	b2e2      	uxtb	r2, r4
 800351c:	4b2a      	ldr	r3, [pc, #168]	; (80035c8 <_ZN3pdu22receiveLp1to5DutycycleER9RxMessage+0x120>)
 800351e:	705a      	strb	r2, [r3, #1]
	s_confirmed_lpChannelConfig.m_status[2] = msg.get<can::signals::PDU_LPCh3_Current>() > 0.1;
 8003520:	f107 0308 	add.w	r3, r7, #8
 8003524:	4618      	mov	r0, r3
 8003526:	f000 f9f9 	bl	800391c <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3getINS_7signals17PDU_LPCh3_CurrentEEENT_8dataTypeEv>
 800352a:	ee10 3a10 	vmov	r3, s0
 800352e:	4618      	mov	r0, r3
 8003530:	f7fd f80a 	bl	8000548 <__aeabi_f2d>
 8003534:	2301      	movs	r3, #1
 8003536:	461c      	mov	r4, r3
 8003538:	a321      	add	r3, pc, #132	; (adr r3, 80035c0 <_ZN3pdu22receiveLp1to5DutycycleER9RxMessage+0x118>)
 800353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353e:	f7fd faeb 	bl	8000b18 <__aeabi_dcmpgt>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <_ZN3pdu22receiveLp1to5DutycycleER9RxMessage+0xa4>
 8003548:	2300      	movs	r3, #0
 800354a:	461c      	mov	r4, r3
 800354c:	b2e2      	uxtb	r2, r4
 800354e:	4b1e      	ldr	r3, [pc, #120]	; (80035c8 <_ZN3pdu22receiveLp1to5DutycycleER9RxMessage+0x120>)
 8003550:	709a      	strb	r2, [r3, #2]
	s_confirmed_lpChannelConfig.m_status[3] = msg.get<can::signals::PDU_LPCh4_Current>() > 0.1;
 8003552:	f107 0308 	add.w	r3, r7, #8
 8003556:	4618      	mov	r0, r3
 8003558:	f000 f9f4 	bl	8003944 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3getINS_7signals17PDU_LPCh4_CurrentEEENT_8dataTypeEv>
 800355c:	ee10 3a10 	vmov	r3, s0
 8003560:	4618      	mov	r0, r3
 8003562:	f7fc fff1 	bl	8000548 <__aeabi_f2d>
 8003566:	2301      	movs	r3, #1
 8003568:	461c      	mov	r4, r3
 800356a:	a315      	add	r3, pc, #84	; (adr r3, 80035c0 <_ZN3pdu22receiveLp1to5DutycycleER9RxMessage+0x118>)
 800356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003570:	f7fd fad2 	bl	8000b18 <__aeabi_dcmpgt>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <_ZN3pdu22receiveLp1to5DutycycleER9RxMessage+0xd6>
 800357a:	2300      	movs	r3, #0
 800357c:	461c      	mov	r4, r3
 800357e:	b2e2      	uxtb	r2, r4
 8003580:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <_ZN3pdu22receiveLp1to5DutycycleER9RxMessage+0x120>)
 8003582:	70da      	strb	r2, [r3, #3]
	s_confirmed_lpChannelConfig.m_status[4] = msg.get<can::signals::PDU_LPCh5_Current>() > 0.1;
 8003584:	f107 0308 	add.w	r3, r7, #8
 8003588:	4618      	mov	r0, r3
 800358a:	f000 f9ef 	bl	800396c <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3getINS_7signals17PDU_LPCh5_CurrentEEENT_8dataTypeEv>
 800358e:	ee10 3a10 	vmov	r3, s0
 8003592:	4618      	mov	r0, r3
 8003594:	f7fc ffd8 	bl	8000548 <__aeabi_f2d>
 8003598:	2301      	movs	r3, #1
 800359a:	461c      	mov	r4, r3
 800359c:	a308      	add	r3, pc, #32	; (adr r3, 80035c0 <_ZN3pdu22receiveLp1to5DutycycleER9RxMessage+0x118>)
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f7fd fab9 	bl	8000b18 <__aeabi_dcmpgt>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <_ZN3pdu22receiveLp1to5DutycycleER9RxMessage+0x108>
 80035ac:	2300      	movs	r3, #0
 80035ae:	461c      	mov	r4, r3
 80035b0:	b2e2      	uxtb	r2, r4
 80035b2:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <_ZN3pdu22receiveLp1to5DutycycleER9RxMessage+0x120>)
 80035b4:	711a      	strb	r2, [r3, #4]
}
 80035b6:	bf00      	nop
 80035b8:	3724      	adds	r7, #36	; 0x24
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd90      	pop	{r4, r7, pc}
 80035be:	bf00      	nop
 80035c0:	9999999a 	.word	0x9999999a
 80035c4:	3fb99999 	.word	0x3fb99999
 80035c8:	20000c18 	.word	0x20000c18

080035cc <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EEC1ERK19CAN_RxHeaderTypeDefPKh>:
        constexpr Message(const CAN_RxHeaderTypeDef& rxHeader, const uint8_t rxBuf[8]) noexcept : MessageBase{MESSAGE_T::id, MESSAGE_T::dlc, MESSAGE_T::isExtendedId, rxBuf} {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	9300      	str	r3, [sp, #0]
 80035de:	2300      	movs	r3, #0
 80035e0:	2208      	movs	r2, #8
 80035e2:	f240 515a 	movw	r1, #1370	; 0x55a
 80035e6:	f7fe f83e 	bl	8001666 <_ZN3can11MessageBaseC1EmhbPKh>
                if (rxHeader.StdId != MESSAGE_T::id) {
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	681b      	ldr	r3, [r3, #0]
            if(MESSAGE_T::isExtendedId) {
 80035ee:	f240 525a 	movw	r2, #1370	; 0x55a
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d000      	beq.n	80035f8 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EEC1ERK19CAN_RxHeaderTypeDefPKh+0x2c>
                    while(1);
 80035f6:	e7fe      	b.n	80035f6 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EEC1ERK19CAN_RxHeaderTypeDefPKh+0x2a>
        };
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	4618      	mov	r0, r3
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EEC1ERK9RxMessage>:
        constexpr Message(const RxMessage& rxMsg) noexcept : Message{rxMsg.rxHeader, rxMsg.rxBuf} {}
 8003602:	b580      	push	{r7, lr}
 8003604:	b082      	sub	sp, #8
 8003606:	af00      	add	r7, sp, #0
 8003608:	6078      	str	r0, [r7, #4]
 800360a:	6039      	str	r1, [r7, #0]
 800360c:	6839      	ldr	r1, [r7, #0]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	331c      	adds	r3, #28
 8003612:	461a      	mov	r2, r3
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff ffd9 	bl	80035cc <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EEC1ERK19CAN_RxHeaderTypeDefPKh>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4618      	mov	r0, r3
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}
 8003624:	0000      	movs	r0, r0
	...

08003628 <_ZN3pdu23receiveLp6to10DutycycleER9RxMessage>:

void receiveLp6to10Dutycycle(RxMessage& raw){
 8003628:	b590      	push	{r4, r7, lr}
 800362a:	b089      	sub	sp, #36	; 0x24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
	can::Message<can::messages::PDU_TX_LP_Current2> msg {raw};
 8003630:	f107 0308 	add.w	r3, r7, #8
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff ffe3 	bl	8003602 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EEC1ERK9RxMessage>
	s_confirmed_lpChannelConfig.m_status[5] = msg.get<can::signals::PDU_LPCh6_Current>() > 0.1;
 800363c:	f107 0308 	add.w	r3, r7, #8
 8003640:	4618      	mov	r0, r3
 8003642:	f000 f9a7 	bl	8003994 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3getINS_7signals17PDU_LPCh6_CurrentEEENT_8dataTypeEv>
 8003646:	ee10 3a10 	vmov	r3, s0
 800364a:	4618      	mov	r0, r3
 800364c:	f7fc ff7c 	bl	8000548 <__aeabi_f2d>
 8003650:	2301      	movs	r3, #1
 8003652:	461c      	mov	r4, r3
 8003654:	a33a      	add	r3, pc, #232	; (adr r3, 8003740 <_ZN3pdu23receiveLp6to10DutycycleER9RxMessage+0x118>)
 8003656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365a:	f7fd fa5d 	bl	8000b18 <__aeabi_dcmpgt>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <_ZN3pdu23receiveLp6to10DutycycleER9RxMessage+0x40>
 8003664:	2300      	movs	r3, #0
 8003666:	461c      	mov	r4, r3
 8003668:	b2e2      	uxtb	r2, r4
 800366a:	4b37      	ldr	r3, [pc, #220]	; (8003748 <_ZN3pdu23receiveLp6to10DutycycleER9RxMessage+0x120>)
 800366c:	715a      	strb	r2, [r3, #5]
	s_confirmed_lpChannelConfig.m_status[6] = msg.get<can::signals::PDU_LPCh7_Current>() > 0.1;
 800366e:	f107 0308 	add.w	r3, r7, #8
 8003672:	4618      	mov	r0, r3
 8003674:	f000 f9a2 	bl	80039bc <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3getINS_7signals17PDU_LPCh7_CurrentEEENT_8dataTypeEv>
 8003678:	ee10 3a10 	vmov	r3, s0
 800367c:	4618      	mov	r0, r3
 800367e:	f7fc ff63 	bl	8000548 <__aeabi_f2d>
 8003682:	2301      	movs	r3, #1
 8003684:	461c      	mov	r4, r3
 8003686:	a32e      	add	r3, pc, #184	; (adr r3, 8003740 <_ZN3pdu23receiveLp6to10DutycycleER9RxMessage+0x118>)
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	f7fd fa44 	bl	8000b18 <__aeabi_dcmpgt>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <_ZN3pdu23receiveLp6to10DutycycleER9RxMessage+0x72>
 8003696:	2300      	movs	r3, #0
 8003698:	461c      	mov	r4, r3
 800369a:	b2e2      	uxtb	r2, r4
 800369c:	4b2a      	ldr	r3, [pc, #168]	; (8003748 <_ZN3pdu23receiveLp6to10DutycycleER9RxMessage+0x120>)
 800369e:	719a      	strb	r2, [r3, #6]
	s_confirmed_lpChannelConfig.m_status[7] = msg.get<can::signals::PDU_LPCh8_Current>() > 0.1;
 80036a0:	f107 0308 	add.w	r3, r7, #8
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 f99d 	bl	80039e4 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3getINS_7signals17PDU_LPCh8_CurrentEEENT_8dataTypeEv>
 80036aa:	ee10 3a10 	vmov	r3, s0
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fc ff4a 	bl	8000548 <__aeabi_f2d>
 80036b4:	2301      	movs	r3, #1
 80036b6:	461c      	mov	r4, r3
 80036b8:	a321      	add	r3, pc, #132	; (adr r3, 8003740 <_ZN3pdu23receiveLp6to10DutycycleER9RxMessage+0x118>)
 80036ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036be:	f7fd fa2b 	bl	8000b18 <__aeabi_dcmpgt>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d101      	bne.n	80036cc <_ZN3pdu23receiveLp6to10DutycycleER9RxMessage+0xa4>
 80036c8:	2300      	movs	r3, #0
 80036ca:	461c      	mov	r4, r3
 80036cc:	b2e2      	uxtb	r2, r4
 80036ce:	4b1e      	ldr	r3, [pc, #120]	; (8003748 <_ZN3pdu23receiveLp6to10DutycycleER9RxMessage+0x120>)
 80036d0:	71da      	strb	r2, [r3, #7]
	s_confirmed_lpChannelConfig.m_status[8] = msg.get<can::signals::PDU_LPCh9_Current>() > 0.1;
 80036d2:	f107 0308 	add.w	r3, r7, #8
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f998 	bl	8003a0c <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3getINS_7signals17PDU_LPCh9_CurrentEEENT_8dataTypeEv>
 80036dc:	ee10 3a10 	vmov	r3, s0
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fc ff31 	bl	8000548 <__aeabi_f2d>
 80036e6:	2301      	movs	r3, #1
 80036e8:	461c      	mov	r4, r3
 80036ea:	a315      	add	r3, pc, #84	; (adr r3, 8003740 <_ZN3pdu23receiveLp6to10DutycycleER9RxMessage+0x118>)
 80036ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f0:	f7fd fa12 	bl	8000b18 <__aeabi_dcmpgt>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <_ZN3pdu23receiveLp6to10DutycycleER9RxMessage+0xd6>
 80036fa:	2300      	movs	r3, #0
 80036fc:	461c      	mov	r4, r3
 80036fe:	b2e2      	uxtb	r2, r4
 8003700:	4b11      	ldr	r3, [pc, #68]	; (8003748 <_ZN3pdu23receiveLp6to10DutycycleER9RxMessage+0x120>)
 8003702:	721a      	strb	r2, [r3, #8]
	s_confirmed_lpChannelConfig.m_status[9] = msg.get<can::signals::PDU_LPCh10_Current>() > 0.1;
 8003704:	f107 0308 	add.w	r3, r7, #8
 8003708:	4618      	mov	r0, r3
 800370a:	f000 f993 	bl	8003a34 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3getINS_7signals18PDU_LPCh10_CurrentEEENT_8dataTypeEv>
 800370e:	ee10 3a10 	vmov	r3, s0
 8003712:	4618      	mov	r0, r3
 8003714:	f7fc ff18 	bl	8000548 <__aeabi_f2d>
 8003718:	2301      	movs	r3, #1
 800371a:	461c      	mov	r4, r3
 800371c:	a308      	add	r3, pc, #32	; (adr r3, 8003740 <_ZN3pdu23receiveLp6to10DutycycleER9RxMessage+0x118>)
 800371e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003722:	f7fd f9f9 	bl	8000b18 <__aeabi_dcmpgt>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <_ZN3pdu23receiveLp6to10DutycycleER9RxMessage+0x108>
 800372c:	2300      	movs	r3, #0
 800372e:	461c      	mov	r4, r3
 8003730:	b2e2      	uxtb	r2, r4
 8003732:	4b05      	ldr	r3, [pc, #20]	; (8003748 <_ZN3pdu23receiveLp6to10DutycycleER9RxMessage+0x120>)
 8003734:	725a      	strb	r2, [r3, #9]

}
 8003736:	bf00      	nop
 8003738:	3724      	adds	r7, #36	; 0x24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd90      	pop	{r4, r7, pc}
 800373e:	bf00      	nop
 8003740:	9999999a 	.word	0x9999999a
 8003744:	3fb99999 	.word	0x3fb99999
 8003748:	20000c18 	.word	0x20000c18

0800374c <_ZN3pdu4initEv>:

void init(){
 800374c:	b580      	push	{r7, lr}
 800374e:	b090      	sub	sp, #64	; 0x40
 8003750:	af00      	add	r7, sp, #0
	can::registerMessageReceiver<can::messages::PDU_TX_Status>(receiveTxStatus);
 8003752:	463b      	mov	r3, r7
 8003754:	491f      	ldr	r1, [pc, #124]	; (80037d4 <_ZN3pdu4initEv+0x88>)
 8003756:	4618      	mov	r0, r3
 8003758:	f7fe fc04 	bl	8001f64 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_>
 800375c:	463b      	mov	r3, r7
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f97c 	bl	8003a5c <_ZN3can23registerMessageReceiverINS_8messages13PDU_TX_StatusEEEjSt8functionIFvR9RxMessageEE>
 8003764:	463b      	mov	r3, r7
 8003766:	4618      	mov	r0, r3
 8003768:	f7fd fc66 	bl	8001038 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	can::registerMessageReceiver<can::messages::PDU_TX_HP_Current>(receiveHpDutycycle);
 800376c:	f107 0310 	add.w	r3, r7, #16
 8003770:	4919      	ldr	r1, [pc, #100]	; (80037d8 <_ZN3pdu4initEv+0x8c>)
 8003772:	4618      	mov	r0, r3
 8003774:	f7fe fbf6 	bl	8001f64 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_>
 8003778:	f107 0310 	add.w	r3, r7, #16
 800377c:	4618      	mov	r0, r3
 800377e:	f000 f98b 	bl	8003a98 <_ZN3can23registerMessageReceiverINS_8messages17PDU_TX_HP_CurrentEEEjSt8functionIFvR9RxMessageEE>
 8003782:	f107 0310 	add.w	r3, r7, #16
 8003786:	4618      	mov	r0, r3
 8003788:	f7fd fc56 	bl	8001038 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	can::registerMessageReceiver<can::messages::PDU_TX_LP_Current1>(receiveLp1to5Dutycycle);
 800378c:	f107 0320 	add.w	r3, r7, #32
 8003790:	4912      	ldr	r1, [pc, #72]	; (80037dc <_ZN3pdu4initEv+0x90>)
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe fbe6 	bl	8001f64 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_>
 8003798:	f107 0320 	add.w	r3, r7, #32
 800379c:	4618      	mov	r0, r3
 800379e:	f000 f999 	bl	8003ad4 <_ZN3can23registerMessageReceiverINS_8messages18PDU_TX_LP_Current1EEEjSt8functionIFvR9RxMessageEE>
 80037a2:	f107 0320 	add.w	r3, r7, #32
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fd fc46 	bl	8001038 <_ZNSt8functionIFvR9RxMessageEED1Ev>
	can::registerMessageReceiver<can::messages::PDU_TX_LP_Current2>(receiveLp6to10Dutycycle);
 80037ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037b0:	490b      	ldr	r1, [pc, #44]	; (80037e0 <_ZN3pdu4initEv+0x94>)
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fe fbd6 	bl	8001f64 <_ZNSt8functionIFvR9RxMessageEEC1IPS2_vvEET_>
 80037b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 f9a7 	bl	8003b10 <_ZN3can23registerMessageReceiverINS_8messages18PDU_TX_LP_Current2EEEjSt8functionIFvR9RxMessageEE>
 80037c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fd fc36 	bl	8001038 <_ZNSt8functionIFvR9RxMessageEED1Ev>

}
 80037cc:	bf00      	nop
 80037ce:	3740      	adds	r7, #64	; 0x40
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	08003301 	.word	0x08003301
 80037d8:	080033a5 	.word	0x080033a5
 80037dc:	080034a9 	.word	0x080034a9
 80037e0:	08003629 	.word	0x08003629

080037e4 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals14PDU_TX_EnabledEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f103 0208 	add.w	r2, r3, #8
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3310      	adds	r3, #16
 80037f6:	4619      	mov	r1, r3
 80037f8:	4610      	mov	r0, r2
 80037fa:	f7ff fb35 	bl	8002e68 <_ZN3can7signals14PDU_TX_Enabled3getERKyS3_>
 80037fe:	4603      	mov	r3, r0
        }
 8003800:	4618      	mov	r0, r3
 8003802:	3708      	adds	r7, #8
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <_ZN3can7MessageINS_8messages13PDU_TX_StatusEE3getINS_7signals18PDU_TX_PEHWEnabledEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f103 0208 	add.w	r2, r3, #8
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	3310      	adds	r3, #16
 800381a:	4619      	mov	r1, r3
 800381c:	4610      	mov	r0, r2
 800381e:	f7ff fb3b 	bl	8002e98 <_ZN3can7signals18PDU_TX_PEHWEnabled3getERKyS3_>
 8003822:	4603      	mov	r3, r0
        }
 8003824:	4618      	mov	r0, r3
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3getINS_7signals17PDU_HPCh1_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f103 0208 	add.w	r2, r3, #8
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3310      	adds	r3, #16
 800383e:	4619      	mov	r1, r3
 8003840:	4610      	mov	r0, r2
 8003842:	f7ff fb41 	bl	8002ec8 <_ZN3can7signals17PDU_HPCh1_Current3getERKyS3_>
 8003846:	eef0 7a40 	vmov.f32	s15, s0
        }
 800384a:	eeb0 0a67 	vmov.f32	s0, s15
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3getINS_7signals17PDU_HPCh2_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f103 0208 	add.w	r2, r3, #8
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	3310      	adds	r3, #16
 8003866:	4619      	mov	r1, r3
 8003868:	4610      	mov	r0, r2
 800386a:	f7ff fb4b 	bl	8002f04 <_ZN3can7signals17PDU_HPCh2_Current3getERKyS3_>
 800386e:	eef0 7a40 	vmov.f32	s15, s0
        }
 8003872:	eeb0 0a67 	vmov.f32	s0, s15
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3getINS_7signals17PDU_HPCh3_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f103 0208 	add.w	r2, r3, #8
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	3310      	adds	r3, #16
 800388e:	4619      	mov	r1, r3
 8003890:	4610      	mov	r0, r2
 8003892:	f7ff fb5d 	bl	8002f50 <_ZN3can7signals17PDU_HPCh3_Current3getERKyS3_>
 8003896:	eef0 7a40 	vmov.f32	s15, s0
        }
 800389a:	eeb0 0a67 	vmov.f32	s0, s15
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <_ZN3can7MessageINS_8messages17PDU_TX_HP_CurrentEE3getINS_7signals17PDU_HPCh4_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f103 0208 	add.w	r2, r3, #8
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	3310      	adds	r3, #16
 80038b6:	4619      	mov	r1, r3
 80038b8:	4610      	mov	r0, r2
 80038ba:	f7ff fb6d 	bl	8002f98 <_ZN3can7signals17PDU_HPCh4_Current3getERKyS3_>
 80038be:	eef0 7a40 	vmov.f32	s15, s0
        }
 80038c2:	eeb0 0a67 	vmov.f32	s0, s15
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3getINS_7signals17PDU_LPCh1_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f103 0208 	add.w	r2, r3, #8
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	3310      	adds	r3, #16
 80038de:	4619      	mov	r1, r3
 80038e0:	4610      	mov	r0, r2
 80038e2:	f7ff fb7d 	bl	8002fe0 <_ZN3can7signals17PDU_LPCh1_Current3getERKyS3_>
 80038e6:	eef0 7a40 	vmov.f32	s15, s0
        }
 80038ea:	eeb0 0a67 	vmov.f32	s0, s15
 80038ee:	3708      	adds	r7, #8
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3getINS_7signals17PDU_LPCh2_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f103 0208 	add.w	r2, r3, #8
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3310      	adds	r3, #16
 8003906:	4619      	mov	r1, r3
 8003908:	4610      	mov	r0, r2
 800390a:	f7ff fb87 	bl	800301c <_ZN3can7signals17PDU_LPCh2_Current3getERKyS3_>
 800390e:	eef0 7a40 	vmov.f32	s15, s0
        }
 8003912:	eeb0 0a67 	vmov.f32	s0, s15
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}

0800391c <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3getINS_7signals17PDU_LPCh3_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f103 0208 	add.w	r2, r3, #8
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3310      	adds	r3, #16
 800392e:	4619      	mov	r1, r3
 8003930:	4610      	mov	r0, r2
 8003932:	f7ff fb99 	bl	8003068 <_ZN3can7signals17PDU_LPCh3_Current3getERKyS3_>
 8003936:	eef0 7a40 	vmov.f32	s15, s0
        }
 800393a:	eeb0 0a67 	vmov.f32	s0, s15
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3getINS_7signals17PDU_LPCh4_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f103 0208 	add.w	r2, r3, #8
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	3310      	adds	r3, #16
 8003956:	4619      	mov	r1, r3
 8003958:	4610      	mov	r0, r2
 800395a:	f7ff fbab 	bl	80030b4 <_ZN3can7signals17PDU_LPCh4_Current3getERKyS3_>
 800395e:	eef0 7a40 	vmov.f32	s15, s0
        }
 8003962:	eeb0 0a67 	vmov.f32	s0, s15
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current1EE3getINS_7signals17PDU_LPCh5_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f103 0208 	add.w	r2, r3, #8
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3310      	adds	r3, #16
 800397e:	4619      	mov	r1, r3
 8003980:	4610      	mov	r0, r2
 8003982:	f7ff fbbb 	bl	80030fc <_ZN3can7signals17PDU_LPCh5_Current3getERKyS3_>
 8003986:	eef0 7a40 	vmov.f32	s15, s0
        }
 800398a:	eeb0 0a67 	vmov.f32	s0, s15
 800398e:	3708      	adds	r7, #8
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3getINS_7signals17PDU_LPCh6_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f103 0208 	add.w	r2, r3, #8
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3310      	adds	r3, #16
 80039a6:	4619      	mov	r1, r3
 80039a8:	4610      	mov	r0, r2
 80039aa:	f7ff fbe9 	bl	8003180 <_ZN3can7signals17PDU_LPCh6_Current3getERKyS3_>
 80039ae:	eef0 7a40 	vmov.f32	s15, s0
        }
 80039b2:	eeb0 0a67 	vmov.f32	s0, s15
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3getINS_7signals17PDU_LPCh7_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f103 0208 	add.w	r2, r3, #8
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	3310      	adds	r3, #16
 80039ce:	4619      	mov	r1, r3
 80039d0:	4610      	mov	r0, r2
 80039d2:	f7ff fbfb 	bl	80031cc <_ZN3can7signals17PDU_LPCh7_Current3getERKyS3_>
 80039d6:	eef0 7a40 	vmov.f32	s15, s0
        }
 80039da:	eeb0 0a67 	vmov.f32	s0, s15
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3getINS_7signals17PDU_LPCh8_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f103 0208 	add.w	r2, r3, #8
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3310      	adds	r3, #16
 80039f6:	4619      	mov	r1, r3
 80039f8:	4610      	mov	r0, r2
 80039fa:	f7ff fc0d 	bl	8003218 <_ZN3can7signals17PDU_LPCh8_Current3getERKyS3_>
 80039fe:	eef0 7a40 	vmov.f32	s15, s0
        }
 8003a02:	eeb0 0a67 	vmov.f32	s0, s15
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3getINS_7signals17PDU_LPCh9_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b082      	sub	sp, #8
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f103 0208 	add.w	r2, r3, #8
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	3310      	adds	r3, #16
 8003a1e:	4619      	mov	r1, r3
 8003a20:	4610      	mov	r0, r2
 8003a22:	f7ff fc1d 	bl	8003260 <_ZN3can7signals17PDU_LPCh9_Current3getERKyS3_>
 8003a26:	eef0 7a40 	vmov.f32	s15, s0
        }
 8003a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <_ZN3can7MessageINS_8messages18PDU_TX_LP_Current2EE3getINS_7signals18PDU_LPCh10_CurrentEEENT_8dataTypeEv>:
        typename T::dataType get() {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
            return T::get(intel, motorola);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f103 0208 	add.w	r2, r3, #8
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3310      	adds	r3, #16
 8003a46:	4619      	mov	r1, r3
 8003a48:	4610      	mov	r0, r2
 8003a4a:	f7ff fb7b 	bl	8003144 <_ZN3can7signals18PDU_LPCh10_Current3getERKyS3_>
 8003a4e:	eef0 7a40 	vmov.f32	s15, s0
        }
 8003a52:	eeb0 0a67 	vmov.f32	s0, s15
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <_ZN3can23registerMessageReceiverINS_8messages13PDU_TX_StatusEEEjSt8functionIFvR9RxMessageEE>:
}

namespace can {

template<typename MESSAGE>
inline unsigned int registerMessageReceiver(
 8003a5c:	b590      	push	{r4, r7, lr}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
		std::function<void(RxMessage&)> receiver) {
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 8003a64:	f107 0308 	add.w	r3, r7, #8
 8003a68:	6879      	ldr	r1, [r7, #4]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd fb7b 	bl	8001166 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 8003a70:	f107 0308 	add.w	r3, r7, #8
 8003a74:	2200      	movs	r2, #0
 8003a76:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fd fb20 	bl	80010c0 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 8003a80:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 8003a82:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 8003a84:	f107 0308 	add.w	r3, r7, #8
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fd fad5 	bl	8001038 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 8003a8e:	4623      	mov	r3, r4
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd90      	pop	{r4, r7, pc}

08003a98 <_ZN3can23registerMessageReceiverINS_8messages17PDU_TX_HP_CurrentEEEjSt8functionIFvR9RxMessageEE>:
inline unsigned int registerMessageReceiver(
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 8003aa0:	f107 0308 	add.w	r3, r7, #8
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fd fb5d 	bl	8001166 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 8003aac:	f107 0308 	add.w	r3, r7, #8
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f240 211a 	movw	r1, #538	; 0x21a
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fd fb02 	bl	80010c0 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 8003abc:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 8003abe:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 8003ac0:	f107 0308 	add.w	r3, r7, #8
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7fd fab7 	bl	8001038 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 8003aca:	4623      	mov	r3, r4
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	371c      	adds	r7, #28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd90      	pop	{r4, r7, pc}

08003ad4 <_ZN3can23registerMessageReceiverINS_8messages18PDU_TX_LP_Current1EEEjSt8functionIFvR9RxMessageEE>:
inline unsigned int registerMessageReceiver(
 8003ad4:	b590      	push	{r4, r7, lr}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 8003adc:	f107 0308 	add.w	r3, r7, #8
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7fd fb3f 	bl	8001166 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 8003ae8:	f107 0308 	add.w	r3, r7, #8
 8003aec:	2200      	movs	r2, #0
 8003aee:	f240 511a 	movw	r1, #1306	; 0x51a
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fd fae4 	bl	80010c0 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 8003af8:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 8003afa:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 8003afc:	f107 0308 	add.w	r3, r7, #8
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fd fa99 	bl	8001038 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 8003b06:	4623      	mov	r3, r4
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd90      	pop	{r4, r7, pc}

08003b10 <_ZN3can23registerMessageReceiverINS_8messages18PDU_TX_LP_Current2EEEjSt8functionIFvR9RxMessageEE>:
inline unsigned int registerMessageReceiver(
 8003b10:	b590      	push	{r4, r7, lr}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 8003b18:	f107 0308 	add.w	r3, r7, #8
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7fd fb21 	bl	8001166 <_ZNSt8functionIFvR9RxMessageEEC1ERKS3_>
 8003b24:	f107 0308 	add.w	r3, r7, #8
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f240 515a 	movw	r1, #1370	; 0x55a
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fd fac6 	bl	80010c0 <_ZN7canzero31registerMessageReceiverInternalESt8functionIFvR9RxMessageEEmb>
 8003b34:	4604      	mov	r4, r0
			MESSAGE::isExtendedId);
 8003b36:	bf00      	nop
	return canzero::registerMessageReceiverInternal(receiver, MESSAGE::id,
 8003b38:	f107 0308 	add.w	r3, r7, #8
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fd fa7b 	bl	8001038 <_ZNSt8functionIFvR9RxMessageEED1Ev>
			MESSAGE::isExtendedId);
 8003b42:	4623      	mov	r3, r4
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	371c      	adds	r7, #28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd90      	pop	{r4, r7, pc}

08003b4c <_ZN3fms8setStateEh>:
PodState s_state;
PodState s_lastState;
PodState s_nextState;
osMutexId_t s_stateMutex = osMutexNew(NULL);

void setState(PodState state){
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	4603      	mov	r3, r0
 8003b54:	71fb      	strb	r3, [r7, #7]
    osMutexAcquire(s_stateMutex, portMAX_DELAY);
 8003b56:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <_ZN3fms8setStateEh+0x30>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f007 fd97 	bl	800b692 <osMutexAcquire>
	s_nextState = state;
 8003b64:	4a06      	ldr	r2, [pc, #24]	; (8003b80 <_ZN3fms8setStateEh+0x34>)
 8003b66:	79fb      	ldrb	r3, [r7, #7]
 8003b68:	7013      	strb	r3, [r2, #0]
    osMutexRelease(s_stateMutex);
 8003b6a:	4b04      	ldr	r3, [pc, #16]	; (8003b7c <_ZN3fms8setStateEh+0x30>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f007 fdda 	bl	800b728 <osMutexRelease>
}
 8003b74:	bf00      	nop
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	20000c2c 	.word	0x20000c2c
 8003b80:	20000c28 	.word	0x20000c28

08003b84 <_Z41__static_initialization_and_destruction_0ii>:
		stateMsg.set<can::signals::SensorF_TX_PodState_Last>(s_lastState);
		stateMsg.send();
	}
}

}
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d10a      	bne.n	8003baa <_Z41__static_initialization_and_destruction_0ii+0x26>
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d105      	bne.n	8003baa <_Z41__static_initialization_and_destruction_0ii+0x26>
osMutexId_t s_stateMutex = osMutexNew(NULL);
 8003b9e:	2000      	movs	r0, #0
 8003ba0:	f007 fcf1 	bl	800b586 <osMutexNew>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	4a03      	ldr	r2, [pc, #12]	; (8003bb4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 8003ba8:	6013      	str	r3, [r2, #0]
}
 8003baa:	bf00      	nop
 8003bac:	3708      	adds	r7, #8
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000c2c 	.word	0x20000c2c

08003bb8 <_GLOBAL__sub_I__ZN3fms7s_stateE>:
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003bc0:	2001      	movs	r0, #1
 8003bc2:	f7ff ffdf 	bl	8003b84 <_Z41__static_initialization_and_destruction_0ii>
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <state_maschine_entry>:
#ifdef __cplusplus
extern "C" {
#endif


void state_maschine_entry(void *argv) {
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
	fms::setState(fms::STATE::POD_IDLE);
 8003bd0:	2001      	movs	r0, #1
 8003bd2:	f7ff ffbb 	bl	8003b4c <_ZN3fms8setStateEh>
	while(true){
		osDelay(osWaitForever);
 8003bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003bda:	f007 fcb9 	bl	800b550 <osDelay>
 8003bde:	e7fa      	b.n	8003bd6 <state_maschine_entry+0xe>

08003be0 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003be6:	463b      	mov	r3, r7
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	605a      	str	r2, [r3, #4]
 8003bee:	609a      	str	r2, [r3, #8]
 8003bf0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003bf2:	4b36      	ldr	r3, [pc, #216]	; (8003ccc <MX_ADC1_Init+0xec>)
 8003bf4:	4a36      	ldr	r2, [pc, #216]	; (8003cd0 <MX_ADC1_Init+0xf0>)
 8003bf6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003bf8:	4b34      	ldr	r3, [pc, #208]	; (8003ccc <MX_ADC1_Init+0xec>)
 8003bfa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003bfe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003c00:	4b32      	ldr	r3, [pc, #200]	; (8003ccc <MX_ADC1_Init+0xec>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003c06:	4b31      	ldr	r3, [pc, #196]	; (8003ccc <MX_ADC1_Init+0xec>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003c0c:	4b2f      	ldr	r3, [pc, #188]	; (8003ccc <MX_ADC1_Init+0xec>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003c12:	4b2e      	ldr	r3, [pc, #184]	; (8003ccc <MX_ADC1_Init+0xec>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c1a:	4b2c      	ldr	r3, [pc, #176]	; (8003ccc <MX_ADC1_Init+0xec>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c20:	4b2a      	ldr	r3, [pc, #168]	; (8003ccc <MX_ADC1_Init+0xec>)
 8003c22:	4a2c      	ldr	r2, [pc, #176]	; (8003cd4 <MX_ADC1_Init+0xf4>)
 8003c24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c26:	4b29      	ldr	r3, [pc, #164]	; (8003ccc <MX_ADC1_Init+0xec>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8003c2c:	4b27      	ldr	r3, [pc, #156]	; (8003ccc <MX_ADC1_Init+0xec>)
 8003c2e:	2204      	movs	r2, #4
 8003c30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003c32:	4b26      	ldr	r3, [pc, #152]	; (8003ccc <MX_ADC1_Init+0xec>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003c3a:	4b24      	ldr	r3, [pc, #144]	; (8003ccc <MX_ADC1_Init+0xec>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c40:	4822      	ldr	r0, [pc, #136]	; (8003ccc <MX_ADC1_Init+0xec>)
 8003c42:	f001 fd69 	bl	8005718 <HAL_ADC_Init>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d001      	beq.n	8003c50 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003c4c:	f000 fe06 	bl	800485c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003c50:	230a      	movs	r3, #10
 8003c52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003c54:	2301      	movs	r3, #1
 8003c56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8003c58:	2305      	movs	r3, #5
 8003c5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c5c:	463b      	mov	r3, r7
 8003c5e:	4619      	mov	r1, r3
 8003c60:	481a      	ldr	r0, [pc, #104]	; (8003ccc <MX_ADC1_Init+0xec>)
 8003c62:	f001 feb7 	bl	80059d4 <HAL_ADC_ConfigChannel>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003c6c:	f000 fdf6 	bl	800485c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8003c70:	230c      	movs	r3, #12
 8003c72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003c74:	2302      	movs	r3, #2
 8003c76:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c78:	463b      	mov	r3, r7
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4813      	ldr	r0, [pc, #76]	; (8003ccc <MX_ADC1_Init+0xec>)
 8003c7e:	f001 fea9 	bl	80059d4 <HAL_ADC_ConfigChannel>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8003c88:	f000 fde8 	bl	800485c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003c8c:	2310      	movs	r3, #16
 8003c8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003c90:	2303      	movs	r3, #3
 8003c92:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c94:	463b      	mov	r3, r7
 8003c96:	4619      	mov	r1, r3
 8003c98:	480c      	ldr	r0, [pc, #48]	; (8003ccc <MX_ADC1_Init+0xec>)
 8003c9a:	f001 fe9b 	bl	80059d4 <HAL_ADC_ConfigChannel>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8003ca4:	f000 fdda 	bl	800485c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003ca8:	2311      	movs	r3, #17
 8003caa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003cac:	2304      	movs	r3, #4
 8003cae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003cb0:	463b      	mov	r3, r7
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4805      	ldr	r0, [pc, #20]	; (8003ccc <MX_ADC1_Init+0xec>)
 8003cb6:	f001 fe8d 	bl	80059d4 <HAL_ADC_ConfigChannel>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8003cc0:	f000 fdcc 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003cc4:	bf00      	nop
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20000c30 	.word	0x20000c30
 8003cd0:	40012000 	.word	0x40012000
 8003cd4:	0f000001 	.word	0x0f000001

08003cd8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003cde:	463b      	mov	r3, r7
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	605a      	str	r2, [r3, #4]
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003cea:	4b52      	ldr	r3, [pc, #328]	; (8003e34 <MX_ADC2_Init+0x15c>)
 8003cec:	4a52      	ldr	r2, [pc, #328]	; (8003e38 <MX_ADC2_Init+0x160>)
 8003cee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8003cf0:	4b50      	ldr	r3, [pc, #320]	; (8003e34 <MX_ADC2_Init+0x15c>)
 8003cf2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003cf6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003cf8:	4b4e      	ldr	r3, [pc, #312]	; (8003e34 <MX_ADC2_Init+0x15c>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003cfe:	4b4d      	ldr	r3, [pc, #308]	; (8003e34 <MX_ADC2_Init+0x15c>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003d04:	4b4b      	ldr	r3, [pc, #300]	; (8003e34 <MX_ADC2_Init+0x15c>)
 8003d06:	2200      	movs	r2, #0
 8003d08:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003d0a:	4b4a      	ldr	r3, [pc, #296]	; (8003e34 <MX_ADC2_Init+0x15c>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003d12:	4b48      	ldr	r3, [pc, #288]	; (8003e34 <MX_ADC2_Init+0x15c>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003d18:	4b46      	ldr	r3, [pc, #280]	; (8003e34 <MX_ADC2_Init+0x15c>)
 8003d1a:	4a48      	ldr	r2, [pc, #288]	; (8003e3c <MX_ADC2_Init+0x164>)
 8003d1c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d1e:	4b45      	ldr	r3, [pc, #276]	; (8003e34 <MX_ADC2_Init+0x15c>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 8;
 8003d24:	4b43      	ldr	r3, [pc, #268]	; (8003e34 <MX_ADC2_Init+0x15c>)
 8003d26:	2208      	movs	r2, #8
 8003d28:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8003d2a:	4b42      	ldr	r3, [pc, #264]	; (8003e34 <MX_ADC2_Init+0x15c>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003d32:	4b40      	ldr	r3, [pc, #256]	; (8003e34 <MX_ADC2_Init+0x15c>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003d38:	483e      	ldr	r0, [pc, #248]	; (8003e34 <MX_ADC2_Init+0x15c>)
 8003d3a:	f001 fced 	bl	8005718 <HAL_ADC_Init>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8003d44:	f000 fd8a 	bl	800485c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8003d48:	230f      	movs	r3, #15
 8003d4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8003d50:	2304      	movs	r3, #4
 8003d52:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d54:	463b      	mov	r3, r7
 8003d56:	4619      	mov	r1, r3
 8003d58:	4836      	ldr	r0, [pc, #216]	; (8003e34 <MX_ADC2_Init+0x15c>)
 8003d5a:	f001 fe3b 	bl	80059d4 <HAL_ADC_ConfigChannel>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8003d64:	f000 fd7a 	bl	800485c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8003d68:	230e      	movs	r3, #14
 8003d6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d70:	463b      	mov	r3, r7
 8003d72:	4619      	mov	r1, r3
 8003d74:	482f      	ldr	r0, [pc, #188]	; (8003e34 <MX_ADC2_Init+0x15c>)
 8003d76:	f001 fe2d 	bl	80059d4 <HAL_ADC_ConfigChannel>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003d80:	f000 fd6c 	bl	800485c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003d84:	2303      	movs	r3, #3
 8003d86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003d88:	2303      	movs	r3, #3
 8003d8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003d8c:	463b      	mov	r3, r7
 8003d8e:	4619      	mov	r1, r3
 8003d90:	4828      	ldr	r0, [pc, #160]	; (8003e34 <MX_ADC2_Init+0x15c>)
 8003d92:	f001 fe1f 	bl	80059d4 <HAL_ADC_ConfigChannel>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8003d9c:	f000 fd5e 	bl	800485c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003da0:	2302      	movs	r3, #2
 8003da2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003da4:	2304      	movs	r3, #4
 8003da6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003da8:	463b      	mov	r3, r7
 8003daa:	4619      	mov	r1, r3
 8003dac:	4821      	ldr	r0, [pc, #132]	; (8003e34 <MX_ADC2_Init+0x15c>)
 8003dae:	f001 fe11 	bl	80059d4 <HAL_ADC_ConfigChannel>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8003db8:	f000 fd50 	bl	800485c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003dbc:	2304      	movs	r3, #4
 8003dbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003dc0:	2305      	movs	r3, #5
 8003dc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003dc4:	463b      	mov	r3, r7
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	481a      	ldr	r0, [pc, #104]	; (8003e34 <MX_ADC2_Init+0x15c>)
 8003dca:	f001 fe03 	bl	80059d4 <HAL_ADC_ConfigChannel>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8003dd4:	f000 fd42 	bl	800485c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8003dd8:	2305      	movs	r3, #5
 8003dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003ddc:	2306      	movs	r3, #6
 8003dde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003de0:	463b      	mov	r3, r7
 8003de2:	4619      	mov	r1, r3
 8003de4:	4813      	ldr	r0, [pc, #76]	; (8003e34 <MX_ADC2_Init+0x15c>)
 8003de6:	f001 fdf5 	bl	80059d4 <HAL_ADC_ConfigChannel>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8003df0:	f000 fd34 	bl	800485c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8003df4:	2306      	movs	r3, #6
 8003df6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003df8:	2307      	movs	r3, #7
 8003dfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003dfc:	463b      	mov	r3, r7
 8003dfe:	4619      	mov	r1, r3
 8003e00:	480c      	ldr	r0, [pc, #48]	; (8003e34 <MX_ADC2_Init+0x15c>)
 8003e02:	f001 fde7 	bl	80059d4 <HAL_ADC_ConfigChannel>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8003e0c:	f000 fd26 	bl	800485c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003e10:	2307      	movs	r3, #7
 8003e12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8003e14:	2308      	movs	r3, #8
 8003e16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003e18:	463b      	mov	r3, r7
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	4805      	ldr	r0, [pc, #20]	; (8003e34 <MX_ADC2_Init+0x15c>)
 8003e1e:	f001 fdd9 	bl	80059d4 <HAL_ADC_ConfigChannel>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8003e28:	f000 fd18 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8003e2c:	bf00      	nop
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}
 8003e34:	20000c78 	.word	0x20000c78
 8003e38:	40012100 	.word	0x40012100
 8003e3c:	0f000001 	.word	0x0f000001

08003e40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08c      	sub	sp, #48	; 0x30
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e48:	f107 031c 	add.w	r3, r7, #28
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	605a      	str	r2, [r3, #4]
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	60da      	str	r2, [r3, #12]
 8003e56:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a6b      	ldr	r2, [pc, #428]	; (800400c <HAL_ADC_MspInit+0x1cc>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d157      	bne.n	8003f12 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003e62:	2300      	movs	r3, #0
 8003e64:	61bb      	str	r3, [r7, #24]
 8003e66:	4b6a      	ldr	r3, [pc, #424]	; (8004010 <HAL_ADC_MspInit+0x1d0>)
 8003e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e6a:	4a69      	ldr	r2, [pc, #420]	; (8004010 <HAL_ADC_MspInit+0x1d0>)
 8003e6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e70:	6453      	str	r3, [r2, #68]	; 0x44
 8003e72:	4b67      	ldr	r3, [pc, #412]	; (8004010 <HAL_ADC_MspInit+0x1d0>)
 8003e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e7a:	61bb      	str	r3, [r7, #24]
 8003e7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	4b63      	ldr	r3, [pc, #396]	; (8004010 <HAL_ADC_MspInit+0x1d0>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	4a62      	ldr	r2, [pc, #392]	; (8004010 <HAL_ADC_MspInit+0x1d0>)
 8003e88:	f043 0304 	orr.w	r3, r3, #4
 8003e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8e:	4b60      	ldr	r3, [pc, #384]	; (8004010 <HAL_ADC_MspInit+0x1d0>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	f003 0304 	and.w	r3, r3, #4
 8003e96:	617b      	str	r3, [r7, #20]
 8003e98:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 8003e9a:	2305      	movs	r3, #5
 8003e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ea6:	f107 031c 	add.w	r3, r7, #28
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4859      	ldr	r0, [pc, #356]	; (8004014 <HAL_ADC_MspInit+0x1d4>)
 8003eae:	f003 f8e1 	bl	8007074 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003eb2:	4b59      	ldr	r3, [pc, #356]	; (8004018 <HAL_ADC_MspInit+0x1d8>)
 8003eb4:	4a59      	ldr	r2, [pc, #356]	; (800401c <HAL_ADC_MspInit+0x1dc>)
 8003eb6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003eb8:	4b57      	ldr	r3, [pc, #348]	; (8004018 <HAL_ADC_MspInit+0x1d8>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003ebe:	4b56      	ldr	r3, [pc, #344]	; (8004018 <HAL_ADC_MspInit+0x1d8>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ec4:	4b54      	ldr	r3, [pc, #336]	; (8004018 <HAL_ADC_MspInit+0x1d8>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003eca:	4b53      	ldr	r3, [pc, #332]	; (8004018 <HAL_ADC_MspInit+0x1d8>)
 8003ecc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ed0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003ed2:	4b51      	ldr	r3, [pc, #324]	; (8004018 <HAL_ADC_MspInit+0x1d8>)
 8003ed4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ed8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003eda:	4b4f      	ldr	r3, [pc, #316]	; (8004018 <HAL_ADC_MspInit+0x1d8>)
 8003edc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ee0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8003ee2:	4b4d      	ldr	r3, [pc, #308]	; (8004018 <HAL_ADC_MspInit+0x1d8>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003ee8:	4b4b      	ldr	r3, [pc, #300]	; (8004018 <HAL_ADC_MspInit+0x1d8>)
 8003eea:	2200      	movs	r2, #0
 8003eec:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003eee:	4b4a      	ldr	r3, [pc, #296]	; (8004018 <HAL_ADC_MspInit+0x1d8>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003ef4:	4848      	ldr	r0, [pc, #288]	; (8004018 <HAL_ADC_MspInit+0x1d8>)
 8003ef6:	f002 fd4d 	bl	8006994 <HAL_DMA_Init>
 8003efa:	4603      	mov	r3, r0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8003f00:	f000 fcac 	bl	800485c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a44      	ldr	r2, [pc, #272]	; (8004018 <HAL_ADC_MspInit+0x1d8>)
 8003f08:	639a      	str	r2, [r3, #56]	; 0x38
 8003f0a:	4a43      	ldr	r2, [pc, #268]	; (8004018 <HAL_ADC_MspInit+0x1d8>)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8003f10:	e077      	b.n	8004002 <HAL_ADC_MspInit+0x1c2>
  else if(adcHandle->Instance==ADC2)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a42      	ldr	r2, [pc, #264]	; (8004020 <HAL_ADC_MspInit+0x1e0>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d172      	bne.n	8004002 <HAL_ADC_MspInit+0x1c2>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	613b      	str	r3, [r7, #16]
 8003f20:	4b3b      	ldr	r3, [pc, #236]	; (8004010 <HAL_ADC_MspInit+0x1d0>)
 8003f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f24:	4a3a      	ldr	r2, [pc, #232]	; (8004010 <HAL_ADC_MspInit+0x1d0>)
 8003f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f2a:	6453      	str	r3, [r2, #68]	; 0x44
 8003f2c:	4b38      	ldr	r3, [pc, #224]	; (8004010 <HAL_ADC_MspInit+0x1d0>)
 8003f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f38:	2300      	movs	r3, #0
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	4b34      	ldr	r3, [pc, #208]	; (8004010 <HAL_ADC_MspInit+0x1d0>)
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	4a33      	ldr	r2, [pc, #204]	; (8004010 <HAL_ADC_MspInit+0x1d0>)
 8003f42:	f043 0304 	orr.w	r3, r3, #4
 8003f46:	6313      	str	r3, [r2, #48]	; 0x30
 8003f48:	4b31      	ldr	r3, [pc, #196]	; (8004010 <HAL_ADC_MspInit+0x1d0>)
 8003f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f4c:	f003 0304 	and.w	r3, r3, #4
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f54:	2300      	movs	r3, #0
 8003f56:	60bb      	str	r3, [r7, #8]
 8003f58:	4b2d      	ldr	r3, [pc, #180]	; (8004010 <HAL_ADC_MspInit+0x1d0>)
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	4a2c      	ldr	r2, [pc, #176]	; (8004010 <HAL_ADC_MspInit+0x1d0>)
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	6313      	str	r3, [r2, #48]	; 0x30
 8003f64:	4b2a      	ldr	r3, [pc, #168]	; (8004010 <HAL_ADC_MspInit+0x1d0>)
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin|AN2_Pin|AN1_Pin;
 8003f70:	2335      	movs	r3, #53	; 0x35
 8003f72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f74:	2303      	movs	r3, #3
 8003f76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f7c:	f107 031c 	add.w	r3, r7, #28
 8003f80:	4619      	mov	r1, r3
 8003f82:	4824      	ldr	r0, [pc, #144]	; (8004014 <HAL_ADC_MspInit+0x1d4>)
 8003f84:	f003 f876 	bl	8007074 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = AN4_Pin|AN3_Pin|AN5_Pin|AN6_Pin
 8003f88:	23fc      	movs	r3, #252	; 0xfc
 8003f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f94:	f107 031c 	add.w	r3, r7, #28
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4822      	ldr	r0, [pc, #136]	; (8004024 <HAL_ADC_MspInit+0x1e4>)
 8003f9c:	f003 f86a 	bl	8007074 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8003fa0:	4b21      	ldr	r3, [pc, #132]	; (8004028 <HAL_ADC_MspInit+0x1e8>)
 8003fa2:	4a22      	ldr	r2, [pc, #136]	; (800402c <HAL_ADC_MspInit+0x1ec>)
 8003fa4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8003fa6:	4b20      	ldr	r3, [pc, #128]	; (8004028 <HAL_ADC_MspInit+0x1e8>)
 8003fa8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fac:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fae:	4b1e      	ldr	r3, [pc, #120]	; (8004028 <HAL_ADC_MspInit+0x1e8>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fb4:	4b1c      	ldr	r3, [pc, #112]	; (8004028 <HAL_ADC_MspInit+0x1e8>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003fba:	4b1b      	ldr	r3, [pc, #108]	; (8004028 <HAL_ADC_MspInit+0x1e8>)
 8003fbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fc0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003fc2:	4b19      	ldr	r3, [pc, #100]	; (8004028 <HAL_ADC_MspInit+0x1e8>)
 8003fc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fc8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003fca:	4b17      	ldr	r3, [pc, #92]	; (8004028 <HAL_ADC_MspInit+0x1e8>)
 8003fcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003fd0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 8003fd2:	4b15      	ldr	r3, [pc, #84]	; (8004028 <HAL_ADC_MspInit+0x1e8>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003fd8:	4b13      	ldr	r3, [pc, #76]	; (8004028 <HAL_ADC_MspInit+0x1e8>)
 8003fda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003fde:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fe0:	4b11      	ldr	r3, [pc, #68]	; (8004028 <HAL_ADC_MspInit+0x1e8>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8003fe6:	4810      	ldr	r0, [pc, #64]	; (8004028 <HAL_ADC_MspInit+0x1e8>)
 8003fe8:	f002 fcd4 	bl	8006994 <HAL_DMA_Init>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <HAL_ADC_MspInit+0x1b6>
      Error_Handler();
 8003ff2:	f000 fc33 	bl	800485c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a0b      	ldr	r2, [pc, #44]	; (8004028 <HAL_ADC_MspInit+0x1e8>)
 8003ffa:	639a      	str	r2, [r3, #56]	; 0x38
 8003ffc:	4a0a      	ldr	r2, [pc, #40]	; (8004028 <HAL_ADC_MspInit+0x1e8>)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004002:	bf00      	nop
 8004004:	3730      	adds	r7, #48	; 0x30
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40012000 	.word	0x40012000
 8004010:	40023800 	.word	0x40023800
 8004014:	40020800 	.word	0x40020800
 8004018:	20000cc0 	.word	0x20000cc0
 800401c:	40026410 	.word	0x40026410
 8004020:	40012100 	.word	0x40012100
 8004024:	40020000 	.word	0x40020000
 8004028:	20000d20 	.word	0x20000d20
 800402c:	40026440 	.word	0x40026440

08004030 <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8004034:	4b17      	ldr	r3, [pc, #92]	; (8004094 <MX_CAN1_Init+0x64>)
 8004036:	4a18      	ldr	r2, [pc, #96]	; (8004098 <MX_CAN1_Init+0x68>)
 8004038:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800403a:	4b16      	ldr	r3, [pc, #88]	; (8004094 <MX_CAN1_Init+0x64>)
 800403c:	2203      	movs	r2, #3
 800403e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8004040:	4b14      	ldr	r3, [pc, #80]	; (8004094 <MX_CAN1_Init+0x64>)
 8004042:	2200      	movs	r2, #0
 8004044:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8004046:	4b13      	ldr	r3, [pc, #76]	; (8004094 <MX_CAN1_Init+0x64>)
 8004048:	2200      	movs	r2, #0
 800404a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 800404c:	4b11      	ldr	r3, [pc, #68]	; (8004094 <MX_CAN1_Init+0x64>)
 800404e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8004052:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8004054:	4b0f      	ldr	r3, [pc, #60]	; (8004094 <MX_CAN1_Init+0x64>)
 8004056:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800405a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800405c:	4b0d      	ldr	r3, [pc, #52]	; (8004094 <MX_CAN1_Init+0x64>)
 800405e:	2200      	movs	r2, #0
 8004060:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8004062:	4b0c      	ldr	r3, [pc, #48]	; (8004094 <MX_CAN1_Init+0x64>)
 8004064:	2201      	movs	r2, #1
 8004066:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8004068:	4b0a      	ldr	r3, [pc, #40]	; (8004094 <MX_CAN1_Init+0x64>)
 800406a:	2200      	movs	r2, #0
 800406c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800406e:	4b09      	ldr	r3, [pc, #36]	; (8004094 <MX_CAN1_Init+0x64>)
 8004070:	2201      	movs	r2, #1
 8004072:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8004074:	4b07      	ldr	r3, [pc, #28]	; (8004094 <MX_CAN1_Init+0x64>)
 8004076:	2200      	movs	r2, #0
 8004078:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800407a:	4b06      	ldr	r3, [pc, #24]	; (8004094 <MX_CAN1_Init+0x64>)
 800407c:	2200      	movs	r2, #0
 800407e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8004080:	4804      	ldr	r0, [pc, #16]	; (8004094 <MX_CAN1_Init+0x64>)
 8004082:	f001 ff47 	bl	8005f14 <HAL_CAN_Init>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800408c:	f000 fbe6 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8004090:	bf00      	nop
 8004092:	bd80      	pop	{r7, pc}
 8004094:	20000d80 	.word	0x20000d80
 8004098:	40006400 	.word	0x40006400

0800409c <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80040a0:	4b17      	ldr	r3, [pc, #92]	; (8004100 <MX_CAN2_Init+0x64>)
 80040a2:	4a18      	ldr	r2, [pc, #96]	; (8004104 <MX_CAN2_Init+0x68>)
 80040a4:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 80040a6:	4b16      	ldr	r3, [pc, #88]	; (8004100 <MX_CAN2_Init+0x64>)
 80040a8:	2203      	movs	r2, #3
 80040aa:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80040ac:	4b14      	ldr	r3, [pc, #80]	; (8004100 <MX_CAN2_Init+0x64>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80040b2:	4b13      	ldr	r3, [pc, #76]	; (8004100 <MX_CAN2_Init+0x64>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 80040b8:	4b11      	ldr	r3, [pc, #68]	; (8004100 <MX_CAN2_Init+0x64>)
 80040ba:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80040be:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80040c0:	4b0f      	ldr	r3, [pc, #60]	; (8004100 <MX_CAN2_Init+0x64>)
 80040c2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80040c6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80040c8:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <MX_CAN2_Init+0x64>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = ENABLE;
 80040ce:	4b0c      	ldr	r3, [pc, #48]	; (8004100 <MX_CAN2_Init+0x64>)
 80040d0:	2201      	movs	r2, #1
 80040d2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80040d4:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <MX_CAN2_Init+0x64>)
 80040d6:	2200      	movs	r2, #0
 80040d8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 80040da:	4b09      	ldr	r3, [pc, #36]	; (8004100 <MX_CAN2_Init+0x64>)
 80040dc:	2201      	movs	r2, #1
 80040de:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80040e0:	4b07      	ldr	r3, [pc, #28]	; (8004100 <MX_CAN2_Init+0x64>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80040e6:	4b06      	ldr	r3, [pc, #24]	; (8004100 <MX_CAN2_Init+0x64>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80040ec:	4804      	ldr	r0, [pc, #16]	; (8004100 <MX_CAN2_Init+0x64>)
 80040ee:	f001 ff11 	bl	8005f14 <HAL_CAN_Init>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80040f8:	f000 fbb0 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80040fc:	bf00      	nop
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20000da8 	.word	0x20000da8
 8004104:	40006800 	.word	0x40006800

08004108 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08c      	sub	sp, #48	; 0x30
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004110:	f107 031c 	add.w	r3, r7, #28
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	605a      	str	r2, [r3, #4]
 800411a:	609a      	str	r2, [r3, #8]
 800411c:	60da      	str	r2, [r3, #12]
 800411e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a5a      	ldr	r2, [pc, #360]	; (8004290 <HAL_CAN_MspInit+0x188>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d14d      	bne.n	80041c6 <HAL_CAN_MspInit+0xbe>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 800412a:	4b5a      	ldr	r3, [pc, #360]	; (8004294 <HAL_CAN_MspInit+0x18c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3301      	adds	r3, #1
 8004130:	4a58      	ldr	r2, [pc, #352]	; (8004294 <HAL_CAN_MspInit+0x18c>)
 8004132:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004134:	4b57      	ldr	r3, [pc, #348]	; (8004294 <HAL_CAN_MspInit+0x18c>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d10d      	bne.n	8004158 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800413c:	2300      	movs	r3, #0
 800413e:	61bb      	str	r3, [r7, #24]
 8004140:	4b55      	ldr	r3, [pc, #340]	; (8004298 <HAL_CAN_MspInit+0x190>)
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	4a54      	ldr	r2, [pc, #336]	; (8004298 <HAL_CAN_MspInit+0x190>)
 8004146:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800414a:	6413      	str	r3, [r2, #64]	; 0x40
 800414c:	4b52      	ldr	r3, [pc, #328]	; (8004298 <HAL_CAN_MspInit+0x190>)
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]
 800415c:	4b4e      	ldr	r3, [pc, #312]	; (8004298 <HAL_CAN_MspInit+0x190>)
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004160:	4a4d      	ldr	r2, [pc, #308]	; (8004298 <HAL_CAN_MspInit+0x190>)
 8004162:	f043 0308 	orr.w	r3, r3, #8
 8004166:	6313      	str	r3, [r2, #48]	; 0x30
 8004168:	4b4b      	ldr	r3, [pc, #300]	; (8004298 <HAL_CAN_MspInit+0x190>)
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004174:	2303      	movs	r3, #3
 8004176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004178:	2302      	movs	r3, #2
 800417a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417c:	2300      	movs	r3, #0
 800417e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004180:	2303      	movs	r3, #3
 8004182:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004184:	2309      	movs	r3, #9
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004188:	f107 031c 	add.w	r3, r7, #28
 800418c:	4619      	mov	r1, r3
 800418e:	4843      	ldr	r0, [pc, #268]	; (800429c <HAL_CAN_MspInit+0x194>)
 8004190:	f002 ff70 	bl	8007074 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8004194:	2200      	movs	r2, #0
 8004196:	2105      	movs	r1, #5
 8004198:	2013      	movs	r0, #19
 800419a:	f002 fbb5 	bl	8006908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800419e:	2013      	movs	r0, #19
 80041a0:	f002 fbce 	bl	8006940 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80041a4:	2200      	movs	r2, #0
 80041a6:	2105      	movs	r1, #5
 80041a8:	2014      	movs	r0, #20
 80041aa:	f002 fbad 	bl	8006908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80041ae:	2014      	movs	r0, #20
 80041b0:	f002 fbc6 	bl	8006940 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80041b4:	2200      	movs	r2, #0
 80041b6:	2105      	movs	r1, #5
 80041b8:	2015      	movs	r0, #21
 80041ba:	f002 fba5 	bl	8006908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80041be:	2015      	movs	r0, #21
 80041c0:	f002 fbbe 	bl	8006940 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 80041c4:	e05f      	b.n	8004286 <HAL_CAN_MspInit+0x17e>
  else if(canHandle->Instance==CAN2)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a35      	ldr	r2, [pc, #212]	; (80042a0 <HAL_CAN_MspInit+0x198>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d15a      	bne.n	8004286 <HAL_CAN_MspInit+0x17e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80041d0:	2300      	movs	r3, #0
 80041d2:	613b      	str	r3, [r7, #16]
 80041d4:	4b30      	ldr	r3, [pc, #192]	; (8004298 <HAL_CAN_MspInit+0x190>)
 80041d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d8:	4a2f      	ldr	r2, [pc, #188]	; (8004298 <HAL_CAN_MspInit+0x190>)
 80041da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041de:	6413      	str	r3, [r2, #64]	; 0x40
 80041e0:	4b2d      	ldr	r3, [pc, #180]	; (8004298 <HAL_CAN_MspInit+0x190>)
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80041ec:	4b29      	ldr	r3, [pc, #164]	; (8004294 <HAL_CAN_MspInit+0x18c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3301      	adds	r3, #1
 80041f2:	4a28      	ldr	r2, [pc, #160]	; (8004294 <HAL_CAN_MspInit+0x18c>)
 80041f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80041f6:	4b27      	ldr	r3, [pc, #156]	; (8004294 <HAL_CAN_MspInit+0x18c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d10d      	bne.n	800421a <HAL_CAN_MspInit+0x112>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	4b25      	ldr	r3, [pc, #148]	; (8004298 <HAL_CAN_MspInit+0x190>)
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	4a24      	ldr	r2, [pc, #144]	; (8004298 <HAL_CAN_MspInit+0x190>)
 8004208:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800420c:	6413      	str	r3, [r2, #64]	; 0x40
 800420e:	4b22      	ldr	r3, [pc, #136]	; (8004298 <HAL_CAN_MspInit+0x190>)
 8004210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800421a:	2300      	movs	r3, #0
 800421c:	60bb      	str	r3, [r7, #8]
 800421e:	4b1e      	ldr	r3, [pc, #120]	; (8004298 <HAL_CAN_MspInit+0x190>)
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	4a1d      	ldr	r2, [pc, #116]	; (8004298 <HAL_CAN_MspInit+0x190>)
 8004224:	f043 0302 	orr.w	r3, r3, #2
 8004228:	6313      	str	r3, [r2, #48]	; 0x30
 800422a:	4b1b      	ldr	r3, [pc, #108]	; (8004298 <HAL_CAN_MspInit+0x190>)
 800422c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	60bb      	str	r3, [r7, #8]
 8004234:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004236:	2360      	movs	r3, #96	; 0x60
 8004238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423a:	2302      	movs	r3, #2
 800423c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423e:	2300      	movs	r3, #0
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004242:	2303      	movs	r3, #3
 8004244:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8004246:	2309      	movs	r3, #9
 8004248:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800424a:	f107 031c 	add.w	r3, r7, #28
 800424e:	4619      	mov	r1, r3
 8004250:	4814      	ldr	r0, [pc, #80]	; (80042a4 <HAL_CAN_MspInit+0x19c>)
 8004252:	f002 ff0f 	bl	8007074 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8004256:	2200      	movs	r2, #0
 8004258:	2105      	movs	r1, #5
 800425a:	203f      	movs	r0, #63	; 0x3f
 800425c:	f002 fb54 	bl	8006908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8004260:	203f      	movs	r0, #63	; 0x3f
 8004262:	f002 fb6d 	bl	8006940 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8004266:	2200      	movs	r2, #0
 8004268:	2105      	movs	r1, #5
 800426a:	2040      	movs	r0, #64	; 0x40
 800426c:	f002 fb4c 	bl	8006908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8004270:	2040      	movs	r0, #64	; 0x40
 8004272:	f002 fb65 	bl	8006940 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8004276:	2200      	movs	r2, #0
 8004278:	2105      	movs	r1, #5
 800427a:	2041      	movs	r0, #65	; 0x41
 800427c:	f002 fb44 	bl	8006908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8004280:	2041      	movs	r0, #65	; 0x41
 8004282:	f002 fb5d 	bl	8006940 <HAL_NVIC_EnableIRQ>
}
 8004286:	bf00      	nop
 8004288:	3730      	adds	r7, #48	; 0x30
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	40006400 	.word	0x40006400
 8004294:	20000dd0 	.word	0x20000dd0
 8004298:	40023800 	.word	0x40023800
 800429c:	40020c00 	.word	0x40020c00
 80042a0:	40006800 	.word	0x40006800
 80042a4:	40020400 	.word	0x40020400

080042a8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80042ac:	4b06      	ldr	r3, [pc, #24]	; (80042c8 <MX_CRC_Init+0x20>)
 80042ae:	4a07      	ldr	r2, [pc, #28]	; (80042cc <MX_CRC_Init+0x24>)
 80042b0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80042b2:	4805      	ldr	r0, [pc, #20]	; (80042c8 <MX_CRC_Init+0x20>)
 80042b4:	f002 fb52 	bl	800695c <HAL_CRC_Init>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80042be:	f000 facd 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80042c2:	bf00      	nop
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	20000dd4 	.word	0x20000dd4
 80042cc:	40023000 	.word	0x40023000

080042d0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a0b      	ldr	r2, [pc, #44]	; (800430c <HAL_CRC_MspInit+0x3c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d10d      	bne.n	80042fe <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80042e2:	2300      	movs	r3, #0
 80042e4:	60fb      	str	r3, [r7, #12]
 80042e6:	4b0a      	ldr	r3, [pc, #40]	; (8004310 <HAL_CRC_MspInit+0x40>)
 80042e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ea:	4a09      	ldr	r2, [pc, #36]	; (8004310 <HAL_CRC_MspInit+0x40>)
 80042ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042f0:	6313      	str	r3, [r2, #48]	; 0x30
 80042f2:	4b07      	ldr	r3, [pc, #28]	; (8004310 <HAL_CRC_MspInit+0x40>)
 80042f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80042fe:	bf00      	nop
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	40023000 	.word	0x40023000
 8004310:	40023800 	.word	0x40023800

08004314 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	607b      	str	r3, [r7, #4]
 800431e:	4b18      	ldr	r3, [pc, #96]	; (8004380 <MX_DMA_Init+0x6c>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004322:	4a17      	ldr	r2, [pc, #92]	; (8004380 <MX_DMA_Init+0x6c>)
 8004324:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004328:	6313      	str	r3, [r2, #48]	; 0x30
 800432a:	4b15      	ldr	r3, [pc, #84]	; (8004380 <MX_DMA_Init+0x6c>)
 800432c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004332:	607b      	str	r3, [r7, #4]
 8004334:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8004336:	2200      	movs	r2, #0
 8004338:	2105      	movs	r1, #5
 800433a:	2038      	movs	r0, #56	; 0x38
 800433c:	f002 fae4 	bl	8006908 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004340:	2038      	movs	r0, #56	; 0x38
 8004342:	f002 fafd 	bl	8006940 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8004346:	2200      	movs	r2, #0
 8004348:	2105      	movs	r1, #5
 800434a:	203a      	movs	r0, #58	; 0x3a
 800434c:	f002 fadc 	bl	8006908 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004350:	203a      	movs	r0, #58	; 0x3a
 8004352:	f002 faf5 	bl	8006940 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8004356:	2200      	movs	r2, #0
 8004358:	2105      	movs	r1, #5
 800435a:	2044      	movs	r0, #68	; 0x44
 800435c:	f002 fad4 	bl	8006908 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8004360:	2044      	movs	r0, #68	; 0x44
 8004362:	f002 faed 	bl	8006940 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8004366:	2200      	movs	r2, #0
 8004368:	2105      	movs	r1, #5
 800436a:	2046      	movs	r0, #70	; 0x46
 800436c:	f002 facc 	bl	8006908 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8004370:	2046      	movs	r0, #70	; 0x46
 8004372:	f002 fae5 	bl	8006940 <HAL_NVIC_EnableIRQ>

}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40023800 	.word	0x40023800

08004384 <configureTimerForRunTimeStats>:
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0

}
 8004388:	bf00      	nop
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8004392:	b480      	push	{r7}
 8004394:	af00      	add	r7, sp, #0
return 0;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <vApplicationStackOverflowHook>:
/* USER CODE END 1 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b083      	sub	sp, #12
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80043ac:	bf00      	nop
 80043ae:	370c      	adds	r7, #12
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr

080043b8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
void vApplicationMallocFailedHook(void)
{
 80043b8:	b480      	push	{r7}
 80043ba:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80043bc:	bf00      	nop
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of printQueue */
  printQueueHandle = osMessageQueueNew (16, sizeof(uint8_t), &printQueue_attributes);
 80043cc:	4a18      	ldr	r2, [pc, #96]	; (8004430 <MX_FREERTOS_Init+0x68>)
 80043ce:	2101      	movs	r1, #1
 80043d0:	2010      	movs	r0, #16
 80043d2:	f007 fb25 	bl	800ba20 <osMessageQueueNew>
 80043d6:	4603      	mov	r3, r0
 80043d8:	4a16      	ldr	r2, [pc, #88]	; (8004434 <MX_FREERTOS_Init+0x6c>)
 80043da:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80043dc:	4a16      	ldr	r2, [pc, #88]	; (8004438 <MX_FREERTOS_Init+0x70>)
 80043de:	2100      	movs	r1, #0
 80043e0:	4816      	ldr	r0, [pc, #88]	; (800443c <MX_FREERTOS_Init+0x74>)
 80043e2:	f007 f823 	bl	800b42c <osThreadNew>
 80043e6:	4603      	mov	r3, r0
 80043e8:	4a15      	ldr	r2, [pc, #84]	; (8004440 <MX_FREERTOS_Init+0x78>)
 80043ea:	6013      	str	r3, [r2, #0]

  /* creation of canzero */
  canzeroHandle = osThreadNew(canzero_start, NULL, &canzero_attributes);
 80043ec:	4a15      	ldr	r2, [pc, #84]	; (8004444 <MX_FREERTOS_Init+0x7c>)
 80043ee:	2100      	movs	r1, #0
 80043f0:	4815      	ldr	r0, [pc, #84]	; (8004448 <MX_FREERTOS_Init+0x80>)
 80043f2:	f007 f81b 	bl	800b42c <osThreadNew>
 80043f6:	4603      	mov	r3, r0
 80043f8:	4a14      	ldr	r2, [pc, #80]	; (800444c <MX_FREERTOS_Init+0x84>)
 80043fa:	6013      	str	r3, [r2, #0]

  /* creation of fms */
  fmsHandle = osThreadNew(state_maschine_entry, NULL, &fms_attributes);
 80043fc:	4a14      	ldr	r2, [pc, #80]	; (8004450 <MX_FREERTOS_Init+0x88>)
 80043fe:	2100      	movs	r1, #0
 8004400:	4814      	ldr	r0, [pc, #80]	; (8004454 <MX_FREERTOS_Init+0x8c>)
 8004402:	f007 f813 	bl	800b42c <osThreadNew>
 8004406:	4603      	mov	r3, r0
 8004408:	4a13      	ldr	r2, [pc, #76]	; (8004458 <MX_FREERTOS_Init+0x90>)
 800440a:	6013      	str	r3, [r2, #0]

  /* creation of main */
  mainHandle = osThreadNew(main_entry, NULL, &main_attributes);
 800440c:	4a13      	ldr	r2, [pc, #76]	; (800445c <MX_FREERTOS_Init+0x94>)
 800440e:	2100      	movs	r1, #0
 8004410:	4813      	ldr	r0, [pc, #76]	; (8004460 <MX_FREERTOS_Init+0x98>)
 8004412:	f007 f80b 	bl	800b42c <osThreadNew>
 8004416:	4603      	mov	r3, r0
 8004418:	4a12      	ldr	r2, [pc, #72]	; (8004464 <MX_FREERTOS_Init+0x9c>)
 800441a:	6013      	str	r3, [r2, #0]

  /* creation of info_task */
  info_taskHandle = osThreadNew(microcontroller_info_entry, NULL, &info_task_attributes);
 800441c:	4a12      	ldr	r2, [pc, #72]	; (8004468 <MX_FREERTOS_Init+0xa0>)
 800441e:	2100      	movs	r1, #0
 8004420:	4812      	ldr	r0, [pc, #72]	; (800446c <MX_FREERTOS_Init+0xa4>)
 8004422:	f007 f803 	bl	800b42c <osThreadNew>
 8004426:	4603      	mov	r3, r0
 8004428:	4a11      	ldr	r2, [pc, #68]	; (8004470 <MX_FREERTOS_Init+0xa8>)
 800442a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800442c:	bf00      	nop
 800442e:	bd80      	pop	{r7, pc}
 8004430:	08011f84 	.word	0x08011f84
 8004434:	200010b0 	.word	0x200010b0
 8004438:	08011ed0 	.word	0x08011ed0
 800443c:	08004475 	.word	0x08004475
 8004440:	20000ddc 	.word	0x20000ddc
 8004444:	08011ef4 	.word	0x08011ef4
 8004448:	08001655 	.word	0x08001655
 800444c:	200010a0 	.word	0x200010a0
 8004450:	08011f18 	.word	0x08011f18
 8004454:	08003bc9 	.word	0x08003bc9
 8004458:	200010a4 	.word	0x200010a4
 800445c:	08011f3c 	.word	0x08011f3c
 8004460:	08002809 	.word	0x08002809
 8004464:	200010a8 	.word	0x200010a8
 8004468:	08011f60 	.word	0x08011f60
 800446c:	08002e57 	.word	0x08002e57
 8004470:	200010ac 	.word	0x200010ac

08004474 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800447c:	2001      	movs	r0, #1
 800447e:	f007 f867 	bl	800b550 <osDelay>
 8004482:	e7fb      	b.n	800447c <StartDefaultTask+0x8>

08004484 <MX_GPIO_Init>:
        * EXTI
     PC0   ------> SharedAnalog_PC0
     PC2   ------> SharedAnalog_PC2
*/
void MX_GPIO_Init(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08a      	sub	sp, #40	; 0x28
 8004488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800448a:	f107 0314 	add.w	r3, r7, #20
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	605a      	str	r2, [r3, #4]
 8004494:	609a      	str	r2, [r3, #8]
 8004496:	60da      	str	r2, [r3, #12]
 8004498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800449a:	2300      	movs	r3, #0
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	4b58      	ldr	r3, [pc, #352]	; (8004600 <MX_GPIO_Init+0x17c>)
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	4a57      	ldr	r2, [pc, #348]	; (8004600 <MX_GPIO_Init+0x17c>)
 80044a4:	f043 0304 	orr.w	r3, r3, #4
 80044a8:	6313      	str	r3, [r2, #48]	; 0x30
 80044aa:	4b55      	ldr	r3, [pc, #340]	; (8004600 <MX_GPIO_Init+0x17c>)
 80044ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ae:	f003 0304 	and.w	r3, r3, #4
 80044b2:	613b      	str	r3, [r7, #16]
 80044b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80044b6:	2300      	movs	r3, #0
 80044b8:	60fb      	str	r3, [r7, #12]
 80044ba:	4b51      	ldr	r3, [pc, #324]	; (8004600 <MX_GPIO_Init+0x17c>)
 80044bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044be:	4a50      	ldr	r2, [pc, #320]	; (8004600 <MX_GPIO_Init+0x17c>)
 80044c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c4:	6313      	str	r3, [r2, #48]	; 0x30
 80044c6:	4b4e      	ldr	r3, [pc, #312]	; (8004600 <MX_GPIO_Init+0x17c>)
 80044c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ce:	60fb      	str	r3, [r7, #12]
 80044d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80044d2:	2300      	movs	r3, #0
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	4b4a      	ldr	r3, [pc, #296]	; (8004600 <MX_GPIO_Init+0x17c>)
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	4a49      	ldr	r2, [pc, #292]	; (8004600 <MX_GPIO_Init+0x17c>)
 80044dc:	f043 0301 	orr.w	r3, r3, #1
 80044e0:	6313      	str	r3, [r2, #48]	; 0x30
 80044e2:	4b47      	ldr	r3, [pc, #284]	; (8004600 <MX_GPIO_Init+0x17c>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	60bb      	str	r3, [r7, #8]
 80044ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80044ee:	2300      	movs	r3, #0
 80044f0:	607b      	str	r3, [r7, #4]
 80044f2:	4b43      	ldr	r3, [pc, #268]	; (8004600 <MX_GPIO_Init+0x17c>)
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	4a42      	ldr	r2, [pc, #264]	; (8004600 <MX_GPIO_Init+0x17c>)
 80044f8:	f043 0302 	orr.w	r3, r3, #2
 80044fc:	6313      	str	r3, [r2, #48]	; 0x30
 80044fe:	4b40      	ldr	r3, [pc, #256]	; (8004600 <MX_GPIO_Init+0x17c>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	f003 0302 	and.w	r3, r3, #2
 8004506:	607b      	str	r3, [r7, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800450a:	2300      	movs	r3, #0
 800450c:	603b      	str	r3, [r7, #0]
 800450e:	4b3c      	ldr	r3, [pc, #240]	; (8004600 <MX_GPIO_Init+0x17c>)
 8004510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004512:	4a3b      	ldr	r2, [pc, #236]	; (8004600 <MX_GPIO_Init+0x17c>)
 8004514:	f043 0308 	orr.w	r3, r3, #8
 8004518:	6313      	str	r3, [r2, #48]	; 0x30
 800451a:	4b39      	ldr	r3, [pc, #228]	; (8004600 <MX_GPIO_Init+0x17c>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451e:	f003 0308 	and.w	r3, r3, #8
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin, GPIO_PIN_RESET);
 8004526:	2200      	movs	r2, #0
 8004528:	f641 4102 	movw	r1, #7170	; 0x1c02
 800452c:	4835      	ldr	r0, [pc, #212]	; (8004604 <MX_GPIO_Init+0x180>)
 800452e:	f002 ff3d 	bl	80073ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIN4_GPIO_Port, DIN4_Pin, GPIO_PIN_SET);
 8004532:	2201      	movs	r2, #1
 8004534:	2180      	movs	r1, #128	; 0x80
 8004536:	4833      	ldr	r0, [pc, #204]	; (8004604 <MX_GPIO_Init+0x180>)
 8004538:	f002 ff38 	bl	80073ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ADC_IN10_Board_Temp_Pin|ADC_IN12_Board_VCC_Pin;
 800453c:	2305      	movs	r3, #5
 800453e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004540:	2303      	movs	r3, #3
 8004542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004544:	2300      	movs	r3, #0
 8004546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004548:	f107 0314 	add.w	r3, r7, #20
 800454c:	4619      	mov	r1, r3
 800454e:	482e      	ldr	r0, [pc, #184]	; (8004608 <MX_GPIO_Init+0x184>)
 8004550:	f002 fd90 	bl	8007074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = DIN1_Pin|DIN2_Pin;
 8004554:	230a      	movs	r3, #10
 8004556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004558:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800455c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004562:	f107 0314 	add.w	r3, r7, #20
 8004566:	4619      	mov	r1, r3
 8004568:	4827      	ldr	r0, [pc, #156]	; (8004608 <MX_GPIO_Init+0x184>)
 800456a:	f002 fd83 	bl	8007074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SDC_Pin|CS_IMU2_Pin|CS_IMU3_Pin|CS_IMU1_Pin;
 800456e:	f641 4302 	movw	r3, #7170	; 0x1c02
 8004572:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004574:	2301      	movs	r3, #1
 8004576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004578:	2300      	movs	r3, #0
 800457a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800457c:	2300      	movs	r3, #0
 800457e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004580:	f107 0314 	add.w	r3, r7, #20
 8004584:	4619      	mov	r1, r3
 8004586:	481f      	ldr	r0, [pc, #124]	; (8004604 <MX_GPIO_Init+0x180>)
 8004588:	f002 fd74 	bl	8007074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = SDC_IN_STATUS_Pin|SDC_OUT_STATUS_Pin;
 800458c:	2318      	movs	r3, #24
 800458e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004590:	2300      	movs	r3, #0
 8004592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004594:	2300      	movs	r3, #0
 8004596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004598:	f107 0314 	add.w	r3, r7, #20
 800459c:	4619      	mov	r1, r3
 800459e:	481b      	ldr	r0, [pc, #108]	; (800460c <MX_GPIO_Init+0x188>)
 80045a0:	f002 fd68 	bl	8007074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIN3_Pin;
 80045a4:	2310      	movs	r3, #16
 80045a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80045a8:	2300      	movs	r3, #0
 80045aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIN3_GPIO_Port, &GPIO_InitStruct);
 80045b0:	f107 0314 	add.w	r3, r7, #20
 80045b4:	4619      	mov	r1, r3
 80045b6:	4813      	ldr	r0, [pc, #76]	; (8004604 <MX_GPIO_Init+0x180>)
 80045b8:	f002 fd5c 	bl	8007074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIN4_Pin;
 80045bc:	2380      	movs	r3, #128	; 0x80
 80045be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045c0:	2301      	movs	r3, #1
 80045c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80045c4:	2302      	movs	r3, #2
 80045c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045c8:	2300      	movs	r3, #0
 80045ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIN4_GPIO_Port, &GPIO_InitStruct);
 80045cc:	f107 0314 	add.w	r3, r7, #20
 80045d0:	4619      	mov	r1, r3
 80045d2:	480c      	ldr	r0, [pc, #48]	; (8004604 <MX_GPIO_Init+0x180>)
 80045d4:	f002 fd4e 	bl	8007074 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80045d8:	2200      	movs	r2, #0
 80045da:	2105      	movs	r1, #5
 80045dc:	2007      	movs	r0, #7
 80045de:	f002 f993 	bl	8006908 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80045e2:	2007      	movs	r0, #7
 80045e4:	f002 f9ac 	bl	8006940 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80045e8:	2200      	movs	r2, #0
 80045ea:	2105      	movs	r1, #5
 80045ec:	2009      	movs	r0, #9
 80045ee:	f002 f98b 	bl	8006908 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80045f2:	2009      	movs	r0, #9
 80045f4:	f002 f9a4 	bl	8006940 <HAL_NVIC_EnableIRQ>

}
 80045f8:	bf00      	nop
 80045fa:	3728      	adds	r7, #40	; 0x28
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	40023800 	.word	0x40023800
 8004604:	40020400 	.word	0x40020400
 8004608:	40020800 	.word	0x40020800
 800460c:	40020c00 	.word	0x40020c00

08004610 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004614:	4b12      	ldr	r3, [pc, #72]	; (8004660 <MX_I2C1_Init+0x50>)
 8004616:	4a13      	ldr	r2, [pc, #76]	; (8004664 <MX_I2C1_Init+0x54>)
 8004618:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800461a:	4b11      	ldr	r3, [pc, #68]	; (8004660 <MX_I2C1_Init+0x50>)
 800461c:	4a12      	ldr	r2, [pc, #72]	; (8004668 <MX_I2C1_Init+0x58>)
 800461e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004620:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <MX_I2C1_Init+0x50>)
 8004622:	2200      	movs	r2, #0
 8004624:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004626:	4b0e      	ldr	r3, [pc, #56]	; (8004660 <MX_I2C1_Init+0x50>)
 8004628:	2200      	movs	r2, #0
 800462a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800462c:	4b0c      	ldr	r3, [pc, #48]	; (8004660 <MX_I2C1_Init+0x50>)
 800462e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004632:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004634:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <MX_I2C1_Init+0x50>)
 8004636:	2200      	movs	r2, #0
 8004638:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800463a:	4b09      	ldr	r3, [pc, #36]	; (8004660 <MX_I2C1_Init+0x50>)
 800463c:	2200      	movs	r2, #0
 800463e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004640:	4b07      	ldr	r3, [pc, #28]	; (8004660 <MX_I2C1_Init+0x50>)
 8004642:	2200      	movs	r2, #0
 8004644:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004646:	4b06      	ldr	r3, [pc, #24]	; (8004660 <MX_I2C1_Init+0x50>)
 8004648:	2200      	movs	r2, #0
 800464a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800464c:	4804      	ldr	r0, [pc, #16]	; (8004660 <MX_I2C1_Init+0x50>)
 800464e:	f002 fedf 	bl	8007410 <HAL_I2C_Init>
 8004652:	4603      	mov	r3, r0
 8004654:	2b00      	cmp	r3, #0
 8004656:	d001      	beq.n	800465c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004658:	f000 f900 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800465c:	bf00      	nop
 800465e:	bd80      	pop	{r7, pc}
 8004660:	200010b4 	.word	0x200010b4
 8004664:	40005400 	.word	0x40005400
 8004668:	000186a0 	.word	0x000186a0

0800466c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	; 0x28
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004674:	f107 0314 	add.w	r3, r7, #20
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	605a      	str	r2, [r3, #4]
 800467e:	609a      	str	r2, [r3, #8]
 8004680:	60da      	str	r2, [r3, #12]
 8004682:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a19      	ldr	r2, [pc, #100]	; (80046f0 <HAL_I2C_MspInit+0x84>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d12c      	bne.n	80046e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800468e:	2300      	movs	r3, #0
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	4b18      	ldr	r3, [pc, #96]	; (80046f4 <HAL_I2C_MspInit+0x88>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	4a17      	ldr	r2, [pc, #92]	; (80046f4 <HAL_I2C_MspInit+0x88>)
 8004698:	f043 0302 	orr.w	r3, r3, #2
 800469c:	6313      	str	r3, [r2, #48]	; 0x30
 800469e:	4b15      	ldr	r3, [pc, #84]	; (80046f4 <HAL_I2C_MspInit+0x88>)
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_IMU_Pin|I2C_SDA_IMU_Pin;
 80046aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80046ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80046b0:	2312      	movs	r3, #18
 80046b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046b4:	2301      	movs	r3, #1
 80046b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046b8:	2303      	movs	r3, #3
 80046ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80046bc:	2304      	movs	r3, #4
 80046be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80046c0:	f107 0314 	add.w	r3, r7, #20
 80046c4:	4619      	mov	r1, r3
 80046c6:	480c      	ldr	r0, [pc, #48]	; (80046f8 <HAL_I2C_MspInit+0x8c>)
 80046c8:	f002 fcd4 	bl	8007074 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
 80046d0:	4b08      	ldr	r3, [pc, #32]	; (80046f4 <HAL_I2C_MspInit+0x88>)
 80046d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d4:	4a07      	ldr	r2, [pc, #28]	; (80046f4 <HAL_I2C_MspInit+0x88>)
 80046d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80046da:	6413      	str	r3, [r2, #64]	; 0x40
 80046dc:	4b05      	ldr	r3, [pc, #20]	; (80046f4 <HAL_I2C_MspInit+0x88>)
 80046de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80046e8:	bf00      	nop
 80046ea:	3728      	adds	r7, #40	; 0x28
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40005400 	.word	0x40005400
 80046f4:	40023800 	.word	0x40023800
 80046f8:	40020400 	.word	0x40020400

080046fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004700:	f000 ffc8 	bl	8005694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004704:	f000 f82c 	bl	8004760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004708:	f7ff febc 	bl	8004484 <MX_GPIO_Init>
  MX_DMA_Init();
 800470c:	f7ff fe02 	bl	8004314 <MX_DMA_Init>
  MX_ADC1_Init();
 8004710:	f7ff fa66 	bl	8003be0 <MX_ADC1_Init>
  MX_CAN1_Init();
 8004714:	f7ff fc8c 	bl	8004030 <MX_CAN1_Init>
  MX_CAN2_Init();
 8004718:	f7ff fcc0 	bl	800409c <MX_CAN2_Init>
  MX_CRC_Init();
 800471c:	f7ff fdc4 	bl	80042a8 <MX_CRC_Init>
  MX_RNG_Init();
 8004720:	f000 f8a2 	bl	8004868 <MX_RNG_Init>
  MX_USART2_UART_Init();
 8004724:	f000 fe7e 	bl	8005424 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8004728:	f000 fc0c 	bl	8004f44 <MX_TIM4_Init>
  MX_ADC2_Init();
 800472c:	f7ff fad4 	bl	8003cd8 <MX_ADC2_Init>
  MX_I2C1_Init();
 8004730:	f7ff ff6e 	bl	8004610 <MX_I2C1_Init>
  MX_SPI2_Init();
 8004734:	f000 f8ce 	bl	80048d4 <MX_SPI2_Init>
  MX_TIM5_Init();
 8004738:	f000 fc90 	bl	800505c <MX_TIM5_Init>
  MX_USART1_UART_Init();
 800473c:	f000 fe48 	bl	80053d0 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8004740:	f000 fd1a 	bl	8005178 <MX_TIM14_Init>
  MX_TIM2_Init();
 8004744:	f000 fb62 	bl	8004e0c <MX_TIM2_Init>
  MX_TIM9_Init();
 8004748:	f000 fcdc 	bl	8005104 <MX_TIM9_Init>
  MX_TIM3_Init();
 800474c:	f000 fbac 	bl	8004ea8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8004750:	f006 fe22 	bl	800b398 <osKernelInitialize>
  MX_FREERTOS_Init();
 8004754:	f7ff fe38 	bl	80043c8 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004758:	f006 fe42 	bl	800b3e0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800475c:	e7fe      	b.n	800475c <main+0x60>
	...

08004760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b094      	sub	sp, #80	; 0x50
 8004764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004766:	f107 0320 	add.w	r3, r7, #32
 800476a:	2230      	movs	r2, #48	; 0x30
 800476c:	2100      	movs	r1, #0
 800476e:	4618      	mov	r0, r3
 8004770:	f00a fe12 	bl	800f398 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004774:	f107 030c 	add.w	r3, r7, #12
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	605a      	str	r2, [r3, #4]
 800477e:	609a      	str	r2, [r3, #8]
 8004780:	60da      	str	r2, [r3, #12]
 8004782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004784:	2300      	movs	r3, #0
 8004786:	60bb      	str	r3, [r7, #8]
 8004788:	4b28      	ldr	r3, [pc, #160]	; (800482c <SystemClock_Config+0xcc>)
 800478a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478c:	4a27      	ldr	r2, [pc, #156]	; (800482c <SystemClock_Config+0xcc>)
 800478e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004792:	6413      	str	r3, [r2, #64]	; 0x40
 8004794:	4b25      	ldr	r3, [pc, #148]	; (800482c <SystemClock_Config+0xcc>)
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80047a0:	2300      	movs	r3, #0
 80047a2:	607b      	str	r3, [r7, #4]
 80047a4:	4b22      	ldr	r3, [pc, #136]	; (8004830 <SystemClock_Config+0xd0>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a21      	ldr	r2, [pc, #132]	; (8004830 <SystemClock_Config+0xd0>)
 80047aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047ae:	6013      	str	r3, [r2, #0]
 80047b0:	4b1f      	ldr	r3, [pc, #124]	; (8004830 <SystemClock_Config+0xd0>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047b8:	607b      	str	r3, [r7, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80047bc:	2301      	movs	r3, #1
 80047be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80047c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047c6:	2302      	movs	r3, #2
 80047c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80047ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80047ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80047d0:	2308      	movs	r3, #8
 80047d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80047d4:	23a8      	movs	r3, #168	; 0xa8
 80047d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80047d8:	2302      	movs	r3, #2
 80047da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80047dc:	2307      	movs	r3, #7
 80047de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047e0:	f107 0320 	add.w	r3, r7, #32
 80047e4:	4618      	mov	r0, r3
 80047e6:	f002 ff57 	bl	8007698 <HAL_RCC_OscConfig>
 80047ea:	4603      	mov	r3, r0
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d001      	beq.n	80047f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80047f0:	f000 f834 	bl	800485c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047f4:	230f      	movs	r3, #15
 80047f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047f8:	2302      	movs	r3, #2
 80047fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047fc:	2300      	movs	r3, #0
 80047fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004800:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004804:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800480a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800480c:	f107 030c 	add.w	r3, r7, #12
 8004810:	2105      	movs	r1, #5
 8004812:	4618      	mov	r0, r3
 8004814:	f003 f9b8 	bl	8007b88 <HAL_RCC_ClockConfig>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800481e:	f000 f81d 	bl	800485c <Error_Handler>
  }
}
 8004822:	bf00      	nop
 8004824:	3750      	adds	r7, #80	; 0x50
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	40023800 	.word	0x40023800
 8004830:	40007000 	.word	0x40007000

08004834 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a05      	ldr	r2, [pc, #20]	; (8004858 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d101      	bne.n	800484a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004846:	f000 ff47 	bl	80056d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  PeriodElapsedCallback(htim);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f005 f899 	bl	8009982 <PeriodElapsedCallback>

  /* USER CODE END Callback 1 */
}
 8004850:	bf00      	nop
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	40010000 	.word	0x40010000

0800485c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800485c:	b480      	push	{r7}
 800485e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004860:	b672      	cpsid	i
}
 8004862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004864:	e7fe      	b.n	8004864 <Error_Handler+0x8>
	...

08004868 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800486c:	4b06      	ldr	r3, [pc, #24]	; (8004888 <MX_RNG_Init+0x20>)
 800486e:	4a07      	ldr	r2, [pc, #28]	; (800488c <MX_RNG_Init+0x24>)
 8004870:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8004872:	4805      	ldr	r0, [pc, #20]	; (8004888 <MX_RNG_Init+0x20>)
 8004874:	f003 fbd8 	bl	8008028 <HAL_RNG_Init>
 8004878:	4603      	mov	r3, r0
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800487e:	f7ff ffed 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8004882:	bf00      	nop
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	20001108 	.word	0x20001108
 800488c:	50060800 	.word	0x50060800

08004890 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a0b      	ldr	r2, [pc, #44]	; (80048cc <HAL_RNG_MspInit+0x3c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d10d      	bne.n	80048be <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80048a2:	2300      	movs	r3, #0
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	4b0a      	ldr	r3, [pc, #40]	; (80048d0 <HAL_RNG_MspInit+0x40>)
 80048a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048aa:	4a09      	ldr	r2, [pc, #36]	; (80048d0 <HAL_RNG_MspInit+0x40>)
 80048ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b0:	6353      	str	r3, [r2, #52]	; 0x34
 80048b2:	4b07      	ldr	r3, [pc, #28]	; (80048d0 <HAL_RNG_MspInit+0x40>)
 80048b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80048be:	bf00      	nop
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	50060800 	.word	0x50060800
 80048d0:	40023800 	.word	0x40023800

080048d4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80048d8:	4b17      	ldr	r3, [pc, #92]	; (8004938 <MX_SPI2_Init+0x64>)
 80048da:	4a18      	ldr	r2, [pc, #96]	; (800493c <MX_SPI2_Init+0x68>)
 80048dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80048de:	4b16      	ldr	r3, [pc, #88]	; (8004938 <MX_SPI2_Init+0x64>)
 80048e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80048e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80048e6:	4b14      	ldr	r3, [pc, #80]	; (8004938 <MX_SPI2_Init+0x64>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80048ec:	4b12      	ldr	r3, [pc, #72]	; (8004938 <MX_SPI2_Init+0x64>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80048f2:	4b11      	ldr	r3, [pc, #68]	; (8004938 <MX_SPI2_Init+0x64>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80048f8:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <MX_SPI2_Init+0x64>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80048fe:	4b0e      	ldr	r3, [pc, #56]	; (8004938 <MX_SPI2_Init+0x64>)
 8004900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004904:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004906:	4b0c      	ldr	r3, [pc, #48]	; (8004938 <MX_SPI2_Init+0x64>)
 8004908:	2200      	movs	r2, #0
 800490a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800490c:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <MX_SPI2_Init+0x64>)
 800490e:	2200      	movs	r2, #0
 8004910:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004912:	4b09      	ldr	r3, [pc, #36]	; (8004938 <MX_SPI2_Init+0x64>)
 8004914:	2200      	movs	r2, #0
 8004916:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004918:	4b07      	ldr	r3, [pc, #28]	; (8004938 <MX_SPI2_Init+0x64>)
 800491a:	2200      	movs	r2, #0
 800491c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800491e:	4b06      	ldr	r3, [pc, #24]	; (8004938 <MX_SPI2_Init+0x64>)
 8004920:	220a      	movs	r2, #10
 8004922:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004924:	4804      	ldr	r0, [pc, #16]	; (8004938 <MX_SPI2_Init+0x64>)
 8004926:	f003 fba9 	bl	800807c <HAL_SPI_Init>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004930:	f7ff ff94 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004934:	bf00      	nop
 8004936:	bd80      	pop	{r7, pc}
 8004938:	20001118 	.word	0x20001118
 800493c:	40003800 	.word	0x40003800

08004940 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08a      	sub	sp, #40	; 0x28
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004948:	f107 0314 	add.w	r3, r7, #20
 800494c:	2200      	movs	r2, #0
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	605a      	str	r2, [r3, #4]
 8004952:	609a      	str	r2, [r3, #8]
 8004954:	60da      	str	r2, [r3, #12]
 8004956:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a19      	ldr	r2, [pc, #100]	; (80049c4 <HAL_SPI_MspInit+0x84>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d12c      	bne.n	80049bc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004962:	2300      	movs	r3, #0
 8004964:	613b      	str	r3, [r7, #16]
 8004966:	4b18      	ldr	r3, [pc, #96]	; (80049c8 <HAL_SPI_MspInit+0x88>)
 8004968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496a:	4a17      	ldr	r2, [pc, #92]	; (80049c8 <HAL_SPI_MspInit+0x88>)
 800496c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004970:	6413      	str	r3, [r2, #64]	; 0x40
 8004972:	4b15      	ldr	r3, [pc, #84]	; (80049c8 <HAL_SPI_MspInit+0x88>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800497a:	613b      	str	r3, [r7, #16]
 800497c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	4b11      	ldr	r3, [pc, #68]	; (80049c8 <HAL_SPI_MspInit+0x88>)
 8004984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004986:	4a10      	ldr	r2, [pc, #64]	; (80049c8 <HAL_SPI_MspInit+0x88>)
 8004988:	f043 0302 	orr.w	r3, r3, #2
 800498c:	6313      	str	r3, [r2, #48]	; 0x30
 800498e:	4b0e      	ldr	r3, [pc, #56]	; (80049c8 <HAL_SPI_MspInit+0x88>)
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800499a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800499e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049a0:	2302      	movs	r3, #2
 80049a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a4:	2300      	movs	r3, #0
 80049a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049a8:	2303      	movs	r3, #3
 80049aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80049ac:	2305      	movs	r3, #5
 80049ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049b0:	f107 0314 	add.w	r3, r7, #20
 80049b4:	4619      	mov	r1, r3
 80049b6:	4805      	ldr	r0, [pc, #20]	; (80049cc <HAL_SPI_MspInit+0x8c>)
 80049b8:	f002 fb5c 	bl	8007074 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80049bc:	bf00      	nop
 80049be:	3728      	adds	r7, #40	; 0x28
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40003800 	.word	0x40003800
 80049c8:	40023800 	.word	0x40023800
 80049cc:	40020400 	.word	0x40020400

080049d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049d6:	2300      	movs	r3, #0
 80049d8:	607b      	str	r3, [r7, #4]
 80049da:	4b12      	ldr	r3, [pc, #72]	; (8004a24 <HAL_MspInit+0x54>)
 80049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049de:	4a11      	ldr	r2, [pc, #68]	; (8004a24 <HAL_MspInit+0x54>)
 80049e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049e4:	6453      	str	r3, [r2, #68]	; 0x44
 80049e6:	4b0f      	ldr	r3, [pc, #60]	; (8004a24 <HAL_MspInit+0x54>)
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ee:	607b      	str	r3, [r7, #4]
 80049f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80049f2:	2300      	movs	r3, #0
 80049f4:	603b      	str	r3, [r7, #0]
 80049f6:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <HAL_MspInit+0x54>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	4a0a      	ldr	r2, [pc, #40]	; (8004a24 <HAL_MspInit+0x54>)
 80049fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a00:	6413      	str	r3, [r2, #64]	; 0x40
 8004a02:	4b08      	ldr	r3, [pc, #32]	; (8004a24 <HAL_MspInit+0x54>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a0e:	2200      	movs	r2, #0
 8004a10:	210f      	movs	r1, #15
 8004a12:	f06f 0001 	mvn.w	r0, #1
 8004a16:	f001 ff77 	bl	8006908 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a1a:	bf00      	nop
 8004a1c:	3708      	adds	r7, #8
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	40023800 	.word	0x40023800

08004a28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b08c      	sub	sp, #48	; 0x30
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8004a30:	2300      	movs	r3, #0
 8004a32:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8004a34:	2300      	movs	r3, #0
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8004a38:	2300      	movs	r3, #0
 8004a3a:	60bb      	str	r3, [r7, #8]
 8004a3c:	4b2f      	ldr	r3, [pc, #188]	; (8004afc <HAL_InitTick+0xd4>)
 8004a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a40:	4a2e      	ldr	r2, [pc, #184]	; (8004afc <HAL_InitTick+0xd4>)
 8004a42:	f043 0301 	orr.w	r3, r3, #1
 8004a46:	6453      	str	r3, [r2, #68]	; 0x44
 8004a48:	4b2c      	ldr	r3, [pc, #176]	; (8004afc <HAL_InitTick+0xd4>)
 8004a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004a54:	f107 020c 	add.w	r2, r7, #12
 8004a58:	f107 0310 	add.w	r3, r7, #16
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f003 fab0 	bl	8007fc4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8004a64:	f003 fa9a 	bl	8007f9c <HAL_RCC_GetPCLK2Freq>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	005b      	lsls	r3, r3, #1
 8004a6c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a70:	4a23      	ldr	r2, [pc, #140]	; (8004b00 <HAL_InitTick+0xd8>)
 8004a72:	fba2 2303 	umull	r2, r3, r2, r3
 8004a76:	0c9b      	lsrs	r3, r3, #18
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004a7c:	4b21      	ldr	r3, [pc, #132]	; (8004b04 <HAL_InitTick+0xdc>)
 8004a7e:	4a22      	ldr	r2, [pc, #136]	; (8004b08 <HAL_InitTick+0xe0>)
 8004a80:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8004a82:	4b20      	ldr	r3, [pc, #128]	; (8004b04 <HAL_InitTick+0xdc>)
 8004a84:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004a88:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8004a8a:	4a1e      	ldr	r2, [pc, #120]	; (8004b04 <HAL_InitTick+0xdc>)
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8004a90:	4b1c      	ldr	r3, [pc, #112]	; (8004b04 <HAL_InitTick+0xdc>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a96:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <HAL_InitTick+0xdc>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004a9c:	4b19      	ldr	r3, [pc, #100]	; (8004b04 <HAL_InitTick+0xdc>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8004aa2:	4818      	ldr	r0, [pc, #96]	; (8004b04 <HAL_InitTick+0xdc>)
 8004aa4:	f003 fb73 	bl	800818e <HAL_TIM_Base_Init>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8004aae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d11b      	bne.n	8004aee <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8004ab6:	4813      	ldr	r0, [pc, #76]	; (8004b04 <HAL_InitTick+0xdc>)
 8004ab8:	f003 fbb8 	bl	800822c <HAL_TIM_Base_Start_IT>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8004ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d111      	bne.n	8004aee <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004aca:	2019      	movs	r0, #25
 8004acc:	f001 ff38 	bl	8006940 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b0f      	cmp	r3, #15
 8004ad4:	d808      	bhi.n	8004ae8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	2019      	movs	r0, #25
 8004adc:	f001 ff14 	bl	8006908 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004ae0:	4a0a      	ldr	r2, [pc, #40]	; (8004b0c <HAL_InitTick+0xe4>)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e002      	b.n	8004aee <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8004aee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3730      	adds	r7, #48	; 0x30
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	40023800 	.word	0x40023800
 8004b00:	431bde83 	.word	0x431bde83
 8004b04:	20001170 	.word	0x20001170
 8004b08:	40010000 	.word	0x40010000
 8004b0c:	20000004 	.word	0x20000004

08004b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b14:	e7fe      	b.n	8004b14 <NMI_Handler+0x4>

08004b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b16:	b480      	push	{r7}
 8004b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b1a:	e7fe      	b.n	8004b1a <HardFault_Handler+0x4>

08004b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b20:	e7fe      	b.n	8004b20 <MemManage_Handler+0x4>

08004b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b22:	b480      	push	{r7}
 8004b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b26:	e7fe      	b.n	8004b26 <BusFault_Handler+0x4>

08004b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b2c:	e7fe      	b.n	8004b2c <UsageFault_Handler+0x4>

08004b2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b32:	bf00      	nop
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIN1_Pin);
 8004b40:	2002      	movs	r0, #2
 8004b42:	f002 fc4d 	bl	80073e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004b46:	bf00      	nop
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIN2_Pin);
 8004b4e:	2008      	movs	r0, #8
 8004b50:	f002 fc46 	bl	80073e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004b54:	bf00      	nop
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004b5c:	4802      	ldr	r0, [pc, #8]	; (8004b68 <CAN1_TX_IRQHandler+0x10>)
 8004b5e:	f001 fbe6 	bl	800632e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8004b62:	bf00      	nop
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20000d80 	.word	0x20000d80

08004b6c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004b70:	4802      	ldr	r0, [pc, #8]	; (8004b7c <CAN1_RX0_IRQHandler+0x10>)
 8004b72:	f001 fbdc 	bl	800632e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004b76:	bf00      	nop
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20000d80 	.word	0x20000d80

08004b80 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004b84:	4802      	ldr	r0, [pc, #8]	; (8004b90 <CAN1_RX1_IRQHandler+0x10>)
 8004b86:	f001 fbd2 	bl	800632e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8004b8a:	bf00      	nop
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000d80 	.word	0x20000d80

08004b94 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8004b98:	4802      	ldr	r0, [pc, #8]	; (8004ba4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8004b9a:	f003 fcb6 	bl	800850a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004b9e:	bf00      	nop
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	200012dc 	.word	0x200012dc

08004ba8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004bac:	4802      	ldr	r0, [pc, #8]	; (8004bb8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8004bae:	f003 fcac 	bl	800850a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004bb2:	bf00      	nop
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20001170 	.word	0x20001170

08004bbc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004bc0:	4802      	ldr	r0, [pc, #8]	; (8004bcc <TIM3_IRQHandler+0x10>)
 8004bc2:	f003 fca2 	bl	800850a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004bc6:	bf00      	nop
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20001204 	.word	0x20001204

08004bd0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004bd4:	4802      	ldr	r0, [pc, #8]	; (8004be0 <DMA2_Stream0_IRQHandler+0x10>)
 8004bd6:	f001 ffe3 	bl	8006ba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004bda:	bf00      	nop
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20000cc0 	.word	0x20000cc0

08004be4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004be8:	4802      	ldr	r0, [pc, #8]	; (8004bf4 <DMA2_Stream2_IRQHandler+0x10>)
 8004bea:	f001 ffd9 	bl	8006ba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004bee:	bf00      	nop
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	20000d20 	.word	0x20000d20

08004bf8 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004bfc:	4802      	ldr	r0, [pc, #8]	; (8004c08 <CAN2_TX_IRQHandler+0x10>)
 8004bfe:	f001 fb96 	bl	800632e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8004c02:	bf00      	nop
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20000da8 	.word	0x20000da8

08004c0c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004c10:	4802      	ldr	r0, [pc, #8]	; (8004c1c <CAN2_RX0_IRQHandler+0x10>)
 8004c12:	f001 fb8c 	bl	800632e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004c16:	bf00      	nop
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000da8 	.word	0x20000da8

08004c20 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8004c24:	4802      	ldr	r0, [pc, #8]	; (8004c30 <CAN2_RX1_IRQHandler+0x10>)
 8004c26:	f001 fb82 	bl	800632e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8004c2a:	bf00      	nop
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000da8 	.word	0x20000da8

08004c34 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004c38:	4802      	ldr	r0, [pc, #8]	; (8004c44 <DMA2_Stream5_IRQHandler+0x10>)
 8004c3a:	f001 ffb1 	bl	8006ba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8004c3e:	bf00      	nop
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20001454 	.word	0x20001454

08004c48 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004c4c:	4802      	ldr	r0, [pc, #8]	; (8004c58 <DMA2_Stream7_IRQHandler+0x10>)
 8004c4e:	f001 ffa7 	bl	8006ba0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004c52:	bf00      	nop
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	200013f4 	.word	0x200013f4

08004c5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  return 1;
 8004c60:	2301      	movs	r3, #1
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <_kill>:

int _kill(int pid, int sig)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004c76:	f00a fa4d 	bl	800f114 <__errno>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2216      	movs	r2, #22
 8004c7e:	601a      	str	r2, [r3, #0]
  return -1;
 8004c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <_exit>:

void _exit (int status)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004c94:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f7ff ffe7 	bl	8004c6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8004c9e:	e7fe      	b.n	8004c9e <_exit+0x12>

08004ca0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cac:	2300      	movs	r3, #0
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	e00a      	b.n	8004cc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004cb2:	f3af 8000 	nop.w
 8004cb6:	4601      	mov	r1, r0
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	60ba      	str	r2, [r7, #8]
 8004cbe:	b2ca      	uxtb	r2, r1
 8004cc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	dbf0      	blt.n	8004cb2 <_read+0x12>
  }

  return len;
 8004cd0:	687b      	ldr	r3, [r7, #4]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b086      	sub	sp, #24
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
 8004cea:	e009      	b.n	8004d00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	60ba      	str	r2, [r7, #8]
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	dbf1      	blt.n	8004cec <_write+0x12>
  }
  return len;
 8004d08:	687b      	ldr	r3, [r7, #4]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <_close>:

int _close(int file)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004d1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b083      	sub	sp, #12
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d3a:	605a      	str	r2, [r3, #4]
  return 0;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <_isatty>:

int _isatty(int file)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b083      	sub	sp, #12
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004d52:	2301      	movs	r3, #1
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
	...

08004d7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d84:	4a14      	ldr	r2, [pc, #80]	; (8004dd8 <_sbrk+0x5c>)
 8004d86:	4b15      	ldr	r3, [pc, #84]	; (8004ddc <_sbrk+0x60>)
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d90:	4b13      	ldr	r3, [pc, #76]	; (8004de0 <_sbrk+0x64>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d98:	4b11      	ldr	r3, [pc, #68]	; (8004de0 <_sbrk+0x64>)
 8004d9a:	4a12      	ldr	r2, [pc, #72]	; (8004de4 <_sbrk+0x68>)
 8004d9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d9e:	4b10      	ldr	r3, [pc, #64]	; (8004de0 <_sbrk+0x64>)
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4413      	add	r3, r2
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d207      	bcs.n	8004dbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004dac:	f00a f9b2 	bl	800f114 <__errno>
 8004db0:	4603      	mov	r3, r0
 8004db2:	220c      	movs	r2, #12
 8004db4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004dba:	e009      	b.n	8004dd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004dbc:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <_sbrk+0x64>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004dc2:	4b07      	ldr	r3, [pc, #28]	; (8004de0 <_sbrk+0x64>)
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4413      	add	r3, r2
 8004dca:	4a05      	ldr	r2, [pc, #20]	; (8004de0 <_sbrk+0x64>)
 8004dcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004dce:	68fb      	ldr	r3, [r7, #12]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3718      	adds	r7, #24
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}
 8004dd8:	20020000 	.word	0x20020000
 8004ddc:	00000800 	.word	0x00000800
 8004de0:	200011b8 	.word	0x200011b8
 8004de4:	2000a488 	.word	0x2000a488

08004de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004dec:	4b06      	ldr	r3, [pc, #24]	; (8004e08 <SystemInit+0x20>)
 8004dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df2:	4a05      	ldr	r2, [pc, #20]	; (8004e08 <SystemInit+0x20>)
 8004df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004dfc:	bf00      	nop
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	e000ed00 	.word	0xe000ed00

08004e0c <MX_TIM2_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim14;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e12:	f107 0308 	add.w	r3, r7, #8
 8004e16:	2200      	movs	r2, #0
 8004e18:	601a      	str	r2, [r3, #0]
 8004e1a:	605a      	str	r2, [r3, #4]
 8004e1c:	609a      	str	r2, [r3, #8]
 8004e1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e20:	463b      	mov	r3, r7
 8004e22:	2200      	movs	r2, #0
 8004e24:	601a      	str	r2, [r3, #0]
 8004e26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004e28:	4b1e      	ldr	r3, [pc, #120]	; (8004ea4 <MX_TIM2_Init+0x98>)
 8004e2a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004e2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8004e30:	4b1c      	ldr	r3, [pc, #112]	; (8004ea4 <MX_TIM2_Init+0x98>)
 8004e32:	f240 3247 	movw	r2, #839	; 0x347
 8004e36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e38:	4b1a      	ldr	r3, [pc, #104]	; (8004ea4 <MX_TIM2_Init+0x98>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8004e3e:	4b19      	ldr	r3, [pc, #100]	; (8004ea4 <MX_TIM2_Init+0x98>)
 8004e40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e44:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e46:	4b17      	ldr	r3, [pc, #92]	; (8004ea4 <MX_TIM2_Init+0x98>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e4c:	4b15      	ldr	r3, [pc, #84]	; (8004ea4 <MX_TIM2_Init+0x98>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004e52:	4814      	ldr	r0, [pc, #80]	; (8004ea4 <MX_TIM2_Init+0x98>)
 8004e54:	f003 f99b 	bl	800818e <HAL_TIM_Base_Init>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8004e5e:	f7ff fcfd 	bl	800485c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004e68:	f107 0308 	add.w	r3, r7, #8
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	480d      	ldr	r0, [pc, #52]	; (8004ea4 <MX_TIM2_Init+0x98>)
 8004e70:	f003 fd16 	bl	80088a0 <HAL_TIM_ConfigClockSource>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8004e7a:	f7ff fcef 	bl	800485c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004e82:	2300      	movs	r3, #0
 8004e84:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004e86:	463b      	mov	r3, r7
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4806      	ldr	r0, [pc, #24]	; (8004ea4 <MX_TIM2_Init+0x98>)
 8004e8c:	f004 f8e2 	bl	8009054 <HAL_TIMEx_MasterConfigSynchronization>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004e96:	f7ff fce1 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004e9a:	bf00      	nop
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	200011bc 	.word	0x200011bc

08004ea8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004eae:	f107 0308 	add.w	r3, r7, #8
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	605a      	str	r2, [r3, #4]
 8004eb8:	609a      	str	r2, [r3, #8]
 8004eba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ebc:	463b      	mov	r3, r7
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004ec4:	4b1d      	ldr	r3, [pc, #116]	; (8004f3c <MX_TIM3_Init+0x94>)
 8004ec6:	4a1e      	ldr	r2, [pc, #120]	; (8004f40 <MX_TIM3_Init+0x98>)
 8004ec8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16800 - 1;
 8004eca:	4b1c      	ldr	r3, [pc, #112]	; (8004f3c <MX_TIM3_Init+0x94>)
 8004ecc:	f244 129f 	movw	r2, #16799	; 0x419f
 8004ed0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ed2:	4b1a      	ldr	r3, [pc, #104]	; (8004f3c <MX_TIM3_Init+0x94>)
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8004ed8:	4b18      	ldr	r3, [pc, #96]	; (8004f3c <MX_TIM3_Init+0x94>)
 8004eda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ede:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ee0:	4b16      	ldr	r3, [pc, #88]	; (8004f3c <MX_TIM3_Init+0x94>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ee6:	4b15      	ldr	r3, [pc, #84]	; (8004f3c <MX_TIM3_Init+0x94>)
 8004ee8:	2200      	movs	r2, #0
 8004eea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004eec:	4813      	ldr	r0, [pc, #76]	; (8004f3c <MX_TIM3_Init+0x94>)
 8004eee:	f003 f94e 	bl	800818e <HAL_TIM_Base_Init>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8004ef8:	f7ff fcb0 	bl	800485c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004f02:	f107 0308 	add.w	r3, r7, #8
 8004f06:	4619      	mov	r1, r3
 8004f08:	480c      	ldr	r0, [pc, #48]	; (8004f3c <MX_TIM3_Init+0x94>)
 8004f0a:	f003 fcc9 	bl	80088a0 <HAL_TIM_ConfigClockSource>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8004f14:	f7ff fca2 	bl	800485c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004f20:	463b      	mov	r3, r7
 8004f22:	4619      	mov	r1, r3
 8004f24:	4805      	ldr	r0, [pc, #20]	; (8004f3c <MX_TIM3_Init+0x94>)
 8004f26:	f004 f895 	bl	8009054 <HAL_TIMEx_MasterConfigSynchronization>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d001      	beq.n	8004f34 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8004f30:	f7ff fc94 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004f34:	bf00      	nop
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	20001204 	.word	0x20001204
 8004f40:	40000400 	.word	0x40000400

08004f44 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08e      	sub	sp, #56	; 0x38
 8004f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004f4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	605a      	str	r2, [r3, #4]
 8004f54:	609a      	str	r2, [r3, #8]
 8004f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004f58:	f107 0320 	add.w	r3, r7, #32
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	601a      	str	r2, [r3, #0]
 8004f60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004f62:	1d3b      	adds	r3, r7, #4
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	605a      	str	r2, [r3, #4]
 8004f6a:	609a      	str	r2, [r3, #8]
 8004f6c:	60da      	str	r2, [r3, #12]
 8004f6e:	611a      	str	r2, [r3, #16]
 8004f70:	615a      	str	r2, [r3, #20]
 8004f72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004f74:	4b37      	ldr	r3, [pc, #220]	; (8005054 <MX_TIM4_Init+0x110>)
 8004f76:	4a38      	ldr	r2, [pc, #224]	; (8005058 <MX_TIM4_Init+0x114>)
 8004f78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2000-1;
 8004f7a:	4b36      	ldr	r3, [pc, #216]	; (8005054 <MX_TIM4_Init+0x110>)
 8004f7c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8004f80:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004f82:	4b34      	ldr	r3, [pc, #208]	; (8005054 <MX_TIM4_Init+0x110>)
 8004f84:	2200      	movs	r2, #0
 8004f86:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255-1;
 8004f88:	4b32      	ldr	r3, [pc, #200]	; (8005054 <MX_TIM4_Init+0x110>)
 8004f8a:	22fe      	movs	r2, #254	; 0xfe
 8004f8c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004f8e:	4b31      	ldr	r3, [pc, #196]	; (8005054 <MX_TIM4_Init+0x110>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004f94:	4b2f      	ldr	r3, [pc, #188]	; (8005054 <MX_TIM4_Init+0x110>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8004f9a:	482e      	ldr	r0, [pc, #184]	; (8005054 <MX_TIM4_Init+0x110>)
 8004f9c:	f003 f8f7 	bl	800818e <HAL_TIM_Base_Init>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8004fa6:	f7ff fc59 	bl	800485c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004faa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004fae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004fb0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4827      	ldr	r0, [pc, #156]	; (8005054 <MX_TIM4_Init+0x110>)
 8004fb8:	f003 fc72 	bl	80088a0 <HAL_TIM_ConfigClockSource>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8004fc2:	f7ff fc4b 	bl	800485c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004fc6:	4823      	ldr	r0, [pc, #140]	; (8005054 <MX_TIM4_Init+0x110>)
 8004fc8:	f003 f9a0 	bl	800830c <HAL_TIM_PWM_Init>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8004fd2:	f7ff fc43 	bl	800485c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004fde:	f107 0320 	add.w	r3, r7, #32
 8004fe2:	4619      	mov	r1, r3
 8004fe4:	481b      	ldr	r0, [pc, #108]	; (8005054 <MX_TIM4_Init+0x110>)
 8004fe6:	f004 f835 	bl	8009054 <HAL_TIMEx_MasterConfigSynchronization>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8004ff0:	f7ff fc34 	bl	800485c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004ff4:	2360      	movs	r3, #96	; 0x60
 8004ff6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005000:	2300      	movs	r3, #0
 8005002:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005004:	1d3b      	adds	r3, r7, #4
 8005006:	2200      	movs	r2, #0
 8005008:	4619      	mov	r1, r3
 800500a:	4812      	ldr	r0, [pc, #72]	; (8005054 <MX_TIM4_Init+0x110>)
 800500c:	f003 fb86 	bl	800871c <HAL_TIM_PWM_ConfigChannel>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d001      	beq.n	800501a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8005016:	f7ff fc21 	bl	800485c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800501a:	1d3b      	adds	r3, r7, #4
 800501c:	2204      	movs	r2, #4
 800501e:	4619      	mov	r1, r3
 8005020:	480c      	ldr	r0, [pc, #48]	; (8005054 <MX_TIM4_Init+0x110>)
 8005022:	f003 fb7b 	bl	800871c <HAL_TIM_PWM_ConfigChannel>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800502c:	f7ff fc16 	bl	800485c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005030:	1d3b      	adds	r3, r7, #4
 8005032:	2208      	movs	r2, #8
 8005034:	4619      	mov	r1, r3
 8005036:	4807      	ldr	r0, [pc, #28]	; (8005054 <MX_TIM4_Init+0x110>)
 8005038:	f003 fb70 	bl	800871c <HAL_TIM_PWM_ConfigChannel>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8005042:	f7ff fc0b 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005046:	4803      	ldr	r0, [pc, #12]	; (8005054 <MX_TIM4_Init+0x110>)
 8005048:	f000 f988 	bl	800535c <HAL_TIM_MspPostInit>

}
 800504c:	bf00      	nop
 800504e:	3738      	adds	r7, #56	; 0x38
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}
 8005054:	2000124c 	.word	0x2000124c
 8005058:	40000800 	.word	0x40000800

0800505c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b08c      	sub	sp, #48	; 0x30
 8005060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005062:	f107 030c 	add.w	r3, r7, #12
 8005066:	2224      	movs	r2, #36	; 0x24
 8005068:	2100      	movs	r1, #0
 800506a:	4618      	mov	r0, r3
 800506c:	f00a f994 	bl	800f398 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005070:	1d3b      	adds	r3, r7, #4
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
 8005076:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8005078:	4b20      	ldr	r3, [pc, #128]	; (80050fc <MX_TIM5_Init+0xa0>)
 800507a:	4a21      	ldr	r2, [pc, #132]	; (8005100 <MX_TIM5_Init+0xa4>)
 800507c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800507e:	4b1f      	ldr	r3, [pc, #124]	; (80050fc <MX_TIM5_Init+0xa0>)
 8005080:	2200      	movs	r2, #0
 8005082:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005084:	4b1d      	ldr	r3, [pc, #116]	; (80050fc <MX_TIM5_Init+0xa0>)
 8005086:	2200      	movs	r2, #0
 8005088:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800508a:	4b1c      	ldr	r3, [pc, #112]	; (80050fc <MX_TIM5_Init+0xa0>)
 800508c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005090:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005092:	4b1a      	ldr	r3, [pc, #104]	; (80050fc <MX_TIM5_Init+0xa0>)
 8005094:	2200      	movs	r2, #0
 8005096:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005098:	4b18      	ldr	r3, [pc, #96]	; (80050fc <MX_TIM5_Init+0xa0>)
 800509a:	2200      	movs	r2, #0
 800509c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800509e:	2301      	movs	r3, #1
 80050a0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80050a2:	2300      	movs	r3, #0
 80050a4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80050a6:	2301      	movs	r3, #1
 80050a8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80050aa:	2300      	movs	r3, #0
 80050ac:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80050ae:	2300      	movs	r3, #0
 80050b0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80050b2:	2300      	movs	r3, #0
 80050b4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80050b6:	2301      	movs	r3, #1
 80050b8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80050ba:	2300      	movs	r3, #0
 80050bc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80050be:	2300      	movs	r3, #0
 80050c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80050c2:	f107 030c 	add.w	r3, r7, #12
 80050c6:	4619      	mov	r1, r3
 80050c8:	480c      	ldr	r0, [pc, #48]	; (80050fc <MX_TIM5_Init+0xa0>)
 80050ca:	f003 f978 	bl	80083be <HAL_TIM_Encoder_Init>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80050d4:	f7ff fbc2 	bl	800485c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050d8:	2300      	movs	r3, #0
 80050da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050dc:	2300      	movs	r3, #0
 80050de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80050e0:	1d3b      	adds	r3, r7, #4
 80050e2:	4619      	mov	r1, r3
 80050e4:	4805      	ldr	r0, [pc, #20]	; (80050fc <MX_TIM5_Init+0xa0>)
 80050e6:	f003 ffb5 	bl	8009054 <HAL_TIMEx_MasterConfigSynchronization>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80050f0:	f7ff fbb4 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80050f4:	bf00      	nop
 80050f6:	3730      	adds	r7, #48	; 0x30
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	20001294 	.word	0x20001294
 8005100:	40000c00 	.word	0x40000c00

08005104 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b084      	sub	sp, #16
 8005108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800510a:	463b      	mov	r3, r7
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	605a      	str	r2, [r3, #4]
 8005112:	609a      	str	r2, [r3, #8]
 8005114:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8005116:	4b16      	ldr	r3, [pc, #88]	; (8005170 <MX_TIM9_Init+0x6c>)
 8005118:	4a16      	ldr	r2, [pc, #88]	; (8005174 <MX_TIM9_Init+0x70>)
 800511a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 16800 - 1;
 800511c:	4b14      	ldr	r3, [pc, #80]	; (8005170 <MX_TIM9_Init+0x6c>)
 800511e:	f244 129f 	movw	r2, #16799	; 0x419f
 8005122:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005124:	4b12      	ldr	r3, [pc, #72]	; (8005170 <MX_TIM9_Init+0x6c>)
 8005126:	2200      	movs	r2, #0
 8005128:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800512a:	4b11      	ldr	r3, [pc, #68]	; (8005170 <MX_TIM9_Init+0x6c>)
 800512c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005130:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005132:	4b0f      	ldr	r3, [pc, #60]	; (8005170 <MX_TIM9_Init+0x6c>)
 8005134:	2200      	movs	r2, #0
 8005136:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005138:	4b0d      	ldr	r3, [pc, #52]	; (8005170 <MX_TIM9_Init+0x6c>)
 800513a:	2200      	movs	r2, #0
 800513c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800513e:	480c      	ldr	r0, [pc, #48]	; (8005170 <MX_TIM9_Init+0x6c>)
 8005140:	f003 f825 	bl	800818e <HAL_TIM_Base_Init>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 800514a:	f7ff fb87 	bl	800485c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800514e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005152:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8005154:	463b      	mov	r3, r7
 8005156:	4619      	mov	r1, r3
 8005158:	4805      	ldr	r0, [pc, #20]	; (8005170 <MX_TIM9_Init+0x6c>)
 800515a:	f003 fba1 	bl	80088a0 <HAL_TIM_ConfigClockSource>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d001      	beq.n	8005168 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8005164:	f7ff fb7a 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8005168:	bf00      	nop
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	200012dc 	.word	0x200012dc
 8005174:	40014000 	.word	0x40014000

08005178 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800517c:	4b0e      	ldr	r3, [pc, #56]	; (80051b8 <MX_TIM14_Init+0x40>)
 800517e:	4a0f      	ldr	r2, [pc, #60]	; (80051bc <MX_TIM14_Init+0x44>)
 8005180:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 840-1;
 8005182:	4b0d      	ldr	r3, [pc, #52]	; (80051b8 <MX_TIM14_Init+0x40>)
 8005184:	f240 3247 	movw	r2, #839	; 0x347
 8005188:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800518a:	4b0b      	ldr	r3, [pc, #44]	; (80051b8 <MX_TIM14_Init+0x40>)
 800518c:	2200      	movs	r2, #0
 800518e:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8005190:	4b09      	ldr	r3, [pc, #36]	; (80051b8 <MX_TIM14_Init+0x40>)
 8005192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005196:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005198:	4b07      	ldr	r3, [pc, #28]	; (80051b8 <MX_TIM14_Init+0x40>)
 800519a:	2200      	movs	r2, #0
 800519c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800519e:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <MX_TIM14_Init+0x40>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80051a4:	4804      	ldr	r0, [pc, #16]	; (80051b8 <MX_TIM14_Init+0x40>)
 80051a6:	f002 fff2 	bl	800818e <HAL_TIM_Base_Init>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80051b0:	f7ff fb54 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80051b4:	bf00      	nop
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	20001324 	.word	0x20001324
 80051bc:	40002000 	.word	0x40002000

080051c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b088      	sub	sp, #32
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d0:	d10e      	bne.n	80051f0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80051d2:	2300      	movs	r3, #0
 80051d4:	61fb      	str	r3, [r7, #28]
 80051d6:	4b38      	ldr	r3, [pc, #224]	; (80052b8 <HAL_TIM_Base_MspInit+0xf8>)
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	4a37      	ldr	r2, [pc, #220]	; (80052b8 <HAL_TIM_Base_MspInit+0xf8>)
 80051dc:	f043 0301 	orr.w	r3, r3, #1
 80051e0:	6413      	str	r3, [r2, #64]	; 0x40
 80051e2:	4b35      	ldr	r3, [pc, #212]	; (80052b8 <HAL_TIM_Base_MspInit+0xf8>)
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	61fb      	str	r3, [r7, #28]
 80051ec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80051ee:	e05e      	b.n	80052ae <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM3)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a31      	ldr	r2, [pc, #196]	; (80052bc <HAL_TIM_Base_MspInit+0xfc>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d116      	bne.n	8005228 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80051fa:	2300      	movs	r3, #0
 80051fc:	61bb      	str	r3, [r7, #24]
 80051fe:	4b2e      	ldr	r3, [pc, #184]	; (80052b8 <HAL_TIM_Base_MspInit+0xf8>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	4a2d      	ldr	r2, [pc, #180]	; (80052b8 <HAL_TIM_Base_MspInit+0xf8>)
 8005204:	f043 0302 	orr.w	r3, r3, #2
 8005208:	6413      	str	r3, [r2, #64]	; 0x40
 800520a:	4b2b      	ldr	r3, [pc, #172]	; (80052b8 <HAL_TIM_Base_MspInit+0xf8>)
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	61bb      	str	r3, [r7, #24]
 8005214:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005216:	2200      	movs	r2, #0
 8005218:	2105      	movs	r1, #5
 800521a:	201d      	movs	r0, #29
 800521c:	f001 fb74 	bl	8006908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005220:	201d      	movs	r0, #29
 8005222:	f001 fb8d 	bl	8006940 <HAL_NVIC_EnableIRQ>
}
 8005226:	e042      	b.n	80052ae <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM4)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a24      	ldr	r2, [pc, #144]	; (80052c0 <HAL_TIM_Base_MspInit+0x100>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d10e      	bne.n	8005250 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005232:	2300      	movs	r3, #0
 8005234:	617b      	str	r3, [r7, #20]
 8005236:	4b20      	ldr	r3, [pc, #128]	; (80052b8 <HAL_TIM_Base_MspInit+0xf8>)
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	4a1f      	ldr	r2, [pc, #124]	; (80052b8 <HAL_TIM_Base_MspInit+0xf8>)
 800523c:	f043 0304 	orr.w	r3, r3, #4
 8005240:	6413      	str	r3, [r2, #64]	; 0x40
 8005242:	4b1d      	ldr	r3, [pc, #116]	; (80052b8 <HAL_TIM_Base_MspInit+0xf8>)
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	f003 0304 	and.w	r3, r3, #4
 800524a:	617b      	str	r3, [r7, #20]
 800524c:	697b      	ldr	r3, [r7, #20]
}
 800524e:	e02e      	b.n	80052ae <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM9)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a1b      	ldr	r2, [pc, #108]	; (80052c4 <HAL_TIM_Base_MspInit+0x104>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d116      	bne.n	8005288 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800525a:	2300      	movs	r3, #0
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	4b16      	ldr	r3, [pc, #88]	; (80052b8 <HAL_TIM_Base_MspInit+0xf8>)
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	4a15      	ldr	r2, [pc, #84]	; (80052b8 <HAL_TIM_Base_MspInit+0xf8>)
 8005264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005268:	6453      	str	r3, [r2, #68]	; 0x44
 800526a:	4b13      	ldr	r3, [pc, #76]	; (80052b8 <HAL_TIM_Base_MspInit+0xf8>)
 800526c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005272:	613b      	str	r3, [r7, #16]
 8005274:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8005276:	2200      	movs	r2, #0
 8005278:	2105      	movs	r1, #5
 800527a:	2018      	movs	r0, #24
 800527c:	f001 fb44 	bl	8006908 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8005280:	2018      	movs	r0, #24
 8005282:	f001 fb5d 	bl	8006940 <HAL_NVIC_EnableIRQ>
}
 8005286:	e012      	b.n	80052ae <HAL_TIM_Base_MspInit+0xee>
  else if(tim_baseHandle->Instance==TIM14)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a0e      	ldr	r2, [pc, #56]	; (80052c8 <HAL_TIM_Base_MspInit+0x108>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d10d      	bne.n	80052ae <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
 8005296:	4b08      	ldr	r3, [pc, #32]	; (80052b8 <HAL_TIM_Base_MspInit+0xf8>)
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	4a07      	ldr	r2, [pc, #28]	; (80052b8 <HAL_TIM_Base_MspInit+0xf8>)
 800529c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a0:	6413      	str	r3, [r2, #64]	; 0x40
 80052a2:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <HAL_TIM_Base_MspInit+0xf8>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
}
 80052ae:	bf00      	nop
 80052b0:	3720      	adds	r7, #32
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	40023800 	.word	0x40023800
 80052bc:	40000400 	.word	0x40000400
 80052c0:	40000800 	.word	0x40000800
 80052c4:	40014000 	.word	0x40014000
 80052c8:	40002000 	.word	0x40002000

080052cc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08a      	sub	sp, #40	; 0x28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052d4:	f107 0314 	add.w	r3, r7, #20
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	605a      	str	r2, [r3, #4]
 80052de:	609a      	str	r2, [r3, #8]
 80052e0:	60da      	str	r2, [r3, #12]
 80052e2:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM5)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a19      	ldr	r2, [pc, #100]	; (8005350 <HAL_TIM_Encoder_MspInit+0x84>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d12b      	bne.n	8005346 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80052ee:	2300      	movs	r3, #0
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	4b18      	ldr	r3, [pc, #96]	; (8005354 <HAL_TIM_Encoder_MspInit+0x88>)
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	4a17      	ldr	r2, [pc, #92]	; (8005354 <HAL_TIM_Encoder_MspInit+0x88>)
 80052f8:	f043 0308 	orr.w	r3, r3, #8
 80052fc:	6413      	str	r3, [r2, #64]	; 0x40
 80052fe:	4b15      	ldr	r3, [pc, #84]	; (8005354 <HAL_TIM_Encoder_MspInit+0x88>)
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	613b      	str	r3, [r7, #16]
 8005308:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]
 800530e:	4b11      	ldr	r3, [pc, #68]	; (8005354 <HAL_TIM_Encoder_MspInit+0x88>)
 8005310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005312:	4a10      	ldr	r2, [pc, #64]	; (8005354 <HAL_TIM_Encoder_MspInit+0x88>)
 8005314:	f043 0301 	orr.w	r3, r3, #1
 8005318:	6313      	str	r3, [r2, #48]	; 0x30
 800531a:	4b0e      	ldr	r3, [pc, #56]	; (8005354 <HAL_TIM_Encoder_MspInit+0x88>)
 800531c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531e:	f003 0301 	and.w	r3, r3, #1
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = WHEELENCODER_A_Pin|WHEELENCODER_B_Pin;
 8005326:	2303      	movs	r3, #3
 8005328:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800532a:	2302      	movs	r3, #2
 800532c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800532e:	2300      	movs	r3, #0
 8005330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005332:	2300      	movs	r3, #0
 8005334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005336:	2302      	movs	r3, #2
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800533a:	f107 0314 	add.w	r3, r7, #20
 800533e:	4619      	mov	r1, r3
 8005340:	4805      	ldr	r0, [pc, #20]	; (8005358 <HAL_TIM_Encoder_MspInit+0x8c>)
 8005342:	f001 fe97 	bl	8007074 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8005346:	bf00      	nop
 8005348:	3728      	adds	r7, #40	; 0x28
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	40000c00 	.word	0x40000c00
 8005354:	40023800 	.word	0x40023800
 8005358:	40020000 	.word	0x40020000

0800535c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b088      	sub	sp, #32
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005364:	f107 030c 	add.w	r3, r7, #12
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	605a      	str	r2, [r3, #4]
 800536e:	609a      	str	r2, [r3, #8]
 8005370:	60da      	str	r2, [r3, #12]
 8005372:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a12      	ldr	r2, [pc, #72]	; (80053c4 <HAL_TIM_MspPostInit+0x68>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d11e      	bne.n	80053bc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800537e:	2300      	movs	r3, #0
 8005380:	60bb      	str	r3, [r7, #8]
 8005382:	4b11      	ldr	r3, [pc, #68]	; (80053c8 <HAL_TIM_MspPostInit+0x6c>)
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	4a10      	ldr	r2, [pc, #64]	; (80053c8 <HAL_TIM_MspPostInit+0x6c>)
 8005388:	f043 0308 	orr.w	r3, r3, #8
 800538c:	6313      	str	r3, [r2, #48]	; 0x30
 800538e:	4b0e      	ldr	r3, [pc, #56]	; (80053c8 <HAL_TIM_MspPostInit+0x6c>)
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	f003 0308 	and.w	r3, r3, #8
 8005396:	60bb      	str	r3, [r7, #8]
 8005398:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_ORANGE_Pin|LED_RED_Pin;
 800539a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 800539e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a0:	2302      	movs	r3, #2
 80053a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a4:	2300      	movs	r3, #0
 80053a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053a8:	2300      	movs	r3, #0
 80053aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80053ac:	2302      	movs	r3, #2
 80053ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053b0:	f107 030c 	add.w	r3, r7, #12
 80053b4:	4619      	mov	r1, r3
 80053b6:	4805      	ldr	r0, [pc, #20]	; (80053cc <HAL_TIM_MspPostInit+0x70>)
 80053b8:	f001 fe5c 	bl	8007074 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80053bc:	bf00      	nop
 80053be:	3720      	adds	r7, #32
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40000800 	.word	0x40000800
 80053c8:	40023800 	.word	0x40023800
 80053cc:	40020c00 	.word	0x40020c00

080053d0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80053d4:	4b11      	ldr	r3, [pc, #68]	; (800541c <MX_USART1_UART_Init+0x4c>)
 80053d6:	4a12      	ldr	r2, [pc, #72]	; (8005420 <MX_USART1_UART_Init+0x50>)
 80053d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80053da:	4b10      	ldr	r3, [pc, #64]	; (800541c <MX_USART1_UART_Init+0x4c>)
 80053dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80053e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80053e2:	4b0e      	ldr	r3, [pc, #56]	; (800541c <MX_USART1_UART_Init+0x4c>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80053e8:	4b0c      	ldr	r3, [pc, #48]	; (800541c <MX_USART1_UART_Init+0x4c>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80053ee:	4b0b      	ldr	r3, [pc, #44]	; (800541c <MX_USART1_UART_Init+0x4c>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80053f4:	4b09      	ldr	r3, [pc, #36]	; (800541c <MX_USART1_UART_Init+0x4c>)
 80053f6:	220c      	movs	r2, #12
 80053f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80053fa:	4b08      	ldr	r3, [pc, #32]	; (800541c <MX_USART1_UART_Init+0x4c>)
 80053fc:	f44f 7240 	mov.w	r2, #768	; 0x300
 8005400:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005402:	4b06      	ldr	r3, [pc, #24]	; (800541c <MX_USART1_UART_Init+0x4c>)
 8005404:	2200      	movs	r2, #0
 8005406:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005408:	4804      	ldr	r0, [pc, #16]	; (800541c <MX_USART1_UART_Init+0x4c>)
 800540a:	f003 feb3 	bl	8009174 <HAL_UART_Init>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8005414:	f7ff fa22 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005418:	bf00      	nop
 800541a:	bd80      	pop	{r7, pc}
 800541c:	2000136c 	.word	0x2000136c
 8005420:	40011000 	.word	0x40011000

08005424 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005428:	4b11      	ldr	r3, [pc, #68]	; (8005470 <MX_USART2_UART_Init+0x4c>)
 800542a:	4a12      	ldr	r2, [pc, #72]	; (8005474 <MX_USART2_UART_Init+0x50>)
 800542c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 800542e:	4b10      	ldr	r3, [pc, #64]	; (8005470 <MX_USART2_UART_Init+0x4c>)
 8005430:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8005434:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005436:	4b0e      	ldr	r3, [pc, #56]	; (8005470 <MX_USART2_UART_Init+0x4c>)
 8005438:	2200      	movs	r2, #0
 800543a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800543c:	4b0c      	ldr	r3, [pc, #48]	; (8005470 <MX_USART2_UART_Init+0x4c>)
 800543e:	2200      	movs	r2, #0
 8005440:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005442:	4b0b      	ldr	r3, [pc, #44]	; (8005470 <MX_USART2_UART_Init+0x4c>)
 8005444:	2200      	movs	r2, #0
 8005446:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005448:	4b09      	ldr	r3, [pc, #36]	; (8005470 <MX_USART2_UART_Init+0x4c>)
 800544a:	220c      	movs	r2, #12
 800544c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800544e:	4b08      	ldr	r3, [pc, #32]	; (8005470 <MX_USART2_UART_Init+0x4c>)
 8005450:	2200      	movs	r2, #0
 8005452:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005454:	4b06      	ldr	r3, [pc, #24]	; (8005470 <MX_USART2_UART_Init+0x4c>)
 8005456:	2200      	movs	r2, #0
 8005458:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800545a:	4805      	ldr	r0, [pc, #20]	; (8005470 <MX_USART2_UART_Init+0x4c>)
 800545c:	f003 fe8a 	bl	8009174 <HAL_UART_Init>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005466:	f7ff f9f9 	bl	800485c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800546a:	bf00      	nop
 800546c:	bd80      	pop	{r7, pc}
 800546e:	bf00      	nop
 8005470:	200013b0 	.word	0x200013b0
 8005474:	40004400 	.word	0x40004400

08005478 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08c      	sub	sp, #48	; 0x30
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005480:	f107 031c 	add.w	r3, r7, #28
 8005484:	2200      	movs	r2, #0
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	605a      	str	r2, [r3, #4]
 800548a:	609a      	str	r2, [r3, #8]
 800548c:	60da      	str	r2, [r3, #12]
 800548e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a61      	ldr	r2, [pc, #388]	; (800561c <HAL_UART_MspInit+0x1a4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	f040 808a 	bne.w	80055b0 <HAL_UART_MspInit+0x138>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800549c:	2300      	movs	r3, #0
 800549e:	61bb      	str	r3, [r7, #24]
 80054a0:	4b5f      	ldr	r3, [pc, #380]	; (8005620 <HAL_UART_MspInit+0x1a8>)
 80054a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a4:	4a5e      	ldr	r2, [pc, #376]	; (8005620 <HAL_UART_MspInit+0x1a8>)
 80054a6:	f043 0310 	orr.w	r3, r3, #16
 80054aa:	6453      	str	r3, [r2, #68]	; 0x44
 80054ac:	4b5c      	ldr	r3, [pc, #368]	; (8005620 <HAL_UART_MspInit+0x1a8>)
 80054ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	61bb      	str	r3, [r7, #24]
 80054b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054b8:	2300      	movs	r3, #0
 80054ba:	617b      	str	r3, [r7, #20]
 80054bc:	4b58      	ldr	r3, [pc, #352]	; (8005620 <HAL_UART_MspInit+0x1a8>)
 80054be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c0:	4a57      	ldr	r2, [pc, #348]	; (8005620 <HAL_UART_MspInit+0x1a8>)
 80054c2:	f043 0301 	orr.w	r3, r3, #1
 80054c6:	6313      	str	r3, [r2, #48]	; 0x30
 80054c8:	4b55      	ldr	r3, [pc, #340]	; (8005620 <HAL_UART_MspInit+0x1a8>)
 80054ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	617b      	str	r3, [r7, #20]
 80054d2:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80054d4:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80054d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054da:	2302      	movs	r3, #2
 80054dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054e2:	2303      	movs	r3, #3
 80054e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80054e6:	2307      	movs	r3, #7
 80054e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054ea:	f107 031c 	add.w	r3, r7, #28
 80054ee:	4619      	mov	r1, r3
 80054f0:	484c      	ldr	r0, [pc, #304]	; (8005624 <HAL_UART_MspInit+0x1ac>)
 80054f2:	f001 fdbf 	bl	8007074 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80054f6:	4b4c      	ldr	r3, [pc, #304]	; (8005628 <HAL_UART_MspInit+0x1b0>)
 80054f8:	4a4c      	ldr	r2, [pc, #304]	; (800562c <HAL_UART_MspInit+0x1b4>)
 80054fa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80054fc:	4b4a      	ldr	r3, [pc, #296]	; (8005628 <HAL_UART_MspInit+0x1b0>)
 80054fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005502:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005504:	4b48      	ldr	r3, [pc, #288]	; (8005628 <HAL_UART_MspInit+0x1b0>)
 8005506:	2240      	movs	r2, #64	; 0x40
 8005508:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800550a:	4b47      	ldr	r3, [pc, #284]	; (8005628 <HAL_UART_MspInit+0x1b0>)
 800550c:	2200      	movs	r2, #0
 800550e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005510:	4b45      	ldr	r3, [pc, #276]	; (8005628 <HAL_UART_MspInit+0x1b0>)
 8005512:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005516:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005518:	4b43      	ldr	r3, [pc, #268]	; (8005628 <HAL_UART_MspInit+0x1b0>)
 800551a:	2200      	movs	r2, #0
 800551c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800551e:	4b42      	ldr	r3, [pc, #264]	; (8005628 <HAL_UART_MspInit+0x1b0>)
 8005520:	2200      	movs	r2, #0
 8005522:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005524:	4b40      	ldr	r3, [pc, #256]	; (8005628 <HAL_UART_MspInit+0x1b0>)
 8005526:	2200      	movs	r2, #0
 8005528:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800552a:	4b3f      	ldr	r3, [pc, #252]	; (8005628 <HAL_UART_MspInit+0x1b0>)
 800552c:	2200      	movs	r2, #0
 800552e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005530:	4b3d      	ldr	r3, [pc, #244]	; (8005628 <HAL_UART_MspInit+0x1b0>)
 8005532:	2200      	movs	r2, #0
 8005534:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005536:	483c      	ldr	r0, [pc, #240]	; (8005628 <HAL_UART_MspInit+0x1b0>)
 8005538:	f001 fa2c 	bl	8006994 <HAL_DMA_Init>
 800553c:	4603      	mov	r3, r0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d001      	beq.n	8005546 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8005542:	f7ff f98b 	bl	800485c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	4a37      	ldr	r2, [pc, #220]	; (8005628 <HAL_UART_MspInit+0x1b0>)
 800554a:	635a      	str	r2, [r3, #52]	; 0x34
 800554c:	4a36      	ldr	r2, [pc, #216]	; (8005628 <HAL_UART_MspInit+0x1b0>)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8005552:	4b37      	ldr	r3, [pc, #220]	; (8005630 <HAL_UART_MspInit+0x1b8>)
 8005554:	4a37      	ldr	r2, [pc, #220]	; (8005634 <HAL_UART_MspInit+0x1bc>)
 8005556:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005558:	4b35      	ldr	r3, [pc, #212]	; (8005630 <HAL_UART_MspInit+0x1b8>)
 800555a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800555e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005560:	4b33      	ldr	r3, [pc, #204]	; (8005630 <HAL_UART_MspInit+0x1b8>)
 8005562:	2200      	movs	r2, #0
 8005564:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005566:	4b32      	ldr	r3, [pc, #200]	; (8005630 <HAL_UART_MspInit+0x1b8>)
 8005568:	2200      	movs	r2, #0
 800556a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800556c:	4b30      	ldr	r3, [pc, #192]	; (8005630 <HAL_UART_MspInit+0x1b8>)
 800556e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005572:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005574:	4b2e      	ldr	r3, [pc, #184]	; (8005630 <HAL_UART_MspInit+0x1b8>)
 8005576:	2200      	movs	r2, #0
 8005578:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800557a:	4b2d      	ldr	r3, [pc, #180]	; (8005630 <HAL_UART_MspInit+0x1b8>)
 800557c:	2200      	movs	r2, #0
 800557e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8005580:	4b2b      	ldr	r3, [pc, #172]	; (8005630 <HAL_UART_MspInit+0x1b8>)
 8005582:	2200      	movs	r2, #0
 8005584:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005586:	4b2a      	ldr	r3, [pc, #168]	; (8005630 <HAL_UART_MspInit+0x1b8>)
 8005588:	2200      	movs	r2, #0
 800558a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800558c:	4b28      	ldr	r3, [pc, #160]	; (8005630 <HAL_UART_MspInit+0x1b8>)
 800558e:	2200      	movs	r2, #0
 8005590:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005592:	4827      	ldr	r0, [pc, #156]	; (8005630 <HAL_UART_MspInit+0x1b8>)
 8005594:	f001 f9fe 	bl	8006994 <HAL_DMA_Init>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800559e:	f7ff f95d 	bl	800485c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a22      	ldr	r2, [pc, #136]	; (8005630 <HAL_UART_MspInit+0x1b8>)
 80055a6:	639a      	str	r2, [r3, #56]	; 0x38
 80055a8:	4a21      	ldr	r2, [pc, #132]	; (8005630 <HAL_UART_MspInit+0x1b8>)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80055ae:	e030      	b.n	8005612 <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART2)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a20      	ldr	r2, [pc, #128]	; (8005638 <HAL_UART_MspInit+0x1c0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d12b      	bne.n	8005612 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80055ba:	2300      	movs	r3, #0
 80055bc:	613b      	str	r3, [r7, #16]
 80055be:	4b18      	ldr	r3, [pc, #96]	; (8005620 <HAL_UART_MspInit+0x1a8>)
 80055c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c2:	4a17      	ldr	r2, [pc, #92]	; (8005620 <HAL_UART_MspInit+0x1a8>)
 80055c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055c8:	6413      	str	r3, [r2, #64]	; 0x40
 80055ca:	4b15      	ldr	r3, [pc, #84]	; (8005620 <HAL_UART_MspInit+0x1a8>)
 80055cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80055d6:	2300      	movs	r3, #0
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	4b11      	ldr	r3, [pc, #68]	; (8005620 <HAL_UART_MspInit+0x1a8>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	4a10      	ldr	r2, [pc, #64]	; (8005620 <HAL_UART_MspInit+0x1a8>)
 80055e0:	f043 0308 	orr.w	r3, r3, #8
 80055e4:	6313      	str	r3, [r2, #48]	; 0x30
 80055e6:	4b0e      	ldr	r3, [pc, #56]	; (8005620 <HAL_UART_MspInit+0x1a8>)
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	f003 0308 	and.w	r3, r3, #8
 80055ee:	60fb      	str	r3, [r7, #12]
 80055f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = DBG_UART_TX_Pin|DBG_UART_RX_Pin;
 80055f2:	2360      	movs	r3, #96	; 0x60
 80055f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f6:	2302      	movs	r3, #2
 80055f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055fa:	2300      	movs	r3, #0
 80055fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055fe:	2303      	movs	r3, #3
 8005600:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005602:	2307      	movs	r3, #7
 8005604:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005606:	f107 031c 	add.w	r3, r7, #28
 800560a:	4619      	mov	r1, r3
 800560c:	480b      	ldr	r0, [pc, #44]	; (800563c <HAL_UART_MspInit+0x1c4>)
 800560e:	f001 fd31 	bl	8007074 <HAL_GPIO_Init>
}
 8005612:	bf00      	nop
 8005614:	3730      	adds	r7, #48	; 0x30
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	40011000 	.word	0x40011000
 8005620:	40023800 	.word	0x40023800
 8005624:	40020000 	.word	0x40020000
 8005628:	200013f4 	.word	0x200013f4
 800562c:	400264b8 	.word	0x400264b8
 8005630:	20001454 	.word	0x20001454
 8005634:	40026488 	.word	0x40026488
 8005638:	40004400 	.word	0x40004400
 800563c:	40020c00 	.word	0x40020c00

08005640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005678 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005644:	480d      	ldr	r0, [pc, #52]	; (800567c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005646:	490e      	ldr	r1, [pc, #56]	; (8005680 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005648:	4a0e      	ldr	r2, [pc, #56]	; (8005684 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800564a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800564c:	e002      	b.n	8005654 <LoopCopyDataInit>

0800564e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800564e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005652:	3304      	adds	r3, #4

08005654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005658:	d3f9      	bcc.n	800564e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800565a:	4a0b      	ldr	r2, [pc, #44]	; (8005688 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800565c:	4c0b      	ldr	r4, [pc, #44]	; (800568c <LoopFillZerobss+0x26>)
  movs r3, #0
 800565e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005660:	e001      	b.n	8005666 <LoopFillZerobss>

08005662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005664:	3204      	adds	r2, #4

08005666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005668:	d3fb      	bcc.n	8005662 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800566a:	f7ff fbbd 	bl	8004de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800566e:	f009 fe4d 	bl	800f30c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005672:	f7ff f843 	bl	80046fc <main>
  bx  lr    
 8005676:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005678:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800567c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005680:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8005684:	08012428 	.word	0x08012428
  ldr r2, =_sbss
 8005688:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 800568c:	2000a484 	.word	0x2000a484

08005690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005690:	e7fe      	b.n	8005690 <ADC_IRQHandler>
	...

08005694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005698:	4b0e      	ldr	r3, [pc, #56]	; (80056d4 <HAL_Init+0x40>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a0d      	ldr	r2, [pc, #52]	; (80056d4 <HAL_Init+0x40>)
 800569e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80056a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80056a4:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <HAL_Init+0x40>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a0a      	ldr	r2, [pc, #40]	; (80056d4 <HAL_Init+0x40>)
 80056aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80056ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80056b0:	4b08      	ldr	r3, [pc, #32]	; (80056d4 <HAL_Init+0x40>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a07      	ldr	r2, [pc, #28]	; (80056d4 <HAL_Init+0x40>)
 80056b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056bc:	2003      	movs	r0, #3
 80056be:	f001 f918 	bl	80068f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80056c2:	2005      	movs	r0, #5
 80056c4:	f7ff f9b0 	bl	8004a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80056c8:	f7ff f982 	bl	80049d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	40023c00 	.word	0x40023c00

080056d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056d8:	b480      	push	{r7}
 80056da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056dc:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <HAL_IncTick+0x20>)
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	461a      	mov	r2, r3
 80056e2:	4b06      	ldr	r3, [pc, #24]	; (80056fc <HAL_IncTick+0x24>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4413      	add	r3, r2
 80056e8:	4a04      	ldr	r2, [pc, #16]	; (80056fc <HAL_IncTick+0x24>)
 80056ea:	6013      	str	r3, [r2, #0]
}
 80056ec:	bf00      	nop
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	20000008 	.word	0x20000008
 80056fc:	200014b4 	.word	0x200014b4

08005700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005700:	b480      	push	{r7}
 8005702:	af00      	add	r7, sp, #0
  return uwTick;
 8005704:	4b03      	ldr	r3, [pc, #12]	; (8005714 <HAL_GetTick+0x14>)
 8005706:	681b      	ldr	r3, [r3, #0]
}
 8005708:	4618      	mov	r0, r3
 800570a:	46bd      	mov	sp, r7
 800570c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005710:	4770      	bx	lr
 8005712:	bf00      	nop
 8005714:	200014b4 	.word	0x200014b4

08005718 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005720:	2300      	movs	r3, #0
 8005722:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e033      	b.n	8005796 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	2b00      	cmp	r3, #0
 8005734:	d109      	bne.n	800574a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7fe fb82 	bl	8003e40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	f003 0310 	and.w	r3, r3, #16
 8005752:	2b00      	cmp	r3, #0
 8005754:	d118      	bne.n	8005788 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800575e:	f023 0302 	bic.w	r3, r3, #2
 8005762:	f043 0202 	orr.w	r2, r3, #2
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fa54 	bl	8005c18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	f023 0303 	bic.w	r3, r3, #3
 800577e:	f043 0201 	orr.w	r2, r3, #1
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	641a      	str	r2, [r3, #64]	; 0x40
 8005786:	e001      	b.n	800578c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005794:	7bfb      	ldrb	r3, [r7, #15]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
	...

080057a0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	60f8      	str	r0, [r7, #12]
 80057a8:	60b9      	str	r1, [r7, #8]
 80057aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_ADC_Start_DMA+0x1e>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e0e9      	b.n	8005992 <HAL_ADC_Start_DMA+0x1f2>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f003 0301 	and.w	r3, r3, #1
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d018      	beq.n	8005806 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f042 0201 	orr.w	r2, r2, #1
 80057e2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80057e4:	4b6d      	ldr	r3, [pc, #436]	; (800599c <HAL_ADC_Start_DMA+0x1fc>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a6d      	ldr	r2, [pc, #436]	; (80059a0 <HAL_ADC_Start_DMA+0x200>)
 80057ea:	fba2 2303 	umull	r2, r3, r2, r3
 80057ee:	0c9a      	lsrs	r2, r3, #18
 80057f0:	4613      	mov	r3, r2
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	4413      	add	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80057f8:	e002      	b.n	8005800 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	3b01      	subs	r3, #1
 80057fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1f9      	bne.n	80057fa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005814:	d107      	bne.n	8005826 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689a      	ldr	r2, [r3, #8]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005824:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b01      	cmp	r3, #1
 8005832:	f040 80a1 	bne.w	8005978 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800583e:	f023 0301 	bic.w	r3, r3, #1
 8005842:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005854:	2b00      	cmp	r3, #0
 8005856:	d007      	beq.n	8005868 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005860:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005870:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005874:	d106      	bne.n	8005884 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800587a:	f023 0206 	bic.w	r2, r3, #6
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	645a      	str	r2, [r3, #68]	; 0x44
 8005882:	e002      	b.n	800588a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005892:	4b44      	ldr	r3, [pc, #272]	; (80059a4 <HAL_ADC_Start_DMA+0x204>)
 8005894:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589a:	4a43      	ldr	r2, [pc, #268]	; (80059a8 <HAL_ADC_Start_DMA+0x208>)
 800589c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a2:	4a42      	ldr	r2, [pc, #264]	; (80059ac <HAL_ADC_Start_DMA+0x20c>)
 80058a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058aa:	4a41      	ldr	r2, [pc, #260]	; (80059b0 <HAL_ADC_Start_DMA+0x210>)
 80058ac:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80058b6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80058c6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058d6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	334c      	adds	r3, #76	; 0x4c
 80058e2:	4619      	mov	r1, r3
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f001 f902 	bl	8006af0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	f003 031f 	and.w	r3, r3, #31
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d12a      	bne.n	800594e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a2d      	ldr	r2, [pc, #180]	; (80059b4 <HAL_ADC_Start_DMA+0x214>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d015      	beq.n	800592e <HAL_ADC_Start_DMA+0x18e>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a2c      	ldr	r2, [pc, #176]	; (80059b8 <HAL_ADC_Start_DMA+0x218>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d105      	bne.n	8005918 <HAL_ADC_Start_DMA+0x178>
 800590c:	4b25      	ldr	r3, [pc, #148]	; (80059a4 <HAL_ADC_Start_DMA+0x204>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f003 031f 	and.w	r3, r3, #31
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a27      	ldr	r2, [pc, #156]	; (80059bc <HAL_ADC_Start_DMA+0x21c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d136      	bne.n	8005990 <HAL_ADC_Start_DMA+0x1f0>
 8005922:	4b20      	ldr	r3, [pc, #128]	; (80059a4 <HAL_ADC_Start_DMA+0x204>)
 8005924:	685b      	ldr	r3, [r3, #4]
 8005926:	f003 0310 	and.w	r3, r3, #16
 800592a:	2b00      	cmp	r3, #0
 800592c:	d130      	bne.n	8005990 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d129      	bne.n	8005990 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	689a      	ldr	r2, [r3, #8]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800594a:	609a      	str	r2, [r3, #8]
 800594c:	e020      	b.n	8005990 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a18      	ldr	r2, [pc, #96]	; (80059b4 <HAL_ADC_Start_DMA+0x214>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d11b      	bne.n	8005990 <HAL_ADC_Start_DMA+0x1f0>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d114      	bne.n	8005990 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005974:	609a      	str	r2, [r3, #8]
 8005976:	e00b      	b.n	8005990 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	f043 0210 	orr.w	r2, r3, #16
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005988:	f043 0201 	orr.w	r2, r3, #1
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	20000000 	.word	0x20000000
 80059a0:	431bde83 	.word	0x431bde83
 80059a4:	40012300 	.word	0x40012300
 80059a8:	08005e11 	.word	0x08005e11
 80059ac:	08005ecb 	.word	0x08005ecb
 80059b0:	08005ee7 	.word	0x08005ee7
 80059b4:	40012000 	.word	0x40012000
 80059b8:	40012100 	.word	0x40012100
 80059bc:	40012200 	.word	0x40012200

080059c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d101      	bne.n	80059f0 <HAL_ADC_ConfigChannel+0x1c>
 80059ec:	2302      	movs	r3, #2
 80059ee:	e105      	b.n	8005bfc <HAL_ADC_ConfigChannel+0x228>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	2b09      	cmp	r3, #9
 80059fe:	d925      	bls.n	8005a4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68d9      	ldr	r1, [r3, #12]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	4613      	mov	r3, r2
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	4413      	add	r3, r2
 8005a14:	3b1e      	subs	r3, #30
 8005a16:	2207      	movs	r2, #7
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	43da      	mvns	r2, r3
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	400a      	ands	r2, r1
 8005a24:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68d9      	ldr	r1, [r3, #12]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	4618      	mov	r0, r3
 8005a38:	4603      	mov	r3, r0
 8005a3a:	005b      	lsls	r3, r3, #1
 8005a3c:	4403      	add	r3, r0
 8005a3e:	3b1e      	subs	r3, #30
 8005a40:	409a      	lsls	r2, r3
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	60da      	str	r2, [r3, #12]
 8005a4a:	e022      	b.n	8005a92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6919      	ldr	r1, [r3, #16]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	461a      	mov	r2, r3
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	4413      	add	r3, r2
 8005a60:	2207      	movs	r2, #7
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	43da      	mvns	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	400a      	ands	r2, r1
 8005a6e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6919      	ldr	r1, [r3, #16]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	4618      	mov	r0, r3
 8005a82:	4603      	mov	r3, r0
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	4403      	add	r3, r0
 8005a88:	409a      	lsls	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2b06      	cmp	r3, #6
 8005a98:	d824      	bhi.n	8005ae4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	4413      	add	r3, r2
 8005aaa:	3b05      	subs	r3, #5
 8005aac:	221f      	movs	r2, #31
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	43da      	mvns	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	400a      	ands	r2, r1
 8005aba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	4618      	mov	r0, r3
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685a      	ldr	r2, [r3, #4]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4413      	add	r3, r2
 8005ad4:	3b05      	subs	r3, #5
 8005ad6:	fa00 f203 	lsl.w	r2, r0, r3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	635a      	str	r2, [r3, #52]	; 0x34
 8005ae2:	e04c      	b.n	8005b7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	2b0c      	cmp	r3, #12
 8005aea:	d824      	bhi.n	8005b36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	3b23      	subs	r3, #35	; 0x23
 8005afe:	221f      	movs	r2, #31
 8005b00:	fa02 f303 	lsl.w	r3, r2, r3
 8005b04:	43da      	mvns	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	400a      	ands	r2, r1
 8005b0c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	3b23      	subs	r3, #35	; 0x23
 8005b28:	fa00 f203 	lsl.w	r2, r0, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	631a      	str	r2, [r3, #48]	; 0x30
 8005b34:	e023      	b.n	8005b7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	3b41      	subs	r3, #65	; 0x41
 8005b48:	221f      	movs	r2, #31
 8005b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4e:	43da      	mvns	r2, r3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	400a      	ands	r2, r1
 8005b56:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	4618      	mov	r0, r3
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685a      	ldr	r2, [r3, #4]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4413      	add	r3, r2
 8005b70:	3b41      	subs	r3, #65	; 0x41
 8005b72:	fa00 f203 	lsl.w	r2, r0, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	430a      	orrs	r2, r1
 8005b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b7e:	4b22      	ldr	r3, [pc, #136]	; (8005c08 <HAL_ADC_ConfigChannel+0x234>)
 8005b80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a21      	ldr	r2, [pc, #132]	; (8005c0c <HAL_ADC_ConfigChannel+0x238>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d109      	bne.n	8005ba0 <HAL_ADC_ConfigChannel+0x1cc>
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b12      	cmp	r3, #18
 8005b92:	d105      	bne.n	8005ba0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a19      	ldr	r2, [pc, #100]	; (8005c0c <HAL_ADC_ConfigChannel+0x238>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d123      	bne.n	8005bf2 <HAL_ADC_ConfigChannel+0x21e>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2b10      	cmp	r3, #16
 8005bb0:	d003      	beq.n	8005bba <HAL_ADC_ConfigChannel+0x1e6>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2b11      	cmp	r3, #17
 8005bb8:	d11b      	bne.n	8005bf2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b10      	cmp	r3, #16
 8005bcc:	d111      	bne.n	8005bf2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005bce:	4b10      	ldr	r3, [pc, #64]	; (8005c10 <HAL_ADC_ConfigChannel+0x23c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a10      	ldr	r2, [pc, #64]	; (8005c14 <HAL_ADC_ConfigChannel+0x240>)
 8005bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bd8:	0c9a      	lsrs	r2, r3, #18
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	005b      	lsls	r3, r3, #1
 8005be2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005be4:	e002      	b.n	8005bec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	3b01      	subs	r3, #1
 8005bea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d1f9      	bne.n	8005be6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	40012300 	.word	0x40012300
 8005c0c:	40012000 	.word	0x40012000
 8005c10:	20000000 	.word	0x20000000
 8005c14:	431bde83 	.word	0x431bde83

08005c18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005c20:	4b79      	ldr	r3, [pc, #484]	; (8005e08 <ADC_Init+0x1f0>)
 8005c22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6859      	ldr	r1, [r3, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	021a      	lsls	r2, r3, #8
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	685a      	ldr	r2, [r3, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005c70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6859      	ldr	r1, [r3, #4]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6899      	ldr	r1, [r3, #8]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	4a58      	ldr	r2, [pc, #352]	; (8005e0c <ADC_Init+0x1f4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d022      	beq.n	8005cf6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005cbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6899      	ldr	r1, [r3, #8]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689a      	ldr	r2, [r3, #8]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005ce0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6899      	ldr	r1, [r3, #8]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	430a      	orrs	r2, r1
 8005cf2:	609a      	str	r2, [r3, #8]
 8005cf4:	e00f      	b.n	8005d16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689a      	ldr	r2, [r3, #8]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005d14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689a      	ldr	r2, [r3, #8]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f022 0202 	bic.w	r2, r2, #2
 8005d24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6899      	ldr	r1, [r3, #8]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	7e1b      	ldrb	r3, [r3, #24]
 8005d30:	005a      	lsls	r2, r3, #1
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	430a      	orrs	r2, r1
 8005d38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d01b      	beq.n	8005d7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685a      	ldr	r2, [r3, #4]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005d62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6859      	ldr	r1, [r3, #4]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	035a      	lsls	r2, r3, #13
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	430a      	orrs	r2, r1
 8005d78:	605a      	str	r2, [r3, #4]
 8005d7a:	e007      	b.n	8005d8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	3b01      	subs	r3, #1
 8005da8:	051a      	lsls	r2, r3, #20
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	430a      	orrs	r2, r1
 8005db0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005dc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	6899      	ldr	r1, [r3, #8]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005dce:	025a      	lsls	r2, r3, #9
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	430a      	orrs	r2, r1
 8005dd6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005de6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6899      	ldr	r1, [r3, #8]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	029a      	lsls	r2, r3, #10
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	609a      	str	r2, [r3, #8]
}
 8005dfc:	bf00      	nop
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	40012300 	.word	0x40012300
 8005e0c:	0f000001 	.word	0x0f000001

08005e10 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b084      	sub	sp, #16
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d13c      	bne.n	8005ea4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d12b      	bne.n	8005e9c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d127      	bne.n	8005e9c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e52:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d006      	beq.n	8005e68 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d119      	bne.n	8005e9c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f022 0220 	bic.w	r2, r2, #32
 8005e76:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d105      	bne.n	8005e9c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	f043 0201 	orr.w	r2, r3, #1
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f003 fc48 	bl	8009732 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005ea2:	e00e      	b.n	8005ec2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea8:	f003 0310 	and.w	r3, r3, #16
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d003      	beq.n	8005eb8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f7ff fd85 	bl	80059c0 <HAL_ADC_ErrorCallback>
}
 8005eb6:	e004      	b.n	8005ec2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	4798      	blx	r3
}
 8005ec2:	bf00      	nop
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f003 fcd8 	bl	800988e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005ede:	bf00      	nop
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b084      	sub	sp, #16
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2240      	movs	r2, #64	; 0x40
 8005ef8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efe:	f043 0204 	orr.w	r2, r3, #4
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f7ff fd5a 	bl	80059c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005f0c:	bf00      	nop
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d101      	bne.n	8005f26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e0ed      	b.n	8006102 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d102      	bne.n	8005f38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f7fe f8e8 	bl	8004108 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0201 	orr.w	r2, r2, #1
 8005f46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f48:	f7ff fbda 	bl	8005700 <HAL_GetTick>
 8005f4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005f4e:	e012      	b.n	8005f76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005f50:	f7ff fbd6 	bl	8005700 <HAL_GetTick>
 8005f54:	4602      	mov	r2, r0
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	2b0a      	cmp	r3, #10
 8005f5c:	d90b      	bls.n	8005f76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2205      	movs	r2, #5
 8005f6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e0c5      	b.n	8006102 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0e5      	beq.n	8005f50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0202 	bic.w	r2, r2, #2
 8005f92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f94:	f7ff fbb4 	bl	8005700 <HAL_GetTick>
 8005f98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005f9a:	e012      	b.n	8005fc2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005f9c:	f7ff fbb0 	bl	8005700 <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b0a      	cmp	r3, #10
 8005fa8:	d90b      	bls.n	8005fc2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2205      	movs	r2, #5
 8005fba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e09f      	b.n	8006102 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e5      	bne.n	8005f9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	7e1b      	ldrb	r3, [r3, #24]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d108      	bne.n	8005fea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681a      	ldr	r2, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005fe6:	601a      	str	r2, [r3, #0]
 8005fe8:	e007      	b.n	8005ffa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ff8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	7e5b      	ldrb	r3, [r3, #25]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d108      	bne.n	8006014 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006010:	601a      	str	r2, [r3, #0]
 8006012:	e007      	b.n	8006024 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006022:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	7e9b      	ldrb	r3, [r3, #26]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d108      	bne.n	800603e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0220 	orr.w	r2, r2, #32
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	e007      	b.n	800604e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0220 	bic.w	r2, r2, #32
 800604c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	7edb      	ldrb	r3, [r3, #27]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d108      	bne.n	8006068 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0210 	bic.w	r2, r2, #16
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	e007      	b.n	8006078 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f042 0210 	orr.w	r2, r2, #16
 8006076:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	7f1b      	ldrb	r3, [r3, #28]
 800607c:	2b01      	cmp	r3, #1
 800607e:	d108      	bne.n	8006092 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0208 	orr.w	r2, r2, #8
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	e007      	b.n	80060a2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 0208 	bic.w	r2, r2, #8
 80060a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	7f5b      	ldrb	r3, [r3, #29]
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d108      	bne.n	80060bc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f042 0204 	orr.w	r2, r2, #4
 80060b8:	601a      	str	r2, [r3, #0]
 80060ba:	e007      	b.n	80060cc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	681a      	ldr	r2, [r3, #0]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f022 0204 	bic.w	r2, r2, #4
 80060ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	431a      	orrs	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	431a      	orrs	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	ea42 0103 	orr.w	r1, r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	1e5a      	subs	r2, r3, #1
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800610a:	b480      	push	{r7}
 800610c:	b087      	sub	sp, #28
 800610e:	af00      	add	r7, sp, #0
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	60b9      	str	r1, [r7, #8]
 8006114:	607a      	str	r2, [r7, #4]
 8006116:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800611e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006120:	7dfb      	ldrb	r3, [r7, #23]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d003      	beq.n	800612e <HAL_CAN_GetRxMessage+0x24>
 8006126:	7dfb      	ldrb	r3, [r7, #23]
 8006128:	2b02      	cmp	r3, #2
 800612a:	f040 80f3 	bne.w	8006314 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10e      	bne.n	8006152 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	f003 0303 	and.w	r3, r3, #3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d116      	bne.n	8006170 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e0e7      	b.n	8006322 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	f003 0303 	and.w	r3, r3, #3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d107      	bne.n	8006170 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e0d8      	b.n	8006322 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	331b      	adds	r3, #27
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	4413      	add	r3, r2
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0204 	and.w	r2, r3, #4
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10c      	bne.n	80061a8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	331b      	adds	r3, #27
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	4413      	add	r3, r2
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	0d5b      	lsrs	r3, r3, #21
 800619e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	e00b      	b.n	80061c0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	331b      	adds	r3, #27
 80061b0:	011b      	lsls	r3, r3, #4
 80061b2:	4413      	add	r3, r2
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	08db      	lsrs	r3, r3, #3
 80061b8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	331b      	adds	r3, #27
 80061c8:	011b      	lsls	r3, r3, #4
 80061ca:	4413      	add	r3, r2
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0202 	and.w	r2, r3, #2
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	331b      	adds	r3, #27
 80061de:	011b      	lsls	r3, r3, #4
 80061e0:	4413      	add	r3, r2
 80061e2:	3304      	adds	r3, #4
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 020f 	and.w	r2, r3, #15
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	331b      	adds	r3, #27
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	4413      	add	r3, r2
 80061fa:	3304      	adds	r3, #4
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	0a1b      	lsrs	r3, r3, #8
 8006200:	b2da      	uxtb	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	331b      	adds	r3, #27
 800620e:	011b      	lsls	r3, r3, #4
 8006210:	4413      	add	r3, r2
 8006212:	3304      	adds	r3, #4
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	0c1b      	lsrs	r3, r3, #16
 8006218:	b29a      	uxth	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	011b      	lsls	r3, r3, #4
 8006226:	4413      	add	r3, r2
 8006228:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	b2da      	uxtb	r2, r3
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	4413      	add	r3, r2
 800623e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	0a1a      	lsrs	r2, r3, #8
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	3301      	adds	r3, #1
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681a      	ldr	r2, [r3, #0]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	011b      	lsls	r3, r3, #4
 8006256:	4413      	add	r3, r2
 8006258:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	0c1a      	lsrs	r2, r3, #16
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	3302      	adds	r3, #2
 8006264:	b2d2      	uxtb	r2, r2
 8006266:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	011b      	lsls	r3, r3, #4
 8006270:	4413      	add	r3, r2
 8006272:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	0e1a      	lsrs	r2, r3, #24
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	3303      	adds	r3, #3
 800627e:	b2d2      	uxtb	r2, r2
 8006280:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	4413      	add	r3, r2
 800628c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	3304      	adds	r3, #4
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	011b      	lsls	r3, r3, #4
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	0a1a      	lsrs	r2, r3, #8
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	3305      	adds	r3, #5
 80062b0:	b2d2      	uxtb	r2, r2
 80062b2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	011b      	lsls	r3, r3, #4
 80062bc:	4413      	add	r3, r2
 80062be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	0c1a      	lsrs	r2, r3, #16
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	3306      	adds	r3, #6
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	011b      	lsls	r3, r3, #4
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	0e1a      	lsrs	r2, r3, #24
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	3307      	adds	r3, #7
 80062e4:	b2d2      	uxtb	r2, r2
 80062e6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d108      	bne.n	8006300 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f042 0220 	orr.w	r2, r2, #32
 80062fc:	60da      	str	r2, [r3, #12]
 80062fe:	e007      	b.n	8006310 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	691a      	ldr	r2, [r3, #16]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0220 	orr.w	r2, r2, #32
 800630e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	e006      	b.n	8006322 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
  }
}
 8006322:	4618      	mov	r0, r3
 8006324:	371c      	adds	r7, #28
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b08a      	sub	sp, #40	; 0x28
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006336:	2300      	movs	r3, #0
 8006338:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d07c      	beq.n	800646e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d023      	beq.n	80063c6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2201      	movs	r2, #1
 8006384:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	f003 0302 	and.w	r3, r3, #2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d003      	beq.n	8006398 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7fb f90b 	bl	80015ac <HAL_CAN_TxMailbox0CompleteCallback>
 8006396:	e016      	b.n	80063c6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	f003 0304 	and.w	r3, r3, #4
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d004      	beq.n	80063ac <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80063a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
 80063aa:	e00c      	b.n	80063c6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	f003 0308 	and.w	r3, r3, #8
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d004      	beq.n	80063c0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80063b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063bc:	627b      	str	r3, [r7, #36]	; 0x24
 80063be:	e002      	b.n	80063c6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f97f 	bl	80066c4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d024      	beq.n	800641a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d003      	beq.n	80063ec <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 f959 	bl	800669c <HAL_CAN_TxMailbox1CompleteCallback>
 80063ea:	e016      	b.n	800641a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d004      	beq.n	8006400 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80063f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80063fc:	627b      	str	r3, [r7, #36]	; 0x24
 80063fe:	e00c      	b.n	800641a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006406:	2b00      	cmp	r3, #0
 8006408:	d004      	beq.n	8006414 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
 8006412:	e002      	b.n	800641a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f95f 	bl	80066d8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800641a:	69bb      	ldr	r3, [r7, #24]
 800641c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d024      	beq.n	800646e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800642c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006434:	2b00      	cmp	r3, #0
 8006436:	d003      	beq.n	8006440 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f939 	bl	80066b0 <HAL_CAN_TxMailbox2CompleteCallback>
 800643e:	e016      	b.n	800646e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d004      	beq.n	8006454 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800644c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006450:	627b      	str	r3, [r7, #36]	; 0x24
 8006452:	e00c      	b.n	800646e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d004      	beq.n	8006468 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800645e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006464:	627b      	str	r3, [r7, #36]	; 0x24
 8006466:	e002      	b.n	800646e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f93f 	bl	80066ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	f003 0308 	and.w	r3, r3, #8
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00c      	beq.n	8006492 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f003 0310 	and.w	r3, r3, #16
 800647e:	2b00      	cmp	r3, #0
 8006480:	d007      	beq.n	8006492 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006488:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2210      	movs	r2, #16
 8006490:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006492:	6a3b      	ldr	r3, [r7, #32]
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b00      	cmp	r3, #0
 800649a:	d00b      	beq.n	80064b4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f003 0308 	and.w	r3, r3, #8
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d006      	beq.n	80064b4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2208      	movs	r2, #8
 80064ac:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f926 	bl	8006700 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80064b4:	6a3b      	ldr	r3, [r7, #32]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d009      	beq.n	80064d2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f003 0303 	and.w	r3, r3, #3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f7fa ffd5 	bl	800147c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00c      	beq.n	80064f6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f003 0310 	and.w	r3, r3, #16
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d007      	beq.n	80064f6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80064e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2210      	movs	r2, #16
 80064f4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	f003 0320 	and.w	r3, r3, #32
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00b      	beq.n	8006518 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f003 0308 	and.w	r3, r3, #8
 8006506:	2b00      	cmp	r3, #0
 8006508:	d006      	beq.n	8006518 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2208      	movs	r2, #8
 8006510:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f8fe 	bl	8006714 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	f003 0310 	and.w	r3, r3, #16
 800651e:	2b00      	cmp	r3, #0
 8006520:	d009      	beq.n	8006536 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	691b      	ldr	r3, [r3, #16]
 8006528:	f003 0303 	and.w	r3, r3, #3
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f7fa ffdd 	bl	80014f0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00b      	beq.n	8006558 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	f003 0310 	and.w	r3, r3, #16
 8006546:	2b00      	cmp	r3, #0
 8006548:	d006      	beq.n	8006558 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2210      	movs	r2, #16
 8006550:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f8e8 	bl	8006728 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d00b      	beq.n	800657a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b00      	cmp	r3, #0
 800656a:	d006      	beq.n	800657a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2208      	movs	r2, #8
 8006572:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f8e1 	bl	800673c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800657a:	6a3b      	ldr	r3, [r7, #32]
 800657c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d07b      	beq.n	800667c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	f003 0304 	and.w	r3, r3, #4
 800658a:	2b00      	cmp	r3, #0
 800658c:	d072      	beq.n	8006674 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800658e:	6a3b      	ldr	r3, [r7, #32]
 8006590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006594:	2b00      	cmp	r3, #0
 8006596:	d008      	beq.n	80065aa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	f043 0301 	orr.w	r3, r3, #1
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d008      	beq.n	80065c6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	f043 0302 	orr.w	r3, r3, #2
 80065c4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80065c6:	6a3b      	ldr	r3, [r7, #32]
 80065c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d008      	beq.n	80065e2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d003      	beq.n	80065e2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	f043 0304 	orr.w	r3, r3, #4
 80065e0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80065e2:	6a3b      	ldr	r3, [r7, #32]
 80065e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d043      	beq.n	8006674 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d03e      	beq.n	8006674 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065fc:	2b60      	cmp	r3, #96	; 0x60
 80065fe:	d02b      	beq.n	8006658 <HAL_CAN_IRQHandler+0x32a>
 8006600:	2b60      	cmp	r3, #96	; 0x60
 8006602:	d82e      	bhi.n	8006662 <HAL_CAN_IRQHandler+0x334>
 8006604:	2b50      	cmp	r3, #80	; 0x50
 8006606:	d022      	beq.n	800664e <HAL_CAN_IRQHandler+0x320>
 8006608:	2b50      	cmp	r3, #80	; 0x50
 800660a:	d82a      	bhi.n	8006662 <HAL_CAN_IRQHandler+0x334>
 800660c:	2b40      	cmp	r3, #64	; 0x40
 800660e:	d019      	beq.n	8006644 <HAL_CAN_IRQHandler+0x316>
 8006610:	2b40      	cmp	r3, #64	; 0x40
 8006612:	d826      	bhi.n	8006662 <HAL_CAN_IRQHandler+0x334>
 8006614:	2b30      	cmp	r3, #48	; 0x30
 8006616:	d010      	beq.n	800663a <HAL_CAN_IRQHandler+0x30c>
 8006618:	2b30      	cmp	r3, #48	; 0x30
 800661a:	d822      	bhi.n	8006662 <HAL_CAN_IRQHandler+0x334>
 800661c:	2b10      	cmp	r3, #16
 800661e:	d002      	beq.n	8006626 <HAL_CAN_IRQHandler+0x2f8>
 8006620:	2b20      	cmp	r3, #32
 8006622:	d005      	beq.n	8006630 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006624:	e01d      	b.n	8006662 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006628:	f043 0308 	orr.w	r3, r3, #8
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800662e:	e019      	b.n	8006664 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	f043 0310 	orr.w	r3, r3, #16
 8006636:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006638:	e014      	b.n	8006664 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	f043 0320 	orr.w	r3, r3, #32
 8006640:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006642:	e00f      	b.n	8006664 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800664c:	e00a      	b.n	8006664 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006654:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006656:	e005      	b.n	8006664 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800665e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006660:	e000      	b.n	8006664 <HAL_CAN_IRQHandler+0x336>
            break;
 8006662:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	699a      	ldr	r2, [r3, #24]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006672:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2204      	movs	r2, #4
 800667a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	2b00      	cmp	r3, #0
 8006680:	d008      	beq.n	8006694 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f7fa ff68 	bl	8001564 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006694:	bf00      	nop
 8006696:	3728      	adds	r7, #40	; 0x28
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006758:	2300      	movs	r3, #0
 800675a:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006762:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8006764:	7bbb      	ldrb	r3, [r7, #14]
 8006766:	2b01      	cmp	r3, #1
 8006768:	d002      	beq.n	8006770 <HAL_CAN_ResetError+0x20>
 800676a:	7bbb      	ldrb	r3, [r7, #14]
 800676c:	2b02      	cmp	r3, #2
 800676e:	d103      	bne.n	8006778 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	625a      	str	r2, [r3, #36]	; 0x24
 8006776:	e007      	b.n	8006788 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8006788:	7bfb      	ldrb	r3, [r7, #15]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
	...

08006798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067a8:	4b0c      	ldr	r3, [pc, #48]	; (80067dc <__NVIC_SetPriorityGrouping+0x44>)
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80067b4:	4013      	ands	r3, r2
 80067b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80067c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80067c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80067ca:	4a04      	ldr	r2, [pc, #16]	; (80067dc <__NVIC_SetPriorityGrouping+0x44>)
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	60d3      	str	r3, [r2, #12]
}
 80067d0:	bf00      	nop
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	e000ed00 	.word	0xe000ed00

080067e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80067e0:	b480      	push	{r7}
 80067e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067e4:	4b04      	ldr	r3, [pc, #16]	; (80067f8 <__NVIC_GetPriorityGrouping+0x18>)
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	0a1b      	lsrs	r3, r3, #8
 80067ea:	f003 0307 	and.w	r3, r3, #7
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	e000ed00 	.word	0xe000ed00

080067fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	4603      	mov	r3, r0
 8006804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800680a:	2b00      	cmp	r3, #0
 800680c:	db0b      	blt.n	8006826 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	f003 021f 	and.w	r2, r3, #31
 8006814:	4907      	ldr	r1, [pc, #28]	; (8006834 <__NVIC_EnableIRQ+0x38>)
 8006816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800681a:	095b      	lsrs	r3, r3, #5
 800681c:	2001      	movs	r0, #1
 800681e:	fa00 f202 	lsl.w	r2, r0, r2
 8006822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006826:	bf00      	nop
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	e000e100 	.word	0xe000e100

08006838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	4603      	mov	r3, r0
 8006840:	6039      	str	r1, [r7, #0]
 8006842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006848:	2b00      	cmp	r3, #0
 800684a:	db0a      	blt.n	8006862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	b2da      	uxtb	r2, r3
 8006850:	490c      	ldr	r1, [pc, #48]	; (8006884 <__NVIC_SetPriority+0x4c>)
 8006852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006856:	0112      	lsls	r2, r2, #4
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	440b      	add	r3, r1
 800685c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006860:	e00a      	b.n	8006878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	b2da      	uxtb	r2, r3
 8006866:	4908      	ldr	r1, [pc, #32]	; (8006888 <__NVIC_SetPriority+0x50>)
 8006868:	79fb      	ldrb	r3, [r7, #7]
 800686a:	f003 030f 	and.w	r3, r3, #15
 800686e:	3b04      	subs	r3, #4
 8006870:	0112      	lsls	r2, r2, #4
 8006872:	b2d2      	uxtb	r2, r2
 8006874:	440b      	add	r3, r1
 8006876:	761a      	strb	r2, [r3, #24]
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	e000e100 	.word	0xe000e100
 8006888:	e000ed00 	.word	0xe000ed00

0800688c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800688c:	b480      	push	{r7}
 800688e:	b089      	sub	sp, #36	; 0x24
 8006890:	af00      	add	r7, sp, #0
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f003 0307 	and.w	r3, r3, #7
 800689e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	f1c3 0307 	rsb	r3, r3, #7
 80068a6:	2b04      	cmp	r3, #4
 80068a8:	bf28      	it	cs
 80068aa:	2304      	movcs	r3, #4
 80068ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068ae:	69fb      	ldr	r3, [r7, #28]
 80068b0:	3304      	adds	r3, #4
 80068b2:	2b06      	cmp	r3, #6
 80068b4:	d902      	bls.n	80068bc <NVIC_EncodePriority+0x30>
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	3b03      	subs	r3, #3
 80068ba:	e000      	b.n	80068be <NVIC_EncodePriority+0x32>
 80068bc:	2300      	movs	r3, #0
 80068be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068c4:	69bb      	ldr	r3, [r7, #24]
 80068c6:	fa02 f303 	lsl.w	r3, r2, r3
 80068ca:	43da      	mvns	r2, r3
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	401a      	ands	r2, r3
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80068d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	fa01 f303 	lsl.w	r3, r1, r3
 80068de:	43d9      	mvns	r1, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80068e4:	4313      	orrs	r3, r2
         );
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3724      	adds	r7, #36	; 0x24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f0:	4770      	bx	lr

080068f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b082      	sub	sp, #8
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff ff4c 	bl	8006798 <__NVIC_SetPriorityGrouping>
}
 8006900:	bf00      	nop
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006908:	b580      	push	{r7, lr}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	4603      	mov	r3, r0
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
 8006914:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006916:	2300      	movs	r3, #0
 8006918:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800691a:	f7ff ff61 	bl	80067e0 <__NVIC_GetPriorityGrouping>
 800691e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	68b9      	ldr	r1, [r7, #8]
 8006924:	6978      	ldr	r0, [r7, #20]
 8006926:	f7ff ffb1 	bl	800688c <NVIC_EncodePriority>
 800692a:	4602      	mov	r2, r0
 800692c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006930:	4611      	mov	r1, r2
 8006932:	4618      	mov	r0, r3
 8006934:	f7ff ff80 	bl	8006838 <__NVIC_SetPriority>
}
 8006938:	bf00      	nop
 800693a:	3718      	adds	r7, #24
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	4603      	mov	r3, r0
 8006948:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800694a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800694e:	4618      	mov	r0, r3
 8006950:	f7ff ff54 	bl	80067fc <__NVIC_EnableIRQ>
}
 8006954:	bf00      	nop
 8006956:	3708      	adds	r7, #8
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b082      	sub	sp, #8
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d101      	bne.n	800696e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e00e      	b.n	800698c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	795b      	ldrb	r3, [r3, #5]
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b00      	cmp	r3, #0
 8006976:	d105      	bne.n	8006984 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7fd fca6 	bl	80042d0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800699c:	2300      	movs	r3, #0
 800699e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80069a0:	f7fe feae 	bl	8005700 <HAL_GetTick>
 80069a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e099      	b.n	8006ae4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2202      	movs	r2, #2
 80069b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 0201 	bic.w	r2, r2, #1
 80069ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80069d0:	e00f      	b.n	80069f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80069d2:	f7fe fe95 	bl	8005700 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	2b05      	cmp	r3, #5
 80069de:	d908      	bls.n	80069f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2220      	movs	r2, #32
 80069e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2203      	movs	r2, #3
 80069ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80069ee:	2303      	movs	r3, #3
 80069f0:	e078      	b.n	8006ae4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e8      	bne.n	80069d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	4b38      	ldr	r3, [pc, #224]	; (8006aec <HAL_DMA_Init+0x158>)
 8006a0c:	4013      	ands	r3, r2
 8006a0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006a36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a48:	2b04      	cmp	r3, #4
 8006a4a:	d107      	bne.n	8006a5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a54:	4313      	orrs	r3, r2
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	695b      	ldr	r3, [r3, #20]
 8006a6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f023 0307 	bic.w	r3, r3, #7
 8006a72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a82:	2b04      	cmp	r3, #4
 8006a84:	d117      	bne.n	8006ab6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d00e      	beq.n	8006ab6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fa6f 	bl	8006f7c <DMA_CheckFifoParam>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d008      	beq.n	8006ab6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2240      	movs	r2, #64	; 0x40
 8006aa8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e016      	b.n	8006ae4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	697a      	ldr	r2, [r7, #20]
 8006abc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fa26 	bl	8006f10 <DMA_CalcBaseAndBitshift>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006acc:	223f      	movs	r2, #63	; 0x3f
 8006ace:	409a      	lsls	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3718      	adds	r7, #24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	f010803f 	.word	0xf010803f

08006af0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
 8006afc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006afe:	2300      	movs	r3, #0
 8006b00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d101      	bne.n	8006b16 <HAL_DMA_Start_IT+0x26>
 8006b12:	2302      	movs	r3, #2
 8006b14:	e040      	b.n	8006b98 <HAL_DMA_Start_IT+0xa8>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d12f      	bne.n	8006b8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	68b9      	ldr	r1, [r7, #8]
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f000 f9b8 	bl	8006eb4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b48:	223f      	movs	r2, #63	; 0x3f
 8006b4a:	409a      	lsls	r2, r3
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f042 0216 	orr.w	r2, r2, #22
 8006b5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d007      	beq.n	8006b78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0208 	orr.w	r2, r2, #8
 8006b76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f042 0201 	orr.w	r2, r2, #1
 8006b86:	601a      	str	r2, [r3, #0]
 8006b88:	e005      	b.n	8006b96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006b92:	2302      	movs	r3, #2
 8006b94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006bac:	4b8e      	ldr	r3, [pc, #568]	; (8006de8 <HAL_DMA_IRQHandler+0x248>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a8e      	ldr	r2, [pc, #568]	; (8006dec <HAL_DMA_IRQHandler+0x24c>)
 8006bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb6:	0a9b      	lsrs	r3, r3, #10
 8006bb8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bca:	2208      	movs	r2, #8
 8006bcc:	409a      	lsls	r2, r3
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d01a      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0304 	and.w	r3, r3, #4
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d013      	beq.n	8006c0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 0204 	bic.w	r2, r2, #4
 8006bf2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	409a      	lsls	r2, r3
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c04:	f043 0201 	orr.w	r2, r3, #1
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c10:	2201      	movs	r2, #1
 8006c12:	409a      	lsls	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4013      	ands	r3, r2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d012      	beq.n	8006c42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00b      	beq.n	8006c42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c2e:	2201      	movs	r2, #1
 8006c30:	409a      	lsls	r2, r3
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c3a:	f043 0202 	orr.w	r2, r3, #2
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c46:	2204      	movs	r2, #4
 8006c48:	409a      	lsls	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d012      	beq.n	8006c78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00b      	beq.n	8006c78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c64:	2204      	movs	r2, #4
 8006c66:	409a      	lsls	r2, r3
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c70:	f043 0204 	orr.w	r2, r3, #4
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c7c:	2210      	movs	r2, #16
 8006c7e:	409a      	lsls	r2, r3
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4013      	ands	r3, r2
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d043      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 0308 	and.w	r3, r3, #8
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d03c      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c9a:	2210      	movs	r2, #16
 8006c9c:	409a      	lsls	r2, r3
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d018      	beq.n	8006ce2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d108      	bne.n	8006cd0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d024      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	4798      	blx	r3
 8006cce:	e01f      	b.n	8006d10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d01b      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	4798      	blx	r3
 8006ce0:	e016      	b.n	8006d10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d107      	bne.n	8006d00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f022 0208 	bic.w	r2, r2, #8
 8006cfe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d003      	beq.n	8006d10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d14:	2220      	movs	r2, #32
 8006d16:	409a      	lsls	r2, r3
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4013      	ands	r3, r2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	f000 808f 	beq.w	8006e40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0310 	and.w	r3, r3, #16
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	f000 8087 	beq.w	8006e40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d36:	2220      	movs	r2, #32
 8006d38:	409a      	lsls	r2, r3
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	2b05      	cmp	r3, #5
 8006d48:	d136      	bne.n	8006db8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0216 	bic.w	r2, r2, #22
 8006d58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	695a      	ldr	r2, [r3, #20]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d103      	bne.n	8006d7a <HAL_DMA_IRQHandler+0x1da>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d007      	beq.n	8006d8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f022 0208 	bic.w	r2, r2, #8
 8006d88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d8e:	223f      	movs	r2, #63	; 0x3f
 8006d90:	409a      	lsls	r2, r3
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d07e      	beq.n	8006eac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	4798      	blx	r3
        }
        return;
 8006db6:	e079      	b.n	8006eac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d01d      	beq.n	8006e02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10d      	bne.n	8006df0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d031      	beq.n	8006e40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	4798      	blx	r3
 8006de4:	e02c      	b.n	8006e40 <HAL_DMA_IRQHandler+0x2a0>
 8006de6:	bf00      	nop
 8006de8:	20000000 	.word	0x20000000
 8006dec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d023      	beq.n	8006e40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	4798      	blx	r3
 8006e00:	e01e      	b.n	8006e40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10f      	bne.n	8006e30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0210 	bic.w	r2, r2, #16
 8006e1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d003      	beq.n	8006e40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d032      	beq.n	8006eae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d022      	beq.n	8006e9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2205      	movs	r2, #5
 8006e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f022 0201 	bic.w	r2, r2, #1
 8006e6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	60bb      	str	r3, [r7, #8]
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d307      	bcc.n	8006e88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0301 	and.w	r3, r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1f2      	bne.n	8006e6c <HAL_DMA_IRQHandler+0x2cc>
 8006e86:	e000      	b.n	8006e8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006e88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d005      	beq.n	8006eae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	4798      	blx	r3
 8006eaa:	e000      	b.n	8006eae <HAL_DMA_IRQHandler+0x30e>
        return;
 8006eac:	bf00      	nop
    }
  }
}
 8006eae:	3718      	adds	r7, #24
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
 8006ec0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ed0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	683a      	ldr	r2, [r7, #0]
 8006ed8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	2b40      	cmp	r3, #64	; 0x40
 8006ee0:	d108      	bne.n	8006ef4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006ef2:	e007      	b.n	8006f04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	60da      	str	r2, [r3, #12]
}
 8006f04:	bf00      	nop
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	3b10      	subs	r3, #16
 8006f20:	4a14      	ldr	r2, [pc, #80]	; (8006f74 <DMA_CalcBaseAndBitshift+0x64>)
 8006f22:	fba2 2303 	umull	r2, r3, r2, r3
 8006f26:	091b      	lsrs	r3, r3, #4
 8006f28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006f2a:	4a13      	ldr	r2, [pc, #76]	; (8006f78 <DMA_CalcBaseAndBitshift+0x68>)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	4413      	add	r3, r2
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	461a      	mov	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2b03      	cmp	r3, #3
 8006f3c:	d909      	bls.n	8006f52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006f46:	f023 0303 	bic.w	r3, r3, #3
 8006f4a:	1d1a      	adds	r2, r3, #4
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	659a      	str	r2, [r3, #88]	; 0x58
 8006f50:	e007      	b.n	8006f62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006f5a:	f023 0303 	bic.w	r3, r3, #3
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	aaaaaaab 	.word	0xaaaaaaab
 8006f78:	08011fb4 	.word	0x08011fb4

08006f7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d11f      	bne.n	8006fd6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	2b03      	cmp	r3, #3
 8006f9a:	d856      	bhi.n	800704a <DMA_CheckFifoParam+0xce>
 8006f9c:	a201      	add	r2, pc, #4	; (adr r2, 8006fa4 <DMA_CheckFifoParam+0x28>)
 8006f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa2:	bf00      	nop
 8006fa4:	08006fb5 	.word	0x08006fb5
 8006fa8:	08006fc7 	.word	0x08006fc7
 8006fac:	08006fb5 	.word	0x08006fb5
 8006fb0:	0800704b 	.word	0x0800704b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d046      	beq.n	800704e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fc4:	e043      	b.n	800704e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006fce:	d140      	bne.n	8007052 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fd4:	e03d      	b.n	8007052 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006fde:	d121      	bne.n	8007024 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	2b03      	cmp	r3, #3
 8006fe4:	d837      	bhi.n	8007056 <DMA_CheckFifoParam+0xda>
 8006fe6:	a201      	add	r2, pc, #4	; (adr r2, 8006fec <DMA_CheckFifoParam+0x70>)
 8006fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fec:	08006ffd 	.word	0x08006ffd
 8006ff0:	08007003 	.word	0x08007003
 8006ff4:	08006ffd 	.word	0x08006ffd
 8006ff8:	08007015 	.word	0x08007015
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	73fb      	strb	r3, [r7, #15]
      break;
 8007000:	e030      	b.n	8007064 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007006:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d025      	beq.n	800705a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007012:	e022      	b.n	800705a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800701c:	d11f      	bne.n	800705e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007022:	e01c      	b.n	800705e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2b02      	cmp	r3, #2
 8007028:	d903      	bls.n	8007032 <DMA_CheckFifoParam+0xb6>
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	2b03      	cmp	r3, #3
 800702e:	d003      	beq.n	8007038 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007030:	e018      	b.n	8007064 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	73fb      	strb	r3, [r7, #15]
      break;
 8007036:	e015      	b.n	8007064 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007040:	2b00      	cmp	r3, #0
 8007042:	d00e      	beq.n	8007062 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	73fb      	strb	r3, [r7, #15]
      break;
 8007048:	e00b      	b.n	8007062 <DMA_CheckFifoParam+0xe6>
      break;
 800704a:	bf00      	nop
 800704c:	e00a      	b.n	8007064 <DMA_CheckFifoParam+0xe8>
      break;
 800704e:	bf00      	nop
 8007050:	e008      	b.n	8007064 <DMA_CheckFifoParam+0xe8>
      break;
 8007052:	bf00      	nop
 8007054:	e006      	b.n	8007064 <DMA_CheckFifoParam+0xe8>
      break;
 8007056:	bf00      	nop
 8007058:	e004      	b.n	8007064 <DMA_CheckFifoParam+0xe8>
      break;
 800705a:	bf00      	nop
 800705c:	e002      	b.n	8007064 <DMA_CheckFifoParam+0xe8>
      break;   
 800705e:	bf00      	nop
 8007060:	e000      	b.n	8007064 <DMA_CheckFifoParam+0xe8>
      break;
 8007062:	bf00      	nop
    }
  } 
  
  return status; 
 8007064:	7bfb      	ldrb	r3, [r7, #15]
}
 8007066:	4618      	mov	r0, r3
 8007068:	3714      	adds	r7, #20
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop

08007074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007074:	b480      	push	{r7}
 8007076:	b089      	sub	sp, #36	; 0x24
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800707e:	2300      	movs	r3, #0
 8007080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007082:	2300      	movs	r3, #0
 8007084:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007086:	2300      	movs	r3, #0
 8007088:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800708a:	2300      	movs	r3, #0
 800708c:	61fb      	str	r3, [r7, #28]
 800708e:	e16b      	b.n	8007368 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007090:	2201      	movs	r2, #1
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	fa02 f303 	lsl.w	r3, r2, r3
 8007098:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	4013      	ands	r3, r2
 80070a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	f040 815a 	bne.w	8007362 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	f003 0303 	and.w	r3, r3, #3
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d005      	beq.n	80070c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	d130      	bne.n	8007128 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	2203      	movs	r2, #3
 80070d2:	fa02 f303 	lsl.w	r3, r2, r3
 80070d6:	43db      	mvns	r3, r3
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	4013      	ands	r3, r2
 80070dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	68da      	ldr	r2, [r3, #12]
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	005b      	lsls	r3, r3, #1
 80070e6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	69ba      	ldr	r2, [r7, #24]
 80070f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80070fc:	2201      	movs	r2, #1
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	fa02 f303 	lsl.w	r3, r2, r3
 8007104:	43db      	mvns	r3, r3
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	4013      	ands	r3, r2
 800710a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	091b      	lsrs	r3, r3, #4
 8007112:	f003 0201 	and.w	r2, r3, #1
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	fa02 f303 	lsl.w	r3, r2, r3
 800711c:	69ba      	ldr	r2, [r7, #24]
 800711e:	4313      	orrs	r3, r2
 8007120:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	69ba      	ldr	r2, [r7, #24]
 8007126:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	f003 0303 	and.w	r3, r3, #3
 8007130:	2b03      	cmp	r3, #3
 8007132:	d017      	beq.n	8007164 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	005b      	lsls	r3, r3, #1
 800713e:	2203      	movs	r2, #3
 8007140:	fa02 f303 	lsl.w	r3, r2, r3
 8007144:	43db      	mvns	r3, r3
 8007146:	69ba      	ldr	r2, [r7, #24]
 8007148:	4013      	ands	r3, r2
 800714a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	689a      	ldr	r2, [r3, #8]
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	005b      	lsls	r3, r3, #1
 8007154:	fa02 f303 	lsl.w	r3, r2, r3
 8007158:	69ba      	ldr	r2, [r7, #24]
 800715a:	4313      	orrs	r3, r2
 800715c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	69ba      	ldr	r2, [r7, #24]
 8007162:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	f003 0303 	and.w	r3, r3, #3
 800716c:	2b02      	cmp	r3, #2
 800716e:	d123      	bne.n	80071b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	08da      	lsrs	r2, r3, #3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	3208      	adds	r2, #8
 8007178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800717c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	f003 0307 	and.w	r3, r3, #7
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	220f      	movs	r2, #15
 8007188:	fa02 f303 	lsl.w	r3, r2, r3
 800718c:	43db      	mvns	r3, r3
 800718e:	69ba      	ldr	r2, [r7, #24]
 8007190:	4013      	ands	r3, r2
 8007192:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	691a      	ldr	r2, [r3, #16]
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	f003 0307 	and.w	r3, r3, #7
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	fa02 f303 	lsl.w	r3, r2, r3
 80071a4:	69ba      	ldr	r2, [r7, #24]
 80071a6:	4313      	orrs	r3, r2
 80071a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	08da      	lsrs	r2, r3, #3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	3208      	adds	r2, #8
 80071b2:	69b9      	ldr	r1, [r7, #24]
 80071b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	005b      	lsls	r3, r3, #1
 80071c2:	2203      	movs	r2, #3
 80071c4:	fa02 f303 	lsl.w	r3, r2, r3
 80071c8:	43db      	mvns	r3, r3
 80071ca:	69ba      	ldr	r2, [r7, #24]
 80071cc:	4013      	ands	r3, r2
 80071ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	f003 0203 	and.w	r2, r3, #3
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	005b      	lsls	r3, r3, #1
 80071dc:	fa02 f303 	lsl.w	r3, r2, r3
 80071e0:	69ba      	ldr	r2, [r7, #24]
 80071e2:	4313      	orrs	r3, r2
 80071e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	69ba      	ldr	r2, [r7, #24]
 80071ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	f000 80b4 	beq.w	8007362 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071fa:	2300      	movs	r3, #0
 80071fc:	60fb      	str	r3, [r7, #12]
 80071fe:	4b60      	ldr	r3, [pc, #384]	; (8007380 <HAL_GPIO_Init+0x30c>)
 8007200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007202:	4a5f      	ldr	r2, [pc, #380]	; (8007380 <HAL_GPIO_Init+0x30c>)
 8007204:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007208:	6453      	str	r3, [r2, #68]	; 0x44
 800720a:	4b5d      	ldr	r3, [pc, #372]	; (8007380 <HAL_GPIO_Init+0x30c>)
 800720c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800720e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007212:	60fb      	str	r3, [r7, #12]
 8007214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007216:	4a5b      	ldr	r2, [pc, #364]	; (8007384 <HAL_GPIO_Init+0x310>)
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	089b      	lsrs	r3, r3, #2
 800721c:	3302      	adds	r3, #2
 800721e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	f003 0303 	and.w	r3, r3, #3
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	220f      	movs	r2, #15
 800722e:	fa02 f303 	lsl.w	r3, r2, r3
 8007232:	43db      	mvns	r3, r3
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	4013      	ands	r3, r2
 8007238:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a52      	ldr	r2, [pc, #328]	; (8007388 <HAL_GPIO_Init+0x314>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d02b      	beq.n	800729a <HAL_GPIO_Init+0x226>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a51      	ldr	r2, [pc, #324]	; (800738c <HAL_GPIO_Init+0x318>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d025      	beq.n	8007296 <HAL_GPIO_Init+0x222>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a50      	ldr	r2, [pc, #320]	; (8007390 <HAL_GPIO_Init+0x31c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d01f      	beq.n	8007292 <HAL_GPIO_Init+0x21e>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a4f      	ldr	r2, [pc, #316]	; (8007394 <HAL_GPIO_Init+0x320>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d019      	beq.n	800728e <HAL_GPIO_Init+0x21a>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a4e      	ldr	r2, [pc, #312]	; (8007398 <HAL_GPIO_Init+0x324>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d013      	beq.n	800728a <HAL_GPIO_Init+0x216>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a4d      	ldr	r2, [pc, #308]	; (800739c <HAL_GPIO_Init+0x328>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d00d      	beq.n	8007286 <HAL_GPIO_Init+0x212>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a4c      	ldr	r2, [pc, #304]	; (80073a0 <HAL_GPIO_Init+0x32c>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d007      	beq.n	8007282 <HAL_GPIO_Init+0x20e>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a4b      	ldr	r2, [pc, #300]	; (80073a4 <HAL_GPIO_Init+0x330>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d101      	bne.n	800727e <HAL_GPIO_Init+0x20a>
 800727a:	2307      	movs	r3, #7
 800727c:	e00e      	b.n	800729c <HAL_GPIO_Init+0x228>
 800727e:	2308      	movs	r3, #8
 8007280:	e00c      	b.n	800729c <HAL_GPIO_Init+0x228>
 8007282:	2306      	movs	r3, #6
 8007284:	e00a      	b.n	800729c <HAL_GPIO_Init+0x228>
 8007286:	2305      	movs	r3, #5
 8007288:	e008      	b.n	800729c <HAL_GPIO_Init+0x228>
 800728a:	2304      	movs	r3, #4
 800728c:	e006      	b.n	800729c <HAL_GPIO_Init+0x228>
 800728e:	2303      	movs	r3, #3
 8007290:	e004      	b.n	800729c <HAL_GPIO_Init+0x228>
 8007292:	2302      	movs	r3, #2
 8007294:	e002      	b.n	800729c <HAL_GPIO_Init+0x228>
 8007296:	2301      	movs	r3, #1
 8007298:	e000      	b.n	800729c <HAL_GPIO_Init+0x228>
 800729a:	2300      	movs	r3, #0
 800729c:	69fa      	ldr	r2, [r7, #28]
 800729e:	f002 0203 	and.w	r2, r2, #3
 80072a2:	0092      	lsls	r2, r2, #2
 80072a4:	4093      	lsls	r3, r2
 80072a6:	69ba      	ldr	r2, [r7, #24]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80072ac:	4935      	ldr	r1, [pc, #212]	; (8007384 <HAL_GPIO_Init+0x310>)
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	089b      	lsrs	r3, r3, #2
 80072b2:	3302      	adds	r3, #2
 80072b4:	69ba      	ldr	r2, [r7, #24]
 80072b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80072ba:	4b3b      	ldr	r3, [pc, #236]	; (80073a8 <HAL_GPIO_Init+0x334>)
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	43db      	mvns	r3, r3
 80072c4:	69ba      	ldr	r2, [r7, #24]
 80072c6:	4013      	ands	r3, r2
 80072c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	685b      	ldr	r3, [r3, #4]
 80072ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80072d6:	69ba      	ldr	r2, [r7, #24]
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	4313      	orrs	r3, r2
 80072dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80072de:	4a32      	ldr	r2, [pc, #200]	; (80073a8 <HAL_GPIO_Init+0x334>)
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80072e4:	4b30      	ldr	r3, [pc, #192]	; (80073a8 <HAL_GPIO_Init+0x334>)
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	43db      	mvns	r3, r3
 80072ee:	69ba      	ldr	r2, [r7, #24]
 80072f0:	4013      	ands	r3, r2
 80072f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d003      	beq.n	8007308 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007300:	69ba      	ldr	r2, [r7, #24]
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	4313      	orrs	r3, r2
 8007306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007308:	4a27      	ldr	r2, [pc, #156]	; (80073a8 <HAL_GPIO_Init+0x334>)
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800730e:	4b26      	ldr	r3, [pc, #152]	; (80073a8 <HAL_GPIO_Init+0x334>)
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	43db      	mvns	r3, r3
 8007318:	69ba      	ldr	r2, [r7, #24]
 800731a:	4013      	ands	r3, r2
 800731c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800732a:	69ba      	ldr	r2, [r7, #24]
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	4313      	orrs	r3, r2
 8007330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007332:	4a1d      	ldr	r2, [pc, #116]	; (80073a8 <HAL_GPIO_Init+0x334>)
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007338:	4b1b      	ldr	r3, [pc, #108]	; (80073a8 <HAL_GPIO_Init+0x334>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	43db      	mvns	r3, r3
 8007342:	69ba      	ldr	r2, [r7, #24]
 8007344:	4013      	ands	r3, r2
 8007346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	685b      	ldr	r3, [r3, #4]
 800734c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d003      	beq.n	800735c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	4313      	orrs	r3, r2
 800735a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800735c:	4a12      	ldr	r2, [pc, #72]	; (80073a8 <HAL_GPIO_Init+0x334>)
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	3301      	adds	r3, #1
 8007366:	61fb      	str	r3, [r7, #28]
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	2b0f      	cmp	r3, #15
 800736c:	f67f ae90 	bls.w	8007090 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007370:	bf00      	nop
 8007372:	bf00      	nop
 8007374:	3724      	adds	r7, #36	; 0x24
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	40023800 	.word	0x40023800
 8007384:	40013800 	.word	0x40013800
 8007388:	40020000 	.word	0x40020000
 800738c:	40020400 	.word	0x40020400
 8007390:	40020800 	.word	0x40020800
 8007394:	40020c00 	.word	0x40020c00
 8007398:	40021000 	.word	0x40021000
 800739c:	40021400 	.word	0x40021400
 80073a0:	40021800 	.word	0x40021800
 80073a4:	40021c00 	.word	0x40021c00
 80073a8:	40013c00 	.word	0x40013c00

080073ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	807b      	strh	r3, [r7, #2]
 80073b8:	4613      	mov	r3, r2
 80073ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80073bc:	787b      	ldrb	r3, [r7, #1]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d003      	beq.n	80073ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80073c2:	887a      	ldrh	r2, [r7, #2]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80073c8:	e003      	b.n	80073d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80073ca:	887b      	ldrh	r3, [r7, #2]
 80073cc:	041a      	lsls	r2, r3, #16
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	619a      	str	r2, [r3, #24]
}
 80073d2:	bf00      	nop
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
	...

080073e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	4603      	mov	r3, r0
 80073e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80073ea:	4b08      	ldr	r3, [pc, #32]	; (800740c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80073ec:	695a      	ldr	r2, [r3, #20]
 80073ee:	88fb      	ldrh	r3, [r7, #6]
 80073f0:	4013      	ands	r3, r2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d006      	beq.n	8007404 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80073f6:	4a05      	ldr	r2, [pc, #20]	; (800740c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80073f8:	88fb      	ldrh	r3, [r7, #6]
 80073fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80073fc:	88fb      	ldrh	r3, [r7, #6]
 80073fe:	4618      	mov	r0, r3
 8007400:	f002 fa73 	bl	80098ea <HAL_GPIO_EXTI_Callback>
  }
}
 8007404:	bf00      	nop
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	40013c00 	.word	0x40013c00

08007410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e12b      	b.n	800767a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b00      	cmp	r3, #0
 800742c:	d106      	bne.n	800743c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f7fd f918 	bl	800466c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2224      	movs	r2, #36	; 0x24
 8007440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f022 0201 	bic.w	r2, r2, #1
 8007452:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007462:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007472:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007474:	f000 fd7e 	bl	8007f74 <HAL_RCC_GetPCLK1Freq>
 8007478:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	4a81      	ldr	r2, [pc, #516]	; (8007684 <HAL_I2C_Init+0x274>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d807      	bhi.n	8007494 <HAL_I2C_Init+0x84>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4a80      	ldr	r2, [pc, #512]	; (8007688 <HAL_I2C_Init+0x278>)
 8007488:	4293      	cmp	r3, r2
 800748a:	bf94      	ite	ls
 800748c:	2301      	movls	r3, #1
 800748e:	2300      	movhi	r3, #0
 8007490:	b2db      	uxtb	r3, r3
 8007492:	e006      	b.n	80074a2 <HAL_I2C_Init+0x92>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4a7d      	ldr	r2, [pc, #500]	; (800768c <HAL_I2C_Init+0x27c>)
 8007498:	4293      	cmp	r3, r2
 800749a:	bf94      	ite	ls
 800749c:	2301      	movls	r3, #1
 800749e:	2300      	movhi	r3, #0
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e0e7      	b.n	800767a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	4a78      	ldr	r2, [pc, #480]	; (8007690 <HAL_I2C_Init+0x280>)
 80074ae:	fba2 2303 	umull	r2, r3, r2, r3
 80074b2:	0c9b      	lsrs	r3, r3, #18
 80074b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6a1b      	ldr	r3, [r3, #32]
 80074d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	4a6a      	ldr	r2, [pc, #424]	; (8007684 <HAL_I2C_Init+0x274>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d802      	bhi.n	80074e4 <HAL_I2C_Init+0xd4>
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	3301      	adds	r3, #1
 80074e2:	e009      	b.n	80074f8 <HAL_I2C_Init+0xe8>
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80074ea:	fb02 f303 	mul.w	r3, r2, r3
 80074ee:	4a69      	ldr	r2, [pc, #420]	; (8007694 <HAL_I2C_Init+0x284>)
 80074f0:	fba2 2303 	umull	r2, r3, r2, r3
 80074f4:	099b      	lsrs	r3, r3, #6
 80074f6:	3301      	adds	r3, #1
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	6812      	ldr	r2, [r2, #0]
 80074fc:	430b      	orrs	r3, r1
 80074fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800750a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	495c      	ldr	r1, [pc, #368]	; (8007684 <HAL_I2C_Init+0x274>)
 8007514:	428b      	cmp	r3, r1
 8007516:	d819      	bhi.n	800754c <HAL_I2C_Init+0x13c>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	1e59      	subs	r1, r3, #1
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	005b      	lsls	r3, r3, #1
 8007522:	fbb1 f3f3 	udiv	r3, r1, r3
 8007526:	1c59      	adds	r1, r3, #1
 8007528:	f640 73fc 	movw	r3, #4092	; 0xffc
 800752c:	400b      	ands	r3, r1
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00a      	beq.n	8007548 <HAL_I2C_Init+0x138>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	1e59      	subs	r1, r3, #1
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	005b      	lsls	r3, r3, #1
 800753c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007540:	3301      	adds	r3, #1
 8007542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007546:	e051      	b.n	80075ec <HAL_I2C_Init+0x1dc>
 8007548:	2304      	movs	r3, #4
 800754a:	e04f      	b.n	80075ec <HAL_I2C_Init+0x1dc>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d111      	bne.n	8007578 <HAL_I2C_Init+0x168>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	1e58      	subs	r0, r3, #1
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6859      	ldr	r1, [r3, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	005b      	lsls	r3, r3, #1
 8007560:	440b      	add	r3, r1
 8007562:	fbb0 f3f3 	udiv	r3, r0, r3
 8007566:	3301      	adds	r3, #1
 8007568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800756c:	2b00      	cmp	r3, #0
 800756e:	bf0c      	ite	eq
 8007570:	2301      	moveq	r3, #1
 8007572:	2300      	movne	r3, #0
 8007574:	b2db      	uxtb	r3, r3
 8007576:	e012      	b.n	800759e <HAL_I2C_Init+0x18e>
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	1e58      	subs	r0, r3, #1
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6859      	ldr	r1, [r3, #4]
 8007580:	460b      	mov	r3, r1
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	440b      	add	r3, r1
 8007586:	0099      	lsls	r1, r3, #2
 8007588:	440b      	add	r3, r1
 800758a:	fbb0 f3f3 	udiv	r3, r0, r3
 800758e:	3301      	adds	r3, #1
 8007590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007594:	2b00      	cmp	r3, #0
 8007596:	bf0c      	ite	eq
 8007598:	2301      	moveq	r3, #1
 800759a:	2300      	movne	r3, #0
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d001      	beq.n	80075a6 <HAL_I2C_Init+0x196>
 80075a2:	2301      	movs	r3, #1
 80075a4:	e022      	b.n	80075ec <HAL_I2C_Init+0x1dc>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10e      	bne.n	80075cc <HAL_I2C_Init+0x1bc>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	1e58      	subs	r0, r3, #1
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6859      	ldr	r1, [r3, #4]
 80075b6:	460b      	mov	r3, r1
 80075b8:	005b      	lsls	r3, r3, #1
 80075ba:	440b      	add	r3, r1
 80075bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80075c0:	3301      	adds	r3, #1
 80075c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ca:	e00f      	b.n	80075ec <HAL_I2C_Init+0x1dc>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	1e58      	subs	r0, r3, #1
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6859      	ldr	r1, [r3, #4]
 80075d4:	460b      	mov	r3, r1
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	440b      	add	r3, r1
 80075da:	0099      	lsls	r1, r3, #2
 80075dc:	440b      	add	r3, r1
 80075de:	fbb0 f3f3 	udiv	r3, r0, r3
 80075e2:	3301      	adds	r3, #1
 80075e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075ec:	6879      	ldr	r1, [r7, #4]
 80075ee:	6809      	ldr	r1, [r1, #0]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	69da      	ldr	r2, [r3, #28]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	431a      	orrs	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	430a      	orrs	r2, r1
 800760e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800761a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	6911      	ldr	r1, [r2, #16]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	68d2      	ldr	r2, [r2, #12]
 8007626:	4311      	orrs	r1, r2
 8007628:	687a      	ldr	r2, [r7, #4]
 800762a:	6812      	ldr	r2, [r2, #0]
 800762c:	430b      	orrs	r3, r1
 800762e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	695a      	ldr	r2, [r3, #20]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	431a      	orrs	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	430a      	orrs	r2, r1
 800764a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f042 0201 	orr.w	r2, r2, #1
 800765a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2220      	movs	r2, #32
 8007666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	000186a0 	.word	0x000186a0
 8007688:	001e847f 	.word	0x001e847f
 800768c:	003d08ff 	.word	0x003d08ff
 8007690:	431bde83 	.word	0x431bde83
 8007694:	10624dd3 	.word	0x10624dd3

08007698 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e267      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f003 0301 	and.w	r3, r3, #1
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d075      	beq.n	80077a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076b6:	4b88      	ldr	r3, [pc, #544]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f003 030c 	and.w	r3, r3, #12
 80076be:	2b04      	cmp	r3, #4
 80076c0:	d00c      	beq.n	80076dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076c2:	4b85      	ldr	r3, [pc, #532]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80076ca:	2b08      	cmp	r3, #8
 80076cc:	d112      	bne.n	80076f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80076ce:	4b82      	ldr	r3, [pc, #520]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076da:	d10b      	bne.n	80076f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076dc:	4b7e      	ldr	r3, [pc, #504]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d05b      	beq.n	80077a0 <HAL_RCC_OscConfig+0x108>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d157      	bne.n	80077a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80076f0:	2301      	movs	r3, #1
 80076f2:	e242      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076fc:	d106      	bne.n	800770c <HAL_RCC_OscConfig+0x74>
 80076fe:	4b76      	ldr	r3, [pc, #472]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a75      	ldr	r2, [pc, #468]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 8007704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007708:	6013      	str	r3, [r2, #0]
 800770a:	e01d      	b.n	8007748 <HAL_RCC_OscConfig+0xb0>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007714:	d10c      	bne.n	8007730 <HAL_RCC_OscConfig+0x98>
 8007716:	4b70      	ldr	r3, [pc, #448]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a6f      	ldr	r2, [pc, #444]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 800771c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007720:	6013      	str	r3, [r2, #0]
 8007722:	4b6d      	ldr	r3, [pc, #436]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4a6c      	ldr	r2, [pc, #432]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 8007728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800772c:	6013      	str	r3, [r2, #0]
 800772e:	e00b      	b.n	8007748 <HAL_RCC_OscConfig+0xb0>
 8007730:	4b69      	ldr	r3, [pc, #420]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a68      	ldr	r2, [pc, #416]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 8007736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800773a:	6013      	str	r3, [r2, #0]
 800773c:	4b66      	ldr	r3, [pc, #408]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a65      	ldr	r2, [pc, #404]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 8007742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d013      	beq.n	8007778 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007750:	f7fd ffd6 	bl	8005700 <HAL_GetTick>
 8007754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007756:	e008      	b.n	800776a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007758:	f7fd ffd2 	bl	8005700 <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	2b64      	cmp	r3, #100	; 0x64
 8007764:	d901      	bls.n	800776a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007766:	2303      	movs	r3, #3
 8007768:	e207      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800776a:	4b5b      	ldr	r3, [pc, #364]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0f0      	beq.n	8007758 <HAL_RCC_OscConfig+0xc0>
 8007776:	e014      	b.n	80077a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007778:	f7fd ffc2 	bl	8005700 <HAL_GetTick>
 800777c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800777e:	e008      	b.n	8007792 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007780:	f7fd ffbe 	bl	8005700 <HAL_GetTick>
 8007784:	4602      	mov	r2, r0
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	1ad3      	subs	r3, r2, r3
 800778a:	2b64      	cmp	r3, #100	; 0x64
 800778c:	d901      	bls.n	8007792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e1f3      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007792:	4b51      	ldr	r3, [pc, #324]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1f0      	bne.n	8007780 <HAL_RCC_OscConfig+0xe8>
 800779e:	e000      	b.n	80077a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d063      	beq.n	8007876 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077ae:	4b4a      	ldr	r3, [pc, #296]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f003 030c 	and.w	r3, r3, #12
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00b      	beq.n	80077d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077ba:	4b47      	ldr	r3, [pc, #284]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80077c2:	2b08      	cmp	r3, #8
 80077c4:	d11c      	bne.n	8007800 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80077c6:	4b44      	ldr	r3, [pc, #272]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 80077c8:	685b      	ldr	r3, [r3, #4]
 80077ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d116      	bne.n	8007800 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077d2:	4b41      	ldr	r3, [pc, #260]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f003 0302 	and.w	r3, r3, #2
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d005      	beq.n	80077ea <HAL_RCC_OscConfig+0x152>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d001      	beq.n	80077ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e1c7      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077ea:	4b3b      	ldr	r3, [pc, #236]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	691b      	ldr	r3, [r3, #16]
 80077f6:	00db      	lsls	r3, r3, #3
 80077f8:	4937      	ldr	r1, [pc, #220]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077fe:	e03a      	b.n	8007876 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d020      	beq.n	800784a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007808:	4b34      	ldr	r3, [pc, #208]	; (80078dc <HAL_RCC_OscConfig+0x244>)
 800780a:	2201      	movs	r2, #1
 800780c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800780e:	f7fd ff77 	bl	8005700 <HAL_GetTick>
 8007812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007814:	e008      	b.n	8007828 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007816:	f7fd ff73 	bl	8005700 <HAL_GetTick>
 800781a:	4602      	mov	r2, r0
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	2b02      	cmp	r3, #2
 8007822:	d901      	bls.n	8007828 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e1a8      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007828:	4b2b      	ldr	r3, [pc, #172]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 0302 	and.w	r3, r3, #2
 8007830:	2b00      	cmp	r3, #0
 8007832:	d0f0      	beq.n	8007816 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007834:	4b28      	ldr	r3, [pc, #160]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	00db      	lsls	r3, r3, #3
 8007842:	4925      	ldr	r1, [pc, #148]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 8007844:	4313      	orrs	r3, r2
 8007846:	600b      	str	r3, [r1, #0]
 8007848:	e015      	b.n	8007876 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800784a:	4b24      	ldr	r3, [pc, #144]	; (80078dc <HAL_RCC_OscConfig+0x244>)
 800784c:	2200      	movs	r2, #0
 800784e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007850:	f7fd ff56 	bl	8005700 <HAL_GetTick>
 8007854:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007856:	e008      	b.n	800786a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007858:	f7fd ff52 	bl	8005700 <HAL_GetTick>
 800785c:	4602      	mov	r2, r0
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	2b02      	cmp	r3, #2
 8007864:	d901      	bls.n	800786a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007866:	2303      	movs	r3, #3
 8007868:	e187      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800786a:	4b1b      	ldr	r3, [pc, #108]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1f0      	bne.n	8007858 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f003 0308 	and.w	r3, r3, #8
 800787e:	2b00      	cmp	r3, #0
 8007880:	d036      	beq.n	80078f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d016      	beq.n	80078b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800788a:	4b15      	ldr	r3, [pc, #84]	; (80078e0 <HAL_RCC_OscConfig+0x248>)
 800788c:	2201      	movs	r2, #1
 800788e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007890:	f7fd ff36 	bl	8005700 <HAL_GetTick>
 8007894:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007896:	e008      	b.n	80078aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007898:	f7fd ff32 	bl	8005700 <HAL_GetTick>
 800789c:	4602      	mov	r2, r0
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	1ad3      	subs	r3, r2, r3
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d901      	bls.n	80078aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e167      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078aa:	4b0b      	ldr	r3, [pc, #44]	; (80078d8 <HAL_RCC_OscConfig+0x240>)
 80078ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078ae:	f003 0302 	and.w	r3, r3, #2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d0f0      	beq.n	8007898 <HAL_RCC_OscConfig+0x200>
 80078b6:	e01b      	b.n	80078f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80078b8:	4b09      	ldr	r3, [pc, #36]	; (80078e0 <HAL_RCC_OscConfig+0x248>)
 80078ba:	2200      	movs	r2, #0
 80078bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80078be:	f7fd ff1f 	bl	8005700 <HAL_GetTick>
 80078c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078c4:	e00e      	b.n	80078e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80078c6:	f7fd ff1b 	bl	8005700 <HAL_GetTick>
 80078ca:	4602      	mov	r2, r0
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d907      	bls.n	80078e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e150      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
 80078d8:	40023800 	.word	0x40023800
 80078dc:	42470000 	.word	0x42470000
 80078e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078e4:	4b88      	ldr	r3, [pc, #544]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 80078e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1ea      	bne.n	80078c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0304 	and.w	r3, r3, #4
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f000 8097 	beq.w	8007a2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078fe:	2300      	movs	r3, #0
 8007900:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007902:	4b81      	ldr	r3, [pc, #516]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10f      	bne.n	800792e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800790e:	2300      	movs	r3, #0
 8007910:	60bb      	str	r3, [r7, #8]
 8007912:	4b7d      	ldr	r3, [pc, #500]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007916:	4a7c      	ldr	r2, [pc, #496]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800791c:	6413      	str	r3, [r2, #64]	; 0x40
 800791e:	4b7a      	ldr	r3, [pc, #488]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007926:	60bb      	str	r3, [r7, #8]
 8007928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800792a:	2301      	movs	r3, #1
 800792c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800792e:	4b77      	ldr	r3, [pc, #476]	; (8007b0c <HAL_RCC_OscConfig+0x474>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007936:	2b00      	cmp	r3, #0
 8007938:	d118      	bne.n	800796c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800793a:	4b74      	ldr	r3, [pc, #464]	; (8007b0c <HAL_RCC_OscConfig+0x474>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a73      	ldr	r2, [pc, #460]	; (8007b0c <HAL_RCC_OscConfig+0x474>)
 8007940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007946:	f7fd fedb 	bl	8005700 <HAL_GetTick>
 800794a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800794c:	e008      	b.n	8007960 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800794e:	f7fd fed7 	bl	8005700 <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	2b02      	cmp	r3, #2
 800795a:	d901      	bls.n	8007960 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800795c:	2303      	movs	r3, #3
 800795e:	e10c      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007960:	4b6a      	ldr	r3, [pc, #424]	; (8007b0c <HAL_RCC_OscConfig+0x474>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007968:	2b00      	cmp	r3, #0
 800796a:	d0f0      	beq.n	800794e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	2b01      	cmp	r3, #1
 8007972:	d106      	bne.n	8007982 <HAL_RCC_OscConfig+0x2ea>
 8007974:	4b64      	ldr	r3, [pc, #400]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007978:	4a63      	ldr	r2, [pc, #396]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 800797a:	f043 0301 	orr.w	r3, r3, #1
 800797e:	6713      	str	r3, [r2, #112]	; 0x70
 8007980:	e01c      	b.n	80079bc <HAL_RCC_OscConfig+0x324>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	2b05      	cmp	r3, #5
 8007988:	d10c      	bne.n	80079a4 <HAL_RCC_OscConfig+0x30c>
 800798a:	4b5f      	ldr	r3, [pc, #380]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 800798c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798e:	4a5e      	ldr	r2, [pc, #376]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007990:	f043 0304 	orr.w	r3, r3, #4
 8007994:	6713      	str	r3, [r2, #112]	; 0x70
 8007996:	4b5c      	ldr	r3, [pc, #368]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800799a:	4a5b      	ldr	r2, [pc, #364]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 800799c:	f043 0301 	orr.w	r3, r3, #1
 80079a0:	6713      	str	r3, [r2, #112]	; 0x70
 80079a2:	e00b      	b.n	80079bc <HAL_RCC_OscConfig+0x324>
 80079a4:	4b58      	ldr	r3, [pc, #352]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 80079a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a8:	4a57      	ldr	r2, [pc, #348]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 80079aa:	f023 0301 	bic.w	r3, r3, #1
 80079ae:	6713      	str	r3, [r2, #112]	; 0x70
 80079b0:	4b55      	ldr	r3, [pc, #340]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 80079b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b4:	4a54      	ldr	r2, [pc, #336]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 80079b6:	f023 0304 	bic.w	r3, r3, #4
 80079ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	689b      	ldr	r3, [r3, #8]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d015      	beq.n	80079f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079c4:	f7fd fe9c 	bl	8005700 <HAL_GetTick>
 80079c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079ca:	e00a      	b.n	80079e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079cc:	f7fd fe98 	bl	8005700 <HAL_GetTick>
 80079d0:	4602      	mov	r2, r0
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	1ad3      	subs	r3, r2, r3
 80079d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80079da:	4293      	cmp	r3, r2
 80079dc:	d901      	bls.n	80079e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e0cb      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079e2:	4b49      	ldr	r3, [pc, #292]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 80079e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e6:	f003 0302 	and.w	r3, r3, #2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d0ee      	beq.n	80079cc <HAL_RCC_OscConfig+0x334>
 80079ee:	e014      	b.n	8007a1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079f0:	f7fd fe86 	bl	8005700 <HAL_GetTick>
 80079f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079f6:	e00a      	b.n	8007a0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079f8:	f7fd fe82 	bl	8005700 <HAL_GetTick>
 80079fc:	4602      	mov	r2, r0
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	1ad3      	subs	r3, r2, r3
 8007a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d901      	bls.n	8007a0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e0b5      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a0e:	4b3e      	ldr	r3, [pc, #248]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a12:	f003 0302 	and.w	r3, r3, #2
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d1ee      	bne.n	80079f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007a1a:	7dfb      	ldrb	r3, [r7, #23]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d105      	bne.n	8007a2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a20:	4b39      	ldr	r3, [pc, #228]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a24:	4a38      	ldr	r2, [pc, #224]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 80a1 	beq.w	8007b78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a36:	4b34      	ldr	r3, [pc, #208]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f003 030c 	and.w	r3, r3, #12
 8007a3e:	2b08      	cmp	r3, #8
 8007a40:	d05c      	beq.n	8007afc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d141      	bne.n	8007ace <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a4a:	4b31      	ldr	r3, [pc, #196]	; (8007b10 <HAL_RCC_OscConfig+0x478>)
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a50:	f7fd fe56 	bl	8005700 <HAL_GetTick>
 8007a54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a56:	e008      	b.n	8007a6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a58:	f7fd fe52 	bl	8005700 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d901      	bls.n	8007a6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	e087      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a6a:	4b27      	ldr	r3, [pc, #156]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d1f0      	bne.n	8007a58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	69da      	ldr	r2, [r3, #28]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a84:	019b      	lsls	r3, r3, #6
 8007a86:	431a      	orrs	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8c:	085b      	lsrs	r3, r3, #1
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	041b      	lsls	r3, r3, #16
 8007a92:	431a      	orrs	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	061b      	lsls	r3, r3, #24
 8007a9a:	491b      	ldr	r1, [pc, #108]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007aa0:	4b1b      	ldr	r3, [pc, #108]	; (8007b10 <HAL_RCC_OscConfig+0x478>)
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007aa6:	f7fd fe2b 	bl	8005700 <HAL_GetTick>
 8007aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007aac:	e008      	b.n	8007ac0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007aae:	f7fd fe27 	bl	8005700 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d901      	bls.n	8007ac0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	e05c      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ac0:	4b11      	ldr	r3, [pc, #68]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d0f0      	beq.n	8007aae <HAL_RCC_OscConfig+0x416>
 8007acc:	e054      	b.n	8007b78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ace:	4b10      	ldr	r3, [pc, #64]	; (8007b10 <HAL_RCC_OscConfig+0x478>)
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ad4:	f7fd fe14 	bl	8005700 <HAL_GetTick>
 8007ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ada:	e008      	b.n	8007aee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007adc:	f7fd fe10 	bl	8005700 <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d901      	bls.n	8007aee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e045      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aee:	4b06      	ldr	r3, [pc, #24]	; (8007b08 <HAL_RCC_OscConfig+0x470>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1f0      	bne.n	8007adc <HAL_RCC_OscConfig+0x444>
 8007afa:	e03d      	b.n	8007b78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	d107      	bne.n	8007b14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e038      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
 8007b08:	40023800 	.word	0x40023800
 8007b0c:	40007000 	.word	0x40007000
 8007b10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b14:	4b1b      	ldr	r3, [pc, #108]	; (8007b84 <HAL_RCC_OscConfig+0x4ec>)
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	699b      	ldr	r3, [r3, #24]
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d028      	beq.n	8007b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d121      	bne.n	8007b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d11a      	bne.n	8007b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b44:	4013      	ands	r3, r2
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d111      	bne.n	8007b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5a:	085b      	lsrs	r3, r3, #1
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d107      	bne.n	8007b74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d001      	beq.n	8007b78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e000      	b.n	8007b7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3718      	adds	r7, #24
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}
 8007b82:	bf00      	nop
 8007b84:	40023800 	.word	0x40023800

08007b88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e0cc      	b.n	8007d36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b9c:	4b68      	ldr	r3, [pc, #416]	; (8007d40 <HAL_RCC_ClockConfig+0x1b8>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0307 	and.w	r3, r3, #7
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d90c      	bls.n	8007bc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007baa:	4b65      	ldr	r3, [pc, #404]	; (8007d40 <HAL_RCC_ClockConfig+0x1b8>)
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	b2d2      	uxtb	r2, r2
 8007bb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bb2:	4b63      	ldr	r3, [pc, #396]	; (8007d40 <HAL_RCC_ClockConfig+0x1b8>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f003 0307 	and.w	r3, r3, #7
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d001      	beq.n	8007bc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	e0b8      	b.n	8007d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f003 0302 	and.w	r3, r3, #2
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d020      	beq.n	8007c12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0304 	and.w	r3, r3, #4
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d005      	beq.n	8007be8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bdc:	4b59      	ldr	r3, [pc, #356]	; (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	4a58      	ldr	r2, [pc, #352]	; (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007be2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007be6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0308 	and.w	r3, r3, #8
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d005      	beq.n	8007c00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007bf4:	4b53      	ldr	r3, [pc, #332]	; (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	4a52      	ldr	r2, [pc, #328]	; (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007bfa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007bfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c00:	4b50      	ldr	r3, [pc, #320]	; (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	494d      	ldr	r1, [pc, #308]	; (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d044      	beq.n	8007ca8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d107      	bne.n	8007c36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c26:	4b47      	ldr	r3, [pc, #284]	; (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d119      	bne.n	8007c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e07f      	b.n	8007d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d003      	beq.n	8007c46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c42:	2b03      	cmp	r3, #3
 8007c44:	d107      	bne.n	8007c56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c46:	4b3f      	ldr	r3, [pc, #252]	; (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d109      	bne.n	8007c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e06f      	b.n	8007d36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c56:	4b3b      	ldr	r3, [pc, #236]	; (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0302 	and.w	r3, r3, #2
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	e067      	b.n	8007d36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c66:	4b37      	ldr	r3, [pc, #220]	; (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f023 0203 	bic.w	r2, r3, #3
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	4934      	ldr	r1, [pc, #208]	; (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007c74:	4313      	orrs	r3, r2
 8007c76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c78:	f7fd fd42 	bl	8005700 <HAL_GetTick>
 8007c7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c7e:	e00a      	b.n	8007c96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c80:	f7fd fd3e 	bl	8005700 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d901      	bls.n	8007c96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e04f      	b.n	8007d36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c96:	4b2b      	ldr	r3, [pc, #172]	; (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	f003 020c 	and.w	r2, r3, #12
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d1eb      	bne.n	8007c80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ca8:	4b25      	ldr	r3, [pc, #148]	; (8007d40 <HAL_RCC_ClockConfig+0x1b8>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0307 	and.w	r3, r3, #7
 8007cb0:	683a      	ldr	r2, [r7, #0]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d20c      	bcs.n	8007cd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cb6:	4b22      	ldr	r3, [pc, #136]	; (8007d40 <HAL_RCC_ClockConfig+0x1b8>)
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	b2d2      	uxtb	r2, r2
 8007cbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cbe:	4b20      	ldr	r3, [pc, #128]	; (8007d40 <HAL_RCC_ClockConfig+0x1b8>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f003 0307 	and.w	r3, r3, #7
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d001      	beq.n	8007cd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e032      	b.n	8007d36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0304 	and.w	r3, r3, #4
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d008      	beq.n	8007cee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cdc:	4b19      	ldr	r3, [pc, #100]	; (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	4916      	ldr	r1, [pc, #88]	; (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0308 	and.w	r3, r3, #8
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d009      	beq.n	8007d0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007cfa:	4b12      	ldr	r3, [pc, #72]	; (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	00db      	lsls	r3, r3, #3
 8007d08:	490e      	ldr	r1, [pc, #56]	; (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007d0e:	f000 f821 	bl	8007d54 <HAL_RCC_GetSysClockFreq>
 8007d12:	4602      	mov	r2, r0
 8007d14:	4b0b      	ldr	r3, [pc, #44]	; (8007d44 <HAL_RCC_ClockConfig+0x1bc>)
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	091b      	lsrs	r3, r3, #4
 8007d1a:	f003 030f 	and.w	r3, r3, #15
 8007d1e:	490a      	ldr	r1, [pc, #40]	; (8007d48 <HAL_RCC_ClockConfig+0x1c0>)
 8007d20:	5ccb      	ldrb	r3, [r1, r3]
 8007d22:	fa22 f303 	lsr.w	r3, r2, r3
 8007d26:	4a09      	ldr	r2, [pc, #36]	; (8007d4c <HAL_RCC_ClockConfig+0x1c4>)
 8007d28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007d2a:	4b09      	ldr	r3, [pc, #36]	; (8007d50 <HAL_RCC_ClockConfig+0x1c8>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fc fe7a 	bl	8004a28 <HAL_InitTick>

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	40023c00 	.word	0x40023c00
 8007d44:	40023800 	.word	0x40023800
 8007d48:	08011f9c 	.word	0x08011f9c
 8007d4c:	20000000 	.word	0x20000000
 8007d50:	20000004 	.word	0x20000004

08007d54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d58:	b094      	sub	sp, #80	; 0x50
 8007d5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8007d60:	2300      	movs	r3, #0
 8007d62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d64:	2300      	movs	r3, #0
 8007d66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d6c:	4b79      	ldr	r3, [pc, #484]	; (8007f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f003 030c 	and.w	r3, r3, #12
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	d00d      	beq.n	8007d94 <HAL_RCC_GetSysClockFreq+0x40>
 8007d78:	2b08      	cmp	r3, #8
 8007d7a:	f200 80e1 	bhi.w	8007f40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d002      	beq.n	8007d88 <HAL_RCC_GetSysClockFreq+0x34>
 8007d82:	2b04      	cmp	r3, #4
 8007d84:	d003      	beq.n	8007d8e <HAL_RCC_GetSysClockFreq+0x3a>
 8007d86:	e0db      	b.n	8007f40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d88:	4b73      	ldr	r3, [pc, #460]	; (8007f58 <HAL_RCC_GetSysClockFreq+0x204>)
 8007d8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007d8c:	e0db      	b.n	8007f46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d8e:	4b72      	ldr	r3, [pc, #456]	; (8007f58 <HAL_RCC_GetSysClockFreq+0x204>)
 8007d90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007d92:	e0d8      	b.n	8007f46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d94:	4b6f      	ldr	r3, [pc, #444]	; (8007f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d9e:	4b6d      	ldr	r3, [pc, #436]	; (8007f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d063      	beq.n	8007e72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007daa:	4b6a      	ldr	r3, [pc, #424]	; (8007f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	099b      	lsrs	r3, r3, #6
 8007db0:	2200      	movs	r2, #0
 8007db2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007db4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dbc:	633b      	str	r3, [r7, #48]	; 0x30
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	637b      	str	r3, [r7, #52]	; 0x34
 8007dc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007dc6:	4622      	mov	r2, r4
 8007dc8:	462b      	mov	r3, r5
 8007dca:	f04f 0000 	mov.w	r0, #0
 8007dce:	f04f 0100 	mov.w	r1, #0
 8007dd2:	0159      	lsls	r1, r3, #5
 8007dd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007dd8:	0150      	lsls	r0, r2, #5
 8007dda:	4602      	mov	r2, r0
 8007ddc:	460b      	mov	r3, r1
 8007dde:	4621      	mov	r1, r4
 8007de0:	1a51      	subs	r1, r2, r1
 8007de2:	6139      	str	r1, [r7, #16]
 8007de4:	4629      	mov	r1, r5
 8007de6:	eb63 0301 	sbc.w	r3, r3, r1
 8007dea:	617b      	str	r3, [r7, #20]
 8007dec:	f04f 0200 	mov.w	r2, #0
 8007df0:	f04f 0300 	mov.w	r3, #0
 8007df4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007df8:	4659      	mov	r1, fp
 8007dfa:	018b      	lsls	r3, r1, #6
 8007dfc:	4651      	mov	r1, sl
 8007dfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007e02:	4651      	mov	r1, sl
 8007e04:	018a      	lsls	r2, r1, #6
 8007e06:	4651      	mov	r1, sl
 8007e08:	ebb2 0801 	subs.w	r8, r2, r1
 8007e0c:	4659      	mov	r1, fp
 8007e0e:	eb63 0901 	sbc.w	r9, r3, r1
 8007e12:	f04f 0200 	mov.w	r2, #0
 8007e16:	f04f 0300 	mov.w	r3, #0
 8007e1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e26:	4690      	mov	r8, r2
 8007e28:	4699      	mov	r9, r3
 8007e2a:	4623      	mov	r3, r4
 8007e2c:	eb18 0303 	adds.w	r3, r8, r3
 8007e30:	60bb      	str	r3, [r7, #8]
 8007e32:	462b      	mov	r3, r5
 8007e34:	eb49 0303 	adc.w	r3, r9, r3
 8007e38:	60fb      	str	r3, [r7, #12]
 8007e3a:	f04f 0200 	mov.w	r2, #0
 8007e3e:	f04f 0300 	mov.w	r3, #0
 8007e42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007e46:	4629      	mov	r1, r5
 8007e48:	028b      	lsls	r3, r1, #10
 8007e4a:	4621      	mov	r1, r4
 8007e4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e50:	4621      	mov	r1, r4
 8007e52:	028a      	lsls	r2, r1, #10
 8007e54:	4610      	mov	r0, r2
 8007e56:	4619      	mov	r1, r3
 8007e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e64:	f7f8 ff10 	bl	8000c88 <__aeabi_uldivmod>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e70:	e058      	b.n	8007f24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e72:	4b38      	ldr	r3, [pc, #224]	; (8007f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	099b      	lsrs	r3, r3, #6
 8007e78:	2200      	movs	r2, #0
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	4611      	mov	r1, r2
 8007e7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007e82:	623b      	str	r3, [r7, #32]
 8007e84:	2300      	movs	r3, #0
 8007e86:	627b      	str	r3, [r7, #36]	; 0x24
 8007e88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007e8c:	4642      	mov	r2, r8
 8007e8e:	464b      	mov	r3, r9
 8007e90:	f04f 0000 	mov.w	r0, #0
 8007e94:	f04f 0100 	mov.w	r1, #0
 8007e98:	0159      	lsls	r1, r3, #5
 8007e9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e9e:	0150      	lsls	r0, r2, #5
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	4641      	mov	r1, r8
 8007ea6:	ebb2 0a01 	subs.w	sl, r2, r1
 8007eaa:	4649      	mov	r1, r9
 8007eac:	eb63 0b01 	sbc.w	fp, r3, r1
 8007eb0:	f04f 0200 	mov.w	r2, #0
 8007eb4:	f04f 0300 	mov.w	r3, #0
 8007eb8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007ebc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007ec0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007ec4:	ebb2 040a 	subs.w	r4, r2, sl
 8007ec8:	eb63 050b 	sbc.w	r5, r3, fp
 8007ecc:	f04f 0200 	mov.w	r2, #0
 8007ed0:	f04f 0300 	mov.w	r3, #0
 8007ed4:	00eb      	lsls	r3, r5, #3
 8007ed6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007eda:	00e2      	lsls	r2, r4, #3
 8007edc:	4614      	mov	r4, r2
 8007ede:	461d      	mov	r5, r3
 8007ee0:	4643      	mov	r3, r8
 8007ee2:	18e3      	adds	r3, r4, r3
 8007ee4:	603b      	str	r3, [r7, #0]
 8007ee6:	464b      	mov	r3, r9
 8007ee8:	eb45 0303 	adc.w	r3, r5, r3
 8007eec:	607b      	str	r3, [r7, #4]
 8007eee:	f04f 0200 	mov.w	r2, #0
 8007ef2:	f04f 0300 	mov.w	r3, #0
 8007ef6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007efa:	4629      	mov	r1, r5
 8007efc:	028b      	lsls	r3, r1, #10
 8007efe:	4621      	mov	r1, r4
 8007f00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f04:	4621      	mov	r1, r4
 8007f06:	028a      	lsls	r2, r1, #10
 8007f08:	4610      	mov	r0, r2
 8007f0a:	4619      	mov	r1, r3
 8007f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f0e:	2200      	movs	r2, #0
 8007f10:	61bb      	str	r3, [r7, #24]
 8007f12:	61fa      	str	r2, [r7, #28]
 8007f14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f18:	f7f8 feb6 	bl	8000c88 <__aeabi_uldivmod>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	460b      	mov	r3, r1
 8007f20:	4613      	mov	r3, r2
 8007f22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f24:	4b0b      	ldr	r3, [pc, #44]	; (8007f54 <HAL_RCC_GetSysClockFreq+0x200>)
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	0c1b      	lsrs	r3, r3, #16
 8007f2a:	f003 0303 	and.w	r3, r3, #3
 8007f2e:	3301      	adds	r3, #1
 8007f30:	005b      	lsls	r3, r3, #1
 8007f32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007f34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f3e:	e002      	b.n	8007f46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f40:	4b05      	ldr	r3, [pc, #20]	; (8007f58 <HAL_RCC_GetSysClockFreq+0x204>)
 8007f42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007f44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3750      	adds	r7, #80	; 0x50
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f52:	bf00      	nop
 8007f54:	40023800 	.word	0x40023800
 8007f58:	00f42400 	.word	0x00f42400

08007f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f60:	4b03      	ldr	r3, [pc, #12]	; (8007f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f62:	681b      	ldr	r3, [r3, #0]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	20000000 	.word	0x20000000

08007f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f78:	f7ff fff0 	bl	8007f5c <HAL_RCC_GetHCLKFreq>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	0a9b      	lsrs	r3, r3, #10
 8007f84:	f003 0307 	and.w	r3, r3, #7
 8007f88:	4903      	ldr	r1, [pc, #12]	; (8007f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f8a:	5ccb      	ldrb	r3, [r1, r3]
 8007f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	40023800 	.word	0x40023800
 8007f98:	08011fac 	.word	0x08011fac

08007f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007fa0:	f7ff ffdc 	bl	8007f5c <HAL_RCC_GetHCLKFreq>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	4b05      	ldr	r3, [pc, #20]	; (8007fbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	0b5b      	lsrs	r3, r3, #13
 8007fac:	f003 0307 	and.w	r3, r3, #7
 8007fb0:	4903      	ldr	r1, [pc, #12]	; (8007fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fb2:	5ccb      	ldrb	r3, [r1, r3]
 8007fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	40023800 	.word	0x40023800
 8007fc0:	08011fac 	.word	0x08011fac

08007fc4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b083      	sub	sp, #12
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	220f      	movs	r2, #15
 8007fd2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007fd4:	4b12      	ldr	r3, [pc, #72]	; (8008020 <HAL_RCC_GetClockConfig+0x5c>)
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	f003 0203 	and.w	r2, r3, #3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007fe0:	4b0f      	ldr	r3, [pc, #60]	; (8008020 <HAL_RCC_GetClockConfig+0x5c>)
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007fec:	4b0c      	ldr	r3, [pc, #48]	; (8008020 <HAL_RCC_GetClockConfig+0x5c>)
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007ff8:	4b09      	ldr	r3, [pc, #36]	; (8008020 <HAL_RCC_GetClockConfig+0x5c>)
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	08db      	lsrs	r3, r3, #3
 8007ffe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008006:	4b07      	ldr	r3, [pc, #28]	; (8008024 <HAL_RCC_GetClockConfig+0x60>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0207 	and.w	r2, r3, #7
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	601a      	str	r2, [r3, #0]
}
 8008012:	bf00      	nop
 8008014:	370c      	adds	r7, #12
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	40023800 	.word	0x40023800
 8008024:	40023c00 	.word	0x40023c00

08008028 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d101      	bne.n	800803a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e01c      	b.n	8008074 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	795b      	ldrb	r3, [r3, #5]
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	d105      	bne.n	8008050 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f7fc fc20 	bl	8004890 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2202      	movs	r2, #2
 8008054:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	681a      	ldr	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f042 0204 	orr.w	r2, r2, #4
 8008064:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2200      	movs	r2, #0
 8008070:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	3708      	adds	r7, #8
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b082      	sub	sp, #8
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d101      	bne.n	800808e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	e07b      	b.n	8008186 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008092:	2b00      	cmp	r3, #0
 8008094:	d108      	bne.n	80080a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800809e:	d009      	beq.n	80080b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	61da      	str	r2, [r3, #28]
 80080a6:	e005      	b.n	80080b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d106      	bne.n	80080d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f7fc fc36 	bl	8004940 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2202      	movs	r2, #2
 80080d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80080fc:	431a      	orrs	r2, r3
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	68db      	ldr	r3, [r3, #12]
 8008102:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008106:	431a      	orrs	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	f003 0302 	and.w	r3, r3, #2
 8008110:	431a      	orrs	r2, r3
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	f003 0301 	and.w	r3, r3, #1
 800811a:	431a      	orrs	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008124:	431a      	orrs	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	69db      	ldr	r3, [r3, #28]
 800812a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800812e:	431a      	orrs	r2, r3
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6a1b      	ldr	r3, [r3, #32]
 8008134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008138:	ea42 0103 	orr.w	r1, r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008140:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	430a      	orrs	r2, r1
 800814a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	699b      	ldr	r3, [r3, #24]
 8008150:	0c1b      	lsrs	r3, r3, #16
 8008152:	f003 0104 	and.w	r1, r3, #4
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815a:	f003 0210 	and.w	r2, r3, #16
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	69da      	ldr	r2, [r3, #28]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008174:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3708      	adds	r7, #8
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}

0800818e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800818e:	b580      	push	{r7, lr}
 8008190:	b082      	sub	sp, #8
 8008192:	af00      	add	r7, sp, #0
 8008194:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d101      	bne.n	80081a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e041      	b.n	8008224 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d106      	bne.n	80081ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f7fd f803 	bl	80051c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2202      	movs	r2, #2
 80081be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	3304      	adds	r3, #4
 80081ca:	4619      	mov	r1, r3
 80081cc:	4610      	mov	r0, r2
 80081ce:	f000 fc57 	bl	8008a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2201      	movs	r2, #1
 80081d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2201      	movs	r2, #1
 80081ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2201      	movs	r2, #1
 80081f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2201      	movs	r2, #1
 8008206:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2201      	movs	r2, #1
 800820e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2201      	movs	r2, #1
 8008216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3708      	adds	r7, #8
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800822c:	b480      	push	{r7}
 800822e:	b085      	sub	sp, #20
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800823a:	b2db      	uxtb	r3, r3
 800823c:	2b01      	cmp	r3, #1
 800823e:	d001      	beq.n	8008244 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	e04e      	b.n	80082e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2202      	movs	r2, #2
 8008248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68da      	ldr	r2, [r3, #12]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f042 0201 	orr.w	r2, r2, #1
 800825a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a23      	ldr	r2, [pc, #140]	; (80082f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d022      	beq.n	80082ac <HAL_TIM_Base_Start_IT+0x80>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800826e:	d01d      	beq.n	80082ac <HAL_TIM_Base_Start_IT+0x80>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a1f      	ldr	r2, [pc, #124]	; (80082f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d018      	beq.n	80082ac <HAL_TIM_Base_Start_IT+0x80>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a1e      	ldr	r2, [pc, #120]	; (80082f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d013      	beq.n	80082ac <HAL_TIM_Base_Start_IT+0x80>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a1c      	ldr	r2, [pc, #112]	; (80082fc <HAL_TIM_Base_Start_IT+0xd0>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d00e      	beq.n	80082ac <HAL_TIM_Base_Start_IT+0x80>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a1b      	ldr	r2, [pc, #108]	; (8008300 <HAL_TIM_Base_Start_IT+0xd4>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d009      	beq.n	80082ac <HAL_TIM_Base_Start_IT+0x80>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a19      	ldr	r2, [pc, #100]	; (8008304 <HAL_TIM_Base_Start_IT+0xd8>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d004      	beq.n	80082ac <HAL_TIM_Base_Start_IT+0x80>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a18      	ldr	r2, [pc, #96]	; (8008308 <HAL_TIM_Base_Start_IT+0xdc>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d111      	bne.n	80082d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f003 0307 	and.w	r3, r3, #7
 80082b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2b06      	cmp	r3, #6
 80082bc:	d010      	beq.n	80082e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f042 0201 	orr.w	r2, r2, #1
 80082cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082ce:	e007      	b.n	80082e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681a      	ldr	r2, [r3, #0]
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f042 0201 	orr.w	r2, r2, #1
 80082de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3714      	adds	r7, #20
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	40010000 	.word	0x40010000
 80082f4:	40000400 	.word	0x40000400
 80082f8:	40000800 	.word	0x40000800
 80082fc:	40000c00 	.word	0x40000c00
 8008300:	40010400 	.word	0x40010400
 8008304:	40014000 	.word	0x40014000
 8008308:	40001800 	.word	0x40001800

0800830c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b082      	sub	sp, #8
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e041      	b.n	80083a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008324:	b2db      	uxtb	r3, r3
 8008326:	2b00      	cmp	r3, #0
 8008328:	d106      	bne.n	8008338 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 f839 	bl	80083aa <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2202      	movs	r2, #2
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681a      	ldr	r2, [r3, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	3304      	adds	r3, #4
 8008348:	4619      	mov	r1, r3
 800834a:	4610      	mov	r0, r2
 800834c:	f000 fb98 	bl	8008a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2201      	movs	r2, #1
 8008374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2201      	movs	r2, #1
 800837c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2201      	movs	r2, #1
 8008384:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083a0:	2300      	movs	r3, #0
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3708      	adds	r7, #8
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80083aa:	b480      	push	{r7}
 80083ac:	b083      	sub	sp, #12
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80083b2:	bf00      	nop
 80083b4:	370c      	adds	r7, #12
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b086      	sub	sp, #24
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	e097      	b.n	8008502 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d106      	bne.n	80083ec <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f7fc ff70 	bl	80052cc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2202      	movs	r2, #2
 80083f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	687a      	ldr	r2, [r7, #4]
 80083fc:	6812      	ldr	r2, [r2, #0]
 80083fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008402:	f023 0307 	bic.w	r3, r3, #7
 8008406:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	3304      	adds	r3, #4
 8008410:	4619      	mov	r1, r3
 8008412:	4610      	mov	r0, r2
 8008414:	f000 fb34 	bl	8008a80 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	699b      	ldr	r3, [r3, #24]
 8008426:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	697a      	ldr	r2, [r7, #20]
 8008436:	4313      	orrs	r3, r2
 8008438:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008440:	f023 0303 	bic.w	r3, r3, #3
 8008444:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	689a      	ldr	r2, [r3, #8]
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	699b      	ldr	r3, [r3, #24]
 800844e:	021b      	lsls	r3, r3, #8
 8008450:	4313      	orrs	r3, r2
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	4313      	orrs	r3, r2
 8008456:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800845e:	f023 030c 	bic.w	r3, r3, #12
 8008462:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800846a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800846e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	68da      	ldr	r2, [r3, #12]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	69db      	ldr	r3, [r3, #28]
 8008478:	021b      	lsls	r3, r3, #8
 800847a:	4313      	orrs	r3, r2
 800847c:	693a      	ldr	r2, [r7, #16]
 800847e:	4313      	orrs	r3, r2
 8008480:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	011a      	lsls	r2, r3, #4
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	6a1b      	ldr	r3, [r3, #32]
 800848c:	031b      	lsls	r3, r3, #12
 800848e:	4313      	orrs	r3, r2
 8008490:	693a      	ldr	r2, [r7, #16]
 8008492:	4313      	orrs	r3, r2
 8008494:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800849c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80084a4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	685a      	ldr	r2, [r3, #4]
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	695b      	ldr	r3, [r3, #20]
 80084ae:	011b      	lsls	r3, r3, #4
 80084b0:	4313      	orrs	r3, r2
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	697a      	ldr	r2, [r7, #20]
 80084be:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68fa      	ldr	r2, [r7, #12]
 80084ce:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008500:	2300      	movs	r3, #0
}
 8008502:	4618      	mov	r0, r3
 8008504:	3718      	adds	r7, #24
 8008506:	46bd      	mov	sp, r7
 8008508:	bd80      	pop	{r7, pc}

0800850a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800850a:	b580      	push	{r7, lr}
 800850c:	b082      	sub	sp, #8
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	691b      	ldr	r3, [r3, #16]
 8008518:	f003 0302 	and.w	r3, r3, #2
 800851c:	2b02      	cmp	r3, #2
 800851e:	d122      	bne.n	8008566 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68db      	ldr	r3, [r3, #12]
 8008526:	f003 0302 	and.w	r3, r3, #2
 800852a:	2b02      	cmp	r3, #2
 800852c:	d11b      	bne.n	8008566 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f06f 0202 	mvn.w	r2, #2
 8008536:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	699b      	ldr	r3, [r3, #24]
 8008544:	f003 0303 	and.w	r3, r3, #3
 8008548:	2b00      	cmp	r3, #0
 800854a:	d003      	beq.n	8008554 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fa78 	bl	8008a42 <HAL_TIM_IC_CaptureCallback>
 8008552:	e005      	b.n	8008560 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f000 fa6a 	bl	8008a2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fa7b 	bl	8008a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	f003 0304 	and.w	r3, r3, #4
 8008570:	2b04      	cmp	r3, #4
 8008572:	d122      	bne.n	80085ba <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68db      	ldr	r3, [r3, #12]
 800857a:	f003 0304 	and.w	r3, r3, #4
 800857e:	2b04      	cmp	r3, #4
 8008580:	d11b      	bne.n	80085ba <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f06f 0204 	mvn.w	r2, #4
 800858a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2202      	movs	r2, #2
 8008590:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	699b      	ldr	r3, [r3, #24]
 8008598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800859c:	2b00      	cmp	r3, #0
 800859e:	d003      	beq.n	80085a8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fa4e 	bl	8008a42 <HAL_TIM_IC_CaptureCallback>
 80085a6:	e005      	b.n	80085b4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fa40 	bl	8008a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 fa51 	bl	8008a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	f003 0308 	and.w	r3, r3, #8
 80085c4:	2b08      	cmp	r3, #8
 80085c6:	d122      	bne.n	800860e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	f003 0308 	and.w	r3, r3, #8
 80085d2:	2b08      	cmp	r3, #8
 80085d4:	d11b      	bne.n	800860e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f06f 0208 	mvn.w	r2, #8
 80085de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2204      	movs	r2, #4
 80085e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	69db      	ldr	r3, [r3, #28]
 80085ec:	f003 0303 	and.w	r3, r3, #3
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d003      	beq.n	80085fc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fa24 	bl	8008a42 <HAL_TIM_IC_CaptureCallback>
 80085fa:	e005      	b.n	8008608 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fa16 	bl	8008a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fa27 	bl	8008a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	f003 0310 	and.w	r3, r3, #16
 8008618:	2b10      	cmp	r3, #16
 800861a:	d122      	bne.n	8008662 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	f003 0310 	and.w	r3, r3, #16
 8008626:	2b10      	cmp	r3, #16
 8008628:	d11b      	bne.n	8008662 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f06f 0210 	mvn.w	r2, #16
 8008632:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2208      	movs	r2, #8
 8008638:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	69db      	ldr	r3, [r3, #28]
 8008640:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008644:	2b00      	cmp	r3, #0
 8008646:	d003      	beq.n	8008650 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f9fa 	bl	8008a42 <HAL_TIM_IC_CaptureCallback>
 800864e:	e005      	b.n	800865c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 f9ec 	bl	8008a2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f9fd 	bl	8008a56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	f003 0301 	and.w	r3, r3, #1
 800866c:	2b01      	cmp	r3, #1
 800866e:	d10e      	bne.n	800868e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68db      	ldr	r3, [r3, #12]
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	2b01      	cmp	r3, #1
 800867c:	d107      	bne.n	800868e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f06f 0201 	mvn.w	r2, #1
 8008686:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f7fc f8d3 	bl	8004834 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008698:	2b80      	cmp	r3, #128	; 0x80
 800869a:	d10e      	bne.n	80086ba <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a6:	2b80      	cmp	r3, #128	; 0x80
 80086a8:	d107      	bne.n	80086ba <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80086b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f000 fd53 	bl	8009160 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086c4:	2b40      	cmp	r3, #64	; 0x40
 80086c6:	d10e      	bne.n	80086e6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68db      	ldr	r3, [r3, #12]
 80086ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d2:	2b40      	cmp	r3, #64	; 0x40
 80086d4:	d107      	bne.n	80086e6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80086de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f9c2 	bl	8008a6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	f003 0320 	and.w	r3, r3, #32
 80086f0:	2b20      	cmp	r3, #32
 80086f2:	d10e      	bne.n	8008712 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	f003 0320 	and.w	r3, r3, #32
 80086fe:	2b20      	cmp	r3, #32
 8008700:	d107      	bne.n	8008712 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f06f 0220 	mvn.w	r2, #32
 800870a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fd1d 	bl	800914c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008712:	bf00      	nop
 8008714:	3708      	adds	r7, #8
 8008716:	46bd      	mov	sp, r7
 8008718:	bd80      	pop	{r7, pc}
	...

0800871c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008728:	2300      	movs	r3, #0
 800872a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008732:	2b01      	cmp	r3, #1
 8008734:	d101      	bne.n	800873a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008736:	2302      	movs	r3, #2
 8008738:	e0ae      	b.n	8008898 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2b0c      	cmp	r3, #12
 8008746:	f200 809f 	bhi.w	8008888 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800874a:	a201      	add	r2, pc, #4	; (adr r2, 8008750 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800874c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008750:	08008785 	.word	0x08008785
 8008754:	08008889 	.word	0x08008889
 8008758:	08008889 	.word	0x08008889
 800875c:	08008889 	.word	0x08008889
 8008760:	080087c5 	.word	0x080087c5
 8008764:	08008889 	.word	0x08008889
 8008768:	08008889 	.word	0x08008889
 800876c:	08008889 	.word	0x08008889
 8008770:	08008807 	.word	0x08008807
 8008774:	08008889 	.word	0x08008889
 8008778:	08008889 	.word	0x08008889
 800877c:	08008889 	.word	0x08008889
 8008780:	08008847 	.word	0x08008847
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68b9      	ldr	r1, [r7, #8]
 800878a:	4618      	mov	r0, r3
 800878c:	f000 fa18 	bl	8008bc0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	699a      	ldr	r2, [r3, #24]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f042 0208 	orr.w	r2, r2, #8
 800879e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	699a      	ldr	r2, [r3, #24]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f022 0204 	bic.w	r2, r2, #4
 80087ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	6999      	ldr	r1, [r3, #24]
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	691a      	ldr	r2, [r3, #16]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	430a      	orrs	r2, r1
 80087c0:	619a      	str	r2, [r3, #24]
      break;
 80087c2:	e064      	b.n	800888e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68b9      	ldr	r1, [r7, #8]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f000 fa68 	bl	8008ca0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	699a      	ldr	r2, [r3, #24]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	699a      	ldr	r2, [r3, #24]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80087ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6999      	ldr	r1, [r3, #24]
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	691b      	ldr	r3, [r3, #16]
 80087fa:	021a      	lsls	r2, r3, #8
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	430a      	orrs	r2, r1
 8008802:	619a      	str	r2, [r3, #24]
      break;
 8008804:	e043      	b.n	800888e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	68b9      	ldr	r1, [r7, #8]
 800880c:	4618      	mov	r0, r3
 800880e:	f000 fabd 	bl	8008d8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	69da      	ldr	r2, [r3, #28]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f042 0208 	orr.w	r2, r2, #8
 8008820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	69da      	ldr	r2, [r3, #28]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f022 0204 	bic.w	r2, r2, #4
 8008830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	69d9      	ldr	r1, [r3, #28]
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	691a      	ldr	r2, [r3, #16]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	430a      	orrs	r2, r1
 8008842:	61da      	str	r2, [r3, #28]
      break;
 8008844:	e023      	b.n	800888e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68b9      	ldr	r1, [r7, #8]
 800884c:	4618      	mov	r0, r3
 800884e:	f000 fb11 	bl	8008e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	69da      	ldr	r2, [r3, #28]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008860:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	69da      	ldr	r2, [r3, #28]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008870:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	69d9      	ldr	r1, [r3, #28]
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	021a      	lsls	r2, r3, #8
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	430a      	orrs	r2, r1
 8008884:	61da      	str	r2, [r3, #28]
      break;
 8008886:	e002      	b.n	800888e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	75fb      	strb	r3, [r7, #23]
      break;
 800888c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008896:	7dfb      	ldrb	r3, [r7, #23]
}
 8008898:	4618      	mov	r0, r3
 800889a:	3718      	adds	r7, #24
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d101      	bne.n	80088bc <HAL_TIM_ConfigClockSource+0x1c>
 80088b8:	2302      	movs	r3, #2
 80088ba:	e0b4      	b.n	8008a26 <HAL_TIM_ConfigClockSource+0x186>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2202      	movs	r2, #2
 80088c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80088da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	68ba      	ldr	r2, [r7, #8]
 80088ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088f4:	d03e      	beq.n	8008974 <HAL_TIM_ConfigClockSource+0xd4>
 80088f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80088fa:	f200 8087 	bhi.w	8008a0c <HAL_TIM_ConfigClockSource+0x16c>
 80088fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008902:	f000 8086 	beq.w	8008a12 <HAL_TIM_ConfigClockSource+0x172>
 8008906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800890a:	d87f      	bhi.n	8008a0c <HAL_TIM_ConfigClockSource+0x16c>
 800890c:	2b70      	cmp	r3, #112	; 0x70
 800890e:	d01a      	beq.n	8008946 <HAL_TIM_ConfigClockSource+0xa6>
 8008910:	2b70      	cmp	r3, #112	; 0x70
 8008912:	d87b      	bhi.n	8008a0c <HAL_TIM_ConfigClockSource+0x16c>
 8008914:	2b60      	cmp	r3, #96	; 0x60
 8008916:	d050      	beq.n	80089ba <HAL_TIM_ConfigClockSource+0x11a>
 8008918:	2b60      	cmp	r3, #96	; 0x60
 800891a:	d877      	bhi.n	8008a0c <HAL_TIM_ConfigClockSource+0x16c>
 800891c:	2b50      	cmp	r3, #80	; 0x50
 800891e:	d03c      	beq.n	800899a <HAL_TIM_ConfigClockSource+0xfa>
 8008920:	2b50      	cmp	r3, #80	; 0x50
 8008922:	d873      	bhi.n	8008a0c <HAL_TIM_ConfigClockSource+0x16c>
 8008924:	2b40      	cmp	r3, #64	; 0x40
 8008926:	d058      	beq.n	80089da <HAL_TIM_ConfigClockSource+0x13a>
 8008928:	2b40      	cmp	r3, #64	; 0x40
 800892a:	d86f      	bhi.n	8008a0c <HAL_TIM_ConfigClockSource+0x16c>
 800892c:	2b30      	cmp	r3, #48	; 0x30
 800892e:	d064      	beq.n	80089fa <HAL_TIM_ConfigClockSource+0x15a>
 8008930:	2b30      	cmp	r3, #48	; 0x30
 8008932:	d86b      	bhi.n	8008a0c <HAL_TIM_ConfigClockSource+0x16c>
 8008934:	2b20      	cmp	r3, #32
 8008936:	d060      	beq.n	80089fa <HAL_TIM_ConfigClockSource+0x15a>
 8008938:	2b20      	cmp	r3, #32
 800893a:	d867      	bhi.n	8008a0c <HAL_TIM_ConfigClockSource+0x16c>
 800893c:	2b00      	cmp	r3, #0
 800893e:	d05c      	beq.n	80089fa <HAL_TIM_ConfigClockSource+0x15a>
 8008940:	2b10      	cmp	r3, #16
 8008942:	d05a      	beq.n	80089fa <HAL_TIM_ConfigClockSource+0x15a>
 8008944:	e062      	b.n	8008a0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6818      	ldr	r0, [r3, #0]
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	6899      	ldr	r1, [r3, #8]
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	685a      	ldr	r2, [r3, #4]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	f000 fb5d 	bl	8009014 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008968:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	609a      	str	r2, [r3, #8]
      break;
 8008972:	e04f      	b.n	8008a14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6818      	ldr	r0, [r3, #0]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	6899      	ldr	r1, [r3, #8]
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	685a      	ldr	r2, [r3, #4]
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	f000 fb46 	bl	8009014 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	689a      	ldr	r2, [r3, #8]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008996:	609a      	str	r2, [r3, #8]
      break;
 8008998:	e03c      	b.n	8008a14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6818      	ldr	r0, [r3, #0]
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	6859      	ldr	r1, [r3, #4]
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	461a      	mov	r2, r3
 80089a8:	f000 faba 	bl	8008f20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2150      	movs	r1, #80	; 0x50
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 fb13 	bl	8008fde <TIM_ITRx_SetConfig>
      break;
 80089b8:	e02c      	b.n	8008a14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6818      	ldr	r0, [r3, #0]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	6859      	ldr	r1, [r3, #4]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	461a      	mov	r2, r3
 80089c8:	f000 fad9 	bl	8008f7e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2160      	movs	r1, #96	; 0x60
 80089d2:	4618      	mov	r0, r3
 80089d4:	f000 fb03 	bl	8008fde <TIM_ITRx_SetConfig>
      break;
 80089d8:	e01c      	b.n	8008a14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6818      	ldr	r0, [r3, #0]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	6859      	ldr	r1, [r3, #4]
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	461a      	mov	r2, r3
 80089e8:	f000 fa9a 	bl	8008f20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2140      	movs	r1, #64	; 0x40
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 faf3 	bl	8008fde <TIM_ITRx_SetConfig>
      break;
 80089f8:	e00c      	b.n	8008a14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4619      	mov	r1, r3
 8008a04:	4610      	mov	r0, r2
 8008a06:	f000 faea 	bl	8008fde <TIM_ITRx_SetConfig>
      break;
 8008a0a:	e003      	b.n	8008a14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a10:	e000      	b.n	8008a14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b083      	sub	sp, #12
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a36:	bf00      	nop
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr

08008a42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a42:	b480      	push	{r7}
 8008a44:	b083      	sub	sp, #12
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a4a:	bf00      	nop
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a56:	b480      	push	{r7}
 8008a58:	b083      	sub	sp, #12
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a5e:	bf00      	nop
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	b083      	sub	sp, #12
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a72:	bf00      	nop
 8008a74:	370c      	adds	r7, #12
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
	...

08008a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b085      	sub	sp, #20
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a40      	ldr	r2, [pc, #256]	; (8008b94 <TIM_Base_SetConfig+0x114>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d013      	beq.n	8008ac0 <TIM_Base_SetConfig+0x40>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a9e:	d00f      	beq.n	8008ac0 <TIM_Base_SetConfig+0x40>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a3d      	ldr	r2, [pc, #244]	; (8008b98 <TIM_Base_SetConfig+0x118>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d00b      	beq.n	8008ac0 <TIM_Base_SetConfig+0x40>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a3c      	ldr	r2, [pc, #240]	; (8008b9c <TIM_Base_SetConfig+0x11c>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d007      	beq.n	8008ac0 <TIM_Base_SetConfig+0x40>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	4a3b      	ldr	r2, [pc, #236]	; (8008ba0 <TIM_Base_SetConfig+0x120>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d003      	beq.n	8008ac0 <TIM_Base_SetConfig+0x40>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a3a      	ldr	r2, [pc, #232]	; (8008ba4 <TIM_Base_SetConfig+0x124>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d108      	bne.n	8008ad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a2f      	ldr	r2, [pc, #188]	; (8008b94 <TIM_Base_SetConfig+0x114>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d02b      	beq.n	8008b32 <TIM_Base_SetConfig+0xb2>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ae0:	d027      	beq.n	8008b32 <TIM_Base_SetConfig+0xb2>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a2c      	ldr	r2, [pc, #176]	; (8008b98 <TIM_Base_SetConfig+0x118>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d023      	beq.n	8008b32 <TIM_Base_SetConfig+0xb2>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a2b      	ldr	r2, [pc, #172]	; (8008b9c <TIM_Base_SetConfig+0x11c>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d01f      	beq.n	8008b32 <TIM_Base_SetConfig+0xb2>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a2a      	ldr	r2, [pc, #168]	; (8008ba0 <TIM_Base_SetConfig+0x120>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d01b      	beq.n	8008b32 <TIM_Base_SetConfig+0xb2>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a29      	ldr	r2, [pc, #164]	; (8008ba4 <TIM_Base_SetConfig+0x124>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d017      	beq.n	8008b32 <TIM_Base_SetConfig+0xb2>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a28      	ldr	r2, [pc, #160]	; (8008ba8 <TIM_Base_SetConfig+0x128>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d013      	beq.n	8008b32 <TIM_Base_SetConfig+0xb2>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a27      	ldr	r2, [pc, #156]	; (8008bac <TIM_Base_SetConfig+0x12c>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d00f      	beq.n	8008b32 <TIM_Base_SetConfig+0xb2>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a26      	ldr	r2, [pc, #152]	; (8008bb0 <TIM_Base_SetConfig+0x130>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d00b      	beq.n	8008b32 <TIM_Base_SetConfig+0xb2>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a25      	ldr	r2, [pc, #148]	; (8008bb4 <TIM_Base_SetConfig+0x134>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d007      	beq.n	8008b32 <TIM_Base_SetConfig+0xb2>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a24      	ldr	r2, [pc, #144]	; (8008bb8 <TIM_Base_SetConfig+0x138>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d003      	beq.n	8008b32 <TIM_Base_SetConfig+0xb2>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a23      	ldr	r2, [pc, #140]	; (8008bbc <TIM_Base_SetConfig+0x13c>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d108      	bne.n	8008b44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	68fa      	ldr	r2, [r7, #12]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	695b      	ldr	r3, [r3, #20]
 8008b4e:	4313      	orrs	r3, r2
 8008b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	689a      	ldr	r2, [r3, #8]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	681a      	ldr	r2, [r3, #0]
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	4a0a      	ldr	r2, [pc, #40]	; (8008b94 <TIM_Base_SetConfig+0x114>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d003      	beq.n	8008b78 <TIM_Base_SetConfig+0xf8>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	4a0c      	ldr	r2, [pc, #48]	; (8008ba4 <TIM_Base_SetConfig+0x124>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d103      	bne.n	8008b80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	691a      	ldr	r2, [r3, #16]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	2201      	movs	r2, #1
 8008b84:	615a      	str	r2, [r3, #20]
}
 8008b86:	bf00      	nop
 8008b88:	3714      	adds	r7, #20
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
 8008b92:	bf00      	nop
 8008b94:	40010000 	.word	0x40010000
 8008b98:	40000400 	.word	0x40000400
 8008b9c:	40000800 	.word	0x40000800
 8008ba0:	40000c00 	.word	0x40000c00
 8008ba4:	40010400 	.word	0x40010400
 8008ba8:	40014000 	.word	0x40014000
 8008bac:	40014400 	.word	0x40014400
 8008bb0:	40014800 	.word	0x40014800
 8008bb4:	40001800 	.word	0x40001800
 8008bb8:	40001c00 	.word	0x40001c00
 8008bbc:	40002000 	.word	0x40002000

08008bc0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b087      	sub	sp, #28
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a1b      	ldr	r3, [r3, #32]
 8008bce:	f023 0201 	bic.w	r2, r3, #1
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	699b      	ldr	r3, [r3, #24]
 8008be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f023 0303 	bic.w	r3, r3, #3
 8008bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	f023 0302 	bic.w	r3, r3, #2
 8008c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	697a      	ldr	r2, [r7, #20]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a20      	ldr	r2, [pc, #128]	; (8008c98 <TIM_OC1_SetConfig+0xd8>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d003      	beq.n	8008c24 <TIM_OC1_SetConfig+0x64>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a1f      	ldr	r2, [pc, #124]	; (8008c9c <TIM_OC1_SetConfig+0xdc>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d10c      	bne.n	8008c3e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	f023 0308 	bic.w	r3, r3, #8
 8008c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	697a      	ldr	r2, [r7, #20]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f023 0304 	bic.w	r3, r3, #4
 8008c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a15      	ldr	r2, [pc, #84]	; (8008c98 <TIM_OC1_SetConfig+0xd8>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d003      	beq.n	8008c4e <TIM_OC1_SetConfig+0x8e>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a14      	ldr	r2, [pc, #80]	; (8008c9c <TIM_OC1_SetConfig+0xdc>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d111      	bne.n	8008c72 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	695b      	ldr	r3, [r3, #20]
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	4313      	orrs	r3, r2
 8008c66:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	68fa      	ldr	r2, [r7, #12]
 8008c7c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	685a      	ldr	r2, [r3, #4]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	697a      	ldr	r2, [r7, #20]
 8008c8a:	621a      	str	r2, [r3, #32]
}
 8008c8c:	bf00      	nop
 8008c8e:	371c      	adds	r7, #28
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr
 8008c98:	40010000 	.word	0x40010000
 8008c9c:	40010400 	.word	0x40010400

08008ca0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b087      	sub	sp, #28
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a1b      	ldr	r3, [r3, #32]
 8008cae:	f023 0210 	bic.w	r2, r3, #16
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
 8008cba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	685b      	ldr	r3, [r3, #4]
 8008cc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	699b      	ldr	r3, [r3, #24]
 8008cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	021b      	lsls	r3, r3, #8
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	f023 0320 	bic.w	r3, r3, #32
 8008cea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	689b      	ldr	r3, [r3, #8]
 8008cf0:	011b      	lsls	r3, r3, #4
 8008cf2:	697a      	ldr	r2, [r7, #20]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	4a22      	ldr	r2, [pc, #136]	; (8008d84 <TIM_OC2_SetConfig+0xe4>)
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	d003      	beq.n	8008d08 <TIM_OC2_SetConfig+0x68>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4a21      	ldr	r2, [pc, #132]	; (8008d88 <TIM_OC2_SetConfig+0xe8>)
 8008d04:	4293      	cmp	r3, r2
 8008d06:	d10d      	bne.n	8008d24 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	011b      	lsls	r3, r3, #4
 8008d16:	697a      	ldr	r2, [r7, #20]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d22:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a17      	ldr	r2, [pc, #92]	; (8008d84 <TIM_OC2_SetConfig+0xe4>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d003      	beq.n	8008d34 <TIM_OC2_SetConfig+0x94>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a16      	ldr	r2, [pc, #88]	; (8008d88 <TIM_OC2_SetConfig+0xe8>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d113      	bne.n	8008d5c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	685a      	ldr	r2, [r3, #4]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	621a      	str	r2, [r3, #32]
}
 8008d76:	bf00      	nop
 8008d78:	371c      	adds	r7, #28
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	40010000 	.word	0x40010000
 8008d88:	40010400 	.word	0x40010400

08008d8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b087      	sub	sp, #28
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a1b      	ldr	r3, [r3, #32]
 8008da6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	69db      	ldr	r3, [r3, #28]
 8008db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	f023 0303 	bic.w	r3, r3, #3
 8008dc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68fa      	ldr	r2, [r7, #12]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008dd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	021b      	lsls	r3, r3, #8
 8008ddc:	697a      	ldr	r2, [r7, #20]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a21      	ldr	r2, [pc, #132]	; (8008e6c <TIM_OC3_SetConfig+0xe0>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d003      	beq.n	8008df2 <TIM_OC3_SetConfig+0x66>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a20      	ldr	r2, [pc, #128]	; (8008e70 <TIM_OC3_SetConfig+0xe4>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d10d      	bne.n	8008e0e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008df8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	021b      	lsls	r3, r3, #8
 8008e00:	697a      	ldr	r2, [r7, #20]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a16      	ldr	r2, [pc, #88]	; (8008e6c <TIM_OC3_SetConfig+0xe0>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d003      	beq.n	8008e1e <TIM_OC3_SetConfig+0x92>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a15      	ldr	r2, [pc, #84]	; (8008e70 <TIM_OC3_SetConfig+0xe4>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d113      	bne.n	8008e46 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	695b      	ldr	r3, [r3, #20]
 8008e32:	011b      	lsls	r3, r3, #4
 8008e34:	693a      	ldr	r2, [r7, #16]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	699b      	ldr	r3, [r3, #24]
 8008e3e:	011b      	lsls	r3, r3, #4
 8008e40:	693a      	ldr	r2, [r7, #16]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	693a      	ldr	r2, [r7, #16]
 8008e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	685a      	ldr	r2, [r3, #4]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	697a      	ldr	r2, [r7, #20]
 8008e5e:	621a      	str	r2, [r3, #32]
}
 8008e60:	bf00      	nop
 8008e62:	371c      	adds	r7, #28
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr
 8008e6c:	40010000 	.word	0x40010000
 8008e70:	40010400 	.word	0x40010400

08008e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b087      	sub	sp, #28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a1b      	ldr	r3, [r3, #32]
 8008e8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	685b      	ldr	r3, [r3, #4]
 8008e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	69db      	ldr	r3, [r3, #28]
 8008e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	021b      	lsls	r3, r3, #8
 8008eb2:	68fa      	ldr	r2, [r7, #12]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	031b      	lsls	r3, r3, #12
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a12      	ldr	r2, [pc, #72]	; (8008f18 <TIM_OC4_SetConfig+0xa4>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d003      	beq.n	8008edc <TIM_OC4_SetConfig+0x68>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a11      	ldr	r2, [pc, #68]	; (8008f1c <TIM_OC4_SetConfig+0xa8>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d109      	bne.n	8008ef0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ee2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	695b      	ldr	r3, [r3, #20]
 8008ee8:	019b      	lsls	r3, r3, #6
 8008eea:	697a      	ldr	r2, [r7, #20]
 8008eec:	4313      	orrs	r3, r2
 8008eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	697a      	ldr	r2, [r7, #20]
 8008ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	68fa      	ldr	r2, [r7, #12]
 8008efa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	685a      	ldr	r2, [r3, #4]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	693a      	ldr	r2, [r7, #16]
 8008f08:	621a      	str	r2, [r3, #32]
}
 8008f0a:	bf00      	nop
 8008f0c:	371c      	adds	r7, #28
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	40010000 	.word	0x40010000
 8008f1c:	40010400 	.word	0x40010400

08008f20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b087      	sub	sp, #28
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	60b9      	str	r1, [r7, #8]
 8008f2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6a1b      	ldr	r3, [r3, #32]
 8008f30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	f023 0201 	bic.w	r2, r3, #1
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	699b      	ldr	r3, [r3, #24]
 8008f42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	011b      	lsls	r3, r3, #4
 8008f50:	693a      	ldr	r2, [r7, #16]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	f023 030a 	bic.w	r3, r3, #10
 8008f5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	4313      	orrs	r3, r2
 8008f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	697a      	ldr	r2, [r7, #20]
 8008f70:	621a      	str	r2, [r3, #32]
}
 8008f72:	bf00      	nop
 8008f74:	371c      	adds	r7, #28
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b087      	sub	sp, #28
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	60f8      	str	r0, [r7, #12]
 8008f86:	60b9      	str	r1, [r7, #8]
 8008f88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6a1b      	ldr	r3, [r3, #32]
 8008f8e:	f023 0210 	bic.w	r2, r3, #16
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6a1b      	ldr	r3, [r3, #32]
 8008fa0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008fa8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	031b      	lsls	r3, r3, #12
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008fba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	011b      	lsls	r3, r3, #4
 8008fc0:	693a      	ldr	r2, [r7, #16]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	697a      	ldr	r2, [r7, #20]
 8008fca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	693a      	ldr	r2, [r7, #16]
 8008fd0:	621a      	str	r2, [r3, #32]
}
 8008fd2:	bf00      	nop
 8008fd4:	371c      	adds	r7, #28
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr

08008fde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fde:	b480      	push	{r7}
 8008fe0:	b085      	sub	sp, #20
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
 8008fe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ff4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ff6:	683a      	ldr	r2, [r7, #0]
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	f043 0307 	orr.w	r3, r3, #7
 8009000:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	609a      	str	r2, [r3, #8]
}
 8009008:	bf00      	nop
 800900a:	3714      	adds	r7, #20
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009014:	b480      	push	{r7}
 8009016:	b087      	sub	sp, #28
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
 8009020:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800902e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	021a      	lsls	r2, r3, #8
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	431a      	orrs	r2, r3
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	4313      	orrs	r3, r2
 800903c:	697a      	ldr	r2, [r7, #20]
 800903e:	4313      	orrs	r3, r2
 8009040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	697a      	ldr	r2, [r7, #20]
 8009046:	609a      	str	r2, [r3, #8]
}
 8009048:	bf00      	nop
 800904a:	371c      	adds	r7, #28
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009064:	2b01      	cmp	r3, #1
 8009066:	d101      	bne.n	800906c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009068:	2302      	movs	r3, #2
 800906a:	e05a      	b.n	8009122 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2201      	movs	r2, #1
 8009070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2202      	movs	r2, #2
 8009078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	685b      	ldr	r3, [r3, #4]
 8009082:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	689b      	ldr	r3, [r3, #8]
 800908a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	4313      	orrs	r3, r2
 800909c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a21      	ldr	r2, [pc, #132]	; (8009130 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d022      	beq.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090b8:	d01d      	beq.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a1d      	ldr	r2, [pc, #116]	; (8009134 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d018      	beq.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a1b      	ldr	r2, [pc, #108]	; (8009138 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d013      	beq.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a1a      	ldr	r2, [pc, #104]	; (800913c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d00e      	beq.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a18      	ldr	r2, [pc, #96]	; (8009140 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d009      	beq.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a17      	ldr	r2, [pc, #92]	; (8009144 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d004      	beq.n	80090f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a15      	ldr	r2, [pc, #84]	; (8009148 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d10c      	bne.n	8009110 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	4313      	orrs	r3, r2
 8009106:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	68ba      	ldr	r2, [r7, #8]
 800910e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2201      	movs	r2, #1
 8009114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009120:	2300      	movs	r3, #0
}
 8009122:	4618      	mov	r0, r3
 8009124:	3714      	adds	r7, #20
 8009126:	46bd      	mov	sp, r7
 8009128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912c:	4770      	bx	lr
 800912e:	bf00      	nop
 8009130:	40010000 	.word	0x40010000
 8009134:	40000400 	.word	0x40000400
 8009138:	40000800 	.word	0x40000800
 800913c:	40000c00 	.word	0x40000c00
 8009140:	40010400 	.word	0x40010400
 8009144:	40014000 	.word	0x40014000
 8009148:	40001800 	.word	0x40001800

0800914c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009168:	bf00      	nop
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d101      	bne.n	8009186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009182:	2301      	movs	r3, #1
 8009184:	e03f      	b.n	8009206 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b00      	cmp	r3, #0
 8009190:	d106      	bne.n	80091a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7fc f96c 	bl	8005478 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2224      	movs	r2, #36	; 0x24
 80091a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68da      	ldr	r2, [r3, #12]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80091b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f829 	bl	8009210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	691a      	ldr	r2, [r3, #16]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	695a      	ldr	r2, [r3, #20]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	68da      	ldr	r2, [r3, #12]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80091ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2220      	movs	r2, #32
 80091f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2220      	movs	r2, #32
 8009200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
	...

08009210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009210:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009214:	b0c0      	sub	sp, #256	; 0x100
 8009216:	af00      	add	r7, sp, #0
 8009218:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800921c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	691b      	ldr	r3, [r3, #16]
 8009224:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800922c:	68d9      	ldr	r1, [r3, #12]
 800922e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	ea40 0301 	orr.w	r3, r0, r1
 8009238:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800923a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800923e:	689a      	ldr	r2, [r3, #8]
 8009240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	431a      	orrs	r2, r3
 8009248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	431a      	orrs	r2, r3
 8009250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009254:	69db      	ldr	r3, [r3, #28]
 8009256:	4313      	orrs	r3, r2
 8009258:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800925c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009268:	f021 010c 	bic.w	r1, r1, #12
 800926c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009270:	681a      	ldr	r2, [r3, #0]
 8009272:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009276:	430b      	orrs	r3, r1
 8009278:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800927a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	695b      	ldr	r3, [r3, #20]
 8009282:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800928a:	6999      	ldr	r1, [r3, #24]
 800928c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009290:	681a      	ldr	r2, [r3, #0]
 8009292:	ea40 0301 	orr.w	r3, r0, r1
 8009296:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	4b8f      	ldr	r3, [pc, #572]	; (80094dc <UART_SetConfig+0x2cc>)
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d005      	beq.n	80092b0 <UART_SetConfig+0xa0>
 80092a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	4b8d      	ldr	r3, [pc, #564]	; (80094e0 <UART_SetConfig+0x2d0>)
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d104      	bne.n	80092ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80092b0:	f7fe fe74 	bl	8007f9c <HAL_RCC_GetPCLK2Freq>
 80092b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80092b8:	e003      	b.n	80092c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80092ba:	f7fe fe5b 	bl	8007f74 <HAL_RCC_GetPCLK1Freq>
 80092be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092c6:	69db      	ldr	r3, [r3, #28]
 80092c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092cc:	f040 810c 	bne.w	80094e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80092d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092d4:	2200      	movs	r2, #0
 80092d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80092da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80092de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80092e2:	4622      	mov	r2, r4
 80092e4:	462b      	mov	r3, r5
 80092e6:	1891      	adds	r1, r2, r2
 80092e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80092ea:	415b      	adcs	r3, r3
 80092ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80092f2:	4621      	mov	r1, r4
 80092f4:	eb12 0801 	adds.w	r8, r2, r1
 80092f8:	4629      	mov	r1, r5
 80092fa:	eb43 0901 	adc.w	r9, r3, r1
 80092fe:	f04f 0200 	mov.w	r2, #0
 8009302:	f04f 0300 	mov.w	r3, #0
 8009306:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800930a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800930e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009312:	4690      	mov	r8, r2
 8009314:	4699      	mov	r9, r3
 8009316:	4623      	mov	r3, r4
 8009318:	eb18 0303 	adds.w	r3, r8, r3
 800931c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009320:	462b      	mov	r3, r5
 8009322:	eb49 0303 	adc.w	r3, r9, r3
 8009326:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800932a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009336:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800933a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800933e:	460b      	mov	r3, r1
 8009340:	18db      	adds	r3, r3, r3
 8009342:	653b      	str	r3, [r7, #80]	; 0x50
 8009344:	4613      	mov	r3, r2
 8009346:	eb42 0303 	adc.w	r3, r2, r3
 800934a:	657b      	str	r3, [r7, #84]	; 0x54
 800934c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009350:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009354:	f7f7 fc98 	bl	8000c88 <__aeabi_uldivmod>
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	4b61      	ldr	r3, [pc, #388]	; (80094e4 <UART_SetConfig+0x2d4>)
 800935e:	fba3 2302 	umull	r2, r3, r3, r2
 8009362:	095b      	lsrs	r3, r3, #5
 8009364:	011c      	lsls	r4, r3, #4
 8009366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800936a:	2200      	movs	r2, #0
 800936c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009370:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009374:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009378:	4642      	mov	r2, r8
 800937a:	464b      	mov	r3, r9
 800937c:	1891      	adds	r1, r2, r2
 800937e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009380:	415b      	adcs	r3, r3
 8009382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009384:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009388:	4641      	mov	r1, r8
 800938a:	eb12 0a01 	adds.w	sl, r2, r1
 800938e:	4649      	mov	r1, r9
 8009390:	eb43 0b01 	adc.w	fp, r3, r1
 8009394:	f04f 0200 	mov.w	r2, #0
 8009398:	f04f 0300 	mov.w	r3, #0
 800939c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80093a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80093a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093a8:	4692      	mov	sl, r2
 80093aa:	469b      	mov	fp, r3
 80093ac:	4643      	mov	r3, r8
 80093ae:	eb1a 0303 	adds.w	r3, sl, r3
 80093b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80093b6:	464b      	mov	r3, r9
 80093b8:	eb4b 0303 	adc.w	r3, fp, r3
 80093bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80093c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80093d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80093d4:	460b      	mov	r3, r1
 80093d6:	18db      	adds	r3, r3, r3
 80093d8:	643b      	str	r3, [r7, #64]	; 0x40
 80093da:	4613      	mov	r3, r2
 80093dc:	eb42 0303 	adc.w	r3, r2, r3
 80093e0:	647b      	str	r3, [r7, #68]	; 0x44
 80093e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80093e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80093ea:	f7f7 fc4d 	bl	8000c88 <__aeabi_uldivmod>
 80093ee:	4602      	mov	r2, r0
 80093f0:	460b      	mov	r3, r1
 80093f2:	4611      	mov	r1, r2
 80093f4:	4b3b      	ldr	r3, [pc, #236]	; (80094e4 <UART_SetConfig+0x2d4>)
 80093f6:	fba3 2301 	umull	r2, r3, r3, r1
 80093fa:	095b      	lsrs	r3, r3, #5
 80093fc:	2264      	movs	r2, #100	; 0x64
 80093fe:	fb02 f303 	mul.w	r3, r2, r3
 8009402:	1acb      	subs	r3, r1, r3
 8009404:	00db      	lsls	r3, r3, #3
 8009406:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800940a:	4b36      	ldr	r3, [pc, #216]	; (80094e4 <UART_SetConfig+0x2d4>)
 800940c:	fba3 2302 	umull	r2, r3, r3, r2
 8009410:	095b      	lsrs	r3, r3, #5
 8009412:	005b      	lsls	r3, r3, #1
 8009414:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009418:	441c      	add	r4, r3
 800941a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800941e:	2200      	movs	r2, #0
 8009420:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009424:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009428:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800942c:	4642      	mov	r2, r8
 800942e:	464b      	mov	r3, r9
 8009430:	1891      	adds	r1, r2, r2
 8009432:	63b9      	str	r1, [r7, #56]	; 0x38
 8009434:	415b      	adcs	r3, r3
 8009436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009438:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800943c:	4641      	mov	r1, r8
 800943e:	1851      	adds	r1, r2, r1
 8009440:	6339      	str	r1, [r7, #48]	; 0x30
 8009442:	4649      	mov	r1, r9
 8009444:	414b      	adcs	r3, r1
 8009446:	637b      	str	r3, [r7, #52]	; 0x34
 8009448:	f04f 0200 	mov.w	r2, #0
 800944c:	f04f 0300 	mov.w	r3, #0
 8009450:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009454:	4659      	mov	r1, fp
 8009456:	00cb      	lsls	r3, r1, #3
 8009458:	4651      	mov	r1, sl
 800945a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800945e:	4651      	mov	r1, sl
 8009460:	00ca      	lsls	r2, r1, #3
 8009462:	4610      	mov	r0, r2
 8009464:	4619      	mov	r1, r3
 8009466:	4603      	mov	r3, r0
 8009468:	4642      	mov	r2, r8
 800946a:	189b      	adds	r3, r3, r2
 800946c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009470:	464b      	mov	r3, r9
 8009472:	460a      	mov	r2, r1
 8009474:	eb42 0303 	adc.w	r3, r2, r3
 8009478:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800947c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009488:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800948c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009490:	460b      	mov	r3, r1
 8009492:	18db      	adds	r3, r3, r3
 8009494:	62bb      	str	r3, [r7, #40]	; 0x28
 8009496:	4613      	mov	r3, r2
 8009498:	eb42 0303 	adc.w	r3, r2, r3
 800949c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800949e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80094a6:	f7f7 fbef 	bl	8000c88 <__aeabi_uldivmod>
 80094aa:	4602      	mov	r2, r0
 80094ac:	460b      	mov	r3, r1
 80094ae:	4b0d      	ldr	r3, [pc, #52]	; (80094e4 <UART_SetConfig+0x2d4>)
 80094b0:	fba3 1302 	umull	r1, r3, r3, r2
 80094b4:	095b      	lsrs	r3, r3, #5
 80094b6:	2164      	movs	r1, #100	; 0x64
 80094b8:	fb01 f303 	mul.w	r3, r1, r3
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	00db      	lsls	r3, r3, #3
 80094c0:	3332      	adds	r3, #50	; 0x32
 80094c2:	4a08      	ldr	r2, [pc, #32]	; (80094e4 <UART_SetConfig+0x2d4>)
 80094c4:	fba2 2303 	umull	r2, r3, r2, r3
 80094c8:	095b      	lsrs	r3, r3, #5
 80094ca:	f003 0207 	and.w	r2, r3, #7
 80094ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4422      	add	r2, r4
 80094d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80094d8:	e105      	b.n	80096e6 <UART_SetConfig+0x4d6>
 80094da:	bf00      	nop
 80094dc:	40011000 	.word	0x40011000
 80094e0:	40011400 	.word	0x40011400
 80094e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80094e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094ec:	2200      	movs	r2, #0
 80094ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80094f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80094f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80094fa:	4642      	mov	r2, r8
 80094fc:	464b      	mov	r3, r9
 80094fe:	1891      	adds	r1, r2, r2
 8009500:	6239      	str	r1, [r7, #32]
 8009502:	415b      	adcs	r3, r3
 8009504:	627b      	str	r3, [r7, #36]	; 0x24
 8009506:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800950a:	4641      	mov	r1, r8
 800950c:	1854      	adds	r4, r2, r1
 800950e:	4649      	mov	r1, r9
 8009510:	eb43 0501 	adc.w	r5, r3, r1
 8009514:	f04f 0200 	mov.w	r2, #0
 8009518:	f04f 0300 	mov.w	r3, #0
 800951c:	00eb      	lsls	r3, r5, #3
 800951e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009522:	00e2      	lsls	r2, r4, #3
 8009524:	4614      	mov	r4, r2
 8009526:	461d      	mov	r5, r3
 8009528:	4643      	mov	r3, r8
 800952a:	18e3      	adds	r3, r4, r3
 800952c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009530:	464b      	mov	r3, r9
 8009532:	eb45 0303 	adc.w	r3, r5, r3
 8009536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800953a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009546:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800954a:	f04f 0200 	mov.w	r2, #0
 800954e:	f04f 0300 	mov.w	r3, #0
 8009552:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009556:	4629      	mov	r1, r5
 8009558:	008b      	lsls	r3, r1, #2
 800955a:	4621      	mov	r1, r4
 800955c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009560:	4621      	mov	r1, r4
 8009562:	008a      	lsls	r2, r1, #2
 8009564:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009568:	f7f7 fb8e 	bl	8000c88 <__aeabi_uldivmod>
 800956c:	4602      	mov	r2, r0
 800956e:	460b      	mov	r3, r1
 8009570:	4b60      	ldr	r3, [pc, #384]	; (80096f4 <UART_SetConfig+0x4e4>)
 8009572:	fba3 2302 	umull	r2, r3, r3, r2
 8009576:	095b      	lsrs	r3, r3, #5
 8009578:	011c      	lsls	r4, r3, #4
 800957a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800957e:	2200      	movs	r2, #0
 8009580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009584:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009588:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800958c:	4642      	mov	r2, r8
 800958e:	464b      	mov	r3, r9
 8009590:	1891      	adds	r1, r2, r2
 8009592:	61b9      	str	r1, [r7, #24]
 8009594:	415b      	adcs	r3, r3
 8009596:	61fb      	str	r3, [r7, #28]
 8009598:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800959c:	4641      	mov	r1, r8
 800959e:	1851      	adds	r1, r2, r1
 80095a0:	6139      	str	r1, [r7, #16]
 80095a2:	4649      	mov	r1, r9
 80095a4:	414b      	adcs	r3, r1
 80095a6:	617b      	str	r3, [r7, #20]
 80095a8:	f04f 0200 	mov.w	r2, #0
 80095ac:	f04f 0300 	mov.w	r3, #0
 80095b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80095b4:	4659      	mov	r1, fp
 80095b6:	00cb      	lsls	r3, r1, #3
 80095b8:	4651      	mov	r1, sl
 80095ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095be:	4651      	mov	r1, sl
 80095c0:	00ca      	lsls	r2, r1, #3
 80095c2:	4610      	mov	r0, r2
 80095c4:	4619      	mov	r1, r3
 80095c6:	4603      	mov	r3, r0
 80095c8:	4642      	mov	r2, r8
 80095ca:	189b      	adds	r3, r3, r2
 80095cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80095d0:	464b      	mov	r3, r9
 80095d2:	460a      	mov	r2, r1
 80095d4:	eb42 0303 	adc.w	r3, r2, r3
 80095d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80095dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	2200      	movs	r2, #0
 80095e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80095e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80095e8:	f04f 0200 	mov.w	r2, #0
 80095ec:	f04f 0300 	mov.w	r3, #0
 80095f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80095f4:	4649      	mov	r1, r9
 80095f6:	008b      	lsls	r3, r1, #2
 80095f8:	4641      	mov	r1, r8
 80095fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095fe:	4641      	mov	r1, r8
 8009600:	008a      	lsls	r2, r1, #2
 8009602:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009606:	f7f7 fb3f 	bl	8000c88 <__aeabi_uldivmod>
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	4b39      	ldr	r3, [pc, #228]	; (80096f4 <UART_SetConfig+0x4e4>)
 8009610:	fba3 1302 	umull	r1, r3, r3, r2
 8009614:	095b      	lsrs	r3, r3, #5
 8009616:	2164      	movs	r1, #100	; 0x64
 8009618:	fb01 f303 	mul.w	r3, r1, r3
 800961c:	1ad3      	subs	r3, r2, r3
 800961e:	011b      	lsls	r3, r3, #4
 8009620:	3332      	adds	r3, #50	; 0x32
 8009622:	4a34      	ldr	r2, [pc, #208]	; (80096f4 <UART_SetConfig+0x4e4>)
 8009624:	fba2 2303 	umull	r2, r3, r2, r3
 8009628:	095b      	lsrs	r3, r3, #5
 800962a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800962e:	441c      	add	r4, r3
 8009630:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009634:	2200      	movs	r2, #0
 8009636:	673b      	str	r3, [r7, #112]	; 0x70
 8009638:	677a      	str	r2, [r7, #116]	; 0x74
 800963a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800963e:	4642      	mov	r2, r8
 8009640:	464b      	mov	r3, r9
 8009642:	1891      	adds	r1, r2, r2
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	415b      	adcs	r3, r3
 8009648:	60fb      	str	r3, [r7, #12]
 800964a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800964e:	4641      	mov	r1, r8
 8009650:	1851      	adds	r1, r2, r1
 8009652:	6039      	str	r1, [r7, #0]
 8009654:	4649      	mov	r1, r9
 8009656:	414b      	adcs	r3, r1
 8009658:	607b      	str	r3, [r7, #4]
 800965a:	f04f 0200 	mov.w	r2, #0
 800965e:	f04f 0300 	mov.w	r3, #0
 8009662:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009666:	4659      	mov	r1, fp
 8009668:	00cb      	lsls	r3, r1, #3
 800966a:	4651      	mov	r1, sl
 800966c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009670:	4651      	mov	r1, sl
 8009672:	00ca      	lsls	r2, r1, #3
 8009674:	4610      	mov	r0, r2
 8009676:	4619      	mov	r1, r3
 8009678:	4603      	mov	r3, r0
 800967a:	4642      	mov	r2, r8
 800967c:	189b      	adds	r3, r3, r2
 800967e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009680:	464b      	mov	r3, r9
 8009682:	460a      	mov	r2, r1
 8009684:	eb42 0303 	adc.w	r3, r2, r3
 8009688:	66fb      	str	r3, [r7, #108]	; 0x6c
 800968a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	663b      	str	r3, [r7, #96]	; 0x60
 8009694:	667a      	str	r2, [r7, #100]	; 0x64
 8009696:	f04f 0200 	mov.w	r2, #0
 800969a:	f04f 0300 	mov.w	r3, #0
 800969e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80096a2:	4649      	mov	r1, r9
 80096a4:	008b      	lsls	r3, r1, #2
 80096a6:	4641      	mov	r1, r8
 80096a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096ac:	4641      	mov	r1, r8
 80096ae:	008a      	lsls	r2, r1, #2
 80096b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80096b4:	f7f7 fae8 	bl	8000c88 <__aeabi_uldivmod>
 80096b8:	4602      	mov	r2, r0
 80096ba:	460b      	mov	r3, r1
 80096bc:	4b0d      	ldr	r3, [pc, #52]	; (80096f4 <UART_SetConfig+0x4e4>)
 80096be:	fba3 1302 	umull	r1, r3, r3, r2
 80096c2:	095b      	lsrs	r3, r3, #5
 80096c4:	2164      	movs	r1, #100	; 0x64
 80096c6:	fb01 f303 	mul.w	r3, r1, r3
 80096ca:	1ad3      	subs	r3, r2, r3
 80096cc:	011b      	lsls	r3, r3, #4
 80096ce:	3332      	adds	r3, #50	; 0x32
 80096d0:	4a08      	ldr	r2, [pc, #32]	; (80096f4 <UART_SetConfig+0x4e4>)
 80096d2:	fba2 2303 	umull	r2, r3, r2, r3
 80096d6:	095b      	lsrs	r3, r3, #5
 80096d8:	f003 020f 	and.w	r2, r3, #15
 80096dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	4422      	add	r2, r4
 80096e4:	609a      	str	r2, [r3, #8]
}
 80096e6:	bf00      	nop
 80096e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80096ec:	46bd      	mov	sp, r7
 80096ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80096f2:	bf00      	nop
 80096f4:	51eb851f 	.word	0x51eb851f

080096f8 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 8009702:	2300      	movs	r3, #0
 8009704:	60fb      	str	r3, [r7, #12]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	429a      	cmp	r2, r3
 8009710:	d20b      	bcs.n	800972a <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	011b      	lsls	r3, r3, #4
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	4413      	add	r3, r2
 800971a:	6839      	ldr	r1, [r7, #0]
 800971c:	4618      	mov	r0, r3
 800971e:	f000 f817 	bl	8009750 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	3301      	adds	r3, #1
 8009726:	60fb      	str	r3, [r7, #12]
 8009728:	e7ed      	b.n	8009706 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 800972a:	bf00      	nop
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <HAL_ADC_ConvCpltCallback>:
 */

#include "AdcConvCpltCallbackHandler.hpp"

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b082      	sub	sp, #8
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
	AdcConvCpltCallbackHandler::getInstance().notify(hadc);
 800973a:	f7f8 fe41 	bl	80023c0 <_ZN26AdcConvCpltCallbackHandler11getInstanceEv>
 800973e:	4603      	mov	r3, r0
 8009740:	6879      	ldr	r1, [r7, #4]
 8009742:	4618      	mov	r0, r3
 8009744:	f7ff ffd8 	bl	80096f8 <_ZN26AdcConvCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 8009748:	bf00      	nop
 800974a:	3708      	adds	r7, #8
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}

08009750 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>:

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8009750:	b5b0      	push	{r4, r5, r7, lr}
 8009752:	b082      	sub	sp, #8
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4618      	mov	r0, r3
 800975e:	f7f7 fc5a 	bl	8001016 <_ZNKSt14_Function_base8_M_emptyEv>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 8009768:	f005 fca7 	bl	800f0ba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	68dc      	ldr	r4, [r3, #12]
 8009770:	687d      	ldr	r5, [r7, #4]
 8009772:	463b      	mov	r3, r7
 8009774:	4618      	mov	r0, r3
 8009776:	f7f9 f9ec 	bl	8002b52 <_ZSt7forwardIP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 800977a:	4603      	mov	r3, r0
 800977c:	4619      	mov	r1, r3
 800977e:	4628      	mov	r0, r5
 8009780:	47a0      	blx	r4
 8009782:	bf00      	nop
    }
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bdb0      	pop	{r4, r5, r7, pc}

0800978a <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>:
			m_listeners[i](hadc);
		}
	}

private:
	AdcConvHalfCpltCallbackHandler() = default;
 800978a:	b5b0      	push	{r4, r5, r7, lr}
 800978c:	b082      	sub	sp, #8
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	240f      	movs	r4, #15
 8009796:	461d      	mov	r5, r3
 8009798:	2c00      	cmp	r4, #0
 800979a:	db05      	blt.n	80097a8 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0x1e>
 800979c:	4628      	mov	r0, r5
 800979e:	f7f9 f8bd 	bl	800291c <_ZNSt8functionIFvP17ADC_HandleTypeDefEEC1Ev>
 80097a2:	3510      	adds	r5, #16
 80097a4:	3c01      	subs	r4, #1
 80097a6:	e7f7      	b.n	8009798 <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev+0xe>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	4618      	mov	r0, r3
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bdb0      	pop	{r4, r5, r7, pc}

080097ba <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>:
class AdcConvHalfCpltCallbackHandler {
 80097ba:	b590      	push	{r4, r7, lr}
 80097bc:	b083      	sub	sp, #12
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00a      	beq.n	80097de <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f503 7480 	add.w	r4, r3, #256	; 0x100
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	429c      	cmp	r4, r3
 80097d2:	d004      	beq.n	80097de <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x24>
 80097d4:	3c10      	subs	r4, #16
 80097d6:	4620      	mov	r0, r4
 80097d8:	f7f8 fdae 	bl	8002338 <_ZNSt8functionIFvP17ADC_HandleTypeDefEED1Ev>
 80097dc:	e7f7      	b.n	80097ce <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev+0x14>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4618      	mov	r0, r3
 80097e2:	370c      	adds	r7, #12
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd90      	pop	{r4, r7, pc}

080097e8 <__tcf_0>:
		static AdcConvHalfCpltCallbackHandler instance;
 80097e8:	b580      	push	{r7, lr}
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	4801      	ldr	r0, [pc, #4]	; (80097f4 <__tcf_0+0xc>)
 80097ee:	f7ff ffe4 	bl	80097ba <_ZN30AdcConvHalfCpltCallbackHandlerD1Ev>
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	200014b8 	.word	0x200014b8

080097f8 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>:
	static AdcConvHalfCpltCallbackHandler& getInstance() {
 80097f8:	b580      	push	{r7, lr}
 80097fa:	af00      	add	r7, sp, #0
		static AdcConvHalfCpltCallbackHandler instance;
 80097fc:	4b12      	ldr	r3, [pc, #72]	; (8009848 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	f3bf 8f5b 	dmb	ish
 8009804:	b2db      	uxtb	r3, r3
 8009806:	f003 0301 	and.w	r3, r3, #1
 800980a:	2b00      	cmp	r3, #0
 800980c:	bf0c      	ite	eq
 800980e:	2301      	moveq	r3, #1
 8009810:	2300      	movne	r3, #0
 8009812:	b2db      	uxtb	r3, r3
 8009814:	2b00      	cmp	r3, #0
 8009816:	d013      	beq.n	8009840 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 8009818:	480b      	ldr	r0, [pc, #44]	; (8009848 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800981a:	f005 fc3d 	bl	800f098 <__cxa_guard_acquire>
 800981e:	4603      	mov	r3, r0
 8009820:	2b00      	cmp	r3, #0
 8009822:	bf14      	ite	ne
 8009824:	2301      	movne	r3, #1
 8009826:	2300      	moveq	r3, #0
 8009828:	b2db      	uxtb	r3, r3
 800982a:	2b00      	cmp	r3, #0
 800982c:	d008      	beq.n	8009840 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x48>
 800982e:	4807      	ldr	r0, [pc, #28]	; (800984c <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
 8009830:	f7ff ffab 	bl	800978a <_ZN30AdcConvHalfCpltCallbackHandlerC1Ev>
 8009834:	4806      	ldr	r0, [pc, #24]	; (8009850 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x58>)
 8009836:	f005 fc66 	bl	800f106 <atexit>
 800983a:	4803      	ldr	r0, [pc, #12]	; (8009848 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x50>)
 800983c:	f005 fc38 	bl	800f0b0 <__cxa_guard_release>
		return instance;
 8009840:	4b02      	ldr	r3, [pc, #8]	; (800984c <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv+0x54>)
	}
 8009842:	4618      	mov	r0, r3
 8009844:	bd80      	pop	{r7, pc}
 8009846:	bf00      	nop
 8009848:	200015bc 	.word	0x200015bc
 800984c:	200014b8 	.word	0x200014b8
 8009850:	080097e9 	.word	0x080097e9

08009854 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>:
	void notify(ADC_HandleTypeDef *hadc) {
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 800985e:	2300      	movs	r3, #0
 8009860:	60fb      	str	r3, [r7, #12]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	429a      	cmp	r2, r3
 800986c:	d20b      	bcs.n	8009886 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0x32>
			m_listeners[i](hadc);
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	011b      	lsls	r3, r3, #4
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	4413      	add	r3, r2
 8009876:	6839      	ldr	r1, [r7, #0]
 8009878:	4618      	mov	r0, r3
 800987a:	f7ff ff69 	bl	8009750 <_ZNKSt8functionIFvP17ADC_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	3301      	adds	r3, #1
 8009882:	60fb      	str	r3, [r7, #12]
 8009884:	e7ed      	b.n	8009862 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef+0xe>
	}
 8009886:	bf00      	nop
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}

0800988e <HAL_ADC_ConvHalfCpltCallback>:


#include "AdcConvHalfCpltCallbackHandler.hpp"

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800988e:	b580      	push	{r7, lr}
 8009890:	b082      	sub	sp, #8
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
	AdcConvHalfCpltCallbackHandler::getInstance().notify(hadc);
 8009896:	f7ff ffaf 	bl	80097f8 <_ZN30AdcConvHalfCpltCallbackHandler11getInstanceEv>
 800989a:	4603      	mov	r3, r0
 800989c:	6879      	ldr	r1, [r7, #4]
 800989e:	4618      	mov	r0, r3
 80098a0:	f7ff ffd8 	bl	8009854 <_ZN30AdcConvHalfCpltCallbackHandler6notifyEP17ADC_HandleTypeDef>
}
 80098a4:	bf00      	nop
 80098a6:	3708      	adds	r7, #8
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <_ZN23GPIOExtiCallbackHandler6notifyEt>:
	void notify(uint16_t pin) {
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	460b      	mov	r3, r1
 80098b6:	807b      	strh	r3, [r7, #2]
		for (unsigned int i = 0; i < m_size; i++) {
 80098b8:	2300      	movs	r3, #0
 80098ba:	60fb      	str	r3, [r7, #12]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80098c2:	68fa      	ldr	r2, [r7, #12]
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d20c      	bcs.n	80098e2 <_ZN23GPIOExtiCallbackHandler6notifyEt+0x36>
			m_listeners[i](pin);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	011b      	lsls	r3, r3, #4
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	4413      	add	r3, r2
 80098d0:	887a      	ldrh	r2, [r7, #2]
 80098d2:	4611      	mov	r1, r2
 80098d4:	4618      	mov	r0, r3
 80098d6:	f000 f819 	bl	800990c <_ZNKSt8functionIFvtEEclEt>
		for (unsigned int i = 0; i < m_size; i++) {
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	3301      	adds	r3, #1
 80098de:	60fb      	str	r3, [r7, #12]
 80098e0:	e7ec      	b.n	80098bc <_ZN23GPIOExtiCallbackHandler6notifyEt+0x10>
	}
 80098e2:	bf00      	nop
 80098e4:	3710      	adds	r7, #16
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <HAL_GPIO_EXTI_Callback>:
#include "GPIOExtiCallbackHandler.hpp"




void HAL_GPIO_EXTI_Callback(uint16_t pin) {
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b082      	sub	sp, #8
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	4603      	mov	r3, r0
 80098f2:	80fb      	strh	r3, [r7, #6]
	GPIOExtiCallbackHandler::getInstance().notify(pin);
 80098f4:	f7f8 fa4c 	bl	8001d90 <_ZN23GPIOExtiCallbackHandler11getInstanceEv>
 80098f8:	4602      	mov	r2, r0
 80098fa:	88fb      	ldrh	r3, [r7, #6]
 80098fc:	4619      	mov	r1, r3
 80098fe:	4610      	mov	r0, r2
 8009900:	f7ff ffd4 	bl	80098ac <_ZN23GPIOExtiCallbackHandler6notifyEt>
}
 8009904:	bf00      	nop
 8009906:	3708      	adds	r7, #8
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}

0800990c <_ZNKSt8functionIFvtEEclEt>:
    function<_Res(_ArgTypes...)>::
 800990c:	b5b0      	push	{r4, r5, r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	460b      	mov	r3, r1
 8009916:	807b      	strh	r3, [r7, #2]
      if (_M_empty())
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4618      	mov	r0, r3
 800991c:	f7f7 fb7b 	bl	8001016 <_ZNKSt14_Function_base8_M_emptyEv>
 8009920:	4603      	mov	r3, r0
 8009922:	2b00      	cmp	r3, #0
 8009924:	d001      	beq.n	800992a <_ZNKSt8functionIFvtEEclEt+0x1e>
	__throw_bad_function_call();
 8009926:	f005 fbc8 	bl	800f0ba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	68dc      	ldr	r4, [r3, #12]
 800992e:	687d      	ldr	r5, [r7, #4]
 8009930:	1cbb      	adds	r3, r7, #2
 8009932:	4618      	mov	r0, r3
 8009934:	f7f8 fae6 	bl	8001f04 <_ZSt7forwardItEOT_RNSt16remove_referenceIS0_E4typeE>
 8009938:	4603      	mov	r3, r0
 800993a:	4619      	mov	r1, r3
 800993c:	4628      	mov	r0, r5
 800993e:	47a0      	blx	r4
 8009940:	bf00      	nop
    }
 8009942:	3708      	adds	r7, #8
 8009944:	46bd      	mov	sp, r7
 8009946:	bdb0      	pop	{r4, r5, r7, pc}

08009948 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef>:
	void notify(TIM_HandleTypeDef *htim) {
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
		for (unsigned int i = 0; i < m_size; i++) {
 8009952:	2300      	movs	r3, #0
 8009954:	60fb      	str	r3, [r7, #12]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	429a      	cmp	r2, r3
 8009960:	d20b      	bcs.n	800997a <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef+0x32>
			m_listeners[i](htim);
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	011b      	lsls	r3, r3, #4
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	4413      	add	r3, r2
 800996a:	6839      	ldr	r1, [r7, #0]
 800996c:	4618      	mov	r0, r3
 800996e:	f000 f817 	bl	80099a0 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_>
		for (unsigned int i = 0; i < m_size; i++) {
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	3301      	adds	r3, #1
 8009976:	60fb      	str	r3, [r7, #12]
 8009978:	e7ed      	b.n	8009956 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef+0xe>
	}
 800997a:	bf00      	nop
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <PeriodElapsedCallback>:

#ifdef __cplusplus
extern "C" {
#endif

void PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8009982:	b580      	push	{r7, lr}
 8009984:	b082      	sub	sp, #8
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
	TimPeriodElapsedCallbackHandler::getInstance().notify(htim);
 800998a:	f7f8 fa73 	bl	8001e74 <_ZN31TimPeriodElapsedCallbackHandler11getInstanceEv>
 800998e:	4603      	mov	r3, r0
 8009990:	6879      	ldr	r1, [r7, #4]
 8009992:	4618      	mov	r0, r3
 8009994:	f7ff ffd8 	bl	8009948 <_ZN31TimPeriodElapsedCallbackHandler6notifyEP17TIM_HandleTypeDef>
}
 8009998:	bf00      	nop
 800999a:	3708      	adds	r7, #8
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_>:
    function<_Res(_ArgTypes...)>::
 80099a0:	b5b0      	push	{r4, r5, r7, lr}
 80099a2:	b082      	sub	sp, #8
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
      if (_M_empty())
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7f7 fb32 	bl	8001016 <_ZNKSt14_Function_base8_M_emptyEv>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d001      	beq.n	80099bc <_ZNKSt8functionIFvP17TIM_HandleTypeDefEEclES1_+0x1c>
	__throw_bad_function_call();
 80099b8:	f005 fb7f 	bl	800f0ba <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	68dc      	ldr	r4, [r3, #12]
 80099c0:	687d      	ldr	r5, [r7, #4]
 80099c2:	463b      	mov	r3, r7
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7f8 faa8 	bl	8001f1a <_ZSt7forwardIP17TIM_HandleTypeDefEOT_RNSt16remove_referenceIS2_E4typeE>
 80099ca:	4603      	mov	r3, r0
 80099cc:	4619      	mov	r1, r3
 80099ce:	4628      	mov	r0, r5
 80099d0:	47a0      	blx	r4
 80099d2:	bf00      	nop
    }
 80099d4:	3708      	adds	r7, #8
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bdb0      	pop	{r4, r5, r7, pc}

080099da <_ZL9_out_nullcPvjj>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80099da:	b480      	push	{r7}
 80099dc:	b085      	sub	sp, #20
 80099de:	af00      	add	r7, sp, #0
 80099e0:	60b9      	str	r1, [r7, #8]
 80099e2:	607a      	str	r2, [r7, #4]
 80099e4:	603b      	str	r3, [r7, #0]
 80099e6:	4603      	mov	r3, r0
 80099e8:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80099ea:	bf00      	nop
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <_ZL9_out_charcPvjj>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 80099f6:	b580      	push	{r7, lr}
 80099f8:	b084      	sub	sp, #16
 80099fa:	af00      	add	r7, sp, #0
 80099fc:	60b9      	str	r1, [r7, #8]
 80099fe:	607a      	str	r2, [r7, #4]
 8009a00:	603b      	str	r3, [r7, #0]
 8009a02:	4603      	mov	r3, r0
 8009a04:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 8009a06:	7bfb      	ldrb	r3, [r7, #15]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d003      	beq.n	8009a14 <_ZL9_out_charcPvjj+0x1e>
    _putchar(character);
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f001 fc71 	bl	800b2f6 <_putchar>
  }
}
 8009a14:	bf00      	nop
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <_ZL10_strnlen_sPKcj>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	60fb      	str	r3, [r7, #12]
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	781b      	ldrb	r3, [r3, #0]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d006      	beq.n	8009a40 <_ZL10_strnlen_sPKcj+0x24>
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	1e5a      	subs	r2, r3, #1
 8009a36:	603a      	str	r2, [r7, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d001      	beq.n	8009a40 <_ZL10_strnlen_sPKcj+0x24>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e000      	b.n	8009a42 <_ZL10_strnlen_sPKcj+0x26>
 8009a40:	2300      	movs	r3, #0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d003      	beq.n	8009a4e <_ZL10_strnlen_sPKcj+0x32>
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	60fb      	str	r3, [r7, #12]
 8009a4c:	e7ed      	b.n	8009a2a <_ZL10_strnlen_sPKcj+0xe>
  return (unsigned int)(s - str);
 8009a4e:	68fa      	ldr	r2, [r7, #12]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	1ad3      	subs	r3, r2, r3
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3714      	adds	r7, #20
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <_ZL9_is_digitc>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	4603      	mov	r3, r0
 8009a68:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8009a6a:	79fb      	ldrb	r3, [r7, #7]
 8009a6c:	2b2f      	cmp	r3, #47	; 0x2f
 8009a6e:	d904      	bls.n	8009a7a <_ZL9_is_digitc+0x1a>
 8009a70:	79fb      	ldrb	r3, [r7, #7]
 8009a72:	2b39      	cmp	r3, #57	; 0x39
 8009a74:	d801      	bhi.n	8009a7a <_ZL9_is_digitc+0x1a>
 8009a76:	2301      	movs	r3, #1
 8009a78:	e000      	b.n	8009a7c <_ZL9_is_digitc+0x1c>
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <_ZL5_atoiPPKc>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b084      	sub	sp, #16
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8009a90:	2300      	movs	r3, #0
 8009a92:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7ff ffe0 	bl	8009a60 <_ZL9_is_digitc>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00f      	beq.n	8009ac6 <_ZL5_atoiPPKc+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8009aa6:	68fa      	ldr	r2, [r7, #12]
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	4413      	add	r3, r2
 8009aae:	005b      	lsls	r3, r3, #1
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	1c59      	adds	r1, r3, #1
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	6011      	str	r1, [r2, #0]
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	4403      	add	r3, r0
 8009ac0:	3b30      	subs	r3, #48	; 0x30
 8009ac2:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8009ac4:	e7e6      	b.n	8009a94 <_ZL5_atoiPPKc+0xc>
  }
  return i;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
}
 8009ac8:	4618      	mov	r0, r3
 8009aca:	3710      	adds	r7, #16
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8009ad0:	b590      	push	{r4, r7, lr}
 8009ad2:	b087      	sub	sp, #28
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
 8009adc:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8009ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ae4:	f003 0302 	and.w	r3, r3, #2
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d116      	bne.n	8009b1a <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
 8009aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009aee:	f003 0301 	and.w	r3, r3, #1
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d111      	bne.n	8009b1a <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
    for (size_t i = len; i < width; i++) {
 8009af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af8:	617b      	str	r3, [r7, #20]
 8009afa:	697a      	ldr	r2, [r7, #20]
 8009afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afe:	429a      	cmp	r2, r3
 8009b00:	d20b      	bcs.n	8009b1a <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
      out(' ', buffer, idx++, maxlen);
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	1c53      	adds	r3, r2, #1
 8009b06:	607b      	str	r3, [r7, #4]
 8009b08:	68fc      	ldr	r4, [r7, #12]
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	68b9      	ldr	r1, [r7, #8]
 8009b0e:	2020      	movs	r0, #32
 8009b10:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	3301      	adds	r3, #1
 8009b16:	617b      	str	r3, [r7, #20]
 8009b18:	e7ef      	b.n	8009afa <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x2a>
    }
  }

  // reverse string
  while (len) {
 8009b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d00e      	beq.n	8009b3e <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x6e>
    out(buf[--len], buffer, idx++, maxlen);
 8009b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b22:	3b01      	subs	r3, #1
 8009b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b2a:	4413      	add	r3, r2
 8009b2c:	7818      	ldrb	r0, [r3, #0]
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	1c53      	adds	r3, r2, #1
 8009b32:	607b      	str	r3, [r7, #4]
 8009b34:	68fc      	ldr	r4, [r7, #12]
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	68b9      	ldr	r1, [r7, #8]
 8009b3a:	47a0      	blx	r4
  while (len) {
 8009b3c:	e7ed      	b.n	8009b1a <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x4a>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8009b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b40:	f003 0302 	and.w	r3, r3, #2
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00e      	beq.n	8009b66 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
    while (idx - start_idx < width) {
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d908      	bls.n	8009b66 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x96>
      out(' ', buffer, idx++, maxlen);
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	1c53      	adds	r3, r2, #1
 8009b58:	607b      	str	r3, [r7, #4]
 8009b5a:	68fc      	ldr	r4, [r7, #12]
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	68b9      	ldr	r1, [r7, #8]
 8009b60:	2020      	movs	r0, #32
 8009b62:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8009b64:	e7f0      	b.n	8009b48 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj+0x78>
    }
  }

  return idx;
 8009b66:	687b      	ldr	r3, [r7, #4]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	371c      	adds	r7, #28
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd90      	pop	{r4, r7, pc}

08009b70 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b088      	sub	sp, #32
 8009b74:	af04      	add	r7, sp, #16
 8009b76:	60f8      	str	r0, [r7, #12]
 8009b78:	60b9      	str	r1, [r7, #8]
 8009b7a:	607a      	str	r2, [r7, #4]
 8009b7c:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8009b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b80:	f003 0302 	and.w	r3, r3, #2
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d136      	bne.n	8009bf6 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8009b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d010      	beq.n	8009bb0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 8009b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b90:	f003 0301 	and.w	r3, r3, #1
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d00b      	beq.n	8009bb0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
 8009b98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d104      	bne.n	8009baa <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x3a>
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba2:	f003 030c 	and.w	r3, r3, #12
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d002      	beq.n	8009bb0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
      width--;
 8009baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bac:	3b01      	subs	r3, #1
 8009bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009bb0:	69fa      	ldr	r2, [r7, #28]
 8009bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb4:	429a      	cmp	r2, r3
 8009bb6:	d20a      	bcs.n	8009bce <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	2b1f      	cmp	r3, #31
 8009bbc:	d807      	bhi.n	8009bce <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
      buf[len++] = '0';
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	1c5a      	adds	r2, r3, #1
 8009bc2:	61fa      	str	r2, [r7, #28]
 8009bc4:	69ba      	ldr	r2, [r7, #24]
 8009bc6:	4413      	add	r3, r2
 8009bc8:	2230      	movs	r2, #48	; 0x30
 8009bca:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009bcc:	e7f0      	b.n	8009bb0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x40>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bd0:	f003 0301 	and.w	r3, r3, #1
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d00e      	beq.n	8009bf6 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 8009bd8:	69fa      	ldr	r2, [r7, #28]
 8009bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bdc:	429a      	cmp	r2, r3
 8009bde:	d20a      	bcs.n	8009bf6 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
 8009be0:	69fb      	ldr	r3, [r7, #28]
 8009be2:	2b1f      	cmp	r3, #31
 8009be4:	d807      	bhi.n	8009bf6 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x86>
      buf[len++] = '0';
 8009be6:	69fb      	ldr	r3, [r7, #28]
 8009be8:	1c5a      	adds	r2, r3, #1
 8009bea:	61fa      	str	r2, [r7, #28]
 8009bec:	69ba      	ldr	r2, [r7, #24]
 8009bee:	4413      	add	r3, r2
 8009bf0:	2230      	movs	r2, #48	; 0x30
 8009bf2:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009bf4:	e7eb      	b.n	8009bce <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x5e>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8009bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf8:	f003 0310 	and.w	r3, r3, #16
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d058      	beq.n	8009cb2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8009c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d116      	bne.n	8009c38 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d013      	beq.n	8009c38 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 8009c10:	69fa      	ldr	r2, [r7, #28]
 8009c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d003      	beq.n	8009c20 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xb0>
 8009c18:	69fa      	ldr	r2, [r7, #28]
 8009c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d10b      	bne.n	8009c38 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
      len--;
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	3b01      	subs	r3, #1
 8009c24:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8009c26:	69fb      	ldr	r3, [r7, #28]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d005      	beq.n	8009c38 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
 8009c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2e:	2b10      	cmp	r3, #16
 8009c30:	d102      	bne.n	8009c38 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xc8>
        len--;
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	3b01      	subs	r3, #1
 8009c36:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	2b10      	cmp	r3, #16
 8009c3c:	d10f      	bne.n	8009c5e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c40:	f003 0320 	and.w	r3, r3, #32
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d10a      	bne.n	8009c5e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
 8009c48:	69fb      	ldr	r3, [r7, #28]
 8009c4a:	2b1f      	cmp	r3, #31
 8009c4c:	d807      	bhi.n	8009c5e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0xee>
      buf[len++] = 'x';
 8009c4e:	69fb      	ldr	r3, [r7, #28]
 8009c50:	1c5a      	adds	r2, r3, #1
 8009c52:	61fa      	str	r2, [r7, #28]
 8009c54:	69ba      	ldr	r2, [r7, #24]
 8009c56:	4413      	add	r3, r2
 8009c58:	2278      	movs	r2, #120	; 0x78
 8009c5a:	701a      	strb	r2, [r3, #0]
 8009c5c:	e01f      	b.n	8009c9e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c60:	2b10      	cmp	r3, #16
 8009c62:	d10f      	bne.n	8009c84 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 8009c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c66:	f003 0320 	and.w	r3, r3, #32
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d00a      	beq.n	8009c84 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	2b1f      	cmp	r3, #31
 8009c72:	d807      	bhi.n	8009c84 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x114>
      buf[len++] = 'X';
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	1c5a      	adds	r2, r3, #1
 8009c78:	61fa      	str	r2, [r7, #28]
 8009c7a:	69ba      	ldr	r2, [r7, #24]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	2258      	movs	r2, #88	; 0x58
 8009c80:	701a      	strb	r2, [r3, #0]
 8009c82:	e00c      	b.n	8009c9e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8009c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c86:	2b02      	cmp	r3, #2
 8009c88:	d109      	bne.n	8009c9e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
 8009c8a:	69fb      	ldr	r3, [r7, #28]
 8009c8c:	2b1f      	cmp	r3, #31
 8009c8e:	d806      	bhi.n	8009c9e <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x12e>
      buf[len++] = 'b';
 8009c90:	69fb      	ldr	r3, [r7, #28]
 8009c92:	1c5a      	adds	r2, r3, #1
 8009c94:	61fa      	str	r2, [r7, #28]
 8009c96:	69ba      	ldr	r2, [r7, #24]
 8009c98:	4413      	add	r3, r2
 8009c9a:	2262      	movs	r2, #98	; 0x62
 8009c9c:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	2b1f      	cmp	r3, #31
 8009ca2:	d806      	bhi.n	8009cb2 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x142>
      buf[len++] = '0';
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	1c5a      	adds	r2, r3, #1
 8009ca8:	61fa      	str	r2, [r7, #28]
 8009caa:	69ba      	ldr	r2, [r7, #24]
 8009cac:	4413      	add	r3, r2
 8009cae:	2230      	movs	r2, #48	; 0x30
 8009cb0:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8009cb2:	69fb      	ldr	r3, [r7, #28]
 8009cb4:	2b1f      	cmp	r3, #31
 8009cb6:	d824      	bhi.n	8009d02 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    if (negative) {
 8009cb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d007      	beq.n	8009cd0 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x160>
      buf[len++] = '-';
 8009cc0:	69fb      	ldr	r3, [r7, #28]
 8009cc2:	1c5a      	adds	r2, r3, #1
 8009cc4:	61fa      	str	r2, [r7, #28]
 8009cc6:	69ba      	ldr	r2, [r7, #24]
 8009cc8:	4413      	add	r3, r2
 8009cca:	222d      	movs	r2, #45	; 0x2d
 8009ccc:	701a      	strb	r2, [r3, #0]
 8009cce:	e018      	b.n	8009d02 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8009cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd2:	f003 0304 	and.w	r3, r3, #4
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d007      	beq.n	8009cea <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	1c5a      	adds	r2, r3, #1
 8009cde:	61fa      	str	r2, [r7, #28]
 8009ce0:	69ba      	ldr	r2, [r7, #24]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	222b      	movs	r2, #43	; 0x2b
 8009ce6:	701a      	strb	r2, [r3, #0]
 8009ce8:	e00b      	b.n	8009d02 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8009cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cec:	f003 0308 	and.w	r3, r3, #8
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d006      	beq.n	8009d02 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj+0x192>
      buf[len++] = ' ';
 8009cf4:	69fb      	ldr	r3, [r7, #28]
 8009cf6:	1c5a      	adds	r2, r3, #1
 8009cf8:	61fa      	str	r2, [r7, #28]
 8009cfa:	69ba      	ldr	r2, [r7, #24]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	2220      	movs	r2, #32
 8009d00:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8009d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d04:	9303      	str	r3, [sp, #12]
 8009d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d08:	9302      	str	r3, [sp, #8]
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	9301      	str	r3, [sp, #4]
 8009d0e:	69bb      	ldr	r3, [r7, #24]
 8009d10:	9300      	str	r3, [sp, #0]
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	68b9      	ldr	r1, [r7, #8]
 8009d18:	68f8      	ldr	r0, [r7, #12]
 8009d1a:	f7ff fed9 	bl	8009ad0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8009d1e:	4603      	mov	r3, r0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3710      	adds	r7, #16
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b096      	sub	sp, #88	; 0x58
 8009d2c:	af08      	add	r7, sp, #32
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
 8009d34:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8009d36:	2300      	movs	r3, #0
 8009d38:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8009d3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d103      	bne.n	8009d48 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x20>
    flags &= ~FLAGS_HASH;
 8009d40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d42:	f023 0310 	bic.w	r3, r3, #16
 8009d46:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8009d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d002      	beq.n	8009d58 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
 8009d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d033      	beq.n	8009dc0 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
      const char digit = (char)(value % base);
 8009d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d5c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d60:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009d62:	fb01 f202 	mul.w	r2, r1, r2
 8009d66:	1a9b      	subs	r3, r3, r2
 8009d68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8009d6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009d70:	2b09      	cmp	r3, #9
 8009d72:	d804      	bhi.n	8009d7e <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x56>
 8009d74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009d78:	3330      	adds	r3, #48	; 0x30
 8009d7a:	b2da      	uxtb	r2, r3
 8009d7c:	e00d      	b.n	8009d9a <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x72>
 8009d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d80:	f003 0320 	and.w	r3, r3, #32
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d001      	beq.n	8009d8c <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x64>
 8009d88:	2241      	movs	r2, #65	; 0x41
 8009d8a:	e000      	b.n	8009d8e <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x66>
 8009d8c:	2261      	movs	r2, #97	; 0x61
 8009d8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009d92:	4413      	add	r3, r2
 8009d94:	b2db      	uxtb	r3, r3
 8009d96:	3b0a      	subs	r3, #10
 8009d98:	b2da      	uxtb	r2, r3
 8009d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d9c:	1c59      	adds	r1, r3, #1
 8009d9e:	6379      	str	r1, [r7, #52]	; 0x34
 8009da0:	3338      	adds	r3, #56	; 0x38
 8009da2:	443b      	add	r3, r7
 8009da4:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8009da8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8009db0:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8009db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d003      	beq.n	8009dc0 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
 8009db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dba:	2b1f      	cmp	r3, #31
 8009dbc:	d800      	bhi.n	8009dc0 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x98>
    do {
 8009dbe:	e7cb      	b.n	8009d58 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8009dc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dc2:	9306      	str	r3, [sp, #24]
 8009dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dc6:	9305      	str	r3, [sp, #20]
 8009dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dca:	9304      	str	r3, [sp, #16]
 8009dcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dce:	9303      	str	r3, [sp, #12]
 8009dd0:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8009dd4:	9302      	str	r3, [sp, #8]
 8009dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dd8:	9301      	str	r3, [sp, #4]
 8009dda:	f107 0310 	add.w	r3, r7, #16
 8009dde:	9300      	str	r3, [sp, #0]
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	68b9      	ldr	r1, [r7, #8]
 8009de6:	68f8      	ldr	r0, [r7, #12]
 8009de8:	f7ff fec2 	bl	8009b70 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 8009dec:	4603      	mov	r3, r0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3738      	adds	r7, #56	; 0x38
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b096      	sub	sp, #88	; 0x58
 8009dfa:	af08      	add	r7, sp, #32
 8009dfc:	60f8      	str	r0, [r7, #12]
 8009dfe:	60b9      	str	r1, [r7, #8]
 8009e00:	607a      	str	r2, [r7, #4]
 8009e02:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8009e04:	2300      	movs	r3, #0
 8009e06:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8009e08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009e0c:	4313      	orrs	r3, r2
 8009e0e:	d103      	bne.n	8009e18 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x22>
    flags &= ~FLAGS_HASH;
 8009e10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e12:	f023 0310 	bic.w	r3, r3, #16
 8009e16:	663b      	str	r3, [r7, #96]	; 0x60
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8009e18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d003      	beq.n	8009e2a <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
 8009e22:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009e26:	4313      	orrs	r3, r2
 8009e28:	d038      	beq.n	8009e9c <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
      const char digit = (char)(value % base);
 8009e2a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009e2e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009e32:	f7f6 ff29 	bl	8000c88 <__aeabi_uldivmod>
 8009e36:	4613      	mov	r3, r2
 8009e38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8009e3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e40:	2b09      	cmp	r3, #9
 8009e42:	d804      	bhi.n	8009e4e <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x58>
 8009e44:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e48:	3330      	adds	r3, #48	; 0x30
 8009e4a:	b2da      	uxtb	r2, r3
 8009e4c:	e00d      	b.n	8009e6a <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x74>
 8009e4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009e50:	f003 0320 	and.w	r3, r3, #32
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d001      	beq.n	8009e5c <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x66>
 8009e58:	2241      	movs	r2, #65	; 0x41
 8009e5a:	e000      	b.n	8009e5e <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x68>
 8009e5c:	2261      	movs	r2, #97	; 0x61
 8009e5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e62:	4413      	add	r3, r2
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	3b0a      	subs	r3, #10
 8009e68:	b2da      	uxtb	r2, r3
 8009e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e6c:	1c59      	adds	r1, r3, #1
 8009e6e:	6379      	str	r1, [r7, #52]	; 0x34
 8009e70:	3338      	adds	r3, #56	; 0x38
 8009e72:	443b      	add	r3, r7
 8009e74:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8009e78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009e7c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8009e80:	f7f6 ff02 	bl	8000c88 <__aeabi_uldivmod>
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8009e8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009e90:	4313      	orrs	r3, r2
 8009e92:	d003      	beq.n	8009e9c <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
 8009e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e96:	2b1f      	cmp	r3, #31
 8009e98:	d800      	bhi.n	8009e9c <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0xa6>
    do {
 8009e9a:	e7c6      	b.n	8009e2a <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8009e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e9e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009ea0:	9206      	str	r2, [sp, #24]
 8009ea2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009ea4:	9205      	str	r2, [sp, #20]
 8009ea6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ea8:	9204      	str	r2, [sp, #16]
 8009eaa:	9303      	str	r3, [sp, #12]
 8009eac:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8009eb0:	9302      	str	r3, [sp, #8]
 8009eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eb4:	9301      	str	r3, [sp, #4]
 8009eb6:	f107 0310 	add.w	r3, r7, #16
 8009eba:	9300      	str	r3, [sp, #0]
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	68b9      	ldr	r1, [r7, #8]
 8009ec2:	68f8      	ldr	r0, [r7, #12]
 8009ec4:	f7ff fe54 	bl	8009b70 <_ZL12_ntoa_formatPFvcPvjjEPcjjS2_jbjjjj>
 8009ec8:	4603      	mov	r3, r0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3738      	adds	r7, #56	; 0x38
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}
 8009ed2:	0000      	movs	r0, r0
 8009ed4:	0000      	movs	r0, r0
	...

08009ed8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8009ed8:	b590      	push	{r4, r7, lr}
 8009eda:	b09d      	sub	sp, #116	; 0x74
 8009edc:	af04      	add	r7, sp, #16
 8009ede:	6178      	str	r0, [r7, #20]
 8009ee0:	6139      	str	r1, [r7, #16]
 8009ee2:	60fa      	str	r2, [r7, #12]
 8009ee4:	60bb      	str	r3, [r7, #8]
 8009ee6:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8009eea:	2300      	movs	r3, #0
 8009eec:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8009eee:	f04f 0200 	mov.w	r2, #0
 8009ef2:	f04f 0300 	mov.w	r3, #0
 8009ef6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8009efa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009efe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f02:	f7f6 fde1 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f06:	4603      	mov	r3, r0
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d10f      	bne.n	8009f2c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8009f0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f0e:	9303      	str	r3, [sp, #12]
 8009f10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f12:	9302      	str	r3, [sp, #8]
 8009f14:	2303      	movs	r3, #3
 8009f16:	9301      	str	r3, [sp, #4]
 8009f18:	4ba7      	ldr	r3, [pc, #668]	; (800a1b8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e0>)
 8009f1a:	9300      	str	r3, [sp, #0]
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	6939      	ldr	r1, [r7, #16]
 8009f22:	6978      	ldr	r0, [r7, #20]
 8009f24:	f7ff fdd4 	bl	8009ad0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	e230      	b.n	800a38e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value < -DBL_MAX)
 8009f2c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f30:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8009f34:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f38:	f7f6 fdd0 	bl	8000adc <__aeabi_dcmplt>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00f      	beq.n	8009f62 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8009f42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f44:	9303      	str	r3, [sp, #12]
 8009f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f48:	9302      	str	r3, [sp, #8]
 8009f4a:	2304      	movs	r3, #4
 8009f4c:	9301      	str	r3, [sp, #4]
 8009f4e:	4b9b      	ldr	r3, [pc, #620]	; (800a1bc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e4>)
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	6939      	ldr	r1, [r7, #16]
 8009f58:	6978      	ldr	r0, [r7, #20]
 8009f5a:	f7ff fdb9 	bl	8009ad0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8009f5e:	4603      	mov	r3, r0
 8009f60:	e215      	b.n	800a38e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
  if (value > DBL_MAX)
 8009f62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f66:	4b96      	ldr	r3, [pc, #600]	; (800a1c0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2e8>)
 8009f68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f6c:	f7f6 fdd4 	bl	8000b18 <__aeabi_dcmpgt>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d01d      	beq.n	8009fb2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8009f76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f78:	f003 0304 	and.w	r3, r3, #4
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d001      	beq.n	8009f84 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xac>
 8009f80:	4b90      	ldr	r3, [pc, #576]	; (800a1c4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ec>)
 8009f82:	e000      	b.n	8009f86 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xae>
 8009f84:	4b90      	ldr	r3, [pc, #576]	; (800a1c8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f0>)
 8009f86:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009f88:	f002 0204 	and.w	r2, r2, #4
 8009f8c:	2a00      	cmp	r2, #0
 8009f8e:	d001      	beq.n	8009f94 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbc>
 8009f90:	2204      	movs	r2, #4
 8009f92:	e000      	b.n	8009f96 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0xbe>
 8009f94:	2203      	movs	r2, #3
 8009f96:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8009f98:	9103      	str	r1, [sp, #12]
 8009f9a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8009f9c:	9102      	str	r1, [sp, #8]
 8009f9e:	9201      	str	r2, [sp, #4]
 8009fa0:	9300      	str	r3, [sp, #0]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	6939      	ldr	r1, [r7, #16]
 8009fa8:	6978      	ldr	r0, [r7, #20]
 8009faa:	f7ff fd91 	bl	8009ad0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	e1ed      	b.n	800a38e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8009fb2:	a37d      	add	r3, pc, #500	; (adr r3, 800a1a8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d0>)
 8009fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fbc:	f7f6 fdac 	bl	8000b18 <__aeabi_dcmpgt>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d109      	bne.n	8009fda <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x102>
 8009fc6:	a37a      	add	r3, pc, #488	; (adr r3, 800a1b0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2d8>)
 8009fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fcc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fd0:	f7f6 fd84 	bl	8000adc <__aeabi_dcmplt>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d00f      	beq.n	8009ffa <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8009fda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fdc:	9302      	str	r3, [sp, #8]
 8009fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009fe0:	9301      	str	r3, [sp, #4]
 8009fe2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009fe4:	9300      	str	r3, [sp, #0]
 8009fe6:	ed97 0b00 	vldr	d0, [r7]
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	68fa      	ldr	r2, [r7, #12]
 8009fee:	6939      	ldr	r1, [r7, #16]
 8009ff0:	6978      	ldr	r0, [r7, #20]
 8009ff2:	f000 f9d5 	bl	800a3a0 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	e1c9      	b.n	800a38e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4b6>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 800a000:	f04f 0200 	mov.w	r2, #0
 800a004:	f04f 0300 	mov.w	r3, #0
 800a008:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a00c:	f7f6 fd66 	bl	8000adc <__aeabi_dcmplt>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00e      	beq.n	800a034 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x15c>
    negative = true;
 800a016:	2301      	movs	r3, #1
 800a018:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 800a01c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a020:	f04f 0000 	mov.w	r0, #0
 800a024:	f04f 0100 	mov.w	r1, #0
 800a028:	f7f6 f92e 	bl	8000288 <__aeabi_dsub>
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	e9c7 2300 	strd	r2, r3, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 800a034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d101      	bne.n	800a042 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800a03e:	2306      	movs	r3, #6
 800a040:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800a042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a044:	2b1f      	cmp	r3, #31
 800a046:	d80e      	bhi.n	800a066 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
 800a048:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a04a:	2b09      	cmp	r3, #9
 800a04c:	d90b      	bls.n	800a066 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x18e>
    buf[len++] = '0';
 800a04e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a050:	1c5a      	adds	r2, r3, #1
 800a052:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a054:	3360      	adds	r3, #96	; 0x60
 800a056:	443b      	add	r3, r7
 800a058:	2230      	movs	r2, #48	; 0x30
 800a05a:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 800a05e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a060:	3b01      	subs	r3, #1
 800a062:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800a064:	e7ed      	b.n	800a042 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x16a>
  }

  int whole = (int)value;
 800a066:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a06a:	f7f6 fd75 	bl	8000b58 <__aeabi_d2iz>
 800a06e:	4603      	mov	r3, r0
 800a070:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 800a072:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a074:	f7f6 fa56 	bl	8000524 <__aeabi_i2d>
 800a078:	4602      	mov	r2, r0
 800a07a:	460b      	mov	r3, r1
 800a07c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a080:	f7f6 f902 	bl	8000288 <__aeabi_dsub>
 800a084:	4602      	mov	r2, r0
 800a086:	460b      	mov	r3, r1
 800a088:	4610      	mov	r0, r2
 800a08a:	4619      	mov	r1, r3
 800a08c:	4a4f      	ldr	r2, [pc, #316]	; (800a1cc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 800a08e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a090:	00db      	lsls	r3, r3, #3
 800a092:	4413      	add	r3, r2
 800a094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a098:	f7f6 faae 	bl	80005f8 <__aeabi_dmul>
 800a09c:	4602      	mov	r2, r0
 800a09e:	460b      	mov	r3, r1
 800a0a0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800a0a4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a0a8:	f7f6 fd7e 	bl	8000ba8 <__aeabi_d2uiz>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800a0b0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a0b2:	f7f6 fa27 	bl	8000504 <__aeabi_ui2d>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a0be:	f7f6 f8e3 	bl	8000288 <__aeabi_dsub>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40

  if (diff > 0.5) {
 800a0ca:	f04f 0200 	mov.w	r2, #0
 800a0ce:	4b40      	ldr	r3, [pc, #256]	; (800a1d0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800a0d0:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a0d4:	f7f6 fd20 	bl	8000b18 <__aeabi_dcmpgt>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d016      	beq.n	800a10c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x234>
    ++frac;
 800a0de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 800a0e4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800a0e6:	f7f6 fa0d 	bl	8000504 <__aeabi_ui2d>
 800a0ea:	4a38      	ldr	r2, [pc, #224]	; (800a1cc <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f4>)
 800a0ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0ee:	00db      	lsls	r3, r3, #3
 800a0f0:	4413      	add	r3, r2
 800a0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f6:	f7f6 fd05 	bl	8000b04 <__aeabi_dcmpge>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d01a      	beq.n	800a136 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
      frac = 0;
 800a100:	2300      	movs	r3, #0
 800a102:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 800a104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a106:	3301      	adds	r3, #1
 800a108:	657b      	str	r3, [r7, #84]	; 0x54
 800a10a:	e014      	b.n	800a136 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    }
  }
  else if (diff < 0.5) {
 800a10c:	f04f 0200 	mov.w	r2, #0
 800a110:	4b2f      	ldr	r3, [pc, #188]	; (800a1d0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800a112:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a116:	f7f6 fce1 	bl	8000adc <__aeabi_dcmplt>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d10a      	bne.n	800a136 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 800a120:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a122:	2b00      	cmp	r3, #0
 800a124:	d004      	beq.n	800a130 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x258>
 800a126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a128:	f003 0301 	and.w	r3, r3, #1
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d002      	beq.n	800a136 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x25e>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 800a130:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a132:	3301      	adds	r3, #1
 800a134:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 800a136:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d14b      	bne.n	800a1d4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2fc>
    diff = value - (double)whole;
 800a13c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a13e:	f7f6 f9f1 	bl	8000524 <__aeabi_i2d>
 800a142:	4602      	mov	r2, r0
 800a144:	460b      	mov	r3, r1
 800a146:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a14a:	f7f6 f89d 	bl	8000288 <__aeabi_dsub>
 800a14e:	4602      	mov	r2, r0
 800a150:	460b      	mov	r3, r1
 800a152:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800a156:	2301      	movs	r3, #1
 800a158:	461c      	mov	r4, r3
 800a15a:	f04f 0200 	mov.w	r2, #0
 800a15e:	4b1c      	ldr	r3, [pc, #112]	; (800a1d0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800a160:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a164:	f7f6 fcba 	bl	8000adc <__aeabi_dcmplt>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d101      	bne.n	800a172 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x29a>
 800a16e:	2300      	movs	r3, #0
 800a170:	461c      	mov	r4, r3
 800a172:	b2e3      	uxtb	r3, r4
 800a174:	f083 0301 	eor.w	r3, r3, #1
 800a178:	b2db      	uxtb	r3, r3
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d109      	bne.n	800a192 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2ba>
 800a17e:	f04f 0200 	mov.w	r2, #0
 800a182:	4b13      	ldr	r3, [pc, #76]	; (800a1d0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x2f8>)
 800a184:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a188:	f7f6 fcc6 	bl	8000b18 <__aeabi_dcmpgt>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d06d      	beq.n	800a26e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 800a192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a194:	f003 0301 	and.w	r3, r3, #1
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d068      	beq.n	800a26e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 800a19c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a19e:	3301      	adds	r3, #1
 800a1a0:	657b      	str	r3, [r7, #84]	; 0x54
 800a1a2:	e064      	b.n	800a26e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
 800a1a4:	f3af 8000 	nop.w
 800a1a8:	00000000 	.word	0x00000000
 800a1ac:	41cdcd65 	.word	0x41cdcd65
 800a1b0:	00000000 	.word	0x00000000
 800a1b4:	c1cdcd65 	.word	0xc1cdcd65
 800a1b8:	08011e38 	.word	0x08011e38
 800a1bc:	08011e3c 	.word	0x08011e3c
 800a1c0:	7fefffff 	.word	0x7fefffff
 800a1c4:	08011e44 	.word	0x08011e44
 800a1c8:	08011e4c 	.word	0x08011e4c
 800a1cc:	08011fc0 	.word	0x08011fc0
 800a1d0:	3fe00000 	.word	0x3fe00000
    }
  }
  else {
    unsigned int count = prec;
 800a1d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a1d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800a1d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1da:	2b1f      	cmp	r3, #31
 800a1dc:	d826      	bhi.n	800a22c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
      --count;
 800a1de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1e0:	3b01      	subs	r3, #1
 800a1e2:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800a1e4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a1e6:	4b6c      	ldr	r3, [pc, #432]	; (800a398 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 800a1e8:	fba3 2301 	umull	r2, r3, r3, r1
 800a1ec:	08da      	lsrs	r2, r3, #3
 800a1ee:	4613      	mov	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	4413      	add	r3, r2
 800a1f4:	005b      	lsls	r3, r3, #1
 800a1f6:	1aca      	subs	r2, r1, r3
 800a1f8:	b2d2      	uxtb	r2, r2
 800a1fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a1fc:	1c59      	adds	r1, r3, #1
 800a1fe:	65f9      	str	r1, [r7, #92]	; 0x5c
 800a200:	3230      	adds	r2, #48	; 0x30
 800a202:	b2d2      	uxtb	r2, r2
 800a204:	3360      	adds	r3, #96	; 0x60
 800a206:	443b      	add	r3, r7
 800a208:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 800a20c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a20e:	4a62      	ldr	r2, [pc, #392]	; (800a398 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c0>)
 800a210:	fba2 2303 	umull	r2, r3, r2, r3
 800a214:	08db      	lsrs	r3, r3, #3
 800a216:	653b      	str	r3, [r7, #80]	; 0x50
 800a218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	bf0c      	ite	eq
 800a21e:	2301      	moveq	r3, #1
 800a220:	2300      	movne	r3, #0
 800a222:	b2db      	uxtb	r3, r3
 800a224:	2b00      	cmp	r3, #0
 800a226:	d100      	bne.n	800a22a <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x352>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800a228:	e7d6      	b.n	800a1d8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x300>
        break;
 800a22a:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800a22c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a22e:	2b1f      	cmp	r3, #31
 800a230:	d806      	bhi.n	800a240 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 800a232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a234:	1e5a      	subs	r2, r3, #1
 800a236:	64fa      	str	r2, [r7, #76]	; 0x4c
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d001      	beq.n	800a240 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x368>
 800a23c:	2301      	movs	r3, #1
 800a23e:	e000      	b.n	800a242 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x36a>
 800a240:	2300      	movs	r3, #0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d008      	beq.n	800a258 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x380>
      buf[len++] = '0';
 800a246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a248:	1c5a      	adds	r2, r3, #1
 800a24a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a24c:	3360      	adds	r3, #96	; 0x60
 800a24e:	443b      	add	r3, r7
 800a250:	2230      	movs	r2, #48	; 0x30
 800a252:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800a256:	e7e9      	b.n	800a22c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x354>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800a258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a25a:	2b1f      	cmp	r3, #31
 800a25c:	d807      	bhi.n	800a26e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      // add decimal
      buf[len++] = '.';
 800a25e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a260:	1c5a      	adds	r2, r3, #1
 800a262:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a264:	3360      	adds	r3, #96	; 0x60
 800a266:	443b      	add	r3, r7
 800a268:	222e      	movs	r2, #46	; 0x2e
 800a26a:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800a26e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a270:	2b1f      	cmp	r3, #31
 800a272:	d827      	bhi.n	800a2c4 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ec>
    buf[len++] = (char)(48 + (whole % 10));
 800a274:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a276:	4b49      	ldr	r3, [pc, #292]	; (800a39c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 800a278:	fb83 1302 	smull	r1, r3, r3, r2
 800a27c:	1099      	asrs	r1, r3, #2
 800a27e:	17d3      	asrs	r3, r2, #31
 800a280:	1ac9      	subs	r1, r1, r3
 800a282:	460b      	mov	r3, r1
 800a284:	009b      	lsls	r3, r3, #2
 800a286:	440b      	add	r3, r1
 800a288:	005b      	lsls	r3, r3, #1
 800a28a:	1ad1      	subs	r1, r2, r3
 800a28c:	b2ca      	uxtb	r2, r1
 800a28e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a290:	1c59      	adds	r1, r3, #1
 800a292:	65f9      	str	r1, [r7, #92]	; 0x5c
 800a294:	3230      	adds	r2, #48	; 0x30
 800a296:	b2d2      	uxtb	r2, r2
 800a298:	3360      	adds	r3, #96	; 0x60
 800a29a:	443b      	add	r3, r7
 800a29c:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800a2a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2a2:	4a3e      	ldr	r2, [pc, #248]	; (800a39c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x4c4>)
 800a2a4:	fb82 1203 	smull	r1, r2, r2, r3
 800a2a8:	1092      	asrs	r2, r2, #2
 800a2aa:	17db      	asrs	r3, r3, #31
 800a2ac:	1ad3      	subs	r3, r2, r3
 800a2ae:	657b      	str	r3, [r7, #84]	; 0x54
 800a2b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	bf0c      	ite	eq
 800a2b6:	2301      	moveq	r3, #1
 800a2b8:	2300      	movne	r3, #0
 800a2ba:	b2db      	uxtb	r3, r3
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d100      	bne.n	800a2c2 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x3ea>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800a2c0:	e7d5      	b.n	800a26e <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x396>
      break;
 800a2c2:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800a2c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2c6:	f003 0302 	and.w	r3, r3, #2
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d123      	bne.n	800a316 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 800a2ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2d0:	f003 0301 	and.w	r3, r3, #1
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d01e      	beq.n	800a316 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800a2d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d00b      	beq.n	800a2f6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
 800a2de:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d104      	bne.n	800a2f0 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x418>
 800a2e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2e8:	f003 030c 	and.w	r3, r3, #12
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d002      	beq.n	800a2f6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
      width--;
 800a2f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800a2f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a2f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d20b      	bcs.n	800a316 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
 800a2fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a300:	2b1f      	cmp	r3, #31
 800a302:	d808      	bhi.n	800a316 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x43e>
      buf[len++] = '0';
 800a304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a306:	1c5a      	adds	r2, r3, #1
 800a308:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a30a:	3360      	adds	r3, #96	; 0x60
 800a30c:	443b      	add	r3, r7
 800a30e:	2230      	movs	r2, #48	; 0x30
 800a310:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800a314:	e7ef      	b.n	800a2f6 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x41e>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 800a316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a318:	2b1f      	cmp	r3, #31
 800a31a:	d827      	bhi.n	800a36c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    if (negative) {
 800a31c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a320:	2b00      	cmp	r3, #0
 800a322:	d008      	beq.n	800a336 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x45e>
      buf[len++] = '-';
 800a324:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a326:	1c5a      	adds	r2, r3, #1
 800a328:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a32a:	3360      	adds	r3, #96	; 0x60
 800a32c:	443b      	add	r3, r7
 800a32e:	222d      	movs	r2, #45	; 0x2d
 800a330:	f803 2c48 	strb.w	r2, [r3, #-72]
 800a334:	e01a      	b.n	800a36c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_PLUS) {
 800a336:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a338:	f003 0304 	and.w	r3, r3, #4
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d008      	beq.n	800a352 <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x47a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 800a340:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a342:	1c5a      	adds	r2, r3, #1
 800a344:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a346:	3360      	adds	r3, #96	; 0x60
 800a348:	443b      	add	r3, r7
 800a34a:	222b      	movs	r2, #43	; 0x2b
 800a34c:	f803 2c48 	strb.w	r2, [r3, #-72]
 800a350:	e00c      	b.n	800a36c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
    }
    else if (flags & FLAGS_SPACE) {
 800a352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a354:	f003 0308 	and.w	r3, r3, #8
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d007      	beq.n	800a36c <_ZL5_ftoaPFvcPvjjEPcjjdjjj+0x494>
      buf[len++] = ' ';
 800a35c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a35e:	1c5a      	adds	r2, r3, #1
 800a360:	65fa      	str	r2, [r7, #92]	; 0x5c
 800a362:	3360      	adds	r3, #96	; 0x60
 800a364:	443b      	add	r3, r7
 800a366:	2220      	movs	r2, #32
 800a368:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800a36c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a36e:	9303      	str	r3, [sp, #12]
 800a370:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a372:	9302      	str	r3, [sp, #8]
 800a374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a376:	9301      	str	r3, [sp, #4]
 800a378:	f107 0318 	add.w	r3, r7, #24
 800a37c:	9300      	str	r3, [sp, #0]
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	6939      	ldr	r1, [r7, #16]
 800a384:	6978      	ldr	r0, [r7, #20]
 800a386:	f7ff fba3 	bl	8009ad0 <_ZL8_out_revPFvcPvjjEPcjjPKcjjj>
 800a38a:	4603      	mov	r3, r0
 800a38c:	bf00      	nop
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3764      	adds	r7, #100	; 0x64
 800a392:	46bd      	mov	sp, r7
 800a394:	bd90      	pop	{r4, r7, pc}
 800a396:	bf00      	nop
 800a398:	cccccccd 	.word	0xcccccccd
 800a39c:	66666667 	.word	0x66666667

0800a3a0 <_ZL5_etoaPFvcPvjjEPcjjdjjj>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800a3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a4:	b09f      	sub	sp, #124	; 0x7c
 800a3a6:	af06      	add	r7, sp, #24
 800a3a8:	6278      	str	r0, [r7, #36]	; 0x24
 800a3aa:	6239      	str	r1, [r7, #32]
 800a3ac:	61fa      	str	r2, [r7, #28]
 800a3ae:	61bb      	str	r3, [r7, #24]
 800a3b0:	ed87 0b04 	vstr	d0, [r7, #16]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800a3b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a3b8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a3bc:	f7f6 fb84 	bl	8000ac8 <__aeabi_dcmpeq>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d014      	beq.n	800a3f0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 800a3c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3ca:	4bc1      	ldr	r3, [pc, #772]	; (800a6d0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x330>)
 800a3cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a3d0:	f7f6 fba2 	bl	8000b18 <__aeabi_dcmpgt>
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d10a      	bne.n	800a3f0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x50>
 800a3da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a3de:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800a3e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a3e6:	f7f6 fb79 	bl	8000adc <__aeabi_dcmplt>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d012      	beq.n	800a416 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800a3f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a3f4:	9302      	str	r3, [sp, #8]
 800a3f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a3fa:	9301      	str	r3, [sp, #4]
 800a3fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a400:	9300      	str	r3, [sp, #0]
 800a402:	ed97 0b04 	vldr	d0, [r7, #16]
 800a406:	69bb      	ldr	r3, [r7, #24]
 800a408:	69fa      	ldr	r2, [r7, #28]
 800a40a:	6a39      	ldr	r1, [r7, #32]
 800a40c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a40e:	f7ff fd63 	bl	8009ed8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800a412:	4603      	mov	r3, r0
 800a414:	e23f      	b.n	800a896 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f6>
  }

  // determine the sign
  const bool negative = value < 0;
 800a416:	2301      	movs	r3, #1
 800a418:	461e      	mov	r6, r3
 800a41a:	f04f 0200 	mov.w	r2, #0
 800a41e:	f04f 0300 	mov.w	r3, #0
 800a422:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a426:	f7f6 fb59 	bl	8000adc <__aeabi_dcmplt>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d101      	bne.n	800a434 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x94>
 800a430:	2300      	movs	r3, #0
 800a432:	461e      	mov	r6, r3
 800a434:	f887 6053 	strb.w	r6, [r7, #83]	; 0x53
  if (negative) {
 800a438:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d009      	beq.n	800a454 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xb4>
    value = -value;
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	603b      	str	r3, [r7, #0]
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a44a:	607b      	str	r3, [r7, #4]
 800a44c:	ed97 7b00 	vldr	d7, [r7]
 800a450:	ed87 7b04 	vstr	d7, [r7, #16]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 800a454:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d102      	bne.n	800a466 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0xc6>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800a460:	2306      	movs	r3, #6
 800a462:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800a466:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a46a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 800a46e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a472:	f04f 0200 	mov.w	r2, #0
 800a476:	f04f 0300 	mov.w	r3, #0
 800a47a:	0d0a      	lsrs	r2, r1, #20
 800a47c:	2300      	movs	r3, #0
 800a47e:	4613      	mov	r3, r2
 800a480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a484:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a488:	64fb      	str	r3, [r7, #76]	; 0x4c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800a48a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a48e:	4690      	mov	r8, r2
 800a490:	f3c3 0913 	ubfx	r9, r3, #0, #20
 800a494:	4644      	mov	r4, r8
 800a496:	f049 557f 	orr.w	r5, r9, #1069547520	; 0x3fc00000
 800a49a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a49e:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800a4a2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a4a4:	f7f6 f83e 	bl	8000524 <__aeabi_i2d>
 800a4a8:	a37d      	add	r3, pc, #500	; (adr r3, 800a6a0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x300>)
 800a4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ae:	f7f6 f8a3 	bl	80005f8 <__aeabi_dmul>
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	4610      	mov	r0, r2
 800a4b8:	4619      	mov	r1, r3
 800a4ba:	a37b      	add	r3, pc, #492	; (adr r3, 800a6a8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x308>)
 800a4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c0:	f7f5 fee4 	bl	800028c <__adddf3>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	460b      	mov	r3, r1
 800a4c8:	4614      	mov	r4, r2
 800a4ca:	461d      	mov	r5, r3
 800a4cc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a4d0:	f04f 0200 	mov.w	r2, #0
 800a4d4:	4b7f      	ldr	r3, [pc, #508]	; (800a6d4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x334>)
 800a4d6:	f7f5 fed7 	bl	8000288 <__aeabi_dsub>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	4610      	mov	r0, r2
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	a373      	add	r3, pc, #460	; (adr r3, 800a6b0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x310>)
 800a4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e8:	f7f6 f886 	bl	80005f8 <__aeabi_dmul>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	4620      	mov	r0, r4
 800a4f2:	4629      	mov	r1, r5
 800a4f4:	f7f5 feca 	bl	800028c <__adddf3>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	460b      	mov	r3, r1
 800a4fc:	4610      	mov	r0, r2
 800a4fe:	4619      	mov	r1, r3
 800a500:	f7f6 fb2a 	bl	8000b58 <__aeabi_d2iz>
 800a504:	4603      	mov	r3, r0
 800a506:	65fb      	str	r3, [r7, #92]	; 0x5c
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800a508:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a50a:	f7f6 f80b 	bl	8000524 <__aeabi_i2d>
 800a50e:	a36a      	add	r3, pc, #424	; (adr r3, 800a6b8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x318>)
 800a510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a514:	f7f6 f870 	bl	80005f8 <__aeabi_dmul>
 800a518:	4602      	mov	r2, r0
 800a51a:	460b      	mov	r3, r1
 800a51c:	4610      	mov	r0, r2
 800a51e:	4619      	mov	r1, r3
 800a520:	f04f 0200 	mov.w	r2, #0
 800a524:	4b6c      	ldr	r3, [pc, #432]	; (800a6d8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x338>)
 800a526:	f7f5 feb1 	bl	800028c <__adddf3>
 800a52a:	4602      	mov	r2, r0
 800a52c:	460b      	mov	r3, r1
 800a52e:	4610      	mov	r0, r2
 800a530:	4619      	mov	r1, r3
 800a532:	f7f6 fb11 	bl	8000b58 <__aeabi_d2iz>
 800a536:	4603      	mov	r3, r0
 800a538:	64fb      	str	r3, [r7, #76]	; 0x4c
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 800a53a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a53c:	f7f5 fff2 	bl	8000524 <__aeabi_i2d>
 800a540:	a35f      	add	r3, pc, #380	; (adr r3, 800a6c0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x320>)
 800a542:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a546:	f7f6 f857 	bl	80005f8 <__aeabi_dmul>
 800a54a:	4602      	mov	r2, r0
 800a54c:	460b      	mov	r3, r1
 800a54e:	4614      	mov	r4, r2
 800a550:	461d      	mov	r5, r3
 800a552:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800a554:	f7f5 ffe6 	bl	8000524 <__aeabi_i2d>
 800a558:	a35b      	add	r3, pc, #364	; (adr r3, 800a6c8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x328>)
 800a55a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a55e:	f7f6 f84b 	bl	80005f8 <__aeabi_dmul>
 800a562:	4602      	mov	r2, r0
 800a564:	460b      	mov	r3, r1
 800a566:	4620      	mov	r0, r4
 800a568:	4629      	mov	r1, r5
 800a56a:	f7f5 fe8d 	bl	8000288 <__aeabi_dsub>
 800a56e:	4602      	mov	r2, r0
 800a570:	460b      	mov	r3, r1
 800a572:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  const double z2 = z * z;
 800a576:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a57a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a57e:	f7f6 f83b 	bl	80005f8 <__aeabi_dmul>
 800a582:	4602      	mov	r2, r0
 800a584:	460b      	mov	r3, r1
 800a586:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800a58a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a58c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800a590:	17da      	asrs	r2, r3, #31
 800a592:	469a      	mov	sl, r3
 800a594:	4693      	mov	fp, r2
 800a596:	f04f 0200 	mov.w	r2, #0
 800a59a:	f04f 0300 	mov.w	r3, #0
 800a59e:	ea4f 530a 	mov.w	r3, sl, lsl #20
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800a5a8:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800a5ac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	460b      	mov	r3, r1
 800a5b4:	f7f5 fe6a 	bl	800028c <__adddf3>
 800a5b8:	4602      	mov	r2, r0
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	4690      	mov	r8, r2
 800a5be:	4699      	mov	r9, r3
 800a5c0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a5c4:	f04f 0000 	mov.w	r0, #0
 800a5c8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800a5cc:	f7f5 fe5c 	bl	8000288 <__aeabi_dsub>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	4692      	mov	sl, r2
 800a5d6:	469b      	mov	fp, r3
 800a5d8:	f04f 0200 	mov.w	r2, #0
 800a5dc:	4b3f      	ldr	r3, [pc, #252]	; (800a6dc <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x33c>)
 800a5de:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a5e2:	f7f6 f933 	bl	800084c <__aeabi_ddiv>
 800a5e6:	4602      	mov	r2, r0
 800a5e8:	460b      	mov	r3, r1
 800a5ea:	4610      	mov	r0, r2
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	f04f 0200 	mov.w	r2, #0
 800a5f2:	4b3b      	ldr	r3, [pc, #236]	; (800a6e0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 800a5f4:	f7f5 fe4a 	bl	800028c <__adddf3>
 800a5f8:	4602      	mov	r2, r0
 800a5fa:	460b      	mov	r3, r1
 800a5fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a600:	f7f6 f924 	bl	800084c <__aeabi_ddiv>
 800a604:	4602      	mov	r2, r0
 800a606:	460b      	mov	r3, r1
 800a608:	4610      	mov	r0, r2
 800a60a:	4619      	mov	r1, r3
 800a60c:	f04f 0200 	mov.w	r2, #0
 800a610:	4b34      	ldr	r3, [pc, #208]	; (800a6e4 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x344>)
 800a612:	f7f5 fe3b 	bl	800028c <__adddf3>
 800a616:	4602      	mov	r2, r0
 800a618:	460b      	mov	r3, r1
 800a61a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a61e:	f7f6 f915 	bl	800084c <__aeabi_ddiv>
 800a622:	4602      	mov	r2, r0
 800a624:	460b      	mov	r3, r1
 800a626:	4650      	mov	r0, sl
 800a628:	4659      	mov	r1, fp
 800a62a:	f7f5 fe2f 	bl	800028c <__adddf3>
 800a62e:	4602      	mov	r2, r0
 800a630:	460b      	mov	r3, r1
 800a632:	4640      	mov	r0, r8
 800a634:	4649      	mov	r1, r9
 800a636:	f7f6 f909 	bl	800084c <__aeabi_ddiv>
 800a63a:	4602      	mov	r2, r0
 800a63c:	460b      	mov	r3, r1
 800a63e:	4610      	mov	r0, r2
 800a640:	4619      	mov	r1, r3
 800a642:	f04f 0200 	mov.w	r2, #0
 800a646:	4b28      	ldr	r3, [pc, #160]	; (800a6e8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x348>)
 800a648:	f7f5 fe20 	bl	800028c <__adddf3>
 800a64c:	4602      	mov	r2, r0
 800a64e:	460b      	mov	r3, r1
 800a650:	4620      	mov	r0, r4
 800a652:	4629      	mov	r1, r5
 800a654:	f7f5 ffd0 	bl	80005f8 <__aeabi_dmul>
 800a658:	4602      	mov	r2, r0
 800a65a:	460b      	mov	r3, r1
 800a65c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // correct for rounding errors
  if (value < conv.F) {
 800a660:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a664:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a668:	f7f6 fa38 	bl	8000adc <__aeabi_dcmplt>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00d      	beq.n	800a68e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x2ee>
    expval--;
 800a672:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a674:	3b01      	subs	r3, #1
 800a676:	65fb      	str	r3, [r7, #92]	; 0x5c
    conv.F /= 10;
 800a678:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800a67c:	f04f 0200 	mov.w	r2, #0
 800a680:	4b17      	ldr	r3, [pc, #92]	; (800a6e0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x340>)
 800a682:	f7f6 f8e3 	bl	800084c <__aeabi_ddiv>
 800a686:	4602      	mov	r2, r0
 800a688:	460b      	mov	r3, r1
 800a68a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800a68e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a690:	2b63      	cmp	r3, #99	; 0x63
 800a692:	dc2b      	bgt.n	800a6ec <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 800a694:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a696:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800a69a:	db27      	blt.n	800a6ec <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34c>
 800a69c:	2304      	movs	r3, #4
 800a69e:	e026      	b.n	800a6ee <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x34e>
 800a6a0:	509f79fb 	.word	0x509f79fb
 800a6a4:	3fd34413 	.word	0x3fd34413
 800a6a8:	8b60c8b3 	.word	0x8b60c8b3
 800a6ac:	3fc68a28 	.word	0x3fc68a28
 800a6b0:	636f4361 	.word	0x636f4361
 800a6b4:	3fd287a7 	.word	0x3fd287a7
 800a6b8:	0979a371 	.word	0x0979a371
 800a6bc:	400a934f 	.word	0x400a934f
 800a6c0:	bbb55516 	.word	0xbbb55516
 800a6c4:	40026bb1 	.word	0x40026bb1
 800a6c8:	fefa39ef 	.word	0xfefa39ef
 800a6cc:	3fe62e42 	.word	0x3fe62e42
 800a6d0:	7fefffff 	.word	0x7fefffff
 800a6d4:	3ff80000 	.word	0x3ff80000
 800a6d8:	3fe00000 	.word	0x3fe00000
 800a6dc:	402c0000 	.word	0x402c0000
 800a6e0:	40240000 	.word	0x40240000
 800a6e4:	40180000 	.word	0x40180000
 800a6e8:	3ff00000 	.word	0x3ff00000
 800a6ec:	2305      	movs	r3, #5
 800a6ee:	65bb      	str	r3, [r7, #88]	; 0x58

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 800a6f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a6f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d03d      	beq.n	800a778 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 800a6fc:	a368      	add	r3, pc, #416	; (adr r3, 800a8a0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x500>)
 800a6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a702:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a706:	f7f6 f9fd 	bl	8000b04 <__aeabi_dcmpge>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d024      	beq.n	800a75a <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
 800a710:	a365      	add	r3, pc, #404	; (adr r3, 800a8a8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x508>)
 800a712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a716:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a71a:	f7f6 f9df 	bl	8000adc <__aeabi_dcmplt>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d01a      	beq.n	800a75a <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3ba>
      if ((int)prec > expval) {
 800a724:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a728:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a72a:	429a      	cmp	r2, r3
 800a72c:	da07      	bge.n	800a73e <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x39e>
        prec = (unsigned)((int)prec - expval - 1);
 800a72e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800a732:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a734:	1ad3      	subs	r3, r2, r3
 800a736:	3b01      	subs	r3, #1
 800a738:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a73c:	e002      	b.n	800a744 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3a4>
      }
      else {
        prec = 0;
 800a73e:	2300      	movs	r3, #0
 800a740:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 800a744:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a748:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a74c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      // no characters in exponent
      minwidth = 0U;
 800a750:	2300      	movs	r3, #0
 800a752:	65bb      	str	r3, [r7, #88]	; 0x58
      expval   = 0;
 800a754:	2300      	movs	r3, #0
 800a756:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a758:	e00e      	b.n	800a778 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800a75a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d00a      	beq.n	800a778 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
 800a762:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d004      	beq.n	800a778 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3d8>
        --prec;
 800a76e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a772:	3b01      	subs	r3, #1
 800a774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800a778:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a77c:	657b      	str	r3, [r7, #84]	; 0x54
  if (width > minwidth) {
 800a77e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a784:	429a      	cmp	r2, r3
 800a786:	d904      	bls.n	800a792 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f2>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800a788:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a78a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a78c:	1ad3      	subs	r3, r2, r3
 800a78e:	657b      	str	r3, [r7, #84]	; 0x54
 800a790:	e001      	b.n	800a796 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x3f6>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800a792:	2300      	movs	r3, #0
 800a794:	657b      	str	r3, [r7, #84]	; 0x54
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800a796:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a79a:	f003 0302 	and.w	r3, r3, #2
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d004      	beq.n	800a7ac <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
 800a7a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d001      	beq.n	800a7ac <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x40c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // rescale the float value
  if (expval) {
 800a7ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d009      	beq.n	800a7c6 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x426>
    value /= conv.F;
 800a7b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a7b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800a7ba:	f7f6 f847 	bl	800084c <__aeabi_ddiv>
 800a7be:	4602      	mov	r2, r0
 800a7c0:	460b      	mov	r3, r1
 800a7c2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  }

  // output the floating part
  const size_t start_idx = idx;
 800a7c6:	69fb      	ldr	r3, [r7, #28]
 800a7c8:	637b      	str	r3, [r7, #52]	; 0x34
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800a7ca:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d006      	beq.n	800a7e0 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x440>
 800a7d2:	693b      	ldr	r3, [r7, #16]
 800a7d4:	60bb      	str	r3, [r7, #8]
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800a7dc:	60fb      	str	r3, [r7, #12]
 800a7de:	e003      	b.n	800a7e8 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x448>
 800a7e0:	ed97 7b04 	vldr	d7, [r7, #16]
 800a7e4:	ed87 7b02 	vstr	d7, [r7, #8]
 800a7e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a7ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7f0:	9302      	str	r3, [sp, #8]
 800a7f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7f4:	9301      	str	r3, [sp, #4]
 800a7f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a7fa:	9300      	str	r3, [sp, #0]
 800a7fc:	ed97 0b02 	vldr	d0, [r7, #8]
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	69fa      	ldr	r2, [r7, #28]
 800a804:	6a39      	ldr	r1, [r7, #32]
 800a806:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a808:	f7ff fb66 	bl	8009ed8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800a80c:	61f8      	str	r0, [r7, #28]

  // output the exponent part
  if (minwidth) {
 800a80e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a810:	2b00      	cmp	r3, #0
 800a812:	d03f      	beq.n	800a894 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800a814:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a818:	f003 0320 	and.w	r3, r3, #32
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d001      	beq.n	800a824 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x484>
 800a820:	2045      	movs	r0, #69	; 0x45
 800a822:	e000      	b.n	800a826 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x486>
 800a824:	2065      	movs	r0, #101	; 0x65
 800a826:	69fa      	ldr	r2, [r7, #28]
 800a828:	1c53      	adds	r3, r2, #1
 800a82a:	61fb      	str	r3, [r7, #28]
 800a82c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	6a39      	ldr	r1, [r7, #32]
 800a832:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 800a834:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a836:	2b00      	cmp	r3, #0
 800a838:	bfb8      	it	lt
 800a83a:	425b      	neglt	r3, r3
 800a83c:	4618      	mov	r0, r3
 800a83e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a840:	0fdb      	lsrs	r3, r3, #31
 800a842:	b2db      	uxtb	r3, r3
 800a844:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a846:	3a01      	subs	r2, #1
 800a848:	2105      	movs	r1, #5
 800a84a:	9105      	str	r1, [sp, #20]
 800a84c:	9204      	str	r2, [sp, #16]
 800a84e:	2200      	movs	r2, #0
 800a850:	9203      	str	r2, [sp, #12]
 800a852:	220a      	movs	r2, #10
 800a854:	9202      	str	r2, [sp, #8]
 800a856:	9301      	str	r3, [sp, #4]
 800a858:	9000      	str	r0, [sp, #0]
 800a85a:	69bb      	ldr	r3, [r7, #24]
 800a85c:	69fa      	ldr	r2, [r7, #28]
 800a85e:	6a39      	ldr	r1, [r7, #32]
 800a860:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a862:	f7ff fa61 	bl	8009d28 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800a866:	61f8      	str	r0, [r7, #28]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800a868:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a86c:	f003 0302 	and.w	r3, r3, #2
 800a870:	2b00      	cmp	r3, #0
 800a872:	d00f      	beq.n	800a894 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 800a874:	69fa      	ldr	r2, [r7, #28]
 800a876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a878:	1ad3      	subs	r3, r2, r3
 800a87a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a87e:	429a      	cmp	r2, r3
 800a880:	d908      	bls.n	800a894 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4f4>
 800a882:	69fa      	ldr	r2, [r7, #28]
 800a884:	1c53      	adds	r3, r2, #1
 800a886:	61fb      	str	r3, [r7, #28]
 800a888:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	6a39      	ldr	r1, [r7, #32]
 800a88e:	2020      	movs	r0, #32
 800a890:	47a0      	blx	r4
 800a892:	e7ef      	b.n	800a874 <_ZL5_etoaPFvcPvjjEPcjjdjjj+0x4d4>
    }
  }
  return idx;
 800a894:	69fb      	ldr	r3, [r7, #28]
}
 800a896:	4618      	mov	r0, r3
 800a898:	3764      	adds	r7, #100	; 0x64
 800a89a:	46bd      	mov	sp, r7
 800a89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8a0:	eb1c432d 	.word	0xeb1c432d
 800a8a4:	3f1a36e2 	.word	0x3f1a36e2
 800a8a8:	00000000 	.word	0x00000000
 800a8ac:	412e8480 	.word	0x412e8480

0800a8b0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 800a8b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b4:	b0a1      	sub	sp, #132	; 0x84
 800a8b6:	af0a      	add	r7, sp, #40	; 0x28
 800a8b8:	60f8      	str	r0, [r7, #12]
 800a8ba:	60b9      	str	r1, [r7, #8]
 800a8bc:	607a      	str	r2, [r7, #4]
 800a8be:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d101      	bne.n	800a8ce <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    // use null output function
    out = _out_null;
 800a8ca:	4ba5      	ldr	r3, [pc, #660]	; (800ab60 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b0>)
 800a8cc:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	781b      	ldrb	r3, [r3, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	f000 84ae 	beq.w	800b234 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x984>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	2b25      	cmp	r3, #37	; 0x25
 800a8de:	d00d      	beq.n	800a8fc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	7818      	ldrb	r0, [r3, #0]
 800a8e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8e6:	1c53      	adds	r3, r2, #1
 800a8e8:	647b      	str	r3, [r7, #68]	; 0x44
 800a8ea:	68fe      	ldr	r6, [r7, #12]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	68b9      	ldr	r1, [r7, #8]
 800a8f0:	47b0      	blx	r6
      format++;
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	3301      	adds	r3, #1
 800a8f6:	603b      	str	r3, [r7, #0]
      continue;
 800a8f8:	f000 bc9a 	b.w	800b230 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
    }
    else {
      // yes, evaluate it
      format++;
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	3301      	adds	r3, #1
 800a900:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800a902:	2300      	movs	r3, #0
 800a904:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	3b20      	subs	r3, #32
 800a90c:	2b10      	cmp	r3, #16
 800a90e:	d857      	bhi.n	800a9c0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x110>
 800a910:	a201      	add	r2, pc, #4	; (adr r2, 800a918 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x68>)
 800a912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a916:	bf00      	nop
 800a918:	0800a999 	.word	0x0800a999
 800a91c:	0800a9c1 	.word	0x0800a9c1
 800a920:	0800a9c1 	.word	0x0800a9c1
 800a924:	0800a9ad 	.word	0x0800a9ad
 800a928:	0800a9c1 	.word	0x0800a9c1
 800a92c:	0800a9c1 	.word	0x0800a9c1
 800a930:	0800a9c1 	.word	0x0800a9c1
 800a934:	0800a9c1 	.word	0x0800a9c1
 800a938:	0800a9c1 	.word	0x0800a9c1
 800a93c:	0800a9c1 	.word	0x0800a9c1
 800a940:	0800a9c1 	.word	0x0800a9c1
 800a944:	0800a985 	.word	0x0800a985
 800a948:	0800a9c1 	.word	0x0800a9c1
 800a94c:	0800a971 	.word	0x0800a971
 800a950:	0800a9c1 	.word	0x0800a9c1
 800a954:	0800a9c1 	.word	0x0800a9c1
 800a958:	0800a95d 	.word	0x0800a95d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800a95c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a95e:	f043 0301 	orr.w	r3, r3, #1
 800a962:	657b      	str	r3, [r7, #84]	; 0x54
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	3301      	adds	r3, #1
 800a968:	603b      	str	r3, [r7, #0]
 800a96a:	2301      	movs	r3, #1
 800a96c:	64bb      	str	r3, [r7, #72]	; 0x48
 800a96e:	e02a      	b.n	800a9c6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800a970:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a972:	f043 0302 	orr.w	r3, r3, #2
 800a976:	657b      	str	r3, [r7, #84]	; 0x54
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	3301      	adds	r3, #1
 800a97c:	603b      	str	r3, [r7, #0]
 800a97e:	2301      	movs	r3, #1
 800a980:	64bb      	str	r3, [r7, #72]	; 0x48
 800a982:	e020      	b.n	800a9c6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800a984:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a986:	f043 0304 	orr.w	r3, r3, #4
 800a98a:	657b      	str	r3, [r7, #84]	; 0x54
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	3301      	adds	r3, #1
 800a990:	603b      	str	r3, [r7, #0]
 800a992:	2301      	movs	r3, #1
 800a994:	64bb      	str	r3, [r7, #72]	; 0x48
 800a996:	e016      	b.n	800a9c6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 800a998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a99a:	f043 0308 	orr.w	r3, r3, #8
 800a99e:	657b      	str	r3, [r7, #84]	; 0x54
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	603b      	str	r3, [r7, #0]
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9aa:	e00c      	b.n	800a9c6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800a9ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9ae:	f043 0310 	orr.w	r3, r3, #16
 800a9b2:	657b      	str	r3, [r7, #84]	; 0x54
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	603b      	str	r3, [r7, #0]
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9be:	e002      	b.n	800a9c6 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x116>
        default :                                   n = 0U; break;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9c4:	bf00      	nop
      }
    } while (n);
 800a9c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d000      	beq.n	800a9ce <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x11e>
    do {
 800a9cc:	e79b      	b.n	800a906 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x56>

    // evaluate width field
    width = 0U;
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	781b      	ldrb	r3, [r3, #0]
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7ff f842 	bl	8009a60 <_ZL9_is_digitc>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d005      	beq.n	800a9ee <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x13e>
      width = _atoi(&format);
 800a9e2:	463b      	mov	r3, r7
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7ff f84f 	bl	8009a88 <_ZL5_atoiPPKc>
 800a9ea:	6538      	str	r0, [r7, #80]	; 0x50
 800a9ec:	e01a      	b.n	800aa24 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
    }
    else if (*format == '*') {
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	2b2a      	cmp	r3, #42	; 0x2a
 800a9f4:	d116      	bne.n	800aa24 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x174>
      const int w = va_arg(va, int);
 800a9f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a9fa:	1d1a      	adds	r2, r3, #4
 800a9fc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 800aa04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	da07      	bge.n	800aa1a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16a>
        flags |= FLAGS_LEFT;    // reverse padding
 800aa0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa0c:	f043 0302 	orr.w	r3, r3, #2
 800aa10:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 800aa12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa14:	425b      	negs	r3, r3
 800aa16:	653b      	str	r3, [r7, #80]	; 0x50
 800aa18:	e001      	b.n	800aa1e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x16e>
      }
      else {
        width = (unsigned int)w;
 800aa1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa1c:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	3301      	adds	r3, #1
 800aa22:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 800aa24:	2300      	movs	r3, #0
 800aa26:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	781b      	ldrb	r3, [r3, #0]
 800aa2c:	2b2e      	cmp	r3, #46	; 0x2e
 800aa2e:	d126      	bne.n	800aa7e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      flags |= FLAGS_PRECISION;
 800aa30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800aa36:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	3301      	adds	r3, #1
 800aa3c:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	781b      	ldrb	r3, [r3, #0]
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7ff f80c 	bl	8009a60 <_ZL9_is_digitc>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d005      	beq.n	800aa5a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1aa>
        precision = _atoi(&format);
 800aa4e:	463b      	mov	r3, r7
 800aa50:	4618      	mov	r0, r3
 800aa52:	f7ff f819 	bl	8009a88 <_ZL5_atoiPPKc>
 800aa56:	64f8      	str	r0, [r7, #76]	; 0x4c
 800aa58:	e011      	b.n	800aa7e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
      }
      else if (*format == '*') {
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	2b2a      	cmp	r3, #42	; 0x2a
 800aa60:	d10d      	bne.n	800aa7e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1ce>
        const int prec = (int)va_arg(va, int);
 800aa62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aa66:	1d1a      	adds	r2, r3, #4
 800aa68:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800aa70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa72:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aa76:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	781b      	ldrb	r3, [r3, #0]
 800aa82:	3b68      	subs	r3, #104	; 0x68
 800aa84:	2b12      	cmp	r3, #18
 800aa86:	d867      	bhi.n	800ab58 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2a8>
 800aa88:	a201      	add	r2, pc, #4	; (adr r2, 800aa90 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e0>)
 800aa8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa8e:	bf00      	nop
 800aa90:	0800ab03 	.word	0x0800ab03
 800aa94:	0800ab59 	.word	0x0800ab59
 800aa98:	0800ab39 	.word	0x0800ab39
 800aa9c:	0800ab59 	.word	0x0800ab59
 800aaa0:	0800aadd 	.word	0x0800aadd
 800aaa4:	0800ab59 	.word	0x0800ab59
 800aaa8:	0800ab59 	.word	0x0800ab59
 800aaac:	0800ab59 	.word	0x0800ab59
 800aab0:	0800ab59 	.word	0x0800ab59
 800aab4:	0800ab59 	.word	0x0800ab59
 800aab8:	0800ab59 	.word	0x0800ab59
 800aabc:	0800ab59 	.word	0x0800ab59
 800aac0:	0800ab29 	.word	0x0800ab29
 800aac4:	0800ab59 	.word	0x0800ab59
 800aac8:	0800ab59 	.word	0x0800ab59
 800aacc:	0800ab59 	.word	0x0800ab59
 800aad0:	0800ab59 	.word	0x0800ab59
 800aad4:	0800ab59 	.word	0x0800ab59
 800aad8:	0800ab49 	.word	0x0800ab49
      case 'l' :
        flags |= FLAGS_LONG;
 800aadc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aae2:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	3301      	adds	r3, #1
 800aae8:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	2b6c      	cmp	r3, #108	; 0x6c
 800aaf0:	d134      	bne.n	800ab5c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
          flags |= FLAGS_LONG_LONG;
 800aaf2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaf4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aaf8:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	3301      	adds	r3, #1
 800aafe:	603b      	str	r3, [r7, #0]
        }
        break;
 800ab00:	e02c      	b.n	800ab5c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2ac>
      case 'h' :
        flags |= FLAGS_SHORT;
 800ab02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab08:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	2b68      	cmp	r3, #104	; 0x68
 800ab16:	d125      	bne.n	800ab64 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
          flags |= FLAGS_CHAR;
 800ab18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab1e:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	3301      	adds	r3, #1
 800ab24:	603b      	str	r3, [r7, #0]
        }
        break;
 800ab26:	e01d      	b.n	800ab64 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b4>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800ab28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab2e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	3301      	adds	r3, #1
 800ab34:	603b      	str	r3, [r7, #0]
        break;
 800ab36:	e016      	b.n	800ab66 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800ab38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ab3e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	3301      	adds	r3, #1
 800ab44:	603b      	str	r3, [r7, #0]
        break;
 800ab46:	e00e      	b.n	800ab66 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 800ab48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab4e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	3301      	adds	r3, #1
 800ab54:	603b      	str	r3, [r7, #0]
        break;
 800ab56:	e006      	b.n	800ab66 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
      default :
        break;
 800ab58:	bf00      	nop
 800ab5a:	e004      	b.n	800ab66 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
        break;
 800ab5c:	bf00      	nop
 800ab5e:	e002      	b.n	800ab66 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2b6>
 800ab60:	080099db 	.word	0x080099db
        break;
 800ab64:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	3b25      	subs	r3, #37	; 0x25
 800ab6c:	2b53      	cmp	r3, #83	; 0x53
 800ab6e:	f200 8352 	bhi.w	800b216 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x966>
 800ab72:	a201      	add	r2, pc, #4	; (adr r2, 800ab78 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x2c8>)
 800ab74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab78:	0800b1ff 	.word	0x0800b1ff
 800ab7c:	0800b217 	.word	0x0800b217
 800ab80:	0800b217 	.word	0x0800b217
 800ab84:	0800b217 	.word	0x0800b217
 800ab88:	0800b217 	.word	0x0800b217
 800ab8c:	0800b217 	.word	0x0800b217
 800ab90:	0800b217 	.word	0x0800b217
 800ab94:	0800b217 	.word	0x0800b217
 800ab98:	0800b217 	.word	0x0800b217
 800ab9c:	0800b217 	.word	0x0800b217
 800aba0:	0800b217 	.word	0x0800b217
 800aba4:	0800b217 	.word	0x0800b217
 800aba8:	0800b217 	.word	0x0800b217
 800abac:	0800b217 	.word	0x0800b217
 800abb0:	0800b217 	.word	0x0800b217
 800abb4:	0800b217 	.word	0x0800b217
 800abb8:	0800b217 	.word	0x0800b217
 800abbc:	0800b217 	.word	0x0800b217
 800abc0:	0800b217 	.word	0x0800b217
 800abc4:	0800b217 	.word	0x0800b217
 800abc8:	0800b217 	.word	0x0800b217
 800abcc:	0800b217 	.word	0x0800b217
 800abd0:	0800b217 	.word	0x0800b217
 800abd4:	0800b217 	.word	0x0800b217
 800abd8:	0800b217 	.word	0x0800b217
 800abdc:	0800b217 	.word	0x0800b217
 800abe0:	0800b217 	.word	0x0800b217
 800abe4:	0800b217 	.word	0x0800b217
 800abe8:	0800b217 	.word	0x0800b217
 800abec:	0800b217 	.word	0x0800b217
 800abf0:	0800b217 	.word	0x0800b217
 800abf4:	0800b217 	.word	0x0800b217
 800abf8:	0800afcd 	.word	0x0800afcd
 800abfc:	0800af7d 	.word	0x0800af7d
 800ac00:	0800afcd 	.word	0x0800afcd
 800ac04:	0800b217 	.word	0x0800b217
 800ac08:	0800b217 	.word	0x0800b217
 800ac0c:	0800b217 	.word	0x0800b217
 800ac10:	0800b217 	.word	0x0800b217
 800ac14:	0800b217 	.word	0x0800b217
 800ac18:	0800b217 	.word	0x0800b217
 800ac1c:	0800b217 	.word	0x0800b217
 800ac20:	0800b217 	.word	0x0800b217
 800ac24:	0800b217 	.word	0x0800b217
 800ac28:	0800b217 	.word	0x0800b217
 800ac2c:	0800b217 	.word	0x0800b217
 800ac30:	0800b217 	.word	0x0800b217
 800ac34:	0800b217 	.word	0x0800b217
 800ac38:	0800b217 	.word	0x0800b217
 800ac3c:	0800b217 	.word	0x0800b217
 800ac40:	0800b217 	.word	0x0800b217
 800ac44:	0800acc9 	.word	0x0800acc9
 800ac48:	0800b217 	.word	0x0800b217
 800ac4c:	0800b217 	.word	0x0800b217
 800ac50:	0800b217 	.word	0x0800b217
 800ac54:	0800b217 	.word	0x0800b217
 800ac58:	0800b217 	.word	0x0800b217
 800ac5c:	0800b217 	.word	0x0800b217
 800ac60:	0800b217 	.word	0x0800b217
 800ac64:	0800b217 	.word	0x0800b217
 800ac68:	0800b217 	.word	0x0800b217
 800ac6c:	0800acc9 	.word	0x0800acc9
 800ac70:	0800b03d 	.word	0x0800b03d
 800ac74:	0800acc9 	.word	0x0800acc9
 800ac78:	0800afcd 	.word	0x0800afcd
 800ac7c:	0800af7d 	.word	0x0800af7d
 800ac80:	0800afcd 	.word	0x0800afcd
 800ac84:	0800b217 	.word	0x0800b217
 800ac88:	0800acc9 	.word	0x0800acc9
 800ac8c:	0800b217 	.word	0x0800b217
 800ac90:	0800b217 	.word	0x0800b217
 800ac94:	0800b217 	.word	0x0800b217
 800ac98:	0800b217 	.word	0x0800b217
 800ac9c:	0800b217 	.word	0x0800b217
 800aca0:	0800acc9 	.word	0x0800acc9
 800aca4:	0800b1b3 	.word	0x0800b1b3
 800aca8:	0800b217 	.word	0x0800b217
 800acac:	0800b217 	.word	0x0800b217
 800acb0:	0800b0c9 	.word	0x0800b0c9
 800acb4:	0800b217 	.word	0x0800b217
 800acb8:	0800acc9 	.word	0x0800acc9
 800acbc:	0800b217 	.word	0x0800b217
 800acc0:	0800b217 	.word	0x0800b217
 800acc4:	0800acc9 	.word	0x0800acc9
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 800acc8:	683b      	ldr	r3, [r7, #0]
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	2b78      	cmp	r3, #120	; 0x78
 800acce:	d003      	beq.n	800acd8 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x428>
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	2b58      	cmp	r3, #88	; 0x58
 800acd6:	d102      	bne.n	800acde <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x42e>
          base = 16U;
 800acd8:	2310      	movs	r3, #16
 800acda:	643b      	str	r3, [r7, #64]	; 0x40
 800acdc:	e013      	b.n	800ad06 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'o') {
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	2b6f      	cmp	r3, #111	; 0x6f
 800ace4:	d102      	bne.n	800acec <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x43c>
          base =  8U;
 800ace6:	2308      	movs	r3, #8
 800ace8:	643b      	str	r3, [r7, #64]	; 0x40
 800acea:	e00c      	b.n	800ad06 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else if (*format == 'b') {
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	2b62      	cmp	r3, #98	; 0x62
 800acf2:	d102      	bne.n	800acfa <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x44a>
          base =  2U;
 800acf4:	2302      	movs	r3, #2
 800acf6:	643b      	str	r3, [r7, #64]	; 0x40
 800acf8:	e005      	b.n	800ad06 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x456>
        }
        else {
          base = 10U;
 800acfa:	230a      	movs	r3, #10
 800acfc:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800acfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad00:	f023 0310 	bic.w	r3, r3, #16
 800ad04:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	2b58      	cmp	r3, #88	; 0x58
 800ad0c:	d103      	bne.n	800ad16 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x466>
          flags |= FLAGS_UPPERCASE;
 800ad0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad10:	f043 0320 	orr.w	r3, r3, #32
 800ad14:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	2b69      	cmp	r3, #105	; 0x69
 800ad1c:	d007      	beq.n	800ad2e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	781b      	ldrb	r3, [r3, #0]
 800ad22:	2b64      	cmp	r3, #100	; 0x64
 800ad24:	d003      	beq.n	800ad2e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x47e>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 800ad26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad28:	f023 030c 	bic.w	r3, r3, #12
 800ad2c:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 800ad2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d003      	beq.n	800ad40 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x490>
          flags &= ~FLAGS_ZEROPAD;
 800ad38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad3a:	f023 0301 	bic.w	r3, r3, #1
 800ad3e:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	2b69      	cmp	r3, #105	; 0x69
 800ad46:	d004      	beq.n	800ad52 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4a2>
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	2b64      	cmp	r3, #100	; 0x64
 800ad4e:	f040 8097 	bne.w	800ae80 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x5d0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 800ad52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ad54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d030      	beq.n	800adbe <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x50e>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 800ad5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ad60:	3307      	adds	r3, #7
 800ad62:	f023 0307 	bic.w	r3, r3, #7
 800ad66:	f103 0208 	add.w	r2, r3, #8
 800ad6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ad6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad72:	e9c7 2304 	strd	r2, r3, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800ad76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	da05      	bge.n	800ad8a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x4da>
 800ad7e:	2100      	movs	r1, #0
 800ad80:	4254      	negs	r4, r2
 800ad82:	eb61 0503 	sbc.w	r5, r1, r3
 800ad86:	4622      	mov	r2, r4
 800ad88:	462b      	mov	r3, r5
 800ad8a:	6979      	ldr	r1, [r7, #20]
 800ad8c:	0fc9      	lsrs	r1, r1, #31
 800ad8e:	b2c9      	uxtb	r1, r1
 800ad90:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800ad92:	2600      	movs	r6, #0
 800ad94:	4680      	mov	r8, r0
 800ad96:	46b1      	mov	r9, r6
 800ad98:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800ad9a:	9008      	str	r0, [sp, #32]
 800ad9c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ad9e:	9007      	str	r0, [sp, #28]
 800ada0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ada2:	9006      	str	r0, [sp, #24]
 800ada4:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800ada8:	9102      	str	r1, [sp, #8]
 800adaa:	e9cd 2300 	strd	r2, r3, [sp]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800adb2:	68b9      	ldr	r1, [r7, #8]
 800adb4:	68f8      	ldr	r0, [r7, #12]
 800adb6:	f7ff f81e 	bl	8009df6 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 800adba:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
 800adbc:	e0da      	b.n	800af74 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          else if (flags & FLAGS_LONG) {
 800adbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800adc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d020      	beq.n	800ae0a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x55a>
            const long value = va_arg(va, long);
 800adc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800adcc:	1d1a      	adds	r2, r3, #4
 800adce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800add6:	69fb      	ldr	r3, [r7, #28]
 800add8:	2b00      	cmp	r3, #0
 800adda:	bfb8      	it	lt
 800addc:	425b      	neglt	r3, r3
 800adde:	4619      	mov	r1, r3
 800ade0:	69fb      	ldr	r3, [r7, #28]
 800ade2:	0fdb      	lsrs	r3, r3, #31
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ade8:	9205      	str	r2, [sp, #20]
 800adea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800adec:	9204      	str	r2, [sp, #16]
 800adee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800adf0:	9203      	str	r2, [sp, #12]
 800adf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800adf4:	9202      	str	r2, [sp, #8]
 800adf6:	9301      	str	r3, [sp, #4]
 800adf8:	9100      	str	r1, [sp, #0]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800adfe:	68b9      	ldr	r1, [r7, #8]
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f7fe ff91 	bl	8009d28 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800ae06:	6478      	str	r0, [r7, #68]	; 0x44
          }
 800ae08:	e0b4      	b.n	800af74 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 800ae0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d007      	beq.n	800ae24 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x574>
 800ae14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae18:	1d1a      	adds	r2, r3, #4
 800ae1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	e012      	b.n	800ae4a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 800ae24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d007      	beq.n	800ae3e <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x58e>
 800ae2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae32:	1d1a      	adds	r2, r3, #4
 800ae34:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	b21b      	sxth	r3, r3
 800ae3c:	e005      	b.n	800ae4a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x59a>
 800ae3e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae42:	1d1a      	adds	r2, r3, #4
 800ae44:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 800ae4c:	6a3b      	ldr	r3, [r7, #32]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	bfb8      	it	lt
 800ae52:	425b      	neglt	r3, r3
 800ae54:	4619      	mov	r1, r3
 800ae56:	6a3b      	ldr	r3, [r7, #32]
 800ae58:	0fdb      	lsrs	r3, r3, #31
 800ae5a:	b2db      	uxtb	r3, r3
 800ae5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ae5e:	9205      	str	r2, [sp, #20]
 800ae60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ae62:	9204      	str	r2, [sp, #16]
 800ae64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ae66:	9203      	str	r2, [sp, #12]
 800ae68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ae6a:	9202      	str	r2, [sp, #8]
 800ae6c:	9301      	str	r3, [sp, #4]
 800ae6e:	9100      	str	r1, [sp, #0]
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ae74:	68b9      	ldr	r1, [r7, #8]
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f7fe ff56 	bl	8009d28 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800ae7c:	6478      	str	r0, [r7, #68]	; 0x44
          }
 800ae7e:	e079      	b.n	800af74 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 800ae80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ae82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d022      	beq.n	800aed0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x620>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 800ae8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae8e:	3307      	adds	r3, #7
 800ae90:	f023 0307 	bic.w	r3, r3, #7
 800ae94:	f103 0208 	add.w	r2, r3, #8
 800ae98:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ae9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800aea2:	2000      	movs	r0, #0
 800aea4:	468a      	mov	sl, r1
 800aea6:	4683      	mov	fp, r0
 800aea8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aeaa:	9108      	str	r1, [sp, #32]
 800aeac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800aeae:	9107      	str	r1, [sp, #28]
 800aeb0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800aeb2:	9106      	str	r1, [sp, #24]
 800aeb4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800aeb8:	2100      	movs	r1, #0
 800aeba:	9102      	str	r1, [sp, #8]
 800aebc:	e9cd 2300 	strd	r2, r3, [sp]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aec4:	68b9      	ldr	r1, [r7, #8]
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	f7fe ff95 	bl	8009df6 <_ZL15_ntoa_long_longPFvcPvjjEPcjjybyjjj>
 800aecc:	6478      	str	r0, [r7, #68]	; 0x44
 800aece:	e051      	b.n	800af74 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
#endif
          }
          else if (flags & FLAGS_LONG) {
 800aed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d018      	beq.n	800af0c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x65c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 800aeda:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800aede:	1d1a      	adds	r2, r3, #4
 800aee0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aee8:	9205      	str	r2, [sp, #20]
 800aeea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800aeec:	9204      	str	r2, [sp, #16]
 800aeee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800aef0:	9203      	str	r2, [sp, #12]
 800aef2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aef4:	9202      	str	r2, [sp, #8]
 800aef6:	2200      	movs	r2, #0
 800aef8:	9201      	str	r2, [sp, #4]
 800aefa:	9300      	str	r3, [sp, #0]
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af00:	68b9      	ldr	r1, [r7, #8]
 800af02:	68f8      	ldr	r0, [r7, #12]
 800af04:	f7fe ff10 	bl	8009d28 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800af08:	6478      	str	r0, [r7, #68]	; 0x44
 800af0a:	e033      	b.n	800af74 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6c4>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800af0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af12:	2b00      	cmp	r3, #0
 800af14:	d007      	beq.n	800af26 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x676>
 800af16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800af1a:	1d1a      	adds	r2, r3, #4
 800af1c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	b2db      	uxtb	r3, r3
 800af24:	e012      	b.n	800af4c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 800af26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d007      	beq.n	800af40 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x690>
 800af30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800af34:	1d1a      	adds	r2, r3, #4
 800af36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	e005      	b.n	800af4c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x69c>
 800af40:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800af44:	1d1a      	adds	r2, r3, #4
 800af46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 800af4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af50:	9305      	str	r3, [sp, #20]
 800af52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af54:	9304      	str	r3, [sp, #16]
 800af56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af58:	9303      	str	r3, [sp, #12]
 800af5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af5c:	9302      	str	r3, [sp, #8]
 800af5e:	2300      	movs	r3, #0
 800af60:	9301      	str	r3, [sp, #4]
 800af62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af64:	9300      	str	r3, [sp, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af6a:	68b9      	ldr	r1, [r7, #8]
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f7fe fedb 	bl	8009d28 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800af72:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	3301      	adds	r3, #1
 800af78:	603b      	str	r3, [r7, #0]
        break;
 800af7a:	e159      	b.n	800b230 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	2b46      	cmp	r3, #70	; 0x46
 800af82:	d103      	bne.n	800af8c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x6dc>
 800af84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af86:	f043 0320 	orr.w	r3, r3, #32
 800af8a:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800af8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800af90:	3307      	adds	r3, #7
 800af92:	f023 0307 	bic.w	r3, r3, #7
 800af96:	f103 0208 	add.w	r2, r3, #8
 800af9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800af9e:	ed93 7b00 	vldr	d7, [r3]
 800afa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afa4:	9302      	str	r3, [sp, #8]
 800afa6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afa8:	9301      	str	r3, [sp, #4]
 800afaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afac:	9300      	str	r3, [sp, #0]
 800afae:	eeb0 0a47 	vmov.f32	s0, s14
 800afb2:	eef0 0a67 	vmov.f32	s1, s15
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afba:	68b9      	ldr	r1, [r7, #8]
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	f7fe ff8b 	bl	8009ed8 <_ZL5_ftoaPFvcPvjjEPcjjdjjj>
 800afc2:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	3301      	adds	r3, #1
 800afc8:	603b      	str	r3, [r7, #0]
        break;
 800afca:	e131      	b.n	800b230 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	2b67      	cmp	r3, #103	; 0x67
 800afd2:	d003      	beq.n	800afdc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x72c>
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	781b      	ldrb	r3, [r3, #0]
 800afd8:	2b47      	cmp	r3, #71	; 0x47
 800afda:	d103      	bne.n	800afe4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x734>
 800afdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800afe2:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	2b45      	cmp	r3, #69	; 0x45
 800afea:	d003      	beq.n	800aff4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x744>
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	2b47      	cmp	r3, #71	; 0x47
 800aff2:	d103      	bne.n	800affc <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x74c>
 800aff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aff6:	f043 0320 	orr.w	r3, r3, #32
 800affa:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800affc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b000:	3307      	adds	r3, #7
 800b002:	f023 0307 	bic.w	r3, r3, #7
 800b006:	f103 0208 	add.w	r2, r3, #8
 800b00a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b00e:	ed93 7b00 	vldr	d7, [r3]
 800b012:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b014:	9302      	str	r3, [sp, #8]
 800b016:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b018:	9301      	str	r3, [sp, #4]
 800b01a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b01c:	9300      	str	r3, [sp, #0]
 800b01e:	eeb0 0a47 	vmov.f32	s0, s14
 800b022:	eef0 0a67 	vmov.f32	s1, s15
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b02a:	68b9      	ldr	r1, [r7, #8]
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f7ff f9b7 	bl	800a3a0 <_ZL5_etoaPFvcPvjjEPcjjdjjj>
 800b032:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	3301      	adds	r3, #1
 800b038:	603b      	str	r3, [r7, #0]
        break;
 800b03a:	e0f9      	b.n	800b230 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 800b03c:	2301      	movs	r3, #1
 800b03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 800b040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b042:	f003 0302 	and.w	r3, r3, #2
 800b046:	2b00      	cmp	r3, #0
 800b048:	d113      	bne.n	800b072 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
          while (l++ < width) {
 800b04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b04c:	1c5a      	adds	r2, r3, #1
 800b04e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b050:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b052:	429a      	cmp	r2, r3
 800b054:	bf8c      	ite	hi
 800b056:	2301      	movhi	r3, #1
 800b058:	2300      	movls	r3, #0
 800b05a:	b2db      	uxtb	r3, r3
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d008      	beq.n	800b072 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7c2>
            out(' ', buffer, idx++, maxlen);
 800b060:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b062:	1c53      	adds	r3, r2, #1
 800b064:	647b      	str	r3, [r7, #68]	; 0x44
 800b066:	68fe      	ldr	r6, [r7, #12]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	68b9      	ldr	r1, [r7, #8]
 800b06c:	2020      	movs	r0, #32
 800b06e:	47b0      	blx	r6
          while (l++ < width) {
 800b070:	e7eb      	b.n	800b04a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x79a>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800b072:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b076:	1d1a      	adds	r2, r3, #4
 800b078:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	b2d8      	uxtb	r0, r3
 800b080:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b082:	1c53      	adds	r3, r2, #1
 800b084:	647b      	str	r3, [r7, #68]	; 0x44
 800b086:	68fe      	ldr	r6, [r7, #12]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	68b9      	ldr	r1, [r7, #8]
 800b08c:	47b0      	blx	r6
        // post padding
        if (flags & FLAGS_LEFT) {
 800b08e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b090:	f003 0302 	and.w	r3, r3, #2
 800b094:	2b00      	cmp	r3, #0
 800b096:	d013      	beq.n	800b0c0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
          while (l++ < width) {
 800b098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b09a:	1c5a      	adds	r2, r3, #1
 800b09c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800b09e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	bf8c      	ite	hi
 800b0a4:	2301      	movhi	r3, #1
 800b0a6:	2300      	movls	r3, #0
 800b0a8:	b2db      	uxtb	r3, r3
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d008      	beq.n	800b0c0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x810>
            out(' ', buffer, idx++, maxlen);
 800b0ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0b0:	1c53      	adds	r3, r2, #1
 800b0b2:	647b      	str	r3, [r7, #68]	; 0x44
 800b0b4:	68fe      	ldr	r6, [r7, #12]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	68b9      	ldr	r1, [r7, #8]
 800b0ba:	2020      	movs	r0, #32
 800b0bc:	47b0      	blx	r6
          while (l++ < width) {
 800b0be:	e7eb      	b.n	800b098 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x7e8>
          }
        }
        format++;
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	603b      	str	r3, [r7, #0]
        break;
 800b0c6:	e0b3      	b.n	800b230 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800b0c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b0cc:	1d1a      	adds	r2, r3, #4
 800b0ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 800b0d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d001      	beq.n	800b0e0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x830>
 800b0dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0de:	e001      	b.n	800b0e4 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x834>
 800b0e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0e4:	4619      	mov	r1, r3
 800b0e6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0e8:	f7fe fc98 	bl	8009a1c <_ZL10_strnlen_sPKcj>
 800b0ec:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800b0ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d007      	beq.n	800b108 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x858>
          l = (l < precision ? l : precision);
 800b0f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d201      	bcs.n	800b104 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x854>
 800b100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b102:	e000      	b.n	800b106 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x856>
 800b104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b106:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 800b108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b10a:	f003 0302 	and.w	r3, r3, #2
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d113      	bne.n	800b13a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
          while (l++ < width) {
 800b112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b114:	1c5a      	adds	r2, r3, #1
 800b116:	637a      	str	r2, [r7, #52]	; 0x34
 800b118:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b11a:	429a      	cmp	r2, r3
 800b11c:	bf8c      	ite	hi
 800b11e:	2301      	movhi	r3, #1
 800b120:	2300      	movls	r3, #0
 800b122:	b2db      	uxtb	r3, r3
 800b124:	2b00      	cmp	r3, #0
 800b126:	d008      	beq.n	800b13a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
            out(' ', buffer, idx++, maxlen);
 800b128:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b12a:	1c53      	adds	r3, r2, #1
 800b12c:	647b      	str	r3, [r7, #68]	; 0x44
 800b12e:	68fe      	ldr	r6, [r7, #12]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	68b9      	ldr	r1, [r7, #8]
 800b134:	2020      	movs	r0, #32
 800b136:	47b0      	blx	r6
          while (l++ < width) {
 800b138:	e7eb      	b.n	800b112 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x862>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800b13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b13c:	781b      	ldrb	r3, [r3, #0]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00b      	beq.n	800b15a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 800b142:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d004      	beq.n	800b156 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8a6>
 800b14c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b14e:	1e5a      	subs	r2, r3, #1
 800b150:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b152:	2b00      	cmp	r3, #0
 800b154:	d001      	beq.n	800b15a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8aa>
 800b156:	2301      	movs	r3, #1
 800b158:	e000      	b.n	800b15c <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8ac>
 800b15a:	2300      	movs	r3, #0
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d00b      	beq.n	800b178 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8c8>
          out(*(p++), buffer, idx++, maxlen);
 800b160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b162:	1c5a      	adds	r2, r3, #1
 800b164:	63ba      	str	r2, [r7, #56]	; 0x38
 800b166:	7818      	ldrb	r0, [r3, #0]
 800b168:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b16a:	1c53      	adds	r3, r2, #1
 800b16c:	647b      	str	r3, [r7, #68]	; 0x44
 800b16e:	68fe      	ldr	r6, [r7, #12]
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	68b9      	ldr	r1, [r7, #8]
 800b174:	47b0      	blx	r6
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800b176:	e7e0      	b.n	800b13a <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x88a>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 800b178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b17a:	f003 0302 	and.w	r3, r3, #2
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d013      	beq.n	800b1aa <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
          while (l++ < width) {
 800b182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b184:	1c5a      	adds	r2, r3, #1
 800b186:	637a      	str	r2, [r7, #52]	; 0x34
 800b188:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b18a:	429a      	cmp	r2, r3
 800b18c:	bf8c      	ite	hi
 800b18e:	2301      	movhi	r3, #1
 800b190:	2300      	movls	r3, #0
 800b192:	b2db      	uxtb	r3, r3
 800b194:	2b00      	cmp	r3, #0
 800b196:	d008      	beq.n	800b1aa <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8fa>
            out(' ', buffer, idx++, maxlen);
 800b198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b19a:	1c53      	adds	r3, r2, #1
 800b19c:	647b      	str	r3, [r7, #68]	; 0x44
 800b19e:	68fe      	ldr	r6, [r7, #12]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	68b9      	ldr	r1, [r7, #8]
 800b1a4:	2020      	movs	r0, #32
 800b1a6:	47b0      	blx	r6
          while (l++ < width) {
 800b1a8:	e7eb      	b.n	800b182 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x8d2>
          }
        }
        format++;
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	3301      	adds	r3, #1
 800b1ae:	603b      	str	r3, [r7, #0]
        break;
 800b1b0:	e03e      	b.n	800b230 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 800b1b2:	2308      	movs	r3, #8
 800b1b4:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800b1b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1b8:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800b1bc:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800b1be:	2300      	movs	r3, #0
 800b1c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 800b1c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b1c8:	1d1a      	adds	r2, r3, #4
 800b1ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1d4:	9305      	str	r3, [sp, #20]
 800b1d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1d8:	9304      	str	r3, [sp, #16]
 800b1da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1dc:	9303      	str	r3, [sp, #12]
 800b1de:	2310      	movs	r3, #16
 800b1e0:	9302      	str	r3, [sp, #8]
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	9301      	str	r3, [sp, #4]
 800b1e6:	9200      	str	r2, [sp, #0]
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1ec:	68b9      	ldr	r1, [r7, #8]
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f7fe fd9a 	bl	8009d28 <_ZL10_ntoa_longPFvcPvjjEPcjjmbmjjj>
 800b1f4:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	3301      	adds	r3, #1
 800b1fa:	603b      	str	r3, [r7, #0]
        break;
 800b1fc:	e018      	b.n	800b230 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800b1fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b200:	1c53      	adds	r3, r2, #1
 800b202:	647b      	str	r3, [r7, #68]	; 0x44
 800b204:	68fe      	ldr	r6, [r7, #12]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	68b9      	ldr	r1, [r7, #8]
 800b20a:	2025      	movs	r0, #37	; 0x25
 800b20c:	47b0      	blx	r6
        format++;
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	3301      	adds	r3, #1
 800b212:	603b      	str	r3, [r7, #0]
        break;
 800b214:	e00c      	b.n	800b230 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x980>

      default :
        out(*format, buffer, idx++, maxlen);
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	7818      	ldrb	r0, [r3, #0]
 800b21a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b21c:	1c53      	adds	r3, r2, #1
 800b21e:	647b      	str	r3, [r7, #68]	; 0x44
 800b220:	68fe      	ldr	r6, [r7, #12]
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	68b9      	ldr	r1, [r7, #8]
 800b226:	47b0      	blx	r6
        format++;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	3301      	adds	r3, #1
 800b22c:	603b      	str	r3, [r7, #0]
        break;
 800b22e:	bf00      	nop
  while (*format)
 800b230:	f7ff bb4d 	b.w	800a8ce <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x1e>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800b234:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	429a      	cmp	r2, r3
 800b23a:	d302      	bcc.n	800b242 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x992>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	1e5a      	subs	r2, r3, #1
 800b240:	e000      	b.n	800b244 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list+0x994>
 800b242:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b244:	68fc      	ldr	r4, [r7, #12]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	68b9      	ldr	r1, [r7, #8]
 800b24a:	2000      	movs	r0, #0
 800b24c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 800b24e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800b250:	4618      	mov	r0, r3
 800b252:	375c      	adds	r7, #92	; 0x5c
 800b254:	46bd      	mov	sp, r7
 800b256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b25a:	bf00      	nop

0800b25c <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 800b25c:	b40f      	push	{r0, r1, r2, r3}
 800b25e:	b580      	push	{r7, lr}
 800b260:	b086      	sub	sp, #24
 800b262:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 800b264:	f107 031c 	add.w	r3, r7, #28
 800b268:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800b26a:	1d39      	adds	r1, r7, #4
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	9300      	str	r3, [sp, #0]
 800b270:	69bb      	ldr	r3, [r7, #24]
 800b272:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b276:	4806      	ldr	r0, [pc, #24]	; (800b290 <printf_+0x34>)
 800b278:	f7ff fb1a 	bl	800a8b0 <_ZL10_vsnprintfPFvcPvjjEPcjPKcSt9__va_list>
 800b27c:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 800b27e:	68fb      	ldr	r3, [r7, #12]
}
 800b280:	4618      	mov	r0, r3
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b28a:	b004      	add	sp, #16
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop
 800b290:	080099f7 	.word	0x080099f7

0800b294 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800b29c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800b2a0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800b2a4:	f003 0301 	and.w	r3, r3, #1
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d009      	beq.n	800b2c0 <ITM_SendChar+0x2c>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800b2ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800b2b0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800b2b4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d001      	beq.n	800b2c0 <ITM_SendChar+0x2c>
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e000      	b.n	800b2c2 <ITM_SendChar+0x2e>
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d010      	beq.n	800b2e8 <ITM_SendChar+0x54>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800b2c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	bf0c      	ite	eq
 800b2d0:	2301      	moveq	r3, #1
 800b2d2:	2300      	movne	r3, #0
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d001      	beq.n	800b2de <ITM_SendChar+0x4a>
    {
      __NOP();
 800b2da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800b2dc:	e7f3      	b.n	800b2c6 <ITM_SendChar+0x32>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800b2de:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800b2e2:	687a      	ldr	r2, [r7, #4]
 800b2e4:	b2d2      	uxtb	r2, r2
 800b2e6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800b2e8:	687b      	ldr	r3, [r7, #4]
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	370c      	adds	r7, #12
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr

0800b2f6 <_putchar>:
 */

#include "estdio.hpp"
#include "main.h"

void _putchar(char character) {
 800b2f6:	b580      	push	{r7, lr}
 800b2f8:	b082      	sub	sp, #8
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	4603      	mov	r3, r0
 800b2fe:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(character);
 800b300:	79fb      	ldrb	r3, [r7, #7]
 800b302:	4618      	mov	r0, r3
 800b304:	f7ff ffc6 	bl	800b294 <ITM_SendChar>
}
 800b308:	bf00      	nop
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <__NVIC_SetPriority>:
{
 800b310:	b480      	push	{r7}
 800b312:	b083      	sub	sp, #12
 800b314:	af00      	add	r7, sp, #0
 800b316:	4603      	mov	r3, r0
 800b318:	6039      	str	r1, [r7, #0]
 800b31a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b31c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b320:	2b00      	cmp	r3, #0
 800b322:	db0a      	blt.n	800b33a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	b2da      	uxtb	r2, r3
 800b328:	490c      	ldr	r1, [pc, #48]	; (800b35c <__NVIC_SetPriority+0x4c>)
 800b32a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b32e:	0112      	lsls	r2, r2, #4
 800b330:	b2d2      	uxtb	r2, r2
 800b332:	440b      	add	r3, r1
 800b334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b338:	e00a      	b.n	800b350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	b2da      	uxtb	r2, r3
 800b33e:	4908      	ldr	r1, [pc, #32]	; (800b360 <__NVIC_SetPriority+0x50>)
 800b340:	79fb      	ldrb	r3, [r7, #7]
 800b342:	f003 030f 	and.w	r3, r3, #15
 800b346:	3b04      	subs	r3, #4
 800b348:	0112      	lsls	r2, r2, #4
 800b34a:	b2d2      	uxtb	r2, r2
 800b34c:	440b      	add	r3, r1
 800b34e:	761a      	strb	r2, [r3, #24]
}
 800b350:	bf00      	nop
 800b352:	370c      	adds	r7, #12
 800b354:	46bd      	mov	sp, r7
 800b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35a:	4770      	bx	lr
 800b35c:	e000e100 	.word	0xe000e100
 800b360:	e000ed00 	.word	0xe000ed00

0800b364 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b364:	b580      	push	{r7, lr}
 800b366:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b368:	4b05      	ldr	r3, [pc, #20]	; (800b380 <SysTick_Handler+0x1c>)
 800b36a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b36c:	f002 fd2c 	bl	800ddc8 <xTaskGetSchedulerState>
 800b370:	4603      	mov	r3, r0
 800b372:	2b01      	cmp	r3, #1
 800b374:	d001      	beq.n	800b37a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b376:	f003 fc0f 	bl	800eb98 <xPortSysTickHandler>
  }
}
 800b37a:	bf00      	nop
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	e000e010 	.word	0xe000e010

0800b384 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b384:	b580      	push	{r7, lr}
 800b386:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b388:	2100      	movs	r1, #0
 800b38a:	f06f 0004 	mvn.w	r0, #4
 800b38e:	f7ff ffbf 	bl	800b310 <__NVIC_SetPriority>
#endif
}
 800b392:	bf00      	nop
 800b394:	bd80      	pop	{r7, pc}
	...

0800b398 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b39e:	f3ef 8305 	mrs	r3, IPSR
 800b3a2:	603b      	str	r3, [r7, #0]
  return(result);
 800b3a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d003      	beq.n	800b3b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b3aa:	f06f 0305 	mvn.w	r3, #5
 800b3ae:	607b      	str	r3, [r7, #4]
 800b3b0:	e00c      	b.n	800b3cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b3b2:	4b0a      	ldr	r3, [pc, #40]	; (800b3dc <osKernelInitialize+0x44>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d105      	bne.n	800b3c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b3ba:	4b08      	ldr	r3, [pc, #32]	; (800b3dc <osKernelInitialize+0x44>)
 800b3bc:	2201      	movs	r2, #1
 800b3be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	607b      	str	r3, [r7, #4]
 800b3c4:	e002      	b.n	800b3cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b3c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b3ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b3cc:	687b      	ldr	r3, [r7, #4]
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	370c      	adds	r7, #12
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop
 800b3dc:	200015c0 	.word	0x200015c0

0800b3e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3e6:	f3ef 8305 	mrs	r3, IPSR
 800b3ea:	603b      	str	r3, [r7, #0]
  return(result);
 800b3ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d003      	beq.n	800b3fa <osKernelStart+0x1a>
    stat = osErrorISR;
 800b3f2:	f06f 0305 	mvn.w	r3, #5
 800b3f6:	607b      	str	r3, [r7, #4]
 800b3f8:	e010      	b.n	800b41c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b3fa:	4b0b      	ldr	r3, [pc, #44]	; (800b428 <osKernelStart+0x48>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d109      	bne.n	800b416 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b402:	f7ff ffbf 	bl	800b384 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b406:	4b08      	ldr	r3, [pc, #32]	; (800b428 <osKernelStart+0x48>)
 800b408:	2202      	movs	r2, #2
 800b40a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b40c:	f002 f842 	bl	800d494 <vTaskStartScheduler>
      stat = osOK;
 800b410:	2300      	movs	r3, #0
 800b412:	607b      	str	r3, [r7, #4]
 800b414:	e002      	b.n	800b41c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b41a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b41c:	687b      	ldr	r3, [r7, #4]
}
 800b41e:	4618      	mov	r0, r3
 800b420:	3708      	adds	r7, #8
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	200015c0 	.word	0x200015c0

0800b42c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b08e      	sub	sp, #56	; 0x38
 800b430:	af04      	add	r7, sp, #16
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b438:	2300      	movs	r3, #0
 800b43a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b43c:	f3ef 8305 	mrs	r3, IPSR
 800b440:	617b      	str	r3, [r7, #20]
  return(result);
 800b442:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b444:	2b00      	cmp	r3, #0
 800b446:	d17e      	bne.n	800b546 <osThreadNew+0x11a>
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d07b      	beq.n	800b546 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b44e:	2380      	movs	r3, #128	; 0x80
 800b450:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b452:	2318      	movs	r3, #24
 800b454:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b456:	2300      	movs	r3, #0
 800b458:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800b45a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b45e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d045      	beq.n	800b4f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d002      	beq.n	800b474 <osThreadNew+0x48>
        name = attr->name;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	699b      	ldr	r3, [r3, #24]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d002      	beq.n	800b482 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	699b      	ldr	r3, [r3, #24]
 800b480:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d008      	beq.n	800b49a <osThreadNew+0x6e>
 800b488:	69fb      	ldr	r3, [r7, #28]
 800b48a:	2b38      	cmp	r3, #56	; 0x38
 800b48c:	d805      	bhi.n	800b49a <osThreadNew+0x6e>
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	f003 0301 	and.w	r3, r3, #1
 800b496:	2b00      	cmp	r3, #0
 800b498:	d001      	beq.n	800b49e <osThreadNew+0x72>
        return (NULL);
 800b49a:	2300      	movs	r3, #0
 800b49c:	e054      	b.n	800b548 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	695b      	ldr	r3, [r3, #20]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d003      	beq.n	800b4ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	695b      	ldr	r3, [r3, #20]
 800b4aa:	089b      	lsrs	r3, r3, #2
 800b4ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d00e      	beq.n	800b4d4 <osThreadNew+0xa8>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	2bbf      	cmp	r3, #191	; 0xbf
 800b4bc:	d90a      	bls.n	800b4d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d006      	beq.n	800b4d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	695b      	ldr	r3, [r3, #20]
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d002      	beq.n	800b4d4 <osThreadNew+0xa8>
        mem = 1;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	61bb      	str	r3, [r7, #24]
 800b4d2:	e010      	b.n	800b4f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d10c      	bne.n	800b4f6 <osThreadNew+0xca>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	68db      	ldr	r3, [r3, #12]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d108      	bne.n	800b4f6 <osThreadNew+0xca>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	691b      	ldr	r3, [r3, #16]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d104      	bne.n	800b4f6 <osThreadNew+0xca>
          mem = 0;
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	61bb      	str	r3, [r7, #24]
 800b4f0:	e001      	b.n	800b4f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b4f6:	69bb      	ldr	r3, [r7, #24]
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d110      	bne.n	800b51e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b504:	9202      	str	r2, [sp, #8]
 800b506:	9301      	str	r3, [sp, #4]
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	9300      	str	r3, [sp, #0]
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	6a3a      	ldr	r2, [r7, #32]
 800b510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b512:	68f8      	ldr	r0, [r7, #12]
 800b514:	f001 fdce 	bl	800d0b4 <xTaskCreateStatic>
 800b518:	4603      	mov	r3, r0
 800b51a:	613b      	str	r3, [r7, #16]
 800b51c:	e013      	b.n	800b546 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b51e:	69bb      	ldr	r3, [r7, #24]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d110      	bne.n	800b546 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b524:	6a3b      	ldr	r3, [r7, #32]
 800b526:	b29a      	uxth	r2, r3
 800b528:	f107 0310 	add.w	r3, r7, #16
 800b52c:	9301      	str	r3, [sp, #4]
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	9300      	str	r3, [sp, #0]
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b536:	68f8      	ldr	r0, [r7, #12]
 800b538:	f001 fe19 	bl	800d16e <xTaskCreate>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b01      	cmp	r3, #1
 800b540:	d001      	beq.n	800b546 <osThreadNew+0x11a>
            hTask = NULL;
 800b542:	2300      	movs	r3, #0
 800b544:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b546:	693b      	ldr	r3, [r7, #16]
}
 800b548:	4618      	mov	r0, r3
 800b54a:	3728      	adds	r7, #40	; 0x28
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}

0800b550 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b550:	b580      	push	{r7, lr}
 800b552:	b084      	sub	sp, #16
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b558:	f3ef 8305 	mrs	r3, IPSR
 800b55c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b55e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b560:	2b00      	cmp	r3, #0
 800b562:	d003      	beq.n	800b56c <osDelay+0x1c>
    stat = osErrorISR;
 800b564:	f06f 0305 	mvn.w	r3, #5
 800b568:	60fb      	str	r3, [r7, #12]
 800b56a:	e007      	b.n	800b57c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b56c:	2300      	movs	r3, #0
 800b56e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d002      	beq.n	800b57c <osDelay+0x2c>
      vTaskDelay(ticks);
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f001 ff58 	bl	800d42c <vTaskDelay>
    }
  }

  return (stat);
 800b57c:	68fb      	ldr	r3, [r7, #12]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3710      	adds	r7, #16
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}

0800b586 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b586:	b580      	push	{r7, lr}
 800b588:	b088      	sub	sp, #32
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b58e:	2300      	movs	r3, #0
 800b590:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b592:	f3ef 8305 	mrs	r3, IPSR
 800b596:	60bb      	str	r3, [r7, #8]
  return(result);
 800b598:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d174      	bne.n	800b688 <osMutexNew+0x102>
    if (attr != NULL) {
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d003      	beq.n	800b5ac <osMutexNew+0x26>
      type = attr->attr_bits;
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	685b      	ldr	r3, [r3, #4]
 800b5a8:	61bb      	str	r3, [r7, #24]
 800b5aa:	e001      	b.n	800b5b0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b5b0:	69bb      	ldr	r3, [r7, #24]
 800b5b2:	f003 0301 	and.w	r3, r3, #1
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d002      	beq.n	800b5c0 <osMutexNew+0x3a>
      rmtx = 1U;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	617b      	str	r3, [r7, #20]
 800b5be:	e001      	b.n	800b5c4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b5c4:	69bb      	ldr	r3, [r7, #24]
 800b5c6:	f003 0308 	and.w	r3, r3, #8
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d15c      	bne.n	800b688 <osMutexNew+0x102>
      mem = -1;
 800b5ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5d2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d015      	beq.n	800b606 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	689b      	ldr	r3, [r3, #8]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d006      	beq.n	800b5f0 <osMutexNew+0x6a>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	68db      	ldr	r3, [r3, #12]
 800b5e6:	2b4f      	cmp	r3, #79	; 0x4f
 800b5e8:	d902      	bls.n	800b5f0 <osMutexNew+0x6a>
          mem = 1;
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	613b      	str	r3, [r7, #16]
 800b5ee:	e00c      	b.n	800b60a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d108      	bne.n	800b60a <osMutexNew+0x84>
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d104      	bne.n	800b60a <osMutexNew+0x84>
            mem = 0;
 800b600:	2300      	movs	r3, #0
 800b602:	613b      	str	r3, [r7, #16]
 800b604:	e001      	b.n	800b60a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b606:	2300      	movs	r3, #0
 800b608:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d112      	bne.n	800b636 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d007      	beq.n	800b626 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	689b      	ldr	r3, [r3, #8]
 800b61a:	4619      	mov	r1, r3
 800b61c:	2004      	movs	r0, #4
 800b61e:	f000 fd2a 	bl	800c076 <xQueueCreateMutexStatic>
 800b622:	61f8      	str	r0, [r7, #28]
 800b624:	e016      	b.n	800b654 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	689b      	ldr	r3, [r3, #8]
 800b62a:	4619      	mov	r1, r3
 800b62c:	2001      	movs	r0, #1
 800b62e:	f000 fd22 	bl	800c076 <xQueueCreateMutexStatic>
 800b632:	61f8      	str	r0, [r7, #28]
 800b634:	e00e      	b.n	800b654 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d10b      	bne.n	800b654 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b63c:	697b      	ldr	r3, [r7, #20]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d004      	beq.n	800b64c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b642:	2004      	movs	r0, #4
 800b644:	f000 fcff 	bl	800c046 <xQueueCreateMutex>
 800b648:	61f8      	str	r0, [r7, #28]
 800b64a:	e003      	b.n	800b654 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b64c:	2001      	movs	r0, #1
 800b64e:	f000 fcfa 	bl	800c046 <xQueueCreateMutex>
 800b652:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d00c      	beq.n	800b674 <osMutexNew+0xee>
        if (attr != NULL) {
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d003      	beq.n	800b668 <osMutexNew+0xe2>
          name = attr->name;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	60fb      	str	r3, [r7, #12]
 800b666:	e001      	b.n	800b66c <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b668:	2300      	movs	r3, #0
 800b66a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b66c:	68f9      	ldr	r1, [r7, #12]
 800b66e:	69f8      	ldr	r0, [r7, #28]
 800b670:	f001 fc0a 	bl	800ce88 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d006      	beq.n	800b688 <osMutexNew+0x102>
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d003      	beq.n	800b688 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b680:	69fb      	ldr	r3, [r7, #28]
 800b682:	f043 0301 	orr.w	r3, r3, #1
 800b686:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b688:	69fb      	ldr	r3, [r7, #28]
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3720      	adds	r7, #32
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b692:	b580      	push	{r7, lr}
 800b694:	b086      	sub	sp, #24
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f023 0301 	bic.w	r3, r3, #1
 800b6a2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f003 0301 	and.w	r3, r3, #1
 800b6aa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6b0:	f3ef 8305 	mrs	r3, IPSR
 800b6b4:	60bb      	str	r3, [r7, #8]
  return(result);
 800b6b6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d003      	beq.n	800b6c4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b6bc:	f06f 0305 	mvn.w	r3, #5
 800b6c0:	617b      	str	r3, [r7, #20]
 800b6c2:	e02c      	b.n	800b71e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b6c4:	693b      	ldr	r3, [r7, #16]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d103      	bne.n	800b6d2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b6ca:	f06f 0303 	mvn.w	r3, #3
 800b6ce:	617b      	str	r3, [r7, #20]
 800b6d0:	e025      	b.n	800b71e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d011      	beq.n	800b6fc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b6d8:	6839      	ldr	r1, [r7, #0]
 800b6da:	6938      	ldr	r0, [r7, #16]
 800b6dc:	f000 fd1a 	bl	800c114 <xQueueTakeMutexRecursive>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d01b      	beq.n	800b71e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d003      	beq.n	800b6f4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b6ec:	f06f 0301 	mvn.w	r3, #1
 800b6f0:	617b      	str	r3, [r7, #20]
 800b6f2:	e014      	b.n	800b71e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b6f4:	f06f 0302 	mvn.w	r3, #2
 800b6f8:	617b      	str	r3, [r7, #20]
 800b6fa:	e010      	b.n	800b71e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b6fc:	6839      	ldr	r1, [r7, #0]
 800b6fe:	6938      	ldr	r0, [r7, #16]
 800b700:	f001 f8ae 	bl	800c860 <xQueueSemaphoreTake>
 800b704:	4603      	mov	r3, r0
 800b706:	2b01      	cmp	r3, #1
 800b708:	d009      	beq.n	800b71e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d003      	beq.n	800b718 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b710:	f06f 0301 	mvn.w	r3, #1
 800b714:	617b      	str	r3, [r7, #20]
 800b716:	e002      	b.n	800b71e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b718:	f06f 0302 	mvn.w	r3, #2
 800b71c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b71e:	697b      	ldr	r3, [r7, #20]
}
 800b720:	4618      	mov	r0, r3
 800b722:	3718      	adds	r7, #24
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b728:	b580      	push	{r7, lr}
 800b72a:	b086      	sub	sp, #24
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	f023 0301 	bic.w	r3, r3, #1
 800b736:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	f003 0301 	and.w	r3, r3, #1
 800b73e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b740:	2300      	movs	r3, #0
 800b742:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b744:	f3ef 8305 	mrs	r3, IPSR
 800b748:	60bb      	str	r3, [r7, #8]
  return(result);
 800b74a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d003      	beq.n	800b758 <osMutexRelease+0x30>
    stat = osErrorISR;
 800b750:	f06f 0305 	mvn.w	r3, #5
 800b754:	617b      	str	r3, [r7, #20]
 800b756:	e01f      	b.n	800b798 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b758:	693b      	ldr	r3, [r7, #16]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d103      	bne.n	800b766 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b75e:	f06f 0303 	mvn.w	r3, #3
 800b762:	617b      	str	r3, [r7, #20]
 800b764:	e018      	b.n	800b798 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d009      	beq.n	800b780 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b76c:	6938      	ldr	r0, [r7, #16]
 800b76e:	f000 fc9d 	bl	800c0ac <xQueueGiveMutexRecursive>
 800b772:	4603      	mov	r3, r0
 800b774:	2b01      	cmp	r3, #1
 800b776:	d00f      	beq.n	800b798 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b778:	f06f 0302 	mvn.w	r3, #2
 800b77c:	617b      	str	r3, [r7, #20]
 800b77e:	e00b      	b.n	800b798 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b780:	2300      	movs	r3, #0
 800b782:	2200      	movs	r2, #0
 800b784:	2100      	movs	r1, #0
 800b786:	6938      	ldr	r0, [r7, #16]
 800b788:	f000 fd64 	bl	800c254 <xQueueGenericSend>
 800b78c:	4603      	mov	r3, r0
 800b78e:	2b01      	cmp	r3, #1
 800b790:	d002      	beq.n	800b798 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b792:	f06f 0302 	mvn.w	r3, #2
 800b796:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b798:	697b      	ldr	r3, [r7, #20]
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3718      	adds	r7, #24
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}

0800b7a2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b7a2:	b580      	push	{r7, lr}
 800b7a4:	b08a      	sub	sp, #40	; 0x28
 800b7a6:	af02      	add	r7, sp, #8
 800b7a8:	60f8      	str	r0, [r7, #12]
 800b7aa:	60b9      	str	r1, [r7, #8]
 800b7ac:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7b2:	f3ef 8305 	mrs	r3, IPSR
 800b7b6:	613b      	str	r3, [r7, #16]
  return(result);
 800b7b8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d175      	bne.n	800b8aa <osSemaphoreNew+0x108>
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d072      	beq.n	800b8aa <osSemaphoreNew+0x108>
 800b7c4:	68ba      	ldr	r2, [r7, #8]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d86e      	bhi.n	800b8aa <osSemaphoreNew+0x108>
    mem = -1;
 800b7cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b7d0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d015      	beq.n	800b804 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	689b      	ldr	r3, [r3, #8]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d006      	beq.n	800b7ee <osSemaphoreNew+0x4c>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	68db      	ldr	r3, [r3, #12]
 800b7e4:	2b4f      	cmp	r3, #79	; 0x4f
 800b7e6:	d902      	bls.n	800b7ee <osSemaphoreNew+0x4c>
        mem = 1;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	61bb      	str	r3, [r7, #24]
 800b7ec:	e00c      	b.n	800b808 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	689b      	ldr	r3, [r3, #8]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d108      	bne.n	800b808 <osSemaphoreNew+0x66>
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d104      	bne.n	800b808 <osSemaphoreNew+0x66>
          mem = 0;
 800b7fe:	2300      	movs	r3, #0
 800b800:	61bb      	str	r3, [r7, #24]
 800b802:	e001      	b.n	800b808 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b804:	2300      	movs	r3, #0
 800b806:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b808:	69bb      	ldr	r3, [r7, #24]
 800b80a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b80e:	d04c      	beq.n	800b8aa <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2b01      	cmp	r3, #1
 800b814:	d128      	bne.n	800b868 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b816:	69bb      	ldr	r3, [r7, #24]
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d10a      	bne.n	800b832 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	2203      	movs	r2, #3
 800b822:	9200      	str	r2, [sp, #0]
 800b824:	2200      	movs	r2, #0
 800b826:	2100      	movs	r1, #0
 800b828:	2001      	movs	r0, #1
 800b82a:	f000 fb1d 	bl	800be68 <xQueueGenericCreateStatic>
 800b82e:	61f8      	str	r0, [r7, #28]
 800b830:	e005      	b.n	800b83e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b832:	2203      	movs	r2, #3
 800b834:	2100      	movs	r1, #0
 800b836:	2001      	movs	r0, #1
 800b838:	f000 fb8e 	bl	800bf58 <xQueueGenericCreate>
 800b83c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b83e:	69fb      	ldr	r3, [r7, #28]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d022      	beq.n	800b88a <osSemaphoreNew+0xe8>
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d01f      	beq.n	800b88a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b84a:	2300      	movs	r3, #0
 800b84c:	2200      	movs	r2, #0
 800b84e:	2100      	movs	r1, #0
 800b850:	69f8      	ldr	r0, [r7, #28]
 800b852:	f000 fcff 	bl	800c254 <xQueueGenericSend>
 800b856:	4603      	mov	r3, r0
 800b858:	2b01      	cmp	r3, #1
 800b85a:	d016      	beq.n	800b88a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b85c:	69f8      	ldr	r0, [r7, #28]
 800b85e:	f001 f9c7 	bl	800cbf0 <vQueueDelete>
            hSemaphore = NULL;
 800b862:	2300      	movs	r3, #0
 800b864:	61fb      	str	r3, [r7, #28]
 800b866:	e010      	b.n	800b88a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b868:	69bb      	ldr	r3, [r7, #24]
 800b86a:	2b01      	cmp	r3, #1
 800b86c:	d108      	bne.n	800b880 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	689b      	ldr	r3, [r3, #8]
 800b872:	461a      	mov	r2, r3
 800b874:	68b9      	ldr	r1, [r7, #8]
 800b876:	68f8      	ldr	r0, [r7, #12]
 800b878:	f000 fc82 	bl	800c180 <xQueueCreateCountingSemaphoreStatic>
 800b87c:	61f8      	str	r0, [r7, #28]
 800b87e:	e004      	b.n	800b88a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b880:	68b9      	ldr	r1, [r7, #8]
 800b882:	68f8      	ldr	r0, [r7, #12]
 800b884:	f000 fcb3 	bl	800c1ee <xQueueCreateCountingSemaphore>
 800b888:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b88a:	69fb      	ldr	r3, [r7, #28]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d00c      	beq.n	800b8aa <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d003      	beq.n	800b89e <osSemaphoreNew+0xfc>
          name = attr->name;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	617b      	str	r3, [r7, #20]
 800b89c:	e001      	b.n	800b8a2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b8a2:	6979      	ldr	r1, [r7, #20]
 800b8a4:	69f8      	ldr	r0, [r7, #28]
 800b8a6:	f001 faef 	bl	800ce88 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b8aa:	69fb      	ldr	r3, [r7, #28]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3720      	adds	r7, #32
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}

0800b8b4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b086      	sub	sp, #24
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b8c2:	2300      	movs	r3, #0
 800b8c4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b8c6:	693b      	ldr	r3, [r7, #16]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d103      	bne.n	800b8d4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b8cc:	f06f 0303 	mvn.w	r3, #3
 800b8d0:	617b      	str	r3, [r7, #20]
 800b8d2:	e039      	b.n	800b948 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8d4:	f3ef 8305 	mrs	r3, IPSR
 800b8d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800b8da:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d022      	beq.n	800b926 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d003      	beq.n	800b8ee <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b8e6:	f06f 0303 	mvn.w	r3, #3
 800b8ea:	617b      	str	r3, [r7, #20]
 800b8ec:	e02c      	b.n	800b948 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b8f2:	f107 0308 	add.w	r3, r7, #8
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	2100      	movs	r1, #0
 800b8fa:	6938      	ldr	r0, [r7, #16]
 800b8fc:	f001 f8bc 	bl	800ca78 <xQueueReceiveFromISR>
 800b900:	4603      	mov	r3, r0
 800b902:	2b01      	cmp	r3, #1
 800b904:	d003      	beq.n	800b90e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b906:	f06f 0302 	mvn.w	r3, #2
 800b90a:	617b      	str	r3, [r7, #20]
 800b90c:	e01c      	b.n	800b948 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d019      	beq.n	800b948 <osSemaphoreAcquire+0x94>
 800b914:	4b0f      	ldr	r3, [pc, #60]	; (800b954 <osSemaphoreAcquire+0xa0>)
 800b916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b91a:	601a      	str	r2, [r3, #0]
 800b91c:	f3bf 8f4f 	dsb	sy
 800b920:	f3bf 8f6f 	isb	sy
 800b924:	e010      	b.n	800b948 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b926:	6839      	ldr	r1, [r7, #0]
 800b928:	6938      	ldr	r0, [r7, #16]
 800b92a:	f000 ff99 	bl	800c860 <xQueueSemaphoreTake>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b01      	cmp	r3, #1
 800b932:	d009      	beq.n	800b948 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d003      	beq.n	800b942 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b93a:	f06f 0301 	mvn.w	r3, #1
 800b93e:	617b      	str	r3, [r7, #20]
 800b940:	e002      	b.n	800b948 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b942:	f06f 0302 	mvn.w	r3, #2
 800b946:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b948:	697b      	ldr	r3, [r7, #20]
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3718      	adds	r7, #24
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	e000ed04 	.word	0xe000ed04

0800b958 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b958:	b580      	push	{r7, lr}
 800b95a:	b086      	sub	sp, #24
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b964:	2300      	movs	r3, #0
 800b966:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d103      	bne.n	800b976 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b96e:	f06f 0303 	mvn.w	r3, #3
 800b972:	617b      	str	r3, [r7, #20]
 800b974:	e02c      	b.n	800b9d0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b976:	f3ef 8305 	mrs	r3, IPSR
 800b97a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b97c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d01a      	beq.n	800b9b8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b982:	2300      	movs	r3, #0
 800b984:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b986:	f107 0308 	add.w	r3, r7, #8
 800b98a:	4619      	mov	r1, r3
 800b98c:	6938      	ldr	r0, [r7, #16]
 800b98e:	f000 fdfa 	bl	800c586 <xQueueGiveFromISR>
 800b992:	4603      	mov	r3, r0
 800b994:	2b01      	cmp	r3, #1
 800b996:	d003      	beq.n	800b9a0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b998:	f06f 0302 	mvn.w	r3, #2
 800b99c:	617b      	str	r3, [r7, #20]
 800b99e:	e017      	b.n	800b9d0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d014      	beq.n	800b9d0 <osSemaphoreRelease+0x78>
 800b9a6:	4b0d      	ldr	r3, [pc, #52]	; (800b9dc <osSemaphoreRelease+0x84>)
 800b9a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b9ac:	601a      	str	r2, [r3, #0]
 800b9ae:	f3bf 8f4f 	dsb	sy
 800b9b2:	f3bf 8f6f 	isb	sy
 800b9b6:	e00b      	b.n	800b9d0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	2200      	movs	r2, #0
 800b9bc:	2100      	movs	r1, #0
 800b9be:	6938      	ldr	r0, [r7, #16]
 800b9c0:	f000 fc48 	bl	800c254 <xQueueGenericSend>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	d002      	beq.n	800b9d0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b9ca:	f06f 0302 	mvn.w	r3, #2
 800b9ce:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b9d0:	697b      	ldr	r3, [r7, #20]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3718      	adds	r7, #24
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
 800b9da:	bf00      	nop
 800b9dc:	e000ed04 	.word	0xe000ed04

0800b9e0 <osSemaphoreGetCount>:

uint32_t osSemaphoreGetCount (osSemaphoreId_t semaphore_id) {
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b086      	sub	sp, #24
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	613b      	str	r3, [r7, #16]
  uint32_t count;

  if (hSemaphore == NULL) {
 800b9ec:	693b      	ldr	r3, [r7, #16]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d102      	bne.n	800b9f8 <osSemaphoreGetCount+0x18>
    count = 0U;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	617b      	str	r3, [r7, #20]
 800b9f6:	e00e      	b.n	800ba16 <osSemaphoreGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b9f8:	f3ef 8305 	mrs	r3, IPSR
 800b9fc:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9fe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d004      	beq.n	800ba0e <osSemaphoreGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hSemaphore);
 800ba04:	6938      	ldr	r0, [r7, #16]
 800ba06:	f001 f8d5 	bl	800cbb4 <uxQueueMessagesWaitingFromISR>
 800ba0a:	6178      	str	r0, [r7, #20]
 800ba0c:	e003      	b.n	800ba16 <osSemaphoreGetCount+0x36>
  } else {
    count = (uint32_t)uxSemaphoreGetCount (hSemaphore);
 800ba0e:	6938      	ldr	r0, [r7, #16]
 800ba10:	f001 f8b2 	bl	800cb78 <uxQueueMessagesWaiting>
 800ba14:	6178      	str	r0, [r7, #20]
  }

  return (count);
 800ba16:	697b      	ldr	r3, [r7, #20]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3718      	adds	r7, #24
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b08a      	sub	sp, #40	; 0x28
 800ba24:	af02      	add	r7, sp, #8
 800ba26:	60f8      	str	r0, [r7, #12]
 800ba28:	60b9      	str	r1, [r7, #8]
 800ba2a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba30:	f3ef 8305 	mrs	r3, IPSR
 800ba34:	613b      	str	r3, [r7, #16]
  return(result);
 800ba36:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d15f      	bne.n	800bafc <osMessageQueueNew+0xdc>
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d05c      	beq.n	800bafc <osMessageQueueNew+0xdc>
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d059      	beq.n	800bafc <osMessageQueueNew+0xdc>
    mem = -1;
 800ba48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ba4c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d029      	beq.n	800baa8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	689b      	ldr	r3, [r3, #8]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d012      	beq.n	800ba82 <osMessageQueueNew+0x62>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	68db      	ldr	r3, [r3, #12]
 800ba60:	2b4f      	cmp	r3, #79	; 0x4f
 800ba62:	d90e      	bls.n	800ba82 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d00a      	beq.n	800ba82 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	695a      	ldr	r2, [r3, #20]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	68b9      	ldr	r1, [r7, #8]
 800ba74:	fb01 f303 	mul.w	r3, r1, r3
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d302      	bcc.n	800ba82 <osMessageQueueNew+0x62>
        mem = 1;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	61bb      	str	r3, [r7, #24]
 800ba80:	e014      	b.n	800baac <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d110      	bne.n	800baac <osMessageQueueNew+0x8c>
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	68db      	ldr	r3, [r3, #12]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d10c      	bne.n	800baac <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d108      	bne.n	800baac <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	695b      	ldr	r3, [r3, #20]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d104      	bne.n	800baac <osMessageQueueNew+0x8c>
          mem = 0;
 800baa2:	2300      	movs	r3, #0
 800baa4:	61bb      	str	r3, [r7, #24]
 800baa6:	e001      	b.n	800baac <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800baa8:	2300      	movs	r3, #0
 800baaa:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800baac:	69bb      	ldr	r3, [r7, #24]
 800baae:	2b01      	cmp	r3, #1
 800bab0:	d10b      	bne.n	800baca <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	691a      	ldr	r2, [r3, #16]
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	689b      	ldr	r3, [r3, #8]
 800baba:	2100      	movs	r1, #0
 800babc:	9100      	str	r1, [sp, #0]
 800babe:	68b9      	ldr	r1, [r7, #8]
 800bac0:	68f8      	ldr	r0, [r7, #12]
 800bac2:	f000 f9d1 	bl	800be68 <xQueueGenericCreateStatic>
 800bac6:	61f8      	str	r0, [r7, #28]
 800bac8:	e008      	b.n	800badc <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d105      	bne.n	800badc <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800bad0:	2200      	movs	r2, #0
 800bad2:	68b9      	ldr	r1, [r7, #8]
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	f000 fa3f 	bl	800bf58 <xQueueGenericCreate>
 800bada:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d00c      	beq.n	800bafc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d003      	beq.n	800baf0 <osMessageQueueNew+0xd0>
        name = attr->name;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	617b      	str	r3, [r7, #20]
 800baee:	e001      	b.n	800baf4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800baf0:	2300      	movs	r3, #0
 800baf2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800baf4:	6979      	ldr	r1, [r7, #20]
 800baf6:	69f8      	ldr	r0, [r7, #28]
 800baf8:	f001 f9c6 	bl	800ce88 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800bafc:	69fb      	ldr	r3, [r7, #28]
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3720      	adds	r7, #32
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
	...

0800bb08 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b088      	sub	sp, #32
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	603b      	str	r3, [r7, #0]
 800bb14:	4613      	mov	r3, r2
 800bb16:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb20:	f3ef 8305 	mrs	r3, IPSR
 800bb24:	617b      	str	r3, [r7, #20]
  return(result);
 800bb26:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d028      	beq.n	800bb7e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800bb2c:	69bb      	ldr	r3, [r7, #24]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d005      	beq.n	800bb3e <osMessageQueuePut+0x36>
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d002      	beq.n	800bb3e <osMessageQueuePut+0x36>
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d003      	beq.n	800bb46 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800bb3e:	f06f 0303 	mvn.w	r3, #3
 800bb42:	61fb      	str	r3, [r7, #28]
 800bb44:	e038      	b.n	800bbb8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800bb46:	2300      	movs	r3, #0
 800bb48:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800bb4a:	f107 0210 	add.w	r2, r7, #16
 800bb4e:	2300      	movs	r3, #0
 800bb50:	68b9      	ldr	r1, [r7, #8]
 800bb52:	69b8      	ldr	r0, [r7, #24]
 800bb54:	f000 fc7c 	bl	800c450 <xQueueGenericSendFromISR>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b01      	cmp	r3, #1
 800bb5c:	d003      	beq.n	800bb66 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800bb5e:	f06f 0302 	mvn.w	r3, #2
 800bb62:	61fb      	str	r3, [r7, #28]
 800bb64:	e028      	b.n	800bbb8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d025      	beq.n	800bbb8 <osMessageQueuePut+0xb0>
 800bb6c:	4b15      	ldr	r3, [pc, #84]	; (800bbc4 <osMessageQueuePut+0xbc>)
 800bb6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb72:	601a      	str	r2, [r3, #0]
 800bb74:	f3bf 8f4f 	dsb	sy
 800bb78:	f3bf 8f6f 	isb	sy
 800bb7c:	e01c      	b.n	800bbb8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800bb7e:	69bb      	ldr	r3, [r7, #24]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d002      	beq.n	800bb8a <osMessageQueuePut+0x82>
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d103      	bne.n	800bb92 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800bb8a:	f06f 0303 	mvn.w	r3, #3
 800bb8e:	61fb      	str	r3, [r7, #28]
 800bb90:	e012      	b.n	800bbb8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800bb92:	2300      	movs	r3, #0
 800bb94:	683a      	ldr	r2, [r7, #0]
 800bb96:	68b9      	ldr	r1, [r7, #8]
 800bb98:	69b8      	ldr	r0, [r7, #24]
 800bb9a:	f000 fb5b 	bl	800c254 <xQueueGenericSend>
 800bb9e:	4603      	mov	r3, r0
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d009      	beq.n	800bbb8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d003      	beq.n	800bbb2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800bbaa:	f06f 0301 	mvn.w	r3, #1
 800bbae:	61fb      	str	r3, [r7, #28]
 800bbb0:	e002      	b.n	800bbb8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800bbb2:	f06f 0302 	mvn.w	r3, #2
 800bbb6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800bbb8:	69fb      	ldr	r3, [r7, #28]
}
 800bbba:	4618      	mov	r0, r3
 800bbbc:	3720      	adds	r7, #32
 800bbbe:	46bd      	mov	sp, r7
 800bbc0:	bd80      	pop	{r7, pc}
 800bbc2:	bf00      	nop
 800bbc4:	e000ed04 	.word	0xe000ed04

0800bbc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	4a07      	ldr	r2, [pc, #28]	; (800bbf4 <vApplicationGetIdleTaskMemory+0x2c>)
 800bbd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	4a06      	ldr	r2, [pc, #24]	; (800bbf8 <vApplicationGetIdleTaskMemory+0x30>)
 800bbde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2280      	movs	r2, #128	; 0x80
 800bbe4:	601a      	str	r2, [r3, #0]
}
 800bbe6:	bf00      	nop
 800bbe8:	3714      	adds	r7, #20
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr
 800bbf2:	bf00      	nop
 800bbf4:	200015c4 	.word	0x200015c4
 800bbf8:	20001684 	.word	0x20001684

0800bbfc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bbfc:	b480      	push	{r7}
 800bbfe:	b085      	sub	sp, #20
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	60b9      	str	r1, [r7, #8]
 800bc06:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	4a07      	ldr	r2, [pc, #28]	; (800bc28 <vApplicationGetTimerTaskMemory+0x2c>)
 800bc0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	4a06      	ldr	r2, [pc, #24]	; (800bc2c <vApplicationGetTimerTaskMemory+0x30>)
 800bc12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bc1a:	601a      	str	r2, [r3, #0]
}
 800bc1c:	bf00      	nop
 800bc1e:	3714      	adds	r7, #20
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr
 800bc28:	20001884 	.word	0x20001884
 800bc2c:	20001944 	.word	0x20001944

0800bc30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f103 0208 	add.w	r2, r3, #8
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f103 0208 	add.w	r2, r3, #8
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	f103 0208 	add.w	r2, r3, #8
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bc64:	bf00      	nop
 800bc66:	370c      	adds	r7, #12
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bc70:	b480      	push	{r7}
 800bc72:	b083      	sub	sp, #12
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc7e:	bf00      	nop
 800bc80:	370c      	adds	r7, #12
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr

0800bc8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc8a:	b480      	push	{r7}
 800bc8c:	b085      	sub	sp, #20
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
 800bc92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	689a      	ldr	r2, [r3, #8]
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	683a      	ldr	r2, [r7, #0]
 800bcae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	683a      	ldr	r2, [r7, #0]
 800bcb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	1c5a      	adds	r2, r3, #1
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	601a      	str	r2, [r3, #0]
}
 800bcc6:	bf00      	nop
 800bcc8:	3714      	adds	r7, #20
 800bcca:	46bd      	mov	sp, r7
 800bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd0:	4770      	bx	lr

0800bcd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bcd2:	b480      	push	{r7}
 800bcd4:	b085      	sub	sp, #20
 800bcd6:	af00      	add	r7, sp, #0
 800bcd8:	6078      	str	r0, [r7, #4]
 800bcda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bce8:	d103      	bne.n	800bcf2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	691b      	ldr	r3, [r3, #16]
 800bcee:	60fb      	str	r3, [r7, #12]
 800bcf0:	e00c      	b.n	800bd0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	3308      	adds	r3, #8
 800bcf6:	60fb      	str	r3, [r7, #12]
 800bcf8:	e002      	b.n	800bd00 <vListInsert+0x2e>
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	685b      	ldr	r3, [r3, #4]
 800bcfe:	60fb      	str	r3, [r7, #12]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	68ba      	ldr	r2, [r7, #8]
 800bd08:	429a      	cmp	r2, r3
 800bd0a:	d2f6      	bcs.n	800bcfa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	685a      	ldr	r2, [r3, #4]
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	685b      	ldr	r3, [r3, #4]
 800bd18:	683a      	ldr	r2, [r7, #0]
 800bd1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	683a      	ldr	r2, [r7, #0]
 800bd26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	1c5a      	adds	r2, r3, #1
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	601a      	str	r2, [r3, #0]
}
 800bd38:	bf00      	nop
 800bd3a:	3714      	adds	r7, #20
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd42:	4770      	bx	lr

0800bd44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bd44:	b480      	push	{r7}
 800bd46:	b085      	sub	sp, #20
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	691b      	ldr	r3, [r3, #16]
 800bd50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	685b      	ldr	r3, [r3, #4]
 800bd56:	687a      	ldr	r2, [r7, #4]
 800bd58:	6892      	ldr	r2, [r2, #8]
 800bd5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	689b      	ldr	r3, [r3, #8]
 800bd60:	687a      	ldr	r2, [r7, #4]
 800bd62:	6852      	ldr	r2, [r2, #4]
 800bd64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d103      	bne.n	800bd78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	689a      	ldr	r2, [r3, #8]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	1e5a      	subs	r2, r3, #1
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	681b      	ldr	r3, [r3, #0]
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3714      	adds	r7, #20
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b084      	sub	sp, #16
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d10a      	bne.n	800bdc2 <xQueueGenericReset+0x2a>
	__asm volatile
 800bdac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb0:	f383 8811 	msr	BASEPRI, r3
 800bdb4:	f3bf 8f6f 	isb	sy
 800bdb8:	f3bf 8f4f 	dsb	sy
 800bdbc:	60bb      	str	r3, [r7, #8]
}
 800bdbe:	bf00      	nop
 800bdc0:	e7fe      	b.n	800bdc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bdc2:	f002 fe57 	bl	800ea74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdce:	68f9      	ldr	r1, [r7, #12]
 800bdd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bdd2:	fb01 f303 	mul.w	r3, r1, r3
 800bdd6:	441a      	add	r2, r3
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	2200      	movs	r2, #0
 800bde0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	681a      	ldr	r2, [r3, #0]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681a      	ldr	r2, [r3, #0]
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	68f9      	ldr	r1, [r7, #12]
 800bdf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bdf8:	fb01 f303 	mul.w	r3, r1, r3
 800bdfc:	441a      	add	r2, r3
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	22ff      	movs	r2, #255	; 0xff
 800be06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	22ff      	movs	r2, #255	; 0xff
 800be0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d114      	bne.n	800be42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	691b      	ldr	r3, [r3, #16]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d01a      	beq.n	800be56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	3310      	adds	r3, #16
 800be24:	4618      	mov	r0, r3
 800be26:	f001 fdfd 	bl	800da24 <xTaskRemoveFromEventList>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d012      	beq.n	800be56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800be30:	4b0c      	ldr	r3, [pc, #48]	; (800be64 <xQueueGenericReset+0xcc>)
 800be32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be36:	601a      	str	r2, [r3, #0]
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	e009      	b.n	800be56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	3310      	adds	r3, #16
 800be46:	4618      	mov	r0, r3
 800be48:	f7ff fef2 	bl	800bc30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	3324      	adds	r3, #36	; 0x24
 800be50:	4618      	mov	r0, r3
 800be52:	f7ff feed 	bl	800bc30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800be56:	f002 fe3d 	bl	800ead4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800be5a:	2301      	movs	r3, #1
}
 800be5c:	4618      	mov	r0, r3
 800be5e:	3710      	adds	r7, #16
 800be60:	46bd      	mov	sp, r7
 800be62:	bd80      	pop	{r7, pc}
 800be64:	e000ed04 	.word	0xe000ed04

0800be68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b08e      	sub	sp, #56	; 0x38
 800be6c:	af02      	add	r7, sp, #8
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
 800be74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d10a      	bne.n	800be92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800be7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be80:	f383 8811 	msr	BASEPRI, r3
 800be84:	f3bf 8f6f 	isb	sy
 800be88:	f3bf 8f4f 	dsb	sy
 800be8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800be8e:	bf00      	nop
 800be90:	e7fe      	b.n	800be90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10a      	bne.n	800beae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800be98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be9c:	f383 8811 	msr	BASEPRI, r3
 800bea0:	f3bf 8f6f 	isb	sy
 800bea4:	f3bf 8f4f 	dsb	sy
 800bea8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800beaa:	bf00      	nop
 800beac:	e7fe      	b.n	800beac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d002      	beq.n	800beba <xQueueGenericCreateStatic+0x52>
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d001      	beq.n	800bebe <xQueueGenericCreateStatic+0x56>
 800beba:	2301      	movs	r3, #1
 800bebc:	e000      	b.n	800bec0 <xQueueGenericCreateStatic+0x58>
 800bebe:	2300      	movs	r3, #0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d10a      	bne.n	800beda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800bec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec8:	f383 8811 	msr	BASEPRI, r3
 800becc:	f3bf 8f6f 	isb	sy
 800bed0:	f3bf 8f4f 	dsb	sy
 800bed4:	623b      	str	r3, [r7, #32]
}
 800bed6:	bf00      	nop
 800bed8:	e7fe      	b.n	800bed8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d102      	bne.n	800bee6 <xQueueGenericCreateStatic+0x7e>
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d101      	bne.n	800beea <xQueueGenericCreateStatic+0x82>
 800bee6:	2301      	movs	r3, #1
 800bee8:	e000      	b.n	800beec <xQueueGenericCreateStatic+0x84>
 800beea:	2300      	movs	r3, #0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d10a      	bne.n	800bf06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800bef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef4:	f383 8811 	msr	BASEPRI, r3
 800bef8:	f3bf 8f6f 	isb	sy
 800befc:	f3bf 8f4f 	dsb	sy
 800bf00:	61fb      	str	r3, [r7, #28]
}
 800bf02:	bf00      	nop
 800bf04:	e7fe      	b.n	800bf04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bf06:	2350      	movs	r3, #80	; 0x50
 800bf08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	2b50      	cmp	r3, #80	; 0x50
 800bf0e:	d00a      	beq.n	800bf26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800bf10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf14:	f383 8811 	msr	BASEPRI, r3
 800bf18:	f3bf 8f6f 	isb	sy
 800bf1c:	f3bf 8f4f 	dsb	sy
 800bf20:	61bb      	str	r3, [r7, #24]
}
 800bf22:	bf00      	nop
 800bf24:	e7fe      	b.n	800bf24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bf26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bf2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d00d      	beq.n	800bf4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bf32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf34:	2201      	movs	r2, #1
 800bf36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bf3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf40:	9300      	str	r3, [sp, #0]
 800bf42:	4613      	mov	r3, r2
 800bf44:	687a      	ldr	r2, [r7, #4]
 800bf46:	68b9      	ldr	r1, [r7, #8]
 800bf48:	68f8      	ldr	r0, [r7, #12]
 800bf4a:	f000 f83f 	bl	800bfcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3730      	adds	r7, #48	; 0x30
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b08a      	sub	sp, #40	; 0x28
 800bf5c:	af02      	add	r7, sp, #8
 800bf5e:	60f8      	str	r0, [r7, #12]
 800bf60:	60b9      	str	r1, [r7, #8]
 800bf62:	4613      	mov	r3, r2
 800bf64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d10a      	bne.n	800bf82 <xQueueGenericCreate+0x2a>
	__asm volatile
 800bf6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf70:	f383 8811 	msr	BASEPRI, r3
 800bf74:	f3bf 8f6f 	isb	sy
 800bf78:	f3bf 8f4f 	dsb	sy
 800bf7c:	613b      	str	r3, [r7, #16]
}
 800bf7e:	bf00      	nop
 800bf80:	e7fe      	b.n	800bf80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	68ba      	ldr	r2, [r7, #8]
 800bf86:	fb02 f303 	mul.w	r3, r2, r3
 800bf8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	3350      	adds	r3, #80	; 0x50
 800bf90:	4618      	mov	r0, r3
 800bf92:	f002 fe91 	bl	800ecb8 <pvPortMalloc>
 800bf96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bf98:	69bb      	ldr	r3, [r7, #24]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d011      	beq.n	800bfc2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bf9e:	69bb      	ldr	r3, [r7, #24]
 800bfa0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bfa2:	697b      	ldr	r3, [r7, #20]
 800bfa4:	3350      	adds	r3, #80	; 0x50
 800bfa6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bfa8:	69bb      	ldr	r3, [r7, #24]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bfb0:	79fa      	ldrb	r2, [r7, #7]
 800bfb2:	69bb      	ldr	r3, [r7, #24]
 800bfb4:	9300      	str	r3, [sp, #0]
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	697a      	ldr	r2, [r7, #20]
 800bfba:	68b9      	ldr	r1, [r7, #8]
 800bfbc:	68f8      	ldr	r0, [r7, #12]
 800bfbe:	f000 f805 	bl	800bfcc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bfc2:	69bb      	ldr	r3, [r7, #24]
	}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3720      	adds	r7, #32
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b084      	sub	sp, #16
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	60f8      	str	r0, [r7, #12]
 800bfd4:	60b9      	str	r1, [r7, #8]
 800bfd6:	607a      	str	r2, [r7, #4]
 800bfd8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d103      	bne.n	800bfe8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bfe0:	69bb      	ldr	r3, [r7, #24]
 800bfe2:	69ba      	ldr	r2, [r7, #24]
 800bfe4:	601a      	str	r2, [r3, #0]
 800bfe6:	e002      	b.n	800bfee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	687a      	ldr	r2, [r7, #4]
 800bfec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bfee:	69bb      	ldr	r3, [r7, #24]
 800bff0:	68fa      	ldr	r2, [r7, #12]
 800bff2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	68ba      	ldr	r2, [r7, #8]
 800bff8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bffa:	2101      	movs	r1, #1
 800bffc:	69b8      	ldr	r0, [r7, #24]
 800bffe:	f7ff fecb 	bl	800bd98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	78fa      	ldrb	r2, [r7, #3]
 800c006:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c00a:	bf00      	nop
 800c00c:	3710      	adds	r7, #16
 800c00e:	46bd      	mov	sp, r7
 800c010:	bd80      	pop	{r7, pc}

0800c012 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c012:	b580      	push	{r7, lr}
 800c014:	b082      	sub	sp, #8
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d00e      	beq.n	800c03e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2200      	movs	r2, #0
 800c030:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c032:	2300      	movs	r3, #0
 800c034:	2200      	movs	r2, #0
 800c036:	2100      	movs	r1, #0
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 f90b 	bl	800c254 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c03e:	bf00      	nop
 800c040:	3708      	adds	r7, #8
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c046:	b580      	push	{r7, lr}
 800c048:	b086      	sub	sp, #24
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	4603      	mov	r3, r0
 800c04e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c050:	2301      	movs	r3, #1
 800c052:	617b      	str	r3, [r7, #20]
 800c054:	2300      	movs	r3, #0
 800c056:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c058:	79fb      	ldrb	r3, [r7, #7]
 800c05a:	461a      	mov	r2, r3
 800c05c:	6939      	ldr	r1, [r7, #16]
 800c05e:	6978      	ldr	r0, [r7, #20]
 800c060:	f7ff ff7a 	bl	800bf58 <xQueueGenericCreate>
 800c064:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c066:	68f8      	ldr	r0, [r7, #12]
 800c068:	f7ff ffd3 	bl	800c012 <prvInitialiseMutex>

		return xNewQueue;
 800c06c:	68fb      	ldr	r3, [r7, #12]
	}
 800c06e:	4618      	mov	r0, r3
 800c070:	3718      	adds	r7, #24
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c076:	b580      	push	{r7, lr}
 800c078:	b088      	sub	sp, #32
 800c07a:	af02      	add	r7, sp, #8
 800c07c:	4603      	mov	r3, r0
 800c07e:	6039      	str	r1, [r7, #0]
 800c080:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c082:	2301      	movs	r3, #1
 800c084:	617b      	str	r3, [r7, #20]
 800c086:	2300      	movs	r3, #0
 800c088:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c08a:	79fb      	ldrb	r3, [r7, #7]
 800c08c:	9300      	str	r3, [sp, #0]
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	2200      	movs	r2, #0
 800c092:	6939      	ldr	r1, [r7, #16]
 800c094:	6978      	ldr	r0, [r7, #20]
 800c096:	f7ff fee7 	bl	800be68 <xQueueGenericCreateStatic>
 800c09a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c09c:	68f8      	ldr	r0, [r7, #12]
 800c09e:	f7ff ffb8 	bl	800c012 <prvInitialiseMutex>

		return xNewQueue;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
	}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3718      	adds	r7, #24
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c0ac:	b590      	push	{r4, r7, lr}
 800c0ae:	b087      	sub	sp, #28
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d10a      	bne.n	800c0d4 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800c0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	60fb      	str	r3, [r7, #12]
}
 800c0d0:	bf00      	nop
 800c0d2:	e7fe      	b.n	800c0d2 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	689c      	ldr	r4, [r3, #8]
 800c0d8:	f001 fe66 	bl	800dda8 <xTaskGetCurrentTaskHandle>
 800c0dc:	4603      	mov	r3, r0
 800c0de:	429c      	cmp	r4, r3
 800c0e0:	d111      	bne.n	800c106 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	68db      	ldr	r3, [r3, #12]
 800c0e6:	1e5a      	subs	r2, r3, #1
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c0ec:	693b      	ldr	r3, [r7, #16]
 800c0ee:	68db      	ldr	r3, [r3, #12]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d105      	bne.n	800c100 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	2100      	movs	r1, #0
 800c0fa:	6938      	ldr	r0, [r7, #16]
 800c0fc:	f000 f8aa 	bl	800c254 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c100:	2301      	movs	r3, #1
 800c102:	617b      	str	r3, [r7, #20]
 800c104:	e001      	b.n	800c10a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c106:	2300      	movs	r3, #0
 800c108:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c10a:	697b      	ldr	r3, [r7, #20]
	}
 800c10c:	4618      	mov	r0, r3
 800c10e:	371c      	adds	r7, #28
 800c110:	46bd      	mov	sp, r7
 800c112:	bd90      	pop	{r4, r7, pc}

0800c114 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c114:	b590      	push	{r4, r7, lr}
 800c116:	b087      	sub	sp, #28
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d10a      	bne.n	800c13e <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800c128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c12c:	f383 8811 	msr	BASEPRI, r3
 800c130:	f3bf 8f6f 	isb	sy
 800c134:	f3bf 8f4f 	dsb	sy
 800c138:	60fb      	str	r3, [r7, #12]
}
 800c13a:	bf00      	nop
 800c13c:	e7fe      	b.n	800c13c <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c13e:	693b      	ldr	r3, [r7, #16]
 800c140:	689c      	ldr	r4, [r3, #8]
 800c142:	f001 fe31 	bl	800dda8 <xTaskGetCurrentTaskHandle>
 800c146:	4603      	mov	r3, r0
 800c148:	429c      	cmp	r4, r3
 800c14a:	d107      	bne.n	800c15c <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	68db      	ldr	r3, [r3, #12]
 800c150:	1c5a      	adds	r2, r3, #1
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c156:	2301      	movs	r3, #1
 800c158:	617b      	str	r3, [r7, #20]
 800c15a:	e00c      	b.n	800c176 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c15c:	6839      	ldr	r1, [r7, #0]
 800c15e:	6938      	ldr	r0, [r7, #16]
 800c160:	f000 fb7e 	bl	800c860 <xQueueSemaphoreTake>
 800c164:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d004      	beq.n	800c176 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	68db      	ldr	r3, [r3, #12]
 800c170:	1c5a      	adds	r2, r3, #1
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c176:	697b      	ldr	r3, [r7, #20]
	}
 800c178:	4618      	mov	r0, r3
 800c17a:	371c      	adds	r7, #28
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd90      	pop	{r4, r7, pc}

0800c180 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c180:	b580      	push	{r7, lr}
 800c182:	b08a      	sub	sp, #40	; 0x28
 800c184:	af02      	add	r7, sp, #8
 800c186:	60f8      	str	r0, [r7, #12]
 800c188:	60b9      	str	r1, [r7, #8]
 800c18a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d10a      	bne.n	800c1a8 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800c192:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c196:	f383 8811 	msr	BASEPRI, r3
 800c19a:	f3bf 8f6f 	isb	sy
 800c19e:	f3bf 8f4f 	dsb	sy
 800c1a2:	61bb      	str	r3, [r7, #24]
}
 800c1a4:	bf00      	nop
 800c1a6:	e7fe      	b.n	800c1a6 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c1a8:	68ba      	ldr	r2, [r7, #8]
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d90a      	bls.n	800c1c6 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800c1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b4:	f383 8811 	msr	BASEPRI, r3
 800c1b8:	f3bf 8f6f 	isb	sy
 800c1bc:	f3bf 8f4f 	dsb	sy
 800c1c0:	617b      	str	r3, [r7, #20]
}
 800c1c2:	bf00      	nop
 800c1c4:	e7fe      	b.n	800c1c4 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c1c6:	2302      	movs	r3, #2
 800c1c8:	9300      	str	r3, [sp, #0]
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	2100      	movs	r1, #0
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	f7ff fe49 	bl	800be68 <xQueueGenericCreateStatic>
 800c1d6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c1d8:	69fb      	ldr	r3, [r7, #28]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d002      	beq.n	800c1e4 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c1de:	69fb      	ldr	r3, [r7, #28]
 800c1e0:	68ba      	ldr	r2, [r7, #8]
 800c1e2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c1e4:	69fb      	ldr	r3, [r7, #28]
	}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3720      	adds	r7, #32
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}

0800c1ee <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c1ee:	b580      	push	{r7, lr}
 800c1f0:	b086      	sub	sp, #24
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
 800c1f6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d10a      	bne.n	800c214 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c202:	f383 8811 	msr	BASEPRI, r3
 800c206:	f3bf 8f6f 	isb	sy
 800c20a:	f3bf 8f4f 	dsb	sy
 800c20e:	613b      	str	r3, [r7, #16]
}
 800c210:	bf00      	nop
 800c212:	e7fe      	b.n	800c212 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c214:	683a      	ldr	r2, [r7, #0]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	429a      	cmp	r2, r3
 800c21a:	d90a      	bls.n	800c232 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800c21c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c220:	f383 8811 	msr	BASEPRI, r3
 800c224:	f3bf 8f6f 	isb	sy
 800c228:	f3bf 8f4f 	dsb	sy
 800c22c:	60fb      	str	r3, [r7, #12]
}
 800c22e:	bf00      	nop
 800c230:	e7fe      	b.n	800c230 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c232:	2202      	movs	r2, #2
 800c234:	2100      	movs	r1, #0
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f7ff fe8e 	bl	800bf58 <xQueueGenericCreate>
 800c23c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d002      	beq.n	800c24a <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	683a      	ldr	r2, [r7, #0]
 800c248:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c24a:	697b      	ldr	r3, [r7, #20]
	}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3718      	adds	r7, #24
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b08e      	sub	sp, #56	; 0x38
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	607a      	str	r2, [r7, #4]
 800c260:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c262:	2300      	movs	r3, #0
 800c264:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c26a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d10a      	bne.n	800c286 <xQueueGenericSend+0x32>
	__asm volatile
 800c270:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c274:	f383 8811 	msr	BASEPRI, r3
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c282:	bf00      	nop
 800c284:	e7fe      	b.n	800c284 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d103      	bne.n	800c294 <xQueueGenericSend+0x40>
 800c28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c290:	2b00      	cmp	r3, #0
 800c292:	d101      	bne.n	800c298 <xQueueGenericSend+0x44>
 800c294:	2301      	movs	r3, #1
 800c296:	e000      	b.n	800c29a <xQueueGenericSend+0x46>
 800c298:	2300      	movs	r3, #0
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d10a      	bne.n	800c2b4 <xQueueGenericSend+0x60>
	__asm volatile
 800c29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a2:	f383 8811 	msr	BASEPRI, r3
 800c2a6:	f3bf 8f6f 	isb	sy
 800c2aa:	f3bf 8f4f 	dsb	sy
 800c2ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c2b0:	bf00      	nop
 800c2b2:	e7fe      	b.n	800c2b2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	2b02      	cmp	r3, #2
 800c2b8:	d103      	bne.n	800c2c2 <xQueueGenericSend+0x6e>
 800c2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2be:	2b01      	cmp	r3, #1
 800c2c0:	d101      	bne.n	800c2c6 <xQueueGenericSend+0x72>
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	e000      	b.n	800c2c8 <xQueueGenericSend+0x74>
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d10a      	bne.n	800c2e2 <xQueueGenericSend+0x8e>
	__asm volatile
 800c2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d0:	f383 8811 	msr	BASEPRI, r3
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	f3bf 8f4f 	dsb	sy
 800c2dc:	623b      	str	r3, [r7, #32]
}
 800c2de:	bf00      	nop
 800c2e0:	e7fe      	b.n	800c2e0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2e2:	f001 fd71 	bl	800ddc8 <xTaskGetSchedulerState>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d102      	bne.n	800c2f2 <xQueueGenericSend+0x9e>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d101      	bne.n	800c2f6 <xQueueGenericSend+0xa2>
 800c2f2:	2301      	movs	r3, #1
 800c2f4:	e000      	b.n	800c2f8 <xQueueGenericSend+0xa4>
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d10a      	bne.n	800c312 <xQueueGenericSend+0xbe>
	__asm volatile
 800c2fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c300:	f383 8811 	msr	BASEPRI, r3
 800c304:	f3bf 8f6f 	isb	sy
 800c308:	f3bf 8f4f 	dsb	sy
 800c30c:	61fb      	str	r3, [r7, #28]
}
 800c30e:	bf00      	nop
 800c310:	e7fe      	b.n	800c310 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c312:	f002 fbaf 	bl	800ea74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c31e:	429a      	cmp	r2, r3
 800c320:	d302      	bcc.n	800c328 <xQueueGenericSend+0xd4>
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	2b02      	cmp	r3, #2
 800c326:	d129      	bne.n	800c37c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c328:	683a      	ldr	r2, [r7, #0]
 800c32a:	68b9      	ldr	r1, [r7, #8]
 800c32c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c32e:	f000 fc9a 	bl	800cc66 <prvCopyDataToQueue>
 800c332:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d010      	beq.n	800c35e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33e:	3324      	adds	r3, #36	; 0x24
 800c340:	4618      	mov	r0, r3
 800c342:	f001 fb6f 	bl	800da24 <xTaskRemoveFromEventList>
 800c346:	4603      	mov	r3, r0
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d013      	beq.n	800c374 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c34c:	4b3f      	ldr	r3, [pc, #252]	; (800c44c <xQueueGenericSend+0x1f8>)
 800c34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c352:	601a      	str	r2, [r3, #0]
 800c354:	f3bf 8f4f 	dsb	sy
 800c358:	f3bf 8f6f 	isb	sy
 800c35c:	e00a      	b.n	800c374 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c360:	2b00      	cmp	r3, #0
 800c362:	d007      	beq.n	800c374 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c364:	4b39      	ldr	r3, [pc, #228]	; (800c44c <xQueueGenericSend+0x1f8>)
 800c366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c36a:	601a      	str	r2, [r3, #0]
 800c36c:	f3bf 8f4f 	dsb	sy
 800c370:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c374:	f002 fbae 	bl	800ead4 <vPortExitCritical>
				return pdPASS;
 800c378:	2301      	movs	r3, #1
 800c37a:	e063      	b.n	800c444 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d103      	bne.n	800c38a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c382:	f002 fba7 	bl	800ead4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c386:	2300      	movs	r3, #0
 800c388:	e05c      	b.n	800c444 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c38a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d106      	bne.n	800c39e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c390:	f107 0314 	add.w	r3, r7, #20
 800c394:	4618      	mov	r0, r3
 800c396:	f001 fba9 	bl	800daec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c39a:	2301      	movs	r3, #1
 800c39c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c39e:	f002 fb99 	bl	800ead4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c3a2:	f001 f8e9 	bl	800d578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c3a6:	f002 fb65 	bl	800ea74 <vPortEnterCritical>
 800c3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3b0:	b25b      	sxtb	r3, r3
 800c3b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3b6:	d103      	bne.n	800c3c0 <xQueueGenericSend+0x16c>
 800c3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3c6:	b25b      	sxtb	r3, r3
 800c3c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c3cc:	d103      	bne.n	800c3d6 <xQueueGenericSend+0x182>
 800c3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3d6:	f002 fb7d 	bl	800ead4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3da:	1d3a      	adds	r2, r7, #4
 800c3dc:	f107 0314 	add.w	r3, r7, #20
 800c3e0:	4611      	mov	r1, r2
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f001 fb98 	bl	800db18 <xTaskCheckForTimeOut>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d124      	bne.n	800c438 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c3ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c3f0:	f000 fd31 	bl	800ce56 <prvIsQueueFull>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d018      	beq.n	800c42c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fc:	3310      	adds	r3, #16
 800c3fe:	687a      	ldr	r2, [r7, #4]
 800c400:	4611      	mov	r1, r2
 800c402:	4618      	mov	r0, r3
 800c404:	f001 fabe 	bl	800d984 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c408:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c40a:	f000 fcbc 	bl	800cd86 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c40e:	f001 f8c1 	bl	800d594 <xTaskResumeAll>
 800c412:	4603      	mov	r3, r0
 800c414:	2b00      	cmp	r3, #0
 800c416:	f47f af7c 	bne.w	800c312 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c41a:	4b0c      	ldr	r3, [pc, #48]	; (800c44c <xQueueGenericSend+0x1f8>)
 800c41c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c420:	601a      	str	r2, [r3, #0]
 800c422:	f3bf 8f4f 	dsb	sy
 800c426:	f3bf 8f6f 	isb	sy
 800c42a:	e772      	b.n	800c312 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c42c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c42e:	f000 fcaa 	bl	800cd86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c432:	f001 f8af 	bl	800d594 <xTaskResumeAll>
 800c436:	e76c      	b.n	800c312 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c438:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c43a:	f000 fca4 	bl	800cd86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c43e:	f001 f8a9 	bl	800d594 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c442:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c444:	4618      	mov	r0, r3
 800c446:	3738      	adds	r7, #56	; 0x38
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	e000ed04 	.word	0xe000ed04

0800c450 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b090      	sub	sp, #64	; 0x40
 800c454:	af00      	add	r7, sp, #0
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	60b9      	str	r1, [r7, #8]
 800c45a:	607a      	str	r2, [r7, #4]
 800c45c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c464:	2b00      	cmp	r3, #0
 800c466:	d10a      	bne.n	800c47e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46c:	f383 8811 	msr	BASEPRI, r3
 800c470:	f3bf 8f6f 	isb	sy
 800c474:	f3bf 8f4f 	dsb	sy
 800c478:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c47a:	bf00      	nop
 800c47c:	e7fe      	b.n	800c47c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d103      	bne.n	800c48c <xQueueGenericSendFromISR+0x3c>
 800c484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d101      	bne.n	800c490 <xQueueGenericSendFromISR+0x40>
 800c48c:	2301      	movs	r3, #1
 800c48e:	e000      	b.n	800c492 <xQueueGenericSendFromISR+0x42>
 800c490:	2300      	movs	r3, #0
 800c492:	2b00      	cmp	r3, #0
 800c494:	d10a      	bne.n	800c4ac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c49a:	f383 8811 	msr	BASEPRI, r3
 800c49e:	f3bf 8f6f 	isb	sy
 800c4a2:	f3bf 8f4f 	dsb	sy
 800c4a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c4a8:	bf00      	nop
 800c4aa:	e7fe      	b.n	800c4aa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	2b02      	cmp	r3, #2
 800c4b0:	d103      	bne.n	800c4ba <xQueueGenericSendFromISR+0x6a>
 800c4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d101      	bne.n	800c4be <xQueueGenericSendFromISR+0x6e>
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	e000      	b.n	800c4c0 <xQueueGenericSendFromISR+0x70>
 800c4be:	2300      	movs	r3, #0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d10a      	bne.n	800c4da <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c4c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4c8:	f383 8811 	msr	BASEPRI, r3
 800c4cc:	f3bf 8f6f 	isb	sy
 800c4d0:	f3bf 8f4f 	dsb	sy
 800c4d4:	623b      	str	r3, [r7, #32]
}
 800c4d6:	bf00      	nop
 800c4d8:	e7fe      	b.n	800c4d8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c4da:	f002 fbad 	bl	800ec38 <vPortValidateInterruptPriority>
	__asm volatile
 800c4de:	f3ef 8211 	mrs	r2, BASEPRI
 800c4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4e6:	f383 8811 	msr	BASEPRI, r3
 800c4ea:	f3bf 8f6f 	isb	sy
 800c4ee:	f3bf 8f4f 	dsb	sy
 800c4f2:	61fa      	str	r2, [r7, #28]
 800c4f4:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c4f6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c4f8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c502:	429a      	cmp	r2, r3
 800c504:	d302      	bcc.n	800c50c <xQueueGenericSendFromISR+0xbc>
 800c506:	683b      	ldr	r3, [r7, #0]
 800c508:	2b02      	cmp	r3, #2
 800c50a:	d12f      	bne.n	800c56c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c50e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c51a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c51c:	683a      	ldr	r2, [r7, #0]
 800c51e:	68b9      	ldr	r1, [r7, #8]
 800c520:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c522:	f000 fba0 	bl	800cc66 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c526:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c52a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c52e:	d112      	bne.n	800c556 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c534:	2b00      	cmp	r3, #0
 800c536:	d016      	beq.n	800c566 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c53a:	3324      	adds	r3, #36	; 0x24
 800c53c:	4618      	mov	r0, r3
 800c53e:	f001 fa71 	bl	800da24 <xTaskRemoveFromEventList>
 800c542:	4603      	mov	r3, r0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d00e      	beq.n	800c566 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d00b      	beq.n	800c566 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	2201      	movs	r2, #1
 800c552:	601a      	str	r2, [r3, #0]
 800c554:	e007      	b.n	800c566 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c556:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c55a:	3301      	adds	r3, #1
 800c55c:	b2db      	uxtb	r3, r3
 800c55e:	b25a      	sxtb	r2, r3
 800c560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c566:	2301      	movs	r3, #1
 800c568:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c56a:	e001      	b.n	800c570 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c56c:	2300      	movs	r3, #0
 800c56e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c572:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	f383 8811 	msr	BASEPRI, r3
}
 800c57a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c57c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3740      	adds	r7, #64	; 0x40
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}

0800c586 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c586:	b580      	push	{r7, lr}
 800c588:	b08e      	sub	sp, #56	; 0x38
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	6078      	str	r0, [r7, #4]
 800c58e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c596:	2b00      	cmp	r3, #0
 800c598:	d10a      	bne.n	800c5b0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c59a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c59e:	f383 8811 	msr	BASEPRI, r3
 800c5a2:	f3bf 8f6f 	isb	sy
 800c5a6:	f3bf 8f4f 	dsb	sy
 800c5aa:	623b      	str	r3, [r7, #32]
}
 800c5ac:	bf00      	nop
 800c5ae:	e7fe      	b.n	800c5ae <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c5b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d00a      	beq.n	800c5ce <xQueueGiveFromISR+0x48>
	__asm volatile
 800c5b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5bc:	f383 8811 	msr	BASEPRI, r3
 800c5c0:	f3bf 8f6f 	isb	sy
 800c5c4:	f3bf 8f4f 	dsb	sy
 800c5c8:	61fb      	str	r3, [r7, #28]
}
 800c5ca:	bf00      	nop
 800c5cc:	e7fe      	b.n	800c5cc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c5ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d103      	bne.n	800c5de <xQueueGiveFromISR+0x58>
 800c5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d101      	bne.n	800c5e2 <xQueueGiveFromISR+0x5c>
 800c5de:	2301      	movs	r3, #1
 800c5e0:	e000      	b.n	800c5e4 <xQueueGiveFromISR+0x5e>
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d10a      	bne.n	800c5fe <xQueueGiveFromISR+0x78>
	__asm volatile
 800c5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ec:	f383 8811 	msr	BASEPRI, r3
 800c5f0:	f3bf 8f6f 	isb	sy
 800c5f4:	f3bf 8f4f 	dsb	sy
 800c5f8:	61bb      	str	r3, [r7, #24]
}
 800c5fa:	bf00      	nop
 800c5fc:	e7fe      	b.n	800c5fc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c5fe:	f002 fb1b 	bl	800ec38 <vPortValidateInterruptPriority>
	__asm volatile
 800c602:	f3ef 8211 	mrs	r2, BASEPRI
 800c606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60a:	f383 8811 	msr	BASEPRI, r3
 800c60e:	f3bf 8f6f 	isb	sy
 800c612:	f3bf 8f4f 	dsb	sy
 800c616:	617a      	str	r2, [r7, #20]
 800c618:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c61a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c61c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c622:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c628:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d22b      	bcs.n	800c686 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c630:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63a:	1c5a      	adds	r2, r3, #1
 800c63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c63e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c640:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c644:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c648:	d112      	bne.n	800c670 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d016      	beq.n	800c680 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c654:	3324      	adds	r3, #36	; 0x24
 800c656:	4618      	mov	r0, r3
 800c658:	f001 f9e4 	bl	800da24 <xTaskRemoveFromEventList>
 800c65c:	4603      	mov	r3, r0
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d00e      	beq.n	800c680 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	2b00      	cmp	r3, #0
 800c666:	d00b      	beq.n	800c680 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	2201      	movs	r2, #1
 800c66c:	601a      	str	r2, [r3, #0]
 800c66e:	e007      	b.n	800c680 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c670:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c674:	3301      	adds	r3, #1
 800c676:	b2db      	uxtb	r3, r3
 800c678:	b25a      	sxtb	r2, r3
 800c67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c680:	2301      	movs	r3, #1
 800c682:	637b      	str	r3, [r7, #52]	; 0x34
 800c684:	e001      	b.n	800c68a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c686:	2300      	movs	r3, #0
 800c688:	637b      	str	r3, [r7, #52]	; 0x34
 800c68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	f383 8811 	msr	BASEPRI, r3
}
 800c694:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3738      	adds	r7, #56	; 0x38
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b08c      	sub	sp, #48	; 0x30
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	60f8      	str	r0, [r7, #12]
 800c6a8:	60b9      	str	r1, [r7, #8]
 800c6aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c6b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d10a      	bne.n	800c6d0 <xQueueReceive+0x30>
	__asm volatile
 800c6ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6be:	f383 8811 	msr	BASEPRI, r3
 800c6c2:	f3bf 8f6f 	isb	sy
 800c6c6:	f3bf 8f4f 	dsb	sy
 800c6ca:	623b      	str	r3, [r7, #32]
}
 800c6cc:	bf00      	nop
 800c6ce:	e7fe      	b.n	800c6ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c6d0:	68bb      	ldr	r3, [r7, #8]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d103      	bne.n	800c6de <xQueueReceive+0x3e>
 800c6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d101      	bne.n	800c6e2 <xQueueReceive+0x42>
 800c6de:	2301      	movs	r3, #1
 800c6e0:	e000      	b.n	800c6e4 <xQueueReceive+0x44>
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d10a      	bne.n	800c6fe <xQueueReceive+0x5e>
	__asm volatile
 800c6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ec:	f383 8811 	msr	BASEPRI, r3
 800c6f0:	f3bf 8f6f 	isb	sy
 800c6f4:	f3bf 8f4f 	dsb	sy
 800c6f8:	61fb      	str	r3, [r7, #28]
}
 800c6fa:	bf00      	nop
 800c6fc:	e7fe      	b.n	800c6fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c6fe:	f001 fb63 	bl	800ddc8 <xTaskGetSchedulerState>
 800c702:	4603      	mov	r3, r0
 800c704:	2b00      	cmp	r3, #0
 800c706:	d102      	bne.n	800c70e <xQueueReceive+0x6e>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d101      	bne.n	800c712 <xQueueReceive+0x72>
 800c70e:	2301      	movs	r3, #1
 800c710:	e000      	b.n	800c714 <xQueueReceive+0x74>
 800c712:	2300      	movs	r3, #0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d10a      	bne.n	800c72e <xQueueReceive+0x8e>
	__asm volatile
 800c718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c71c:	f383 8811 	msr	BASEPRI, r3
 800c720:	f3bf 8f6f 	isb	sy
 800c724:	f3bf 8f4f 	dsb	sy
 800c728:	61bb      	str	r3, [r7, #24]
}
 800c72a:	bf00      	nop
 800c72c:	e7fe      	b.n	800c72c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c72e:	f002 f9a1 	bl	800ea74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c736:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d01f      	beq.n	800c77e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c73e:	68b9      	ldr	r1, [r7, #8]
 800c740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c742:	f000 fafa 	bl	800cd3a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c748:	1e5a      	subs	r2, r3, #1
 800c74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c74c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c750:	691b      	ldr	r3, [r3, #16]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d00f      	beq.n	800c776 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c758:	3310      	adds	r3, #16
 800c75a:	4618      	mov	r0, r3
 800c75c:	f001 f962 	bl	800da24 <xTaskRemoveFromEventList>
 800c760:	4603      	mov	r3, r0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d007      	beq.n	800c776 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c766:	4b3d      	ldr	r3, [pc, #244]	; (800c85c <xQueueReceive+0x1bc>)
 800c768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c76c:	601a      	str	r2, [r3, #0]
 800c76e:	f3bf 8f4f 	dsb	sy
 800c772:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c776:	f002 f9ad 	bl	800ead4 <vPortExitCritical>
				return pdPASS;
 800c77a:	2301      	movs	r3, #1
 800c77c:	e069      	b.n	800c852 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d103      	bne.n	800c78c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c784:	f002 f9a6 	bl	800ead4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c788:	2300      	movs	r3, #0
 800c78a:	e062      	b.n	800c852 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d106      	bne.n	800c7a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c792:	f107 0310 	add.w	r3, r7, #16
 800c796:	4618      	mov	r0, r3
 800c798:	f001 f9a8 	bl	800daec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c79c:	2301      	movs	r3, #1
 800c79e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c7a0:	f002 f998 	bl	800ead4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c7a4:	f000 fee8 	bl	800d578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c7a8:	f002 f964 	bl	800ea74 <vPortEnterCritical>
 800c7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7b2:	b25b      	sxtb	r3, r3
 800c7b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7b8:	d103      	bne.n	800c7c2 <xQueueReceive+0x122>
 800c7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7c8:	b25b      	sxtb	r3, r3
 800c7ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7ce:	d103      	bne.n	800c7d8 <xQueueReceive+0x138>
 800c7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7d8:	f002 f97c 	bl	800ead4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c7dc:	1d3a      	adds	r2, r7, #4
 800c7de:	f107 0310 	add.w	r3, r7, #16
 800c7e2:	4611      	mov	r1, r2
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f001 f997 	bl	800db18 <xTaskCheckForTimeOut>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d123      	bne.n	800c838 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c7f2:	f000 fb1a 	bl	800ce2a <prvIsQueueEmpty>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d017      	beq.n	800c82c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fe:	3324      	adds	r3, #36	; 0x24
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	4611      	mov	r1, r2
 800c804:	4618      	mov	r0, r3
 800c806:	f001 f8bd 	bl	800d984 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c80a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c80c:	f000 fabb 	bl	800cd86 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c810:	f000 fec0 	bl	800d594 <xTaskResumeAll>
 800c814:	4603      	mov	r3, r0
 800c816:	2b00      	cmp	r3, #0
 800c818:	d189      	bne.n	800c72e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c81a:	4b10      	ldr	r3, [pc, #64]	; (800c85c <xQueueReceive+0x1bc>)
 800c81c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c820:	601a      	str	r2, [r3, #0]
 800c822:	f3bf 8f4f 	dsb	sy
 800c826:	f3bf 8f6f 	isb	sy
 800c82a:	e780      	b.n	800c72e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c82c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c82e:	f000 faaa 	bl	800cd86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c832:	f000 feaf 	bl	800d594 <xTaskResumeAll>
 800c836:	e77a      	b.n	800c72e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c838:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c83a:	f000 faa4 	bl	800cd86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c83e:	f000 fea9 	bl	800d594 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c844:	f000 faf1 	bl	800ce2a <prvIsQueueEmpty>
 800c848:	4603      	mov	r3, r0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	f43f af6f 	beq.w	800c72e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c850:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c852:	4618      	mov	r0, r3
 800c854:	3730      	adds	r7, #48	; 0x30
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	e000ed04 	.word	0xe000ed04

0800c860 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b08e      	sub	sp, #56	; 0x38
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c86a:	2300      	movs	r3, #0
 800c86c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c872:	2300      	movs	r3, #0
 800c874:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d10a      	bne.n	800c892 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c880:	f383 8811 	msr	BASEPRI, r3
 800c884:	f3bf 8f6f 	isb	sy
 800c888:	f3bf 8f4f 	dsb	sy
 800c88c:	623b      	str	r3, [r7, #32]
}
 800c88e:	bf00      	nop
 800c890:	e7fe      	b.n	800c890 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c896:	2b00      	cmp	r3, #0
 800c898:	d00a      	beq.n	800c8b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89e:	f383 8811 	msr	BASEPRI, r3
 800c8a2:	f3bf 8f6f 	isb	sy
 800c8a6:	f3bf 8f4f 	dsb	sy
 800c8aa:	61fb      	str	r3, [r7, #28]
}
 800c8ac:	bf00      	nop
 800c8ae:	e7fe      	b.n	800c8ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c8b0:	f001 fa8a 	bl	800ddc8 <xTaskGetSchedulerState>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d102      	bne.n	800c8c0 <xQueueSemaphoreTake+0x60>
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d101      	bne.n	800c8c4 <xQueueSemaphoreTake+0x64>
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	e000      	b.n	800c8c6 <xQueueSemaphoreTake+0x66>
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d10a      	bne.n	800c8e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ce:	f383 8811 	msr	BASEPRI, r3
 800c8d2:	f3bf 8f6f 	isb	sy
 800c8d6:	f3bf 8f4f 	dsb	sy
 800c8da:	61bb      	str	r3, [r7, #24]
}
 800c8dc:	bf00      	nop
 800c8de:	e7fe      	b.n	800c8de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c8e0:	f002 f8c8 	bl	800ea74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d024      	beq.n	800c93a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f2:	1e5a      	subs	r2, r3, #1
 800c8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d104      	bne.n	800c90a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c900:	f001 fbd8 	bl	800e0b4 <pvTaskIncrementMutexHeldCount>
 800c904:	4602      	mov	r2, r0
 800c906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c908:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c90a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90c:	691b      	ldr	r3, [r3, #16]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d00f      	beq.n	800c932 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c914:	3310      	adds	r3, #16
 800c916:	4618      	mov	r0, r3
 800c918:	f001 f884 	bl	800da24 <xTaskRemoveFromEventList>
 800c91c:	4603      	mov	r3, r0
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d007      	beq.n	800c932 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c922:	4b54      	ldr	r3, [pc, #336]	; (800ca74 <xQueueSemaphoreTake+0x214>)
 800c924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c928:	601a      	str	r2, [r3, #0]
 800c92a:	f3bf 8f4f 	dsb	sy
 800c92e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c932:	f002 f8cf 	bl	800ead4 <vPortExitCritical>
				return pdPASS;
 800c936:	2301      	movs	r3, #1
 800c938:	e097      	b.n	800ca6a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d111      	bne.n	800c964 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c942:	2b00      	cmp	r3, #0
 800c944:	d00a      	beq.n	800c95c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94a:	f383 8811 	msr	BASEPRI, r3
 800c94e:	f3bf 8f6f 	isb	sy
 800c952:	f3bf 8f4f 	dsb	sy
 800c956:	617b      	str	r3, [r7, #20]
}
 800c958:	bf00      	nop
 800c95a:	e7fe      	b.n	800c95a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c95c:	f002 f8ba 	bl	800ead4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c960:	2300      	movs	r3, #0
 800c962:	e082      	b.n	800ca6a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c966:	2b00      	cmp	r3, #0
 800c968:	d106      	bne.n	800c978 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c96a:	f107 030c 	add.w	r3, r7, #12
 800c96e:	4618      	mov	r0, r3
 800c970:	f001 f8bc 	bl	800daec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c974:	2301      	movs	r3, #1
 800c976:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c978:	f002 f8ac 	bl	800ead4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c97c:	f000 fdfc 	bl	800d578 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c980:	f002 f878 	bl	800ea74 <vPortEnterCritical>
 800c984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c986:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c98a:	b25b      	sxtb	r3, r3
 800c98c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c990:	d103      	bne.n	800c99a <xQueueSemaphoreTake+0x13a>
 800c992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c994:	2200      	movs	r2, #0
 800c996:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9a0:	b25b      	sxtb	r3, r3
 800c9a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9a6:	d103      	bne.n	800c9b0 <xQueueSemaphoreTake+0x150>
 800c9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c9b0:	f002 f890 	bl	800ead4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c9b4:	463a      	mov	r2, r7
 800c9b6:	f107 030c 	add.w	r3, r7, #12
 800c9ba:	4611      	mov	r1, r2
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f001 f8ab 	bl	800db18 <xTaskCheckForTimeOut>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d132      	bne.n	800ca2e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c9c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9ca:	f000 fa2e 	bl	800ce2a <prvIsQueueEmpty>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d026      	beq.n	800ca22 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d109      	bne.n	800c9f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c9dc:	f002 f84a 	bl	800ea74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f001 fa0d 	bl	800de04 <xTaskPriorityInherit>
 800c9ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c9ec:	f002 f872 	bl	800ead4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f2:	3324      	adds	r3, #36	; 0x24
 800c9f4:	683a      	ldr	r2, [r7, #0]
 800c9f6:	4611      	mov	r1, r2
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f000 ffc3 	bl	800d984 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c9fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca00:	f000 f9c1 	bl	800cd86 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ca04:	f000 fdc6 	bl	800d594 <xTaskResumeAll>
 800ca08:	4603      	mov	r3, r0
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	f47f af68 	bne.w	800c8e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ca10:	4b18      	ldr	r3, [pc, #96]	; (800ca74 <xQueueSemaphoreTake+0x214>)
 800ca12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca16:	601a      	str	r2, [r3, #0]
 800ca18:	f3bf 8f4f 	dsb	sy
 800ca1c:	f3bf 8f6f 	isb	sy
 800ca20:	e75e      	b.n	800c8e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ca22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca24:	f000 f9af 	bl	800cd86 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca28:	f000 fdb4 	bl	800d594 <xTaskResumeAll>
 800ca2c:	e758      	b.n	800c8e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ca2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca30:	f000 f9a9 	bl	800cd86 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca34:	f000 fdae 	bl	800d594 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca3a:	f000 f9f6 	bl	800ce2a <prvIsQueueEmpty>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	f43f af4d 	beq.w	800c8e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ca46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d00d      	beq.n	800ca68 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ca4c:	f002 f812 	bl	800ea74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ca50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ca52:	f000 f8f0 	bl	800cc36 <prvGetDisinheritPriorityAfterTimeout>
 800ca56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ca58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca5a:	689b      	ldr	r3, [r3, #8]
 800ca5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f001 faa6 	bl	800dfb0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ca64:	f002 f836 	bl	800ead4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ca68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3738      	adds	r7, #56	; 0x38
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}
 800ca72:	bf00      	nop
 800ca74:	e000ed04 	.word	0xe000ed04

0800ca78 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b08e      	sub	sp, #56	; 0x38
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	60b9      	str	r1, [r7, #8]
 800ca82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ca88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d10a      	bne.n	800caa4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ca8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca92:	f383 8811 	msr	BASEPRI, r3
 800ca96:	f3bf 8f6f 	isb	sy
 800ca9a:	f3bf 8f4f 	dsb	sy
 800ca9e:	623b      	str	r3, [r7, #32]
}
 800caa0:	bf00      	nop
 800caa2:	e7fe      	b.n	800caa2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800caa4:	68bb      	ldr	r3, [r7, #8]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d103      	bne.n	800cab2 <xQueueReceiveFromISR+0x3a>
 800caaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d101      	bne.n	800cab6 <xQueueReceiveFromISR+0x3e>
 800cab2:	2301      	movs	r3, #1
 800cab4:	e000      	b.n	800cab8 <xQueueReceiveFromISR+0x40>
 800cab6:	2300      	movs	r3, #0
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d10a      	bne.n	800cad2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800cabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac0:	f383 8811 	msr	BASEPRI, r3
 800cac4:	f3bf 8f6f 	isb	sy
 800cac8:	f3bf 8f4f 	dsb	sy
 800cacc:	61fb      	str	r3, [r7, #28]
}
 800cace:	bf00      	nop
 800cad0:	e7fe      	b.n	800cad0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cad2:	f002 f8b1 	bl	800ec38 <vPortValidateInterruptPriority>
	__asm volatile
 800cad6:	f3ef 8211 	mrs	r2, BASEPRI
 800cada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cade:	f383 8811 	msr	BASEPRI, r3
 800cae2:	f3bf 8f6f 	isb	sy
 800cae6:	f3bf 8f4f 	dsb	sy
 800caea:	61ba      	str	r2, [r7, #24]
 800caec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800caee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800caf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800caf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caf6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800caf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d02f      	beq.n	800cb5e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cb08:	68b9      	ldr	r1, [r7, #8]
 800cb0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb0c:	f000 f915 	bl	800cd3a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cb10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb12:	1e5a      	subs	r2, r3, #1
 800cb14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb16:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cb18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cb1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb20:	d112      	bne.n	800cb48 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb24:	691b      	ldr	r3, [r3, #16]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d016      	beq.n	800cb58 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb2c:	3310      	adds	r3, #16
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f000 ff78 	bl	800da24 <xTaskRemoveFromEventList>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d00e      	beq.n	800cb58 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d00b      	beq.n	800cb58 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2201      	movs	r2, #1
 800cb44:	601a      	str	r2, [r3, #0]
 800cb46:	e007      	b.n	800cb58 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cb48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb4c:	3301      	adds	r3, #1
 800cb4e:	b2db      	uxtb	r3, r3
 800cb50:	b25a      	sxtb	r2, r3
 800cb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cb58:	2301      	movs	r3, #1
 800cb5a:	637b      	str	r3, [r7, #52]	; 0x34
 800cb5c:	e001      	b.n	800cb62 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	637b      	str	r3, [r7, #52]	; 0x34
 800cb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb64:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	f383 8811 	msr	BASEPRI, r3
}
 800cb6c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3738      	adds	r7, #56	; 0x38
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d10a      	bne.n	800cb9c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800cb86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8a:	f383 8811 	msr	BASEPRI, r3
 800cb8e:	f3bf 8f6f 	isb	sy
 800cb92:	f3bf 8f4f 	dsb	sy
 800cb96:	60bb      	str	r3, [r7, #8]
}
 800cb98:	bf00      	nop
 800cb9a:	e7fe      	b.n	800cb9a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800cb9c:	f001 ff6a 	bl	800ea74 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cba4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800cba6:	f001 ff95 	bl	800ead4 <vPortExitCritical>

	return uxReturn;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800cbac:	4618      	mov	r0, r3
 800cbae:	3710      	adds	r7, #16
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800cbb4:	b480      	push	{r7}
 800cbb6:	b087      	sub	sp, #28
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800cbc0:	697b      	ldr	r3, [r7, #20]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d10a      	bne.n	800cbdc <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800cbc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbca:	f383 8811 	msr	BASEPRI, r3
 800cbce:	f3bf 8f6f 	isb	sy
 800cbd2:	f3bf 8f4f 	dsb	sy
 800cbd6:	60fb      	str	r3, [r7, #12]
}
 800cbd8:	bf00      	nop
 800cbda:	e7fe      	b.n	800cbda <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbe0:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800cbe2:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	371c      	adds	r7, #28
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr

0800cbf0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d10a      	bne.n	800cc18 <vQueueDelete+0x28>
	__asm volatile
 800cc02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc06:	f383 8811 	msr	BASEPRI, r3
 800cc0a:	f3bf 8f6f 	isb	sy
 800cc0e:	f3bf 8f4f 	dsb	sy
 800cc12:	60bb      	str	r3, [r7, #8]
}
 800cc14:	bf00      	nop
 800cc16:	e7fe      	b.n	800cc16 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800cc18:	68f8      	ldr	r0, [r7, #12]
 800cc1a:	f000 f95f 	bl	800cedc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d102      	bne.n	800cc2e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800cc28:	68f8      	ldr	r0, [r7, #12]
 800cc2a:	f002 f915 	bl	800ee58 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cc2e:	bf00      	nop
 800cc30:	3710      	adds	r7, #16
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}

0800cc36 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cc36:	b480      	push	{r7}
 800cc38:	b085      	sub	sp, #20
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d006      	beq.n	800cc54 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800cc50:	60fb      	str	r3, [r7, #12]
 800cc52:	e001      	b.n	800cc58 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cc54:	2300      	movs	r3, #0
 800cc56:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cc58:	68fb      	ldr	r3, [r7, #12]
	}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3714      	adds	r7, #20
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc64:	4770      	bx	lr

0800cc66 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cc66:	b580      	push	{r7, lr}
 800cc68:	b086      	sub	sp, #24
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	60f8      	str	r0, [r7, #12]
 800cc6e:	60b9      	str	r1, [r7, #8]
 800cc70:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cc72:	2300      	movs	r3, #0
 800cc74:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc7a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d10d      	bne.n	800cca0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d14d      	bne.n	800cd28 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	689b      	ldr	r3, [r3, #8]
 800cc90:	4618      	mov	r0, r3
 800cc92:	f001 f91f 	bl	800ded4 <xTaskPriorityDisinherit>
 800cc96:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	609a      	str	r2, [r3, #8]
 800cc9e:	e043      	b.n	800cd28 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d119      	bne.n	800ccda <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	6858      	ldr	r0, [r3, #4]
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccae:	461a      	mov	r2, r3
 800ccb0:	68b9      	ldr	r1, [r7, #8]
 800ccb2:	f002 fb63 	bl	800f37c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	685a      	ldr	r2, [r3, #4]
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccbe:	441a      	add	r2, r3
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	685a      	ldr	r2, [r3, #4]
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	689b      	ldr	r3, [r3, #8]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d32b      	bcc.n	800cd28 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681a      	ldr	r2, [r3, #0]
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	605a      	str	r2, [r3, #4]
 800ccd8:	e026      	b.n	800cd28 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	68d8      	ldr	r0, [r3, #12]
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cce2:	461a      	mov	r2, r3
 800cce4:	68b9      	ldr	r1, [r7, #8]
 800cce6:	f002 fb49 	bl	800f37c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	68da      	ldr	r2, [r3, #12]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccf2:	425b      	negs	r3, r3
 800ccf4:	441a      	add	r2, r3
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	68da      	ldr	r2, [r3, #12]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d207      	bcs.n	800cd16 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	689a      	ldr	r2, [r3, #8]
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd0e:	425b      	negs	r3, r3
 800cd10:	441a      	add	r2, r3
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2b02      	cmp	r3, #2
 800cd1a:	d105      	bne.n	800cd28 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d002      	beq.n	800cd28 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	3b01      	subs	r3, #1
 800cd26:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cd28:	693b      	ldr	r3, [r7, #16]
 800cd2a:	1c5a      	adds	r2, r3, #1
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cd30:	697b      	ldr	r3, [r7, #20]
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3718      	adds	r7, #24
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}

0800cd3a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cd3a:	b580      	push	{r7, lr}
 800cd3c:	b082      	sub	sp, #8
 800cd3e:	af00      	add	r7, sp, #0
 800cd40:	6078      	str	r0, [r7, #4]
 800cd42:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d018      	beq.n	800cd7e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	68da      	ldr	r2, [r3, #12]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd54:	441a      	add	r2, r3
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	68da      	ldr	r2, [r3, #12]
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	689b      	ldr	r3, [r3, #8]
 800cd62:	429a      	cmp	r2, r3
 800cd64:	d303      	bcc.n	800cd6e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	68d9      	ldr	r1, [r3, #12]
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd76:	461a      	mov	r2, r3
 800cd78:	6838      	ldr	r0, [r7, #0]
 800cd7a:	f002 faff 	bl	800f37c <memcpy>
	}
}
 800cd7e:	bf00      	nop
 800cd80:	3708      	adds	r7, #8
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}

0800cd86 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cd86:	b580      	push	{r7, lr}
 800cd88:	b084      	sub	sp, #16
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cd8e:	f001 fe71 	bl	800ea74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd98:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cd9a:	e011      	b.n	800cdc0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d012      	beq.n	800cdca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	3324      	adds	r3, #36	; 0x24
 800cda8:	4618      	mov	r0, r3
 800cdaa:	f000 fe3b 	bl	800da24 <xTaskRemoveFromEventList>
 800cdae:	4603      	mov	r3, r0
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d001      	beq.n	800cdb8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cdb4:	f000 ff12 	bl	800dbdc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cdb8:	7bfb      	ldrb	r3, [r7, #15]
 800cdba:	3b01      	subs	r3, #1
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cdc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	dce9      	bgt.n	800cd9c <prvUnlockQueue+0x16>
 800cdc8:	e000      	b.n	800cdcc <prvUnlockQueue+0x46>
					break;
 800cdca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	22ff      	movs	r2, #255	; 0xff
 800cdd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800cdd4:	f001 fe7e 	bl	800ead4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cdd8:	f001 fe4c 	bl	800ea74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cde2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cde4:	e011      	b.n	800ce0a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	691b      	ldr	r3, [r3, #16]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d012      	beq.n	800ce14 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	3310      	adds	r3, #16
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	f000 fe16 	bl	800da24 <xTaskRemoveFromEventList>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d001      	beq.n	800ce02 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cdfe:	f000 feed 	bl	800dbdc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ce02:	7bbb      	ldrb	r3, [r7, #14]
 800ce04:	3b01      	subs	r3, #1
 800ce06:	b2db      	uxtb	r3, r3
 800ce08:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	dce9      	bgt.n	800cde6 <prvUnlockQueue+0x60>
 800ce12:	e000      	b.n	800ce16 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ce14:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	22ff      	movs	r2, #255	; 0xff
 800ce1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ce1e:	f001 fe59 	bl	800ead4 <vPortExitCritical>
}
 800ce22:	bf00      	nop
 800ce24:	3710      	adds	r7, #16
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ce2a:	b580      	push	{r7, lr}
 800ce2c:	b084      	sub	sp, #16
 800ce2e:	af00      	add	r7, sp, #0
 800ce30:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ce32:	f001 fe1f 	bl	800ea74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d102      	bne.n	800ce44 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	60fb      	str	r3, [r7, #12]
 800ce42:	e001      	b.n	800ce48 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ce44:	2300      	movs	r3, #0
 800ce46:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ce48:	f001 fe44 	bl	800ead4 <vPortExitCritical>

	return xReturn;
 800ce4c:	68fb      	ldr	r3, [r7, #12]
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3710      	adds	r7, #16
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b084      	sub	sp, #16
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ce5e:	f001 fe09 	bl	800ea74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d102      	bne.n	800ce74 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ce6e:	2301      	movs	r3, #1
 800ce70:	60fb      	str	r3, [r7, #12]
 800ce72:	e001      	b.n	800ce78 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ce74:	2300      	movs	r3, #0
 800ce76:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ce78:	f001 fe2c 	bl	800ead4 <vPortExitCritical>

	return xReturn;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3710      	adds	r7, #16
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
	...

0800ce88 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ce88:	b480      	push	{r7}
 800ce8a:	b085      	sub	sp, #20
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ce92:	2300      	movs	r3, #0
 800ce94:	60fb      	str	r3, [r7, #12]
 800ce96:	e014      	b.n	800cec2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ce98:	4a0f      	ldr	r2, [pc, #60]	; (800ced8 <vQueueAddToRegistry+0x50>)
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d10b      	bne.n	800cebc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cea4:	490c      	ldr	r1, [pc, #48]	; (800ced8 <vQueueAddToRegistry+0x50>)
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	683a      	ldr	r2, [r7, #0]
 800ceaa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ceae:	4a0a      	ldr	r2, [pc, #40]	; (800ced8 <vQueueAddToRegistry+0x50>)
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	00db      	lsls	r3, r3, #3
 800ceb4:	4413      	add	r3, r2
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ceba:	e006      	b.n	800ceca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	3301      	adds	r3, #1
 800cec0:	60fb      	str	r3, [r7, #12]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	2b07      	cmp	r3, #7
 800cec6:	d9e7      	bls.n	800ce98 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cec8:	bf00      	nop
 800ceca:	bf00      	nop
 800cecc:	3714      	adds	r7, #20
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr
 800ced6:	bf00      	nop
 800ced8:	20001d44 	.word	0x20001d44

0800cedc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cedc:	b480      	push	{r7}
 800cede:	b085      	sub	sp, #20
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cee4:	2300      	movs	r3, #0
 800cee6:	60fb      	str	r3, [r7, #12]
 800cee8:	e016      	b.n	800cf18 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ceea:	4a10      	ldr	r2, [pc, #64]	; (800cf2c <vQueueUnregisterQueue+0x50>)
 800ceec:	68fb      	ldr	r3, [r7, #12]
 800ceee:	00db      	lsls	r3, r3, #3
 800cef0:	4413      	add	r3, r2
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	687a      	ldr	r2, [r7, #4]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d10b      	bne.n	800cf12 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cefa:	4a0c      	ldr	r2, [pc, #48]	; (800cf2c <vQueueUnregisterQueue+0x50>)
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	2100      	movs	r1, #0
 800cf00:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cf04:	4a09      	ldr	r2, [pc, #36]	; (800cf2c <vQueueUnregisterQueue+0x50>)
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	00db      	lsls	r3, r3, #3
 800cf0a:	4413      	add	r3, r2
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	605a      	str	r2, [r3, #4]
				break;
 800cf10:	e006      	b.n	800cf20 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	3301      	adds	r3, #1
 800cf16:	60fb      	str	r3, [r7, #12]
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2b07      	cmp	r3, #7
 800cf1c:	d9e5      	bls.n	800ceea <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cf1e:	bf00      	nop
 800cf20:	bf00      	nop
 800cf22:	3714      	adds	r7, #20
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr
 800cf2c:	20001d44 	.word	0x20001d44

0800cf30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b086      	sub	sp, #24
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	60f8      	str	r0, [r7, #12]
 800cf38:	60b9      	str	r1, [r7, #8]
 800cf3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cf40:	f001 fd98 	bl	800ea74 <vPortEnterCritical>
 800cf44:	697b      	ldr	r3, [r7, #20]
 800cf46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf4a:	b25b      	sxtb	r3, r3
 800cf4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf50:	d103      	bne.n	800cf5a <vQueueWaitForMessageRestricted+0x2a>
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	2200      	movs	r2, #0
 800cf56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf60:	b25b      	sxtb	r3, r3
 800cf62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf66:	d103      	bne.n	800cf70 <vQueueWaitForMessageRestricted+0x40>
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf70:	f001 fdb0 	bl	800ead4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d106      	bne.n	800cf8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	3324      	adds	r3, #36	; 0x24
 800cf80:	687a      	ldr	r2, [r7, #4]
 800cf82:	68b9      	ldr	r1, [r7, #8]
 800cf84:	4618      	mov	r0, r3
 800cf86:	f000 fd21 	bl	800d9cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cf8a:	6978      	ldr	r0, [r7, #20]
 800cf8c:	f7ff fefb 	bl	800cd86 <prvUnlockQueue>
	}
 800cf90:	bf00      	nop
 800cf92:	3718      	adds	r7, #24
 800cf94:	46bd      	mov	sp, r7
 800cf96:	bd80      	pop	{r7, pc}

0800cf98 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 800cf98:	b580      	push	{r7, lr}
 800cf9a:	b08c      	sub	sp, #48	; 0x30
 800cf9c:	af02      	add	r7, sp, #8
 800cf9e:	60f8      	str	r0, [r7, #12]
 800cfa0:	60b9      	str	r1, [r7, #8]
 800cfa2:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2b01      	cmp	r3, #1
 800cfa8:	d110      	bne.n	800cfcc <xStreamBufferGenericCreate+0x34>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 800cfaa:	2301      	movs	r3, #1
 800cfac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2b04      	cmp	r3, #4
 800cfb4:	d81b      	bhi.n	800cfee <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800cfb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfba:	f383 8811 	msr	BASEPRI, r3
 800cfbe:	f3bf 8f6f 	isb	sy
 800cfc2:	f3bf 8f4f 	dsb	sy
 800cfc6:	61fb      	str	r3, [r7, #28]
}
 800cfc8:	bf00      	nop
 800cfca:	e7fe      	b.n	800cfca <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d10a      	bne.n	800cfee <xStreamBufferGenericCreate+0x56>
	__asm volatile
 800cfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfdc:	f383 8811 	msr	BASEPRI, r3
 800cfe0:	f3bf 8f6f 	isb	sy
 800cfe4:	f3bf 8f4f 	dsb	sy
 800cfe8:	61bb      	str	r3, [r7, #24]
}
 800cfea:	bf00      	nop
 800cfec:	e7fe      	b.n	800cfec <xStreamBufferGenericCreate+0x54>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800cfee:	68ba      	ldr	r2, [r7, #8]
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d90a      	bls.n	800d00c <xStreamBufferGenericCreate+0x74>
	__asm volatile
 800cff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cffa:	f383 8811 	msr	BASEPRI, r3
 800cffe:	f3bf 8f6f 	isb	sy
 800d002:	f3bf 8f4f 	dsb	sy
 800d006:	617b      	str	r3, [r7, #20]
}
 800d008:	bf00      	nop
 800d00a:	e7fe      	b.n	800d00a <xStreamBufferGenericCreate+0x72>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d101      	bne.n	800d016 <xStreamBufferGenericCreate+0x7e>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 800d012:	2301      	movs	r3, #1
 800d014:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	3301      	adds	r3, #1
 800d01a:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	3324      	adds	r3, #36	; 0x24
 800d020:	4618      	mov	r0, r3
 800d022:	f001 fe49 	bl	800ecb8 <pvPortMalloc>
 800d026:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 800d028:	6a3b      	ldr	r3, [r7, #32]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00a      	beq.n	800d044 <xStreamBufferGenericCreate+0xac>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800d02e:	6a3b      	ldr	r3, [r7, #32]
 800d030:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d038:	9300      	str	r3, [sp, #0]
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	68fa      	ldr	r2, [r7, #12]
 800d03e:	6a38      	ldr	r0, [r7, #32]
 800d040:	f000 f805 	bl	800d04e <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800d044:	6a3b      	ldr	r3, [r7, #32]
	}
 800d046:	4618      	mov	r0, r3
 800d048:	3728      	adds	r7, #40	; 0x28
 800d04a:	46bd      	mov	sp, r7
 800d04c:	bd80      	pop	{r7, pc}

0800d04e <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 800d04e:	b580      	push	{r7, lr}
 800d050:	b086      	sub	sp, #24
 800d052:	af00      	add	r7, sp, #0
 800d054:	60f8      	str	r0, [r7, #12]
 800d056:	60b9      	str	r1, [r7, #8]
 800d058:	607a      	str	r2, [r7, #4]
 800d05a:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 800d05c:	2355      	movs	r3, #85	; 0x55
 800d05e:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800d060:	687a      	ldr	r2, [r7, #4]
 800d062:	6979      	ldr	r1, [r7, #20]
 800d064:	68b8      	ldr	r0, [r7, #8]
 800d066:	f002 f997 	bl	800f398 <memset>
 800d06a:	4602      	mov	r2, r0
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	4293      	cmp	r3, r2
 800d070:	d00a      	beq.n	800d088 <prvInitialiseNewStreamBuffer+0x3a>
	__asm volatile
 800d072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d076:	f383 8811 	msr	BASEPRI, r3
 800d07a:	f3bf 8f6f 	isb	sy
 800d07e:	f3bf 8f4f 	dsb	sy
 800d082:	613b      	str	r3, [r7, #16]
}
 800d084:	bf00      	nop
 800d086:	e7fe      	b.n	800d086 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800d088:	2224      	movs	r2, #36	; 0x24
 800d08a:	2100      	movs	r1, #0
 800d08c:	68f8      	ldr	r0, [r7, #12]
 800d08e:	f002 f983 	bl	800f398 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	68ba      	ldr	r2, [r7, #8]
 800d096:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	687a      	ldr	r2, [r7, #4]
 800d09c:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	683a      	ldr	r2, [r7, #0]
 800d0a2:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 800d0aa:	771a      	strb	r2, [r3, #28]
}
 800d0ac:	bf00      	nop
 800d0ae:	3718      	adds	r7, #24
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b08e      	sub	sp, #56	; 0x38
 800d0b8:	af04      	add	r7, sp, #16
 800d0ba:	60f8      	str	r0, [r7, #12]
 800d0bc:	60b9      	str	r1, [r7, #8]
 800d0be:	607a      	str	r2, [r7, #4]
 800d0c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d10a      	bne.n	800d0de <xTaskCreateStatic+0x2a>
	__asm volatile
 800d0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0cc:	f383 8811 	msr	BASEPRI, r3
 800d0d0:	f3bf 8f6f 	isb	sy
 800d0d4:	f3bf 8f4f 	dsb	sy
 800d0d8:	623b      	str	r3, [r7, #32]
}
 800d0da:	bf00      	nop
 800d0dc:	e7fe      	b.n	800d0dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d0de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d10a      	bne.n	800d0fa <xTaskCreateStatic+0x46>
	__asm volatile
 800d0e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e8:	f383 8811 	msr	BASEPRI, r3
 800d0ec:	f3bf 8f6f 	isb	sy
 800d0f0:	f3bf 8f4f 	dsb	sy
 800d0f4:	61fb      	str	r3, [r7, #28]
}
 800d0f6:	bf00      	nop
 800d0f8:	e7fe      	b.n	800d0f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d0fa:	23c0      	movs	r3, #192	; 0xc0
 800d0fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	2bc0      	cmp	r3, #192	; 0xc0
 800d102:	d00a      	beq.n	800d11a <xTaskCreateStatic+0x66>
	__asm volatile
 800d104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d108:	f383 8811 	msr	BASEPRI, r3
 800d10c:	f3bf 8f6f 	isb	sy
 800d110:	f3bf 8f4f 	dsb	sy
 800d114:	61bb      	str	r3, [r7, #24]
}
 800d116:	bf00      	nop
 800d118:	e7fe      	b.n	800d118 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d11a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d01e      	beq.n	800d160 <xTaskCreateStatic+0xac>
 800d122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d124:	2b00      	cmp	r3, #0
 800d126:	d01b      	beq.n	800d160 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d12a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d12e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d130:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d134:	2202      	movs	r2, #2
 800d136:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d13a:	2300      	movs	r3, #0
 800d13c:	9303      	str	r3, [sp, #12]
 800d13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d140:	9302      	str	r3, [sp, #8]
 800d142:	f107 0314 	add.w	r3, r7, #20
 800d146:	9301      	str	r3, [sp, #4]
 800d148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d14a:	9300      	str	r3, [sp, #0]
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	687a      	ldr	r2, [r7, #4]
 800d150:	68b9      	ldr	r1, [r7, #8]
 800d152:	68f8      	ldr	r0, [r7, #12]
 800d154:	f000 f850 	bl	800d1f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d158:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d15a:	f000 f8f7 	bl	800d34c <prvAddNewTaskToReadyList>
 800d15e:	e001      	b.n	800d164 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d160:	2300      	movs	r3, #0
 800d162:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d164:	697b      	ldr	r3, [r7, #20]
	}
 800d166:	4618      	mov	r0, r3
 800d168:	3728      	adds	r7, #40	; 0x28
 800d16a:	46bd      	mov	sp, r7
 800d16c:	bd80      	pop	{r7, pc}

0800d16e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d16e:	b580      	push	{r7, lr}
 800d170:	b08c      	sub	sp, #48	; 0x30
 800d172:	af04      	add	r7, sp, #16
 800d174:	60f8      	str	r0, [r7, #12]
 800d176:	60b9      	str	r1, [r7, #8]
 800d178:	603b      	str	r3, [r7, #0]
 800d17a:	4613      	mov	r3, r2
 800d17c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d17e:	88fb      	ldrh	r3, [r7, #6]
 800d180:	009b      	lsls	r3, r3, #2
 800d182:	4618      	mov	r0, r3
 800d184:	f001 fd98 	bl	800ecb8 <pvPortMalloc>
 800d188:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d00e      	beq.n	800d1ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d190:	20c0      	movs	r0, #192	; 0xc0
 800d192:	f001 fd91 	bl	800ecb8 <pvPortMalloc>
 800d196:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d198:	69fb      	ldr	r3, [r7, #28]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d003      	beq.n	800d1a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d19e:	69fb      	ldr	r3, [r7, #28]
 800d1a0:	697a      	ldr	r2, [r7, #20]
 800d1a2:	631a      	str	r2, [r3, #48]	; 0x30
 800d1a4:	e005      	b.n	800d1b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d1a6:	6978      	ldr	r0, [r7, #20]
 800d1a8:	f001 fe56 	bl	800ee58 <vPortFree>
 800d1ac:	e001      	b.n	800d1b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d1b2:	69fb      	ldr	r3, [r7, #28]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d017      	beq.n	800d1e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d1b8:	69fb      	ldr	r3, [r7, #28]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d1c0:	88fa      	ldrh	r2, [r7, #6]
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	9303      	str	r3, [sp, #12]
 800d1c6:	69fb      	ldr	r3, [r7, #28]
 800d1c8:	9302      	str	r3, [sp, #8]
 800d1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1cc:	9301      	str	r3, [sp, #4]
 800d1ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d0:	9300      	str	r3, [sp, #0]
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	68b9      	ldr	r1, [r7, #8]
 800d1d6:	68f8      	ldr	r0, [r7, #12]
 800d1d8:	f000 f80e 	bl	800d1f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d1dc:	69f8      	ldr	r0, [r7, #28]
 800d1de:	f000 f8b5 	bl	800d34c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	61bb      	str	r3, [r7, #24]
 800d1e6:	e002      	b.n	800d1ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d1e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d1ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d1ee:	69bb      	ldr	r3, [r7, #24]
	}
 800d1f0:	4618      	mov	r0, r3
 800d1f2:	3720      	adds	r7, #32
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	bd80      	pop	{r7, pc}

0800d1f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b088      	sub	sp, #32
 800d1fc:	af00      	add	r7, sp, #0
 800d1fe:	60f8      	str	r0, [r7, #12]
 800d200:	60b9      	str	r1, [r7, #8]
 800d202:	607a      	str	r2, [r7, #4]
 800d204:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d208:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	009b      	lsls	r3, r3, #2
 800d20e:	461a      	mov	r2, r3
 800d210:	21a5      	movs	r1, #165	; 0xa5
 800d212:	f002 f8c1 	bl	800f398 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d220:	3b01      	subs	r3, #1
 800d222:	009b      	lsls	r3, r3, #2
 800d224:	4413      	add	r3, r2
 800d226:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d228:	69bb      	ldr	r3, [r7, #24]
 800d22a:	f023 0307 	bic.w	r3, r3, #7
 800d22e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d230:	69bb      	ldr	r3, [r7, #24]
 800d232:	f003 0307 	and.w	r3, r3, #7
 800d236:	2b00      	cmp	r3, #0
 800d238:	d00a      	beq.n	800d250 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23e:	f383 8811 	msr	BASEPRI, r3
 800d242:	f3bf 8f6f 	isb	sy
 800d246:	f3bf 8f4f 	dsb	sy
 800d24a:	617b      	str	r3, [r7, #20]
}
 800d24c:	bf00      	nop
 800d24e:	e7fe      	b.n	800d24e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d01f      	beq.n	800d296 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d256:	2300      	movs	r3, #0
 800d258:	61fb      	str	r3, [r7, #28]
 800d25a:	e012      	b.n	800d282 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d25c:	68ba      	ldr	r2, [r7, #8]
 800d25e:	69fb      	ldr	r3, [r7, #28]
 800d260:	4413      	add	r3, r2
 800d262:	7819      	ldrb	r1, [r3, #0]
 800d264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d266:	69fb      	ldr	r3, [r7, #28]
 800d268:	4413      	add	r3, r2
 800d26a:	3334      	adds	r3, #52	; 0x34
 800d26c:	460a      	mov	r2, r1
 800d26e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d270:	68ba      	ldr	r2, [r7, #8]
 800d272:	69fb      	ldr	r3, [r7, #28]
 800d274:	4413      	add	r3, r2
 800d276:	781b      	ldrb	r3, [r3, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d006      	beq.n	800d28a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d27c:	69fb      	ldr	r3, [r7, #28]
 800d27e:	3301      	adds	r3, #1
 800d280:	61fb      	str	r3, [r7, #28]
 800d282:	69fb      	ldr	r3, [r7, #28]
 800d284:	2b0f      	cmp	r3, #15
 800d286:	d9e9      	bls.n	800d25c <prvInitialiseNewTask+0x64>
 800d288:	e000      	b.n	800d28c <prvInitialiseNewTask+0x94>
			{
				break;
 800d28a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28e:	2200      	movs	r2, #0
 800d290:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d294:	e003      	b.n	800d29e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d298:	2200      	movs	r2, #0
 800d29a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a0:	2b37      	cmp	r3, #55	; 0x37
 800d2a2:	d901      	bls.n	800d2a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d2a4:	2337      	movs	r3, #55	; 0x37
 800d2a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2bc:	3304      	adds	r3, #4
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f7fe fcd6 	bl	800bc70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d2c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c6:	3318      	adds	r3, #24
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f7fe fcd1 	bl	800bc70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d2e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800d2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e6:	2200      	movs	r2, #0
 800d2e8:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2fc:	3358      	adds	r3, #88	; 0x58
 800d2fe:	2260      	movs	r2, #96	; 0x60
 800d300:	2100      	movs	r1, #0
 800d302:	4618      	mov	r0, r3
 800d304:	f002 f848 	bl	800f398 <memset>
 800d308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d30a:	4a0d      	ldr	r2, [pc, #52]	; (800d340 <prvInitialiseNewTask+0x148>)
 800d30c:	65da      	str	r2, [r3, #92]	; 0x5c
 800d30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d310:	4a0c      	ldr	r2, [pc, #48]	; (800d344 <prvInitialiseNewTask+0x14c>)
 800d312:	661a      	str	r2, [r3, #96]	; 0x60
 800d314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d316:	4a0c      	ldr	r2, [pc, #48]	; (800d348 <prvInitialiseNewTask+0x150>)
 800d318:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d31a:	683a      	ldr	r2, [r7, #0]
 800d31c:	68f9      	ldr	r1, [r7, #12]
 800d31e:	69b8      	ldr	r0, [r7, #24]
 800d320:	f001 fa7e 	bl	800e820 <pxPortInitialiseStack>
 800d324:	4602      	mov	r2, r0
 800d326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d328:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d002      	beq.n	800d336 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d334:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d336:	bf00      	nop
 800d338:	3720      	adds	r7, #32
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	08012030 	.word	0x08012030
 800d344:	08012050 	.word	0x08012050
 800d348:	08012010 	.word	0x08012010

0800d34c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d354:	f001 fb8e 	bl	800ea74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d358:	4b2d      	ldr	r3, [pc, #180]	; (800d410 <prvAddNewTaskToReadyList+0xc4>)
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	3301      	adds	r3, #1
 800d35e:	4a2c      	ldr	r2, [pc, #176]	; (800d410 <prvAddNewTaskToReadyList+0xc4>)
 800d360:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d362:	4b2c      	ldr	r3, [pc, #176]	; (800d414 <prvAddNewTaskToReadyList+0xc8>)
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d109      	bne.n	800d37e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d36a:	4a2a      	ldr	r2, [pc, #168]	; (800d414 <prvAddNewTaskToReadyList+0xc8>)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d370:	4b27      	ldr	r3, [pc, #156]	; (800d410 <prvAddNewTaskToReadyList+0xc4>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	2b01      	cmp	r3, #1
 800d376:	d110      	bne.n	800d39a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d378:	f000 fc54 	bl	800dc24 <prvInitialiseTaskLists>
 800d37c:	e00d      	b.n	800d39a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d37e:	4b26      	ldr	r3, [pc, #152]	; (800d418 <prvAddNewTaskToReadyList+0xcc>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d109      	bne.n	800d39a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d386:	4b23      	ldr	r3, [pc, #140]	; (800d414 <prvAddNewTaskToReadyList+0xc8>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d390:	429a      	cmp	r2, r3
 800d392:	d802      	bhi.n	800d39a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d394:	4a1f      	ldr	r2, [pc, #124]	; (800d414 <prvAddNewTaskToReadyList+0xc8>)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d39a:	4b20      	ldr	r3, [pc, #128]	; (800d41c <prvAddNewTaskToReadyList+0xd0>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	3301      	adds	r3, #1
 800d3a0:	4a1e      	ldr	r2, [pc, #120]	; (800d41c <prvAddNewTaskToReadyList+0xd0>)
 800d3a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d3a4:	4b1d      	ldr	r3, [pc, #116]	; (800d41c <prvAddNewTaskToReadyList+0xd0>)
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3b0:	4b1b      	ldr	r3, [pc, #108]	; (800d420 <prvAddNewTaskToReadyList+0xd4>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d903      	bls.n	800d3c0 <prvAddNewTaskToReadyList+0x74>
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3bc:	4a18      	ldr	r2, [pc, #96]	; (800d420 <prvAddNewTaskToReadyList+0xd4>)
 800d3be:	6013      	str	r3, [r2, #0]
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c4:	4613      	mov	r3, r2
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	4413      	add	r3, r2
 800d3ca:	009b      	lsls	r3, r3, #2
 800d3cc:	4a15      	ldr	r2, [pc, #84]	; (800d424 <prvAddNewTaskToReadyList+0xd8>)
 800d3ce:	441a      	add	r2, r3
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	3304      	adds	r3, #4
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	4610      	mov	r0, r2
 800d3d8:	f7fe fc57 	bl	800bc8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d3dc:	f001 fb7a 	bl	800ead4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d3e0:	4b0d      	ldr	r3, [pc, #52]	; (800d418 <prvAddNewTaskToReadyList+0xcc>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d00e      	beq.n	800d406 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d3e8:	4b0a      	ldr	r3, [pc, #40]	; (800d414 <prvAddNewTaskToReadyList+0xc8>)
 800d3ea:	681b      	ldr	r3, [r3, #0]
 800d3ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d207      	bcs.n	800d406 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d3f6:	4b0c      	ldr	r3, [pc, #48]	; (800d428 <prvAddNewTaskToReadyList+0xdc>)
 800d3f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3fc:	601a      	str	r2, [r3, #0]
 800d3fe:	f3bf 8f4f 	dsb	sy
 800d402:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d406:	bf00      	nop
 800d408:	3708      	adds	r7, #8
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	20002258 	.word	0x20002258
 800d414:	20001d84 	.word	0x20001d84
 800d418:	20002264 	.word	0x20002264
 800d41c:	20002274 	.word	0x20002274
 800d420:	20002260 	.word	0x20002260
 800d424:	20001d88 	.word	0x20001d88
 800d428:	e000ed04 	.word	0xe000ed04

0800d42c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b084      	sub	sp, #16
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d434:	2300      	movs	r3, #0
 800d436:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d017      	beq.n	800d46e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d43e:	4b13      	ldr	r3, [pc, #76]	; (800d48c <vTaskDelay+0x60>)
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d00a      	beq.n	800d45c <vTaskDelay+0x30>
	__asm volatile
 800d446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d44a:	f383 8811 	msr	BASEPRI, r3
 800d44e:	f3bf 8f6f 	isb	sy
 800d452:	f3bf 8f4f 	dsb	sy
 800d456:	60bb      	str	r3, [r7, #8]
}
 800d458:	bf00      	nop
 800d45a:	e7fe      	b.n	800d45a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d45c:	f000 f88c 	bl	800d578 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d460:	2100      	movs	r1, #0
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f000 fe3a 	bl	800e0dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d468:	f000 f894 	bl	800d594 <xTaskResumeAll>
 800d46c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d107      	bne.n	800d484 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d474:	4b06      	ldr	r3, [pc, #24]	; (800d490 <vTaskDelay+0x64>)
 800d476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d47a:	601a      	str	r2, [r3, #0]
 800d47c:	f3bf 8f4f 	dsb	sy
 800d480:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d484:	bf00      	nop
 800d486:	3710      	adds	r7, #16
 800d488:	46bd      	mov	sp, r7
 800d48a:	bd80      	pop	{r7, pc}
 800d48c:	20002280 	.word	0x20002280
 800d490:	e000ed04 	.word	0xe000ed04

0800d494 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b08a      	sub	sp, #40	; 0x28
 800d498:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d49a:	2300      	movs	r3, #0
 800d49c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d49e:	2300      	movs	r3, #0
 800d4a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d4a2:	463a      	mov	r2, r7
 800d4a4:	1d39      	adds	r1, r7, #4
 800d4a6:	f107 0308 	add.w	r3, r7, #8
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f7fe fb8c 	bl	800bbc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d4b0:	6839      	ldr	r1, [r7, #0]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	68ba      	ldr	r2, [r7, #8]
 800d4b6:	9202      	str	r2, [sp, #8]
 800d4b8:	9301      	str	r3, [sp, #4]
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	9300      	str	r3, [sp, #0]
 800d4be:	2300      	movs	r3, #0
 800d4c0:	460a      	mov	r2, r1
 800d4c2:	4925      	ldr	r1, [pc, #148]	; (800d558 <vTaskStartScheduler+0xc4>)
 800d4c4:	4825      	ldr	r0, [pc, #148]	; (800d55c <vTaskStartScheduler+0xc8>)
 800d4c6:	f7ff fdf5 	bl	800d0b4 <xTaskCreateStatic>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	4a24      	ldr	r2, [pc, #144]	; (800d560 <vTaskStartScheduler+0xcc>)
 800d4ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d4d0:	4b23      	ldr	r3, [pc, #140]	; (800d560 <vTaskStartScheduler+0xcc>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d002      	beq.n	800d4de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	617b      	str	r3, [r7, #20]
 800d4dc:	e001      	b.n	800d4e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d102      	bne.n	800d4ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d4e8:	f000 fe4c 	bl	800e184 <xTimerCreateTimerTask>
 800d4ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d4ee:	697b      	ldr	r3, [r7, #20]
 800d4f0:	2b01      	cmp	r3, #1
 800d4f2:	d11d      	bne.n	800d530 <vTaskStartScheduler+0x9c>
	__asm volatile
 800d4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4f8:	f383 8811 	msr	BASEPRI, r3
 800d4fc:	f3bf 8f6f 	isb	sy
 800d500:	f3bf 8f4f 	dsb	sy
 800d504:	613b      	str	r3, [r7, #16]
}
 800d506:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d508:	4b16      	ldr	r3, [pc, #88]	; (800d564 <vTaskStartScheduler+0xd0>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	3358      	adds	r3, #88	; 0x58
 800d50e:	4a16      	ldr	r2, [pc, #88]	; (800d568 <vTaskStartScheduler+0xd4>)
 800d510:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d512:	4b16      	ldr	r3, [pc, #88]	; (800d56c <vTaskStartScheduler+0xd8>)
 800d514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d518:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d51a:	4b15      	ldr	r3, [pc, #84]	; (800d570 <vTaskStartScheduler+0xdc>)
 800d51c:	2201      	movs	r2, #1
 800d51e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d520:	4b14      	ldr	r3, [pc, #80]	; (800d574 <vTaskStartScheduler+0xe0>)
 800d522:	2200      	movs	r2, #0
 800d524:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800d526:	f7f6 ff2d 	bl	8004384 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d52a:	f001 fa01 	bl	800e930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d52e:	e00e      	b.n	800d54e <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d530:	697b      	ldr	r3, [r7, #20]
 800d532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d536:	d10a      	bne.n	800d54e <vTaskStartScheduler+0xba>
	__asm volatile
 800d538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d53c:	f383 8811 	msr	BASEPRI, r3
 800d540:	f3bf 8f6f 	isb	sy
 800d544:	f3bf 8f4f 	dsb	sy
 800d548:	60fb      	str	r3, [r7, #12]
}
 800d54a:	bf00      	nop
 800d54c:	e7fe      	b.n	800d54c <vTaskStartScheduler+0xb8>
}
 800d54e:	bf00      	nop
 800d550:	3718      	adds	r7, #24
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	08011e50 	.word	0x08011e50
 800d55c:	0800dbf5 	.word	0x0800dbf5
 800d560:	2000227c 	.word	0x2000227c
 800d564:	20001d84 	.word	0x20001d84
 800d568:	20000010 	.word	0x20000010
 800d56c:	20002278 	.word	0x20002278
 800d570:	20002264 	.word	0x20002264
 800d574:	2000225c 	.word	0x2000225c

0800d578 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d578:	b480      	push	{r7}
 800d57a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d57c:	4b04      	ldr	r3, [pc, #16]	; (800d590 <vTaskSuspendAll+0x18>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	3301      	adds	r3, #1
 800d582:	4a03      	ldr	r2, [pc, #12]	; (800d590 <vTaskSuspendAll+0x18>)
 800d584:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d586:	bf00      	nop
 800d588:	46bd      	mov	sp, r7
 800d58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58e:	4770      	bx	lr
 800d590:	20002280 	.word	0x20002280

0800d594 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b084      	sub	sp, #16
 800d598:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d59a:	2300      	movs	r3, #0
 800d59c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d5a2:	4b42      	ldr	r3, [pc, #264]	; (800d6ac <xTaskResumeAll+0x118>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d10a      	bne.n	800d5c0 <xTaskResumeAll+0x2c>
	__asm volatile
 800d5aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5ae:	f383 8811 	msr	BASEPRI, r3
 800d5b2:	f3bf 8f6f 	isb	sy
 800d5b6:	f3bf 8f4f 	dsb	sy
 800d5ba:	603b      	str	r3, [r7, #0]
}
 800d5bc:	bf00      	nop
 800d5be:	e7fe      	b.n	800d5be <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d5c0:	f001 fa58 	bl	800ea74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d5c4:	4b39      	ldr	r3, [pc, #228]	; (800d6ac <xTaskResumeAll+0x118>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	3b01      	subs	r3, #1
 800d5ca:	4a38      	ldr	r2, [pc, #224]	; (800d6ac <xTaskResumeAll+0x118>)
 800d5cc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5ce:	4b37      	ldr	r3, [pc, #220]	; (800d6ac <xTaskResumeAll+0x118>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d162      	bne.n	800d69c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d5d6:	4b36      	ldr	r3, [pc, #216]	; (800d6b0 <xTaskResumeAll+0x11c>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d05e      	beq.n	800d69c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d5de:	e02f      	b.n	800d640 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5e0:	4b34      	ldr	r3, [pc, #208]	; (800d6b4 <xTaskResumeAll+0x120>)
 800d5e2:	68db      	ldr	r3, [r3, #12]
 800d5e4:	68db      	ldr	r3, [r3, #12]
 800d5e6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	3318      	adds	r3, #24
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	f7fe fba9 	bl	800bd44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	3304      	adds	r3, #4
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7fe fba4 	bl	800bd44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d600:	4b2d      	ldr	r3, [pc, #180]	; (800d6b8 <xTaskResumeAll+0x124>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	429a      	cmp	r2, r3
 800d606:	d903      	bls.n	800d610 <xTaskResumeAll+0x7c>
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d60c:	4a2a      	ldr	r2, [pc, #168]	; (800d6b8 <xTaskResumeAll+0x124>)
 800d60e:	6013      	str	r3, [r2, #0]
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d614:	4613      	mov	r3, r2
 800d616:	009b      	lsls	r3, r3, #2
 800d618:	4413      	add	r3, r2
 800d61a:	009b      	lsls	r3, r3, #2
 800d61c:	4a27      	ldr	r2, [pc, #156]	; (800d6bc <xTaskResumeAll+0x128>)
 800d61e:	441a      	add	r2, r3
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	3304      	adds	r3, #4
 800d624:	4619      	mov	r1, r3
 800d626:	4610      	mov	r0, r2
 800d628:	f7fe fb2f 	bl	800bc8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d630:	4b23      	ldr	r3, [pc, #140]	; (800d6c0 <xTaskResumeAll+0x12c>)
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d636:	429a      	cmp	r2, r3
 800d638:	d302      	bcc.n	800d640 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d63a:	4b22      	ldr	r3, [pc, #136]	; (800d6c4 <xTaskResumeAll+0x130>)
 800d63c:	2201      	movs	r2, #1
 800d63e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d640:	4b1c      	ldr	r3, [pc, #112]	; (800d6b4 <xTaskResumeAll+0x120>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d1cb      	bne.n	800d5e0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d001      	beq.n	800d652 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d64e:	f000 fb8b 	bl	800dd68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d652:	4b1d      	ldr	r3, [pc, #116]	; (800d6c8 <xTaskResumeAll+0x134>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d010      	beq.n	800d680 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d65e:	f000 f847 	bl	800d6f0 <xTaskIncrementTick>
 800d662:	4603      	mov	r3, r0
 800d664:	2b00      	cmp	r3, #0
 800d666:	d002      	beq.n	800d66e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d668:	4b16      	ldr	r3, [pc, #88]	; (800d6c4 <xTaskResumeAll+0x130>)
 800d66a:	2201      	movs	r2, #1
 800d66c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	3b01      	subs	r3, #1
 800d672:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d1f1      	bne.n	800d65e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d67a:	4b13      	ldr	r3, [pc, #76]	; (800d6c8 <xTaskResumeAll+0x134>)
 800d67c:	2200      	movs	r2, #0
 800d67e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d680:	4b10      	ldr	r3, [pc, #64]	; (800d6c4 <xTaskResumeAll+0x130>)
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d009      	beq.n	800d69c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d688:	2301      	movs	r3, #1
 800d68a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d68c:	4b0f      	ldr	r3, [pc, #60]	; (800d6cc <xTaskResumeAll+0x138>)
 800d68e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d692:	601a      	str	r2, [r3, #0]
 800d694:	f3bf 8f4f 	dsb	sy
 800d698:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d69c:	f001 fa1a 	bl	800ead4 <vPortExitCritical>

	return xAlreadyYielded;
 800d6a0:	68bb      	ldr	r3, [r7, #8]
}
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	3710      	adds	r7, #16
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	20002280 	.word	0x20002280
 800d6b0:	20002258 	.word	0x20002258
 800d6b4:	20002218 	.word	0x20002218
 800d6b8:	20002260 	.word	0x20002260
 800d6bc:	20001d88 	.word	0x20001d88
 800d6c0:	20001d84 	.word	0x20001d84
 800d6c4:	2000226c 	.word	0x2000226c
 800d6c8:	20002268 	.word	0x20002268
 800d6cc:	e000ed04 	.word	0xe000ed04

0800d6d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d6d0:	b480      	push	{r7}
 800d6d2:	b083      	sub	sp, #12
 800d6d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d6d6:	4b05      	ldr	r3, [pc, #20]	; (800d6ec <xTaskGetTickCount+0x1c>)
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d6dc:	687b      	ldr	r3, [r7, #4]
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	370c      	adds	r7, #12
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr
 800d6ea:	bf00      	nop
 800d6ec:	2000225c 	.word	0x2000225c

0800d6f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b086      	sub	sp, #24
 800d6f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6fa:	4b4f      	ldr	r3, [pc, #316]	; (800d838 <xTaskIncrementTick+0x148>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	f040 808f 	bne.w	800d822 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d704:	4b4d      	ldr	r3, [pc, #308]	; (800d83c <xTaskIncrementTick+0x14c>)
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	3301      	adds	r3, #1
 800d70a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d70c:	4a4b      	ldr	r2, [pc, #300]	; (800d83c <xTaskIncrementTick+0x14c>)
 800d70e:	693b      	ldr	r3, [r7, #16]
 800d710:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d712:	693b      	ldr	r3, [r7, #16]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d120      	bne.n	800d75a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d718:	4b49      	ldr	r3, [pc, #292]	; (800d840 <xTaskIncrementTick+0x150>)
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d00a      	beq.n	800d738 <xTaskIncrementTick+0x48>
	__asm volatile
 800d722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d726:	f383 8811 	msr	BASEPRI, r3
 800d72a:	f3bf 8f6f 	isb	sy
 800d72e:	f3bf 8f4f 	dsb	sy
 800d732:	603b      	str	r3, [r7, #0]
}
 800d734:	bf00      	nop
 800d736:	e7fe      	b.n	800d736 <xTaskIncrementTick+0x46>
 800d738:	4b41      	ldr	r3, [pc, #260]	; (800d840 <xTaskIncrementTick+0x150>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	60fb      	str	r3, [r7, #12]
 800d73e:	4b41      	ldr	r3, [pc, #260]	; (800d844 <xTaskIncrementTick+0x154>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	4a3f      	ldr	r2, [pc, #252]	; (800d840 <xTaskIncrementTick+0x150>)
 800d744:	6013      	str	r3, [r2, #0]
 800d746:	4a3f      	ldr	r2, [pc, #252]	; (800d844 <xTaskIncrementTick+0x154>)
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	6013      	str	r3, [r2, #0]
 800d74c:	4b3e      	ldr	r3, [pc, #248]	; (800d848 <xTaskIncrementTick+0x158>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	3301      	adds	r3, #1
 800d752:	4a3d      	ldr	r2, [pc, #244]	; (800d848 <xTaskIncrementTick+0x158>)
 800d754:	6013      	str	r3, [r2, #0]
 800d756:	f000 fb07 	bl	800dd68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d75a:	4b3c      	ldr	r3, [pc, #240]	; (800d84c <xTaskIncrementTick+0x15c>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	693a      	ldr	r2, [r7, #16]
 800d760:	429a      	cmp	r2, r3
 800d762:	d349      	bcc.n	800d7f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d764:	4b36      	ldr	r3, [pc, #216]	; (800d840 <xTaskIncrementTick+0x150>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d104      	bne.n	800d778 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d76e:	4b37      	ldr	r3, [pc, #220]	; (800d84c <xTaskIncrementTick+0x15c>)
 800d770:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d774:	601a      	str	r2, [r3, #0]
					break;
 800d776:	e03f      	b.n	800d7f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d778:	4b31      	ldr	r3, [pc, #196]	; (800d840 <xTaskIncrementTick+0x150>)
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	685b      	ldr	r3, [r3, #4]
 800d786:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d788:	693a      	ldr	r2, [r7, #16]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d203      	bcs.n	800d798 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d790:	4a2e      	ldr	r2, [pc, #184]	; (800d84c <xTaskIncrementTick+0x15c>)
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d796:	e02f      	b.n	800d7f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d798:	68bb      	ldr	r3, [r7, #8]
 800d79a:	3304      	adds	r3, #4
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7fe fad1 	bl	800bd44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d004      	beq.n	800d7b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d7aa:	68bb      	ldr	r3, [r7, #8]
 800d7ac:	3318      	adds	r3, #24
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7fe fac8 	bl	800bd44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7b8:	4b25      	ldr	r3, [pc, #148]	; (800d850 <xTaskIncrementTick+0x160>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	429a      	cmp	r2, r3
 800d7be:	d903      	bls.n	800d7c8 <xTaskIncrementTick+0xd8>
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c4:	4a22      	ldr	r2, [pc, #136]	; (800d850 <xTaskIncrementTick+0x160>)
 800d7c6:	6013      	str	r3, [r2, #0]
 800d7c8:	68bb      	ldr	r3, [r7, #8]
 800d7ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7cc:	4613      	mov	r3, r2
 800d7ce:	009b      	lsls	r3, r3, #2
 800d7d0:	4413      	add	r3, r2
 800d7d2:	009b      	lsls	r3, r3, #2
 800d7d4:	4a1f      	ldr	r2, [pc, #124]	; (800d854 <xTaskIncrementTick+0x164>)
 800d7d6:	441a      	add	r2, r3
 800d7d8:	68bb      	ldr	r3, [r7, #8]
 800d7da:	3304      	adds	r3, #4
 800d7dc:	4619      	mov	r1, r3
 800d7de:	4610      	mov	r0, r2
 800d7e0:	f7fe fa53 	bl	800bc8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7e8:	4b1b      	ldr	r3, [pc, #108]	; (800d858 <xTaskIncrementTick+0x168>)
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ee:	429a      	cmp	r2, r3
 800d7f0:	d3b8      	bcc.n	800d764 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7f6:	e7b5      	b.n	800d764 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d7f8:	4b17      	ldr	r3, [pc, #92]	; (800d858 <xTaskIncrementTick+0x168>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7fe:	4915      	ldr	r1, [pc, #84]	; (800d854 <xTaskIncrementTick+0x164>)
 800d800:	4613      	mov	r3, r2
 800d802:	009b      	lsls	r3, r3, #2
 800d804:	4413      	add	r3, r2
 800d806:	009b      	lsls	r3, r3, #2
 800d808:	440b      	add	r3, r1
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d901      	bls.n	800d814 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d810:	2301      	movs	r3, #1
 800d812:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d814:	4b11      	ldr	r3, [pc, #68]	; (800d85c <xTaskIncrementTick+0x16c>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d007      	beq.n	800d82c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d81c:	2301      	movs	r3, #1
 800d81e:	617b      	str	r3, [r7, #20]
 800d820:	e004      	b.n	800d82c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d822:	4b0f      	ldr	r3, [pc, #60]	; (800d860 <xTaskIncrementTick+0x170>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	3301      	adds	r3, #1
 800d828:	4a0d      	ldr	r2, [pc, #52]	; (800d860 <xTaskIncrementTick+0x170>)
 800d82a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d82c:	697b      	ldr	r3, [r7, #20]
}
 800d82e:	4618      	mov	r0, r3
 800d830:	3718      	adds	r7, #24
 800d832:	46bd      	mov	sp, r7
 800d834:	bd80      	pop	{r7, pc}
 800d836:	bf00      	nop
 800d838:	20002280 	.word	0x20002280
 800d83c:	2000225c 	.word	0x2000225c
 800d840:	20002210 	.word	0x20002210
 800d844:	20002214 	.word	0x20002214
 800d848:	20002270 	.word	0x20002270
 800d84c:	20002278 	.word	0x20002278
 800d850:	20002260 	.word	0x20002260
 800d854:	20001d88 	.word	0x20001d88
 800d858:	20001d84 	.word	0x20001d84
 800d85c:	2000226c 	.word	0x2000226c
 800d860:	20002268 	.word	0x20002268

0800d864 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b084      	sub	sp, #16
 800d868:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d86a:	4b3e      	ldr	r3, [pc, #248]	; (800d964 <vTaskSwitchContext+0x100>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d003      	beq.n	800d87a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d872:	4b3d      	ldr	r3, [pc, #244]	; (800d968 <vTaskSwitchContext+0x104>)
 800d874:	2201      	movs	r2, #1
 800d876:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d878:	e070      	b.n	800d95c <vTaskSwitchContext+0xf8>
		xYieldPending = pdFALSE;
 800d87a:	4b3b      	ldr	r3, [pc, #236]	; (800d968 <vTaskSwitchContext+0x104>)
 800d87c:	2200      	movs	r2, #0
 800d87e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800d880:	f7f6 fd87 	bl	8004392 <getRunTimeCounterValue>
 800d884:	4603      	mov	r3, r0
 800d886:	4a39      	ldr	r2, [pc, #228]	; (800d96c <vTaskSwitchContext+0x108>)
 800d888:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800d88a:	4b38      	ldr	r3, [pc, #224]	; (800d96c <vTaskSwitchContext+0x108>)
 800d88c:	681a      	ldr	r2, [r3, #0]
 800d88e:	4b38      	ldr	r3, [pc, #224]	; (800d970 <vTaskSwitchContext+0x10c>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	429a      	cmp	r2, r3
 800d894:	d909      	bls.n	800d8aa <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800d896:	4b37      	ldr	r3, [pc, #220]	; (800d974 <vTaskSwitchContext+0x110>)
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d89c:	4a33      	ldr	r2, [pc, #204]	; (800d96c <vTaskSwitchContext+0x108>)
 800d89e:	6810      	ldr	r0, [r2, #0]
 800d8a0:	4a33      	ldr	r2, [pc, #204]	; (800d970 <vTaskSwitchContext+0x10c>)
 800d8a2:	6812      	ldr	r2, [r2, #0]
 800d8a4:	1a82      	subs	r2, r0, r2
 800d8a6:	440a      	add	r2, r1
 800d8a8:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800d8aa:	4b30      	ldr	r3, [pc, #192]	; (800d96c <vTaskSwitchContext+0x108>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	4a30      	ldr	r2, [pc, #192]	; (800d970 <vTaskSwitchContext+0x10c>)
 800d8b0:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d8b2:	4b30      	ldr	r3, [pc, #192]	; (800d974 <vTaskSwitchContext+0x110>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	681a      	ldr	r2, [r3, #0]
 800d8b8:	4b2e      	ldr	r3, [pc, #184]	; (800d974 <vTaskSwitchContext+0x110>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d808      	bhi.n	800d8d4 <vTaskSwitchContext+0x70>
 800d8c2:	4b2c      	ldr	r3, [pc, #176]	; (800d974 <vTaskSwitchContext+0x110>)
 800d8c4:	681a      	ldr	r2, [r3, #0]
 800d8c6:	4b2b      	ldr	r3, [pc, #172]	; (800d974 <vTaskSwitchContext+0x110>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	3334      	adds	r3, #52	; 0x34
 800d8cc:	4619      	mov	r1, r3
 800d8ce:	4610      	mov	r0, r2
 800d8d0:	f7f6 fd67 	bl	80043a2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8d4:	4b28      	ldr	r3, [pc, #160]	; (800d978 <vTaskSwitchContext+0x114>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	60fb      	str	r3, [r7, #12]
 800d8da:	e010      	b.n	800d8fe <vTaskSwitchContext+0x9a>
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d10a      	bne.n	800d8f8 <vTaskSwitchContext+0x94>
	__asm volatile
 800d8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e6:	f383 8811 	msr	BASEPRI, r3
 800d8ea:	f3bf 8f6f 	isb	sy
 800d8ee:	f3bf 8f4f 	dsb	sy
 800d8f2:	607b      	str	r3, [r7, #4]
}
 800d8f4:	bf00      	nop
 800d8f6:	e7fe      	b.n	800d8f6 <vTaskSwitchContext+0x92>
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	3b01      	subs	r3, #1
 800d8fc:	60fb      	str	r3, [r7, #12]
 800d8fe:	491f      	ldr	r1, [pc, #124]	; (800d97c <vTaskSwitchContext+0x118>)
 800d900:	68fa      	ldr	r2, [r7, #12]
 800d902:	4613      	mov	r3, r2
 800d904:	009b      	lsls	r3, r3, #2
 800d906:	4413      	add	r3, r2
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	440b      	add	r3, r1
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d0e4      	beq.n	800d8dc <vTaskSwitchContext+0x78>
 800d912:	68fa      	ldr	r2, [r7, #12]
 800d914:	4613      	mov	r3, r2
 800d916:	009b      	lsls	r3, r3, #2
 800d918:	4413      	add	r3, r2
 800d91a:	009b      	lsls	r3, r3, #2
 800d91c:	4a17      	ldr	r2, [pc, #92]	; (800d97c <vTaskSwitchContext+0x118>)
 800d91e:	4413      	add	r3, r2
 800d920:	60bb      	str	r3, [r7, #8]
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	685b      	ldr	r3, [r3, #4]
 800d926:	685a      	ldr	r2, [r3, #4]
 800d928:	68bb      	ldr	r3, [r7, #8]
 800d92a:	605a      	str	r2, [r3, #4]
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	685a      	ldr	r2, [r3, #4]
 800d930:	68bb      	ldr	r3, [r7, #8]
 800d932:	3308      	adds	r3, #8
 800d934:	429a      	cmp	r2, r3
 800d936:	d104      	bne.n	800d942 <vTaskSwitchContext+0xde>
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	685a      	ldr	r2, [r3, #4]
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	605a      	str	r2, [r3, #4]
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	685b      	ldr	r3, [r3, #4]
 800d946:	68db      	ldr	r3, [r3, #12]
 800d948:	4a0a      	ldr	r2, [pc, #40]	; (800d974 <vTaskSwitchContext+0x110>)
 800d94a:	6013      	str	r3, [r2, #0]
 800d94c:	4a0a      	ldr	r2, [pc, #40]	; (800d978 <vTaskSwitchContext+0x114>)
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d952:	4b08      	ldr	r3, [pc, #32]	; (800d974 <vTaskSwitchContext+0x110>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	3358      	adds	r3, #88	; 0x58
 800d958:	4a09      	ldr	r2, [pc, #36]	; (800d980 <vTaskSwitchContext+0x11c>)
 800d95a:	6013      	str	r3, [r2, #0]
}
 800d95c:	bf00      	nop
 800d95e:	3710      	adds	r7, #16
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}
 800d964:	20002280 	.word	0x20002280
 800d968:	2000226c 	.word	0x2000226c
 800d96c:	20002288 	.word	0x20002288
 800d970:	20002284 	.word	0x20002284
 800d974:	20001d84 	.word	0x20001d84
 800d978:	20002260 	.word	0x20002260
 800d97c:	20001d88 	.word	0x20001d88
 800d980:	20000010 	.word	0x20000010

0800d984 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b084      	sub	sp, #16
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d10a      	bne.n	800d9aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d998:	f383 8811 	msr	BASEPRI, r3
 800d99c:	f3bf 8f6f 	isb	sy
 800d9a0:	f3bf 8f4f 	dsb	sy
 800d9a4:	60fb      	str	r3, [r7, #12]
}
 800d9a6:	bf00      	nop
 800d9a8:	e7fe      	b.n	800d9a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d9aa:	4b07      	ldr	r3, [pc, #28]	; (800d9c8 <vTaskPlaceOnEventList+0x44>)
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	3318      	adds	r3, #24
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f7fe f98d 	bl	800bcd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d9b8:	2101      	movs	r1, #1
 800d9ba:	6838      	ldr	r0, [r7, #0]
 800d9bc:	f000 fb8e 	bl	800e0dc <prvAddCurrentTaskToDelayedList>
}
 800d9c0:	bf00      	nop
 800d9c2:	3710      	adds	r7, #16
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	20001d84 	.word	0x20001d84

0800d9cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b086      	sub	sp, #24
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	60f8      	str	r0, [r7, #12]
 800d9d4:	60b9      	str	r1, [r7, #8]
 800d9d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d10a      	bne.n	800d9f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d9de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e2:	f383 8811 	msr	BASEPRI, r3
 800d9e6:	f3bf 8f6f 	isb	sy
 800d9ea:	f3bf 8f4f 	dsb	sy
 800d9ee:	617b      	str	r3, [r7, #20]
}
 800d9f0:	bf00      	nop
 800d9f2:	e7fe      	b.n	800d9f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d9f4:	4b0a      	ldr	r3, [pc, #40]	; (800da20 <vTaskPlaceOnEventListRestricted+0x54>)
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	3318      	adds	r3, #24
 800d9fa:	4619      	mov	r1, r3
 800d9fc:	68f8      	ldr	r0, [r7, #12]
 800d9fe:	f7fe f944 	bl	800bc8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d002      	beq.n	800da0e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800da08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800da0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800da0e:	6879      	ldr	r1, [r7, #4]
 800da10:	68b8      	ldr	r0, [r7, #8]
 800da12:	f000 fb63 	bl	800e0dc <prvAddCurrentTaskToDelayedList>
	}
 800da16:	bf00      	nop
 800da18:	3718      	adds	r7, #24
 800da1a:	46bd      	mov	sp, r7
 800da1c:	bd80      	pop	{r7, pc}
 800da1e:	bf00      	nop
 800da20:	20001d84 	.word	0x20001d84

0800da24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b086      	sub	sp, #24
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	68db      	ldr	r3, [r3, #12]
 800da30:	68db      	ldr	r3, [r3, #12]
 800da32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800da34:	693b      	ldr	r3, [r7, #16]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d10a      	bne.n	800da50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800da3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da3e:	f383 8811 	msr	BASEPRI, r3
 800da42:	f3bf 8f6f 	isb	sy
 800da46:	f3bf 8f4f 	dsb	sy
 800da4a:	60fb      	str	r3, [r7, #12]
}
 800da4c:	bf00      	nop
 800da4e:	e7fe      	b.n	800da4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	3318      	adds	r3, #24
 800da54:	4618      	mov	r0, r3
 800da56:	f7fe f975 	bl	800bd44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da5a:	4b1e      	ldr	r3, [pc, #120]	; (800dad4 <xTaskRemoveFromEventList+0xb0>)
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d11d      	bne.n	800da9e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	3304      	adds	r3, #4
 800da66:	4618      	mov	r0, r3
 800da68:	f7fe f96c 	bl	800bd44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da70:	4b19      	ldr	r3, [pc, #100]	; (800dad8 <xTaskRemoveFromEventList+0xb4>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	429a      	cmp	r2, r3
 800da76:	d903      	bls.n	800da80 <xTaskRemoveFromEventList+0x5c>
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da7c:	4a16      	ldr	r2, [pc, #88]	; (800dad8 <xTaskRemoveFromEventList+0xb4>)
 800da7e:	6013      	str	r3, [r2, #0]
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da84:	4613      	mov	r3, r2
 800da86:	009b      	lsls	r3, r3, #2
 800da88:	4413      	add	r3, r2
 800da8a:	009b      	lsls	r3, r3, #2
 800da8c:	4a13      	ldr	r2, [pc, #76]	; (800dadc <xTaskRemoveFromEventList+0xb8>)
 800da8e:	441a      	add	r2, r3
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	3304      	adds	r3, #4
 800da94:	4619      	mov	r1, r3
 800da96:	4610      	mov	r0, r2
 800da98:	f7fe f8f7 	bl	800bc8a <vListInsertEnd>
 800da9c:	e005      	b.n	800daaa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800da9e:	693b      	ldr	r3, [r7, #16]
 800daa0:	3318      	adds	r3, #24
 800daa2:	4619      	mov	r1, r3
 800daa4:	480e      	ldr	r0, [pc, #56]	; (800dae0 <xTaskRemoveFromEventList+0xbc>)
 800daa6:	f7fe f8f0 	bl	800bc8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daae:	4b0d      	ldr	r3, [pc, #52]	; (800dae4 <xTaskRemoveFromEventList+0xc0>)
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dab4:	429a      	cmp	r2, r3
 800dab6:	d905      	bls.n	800dac4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dab8:	2301      	movs	r3, #1
 800daba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dabc:	4b0a      	ldr	r3, [pc, #40]	; (800dae8 <xTaskRemoveFromEventList+0xc4>)
 800dabe:	2201      	movs	r2, #1
 800dac0:	601a      	str	r2, [r3, #0]
 800dac2:	e001      	b.n	800dac8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dac4:	2300      	movs	r3, #0
 800dac6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dac8:	697b      	ldr	r3, [r7, #20]
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3718      	adds	r7, #24
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}
 800dad2:	bf00      	nop
 800dad4:	20002280 	.word	0x20002280
 800dad8:	20002260 	.word	0x20002260
 800dadc:	20001d88 	.word	0x20001d88
 800dae0:	20002218 	.word	0x20002218
 800dae4:	20001d84 	.word	0x20001d84
 800dae8:	2000226c 	.word	0x2000226c

0800daec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800daec:	b480      	push	{r7}
 800daee:	b083      	sub	sp, #12
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800daf4:	4b06      	ldr	r3, [pc, #24]	; (800db10 <vTaskInternalSetTimeOutState+0x24>)
 800daf6:	681a      	ldr	r2, [r3, #0]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dafc:	4b05      	ldr	r3, [pc, #20]	; (800db14 <vTaskInternalSetTimeOutState+0x28>)
 800dafe:	681a      	ldr	r2, [r3, #0]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	605a      	str	r2, [r3, #4]
}
 800db04:	bf00      	nop
 800db06:	370c      	adds	r7, #12
 800db08:	46bd      	mov	sp, r7
 800db0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0e:	4770      	bx	lr
 800db10:	20002270 	.word	0x20002270
 800db14:	2000225c 	.word	0x2000225c

0800db18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b088      	sub	sp, #32
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d10a      	bne.n	800db3e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800db28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db2c:	f383 8811 	msr	BASEPRI, r3
 800db30:	f3bf 8f6f 	isb	sy
 800db34:	f3bf 8f4f 	dsb	sy
 800db38:	613b      	str	r3, [r7, #16]
}
 800db3a:	bf00      	nop
 800db3c:	e7fe      	b.n	800db3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d10a      	bne.n	800db5a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800db44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db48:	f383 8811 	msr	BASEPRI, r3
 800db4c:	f3bf 8f6f 	isb	sy
 800db50:	f3bf 8f4f 	dsb	sy
 800db54:	60fb      	str	r3, [r7, #12]
}
 800db56:	bf00      	nop
 800db58:	e7fe      	b.n	800db58 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800db5a:	f000 ff8b 	bl	800ea74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800db5e:	4b1d      	ldr	r3, [pc, #116]	; (800dbd4 <xTaskCheckForTimeOut+0xbc>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	69ba      	ldr	r2, [r7, #24]
 800db6a:	1ad3      	subs	r3, r2, r3
 800db6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800db6e:	683b      	ldr	r3, [r7, #0]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db76:	d102      	bne.n	800db7e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800db78:	2300      	movs	r3, #0
 800db7a:	61fb      	str	r3, [r7, #28]
 800db7c:	e023      	b.n	800dbc6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681a      	ldr	r2, [r3, #0]
 800db82:	4b15      	ldr	r3, [pc, #84]	; (800dbd8 <xTaskCheckForTimeOut+0xc0>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	429a      	cmp	r2, r3
 800db88:	d007      	beq.n	800db9a <xTaskCheckForTimeOut+0x82>
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	69ba      	ldr	r2, [r7, #24]
 800db90:	429a      	cmp	r2, r3
 800db92:	d302      	bcc.n	800db9a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800db94:	2301      	movs	r3, #1
 800db96:	61fb      	str	r3, [r7, #28]
 800db98:	e015      	b.n	800dbc6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	697a      	ldr	r2, [r7, #20]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d20b      	bcs.n	800dbbc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	681a      	ldr	r2, [r3, #0]
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	1ad2      	subs	r2, r2, r3
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f7ff ff9b 	bl	800daec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	61fb      	str	r3, [r7, #28]
 800dbba:	e004      	b.n	800dbc6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dbbc:	683b      	ldr	r3, [r7, #0]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dbc6:	f000 ff85 	bl	800ead4 <vPortExitCritical>

	return xReturn;
 800dbca:	69fb      	ldr	r3, [r7, #28]
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3720      	adds	r7, #32
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}
 800dbd4:	2000225c 	.word	0x2000225c
 800dbd8:	20002270 	.word	0x20002270

0800dbdc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dbdc:	b480      	push	{r7}
 800dbde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dbe0:	4b03      	ldr	r3, [pc, #12]	; (800dbf0 <vTaskMissedYield+0x14>)
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	601a      	str	r2, [r3, #0]
}
 800dbe6:	bf00      	nop
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbee:	4770      	bx	lr
 800dbf0:	2000226c 	.word	0x2000226c

0800dbf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b082      	sub	sp, #8
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dbfc:	f000 f852 	bl	800dca4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dc00:	4b06      	ldr	r3, [pc, #24]	; (800dc1c <prvIdleTask+0x28>)
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	2b01      	cmp	r3, #1
 800dc06:	d9f9      	bls.n	800dbfc <prvIdleTask+0x8>
			{
				taskYIELD();
 800dc08:	4b05      	ldr	r3, [pc, #20]	; (800dc20 <prvIdleTask+0x2c>)
 800dc0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc0e:	601a      	str	r2, [r3, #0]
 800dc10:	f3bf 8f4f 	dsb	sy
 800dc14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dc18:	e7f0      	b.n	800dbfc <prvIdleTask+0x8>
 800dc1a:	bf00      	nop
 800dc1c:	20001d88 	.word	0x20001d88
 800dc20:	e000ed04 	.word	0xe000ed04

0800dc24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	607b      	str	r3, [r7, #4]
 800dc2e:	e00c      	b.n	800dc4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dc30:	687a      	ldr	r2, [r7, #4]
 800dc32:	4613      	mov	r3, r2
 800dc34:	009b      	lsls	r3, r3, #2
 800dc36:	4413      	add	r3, r2
 800dc38:	009b      	lsls	r3, r3, #2
 800dc3a:	4a12      	ldr	r2, [pc, #72]	; (800dc84 <prvInitialiseTaskLists+0x60>)
 800dc3c:	4413      	add	r3, r2
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f7fd fff6 	bl	800bc30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	3301      	adds	r3, #1
 800dc48:	607b      	str	r3, [r7, #4]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2b37      	cmp	r3, #55	; 0x37
 800dc4e:	d9ef      	bls.n	800dc30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dc50:	480d      	ldr	r0, [pc, #52]	; (800dc88 <prvInitialiseTaskLists+0x64>)
 800dc52:	f7fd ffed 	bl	800bc30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dc56:	480d      	ldr	r0, [pc, #52]	; (800dc8c <prvInitialiseTaskLists+0x68>)
 800dc58:	f7fd ffea 	bl	800bc30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dc5c:	480c      	ldr	r0, [pc, #48]	; (800dc90 <prvInitialiseTaskLists+0x6c>)
 800dc5e:	f7fd ffe7 	bl	800bc30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dc62:	480c      	ldr	r0, [pc, #48]	; (800dc94 <prvInitialiseTaskLists+0x70>)
 800dc64:	f7fd ffe4 	bl	800bc30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dc68:	480b      	ldr	r0, [pc, #44]	; (800dc98 <prvInitialiseTaskLists+0x74>)
 800dc6a:	f7fd ffe1 	bl	800bc30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dc6e:	4b0b      	ldr	r3, [pc, #44]	; (800dc9c <prvInitialiseTaskLists+0x78>)
 800dc70:	4a05      	ldr	r2, [pc, #20]	; (800dc88 <prvInitialiseTaskLists+0x64>)
 800dc72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dc74:	4b0a      	ldr	r3, [pc, #40]	; (800dca0 <prvInitialiseTaskLists+0x7c>)
 800dc76:	4a05      	ldr	r2, [pc, #20]	; (800dc8c <prvInitialiseTaskLists+0x68>)
 800dc78:	601a      	str	r2, [r3, #0]
}
 800dc7a:	bf00      	nop
 800dc7c:	3708      	adds	r7, #8
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
 800dc82:	bf00      	nop
 800dc84:	20001d88 	.word	0x20001d88
 800dc88:	200021e8 	.word	0x200021e8
 800dc8c:	200021fc 	.word	0x200021fc
 800dc90:	20002218 	.word	0x20002218
 800dc94:	2000222c 	.word	0x2000222c
 800dc98:	20002244 	.word	0x20002244
 800dc9c:	20002210 	.word	0x20002210
 800dca0:	20002214 	.word	0x20002214

0800dca4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b082      	sub	sp, #8
 800dca8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dcaa:	e019      	b.n	800dce0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dcac:	f000 fee2 	bl	800ea74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcb0:	4b10      	ldr	r3, [pc, #64]	; (800dcf4 <prvCheckTasksWaitingTermination+0x50>)
 800dcb2:	68db      	ldr	r3, [r3, #12]
 800dcb4:	68db      	ldr	r3, [r3, #12]
 800dcb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	3304      	adds	r3, #4
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7fe f841 	bl	800bd44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dcc2:	4b0d      	ldr	r3, [pc, #52]	; (800dcf8 <prvCheckTasksWaitingTermination+0x54>)
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	3b01      	subs	r3, #1
 800dcc8:	4a0b      	ldr	r2, [pc, #44]	; (800dcf8 <prvCheckTasksWaitingTermination+0x54>)
 800dcca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dccc:	4b0b      	ldr	r3, [pc, #44]	; (800dcfc <prvCheckTasksWaitingTermination+0x58>)
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	3b01      	subs	r3, #1
 800dcd2:	4a0a      	ldr	r2, [pc, #40]	; (800dcfc <prvCheckTasksWaitingTermination+0x58>)
 800dcd4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dcd6:	f000 fefd 	bl	800ead4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f000 f810 	bl	800dd00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dce0:	4b06      	ldr	r3, [pc, #24]	; (800dcfc <prvCheckTasksWaitingTermination+0x58>)
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d1e1      	bne.n	800dcac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800dce8:	bf00      	nop
 800dcea:	bf00      	nop
 800dcec:	3708      	adds	r7, #8
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
 800dcf2:	bf00      	nop
 800dcf4:	2000222c 	.word	0x2000222c
 800dcf8:	20002258 	.word	0x20002258
 800dcfc:	20002240 	.word	0x20002240

0800dd00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b084      	sub	sp, #16
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	3358      	adds	r3, #88	; 0x58
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f002 f8a3 	bl	800fe58 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d108      	bne.n	800dd2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd20:	4618      	mov	r0, r3
 800dd22:	f001 f899 	bl	800ee58 <vPortFree>
				vPortFree( pxTCB );
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f001 f896 	bl	800ee58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800dd2c:	e018      	b.n	800dd60 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800dd34:	2b01      	cmp	r3, #1
 800dd36:	d103      	bne.n	800dd40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f001 f88d 	bl	800ee58 <vPortFree>
	}
 800dd3e:	e00f      	b.n	800dd60 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800dd46:	2b02      	cmp	r3, #2
 800dd48:	d00a      	beq.n	800dd60 <prvDeleteTCB+0x60>
	__asm volatile
 800dd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd4e:	f383 8811 	msr	BASEPRI, r3
 800dd52:	f3bf 8f6f 	isb	sy
 800dd56:	f3bf 8f4f 	dsb	sy
 800dd5a:	60fb      	str	r3, [r7, #12]
}
 800dd5c:	bf00      	nop
 800dd5e:	e7fe      	b.n	800dd5e <prvDeleteTCB+0x5e>
	}
 800dd60:	bf00      	nop
 800dd62:	3710      	adds	r7, #16
 800dd64:	46bd      	mov	sp, r7
 800dd66:	bd80      	pop	{r7, pc}

0800dd68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b083      	sub	sp, #12
 800dd6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd6e:	4b0c      	ldr	r3, [pc, #48]	; (800dda0 <prvResetNextTaskUnblockTime+0x38>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d104      	bne.n	800dd82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800dd78:	4b0a      	ldr	r3, [pc, #40]	; (800dda4 <prvResetNextTaskUnblockTime+0x3c>)
 800dd7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800dd80:	e008      	b.n	800dd94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd82:	4b07      	ldr	r3, [pc, #28]	; (800dda0 <prvResetNextTaskUnblockTime+0x38>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	68db      	ldr	r3, [r3, #12]
 800dd88:	68db      	ldr	r3, [r3, #12]
 800dd8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	685b      	ldr	r3, [r3, #4]
 800dd90:	4a04      	ldr	r2, [pc, #16]	; (800dda4 <prvResetNextTaskUnblockTime+0x3c>)
 800dd92:	6013      	str	r3, [r2, #0]
}
 800dd94:	bf00      	nop
 800dd96:	370c      	adds	r7, #12
 800dd98:	46bd      	mov	sp, r7
 800dd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd9e:	4770      	bx	lr
 800dda0:	20002210 	.word	0x20002210
 800dda4:	20002278 	.word	0x20002278

0800dda8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800dda8:	b480      	push	{r7}
 800ddaa:	b083      	sub	sp, #12
 800ddac:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ddae:	4b05      	ldr	r3, [pc, #20]	; (800ddc4 <xTaskGetCurrentTaskHandle+0x1c>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ddb4:	687b      	ldr	r3, [r7, #4]
	}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	370c      	adds	r7, #12
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc0:	4770      	bx	lr
 800ddc2:	bf00      	nop
 800ddc4:	20001d84 	.word	0x20001d84

0800ddc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ddce:	4b0b      	ldr	r3, [pc, #44]	; (800ddfc <xTaskGetSchedulerState+0x34>)
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d102      	bne.n	800dddc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	607b      	str	r3, [r7, #4]
 800ddda:	e008      	b.n	800ddee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dddc:	4b08      	ldr	r3, [pc, #32]	; (800de00 <xTaskGetSchedulerState+0x38>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d102      	bne.n	800ddea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dde4:	2302      	movs	r3, #2
 800dde6:	607b      	str	r3, [r7, #4]
 800dde8:	e001      	b.n	800ddee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ddea:	2300      	movs	r3, #0
 800ddec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ddee:	687b      	ldr	r3, [r7, #4]
	}
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	370c      	adds	r7, #12
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfa:	4770      	bx	lr
 800ddfc:	20002264 	.word	0x20002264
 800de00:	20002280 	.word	0x20002280

0800de04 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800de04:	b580      	push	{r7, lr}
 800de06:	b084      	sub	sp, #16
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800de10:	2300      	movs	r3, #0
 800de12:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d051      	beq.n	800debe <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de1e:	4b2a      	ldr	r3, [pc, #168]	; (800dec8 <xTaskPriorityInherit+0xc4>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de24:	429a      	cmp	r2, r3
 800de26:	d241      	bcs.n	800deac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	699b      	ldr	r3, [r3, #24]
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	db06      	blt.n	800de3e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de30:	4b25      	ldr	r3, [pc, #148]	; (800dec8 <xTaskPriorityInherit+0xc4>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	6959      	ldr	r1, [r3, #20]
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de46:	4613      	mov	r3, r2
 800de48:	009b      	lsls	r3, r3, #2
 800de4a:	4413      	add	r3, r2
 800de4c:	009b      	lsls	r3, r3, #2
 800de4e:	4a1f      	ldr	r2, [pc, #124]	; (800decc <xTaskPriorityInherit+0xc8>)
 800de50:	4413      	add	r3, r2
 800de52:	4299      	cmp	r1, r3
 800de54:	d122      	bne.n	800de9c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de56:	68bb      	ldr	r3, [r7, #8]
 800de58:	3304      	adds	r3, #4
 800de5a:	4618      	mov	r0, r3
 800de5c:	f7fd ff72 	bl	800bd44 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800de60:	4b19      	ldr	r3, [pc, #100]	; (800dec8 <xTaskPriorityInherit+0xc4>)
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de66:	68bb      	ldr	r3, [r7, #8]
 800de68:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de6e:	4b18      	ldr	r3, [pc, #96]	; (800ded0 <xTaskPriorityInherit+0xcc>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	429a      	cmp	r2, r3
 800de74:	d903      	bls.n	800de7e <xTaskPriorityInherit+0x7a>
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de7a:	4a15      	ldr	r2, [pc, #84]	; (800ded0 <xTaskPriorityInherit+0xcc>)
 800de7c:	6013      	str	r3, [r2, #0]
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de82:	4613      	mov	r3, r2
 800de84:	009b      	lsls	r3, r3, #2
 800de86:	4413      	add	r3, r2
 800de88:	009b      	lsls	r3, r3, #2
 800de8a:	4a10      	ldr	r2, [pc, #64]	; (800decc <xTaskPriorityInherit+0xc8>)
 800de8c:	441a      	add	r2, r3
 800de8e:	68bb      	ldr	r3, [r7, #8]
 800de90:	3304      	adds	r3, #4
 800de92:	4619      	mov	r1, r3
 800de94:	4610      	mov	r0, r2
 800de96:	f7fd fef8 	bl	800bc8a <vListInsertEnd>
 800de9a:	e004      	b.n	800dea6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800de9c:	4b0a      	ldr	r3, [pc, #40]	; (800dec8 <xTaskPriorityInherit+0xc4>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dea6:	2301      	movs	r3, #1
 800dea8:	60fb      	str	r3, [r7, #12]
 800deaa:	e008      	b.n	800debe <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800deb0:	4b05      	ldr	r3, [pc, #20]	; (800dec8 <xTaskPriorityInherit+0xc4>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800deb6:	429a      	cmp	r2, r3
 800deb8:	d201      	bcs.n	800debe <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800deba:	2301      	movs	r3, #1
 800debc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800debe:	68fb      	ldr	r3, [r7, #12]
	}
 800dec0:	4618      	mov	r0, r3
 800dec2:	3710      	adds	r7, #16
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}
 800dec8:	20001d84 	.word	0x20001d84
 800decc:	20001d88 	.word	0x20001d88
 800ded0:	20002260 	.word	0x20002260

0800ded4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b086      	sub	sp, #24
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dee0:	2300      	movs	r3, #0
 800dee2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d056      	beq.n	800df98 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800deea:	4b2e      	ldr	r3, [pc, #184]	; (800dfa4 <xTaskPriorityDisinherit+0xd0>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	693a      	ldr	r2, [r7, #16]
 800def0:	429a      	cmp	r2, r3
 800def2:	d00a      	beq.n	800df0a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800def4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def8:	f383 8811 	msr	BASEPRI, r3
 800defc:	f3bf 8f6f 	isb	sy
 800df00:	f3bf 8f4f 	dsb	sy
 800df04:	60fb      	str	r3, [r7, #12]
}
 800df06:	bf00      	nop
 800df08:	e7fe      	b.n	800df08 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d10a      	bne.n	800df28 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800df12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df16:	f383 8811 	msr	BASEPRI, r3
 800df1a:	f3bf 8f6f 	isb	sy
 800df1e:	f3bf 8f4f 	dsb	sy
 800df22:	60bb      	str	r3, [r7, #8]
}
 800df24:	bf00      	nop
 800df26:	e7fe      	b.n	800df26 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800df28:	693b      	ldr	r3, [r7, #16]
 800df2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df2c:	1e5a      	subs	r2, r3, #1
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800df32:	693b      	ldr	r3, [r7, #16]
 800df34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d02c      	beq.n	800df98 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800df3e:	693b      	ldr	r3, [r7, #16]
 800df40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df42:	2b00      	cmp	r3, #0
 800df44:	d128      	bne.n	800df98 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df46:	693b      	ldr	r3, [r7, #16]
 800df48:	3304      	adds	r3, #4
 800df4a:	4618      	mov	r0, r3
 800df4c:	f7fd fefa 	bl	800bd44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800df50:	693b      	ldr	r3, [r7, #16]
 800df52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df5c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800df60:	693b      	ldr	r3, [r7, #16]
 800df62:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df68:	4b0f      	ldr	r3, [pc, #60]	; (800dfa8 <xTaskPriorityDisinherit+0xd4>)
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d903      	bls.n	800df78 <xTaskPriorityDisinherit+0xa4>
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df74:	4a0c      	ldr	r2, [pc, #48]	; (800dfa8 <xTaskPriorityDisinherit+0xd4>)
 800df76:	6013      	str	r3, [r2, #0]
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df7c:	4613      	mov	r3, r2
 800df7e:	009b      	lsls	r3, r3, #2
 800df80:	4413      	add	r3, r2
 800df82:	009b      	lsls	r3, r3, #2
 800df84:	4a09      	ldr	r2, [pc, #36]	; (800dfac <xTaskPriorityDisinherit+0xd8>)
 800df86:	441a      	add	r2, r3
 800df88:	693b      	ldr	r3, [r7, #16]
 800df8a:	3304      	adds	r3, #4
 800df8c:	4619      	mov	r1, r3
 800df8e:	4610      	mov	r0, r2
 800df90:	f7fd fe7b 	bl	800bc8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800df94:	2301      	movs	r3, #1
 800df96:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800df98:	697b      	ldr	r3, [r7, #20]
	}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3718      	adds	r7, #24
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}
 800dfa2:	bf00      	nop
 800dfa4:	20001d84 	.word	0x20001d84
 800dfa8:	20002260 	.word	0x20002260
 800dfac:	20001d88 	.word	0x20001d88

0800dfb0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b088      	sub	sp, #32
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
 800dfb8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d06a      	beq.n	800e09e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dfc8:	69bb      	ldr	r3, [r7, #24]
 800dfca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d10a      	bne.n	800dfe6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800dfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd4:	f383 8811 	msr	BASEPRI, r3
 800dfd8:	f3bf 8f6f 	isb	sy
 800dfdc:	f3bf 8f4f 	dsb	sy
 800dfe0:	60fb      	str	r3, [r7, #12]
}
 800dfe2:	bf00      	nop
 800dfe4:	e7fe      	b.n	800dfe4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dfe6:	69bb      	ldr	r3, [r7, #24]
 800dfe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dfea:	683a      	ldr	r2, [r7, #0]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d902      	bls.n	800dff6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	61fb      	str	r3, [r7, #28]
 800dff4:	e002      	b.n	800dffc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dff6:	69bb      	ldr	r3, [r7, #24]
 800dff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dffa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dffc:	69bb      	ldr	r3, [r7, #24]
 800dffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e000:	69fa      	ldr	r2, [r7, #28]
 800e002:	429a      	cmp	r2, r3
 800e004:	d04b      	beq.n	800e09e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e006:	69bb      	ldr	r3, [r7, #24]
 800e008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e00a:	697a      	ldr	r2, [r7, #20]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d146      	bne.n	800e09e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e010:	4b25      	ldr	r3, [pc, #148]	; (800e0a8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	69ba      	ldr	r2, [r7, #24]
 800e016:	429a      	cmp	r2, r3
 800e018:	d10a      	bne.n	800e030 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e01a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e01e:	f383 8811 	msr	BASEPRI, r3
 800e022:	f3bf 8f6f 	isb	sy
 800e026:	f3bf 8f4f 	dsb	sy
 800e02a:	60bb      	str	r3, [r7, #8]
}
 800e02c:	bf00      	nop
 800e02e:	e7fe      	b.n	800e02e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e030:	69bb      	ldr	r3, [r7, #24]
 800e032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e034:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e036:	69bb      	ldr	r3, [r7, #24]
 800e038:	69fa      	ldr	r2, [r7, #28]
 800e03a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e03c:	69bb      	ldr	r3, [r7, #24]
 800e03e:	699b      	ldr	r3, [r3, #24]
 800e040:	2b00      	cmp	r3, #0
 800e042:	db04      	blt.n	800e04e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e044:	69fb      	ldr	r3, [r7, #28]
 800e046:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e04a:	69bb      	ldr	r3, [r7, #24]
 800e04c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e04e:	69bb      	ldr	r3, [r7, #24]
 800e050:	6959      	ldr	r1, [r3, #20]
 800e052:	693a      	ldr	r2, [r7, #16]
 800e054:	4613      	mov	r3, r2
 800e056:	009b      	lsls	r3, r3, #2
 800e058:	4413      	add	r3, r2
 800e05a:	009b      	lsls	r3, r3, #2
 800e05c:	4a13      	ldr	r2, [pc, #76]	; (800e0ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e05e:	4413      	add	r3, r2
 800e060:	4299      	cmp	r1, r3
 800e062:	d11c      	bne.n	800e09e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e064:	69bb      	ldr	r3, [r7, #24]
 800e066:	3304      	adds	r3, #4
 800e068:	4618      	mov	r0, r3
 800e06a:	f7fd fe6b 	bl	800bd44 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e072:	4b0f      	ldr	r3, [pc, #60]	; (800e0b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	429a      	cmp	r2, r3
 800e078:	d903      	bls.n	800e082 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e07a:	69bb      	ldr	r3, [r7, #24]
 800e07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e07e:	4a0c      	ldr	r2, [pc, #48]	; (800e0b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e080:	6013      	str	r3, [r2, #0]
 800e082:	69bb      	ldr	r3, [r7, #24]
 800e084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e086:	4613      	mov	r3, r2
 800e088:	009b      	lsls	r3, r3, #2
 800e08a:	4413      	add	r3, r2
 800e08c:	009b      	lsls	r3, r3, #2
 800e08e:	4a07      	ldr	r2, [pc, #28]	; (800e0ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e090:	441a      	add	r2, r3
 800e092:	69bb      	ldr	r3, [r7, #24]
 800e094:	3304      	adds	r3, #4
 800e096:	4619      	mov	r1, r3
 800e098:	4610      	mov	r0, r2
 800e09a:	f7fd fdf6 	bl	800bc8a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e09e:	bf00      	nop
 800e0a0:	3720      	adds	r7, #32
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}
 800e0a6:	bf00      	nop
 800e0a8:	20001d84 	.word	0x20001d84
 800e0ac:	20001d88 	.word	0x20001d88
 800e0b0:	20002260 	.word	0x20002260

0800e0b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e0b4:	b480      	push	{r7}
 800e0b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e0b8:	4b07      	ldr	r3, [pc, #28]	; (800e0d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d004      	beq.n	800e0ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e0c0:	4b05      	ldr	r3, [pc, #20]	; (800e0d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0c6:	3201      	adds	r2, #1
 800e0c8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e0ca:	4b03      	ldr	r3, [pc, #12]	; (800e0d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
	}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d6:	4770      	bx	lr
 800e0d8:	20001d84 	.word	0x20001d84

0800e0dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e0e6:	4b21      	ldr	r3, [pc, #132]	; (800e16c <prvAddCurrentTaskToDelayedList+0x90>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0ec:	4b20      	ldr	r3, [pc, #128]	; (800e170 <prvAddCurrentTaskToDelayedList+0x94>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	3304      	adds	r3, #4
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7fd fe26 	bl	800bd44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0fe:	d10a      	bne.n	800e116 <prvAddCurrentTaskToDelayedList+0x3a>
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d007      	beq.n	800e116 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e106:	4b1a      	ldr	r3, [pc, #104]	; (800e170 <prvAddCurrentTaskToDelayedList+0x94>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	3304      	adds	r3, #4
 800e10c:	4619      	mov	r1, r3
 800e10e:	4819      	ldr	r0, [pc, #100]	; (800e174 <prvAddCurrentTaskToDelayedList+0x98>)
 800e110:	f7fd fdbb 	bl	800bc8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e114:	e026      	b.n	800e164 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e116:	68fa      	ldr	r2, [r7, #12]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	4413      	add	r3, r2
 800e11c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e11e:	4b14      	ldr	r3, [pc, #80]	; (800e170 <prvAddCurrentTaskToDelayedList+0x94>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	68ba      	ldr	r2, [r7, #8]
 800e124:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e126:	68ba      	ldr	r2, [r7, #8]
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d209      	bcs.n	800e142 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e12e:	4b12      	ldr	r3, [pc, #72]	; (800e178 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e130:	681a      	ldr	r2, [r3, #0]
 800e132:	4b0f      	ldr	r3, [pc, #60]	; (800e170 <prvAddCurrentTaskToDelayedList+0x94>)
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	3304      	adds	r3, #4
 800e138:	4619      	mov	r1, r3
 800e13a:	4610      	mov	r0, r2
 800e13c:	f7fd fdc9 	bl	800bcd2 <vListInsert>
}
 800e140:	e010      	b.n	800e164 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e142:	4b0e      	ldr	r3, [pc, #56]	; (800e17c <prvAddCurrentTaskToDelayedList+0xa0>)
 800e144:	681a      	ldr	r2, [r3, #0]
 800e146:	4b0a      	ldr	r3, [pc, #40]	; (800e170 <prvAddCurrentTaskToDelayedList+0x94>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	3304      	adds	r3, #4
 800e14c:	4619      	mov	r1, r3
 800e14e:	4610      	mov	r0, r2
 800e150:	f7fd fdbf 	bl	800bcd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e154:	4b0a      	ldr	r3, [pc, #40]	; (800e180 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	68ba      	ldr	r2, [r7, #8]
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d202      	bcs.n	800e164 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e15e:	4a08      	ldr	r2, [pc, #32]	; (800e180 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	6013      	str	r3, [r2, #0]
}
 800e164:	bf00      	nop
 800e166:	3710      	adds	r7, #16
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	2000225c 	.word	0x2000225c
 800e170:	20001d84 	.word	0x20001d84
 800e174:	20002244 	.word	0x20002244
 800e178:	20002214 	.word	0x20002214
 800e17c:	20002210 	.word	0x20002210
 800e180:	20002278 	.word	0x20002278

0800e184 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b08a      	sub	sp, #40	; 0x28
 800e188:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e18a:	2300      	movs	r3, #0
 800e18c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e18e:	f000 fb07 	bl	800e7a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e192:	4b1c      	ldr	r3, [pc, #112]	; (800e204 <xTimerCreateTimerTask+0x80>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	2b00      	cmp	r3, #0
 800e198:	d021      	beq.n	800e1de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e19a:	2300      	movs	r3, #0
 800e19c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e1a2:	1d3a      	adds	r2, r7, #4
 800e1a4:	f107 0108 	add.w	r1, r7, #8
 800e1a8:	f107 030c 	add.w	r3, r7, #12
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7fd fd25 	bl	800bbfc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e1b2:	6879      	ldr	r1, [r7, #4]
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	68fa      	ldr	r2, [r7, #12]
 800e1b8:	9202      	str	r2, [sp, #8]
 800e1ba:	9301      	str	r3, [sp, #4]
 800e1bc:	2302      	movs	r3, #2
 800e1be:	9300      	str	r3, [sp, #0]
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	460a      	mov	r2, r1
 800e1c4:	4910      	ldr	r1, [pc, #64]	; (800e208 <xTimerCreateTimerTask+0x84>)
 800e1c6:	4811      	ldr	r0, [pc, #68]	; (800e20c <xTimerCreateTimerTask+0x88>)
 800e1c8:	f7fe ff74 	bl	800d0b4 <xTaskCreateStatic>
 800e1cc:	4603      	mov	r3, r0
 800e1ce:	4a10      	ldr	r2, [pc, #64]	; (800e210 <xTimerCreateTimerTask+0x8c>)
 800e1d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e1d2:	4b0f      	ldr	r3, [pc, #60]	; (800e210 <xTimerCreateTimerTask+0x8c>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d001      	beq.n	800e1de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e1da:	2301      	movs	r3, #1
 800e1dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d10a      	bne.n	800e1fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1e8:	f383 8811 	msr	BASEPRI, r3
 800e1ec:	f3bf 8f6f 	isb	sy
 800e1f0:	f3bf 8f4f 	dsb	sy
 800e1f4:	613b      	str	r3, [r7, #16]
}
 800e1f6:	bf00      	nop
 800e1f8:	e7fe      	b.n	800e1f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e1fa:	697b      	ldr	r3, [r7, #20]
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3718      	adds	r7, #24
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}
 800e204:	200022bc 	.word	0x200022bc
 800e208:	08011e80 	.word	0x08011e80
 800e20c:	0800e349 	.word	0x0800e349
 800e210:	200022c0 	.word	0x200022c0

0800e214 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b08a      	sub	sp, #40	; 0x28
 800e218:	af00      	add	r7, sp, #0
 800e21a:	60f8      	str	r0, [r7, #12]
 800e21c:	60b9      	str	r1, [r7, #8]
 800e21e:	607a      	str	r2, [r7, #4]
 800e220:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e222:	2300      	movs	r3, #0
 800e224:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d10a      	bne.n	800e242 <xTimerGenericCommand+0x2e>
	__asm volatile
 800e22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e230:	f383 8811 	msr	BASEPRI, r3
 800e234:	f3bf 8f6f 	isb	sy
 800e238:	f3bf 8f4f 	dsb	sy
 800e23c:	623b      	str	r3, [r7, #32]
}
 800e23e:	bf00      	nop
 800e240:	e7fe      	b.n	800e240 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e242:	4b1a      	ldr	r3, [pc, #104]	; (800e2ac <xTimerGenericCommand+0x98>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d02a      	beq.n	800e2a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e24a:	68bb      	ldr	r3, [r7, #8]
 800e24c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e256:	68bb      	ldr	r3, [r7, #8]
 800e258:	2b05      	cmp	r3, #5
 800e25a:	dc18      	bgt.n	800e28e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e25c:	f7ff fdb4 	bl	800ddc8 <xTaskGetSchedulerState>
 800e260:	4603      	mov	r3, r0
 800e262:	2b02      	cmp	r3, #2
 800e264:	d109      	bne.n	800e27a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e266:	4b11      	ldr	r3, [pc, #68]	; (800e2ac <xTimerGenericCommand+0x98>)
 800e268:	6818      	ldr	r0, [r3, #0]
 800e26a:	f107 0110 	add.w	r1, r7, #16
 800e26e:	2300      	movs	r3, #0
 800e270:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e272:	f7fd ffef 	bl	800c254 <xQueueGenericSend>
 800e276:	6278      	str	r0, [r7, #36]	; 0x24
 800e278:	e012      	b.n	800e2a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e27a:	4b0c      	ldr	r3, [pc, #48]	; (800e2ac <xTimerGenericCommand+0x98>)
 800e27c:	6818      	ldr	r0, [r3, #0]
 800e27e:	f107 0110 	add.w	r1, r7, #16
 800e282:	2300      	movs	r3, #0
 800e284:	2200      	movs	r2, #0
 800e286:	f7fd ffe5 	bl	800c254 <xQueueGenericSend>
 800e28a:	6278      	str	r0, [r7, #36]	; 0x24
 800e28c:	e008      	b.n	800e2a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e28e:	4b07      	ldr	r3, [pc, #28]	; (800e2ac <xTimerGenericCommand+0x98>)
 800e290:	6818      	ldr	r0, [r3, #0]
 800e292:	f107 0110 	add.w	r1, r7, #16
 800e296:	2300      	movs	r3, #0
 800e298:	683a      	ldr	r2, [r7, #0]
 800e29a:	f7fe f8d9 	bl	800c450 <xQueueGenericSendFromISR>
 800e29e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3728      	adds	r7, #40	; 0x28
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}
 800e2aa:	bf00      	nop
 800e2ac:	200022bc 	.word	0x200022bc

0800e2b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b088      	sub	sp, #32
 800e2b4:	af02      	add	r7, sp, #8
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e2ba:	4b22      	ldr	r3, [pc, #136]	; (800e344 <prvProcessExpiredTimer+0x94>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	68db      	ldr	r3, [r3, #12]
 800e2c0:	68db      	ldr	r3, [r3, #12]
 800e2c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e2c4:	697b      	ldr	r3, [r7, #20]
 800e2c6:	3304      	adds	r3, #4
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f7fd fd3b 	bl	800bd44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e2d4:	f003 0304 	and.w	r3, r3, #4
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d022      	beq.n	800e322 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	699a      	ldr	r2, [r3, #24]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	18d1      	adds	r1, r2, r3
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	683a      	ldr	r2, [r7, #0]
 800e2e8:	6978      	ldr	r0, [r7, #20]
 800e2ea:	f000 f8d1 	bl	800e490 <prvInsertTimerInActiveList>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d01f      	beq.n	800e334 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e2f4:	2300      	movs	r3, #0
 800e2f6:	9300      	str	r3, [sp, #0]
 800e2f8:	2300      	movs	r3, #0
 800e2fa:	687a      	ldr	r2, [r7, #4]
 800e2fc:	2100      	movs	r1, #0
 800e2fe:	6978      	ldr	r0, [r7, #20]
 800e300:	f7ff ff88 	bl	800e214 <xTimerGenericCommand>
 800e304:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e306:	693b      	ldr	r3, [r7, #16]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d113      	bne.n	800e334 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e30c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e310:	f383 8811 	msr	BASEPRI, r3
 800e314:	f3bf 8f6f 	isb	sy
 800e318:	f3bf 8f4f 	dsb	sy
 800e31c:	60fb      	str	r3, [r7, #12]
}
 800e31e:	bf00      	nop
 800e320:	e7fe      	b.n	800e320 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e328:	f023 0301 	bic.w	r3, r3, #1
 800e32c:	b2da      	uxtb	r2, r3
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e334:	697b      	ldr	r3, [r7, #20]
 800e336:	6a1b      	ldr	r3, [r3, #32]
 800e338:	6978      	ldr	r0, [r7, #20]
 800e33a:	4798      	blx	r3
}
 800e33c:	bf00      	nop
 800e33e:	3718      	adds	r7, #24
 800e340:	46bd      	mov	sp, r7
 800e342:	bd80      	pop	{r7, pc}
 800e344:	200022b4 	.word	0x200022b4

0800e348 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b084      	sub	sp, #16
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e350:	f107 0308 	add.w	r3, r7, #8
 800e354:	4618      	mov	r0, r3
 800e356:	f000 f857 	bl	800e408 <prvGetNextExpireTime>
 800e35a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	4619      	mov	r1, r3
 800e360:	68f8      	ldr	r0, [r7, #12]
 800e362:	f000 f803 	bl	800e36c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e366:	f000 f8d5 	bl	800e514 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e36a:	e7f1      	b.n	800e350 <prvTimerTask+0x8>

0800e36c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b084      	sub	sp, #16
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e376:	f7ff f8ff 	bl	800d578 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e37a:	f107 0308 	add.w	r3, r7, #8
 800e37e:	4618      	mov	r0, r3
 800e380:	f000 f866 	bl	800e450 <prvSampleTimeNow>
 800e384:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d130      	bne.n	800e3ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e38c:	683b      	ldr	r3, [r7, #0]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d10a      	bne.n	800e3a8 <prvProcessTimerOrBlockTask+0x3c>
 800e392:	687a      	ldr	r2, [r7, #4]
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	429a      	cmp	r2, r3
 800e398:	d806      	bhi.n	800e3a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e39a:	f7ff f8fb 	bl	800d594 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e39e:	68f9      	ldr	r1, [r7, #12]
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f7ff ff85 	bl	800e2b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e3a6:	e024      	b.n	800e3f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e3a8:	683b      	ldr	r3, [r7, #0]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d008      	beq.n	800e3c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e3ae:	4b13      	ldr	r3, [pc, #76]	; (800e3fc <prvProcessTimerOrBlockTask+0x90>)
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d101      	bne.n	800e3bc <prvProcessTimerOrBlockTask+0x50>
 800e3b8:	2301      	movs	r3, #1
 800e3ba:	e000      	b.n	800e3be <prvProcessTimerOrBlockTask+0x52>
 800e3bc:	2300      	movs	r3, #0
 800e3be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e3c0:	4b0f      	ldr	r3, [pc, #60]	; (800e400 <prvProcessTimerOrBlockTask+0x94>)
 800e3c2:	6818      	ldr	r0, [r3, #0]
 800e3c4:	687a      	ldr	r2, [r7, #4]
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	1ad3      	subs	r3, r2, r3
 800e3ca:	683a      	ldr	r2, [r7, #0]
 800e3cc:	4619      	mov	r1, r3
 800e3ce:	f7fe fdaf 	bl	800cf30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e3d2:	f7ff f8df 	bl	800d594 <xTaskResumeAll>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d10a      	bne.n	800e3f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e3dc:	4b09      	ldr	r3, [pc, #36]	; (800e404 <prvProcessTimerOrBlockTask+0x98>)
 800e3de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3e2:	601a      	str	r2, [r3, #0]
 800e3e4:	f3bf 8f4f 	dsb	sy
 800e3e8:	f3bf 8f6f 	isb	sy
}
 800e3ec:	e001      	b.n	800e3f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e3ee:	f7ff f8d1 	bl	800d594 <xTaskResumeAll>
}
 800e3f2:	bf00      	nop
 800e3f4:	3710      	adds	r7, #16
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}
 800e3fa:	bf00      	nop
 800e3fc:	200022b8 	.word	0x200022b8
 800e400:	200022bc 	.word	0x200022bc
 800e404:	e000ed04 	.word	0xe000ed04

0800e408 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e408:	b480      	push	{r7}
 800e40a:	b085      	sub	sp, #20
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e410:	4b0e      	ldr	r3, [pc, #56]	; (800e44c <prvGetNextExpireTime+0x44>)
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d101      	bne.n	800e41e <prvGetNextExpireTime+0x16>
 800e41a:	2201      	movs	r2, #1
 800e41c:	e000      	b.n	800e420 <prvGetNextExpireTime+0x18>
 800e41e:	2200      	movs	r2, #0
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d105      	bne.n	800e438 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e42c:	4b07      	ldr	r3, [pc, #28]	; (800e44c <prvGetNextExpireTime+0x44>)
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	68db      	ldr	r3, [r3, #12]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	60fb      	str	r3, [r7, #12]
 800e436:	e001      	b.n	800e43c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e438:	2300      	movs	r3, #0
 800e43a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e43c:	68fb      	ldr	r3, [r7, #12]
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3714      	adds	r7, #20
 800e442:	46bd      	mov	sp, r7
 800e444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e448:	4770      	bx	lr
 800e44a:	bf00      	nop
 800e44c:	200022b4 	.word	0x200022b4

0800e450 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b084      	sub	sp, #16
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e458:	f7ff f93a 	bl	800d6d0 <xTaskGetTickCount>
 800e45c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e45e:	4b0b      	ldr	r3, [pc, #44]	; (800e48c <prvSampleTimeNow+0x3c>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	68fa      	ldr	r2, [r7, #12]
 800e464:	429a      	cmp	r2, r3
 800e466:	d205      	bcs.n	800e474 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e468:	f000 f936 	bl	800e6d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	2201      	movs	r2, #1
 800e470:	601a      	str	r2, [r3, #0]
 800e472:	e002      	b.n	800e47a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	2200      	movs	r2, #0
 800e478:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e47a:	4a04      	ldr	r2, [pc, #16]	; (800e48c <prvSampleTimeNow+0x3c>)
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e480:	68fb      	ldr	r3, [r7, #12]
}
 800e482:	4618      	mov	r0, r3
 800e484:	3710      	adds	r7, #16
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	200022c4 	.word	0x200022c4

0800e490 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b086      	sub	sp, #24
 800e494:	af00      	add	r7, sp, #0
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	607a      	str	r2, [r7, #4]
 800e49c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e49e:	2300      	movs	r3, #0
 800e4a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	68ba      	ldr	r2, [r7, #8]
 800e4a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	68fa      	ldr	r2, [r7, #12]
 800e4ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e4ae:	68ba      	ldr	r2, [r7, #8]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d812      	bhi.n	800e4dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4b6:	687a      	ldr	r2, [r7, #4]
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	1ad2      	subs	r2, r2, r3
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	699b      	ldr	r3, [r3, #24]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d302      	bcc.n	800e4ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	617b      	str	r3, [r7, #20]
 800e4c8:	e01b      	b.n	800e502 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e4ca:	4b10      	ldr	r3, [pc, #64]	; (800e50c <prvInsertTimerInActiveList+0x7c>)
 800e4cc:	681a      	ldr	r2, [r3, #0]
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	3304      	adds	r3, #4
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	4610      	mov	r0, r2
 800e4d6:	f7fd fbfc 	bl	800bcd2 <vListInsert>
 800e4da:	e012      	b.n	800e502 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e4dc:	687a      	ldr	r2, [r7, #4]
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d206      	bcs.n	800e4f2 <prvInsertTimerInActiveList+0x62>
 800e4e4:	68ba      	ldr	r2, [r7, #8]
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d302      	bcc.n	800e4f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	617b      	str	r3, [r7, #20]
 800e4f0:	e007      	b.n	800e502 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e4f2:	4b07      	ldr	r3, [pc, #28]	; (800e510 <prvInsertTimerInActiveList+0x80>)
 800e4f4:	681a      	ldr	r2, [r3, #0]
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	3304      	adds	r3, #4
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	4610      	mov	r0, r2
 800e4fe:	f7fd fbe8 	bl	800bcd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e502:	697b      	ldr	r3, [r7, #20]
}
 800e504:	4618      	mov	r0, r3
 800e506:	3718      	adds	r7, #24
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}
 800e50c:	200022b8 	.word	0x200022b8
 800e510:	200022b4 	.word	0x200022b4

0800e514 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b08e      	sub	sp, #56	; 0x38
 800e518:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e51a:	e0ca      	b.n	800e6b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	da18      	bge.n	800e554 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e522:	1d3b      	adds	r3, r7, #4
 800e524:	3304      	adds	r3, #4
 800e526:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d10a      	bne.n	800e544 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e52e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e532:	f383 8811 	msr	BASEPRI, r3
 800e536:	f3bf 8f6f 	isb	sy
 800e53a:	f3bf 8f4f 	dsb	sy
 800e53e:	61fb      	str	r3, [r7, #28]
}
 800e540:	bf00      	nop
 800e542:	e7fe      	b.n	800e542 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e54a:	6850      	ldr	r0, [r2, #4]
 800e54c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e54e:	6892      	ldr	r2, [r2, #8]
 800e550:	4611      	mov	r1, r2
 800e552:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2b00      	cmp	r3, #0
 800e558:	f2c0 80aa 	blt.w	800e6b0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e562:	695b      	ldr	r3, [r3, #20]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d004      	beq.n	800e572 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e56a:	3304      	adds	r3, #4
 800e56c:	4618      	mov	r0, r3
 800e56e:	f7fd fbe9 	bl	800bd44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e572:	463b      	mov	r3, r7
 800e574:	4618      	mov	r0, r3
 800e576:	f7ff ff6b 	bl	800e450 <prvSampleTimeNow>
 800e57a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2b09      	cmp	r3, #9
 800e580:	f200 8097 	bhi.w	800e6b2 <prvProcessReceivedCommands+0x19e>
 800e584:	a201      	add	r2, pc, #4	; (adr r2, 800e58c <prvProcessReceivedCommands+0x78>)
 800e586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e58a:	bf00      	nop
 800e58c:	0800e5b5 	.word	0x0800e5b5
 800e590:	0800e5b5 	.word	0x0800e5b5
 800e594:	0800e5b5 	.word	0x0800e5b5
 800e598:	0800e629 	.word	0x0800e629
 800e59c:	0800e63d 	.word	0x0800e63d
 800e5a0:	0800e687 	.word	0x0800e687
 800e5a4:	0800e5b5 	.word	0x0800e5b5
 800e5a8:	0800e5b5 	.word	0x0800e5b5
 800e5ac:	0800e629 	.word	0x0800e629
 800e5b0:	0800e63d 	.word	0x0800e63d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5ba:	f043 0301 	orr.w	r3, r3, #1
 800e5be:	b2da      	uxtb	r2, r3
 800e5c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e5c6:	68ba      	ldr	r2, [r7, #8]
 800e5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5ca:	699b      	ldr	r3, [r3, #24]
 800e5cc:	18d1      	adds	r1, r2, r3
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5d4:	f7ff ff5c 	bl	800e490 <prvInsertTimerInActiveList>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d069      	beq.n	800e6b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e5de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e0:	6a1b      	ldr	r3, [r3, #32]
 800e5e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e5e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e5ec:	f003 0304 	and.w	r3, r3, #4
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d05e      	beq.n	800e6b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e5f4:	68ba      	ldr	r2, [r7, #8]
 800e5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5f8:	699b      	ldr	r3, [r3, #24]
 800e5fa:	441a      	add	r2, r3
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	9300      	str	r3, [sp, #0]
 800e600:	2300      	movs	r3, #0
 800e602:	2100      	movs	r1, #0
 800e604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e606:	f7ff fe05 	bl	800e214 <xTimerGenericCommand>
 800e60a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e60c:	6a3b      	ldr	r3, [r7, #32]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d14f      	bne.n	800e6b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e616:	f383 8811 	msr	BASEPRI, r3
 800e61a:	f3bf 8f6f 	isb	sy
 800e61e:	f3bf 8f4f 	dsb	sy
 800e622:	61bb      	str	r3, [r7, #24]
}
 800e624:	bf00      	nop
 800e626:	e7fe      	b.n	800e626 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e62a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e62e:	f023 0301 	bic.w	r3, r3, #1
 800e632:	b2da      	uxtb	r2, r3
 800e634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e636:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e63a:	e03a      	b.n	800e6b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e63e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e642:	f043 0301 	orr.w	r3, r3, #1
 800e646:	b2da      	uxtb	r2, r3
 800e648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e64a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e64e:	68ba      	ldr	r2, [r7, #8]
 800e650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e652:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e656:	699b      	ldr	r3, [r3, #24]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d10a      	bne.n	800e672 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e660:	f383 8811 	msr	BASEPRI, r3
 800e664:	f3bf 8f6f 	isb	sy
 800e668:	f3bf 8f4f 	dsb	sy
 800e66c:	617b      	str	r3, [r7, #20]
}
 800e66e:	bf00      	nop
 800e670:	e7fe      	b.n	800e670 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e674:	699a      	ldr	r2, [r3, #24]
 800e676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e678:	18d1      	adds	r1, r2, r3
 800e67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e67c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e67e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e680:	f7ff ff06 	bl	800e490 <prvInsertTimerInActiveList>
					break;
 800e684:	e015      	b.n	800e6b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e688:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e68c:	f003 0302 	and.w	r3, r3, #2
 800e690:	2b00      	cmp	r3, #0
 800e692:	d103      	bne.n	800e69c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e696:	f000 fbdf 	bl	800ee58 <vPortFree>
 800e69a:	e00a      	b.n	800e6b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e69e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e6a2:	f023 0301 	bic.w	r3, r3, #1
 800e6a6:	b2da      	uxtb	r2, r3
 800e6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e6ae:	e000      	b.n	800e6b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e6b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e6b2:	4b08      	ldr	r3, [pc, #32]	; (800e6d4 <prvProcessReceivedCommands+0x1c0>)
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	1d39      	adds	r1, r7, #4
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7fd fff0 	bl	800c6a0 <xQueueReceive>
 800e6c0:	4603      	mov	r3, r0
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	f47f af2a 	bne.w	800e51c <prvProcessReceivedCommands+0x8>
	}
}
 800e6c8:	bf00      	nop
 800e6ca:	bf00      	nop
 800e6cc:	3730      	adds	r7, #48	; 0x30
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	bd80      	pop	{r7, pc}
 800e6d2:	bf00      	nop
 800e6d4:	200022bc 	.word	0x200022bc

0800e6d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e6d8:	b580      	push	{r7, lr}
 800e6da:	b088      	sub	sp, #32
 800e6dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e6de:	e048      	b.n	800e772 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e6e0:	4b2d      	ldr	r3, [pc, #180]	; (800e798 <prvSwitchTimerLists+0xc0>)
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	68db      	ldr	r3, [r3, #12]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6ea:	4b2b      	ldr	r3, [pc, #172]	; (800e798 <prvSwitchTimerLists+0xc0>)
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	68db      	ldr	r3, [r3, #12]
 800e6f0:	68db      	ldr	r3, [r3, #12]
 800e6f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	3304      	adds	r3, #4
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f7fd fb23 	bl	800bd44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	6a1b      	ldr	r3, [r3, #32]
 800e702:	68f8      	ldr	r0, [r7, #12]
 800e704:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e70c:	f003 0304 	and.w	r3, r3, #4
 800e710:	2b00      	cmp	r3, #0
 800e712:	d02e      	beq.n	800e772 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	699b      	ldr	r3, [r3, #24]
 800e718:	693a      	ldr	r2, [r7, #16]
 800e71a:	4413      	add	r3, r2
 800e71c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e71e:	68ba      	ldr	r2, [r7, #8]
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	429a      	cmp	r2, r3
 800e724:	d90e      	bls.n	800e744 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	68ba      	ldr	r2, [r7, #8]
 800e72a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	68fa      	ldr	r2, [r7, #12]
 800e730:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e732:	4b19      	ldr	r3, [pc, #100]	; (800e798 <prvSwitchTimerLists+0xc0>)
 800e734:	681a      	ldr	r2, [r3, #0]
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	3304      	adds	r3, #4
 800e73a:	4619      	mov	r1, r3
 800e73c:	4610      	mov	r0, r2
 800e73e:	f7fd fac8 	bl	800bcd2 <vListInsert>
 800e742:	e016      	b.n	800e772 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e744:	2300      	movs	r3, #0
 800e746:	9300      	str	r3, [sp, #0]
 800e748:	2300      	movs	r3, #0
 800e74a:	693a      	ldr	r2, [r7, #16]
 800e74c:	2100      	movs	r1, #0
 800e74e:	68f8      	ldr	r0, [r7, #12]
 800e750:	f7ff fd60 	bl	800e214 <xTimerGenericCommand>
 800e754:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d10a      	bne.n	800e772 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e760:	f383 8811 	msr	BASEPRI, r3
 800e764:	f3bf 8f6f 	isb	sy
 800e768:	f3bf 8f4f 	dsb	sy
 800e76c:	603b      	str	r3, [r7, #0]
}
 800e76e:	bf00      	nop
 800e770:	e7fe      	b.n	800e770 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e772:	4b09      	ldr	r3, [pc, #36]	; (800e798 <prvSwitchTimerLists+0xc0>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d1b1      	bne.n	800e6e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e77c:	4b06      	ldr	r3, [pc, #24]	; (800e798 <prvSwitchTimerLists+0xc0>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e782:	4b06      	ldr	r3, [pc, #24]	; (800e79c <prvSwitchTimerLists+0xc4>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	4a04      	ldr	r2, [pc, #16]	; (800e798 <prvSwitchTimerLists+0xc0>)
 800e788:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e78a:	4a04      	ldr	r2, [pc, #16]	; (800e79c <prvSwitchTimerLists+0xc4>)
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	6013      	str	r3, [r2, #0]
}
 800e790:	bf00      	nop
 800e792:	3718      	adds	r7, #24
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}
 800e798:	200022b4 	.word	0x200022b4
 800e79c:	200022b8 	.word	0x200022b8

0800e7a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b082      	sub	sp, #8
 800e7a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e7a6:	f000 f965 	bl	800ea74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e7aa:	4b15      	ldr	r3, [pc, #84]	; (800e800 <prvCheckForValidListAndQueue+0x60>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d120      	bne.n	800e7f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e7b2:	4814      	ldr	r0, [pc, #80]	; (800e804 <prvCheckForValidListAndQueue+0x64>)
 800e7b4:	f7fd fa3c 	bl	800bc30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e7b8:	4813      	ldr	r0, [pc, #76]	; (800e808 <prvCheckForValidListAndQueue+0x68>)
 800e7ba:	f7fd fa39 	bl	800bc30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e7be:	4b13      	ldr	r3, [pc, #76]	; (800e80c <prvCheckForValidListAndQueue+0x6c>)
 800e7c0:	4a10      	ldr	r2, [pc, #64]	; (800e804 <prvCheckForValidListAndQueue+0x64>)
 800e7c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e7c4:	4b12      	ldr	r3, [pc, #72]	; (800e810 <prvCheckForValidListAndQueue+0x70>)
 800e7c6:	4a10      	ldr	r2, [pc, #64]	; (800e808 <prvCheckForValidListAndQueue+0x68>)
 800e7c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e7ca:	2300      	movs	r3, #0
 800e7cc:	9300      	str	r3, [sp, #0]
 800e7ce:	4b11      	ldr	r3, [pc, #68]	; (800e814 <prvCheckForValidListAndQueue+0x74>)
 800e7d0:	4a11      	ldr	r2, [pc, #68]	; (800e818 <prvCheckForValidListAndQueue+0x78>)
 800e7d2:	2110      	movs	r1, #16
 800e7d4:	200a      	movs	r0, #10
 800e7d6:	f7fd fb47 	bl	800be68 <xQueueGenericCreateStatic>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	4a08      	ldr	r2, [pc, #32]	; (800e800 <prvCheckForValidListAndQueue+0x60>)
 800e7de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e7e0:	4b07      	ldr	r3, [pc, #28]	; (800e800 <prvCheckForValidListAndQueue+0x60>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d005      	beq.n	800e7f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e7e8:	4b05      	ldr	r3, [pc, #20]	; (800e800 <prvCheckForValidListAndQueue+0x60>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	490b      	ldr	r1, [pc, #44]	; (800e81c <prvCheckForValidListAndQueue+0x7c>)
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7fe fb4a 	bl	800ce88 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e7f4:	f000 f96e 	bl	800ead4 <vPortExitCritical>
}
 800e7f8:	bf00      	nop
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	200022bc 	.word	0x200022bc
 800e804:	2000228c 	.word	0x2000228c
 800e808:	200022a0 	.word	0x200022a0
 800e80c:	200022b4 	.word	0x200022b4
 800e810:	200022b8 	.word	0x200022b8
 800e814:	20002368 	.word	0x20002368
 800e818:	200022c8 	.word	0x200022c8
 800e81c:	08011e88 	.word	0x08011e88

0800e820 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e820:	b480      	push	{r7}
 800e822:	b085      	sub	sp, #20
 800e824:	af00      	add	r7, sp, #0
 800e826:	60f8      	str	r0, [r7, #12]
 800e828:	60b9      	str	r1, [r7, #8]
 800e82a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	3b04      	subs	r3, #4
 800e830:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e838:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	3b04      	subs	r3, #4
 800e83e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e840:	68bb      	ldr	r3, [r7, #8]
 800e842:	f023 0201 	bic.w	r2, r3, #1
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	3b04      	subs	r3, #4
 800e84e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e850:	4a0c      	ldr	r2, [pc, #48]	; (800e884 <pxPortInitialiseStack+0x64>)
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	3b14      	subs	r3, #20
 800e85a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e85c:	687a      	ldr	r2, [r7, #4]
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	3b04      	subs	r3, #4
 800e866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	f06f 0202 	mvn.w	r2, #2
 800e86e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	3b20      	subs	r3, #32
 800e874:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e876:	68fb      	ldr	r3, [r7, #12]
}
 800e878:	4618      	mov	r0, r3
 800e87a:	3714      	adds	r7, #20
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr
 800e884:	0800e889 	.word	0x0800e889

0800e888 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e888:	b480      	push	{r7}
 800e88a:	b085      	sub	sp, #20
 800e88c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e88e:	2300      	movs	r3, #0
 800e890:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e892:	4b12      	ldr	r3, [pc, #72]	; (800e8dc <prvTaskExitError+0x54>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e89a:	d00a      	beq.n	800e8b2 <prvTaskExitError+0x2a>
	__asm volatile
 800e89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a0:	f383 8811 	msr	BASEPRI, r3
 800e8a4:	f3bf 8f6f 	isb	sy
 800e8a8:	f3bf 8f4f 	dsb	sy
 800e8ac:	60fb      	str	r3, [r7, #12]
}
 800e8ae:	bf00      	nop
 800e8b0:	e7fe      	b.n	800e8b0 <prvTaskExitError+0x28>
	__asm volatile
 800e8b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b6:	f383 8811 	msr	BASEPRI, r3
 800e8ba:	f3bf 8f6f 	isb	sy
 800e8be:	f3bf 8f4f 	dsb	sy
 800e8c2:	60bb      	str	r3, [r7, #8]
}
 800e8c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e8c6:	bf00      	nop
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d0fc      	beq.n	800e8c8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e8ce:	bf00      	nop
 800e8d0:	bf00      	nop
 800e8d2:	3714      	adds	r7, #20
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8da:	4770      	bx	lr
 800e8dc:	2000000c 	.word	0x2000000c

0800e8e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e8e0:	4b07      	ldr	r3, [pc, #28]	; (800e900 <pxCurrentTCBConst2>)
 800e8e2:	6819      	ldr	r1, [r3, #0]
 800e8e4:	6808      	ldr	r0, [r1, #0]
 800e8e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ea:	f380 8809 	msr	PSP, r0
 800e8ee:	f3bf 8f6f 	isb	sy
 800e8f2:	f04f 0000 	mov.w	r0, #0
 800e8f6:	f380 8811 	msr	BASEPRI, r0
 800e8fa:	4770      	bx	lr
 800e8fc:	f3af 8000 	nop.w

0800e900 <pxCurrentTCBConst2>:
 800e900:	20001d84 	.word	0x20001d84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e904:	bf00      	nop
 800e906:	bf00      	nop

0800e908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e908:	4808      	ldr	r0, [pc, #32]	; (800e92c <prvPortStartFirstTask+0x24>)
 800e90a:	6800      	ldr	r0, [r0, #0]
 800e90c:	6800      	ldr	r0, [r0, #0]
 800e90e:	f380 8808 	msr	MSP, r0
 800e912:	f04f 0000 	mov.w	r0, #0
 800e916:	f380 8814 	msr	CONTROL, r0
 800e91a:	b662      	cpsie	i
 800e91c:	b661      	cpsie	f
 800e91e:	f3bf 8f4f 	dsb	sy
 800e922:	f3bf 8f6f 	isb	sy
 800e926:	df00      	svc	0
 800e928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e92a:	bf00      	nop
 800e92c:	e000ed08 	.word	0xe000ed08

0800e930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b086      	sub	sp, #24
 800e934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e936:	4b46      	ldr	r3, [pc, #280]	; (800ea50 <xPortStartScheduler+0x120>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	4a46      	ldr	r2, [pc, #280]	; (800ea54 <xPortStartScheduler+0x124>)
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d10a      	bne.n	800e956 <xPortStartScheduler+0x26>
	__asm volatile
 800e940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e944:	f383 8811 	msr	BASEPRI, r3
 800e948:	f3bf 8f6f 	isb	sy
 800e94c:	f3bf 8f4f 	dsb	sy
 800e950:	613b      	str	r3, [r7, #16]
}
 800e952:	bf00      	nop
 800e954:	e7fe      	b.n	800e954 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e956:	4b3e      	ldr	r3, [pc, #248]	; (800ea50 <xPortStartScheduler+0x120>)
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	4a3f      	ldr	r2, [pc, #252]	; (800ea58 <xPortStartScheduler+0x128>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d10a      	bne.n	800e976 <xPortStartScheduler+0x46>
	__asm volatile
 800e960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e964:	f383 8811 	msr	BASEPRI, r3
 800e968:	f3bf 8f6f 	isb	sy
 800e96c:	f3bf 8f4f 	dsb	sy
 800e970:	60fb      	str	r3, [r7, #12]
}
 800e972:	bf00      	nop
 800e974:	e7fe      	b.n	800e974 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e976:	4b39      	ldr	r3, [pc, #228]	; (800ea5c <xPortStartScheduler+0x12c>)
 800e978:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e97a:	697b      	ldr	r3, [r7, #20]
 800e97c:	781b      	ldrb	r3, [r3, #0]
 800e97e:	b2db      	uxtb	r3, r3
 800e980:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e982:	697b      	ldr	r3, [r7, #20]
 800e984:	22ff      	movs	r2, #255	; 0xff
 800e986:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e988:	697b      	ldr	r3, [r7, #20]
 800e98a:	781b      	ldrb	r3, [r3, #0]
 800e98c:	b2db      	uxtb	r3, r3
 800e98e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e990:	78fb      	ldrb	r3, [r7, #3]
 800e992:	b2db      	uxtb	r3, r3
 800e994:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e998:	b2da      	uxtb	r2, r3
 800e99a:	4b31      	ldr	r3, [pc, #196]	; (800ea60 <xPortStartScheduler+0x130>)
 800e99c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e99e:	4b31      	ldr	r3, [pc, #196]	; (800ea64 <xPortStartScheduler+0x134>)
 800e9a0:	2207      	movs	r2, #7
 800e9a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e9a4:	e009      	b.n	800e9ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e9a6:	4b2f      	ldr	r3, [pc, #188]	; (800ea64 <xPortStartScheduler+0x134>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	3b01      	subs	r3, #1
 800e9ac:	4a2d      	ldr	r2, [pc, #180]	; (800ea64 <xPortStartScheduler+0x134>)
 800e9ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e9b0:	78fb      	ldrb	r3, [r7, #3]
 800e9b2:	b2db      	uxtb	r3, r3
 800e9b4:	005b      	lsls	r3, r3, #1
 800e9b6:	b2db      	uxtb	r3, r3
 800e9b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e9ba:	78fb      	ldrb	r3, [r7, #3]
 800e9bc:	b2db      	uxtb	r3, r3
 800e9be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9c2:	2b80      	cmp	r3, #128	; 0x80
 800e9c4:	d0ef      	beq.n	800e9a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e9c6:	4b27      	ldr	r3, [pc, #156]	; (800ea64 <xPortStartScheduler+0x134>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	f1c3 0307 	rsb	r3, r3, #7
 800e9ce:	2b04      	cmp	r3, #4
 800e9d0:	d00a      	beq.n	800e9e8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e9d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d6:	f383 8811 	msr	BASEPRI, r3
 800e9da:	f3bf 8f6f 	isb	sy
 800e9de:	f3bf 8f4f 	dsb	sy
 800e9e2:	60bb      	str	r3, [r7, #8]
}
 800e9e4:	bf00      	nop
 800e9e6:	e7fe      	b.n	800e9e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e9e8:	4b1e      	ldr	r3, [pc, #120]	; (800ea64 <xPortStartScheduler+0x134>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	021b      	lsls	r3, r3, #8
 800e9ee:	4a1d      	ldr	r2, [pc, #116]	; (800ea64 <xPortStartScheduler+0x134>)
 800e9f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e9f2:	4b1c      	ldr	r3, [pc, #112]	; (800ea64 <xPortStartScheduler+0x134>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e9fa:	4a1a      	ldr	r2, [pc, #104]	; (800ea64 <xPortStartScheduler+0x134>)
 800e9fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	b2da      	uxtb	r2, r3
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ea06:	4b18      	ldr	r3, [pc, #96]	; (800ea68 <xPortStartScheduler+0x138>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	4a17      	ldr	r2, [pc, #92]	; (800ea68 <xPortStartScheduler+0x138>)
 800ea0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ea10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ea12:	4b15      	ldr	r3, [pc, #84]	; (800ea68 <xPortStartScheduler+0x138>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	4a14      	ldr	r2, [pc, #80]	; (800ea68 <xPortStartScheduler+0x138>)
 800ea18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ea1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ea1e:	f000 f8dd 	bl	800ebdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ea22:	4b12      	ldr	r3, [pc, #72]	; (800ea6c <xPortStartScheduler+0x13c>)
 800ea24:	2200      	movs	r2, #0
 800ea26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ea28:	f000 f8fc 	bl	800ec24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ea2c:	4b10      	ldr	r3, [pc, #64]	; (800ea70 <xPortStartScheduler+0x140>)
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	4a0f      	ldr	r2, [pc, #60]	; (800ea70 <xPortStartScheduler+0x140>)
 800ea32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ea36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ea38:	f7ff ff66 	bl	800e908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ea3c:	f7fe ff12 	bl	800d864 <vTaskSwitchContext>
	prvTaskExitError();
 800ea40:	f7ff ff22 	bl	800e888 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ea44:	2300      	movs	r3, #0
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3718      	adds	r7, #24
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	e000ed00 	.word	0xe000ed00
 800ea54:	410fc271 	.word	0x410fc271
 800ea58:	410fc270 	.word	0x410fc270
 800ea5c:	e000e400 	.word	0xe000e400
 800ea60:	200023b8 	.word	0x200023b8
 800ea64:	200023bc 	.word	0x200023bc
 800ea68:	e000ed20 	.word	0xe000ed20
 800ea6c:	2000000c 	.word	0x2000000c
 800ea70:	e000ef34 	.word	0xe000ef34

0800ea74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ea74:	b480      	push	{r7}
 800ea76:	b083      	sub	sp, #12
 800ea78:	af00      	add	r7, sp, #0
	__asm volatile
 800ea7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea7e:	f383 8811 	msr	BASEPRI, r3
 800ea82:	f3bf 8f6f 	isb	sy
 800ea86:	f3bf 8f4f 	dsb	sy
 800ea8a:	607b      	str	r3, [r7, #4]
}
 800ea8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ea8e:	4b0f      	ldr	r3, [pc, #60]	; (800eacc <vPortEnterCritical+0x58>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	3301      	adds	r3, #1
 800ea94:	4a0d      	ldr	r2, [pc, #52]	; (800eacc <vPortEnterCritical+0x58>)
 800ea96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ea98:	4b0c      	ldr	r3, [pc, #48]	; (800eacc <vPortEnterCritical+0x58>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	2b01      	cmp	r3, #1
 800ea9e:	d10f      	bne.n	800eac0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800eaa0:	4b0b      	ldr	r3, [pc, #44]	; (800ead0 <vPortEnterCritical+0x5c>)
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	b2db      	uxtb	r3, r3
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d00a      	beq.n	800eac0 <vPortEnterCritical+0x4c>
	__asm volatile
 800eaaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaae:	f383 8811 	msr	BASEPRI, r3
 800eab2:	f3bf 8f6f 	isb	sy
 800eab6:	f3bf 8f4f 	dsb	sy
 800eaba:	603b      	str	r3, [r7, #0]
}
 800eabc:	bf00      	nop
 800eabe:	e7fe      	b.n	800eabe <vPortEnterCritical+0x4a>
	}
}
 800eac0:	bf00      	nop
 800eac2:	370c      	adds	r7, #12
 800eac4:	46bd      	mov	sp, r7
 800eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaca:	4770      	bx	lr
 800eacc:	2000000c 	.word	0x2000000c
 800ead0:	e000ed04 	.word	0xe000ed04

0800ead4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ead4:	b480      	push	{r7}
 800ead6:	b083      	sub	sp, #12
 800ead8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800eada:	4b12      	ldr	r3, [pc, #72]	; (800eb24 <vPortExitCritical+0x50>)
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d10a      	bne.n	800eaf8 <vPortExitCritical+0x24>
	__asm volatile
 800eae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae6:	f383 8811 	msr	BASEPRI, r3
 800eaea:	f3bf 8f6f 	isb	sy
 800eaee:	f3bf 8f4f 	dsb	sy
 800eaf2:	607b      	str	r3, [r7, #4]
}
 800eaf4:	bf00      	nop
 800eaf6:	e7fe      	b.n	800eaf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800eaf8:	4b0a      	ldr	r3, [pc, #40]	; (800eb24 <vPortExitCritical+0x50>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	3b01      	subs	r3, #1
 800eafe:	4a09      	ldr	r2, [pc, #36]	; (800eb24 <vPortExitCritical+0x50>)
 800eb00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eb02:	4b08      	ldr	r3, [pc, #32]	; (800eb24 <vPortExitCritical+0x50>)
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d105      	bne.n	800eb16 <vPortExitCritical+0x42>
 800eb0a:	2300      	movs	r3, #0
 800eb0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	f383 8811 	msr	BASEPRI, r3
}
 800eb14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800eb16:	bf00      	nop
 800eb18:	370c      	adds	r7, #12
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb20:	4770      	bx	lr
 800eb22:	bf00      	nop
 800eb24:	2000000c 	.word	0x2000000c
	...

0800eb30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800eb30:	f3ef 8009 	mrs	r0, PSP
 800eb34:	f3bf 8f6f 	isb	sy
 800eb38:	4b15      	ldr	r3, [pc, #84]	; (800eb90 <pxCurrentTCBConst>)
 800eb3a:	681a      	ldr	r2, [r3, #0]
 800eb3c:	f01e 0f10 	tst.w	lr, #16
 800eb40:	bf08      	it	eq
 800eb42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800eb46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb4a:	6010      	str	r0, [r2, #0]
 800eb4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800eb50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800eb54:	f380 8811 	msr	BASEPRI, r0
 800eb58:	f3bf 8f4f 	dsb	sy
 800eb5c:	f3bf 8f6f 	isb	sy
 800eb60:	f7fe fe80 	bl	800d864 <vTaskSwitchContext>
 800eb64:	f04f 0000 	mov.w	r0, #0
 800eb68:	f380 8811 	msr	BASEPRI, r0
 800eb6c:	bc09      	pop	{r0, r3}
 800eb6e:	6819      	ldr	r1, [r3, #0]
 800eb70:	6808      	ldr	r0, [r1, #0]
 800eb72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb76:	f01e 0f10 	tst.w	lr, #16
 800eb7a:	bf08      	it	eq
 800eb7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800eb80:	f380 8809 	msr	PSP, r0
 800eb84:	f3bf 8f6f 	isb	sy
 800eb88:	4770      	bx	lr
 800eb8a:	bf00      	nop
 800eb8c:	f3af 8000 	nop.w

0800eb90 <pxCurrentTCBConst>:
 800eb90:	20001d84 	.word	0x20001d84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800eb94:	bf00      	nop
 800eb96:	bf00      	nop

0800eb98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
	__asm volatile
 800eb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba2:	f383 8811 	msr	BASEPRI, r3
 800eba6:	f3bf 8f6f 	isb	sy
 800ebaa:	f3bf 8f4f 	dsb	sy
 800ebae:	607b      	str	r3, [r7, #4]
}
 800ebb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ebb2:	f7fe fd9d 	bl	800d6f0 <xTaskIncrementTick>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d003      	beq.n	800ebc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ebbc:	4b06      	ldr	r3, [pc, #24]	; (800ebd8 <xPortSysTickHandler+0x40>)
 800ebbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebc2:	601a      	str	r2, [r3, #0]
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	f383 8811 	msr	BASEPRI, r3
}
 800ebce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ebd0:	bf00      	nop
 800ebd2:	3708      	adds	r7, #8
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}
 800ebd8:	e000ed04 	.word	0xe000ed04

0800ebdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ebdc:	b480      	push	{r7}
 800ebde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ebe0:	4b0b      	ldr	r3, [pc, #44]	; (800ec10 <vPortSetupTimerInterrupt+0x34>)
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ebe6:	4b0b      	ldr	r3, [pc, #44]	; (800ec14 <vPortSetupTimerInterrupt+0x38>)
 800ebe8:	2200      	movs	r2, #0
 800ebea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ebec:	4b0a      	ldr	r3, [pc, #40]	; (800ec18 <vPortSetupTimerInterrupt+0x3c>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	4a0a      	ldr	r2, [pc, #40]	; (800ec1c <vPortSetupTimerInterrupt+0x40>)
 800ebf2:	fba2 2303 	umull	r2, r3, r2, r3
 800ebf6:	099b      	lsrs	r3, r3, #6
 800ebf8:	4a09      	ldr	r2, [pc, #36]	; (800ec20 <vPortSetupTimerInterrupt+0x44>)
 800ebfa:	3b01      	subs	r3, #1
 800ebfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ebfe:	4b04      	ldr	r3, [pc, #16]	; (800ec10 <vPortSetupTimerInterrupt+0x34>)
 800ec00:	2207      	movs	r2, #7
 800ec02:	601a      	str	r2, [r3, #0]
}
 800ec04:	bf00      	nop
 800ec06:	46bd      	mov	sp, r7
 800ec08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0c:	4770      	bx	lr
 800ec0e:	bf00      	nop
 800ec10:	e000e010 	.word	0xe000e010
 800ec14:	e000e018 	.word	0xe000e018
 800ec18:	20000000 	.word	0x20000000
 800ec1c:	10624dd3 	.word	0x10624dd3
 800ec20:	e000e014 	.word	0xe000e014

0800ec24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ec24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ec34 <vPortEnableVFP+0x10>
 800ec28:	6801      	ldr	r1, [r0, #0]
 800ec2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ec2e:	6001      	str	r1, [r0, #0]
 800ec30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ec32:	bf00      	nop
 800ec34:	e000ed88 	.word	0xe000ed88

0800ec38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ec38:	b480      	push	{r7}
 800ec3a:	b085      	sub	sp, #20
 800ec3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ec3e:	f3ef 8305 	mrs	r3, IPSR
 800ec42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	2b0f      	cmp	r3, #15
 800ec48:	d914      	bls.n	800ec74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ec4a:	4a17      	ldr	r2, [pc, #92]	; (800eca8 <vPortValidateInterruptPriority+0x70>)
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	4413      	add	r3, r2
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ec54:	4b15      	ldr	r3, [pc, #84]	; (800ecac <vPortValidateInterruptPriority+0x74>)
 800ec56:	781b      	ldrb	r3, [r3, #0]
 800ec58:	7afa      	ldrb	r2, [r7, #11]
 800ec5a:	429a      	cmp	r2, r3
 800ec5c:	d20a      	bcs.n	800ec74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ec5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec62:	f383 8811 	msr	BASEPRI, r3
 800ec66:	f3bf 8f6f 	isb	sy
 800ec6a:	f3bf 8f4f 	dsb	sy
 800ec6e:	607b      	str	r3, [r7, #4]
}
 800ec70:	bf00      	nop
 800ec72:	e7fe      	b.n	800ec72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ec74:	4b0e      	ldr	r3, [pc, #56]	; (800ecb0 <vPortValidateInterruptPriority+0x78>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ec7c:	4b0d      	ldr	r3, [pc, #52]	; (800ecb4 <vPortValidateInterruptPriority+0x7c>)
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	429a      	cmp	r2, r3
 800ec82:	d90a      	bls.n	800ec9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ec84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec88:	f383 8811 	msr	BASEPRI, r3
 800ec8c:	f3bf 8f6f 	isb	sy
 800ec90:	f3bf 8f4f 	dsb	sy
 800ec94:	603b      	str	r3, [r7, #0]
}
 800ec96:	bf00      	nop
 800ec98:	e7fe      	b.n	800ec98 <vPortValidateInterruptPriority+0x60>
	}
 800ec9a:	bf00      	nop
 800ec9c:	3714      	adds	r7, #20
 800ec9e:	46bd      	mov	sp, r7
 800eca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca4:	4770      	bx	lr
 800eca6:	bf00      	nop
 800eca8:	e000e3f0 	.word	0xe000e3f0
 800ecac:	200023b8 	.word	0x200023b8
 800ecb0:	e000ed0c 	.word	0xe000ed0c
 800ecb4:	200023bc 	.word	0x200023bc

0800ecb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b08a      	sub	sp, #40	; 0x28
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ecc0:	2300      	movs	r3, #0
 800ecc2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ecc4:	f7fe fc58 	bl	800d578 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ecc8:	4b5d      	ldr	r3, [pc, #372]	; (800ee40 <pvPortMalloc+0x188>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d101      	bne.n	800ecd4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ecd0:	f000 f924 	bl	800ef1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ecd4:	4b5b      	ldr	r3, [pc, #364]	; (800ee44 <pvPortMalloc+0x18c>)
 800ecd6:	681a      	ldr	r2, [r3, #0]
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	4013      	ands	r3, r2
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	f040 8093 	bne.w	800ee08 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d01d      	beq.n	800ed24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ece8:	2208      	movs	r2, #8
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	4413      	add	r3, r2
 800ecee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	f003 0307 	and.w	r3, r3, #7
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d014      	beq.n	800ed24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	f023 0307 	bic.w	r3, r3, #7
 800ed00:	3308      	adds	r3, #8
 800ed02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f003 0307 	and.w	r3, r3, #7
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d00a      	beq.n	800ed24 <pvPortMalloc+0x6c>
	__asm volatile
 800ed0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed12:	f383 8811 	msr	BASEPRI, r3
 800ed16:	f3bf 8f6f 	isb	sy
 800ed1a:	f3bf 8f4f 	dsb	sy
 800ed1e:	617b      	str	r3, [r7, #20]
}
 800ed20:	bf00      	nop
 800ed22:	e7fe      	b.n	800ed22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d06e      	beq.n	800ee08 <pvPortMalloc+0x150>
 800ed2a:	4b47      	ldr	r3, [pc, #284]	; (800ee48 <pvPortMalloc+0x190>)
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	687a      	ldr	r2, [r7, #4]
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d869      	bhi.n	800ee08 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ed34:	4b45      	ldr	r3, [pc, #276]	; (800ee4c <pvPortMalloc+0x194>)
 800ed36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ed38:	4b44      	ldr	r3, [pc, #272]	; (800ee4c <pvPortMalloc+0x194>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed3e:	e004      	b.n	800ed4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ed40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ed44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed4c:	685b      	ldr	r3, [r3, #4]
 800ed4e:	687a      	ldr	r2, [r7, #4]
 800ed50:	429a      	cmp	r2, r3
 800ed52:	d903      	bls.n	800ed5c <pvPortMalloc+0xa4>
 800ed54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d1f1      	bne.n	800ed40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ed5c:	4b38      	ldr	r3, [pc, #224]	; (800ee40 <pvPortMalloc+0x188>)
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed62:	429a      	cmp	r2, r3
 800ed64:	d050      	beq.n	800ee08 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ed66:	6a3b      	ldr	r3, [r7, #32]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	2208      	movs	r2, #8
 800ed6c:	4413      	add	r3, r2
 800ed6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ed70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed72:	681a      	ldr	r2, [r3, #0]
 800ed74:	6a3b      	ldr	r3, [r7, #32]
 800ed76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ed78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed7a:	685a      	ldr	r2, [r3, #4]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	1ad2      	subs	r2, r2, r3
 800ed80:	2308      	movs	r3, #8
 800ed82:	005b      	lsls	r3, r3, #1
 800ed84:	429a      	cmp	r2, r3
 800ed86:	d91f      	bls.n	800edc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ed88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	4413      	add	r3, r2
 800ed8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed90:	69bb      	ldr	r3, [r7, #24]
 800ed92:	f003 0307 	and.w	r3, r3, #7
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d00a      	beq.n	800edb0 <pvPortMalloc+0xf8>
	__asm volatile
 800ed9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed9e:	f383 8811 	msr	BASEPRI, r3
 800eda2:	f3bf 8f6f 	isb	sy
 800eda6:	f3bf 8f4f 	dsb	sy
 800edaa:	613b      	str	r3, [r7, #16]
}
 800edac:	bf00      	nop
 800edae:	e7fe      	b.n	800edae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800edb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edb2:	685a      	ldr	r2, [r3, #4]
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	1ad2      	subs	r2, r2, r3
 800edb8:	69bb      	ldr	r3, [r7, #24]
 800edba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800edbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edbe:	687a      	ldr	r2, [r7, #4]
 800edc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800edc2:	69b8      	ldr	r0, [r7, #24]
 800edc4:	f000 f90c 	bl	800efe0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800edc8:	4b1f      	ldr	r3, [pc, #124]	; (800ee48 <pvPortMalloc+0x190>)
 800edca:	681a      	ldr	r2, [r3, #0]
 800edcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edce:	685b      	ldr	r3, [r3, #4]
 800edd0:	1ad3      	subs	r3, r2, r3
 800edd2:	4a1d      	ldr	r2, [pc, #116]	; (800ee48 <pvPortMalloc+0x190>)
 800edd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800edd6:	4b1c      	ldr	r3, [pc, #112]	; (800ee48 <pvPortMalloc+0x190>)
 800edd8:	681a      	ldr	r2, [r3, #0]
 800edda:	4b1d      	ldr	r3, [pc, #116]	; (800ee50 <pvPortMalloc+0x198>)
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	429a      	cmp	r2, r3
 800ede0:	d203      	bcs.n	800edea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ede2:	4b19      	ldr	r3, [pc, #100]	; (800ee48 <pvPortMalloc+0x190>)
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	4a1a      	ldr	r2, [pc, #104]	; (800ee50 <pvPortMalloc+0x198>)
 800ede8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800edea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edec:	685a      	ldr	r2, [r3, #4]
 800edee:	4b15      	ldr	r3, [pc, #84]	; (800ee44 <pvPortMalloc+0x18c>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	431a      	orrs	r2, r3
 800edf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800edf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfa:	2200      	movs	r2, #0
 800edfc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800edfe:	4b15      	ldr	r3, [pc, #84]	; (800ee54 <pvPortMalloc+0x19c>)
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	3301      	adds	r3, #1
 800ee04:	4a13      	ldr	r2, [pc, #76]	; (800ee54 <pvPortMalloc+0x19c>)
 800ee06:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ee08:	f7fe fbc4 	bl	800d594 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800ee0c:	69fb      	ldr	r3, [r7, #28]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d101      	bne.n	800ee16 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800ee12:	f7f5 fad1 	bl	80043b8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee16:	69fb      	ldr	r3, [r7, #28]
 800ee18:	f003 0307 	and.w	r3, r3, #7
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d00a      	beq.n	800ee36 <pvPortMalloc+0x17e>
	__asm volatile
 800ee20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee24:	f383 8811 	msr	BASEPRI, r3
 800ee28:	f3bf 8f6f 	isb	sy
 800ee2c:	f3bf 8f4f 	dsb	sy
 800ee30:	60fb      	str	r3, [r7, #12]
}
 800ee32:	bf00      	nop
 800ee34:	e7fe      	b.n	800ee34 <pvPortMalloc+0x17c>
	return pvReturn;
 800ee36:	69fb      	ldr	r3, [r7, #28]
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3728      	adds	r7, #40	; 0x28
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}
 800ee40:	2000a3c8 	.word	0x2000a3c8
 800ee44:	2000a3dc 	.word	0x2000a3dc
 800ee48:	2000a3cc 	.word	0x2000a3cc
 800ee4c:	2000a3c0 	.word	0x2000a3c0
 800ee50:	2000a3d0 	.word	0x2000a3d0
 800ee54:	2000a3d4 	.word	0x2000a3d4

0800ee58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b086      	sub	sp, #24
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d04d      	beq.n	800ef06 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ee6a:	2308      	movs	r3, #8
 800ee6c:	425b      	negs	r3, r3
 800ee6e:	697a      	ldr	r2, [r7, #20]
 800ee70:	4413      	add	r3, r2
 800ee72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ee78:	693b      	ldr	r3, [r7, #16]
 800ee7a:	685a      	ldr	r2, [r3, #4]
 800ee7c:	4b24      	ldr	r3, [pc, #144]	; (800ef10 <vPortFree+0xb8>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	4013      	ands	r3, r2
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	d10a      	bne.n	800ee9c <vPortFree+0x44>
	__asm volatile
 800ee86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee8a:	f383 8811 	msr	BASEPRI, r3
 800ee8e:	f3bf 8f6f 	isb	sy
 800ee92:	f3bf 8f4f 	dsb	sy
 800ee96:	60fb      	str	r3, [r7, #12]
}
 800ee98:	bf00      	nop
 800ee9a:	e7fe      	b.n	800ee9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ee9c:	693b      	ldr	r3, [r7, #16]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d00a      	beq.n	800eeba <vPortFree+0x62>
	__asm volatile
 800eea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eea8:	f383 8811 	msr	BASEPRI, r3
 800eeac:	f3bf 8f6f 	isb	sy
 800eeb0:	f3bf 8f4f 	dsb	sy
 800eeb4:	60bb      	str	r3, [r7, #8]
}
 800eeb6:	bf00      	nop
 800eeb8:	e7fe      	b.n	800eeb8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	685a      	ldr	r2, [r3, #4]
 800eebe:	4b14      	ldr	r3, [pc, #80]	; (800ef10 <vPortFree+0xb8>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	4013      	ands	r3, r2
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d01e      	beq.n	800ef06 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eec8:	693b      	ldr	r3, [r7, #16]
 800eeca:	681b      	ldr	r3, [r3, #0]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d11a      	bne.n	800ef06 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	685a      	ldr	r2, [r3, #4]
 800eed4:	4b0e      	ldr	r3, [pc, #56]	; (800ef10 <vPortFree+0xb8>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	43db      	mvns	r3, r3
 800eeda:	401a      	ands	r2, r3
 800eedc:	693b      	ldr	r3, [r7, #16]
 800eede:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800eee0:	f7fe fb4a 	bl	800d578 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800eee4:	693b      	ldr	r3, [r7, #16]
 800eee6:	685a      	ldr	r2, [r3, #4]
 800eee8:	4b0a      	ldr	r3, [pc, #40]	; (800ef14 <vPortFree+0xbc>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4413      	add	r3, r2
 800eeee:	4a09      	ldr	r2, [pc, #36]	; (800ef14 <vPortFree+0xbc>)
 800eef0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800eef2:	6938      	ldr	r0, [r7, #16]
 800eef4:	f000 f874 	bl	800efe0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800eef8:	4b07      	ldr	r3, [pc, #28]	; (800ef18 <vPortFree+0xc0>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	3301      	adds	r3, #1
 800eefe:	4a06      	ldr	r2, [pc, #24]	; (800ef18 <vPortFree+0xc0>)
 800ef00:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ef02:	f7fe fb47 	bl	800d594 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ef06:	bf00      	nop
 800ef08:	3718      	adds	r7, #24
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}
 800ef0e:	bf00      	nop
 800ef10:	2000a3dc 	.word	0x2000a3dc
 800ef14:	2000a3cc 	.word	0x2000a3cc
 800ef18:	2000a3d8 	.word	0x2000a3d8

0800ef1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ef1c:	b480      	push	{r7}
 800ef1e:	b085      	sub	sp, #20
 800ef20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ef22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ef28:	4b27      	ldr	r3, [pc, #156]	; (800efc8 <prvHeapInit+0xac>)
 800ef2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ef2c:	68fb      	ldr	r3, [r7, #12]
 800ef2e:	f003 0307 	and.w	r3, r3, #7
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d00c      	beq.n	800ef50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	3307      	adds	r3, #7
 800ef3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f023 0307 	bic.w	r3, r3, #7
 800ef42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ef44:	68ba      	ldr	r2, [r7, #8]
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	1ad3      	subs	r3, r2, r3
 800ef4a:	4a1f      	ldr	r2, [pc, #124]	; (800efc8 <prvHeapInit+0xac>)
 800ef4c:	4413      	add	r3, r2
 800ef4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ef54:	4a1d      	ldr	r2, [pc, #116]	; (800efcc <prvHeapInit+0xb0>)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ef5a:	4b1c      	ldr	r3, [pc, #112]	; (800efcc <prvHeapInit+0xb0>)
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	68ba      	ldr	r2, [r7, #8]
 800ef64:	4413      	add	r3, r2
 800ef66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ef68:	2208      	movs	r2, #8
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	1a9b      	subs	r3, r3, r2
 800ef6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	f023 0307 	bic.w	r3, r3, #7
 800ef76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	4a15      	ldr	r2, [pc, #84]	; (800efd0 <prvHeapInit+0xb4>)
 800ef7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ef7e:	4b14      	ldr	r3, [pc, #80]	; (800efd0 <prvHeapInit+0xb4>)
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	2200      	movs	r2, #0
 800ef84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ef86:	4b12      	ldr	r3, [pc, #72]	; (800efd0 <prvHeapInit+0xb4>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	68fa      	ldr	r2, [r7, #12]
 800ef96:	1ad2      	subs	r2, r2, r3
 800ef98:	683b      	ldr	r3, [r7, #0]
 800ef9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ef9c:	4b0c      	ldr	r3, [pc, #48]	; (800efd0 <prvHeapInit+0xb4>)
 800ef9e:	681a      	ldr	r2, [r3, #0]
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800efa4:	683b      	ldr	r3, [r7, #0]
 800efa6:	685b      	ldr	r3, [r3, #4]
 800efa8:	4a0a      	ldr	r2, [pc, #40]	; (800efd4 <prvHeapInit+0xb8>)
 800efaa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	685b      	ldr	r3, [r3, #4]
 800efb0:	4a09      	ldr	r2, [pc, #36]	; (800efd8 <prvHeapInit+0xbc>)
 800efb2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800efb4:	4b09      	ldr	r3, [pc, #36]	; (800efdc <prvHeapInit+0xc0>)
 800efb6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800efba:	601a      	str	r2, [r3, #0]
}
 800efbc:	bf00      	nop
 800efbe:	3714      	adds	r7, #20
 800efc0:	46bd      	mov	sp, r7
 800efc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc6:	4770      	bx	lr
 800efc8:	200023c0 	.word	0x200023c0
 800efcc:	2000a3c0 	.word	0x2000a3c0
 800efd0:	2000a3c8 	.word	0x2000a3c8
 800efd4:	2000a3d0 	.word	0x2000a3d0
 800efd8:	2000a3cc 	.word	0x2000a3cc
 800efdc:	2000a3dc 	.word	0x2000a3dc

0800efe0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800efe0:	b480      	push	{r7}
 800efe2:	b085      	sub	sp, #20
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800efe8:	4b28      	ldr	r3, [pc, #160]	; (800f08c <prvInsertBlockIntoFreeList+0xac>)
 800efea:	60fb      	str	r3, [r7, #12]
 800efec:	e002      	b.n	800eff4 <prvInsertBlockIntoFreeList+0x14>
 800efee:	68fb      	ldr	r3, [r7, #12]
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	60fb      	str	r3, [r7, #12]
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	687a      	ldr	r2, [r7, #4]
 800effa:	429a      	cmp	r2, r3
 800effc:	d8f7      	bhi.n	800efee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	685b      	ldr	r3, [r3, #4]
 800f006:	68ba      	ldr	r2, [r7, #8]
 800f008:	4413      	add	r3, r2
 800f00a:	687a      	ldr	r2, [r7, #4]
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d108      	bne.n	800f022 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	685a      	ldr	r2, [r3, #4]
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	685b      	ldr	r3, [r3, #4]
 800f018:	441a      	add	r2, r3
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	685b      	ldr	r3, [r3, #4]
 800f02a:	68ba      	ldr	r2, [r7, #8]
 800f02c:	441a      	add	r2, r3
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	429a      	cmp	r2, r3
 800f034:	d118      	bne.n	800f068 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	4b15      	ldr	r3, [pc, #84]	; (800f090 <prvInsertBlockIntoFreeList+0xb0>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	429a      	cmp	r2, r3
 800f040:	d00d      	beq.n	800f05e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	685a      	ldr	r2, [r3, #4]
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	685b      	ldr	r3, [r3, #4]
 800f04c:	441a      	add	r2, r3
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	681a      	ldr	r2, [r3, #0]
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	601a      	str	r2, [r3, #0]
 800f05c:	e008      	b.n	800f070 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f05e:	4b0c      	ldr	r3, [pc, #48]	; (800f090 <prvInsertBlockIntoFreeList+0xb0>)
 800f060:	681a      	ldr	r2, [r3, #0]
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	601a      	str	r2, [r3, #0]
 800f066:	e003      	b.n	800f070 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	681a      	ldr	r2, [r3, #0]
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f070:	68fa      	ldr	r2, [r7, #12]
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	429a      	cmp	r2, r3
 800f076:	d002      	beq.n	800f07e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f07e:	bf00      	nop
 800f080:	3714      	adds	r7, #20
 800f082:	46bd      	mov	sp, r7
 800f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f088:	4770      	bx	lr
 800f08a:	bf00      	nop
 800f08c:	2000a3c0 	.word	0x2000a3c0
 800f090:	2000a3c8 	.word	0x2000a3c8

0800f094 <_ZdaPv>:
 800f094:	f000 b814 	b.w	800f0c0 <_ZdlPv>

0800f098 <__cxa_guard_acquire>:
 800f098:	6803      	ldr	r3, [r0, #0]
 800f09a:	07db      	lsls	r3, r3, #31
 800f09c:	d406      	bmi.n	800f0ac <__cxa_guard_acquire+0x14>
 800f09e:	7843      	ldrb	r3, [r0, #1]
 800f0a0:	b103      	cbz	r3, 800f0a4 <__cxa_guard_acquire+0xc>
 800f0a2:	deff      	udf	#255	; 0xff
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	7043      	strb	r3, [r0, #1]
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	4770      	bx	lr
 800f0ac:	2000      	movs	r0, #0
 800f0ae:	4770      	bx	lr

0800f0b0 <__cxa_guard_release>:
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	6003      	str	r3, [r0, #0]
 800f0b4:	4770      	bx	lr

0800f0b6 <_Znaj>:
 800f0b6:	f000 b805 	b.w	800f0c4 <_Znwj>

0800f0ba <_ZSt25__throw_bad_function_callv>:
 800f0ba:	b508      	push	{r3, lr}
 800f0bc:	f000 f81c 	bl	800f0f8 <abort>

0800f0c0 <_ZdlPv>:
 800f0c0:	f000 b954 	b.w	800f36c <free>

0800f0c4 <_Znwj>:
 800f0c4:	2801      	cmp	r0, #1
 800f0c6:	bf38      	it	cc
 800f0c8:	2001      	movcc	r0, #1
 800f0ca:	b510      	push	{r4, lr}
 800f0cc:	4604      	mov	r4, r0
 800f0ce:	4620      	mov	r0, r4
 800f0d0:	f000 f944 	bl	800f35c <malloc>
 800f0d4:	b930      	cbnz	r0, 800f0e4 <_Znwj+0x20>
 800f0d6:	f000 f807 	bl	800f0e8 <_ZSt15get_new_handlerv>
 800f0da:	b908      	cbnz	r0, 800f0e0 <_Znwj+0x1c>
 800f0dc:	f000 f80c 	bl	800f0f8 <abort>
 800f0e0:	4780      	blx	r0
 800f0e2:	e7f4      	b.n	800f0ce <_Znwj+0xa>
 800f0e4:	bd10      	pop	{r4, pc}
	...

0800f0e8 <_ZSt15get_new_handlerv>:
 800f0e8:	4b02      	ldr	r3, [pc, #8]	; (800f0f4 <_ZSt15get_new_handlerv+0xc>)
 800f0ea:	6818      	ldr	r0, [r3, #0]
 800f0ec:	f3bf 8f5b 	dmb	ish
 800f0f0:	4770      	bx	lr
 800f0f2:	bf00      	nop
 800f0f4:	2000a3e0 	.word	0x2000a3e0

0800f0f8 <abort>:
 800f0f8:	b508      	push	{r3, lr}
 800f0fa:	2006      	movs	r0, #6
 800f0fc:	f000 ff40 	bl	800ff80 <raise>
 800f100:	2001      	movs	r0, #1
 800f102:	f7f5 fdc3 	bl	8004c8c <_exit>

0800f106 <atexit>:
 800f106:	2300      	movs	r3, #0
 800f108:	4601      	mov	r1, r0
 800f10a:	461a      	mov	r2, r3
 800f10c:	4618      	mov	r0, r3
 800f10e:	f000 bfa9 	b.w	8010064 <__register_exitproc>
	...

0800f114 <__errno>:
 800f114:	4b01      	ldr	r3, [pc, #4]	; (800f11c <__errno+0x8>)
 800f116:	6818      	ldr	r0, [r3, #0]
 800f118:	4770      	bx	lr
 800f11a:	bf00      	nop
 800f11c:	20000010 	.word	0x20000010

0800f120 <std>:
 800f120:	2300      	movs	r3, #0
 800f122:	b510      	push	{r4, lr}
 800f124:	4604      	mov	r4, r0
 800f126:	e9c0 3300 	strd	r3, r3, [r0]
 800f12a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f12e:	6083      	str	r3, [r0, #8]
 800f130:	8181      	strh	r1, [r0, #12]
 800f132:	6643      	str	r3, [r0, #100]	; 0x64
 800f134:	81c2      	strh	r2, [r0, #14]
 800f136:	6183      	str	r3, [r0, #24]
 800f138:	4619      	mov	r1, r3
 800f13a:	2208      	movs	r2, #8
 800f13c:	305c      	adds	r0, #92	; 0x5c
 800f13e:	f000 f92b 	bl	800f398 <memset>
 800f142:	4b05      	ldr	r3, [pc, #20]	; (800f158 <std+0x38>)
 800f144:	6263      	str	r3, [r4, #36]	; 0x24
 800f146:	4b05      	ldr	r3, [pc, #20]	; (800f15c <std+0x3c>)
 800f148:	62a3      	str	r3, [r4, #40]	; 0x28
 800f14a:	4b05      	ldr	r3, [pc, #20]	; (800f160 <std+0x40>)
 800f14c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f14e:	4b05      	ldr	r3, [pc, #20]	; (800f164 <std+0x44>)
 800f150:	6224      	str	r4, [r4, #32]
 800f152:	6323      	str	r3, [r4, #48]	; 0x30
 800f154:	bd10      	pop	{r4, pc}
 800f156:	bf00      	nop
 800f158:	0800ffb9 	.word	0x0800ffb9
 800f15c:	0800ffdb 	.word	0x0800ffdb
 800f160:	08010013 	.word	0x08010013
 800f164:	08010037 	.word	0x08010037

0800f168 <_cleanup_r>:
 800f168:	4901      	ldr	r1, [pc, #4]	; (800f170 <_cleanup_r+0x8>)
 800f16a:	f000 b8af 	b.w	800f2cc <_fwalk_reent>
 800f16e:	bf00      	nop
 800f170:	08010f49 	.word	0x08010f49

0800f174 <__sfmoreglue>:
 800f174:	b570      	push	{r4, r5, r6, lr}
 800f176:	2268      	movs	r2, #104	; 0x68
 800f178:	1e4d      	subs	r5, r1, #1
 800f17a:	4355      	muls	r5, r2
 800f17c:	460e      	mov	r6, r1
 800f17e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f182:	f000 f97d 	bl	800f480 <_malloc_r>
 800f186:	4604      	mov	r4, r0
 800f188:	b140      	cbz	r0, 800f19c <__sfmoreglue+0x28>
 800f18a:	2100      	movs	r1, #0
 800f18c:	e9c0 1600 	strd	r1, r6, [r0]
 800f190:	300c      	adds	r0, #12
 800f192:	60a0      	str	r0, [r4, #8]
 800f194:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f198:	f000 f8fe 	bl	800f398 <memset>
 800f19c:	4620      	mov	r0, r4
 800f19e:	bd70      	pop	{r4, r5, r6, pc}

0800f1a0 <__sfp_lock_acquire>:
 800f1a0:	4801      	ldr	r0, [pc, #4]	; (800f1a8 <__sfp_lock_acquire+0x8>)
 800f1a2:	f000 b8d8 	b.w	800f356 <__retarget_lock_acquire_recursive>
 800f1a6:	bf00      	nop
 800f1a8:	2000a3e6 	.word	0x2000a3e6

0800f1ac <__sfp_lock_release>:
 800f1ac:	4801      	ldr	r0, [pc, #4]	; (800f1b4 <__sfp_lock_release+0x8>)
 800f1ae:	f000 b8d4 	b.w	800f35a <__retarget_lock_release_recursive>
 800f1b2:	bf00      	nop
 800f1b4:	2000a3e6 	.word	0x2000a3e6

0800f1b8 <__sinit_lock_acquire>:
 800f1b8:	4801      	ldr	r0, [pc, #4]	; (800f1c0 <__sinit_lock_acquire+0x8>)
 800f1ba:	f000 b8cc 	b.w	800f356 <__retarget_lock_acquire_recursive>
 800f1be:	bf00      	nop
 800f1c0:	2000a3e7 	.word	0x2000a3e7

0800f1c4 <__sinit_lock_release>:
 800f1c4:	4801      	ldr	r0, [pc, #4]	; (800f1cc <__sinit_lock_release+0x8>)
 800f1c6:	f000 b8c8 	b.w	800f35a <__retarget_lock_release_recursive>
 800f1ca:	bf00      	nop
 800f1cc:	2000a3e7 	.word	0x2000a3e7

0800f1d0 <__sinit>:
 800f1d0:	b510      	push	{r4, lr}
 800f1d2:	4604      	mov	r4, r0
 800f1d4:	f7ff fff0 	bl	800f1b8 <__sinit_lock_acquire>
 800f1d8:	69a3      	ldr	r3, [r4, #24]
 800f1da:	b11b      	cbz	r3, 800f1e4 <__sinit+0x14>
 800f1dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1e0:	f7ff bff0 	b.w	800f1c4 <__sinit_lock_release>
 800f1e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f1e8:	6523      	str	r3, [r4, #80]	; 0x50
 800f1ea:	4b13      	ldr	r3, [pc, #76]	; (800f238 <__sinit+0x68>)
 800f1ec:	4a13      	ldr	r2, [pc, #76]	; (800f23c <__sinit+0x6c>)
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	62a2      	str	r2, [r4, #40]	; 0x28
 800f1f2:	42a3      	cmp	r3, r4
 800f1f4:	bf04      	itt	eq
 800f1f6:	2301      	moveq	r3, #1
 800f1f8:	61a3      	streq	r3, [r4, #24]
 800f1fa:	4620      	mov	r0, r4
 800f1fc:	f000 f820 	bl	800f240 <__sfp>
 800f200:	6060      	str	r0, [r4, #4]
 800f202:	4620      	mov	r0, r4
 800f204:	f000 f81c 	bl	800f240 <__sfp>
 800f208:	60a0      	str	r0, [r4, #8]
 800f20a:	4620      	mov	r0, r4
 800f20c:	f000 f818 	bl	800f240 <__sfp>
 800f210:	2200      	movs	r2, #0
 800f212:	60e0      	str	r0, [r4, #12]
 800f214:	2104      	movs	r1, #4
 800f216:	6860      	ldr	r0, [r4, #4]
 800f218:	f7ff ff82 	bl	800f120 <std>
 800f21c:	68a0      	ldr	r0, [r4, #8]
 800f21e:	2201      	movs	r2, #1
 800f220:	2109      	movs	r1, #9
 800f222:	f7ff ff7d 	bl	800f120 <std>
 800f226:	68e0      	ldr	r0, [r4, #12]
 800f228:	2202      	movs	r2, #2
 800f22a:	2112      	movs	r1, #18
 800f22c:	f7ff ff78 	bl	800f120 <std>
 800f230:	2301      	movs	r3, #1
 800f232:	61a3      	str	r3, [r4, #24]
 800f234:	e7d2      	b.n	800f1dc <__sinit+0xc>
 800f236:	bf00      	nop
 800f238:	08012070 	.word	0x08012070
 800f23c:	0800f169 	.word	0x0800f169

0800f240 <__sfp>:
 800f240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f242:	4607      	mov	r7, r0
 800f244:	f7ff ffac 	bl	800f1a0 <__sfp_lock_acquire>
 800f248:	4b1e      	ldr	r3, [pc, #120]	; (800f2c4 <__sfp+0x84>)
 800f24a:	681e      	ldr	r6, [r3, #0]
 800f24c:	69b3      	ldr	r3, [r6, #24]
 800f24e:	b913      	cbnz	r3, 800f256 <__sfp+0x16>
 800f250:	4630      	mov	r0, r6
 800f252:	f7ff ffbd 	bl	800f1d0 <__sinit>
 800f256:	3648      	adds	r6, #72	; 0x48
 800f258:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f25c:	3b01      	subs	r3, #1
 800f25e:	d503      	bpl.n	800f268 <__sfp+0x28>
 800f260:	6833      	ldr	r3, [r6, #0]
 800f262:	b30b      	cbz	r3, 800f2a8 <__sfp+0x68>
 800f264:	6836      	ldr	r6, [r6, #0]
 800f266:	e7f7      	b.n	800f258 <__sfp+0x18>
 800f268:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f26c:	b9d5      	cbnz	r5, 800f2a4 <__sfp+0x64>
 800f26e:	4b16      	ldr	r3, [pc, #88]	; (800f2c8 <__sfp+0x88>)
 800f270:	60e3      	str	r3, [r4, #12]
 800f272:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f276:	6665      	str	r5, [r4, #100]	; 0x64
 800f278:	f000 f86c 	bl	800f354 <__retarget_lock_init_recursive>
 800f27c:	f7ff ff96 	bl	800f1ac <__sfp_lock_release>
 800f280:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f284:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f288:	6025      	str	r5, [r4, #0]
 800f28a:	61a5      	str	r5, [r4, #24]
 800f28c:	2208      	movs	r2, #8
 800f28e:	4629      	mov	r1, r5
 800f290:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f294:	f000 f880 	bl	800f398 <memset>
 800f298:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f29c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f2a0:	4620      	mov	r0, r4
 800f2a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2a4:	3468      	adds	r4, #104	; 0x68
 800f2a6:	e7d9      	b.n	800f25c <__sfp+0x1c>
 800f2a8:	2104      	movs	r1, #4
 800f2aa:	4638      	mov	r0, r7
 800f2ac:	f7ff ff62 	bl	800f174 <__sfmoreglue>
 800f2b0:	4604      	mov	r4, r0
 800f2b2:	6030      	str	r0, [r6, #0]
 800f2b4:	2800      	cmp	r0, #0
 800f2b6:	d1d5      	bne.n	800f264 <__sfp+0x24>
 800f2b8:	f7ff ff78 	bl	800f1ac <__sfp_lock_release>
 800f2bc:	230c      	movs	r3, #12
 800f2be:	603b      	str	r3, [r7, #0]
 800f2c0:	e7ee      	b.n	800f2a0 <__sfp+0x60>
 800f2c2:	bf00      	nop
 800f2c4:	08012070 	.word	0x08012070
 800f2c8:	ffff0001 	.word	0xffff0001

0800f2cc <_fwalk_reent>:
 800f2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2d0:	4606      	mov	r6, r0
 800f2d2:	4688      	mov	r8, r1
 800f2d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f2d8:	2700      	movs	r7, #0
 800f2da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f2de:	f1b9 0901 	subs.w	r9, r9, #1
 800f2e2:	d505      	bpl.n	800f2f0 <_fwalk_reent+0x24>
 800f2e4:	6824      	ldr	r4, [r4, #0]
 800f2e6:	2c00      	cmp	r4, #0
 800f2e8:	d1f7      	bne.n	800f2da <_fwalk_reent+0xe>
 800f2ea:	4638      	mov	r0, r7
 800f2ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2f0:	89ab      	ldrh	r3, [r5, #12]
 800f2f2:	2b01      	cmp	r3, #1
 800f2f4:	d907      	bls.n	800f306 <_fwalk_reent+0x3a>
 800f2f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f2fa:	3301      	adds	r3, #1
 800f2fc:	d003      	beq.n	800f306 <_fwalk_reent+0x3a>
 800f2fe:	4629      	mov	r1, r5
 800f300:	4630      	mov	r0, r6
 800f302:	47c0      	blx	r8
 800f304:	4307      	orrs	r7, r0
 800f306:	3568      	adds	r5, #104	; 0x68
 800f308:	e7e9      	b.n	800f2de <_fwalk_reent+0x12>
	...

0800f30c <__libc_init_array>:
 800f30c:	b570      	push	{r4, r5, r6, lr}
 800f30e:	4d0d      	ldr	r5, [pc, #52]	; (800f344 <__libc_init_array+0x38>)
 800f310:	4c0d      	ldr	r4, [pc, #52]	; (800f348 <__libc_init_array+0x3c>)
 800f312:	1b64      	subs	r4, r4, r5
 800f314:	10a4      	asrs	r4, r4, #2
 800f316:	2600      	movs	r6, #0
 800f318:	42a6      	cmp	r6, r4
 800f31a:	d109      	bne.n	800f330 <__libc_init_array+0x24>
 800f31c:	4d0b      	ldr	r5, [pc, #44]	; (800f34c <__libc_init_array+0x40>)
 800f31e:	4c0c      	ldr	r4, [pc, #48]	; (800f350 <__libc_init_array+0x44>)
 800f320:	f002 fd0e 	bl	8011d40 <_init>
 800f324:	1b64      	subs	r4, r4, r5
 800f326:	10a4      	asrs	r4, r4, #2
 800f328:	2600      	movs	r6, #0
 800f32a:	42a6      	cmp	r6, r4
 800f32c:	d105      	bne.n	800f33a <__libc_init_array+0x2e>
 800f32e:	bd70      	pop	{r4, r5, r6, pc}
 800f330:	f855 3b04 	ldr.w	r3, [r5], #4
 800f334:	4798      	blx	r3
 800f336:	3601      	adds	r6, #1
 800f338:	e7ee      	b.n	800f318 <__libc_init_array+0xc>
 800f33a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f33e:	4798      	blx	r3
 800f340:	3601      	adds	r6, #1
 800f342:	e7f2      	b.n	800f32a <__libc_init_array+0x1e>
 800f344:	080123f4 	.word	0x080123f4
 800f348:	080123f4 	.word	0x080123f4
 800f34c:	080123f4 	.word	0x080123f4
 800f350:	08012420 	.word	0x08012420

0800f354 <__retarget_lock_init_recursive>:
 800f354:	4770      	bx	lr

0800f356 <__retarget_lock_acquire_recursive>:
 800f356:	4770      	bx	lr

0800f358 <__retarget_lock_release>:
 800f358:	4770      	bx	lr

0800f35a <__retarget_lock_release_recursive>:
 800f35a:	4770      	bx	lr

0800f35c <malloc>:
 800f35c:	4b02      	ldr	r3, [pc, #8]	; (800f368 <malloc+0xc>)
 800f35e:	4601      	mov	r1, r0
 800f360:	6818      	ldr	r0, [r3, #0]
 800f362:	f000 b88d 	b.w	800f480 <_malloc_r>
 800f366:	bf00      	nop
 800f368:	20000010 	.word	0x20000010

0800f36c <free>:
 800f36c:	4b02      	ldr	r3, [pc, #8]	; (800f378 <free+0xc>)
 800f36e:	4601      	mov	r1, r0
 800f370:	6818      	ldr	r0, [r3, #0]
 800f372:	f000 b819 	b.w	800f3a8 <_free_r>
 800f376:	bf00      	nop
 800f378:	20000010 	.word	0x20000010

0800f37c <memcpy>:
 800f37c:	440a      	add	r2, r1
 800f37e:	4291      	cmp	r1, r2
 800f380:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f384:	d100      	bne.n	800f388 <memcpy+0xc>
 800f386:	4770      	bx	lr
 800f388:	b510      	push	{r4, lr}
 800f38a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f38e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f392:	4291      	cmp	r1, r2
 800f394:	d1f9      	bne.n	800f38a <memcpy+0xe>
 800f396:	bd10      	pop	{r4, pc}

0800f398 <memset>:
 800f398:	4402      	add	r2, r0
 800f39a:	4603      	mov	r3, r0
 800f39c:	4293      	cmp	r3, r2
 800f39e:	d100      	bne.n	800f3a2 <memset+0xa>
 800f3a0:	4770      	bx	lr
 800f3a2:	f803 1b01 	strb.w	r1, [r3], #1
 800f3a6:	e7f9      	b.n	800f39c <memset+0x4>

0800f3a8 <_free_r>:
 800f3a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3aa:	2900      	cmp	r1, #0
 800f3ac:	d044      	beq.n	800f438 <_free_r+0x90>
 800f3ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3b2:	9001      	str	r0, [sp, #4]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	f1a1 0404 	sub.w	r4, r1, #4
 800f3ba:	bfb8      	it	lt
 800f3bc:	18e4      	addlt	r4, r4, r3
 800f3be:	f001 fe15 	bl	8010fec <__malloc_lock>
 800f3c2:	4a1e      	ldr	r2, [pc, #120]	; (800f43c <_free_r+0x94>)
 800f3c4:	9801      	ldr	r0, [sp, #4]
 800f3c6:	6813      	ldr	r3, [r2, #0]
 800f3c8:	b933      	cbnz	r3, 800f3d8 <_free_r+0x30>
 800f3ca:	6063      	str	r3, [r4, #4]
 800f3cc:	6014      	str	r4, [r2, #0]
 800f3ce:	b003      	add	sp, #12
 800f3d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f3d4:	f001 be10 	b.w	8010ff8 <__malloc_unlock>
 800f3d8:	42a3      	cmp	r3, r4
 800f3da:	d908      	bls.n	800f3ee <_free_r+0x46>
 800f3dc:	6825      	ldr	r5, [r4, #0]
 800f3de:	1961      	adds	r1, r4, r5
 800f3e0:	428b      	cmp	r3, r1
 800f3e2:	bf01      	itttt	eq
 800f3e4:	6819      	ldreq	r1, [r3, #0]
 800f3e6:	685b      	ldreq	r3, [r3, #4]
 800f3e8:	1949      	addeq	r1, r1, r5
 800f3ea:	6021      	streq	r1, [r4, #0]
 800f3ec:	e7ed      	b.n	800f3ca <_free_r+0x22>
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	685b      	ldr	r3, [r3, #4]
 800f3f2:	b10b      	cbz	r3, 800f3f8 <_free_r+0x50>
 800f3f4:	42a3      	cmp	r3, r4
 800f3f6:	d9fa      	bls.n	800f3ee <_free_r+0x46>
 800f3f8:	6811      	ldr	r1, [r2, #0]
 800f3fa:	1855      	adds	r5, r2, r1
 800f3fc:	42a5      	cmp	r5, r4
 800f3fe:	d10b      	bne.n	800f418 <_free_r+0x70>
 800f400:	6824      	ldr	r4, [r4, #0]
 800f402:	4421      	add	r1, r4
 800f404:	1854      	adds	r4, r2, r1
 800f406:	42a3      	cmp	r3, r4
 800f408:	6011      	str	r1, [r2, #0]
 800f40a:	d1e0      	bne.n	800f3ce <_free_r+0x26>
 800f40c:	681c      	ldr	r4, [r3, #0]
 800f40e:	685b      	ldr	r3, [r3, #4]
 800f410:	6053      	str	r3, [r2, #4]
 800f412:	4421      	add	r1, r4
 800f414:	6011      	str	r1, [r2, #0]
 800f416:	e7da      	b.n	800f3ce <_free_r+0x26>
 800f418:	d902      	bls.n	800f420 <_free_r+0x78>
 800f41a:	230c      	movs	r3, #12
 800f41c:	6003      	str	r3, [r0, #0]
 800f41e:	e7d6      	b.n	800f3ce <_free_r+0x26>
 800f420:	6825      	ldr	r5, [r4, #0]
 800f422:	1961      	adds	r1, r4, r5
 800f424:	428b      	cmp	r3, r1
 800f426:	bf04      	itt	eq
 800f428:	6819      	ldreq	r1, [r3, #0]
 800f42a:	685b      	ldreq	r3, [r3, #4]
 800f42c:	6063      	str	r3, [r4, #4]
 800f42e:	bf04      	itt	eq
 800f430:	1949      	addeq	r1, r1, r5
 800f432:	6021      	streq	r1, [r4, #0]
 800f434:	6054      	str	r4, [r2, #4]
 800f436:	e7ca      	b.n	800f3ce <_free_r+0x26>
 800f438:	b003      	add	sp, #12
 800f43a:	bd30      	pop	{r4, r5, pc}
 800f43c:	2000a3e8 	.word	0x2000a3e8

0800f440 <sbrk_aligned>:
 800f440:	b570      	push	{r4, r5, r6, lr}
 800f442:	4e0e      	ldr	r6, [pc, #56]	; (800f47c <sbrk_aligned+0x3c>)
 800f444:	460c      	mov	r4, r1
 800f446:	6831      	ldr	r1, [r6, #0]
 800f448:	4605      	mov	r5, r0
 800f44a:	b911      	cbnz	r1, 800f452 <sbrk_aligned+0x12>
 800f44c:	f000 fd60 	bl	800ff10 <_sbrk_r>
 800f450:	6030      	str	r0, [r6, #0]
 800f452:	4621      	mov	r1, r4
 800f454:	4628      	mov	r0, r5
 800f456:	f000 fd5b 	bl	800ff10 <_sbrk_r>
 800f45a:	1c43      	adds	r3, r0, #1
 800f45c:	d00a      	beq.n	800f474 <sbrk_aligned+0x34>
 800f45e:	1cc4      	adds	r4, r0, #3
 800f460:	f024 0403 	bic.w	r4, r4, #3
 800f464:	42a0      	cmp	r0, r4
 800f466:	d007      	beq.n	800f478 <sbrk_aligned+0x38>
 800f468:	1a21      	subs	r1, r4, r0
 800f46a:	4628      	mov	r0, r5
 800f46c:	f000 fd50 	bl	800ff10 <_sbrk_r>
 800f470:	3001      	adds	r0, #1
 800f472:	d101      	bne.n	800f478 <sbrk_aligned+0x38>
 800f474:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f478:	4620      	mov	r0, r4
 800f47a:	bd70      	pop	{r4, r5, r6, pc}
 800f47c:	2000a3ec 	.word	0x2000a3ec

0800f480 <_malloc_r>:
 800f480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f484:	1ccd      	adds	r5, r1, #3
 800f486:	f025 0503 	bic.w	r5, r5, #3
 800f48a:	3508      	adds	r5, #8
 800f48c:	2d0c      	cmp	r5, #12
 800f48e:	bf38      	it	cc
 800f490:	250c      	movcc	r5, #12
 800f492:	2d00      	cmp	r5, #0
 800f494:	4607      	mov	r7, r0
 800f496:	db01      	blt.n	800f49c <_malloc_r+0x1c>
 800f498:	42a9      	cmp	r1, r5
 800f49a:	d905      	bls.n	800f4a8 <_malloc_r+0x28>
 800f49c:	230c      	movs	r3, #12
 800f49e:	603b      	str	r3, [r7, #0]
 800f4a0:	2600      	movs	r6, #0
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4a8:	4e2e      	ldr	r6, [pc, #184]	; (800f564 <_malloc_r+0xe4>)
 800f4aa:	f001 fd9f 	bl	8010fec <__malloc_lock>
 800f4ae:	6833      	ldr	r3, [r6, #0]
 800f4b0:	461c      	mov	r4, r3
 800f4b2:	bb34      	cbnz	r4, 800f502 <_malloc_r+0x82>
 800f4b4:	4629      	mov	r1, r5
 800f4b6:	4638      	mov	r0, r7
 800f4b8:	f7ff ffc2 	bl	800f440 <sbrk_aligned>
 800f4bc:	1c43      	adds	r3, r0, #1
 800f4be:	4604      	mov	r4, r0
 800f4c0:	d14d      	bne.n	800f55e <_malloc_r+0xde>
 800f4c2:	6834      	ldr	r4, [r6, #0]
 800f4c4:	4626      	mov	r6, r4
 800f4c6:	2e00      	cmp	r6, #0
 800f4c8:	d140      	bne.n	800f54c <_malloc_r+0xcc>
 800f4ca:	6823      	ldr	r3, [r4, #0]
 800f4cc:	4631      	mov	r1, r6
 800f4ce:	4638      	mov	r0, r7
 800f4d0:	eb04 0803 	add.w	r8, r4, r3
 800f4d4:	f000 fd1c 	bl	800ff10 <_sbrk_r>
 800f4d8:	4580      	cmp	r8, r0
 800f4da:	d13a      	bne.n	800f552 <_malloc_r+0xd2>
 800f4dc:	6821      	ldr	r1, [r4, #0]
 800f4de:	3503      	adds	r5, #3
 800f4e0:	1a6d      	subs	r5, r5, r1
 800f4e2:	f025 0503 	bic.w	r5, r5, #3
 800f4e6:	3508      	adds	r5, #8
 800f4e8:	2d0c      	cmp	r5, #12
 800f4ea:	bf38      	it	cc
 800f4ec:	250c      	movcc	r5, #12
 800f4ee:	4629      	mov	r1, r5
 800f4f0:	4638      	mov	r0, r7
 800f4f2:	f7ff ffa5 	bl	800f440 <sbrk_aligned>
 800f4f6:	3001      	adds	r0, #1
 800f4f8:	d02b      	beq.n	800f552 <_malloc_r+0xd2>
 800f4fa:	6823      	ldr	r3, [r4, #0]
 800f4fc:	442b      	add	r3, r5
 800f4fe:	6023      	str	r3, [r4, #0]
 800f500:	e00e      	b.n	800f520 <_malloc_r+0xa0>
 800f502:	6822      	ldr	r2, [r4, #0]
 800f504:	1b52      	subs	r2, r2, r5
 800f506:	d41e      	bmi.n	800f546 <_malloc_r+0xc6>
 800f508:	2a0b      	cmp	r2, #11
 800f50a:	d916      	bls.n	800f53a <_malloc_r+0xba>
 800f50c:	1961      	adds	r1, r4, r5
 800f50e:	42a3      	cmp	r3, r4
 800f510:	6025      	str	r5, [r4, #0]
 800f512:	bf18      	it	ne
 800f514:	6059      	strne	r1, [r3, #4]
 800f516:	6863      	ldr	r3, [r4, #4]
 800f518:	bf08      	it	eq
 800f51a:	6031      	streq	r1, [r6, #0]
 800f51c:	5162      	str	r2, [r4, r5]
 800f51e:	604b      	str	r3, [r1, #4]
 800f520:	4638      	mov	r0, r7
 800f522:	f104 060b 	add.w	r6, r4, #11
 800f526:	f001 fd67 	bl	8010ff8 <__malloc_unlock>
 800f52a:	f026 0607 	bic.w	r6, r6, #7
 800f52e:	1d23      	adds	r3, r4, #4
 800f530:	1af2      	subs	r2, r6, r3
 800f532:	d0b6      	beq.n	800f4a2 <_malloc_r+0x22>
 800f534:	1b9b      	subs	r3, r3, r6
 800f536:	50a3      	str	r3, [r4, r2]
 800f538:	e7b3      	b.n	800f4a2 <_malloc_r+0x22>
 800f53a:	6862      	ldr	r2, [r4, #4]
 800f53c:	42a3      	cmp	r3, r4
 800f53e:	bf0c      	ite	eq
 800f540:	6032      	streq	r2, [r6, #0]
 800f542:	605a      	strne	r2, [r3, #4]
 800f544:	e7ec      	b.n	800f520 <_malloc_r+0xa0>
 800f546:	4623      	mov	r3, r4
 800f548:	6864      	ldr	r4, [r4, #4]
 800f54a:	e7b2      	b.n	800f4b2 <_malloc_r+0x32>
 800f54c:	4634      	mov	r4, r6
 800f54e:	6876      	ldr	r6, [r6, #4]
 800f550:	e7b9      	b.n	800f4c6 <_malloc_r+0x46>
 800f552:	230c      	movs	r3, #12
 800f554:	603b      	str	r3, [r7, #0]
 800f556:	4638      	mov	r0, r7
 800f558:	f001 fd4e 	bl	8010ff8 <__malloc_unlock>
 800f55c:	e7a1      	b.n	800f4a2 <_malloc_r+0x22>
 800f55e:	6025      	str	r5, [r4, #0]
 800f560:	e7de      	b.n	800f520 <_malloc_r+0xa0>
 800f562:	bf00      	nop
 800f564:	2000a3e8 	.word	0x2000a3e8

0800f568 <__cvt>:
 800f568:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f56c:	ec55 4b10 	vmov	r4, r5, d0
 800f570:	2d00      	cmp	r5, #0
 800f572:	460e      	mov	r6, r1
 800f574:	4619      	mov	r1, r3
 800f576:	462b      	mov	r3, r5
 800f578:	bfbb      	ittet	lt
 800f57a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800f57e:	461d      	movlt	r5, r3
 800f580:	2300      	movge	r3, #0
 800f582:	232d      	movlt	r3, #45	; 0x2d
 800f584:	700b      	strb	r3, [r1, #0]
 800f586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f588:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800f58c:	4691      	mov	r9, r2
 800f58e:	f023 0820 	bic.w	r8, r3, #32
 800f592:	bfbc      	itt	lt
 800f594:	4622      	movlt	r2, r4
 800f596:	4614      	movlt	r4, r2
 800f598:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f59c:	d005      	beq.n	800f5aa <__cvt+0x42>
 800f59e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800f5a2:	d100      	bne.n	800f5a6 <__cvt+0x3e>
 800f5a4:	3601      	adds	r6, #1
 800f5a6:	2102      	movs	r1, #2
 800f5a8:	e000      	b.n	800f5ac <__cvt+0x44>
 800f5aa:	2103      	movs	r1, #3
 800f5ac:	ab03      	add	r3, sp, #12
 800f5ae:	9301      	str	r3, [sp, #4]
 800f5b0:	ab02      	add	r3, sp, #8
 800f5b2:	9300      	str	r3, [sp, #0]
 800f5b4:	ec45 4b10 	vmov	d0, r4, r5
 800f5b8:	4653      	mov	r3, sl
 800f5ba:	4632      	mov	r2, r6
 800f5bc:	f000 fe50 	bl	8010260 <_dtoa_r>
 800f5c0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800f5c4:	4607      	mov	r7, r0
 800f5c6:	d102      	bne.n	800f5ce <__cvt+0x66>
 800f5c8:	f019 0f01 	tst.w	r9, #1
 800f5cc:	d022      	beq.n	800f614 <__cvt+0xac>
 800f5ce:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800f5d2:	eb07 0906 	add.w	r9, r7, r6
 800f5d6:	d110      	bne.n	800f5fa <__cvt+0x92>
 800f5d8:	783b      	ldrb	r3, [r7, #0]
 800f5da:	2b30      	cmp	r3, #48	; 0x30
 800f5dc:	d10a      	bne.n	800f5f4 <__cvt+0x8c>
 800f5de:	2200      	movs	r2, #0
 800f5e0:	2300      	movs	r3, #0
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	4629      	mov	r1, r5
 800f5e6:	f7f1 fa6f 	bl	8000ac8 <__aeabi_dcmpeq>
 800f5ea:	b918      	cbnz	r0, 800f5f4 <__cvt+0x8c>
 800f5ec:	f1c6 0601 	rsb	r6, r6, #1
 800f5f0:	f8ca 6000 	str.w	r6, [sl]
 800f5f4:	f8da 3000 	ldr.w	r3, [sl]
 800f5f8:	4499      	add	r9, r3
 800f5fa:	2200      	movs	r2, #0
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	4620      	mov	r0, r4
 800f600:	4629      	mov	r1, r5
 800f602:	f7f1 fa61 	bl	8000ac8 <__aeabi_dcmpeq>
 800f606:	b108      	cbz	r0, 800f60c <__cvt+0xa4>
 800f608:	f8cd 900c 	str.w	r9, [sp, #12]
 800f60c:	2230      	movs	r2, #48	; 0x30
 800f60e:	9b03      	ldr	r3, [sp, #12]
 800f610:	454b      	cmp	r3, r9
 800f612:	d307      	bcc.n	800f624 <__cvt+0xbc>
 800f614:	9b03      	ldr	r3, [sp, #12]
 800f616:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f618:	1bdb      	subs	r3, r3, r7
 800f61a:	4638      	mov	r0, r7
 800f61c:	6013      	str	r3, [r2, #0]
 800f61e:	b004      	add	sp, #16
 800f620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f624:	1c59      	adds	r1, r3, #1
 800f626:	9103      	str	r1, [sp, #12]
 800f628:	701a      	strb	r2, [r3, #0]
 800f62a:	e7f0      	b.n	800f60e <__cvt+0xa6>

0800f62c <__exponent>:
 800f62c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f62e:	4603      	mov	r3, r0
 800f630:	2900      	cmp	r1, #0
 800f632:	bfb8      	it	lt
 800f634:	4249      	neglt	r1, r1
 800f636:	f803 2b02 	strb.w	r2, [r3], #2
 800f63a:	bfb4      	ite	lt
 800f63c:	222d      	movlt	r2, #45	; 0x2d
 800f63e:	222b      	movge	r2, #43	; 0x2b
 800f640:	2909      	cmp	r1, #9
 800f642:	7042      	strb	r2, [r0, #1]
 800f644:	dd2a      	ble.n	800f69c <__exponent+0x70>
 800f646:	f10d 0407 	add.w	r4, sp, #7
 800f64a:	46a4      	mov	ip, r4
 800f64c:	270a      	movs	r7, #10
 800f64e:	46a6      	mov	lr, r4
 800f650:	460a      	mov	r2, r1
 800f652:	fb91 f6f7 	sdiv	r6, r1, r7
 800f656:	fb07 1516 	mls	r5, r7, r6, r1
 800f65a:	3530      	adds	r5, #48	; 0x30
 800f65c:	2a63      	cmp	r2, #99	; 0x63
 800f65e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800f662:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800f666:	4631      	mov	r1, r6
 800f668:	dcf1      	bgt.n	800f64e <__exponent+0x22>
 800f66a:	3130      	adds	r1, #48	; 0x30
 800f66c:	f1ae 0502 	sub.w	r5, lr, #2
 800f670:	f804 1c01 	strb.w	r1, [r4, #-1]
 800f674:	1c44      	adds	r4, r0, #1
 800f676:	4629      	mov	r1, r5
 800f678:	4561      	cmp	r1, ip
 800f67a:	d30a      	bcc.n	800f692 <__exponent+0x66>
 800f67c:	f10d 0209 	add.w	r2, sp, #9
 800f680:	eba2 020e 	sub.w	r2, r2, lr
 800f684:	4565      	cmp	r5, ip
 800f686:	bf88      	it	hi
 800f688:	2200      	movhi	r2, #0
 800f68a:	4413      	add	r3, r2
 800f68c:	1a18      	subs	r0, r3, r0
 800f68e:	b003      	add	sp, #12
 800f690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f692:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f696:	f804 2f01 	strb.w	r2, [r4, #1]!
 800f69a:	e7ed      	b.n	800f678 <__exponent+0x4c>
 800f69c:	2330      	movs	r3, #48	; 0x30
 800f69e:	3130      	adds	r1, #48	; 0x30
 800f6a0:	7083      	strb	r3, [r0, #2]
 800f6a2:	70c1      	strb	r1, [r0, #3]
 800f6a4:	1d03      	adds	r3, r0, #4
 800f6a6:	e7f1      	b.n	800f68c <__exponent+0x60>

0800f6a8 <_printf_float>:
 800f6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6ac:	ed2d 8b02 	vpush	{d8}
 800f6b0:	b08d      	sub	sp, #52	; 0x34
 800f6b2:	460c      	mov	r4, r1
 800f6b4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800f6b8:	4616      	mov	r6, r2
 800f6ba:	461f      	mov	r7, r3
 800f6bc:	4605      	mov	r5, r0
 800f6be:	f001 fc7f 	bl	8010fc0 <_localeconv_r>
 800f6c2:	f8d0 a000 	ldr.w	sl, [r0]
 800f6c6:	4650      	mov	r0, sl
 800f6c8:	f7f0 fd82 	bl	80001d0 <strlen>
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	930a      	str	r3, [sp, #40]	; 0x28
 800f6d0:	6823      	ldr	r3, [r4, #0]
 800f6d2:	9305      	str	r3, [sp, #20]
 800f6d4:	f8d8 3000 	ldr.w	r3, [r8]
 800f6d8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800f6dc:	3307      	adds	r3, #7
 800f6de:	f023 0307 	bic.w	r3, r3, #7
 800f6e2:	f103 0208 	add.w	r2, r3, #8
 800f6e6:	f8c8 2000 	str.w	r2, [r8]
 800f6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ee:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800f6f2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800f6f6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800f6fa:	9307      	str	r3, [sp, #28]
 800f6fc:	f8cd 8018 	str.w	r8, [sp, #24]
 800f700:	ee08 0a10 	vmov	s16, r0
 800f704:	4b9f      	ldr	r3, [pc, #636]	; (800f984 <_printf_float+0x2dc>)
 800f706:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f70a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f70e:	f7f1 fa0d 	bl	8000b2c <__aeabi_dcmpun>
 800f712:	bb88      	cbnz	r0, 800f778 <_printf_float+0xd0>
 800f714:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f718:	4b9a      	ldr	r3, [pc, #616]	; (800f984 <_printf_float+0x2dc>)
 800f71a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f71e:	f7f1 f9e7 	bl	8000af0 <__aeabi_dcmple>
 800f722:	bb48      	cbnz	r0, 800f778 <_printf_float+0xd0>
 800f724:	2200      	movs	r2, #0
 800f726:	2300      	movs	r3, #0
 800f728:	4640      	mov	r0, r8
 800f72a:	4649      	mov	r1, r9
 800f72c:	f7f1 f9d6 	bl	8000adc <__aeabi_dcmplt>
 800f730:	b110      	cbz	r0, 800f738 <_printf_float+0x90>
 800f732:	232d      	movs	r3, #45	; 0x2d
 800f734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f738:	4b93      	ldr	r3, [pc, #588]	; (800f988 <_printf_float+0x2e0>)
 800f73a:	4894      	ldr	r0, [pc, #592]	; (800f98c <_printf_float+0x2e4>)
 800f73c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800f740:	bf94      	ite	ls
 800f742:	4698      	movls	r8, r3
 800f744:	4680      	movhi	r8, r0
 800f746:	2303      	movs	r3, #3
 800f748:	6123      	str	r3, [r4, #16]
 800f74a:	9b05      	ldr	r3, [sp, #20]
 800f74c:	f023 0204 	bic.w	r2, r3, #4
 800f750:	6022      	str	r2, [r4, #0]
 800f752:	f04f 0900 	mov.w	r9, #0
 800f756:	9700      	str	r7, [sp, #0]
 800f758:	4633      	mov	r3, r6
 800f75a:	aa0b      	add	r2, sp, #44	; 0x2c
 800f75c:	4621      	mov	r1, r4
 800f75e:	4628      	mov	r0, r5
 800f760:	f000 f9d8 	bl	800fb14 <_printf_common>
 800f764:	3001      	adds	r0, #1
 800f766:	f040 8090 	bne.w	800f88a <_printf_float+0x1e2>
 800f76a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f76e:	b00d      	add	sp, #52	; 0x34
 800f770:	ecbd 8b02 	vpop	{d8}
 800f774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f778:	4642      	mov	r2, r8
 800f77a:	464b      	mov	r3, r9
 800f77c:	4640      	mov	r0, r8
 800f77e:	4649      	mov	r1, r9
 800f780:	f7f1 f9d4 	bl	8000b2c <__aeabi_dcmpun>
 800f784:	b140      	cbz	r0, 800f798 <_printf_float+0xf0>
 800f786:	464b      	mov	r3, r9
 800f788:	2b00      	cmp	r3, #0
 800f78a:	bfbc      	itt	lt
 800f78c:	232d      	movlt	r3, #45	; 0x2d
 800f78e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800f792:	487f      	ldr	r0, [pc, #508]	; (800f990 <_printf_float+0x2e8>)
 800f794:	4b7f      	ldr	r3, [pc, #508]	; (800f994 <_printf_float+0x2ec>)
 800f796:	e7d1      	b.n	800f73c <_printf_float+0x94>
 800f798:	6863      	ldr	r3, [r4, #4]
 800f79a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800f79e:	9206      	str	r2, [sp, #24]
 800f7a0:	1c5a      	adds	r2, r3, #1
 800f7a2:	d13f      	bne.n	800f824 <_printf_float+0x17c>
 800f7a4:	2306      	movs	r3, #6
 800f7a6:	6063      	str	r3, [r4, #4]
 800f7a8:	9b05      	ldr	r3, [sp, #20]
 800f7aa:	6861      	ldr	r1, [r4, #4]
 800f7ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	9303      	str	r3, [sp, #12]
 800f7b4:	ab0a      	add	r3, sp, #40	; 0x28
 800f7b6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800f7ba:	ab09      	add	r3, sp, #36	; 0x24
 800f7bc:	ec49 8b10 	vmov	d0, r8, r9
 800f7c0:	9300      	str	r3, [sp, #0]
 800f7c2:	6022      	str	r2, [r4, #0]
 800f7c4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800f7c8:	4628      	mov	r0, r5
 800f7ca:	f7ff fecd 	bl	800f568 <__cvt>
 800f7ce:	9b06      	ldr	r3, [sp, #24]
 800f7d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f7d2:	2b47      	cmp	r3, #71	; 0x47
 800f7d4:	4680      	mov	r8, r0
 800f7d6:	d108      	bne.n	800f7ea <_printf_float+0x142>
 800f7d8:	1cc8      	adds	r0, r1, #3
 800f7da:	db02      	blt.n	800f7e2 <_printf_float+0x13a>
 800f7dc:	6863      	ldr	r3, [r4, #4]
 800f7de:	4299      	cmp	r1, r3
 800f7e0:	dd41      	ble.n	800f866 <_printf_float+0x1be>
 800f7e2:	f1ab 0b02 	sub.w	fp, fp, #2
 800f7e6:	fa5f fb8b 	uxtb.w	fp, fp
 800f7ea:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f7ee:	d820      	bhi.n	800f832 <_printf_float+0x18a>
 800f7f0:	3901      	subs	r1, #1
 800f7f2:	465a      	mov	r2, fp
 800f7f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800f7f8:	9109      	str	r1, [sp, #36]	; 0x24
 800f7fa:	f7ff ff17 	bl	800f62c <__exponent>
 800f7fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f800:	1813      	adds	r3, r2, r0
 800f802:	2a01      	cmp	r2, #1
 800f804:	4681      	mov	r9, r0
 800f806:	6123      	str	r3, [r4, #16]
 800f808:	dc02      	bgt.n	800f810 <_printf_float+0x168>
 800f80a:	6822      	ldr	r2, [r4, #0]
 800f80c:	07d2      	lsls	r2, r2, #31
 800f80e:	d501      	bpl.n	800f814 <_printf_float+0x16c>
 800f810:	3301      	adds	r3, #1
 800f812:	6123      	str	r3, [r4, #16]
 800f814:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d09c      	beq.n	800f756 <_printf_float+0xae>
 800f81c:	232d      	movs	r3, #45	; 0x2d
 800f81e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f822:	e798      	b.n	800f756 <_printf_float+0xae>
 800f824:	9a06      	ldr	r2, [sp, #24]
 800f826:	2a47      	cmp	r2, #71	; 0x47
 800f828:	d1be      	bne.n	800f7a8 <_printf_float+0x100>
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d1bc      	bne.n	800f7a8 <_printf_float+0x100>
 800f82e:	2301      	movs	r3, #1
 800f830:	e7b9      	b.n	800f7a6 <_printf_float+0xfe>
 800f832:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f836:	d118      	bne.n	800f86a <_printf_float+0x1c2>
 800f838:	2900      	cmp	r1, #0
 800f83a:	6863      	ldr	r3, [r4, #4]
 800f83c:	dd0b      	ble.n	800f856 <_printf_float+0x1ae>
 800f83e:	6121      	str	r1, [r4, #16]
 800f840:	b913      	cbnz	r3, 800f848 <_printf_float+0x1a0>
 800f842:	6822      	ldr	r2, [r4, #0]
 800f844:	07d0      	lsls	r0, r2, #31
 800f846:	d502      	bpl.n	800f84e <_printf_float+0x1a6>
 800f848:	3301      	adds	r3, #1
 800f84a:	440b      	add	r3, r1
 800f84c:	6123      	str	r3, [r4, #16]
 800f84e:	65a1      	str	r1, [r4, #88]	; 0x58
 800f850:	f04f 0900 	mov.w	r9, #0
 800f854:	e7de      	b.n	800f814 <_printf_float+0x16c>
 800f856:	b913      	cbnz	r3, 800f85e <_printf_float+0x1b6>
 800f858:	6822      	ldr	r2, [r4, #0]
 800f85a:	07d2      	lsls	r2, r2, #31
 800f85c:	d501      	bpl.n	800f862 <_printf_float+0x1ba>
 800f85e:	3302      	adds	r3, #2
 800f860:	e7f4      	b.n	800f84c <_printf_float+0x1a4>
 800f862:	2301      	movs	r3, #1
 800f864:	e7f2      	b.n	800f84c <_printf_float+0x1a4>
 800f866:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f86a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f86c:	4299      	cmp	r1, r3
 800f86e:	db05      	blt.n	800f87c <_printf_float+0x1d4>
 800f870:	6823      	ldr	r3, [r4, #0]
 800f872:	6121      	str	r1, [r4, #16]
 800f874:	07d8      	lsls	r0, r3, #31
 800f876:	d5ea      	bpl.n	800f84e <_printf_float+0x1a6>
 800f878:	1c4b      	adds	r3, r1, #1
 800f87a:	e7e7      	b.n	800f84c <_printf_float+0x1a4>
 800f87c:	2900      	cmp	r1, #0
 800f87e:	bfd4      	ite	le
 800f880:	f1c1 0202 	rsble	r2, r1, #2
 800f884:	2201      	movgt	r2, #1
 800f886:	4413      	add	r3, r2
 800f888:	e7e0      	b.n	800f84c <_printf_float+0x1a4>
 800f88a:	6823      	ldr	r3, [r4, #0]
 800f88c:	055a      	lsls	r2, r3, #21
 800f88e:	d407      	bmi.n	800f8a0 <_printf_float+0x1f8>
 800f890:	6923      	ldr	r3, [r4, #16]
 800f892:	4642      	mov	r2, r8
 800f894:	4631      	mov	r1, r6
 800f896:	4628      	mov	r0, r5
 800f898:	47b8      	blx	r7
 800f89a:	3001      	adds	r0, #1
 800f89c:	d12c      	bne.n	800f8f8 <_printf_float+0x250>
 800f89e:	e764      	b.n	800f76a <_printf_float+0xc2>
 800f8a0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f8a4:	f240 80e0 	bls.w	800fa68 <_printf_float+0x3c0>
 800f8a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f8ac:	2200      	movs	r2, #0
 800f8ae:	2300      	movs	r3, #0
 800f8b0:	f7f1 f90a 	bl	8000ac8 <__aeabi_dcmpeq>
 800f8b4:	2800      	cmp	r0, #0
 800f8b6:	d034      	beq.n	800f922 <_printf_float+0x27a>
 800f8b8:	4a37      	ldr	r2, [pc, #220]	; (800f998 <_printf_float+0x2f0>)
 800f8ba:	2301      	movs	r3, #1
 800f8bc:	4631      	mov	r1, r6
 800f8be:	4628      	mov	r0, r5
 800f8c0:	47b8      	blx	r7
 800f8c2:	3001      	adds	r0, #1
 800f8c4:	f43f af51 	beq.w	800f76a <_printf_float+0xc2>
 800f8c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f8cc:	429a      	cmp	r2, r3
 800f8ce:	db02      	blt.n	800f8d6 <_printf_float+0x22e>
 800f8d0:	6823      	ldr	r3, [r4, #0]
 800f8d2:	07d8      	lsls	r0, r3, #31
 800f8d4:	d510      	bpl.n	800f8f8 <_printf_float+0x250>
 800f8d6:	ee18 3a10 	vmov	r3, s16
 800f8da:	4652      	mov	r2, sl
 800f8dc:	4631      	mov	r1, r6
 800f8de:	4628      	mov	r0, r5
 800f8e0:	47b8      	blx	r7
 800f8e2:	3001      	adds	r0, #1
 800f8e4:	f43f af41 	beq.w	800f76a <_printf_float+0xc2>
 800f8e8:	f04f 0800 	mov.w	r8, #0
 800f8ec:	f104 091a 	add.w	r9, r4, #26
 800f8f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f8f2:	3b01      	subs	r3, #1
 800f8f4:	4543      	cmp	r3, r8
 800f8f6:	dc09      	bgt.n	800f90c <_printf_float+0x264>
 800f8f8:	6823      	ldr	r3, [r4, #0]
 800f8fa:	079b      	lsls	r3, r3, #30
 800f8fc:	f100 8105 	bmi.w	800fb0a <_printf_float+0x462>
 800f900:	68e0      	ldr	r0, [r4, #12]
 800f902:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f904:	4298      	cmp	r0, r3
 800f906:	bfb8      	it	lt
 800f908:	4618      	movlt	r0, r3
 800f90a:	e730      	b.n	800f76e <_printf_float+0xc6>
 800f90c:	2301      	movs	r3, #1
 800f90e:	464a      	mov	r2, r9
 800f910:	4631      	mov	r1, r6
 800f912:	4628      	mov	r0, r5
 800f914:	47b8      	blx	r7
 800f916:	3001      	adds	r0, #1
 800f918:	f43f af27 	beq.w	800f76a <_printf_float+0xc2>
 800f91c:	f108 0801 	add.w	r8, r8, #1
 800f920:	e7e6      	b.n	800f8f0 <_printf_float+0x248>
 800f922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f924:	2b00      	cmp	r3, #0
 800f926:	dc39      	bgt.n	800f99c <_printf_float+0x2f4>
 800f928:	4a1b      	ldr	r2, [pc, #108]	; (800f998 <_printf_float+0x2f0>)
 800f92a:	2301      	movs	r3, #1
 800f92c:	4631      	mov	r1, r6
 800f92e:	4628      	mov	r0, r5
 800f930:	47b8      	blx	r7
 800f932:	3001      	adds	r0, #1
 800f934:	f43f af19 	beq.w	800f76a <_printf_float+0xc2>
 800f938:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f93c:	4313      	orrs	r3, r2
 800f93e:	d102      	bne.n	800f946 <_printf_float+0x29e>
 800f940:	6823      	ldr	r3, [r4, #0]
 800f942:	07d9      	lsls	r1, r3, #31
 800f944:	d5d8      	bpl.n	800f8f8 <_printf_float+0x250>
 800f946:	ee18 3a10 	vmov	r3, s16
 800f94a:	4652      	mov	r2, sl
 800f94c:	4631      	mov	r1, r6
 800f94e:	4628      	mov	r0, r5
 800f950:	47b8      	blx	r7
 800f952:	3001      	adds	r0, #1
 800f954:	f43f af09 	beq.w	800f76a <_printf_float+0xc2>
 800f958:	f04f 0900 	mov.w	r9, #0
 800f95c:	f104 0a1a 	add.w	sl, r4, #26
 800f960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f962:	425b      	negs	r3, r3
 800f964:	454b      	cmp	r3, r9
 800f966:	dc01      	bgt.n	800f96c <_printf_float+0x2c4>
 800f968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f96a:	e792      	b.n	800f892 <_printf_float+0x1ea>
 800f96c:	2301      	movs	r3, #1
 800f96e:	4652      	mov	r2, sl
 800f970:	4631      	mov	r1, r6
 800f972:	4628      	mov	r0, r5
 800f974:	47b8      	blx	r7
 800f976:	3001      	adds	r0, #1
 800f978:	f43f aef7 	beq.w	800f76a <_printf_float+0xc2>
 800f97c:	f109 0901 	add.w	r9, r9, #1
 800f980:	e7ee      	b.n	800f960 <_printf_float+0x2b8>
 800f982:	bf00      	nop
 800f984:	7fefffff 	.word	0x7fefffff
 800f988:	08012074 	.word	0x08012074
 800f98c:	08012078 	.word	0x08012078
 800f990:	08012080 	.word	0x08012080
 800f994:	0801207c 	.word	0x0801207c
 800f998:	08012084 	.word	0x08012084
 800f99c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f99e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f9a0:	429a      	cmp	r2, r3
 800f9a2:	bfa8      	it	ge
 800f9a4:	461a      	movge	r2, r3
 800f9a6:	2a00      	cmp	r2, #0
 800f9a8:	4691      	mov	r9, r2
 800f9aa:	dc37      	bgt.n	800fa1c <_printf_float+0x374>
 800f9ac:	f04f 0b00 	mov.w	fp, #0
 800f9b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f9b4:	f104 021a 	add.w	r2, r4, #26
 800f9b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f9ba:	9305      	str	r3, [sp, #20]
 800f9bc:	eba3 0309 	sub.w	r3, r3, r9
 800f9c0:	455b      	cmp	r3, fp
 800f9c2:	dc33      	bgt.n	800fa2c <_printf_float+0x384>
 800f9c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f9c8:	429a      	cmp	r2, r3
 800f9ca:	db3b      	blt.n	800fa44 <_printf_float+0x39c>
 800f9cc:	6823      	ldr	r3, [r4, #0]
 800f9ce:	07da      	lsls	r2, r3, #31
 800f9d0:	d438      	bmi.n	800fa44 <_printf_float+0x39c>
 800f9d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9d4:	9a05      	ldr	r2, [sp, #20]
 800f9d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f9d8:	1a9a      	subs	r2, r3, r2
 800f9da:	eba3 0901 	sub.w	r9, r3, r1
 800f9de:	4591      	cmp	r9, r2
 800f9e0:	bfa8      	it	ge
 800f9e2:	4691      	movge	r9, r2
 800f9e4:	f1b9 0f00 	cmp.w	r9, #0
 800f9e8:	dc35      	bgt.n	800fa56 <_printf_float+0x3ae>
 800f9ea:	f04f 0800 	mov.w	r8, #0
 800f9ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f9f2:	f104 0a1a 	add.w	sl, r4, #26
 800f9f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f9fa:	1a9b      	subs	r3, r3, r2
 800f9fc:	eba3 0309 	sub.w	r3, r3, r9
 800fa00:	4543      	cmp	r3, r8
 800fa02:	f77f af79 	ble.w	800f8f8 <_printf_float+0x250>
 800fa06:	2301      	movs	r3, #1
 800fa08:	4652      	mov	r2, sl
 800fa0a:	4631      	mov	r1, r6
 800fa0c:	4628      	mov	r0, r5
 800fa0e:	47b8      	blx	r7
 800fa10:	3001      	adds	r0, #1
 800fa12:	f43f aeaa 	beq.w	800f76a <_printf_float+0xc2>
 800fa16:	f108 0801 	add.w	r8, r8, #1
 800fa1a:	e7ec      	b.n	800f9f6 <_printf_float+0x34e>
 800fa1c:	4613      	mov	r3, r2
 800fa1e:	4631      	mov	r1, r6
 800fa20:	4642      	mov	r2, r8
 800fa22:	4628      	mov	r0, r5
 800fa24:	47b8      	blx	r7
 800fa26:	3001      	adds	r0, #1
 800fa28:	d1c0      	bne.n	800f9ac <_printf_float+0x304>
 800fa2a:	e69e      	b.n	800f76a <_printf_float+0xc2>
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	4631      	mov	r1, r6
 800fa30:	4628      	mov	r0, r5
 800fa32:	9205      	str	r2, [sp, #20]
 800fa34:	47b8      	blx	r7
 800fa36:	3001      	adds	r0, #1
 800fa38:	f43f ae97 	beq.w	800f76a <_printf_float+0xc2>
 800fa3c:	9a05      	ldr	r2, [sp, #20]
 800fa3e:	f10b 0b01 	add.w	fp, fp, #1
 800fa42:	e7b9      	b.n	800f9b8 <_printf_float+0x310>
 800fa44:	ee18 3a10 	vmov	r3, s16
 800fa48:	4652      	mov	r2, sl
 800fa4a:	4631      	mov	r1, r6
 800fa4c:	4628      	mov	r0, r5
 800fa4e:	47b8      	blx	r7
 800fa50:	3001      	adds	r0, #1
 800fa52:	d1be      	bne.n	800f9d2 <_printf_float+0x32a>
 800fa54:	e689      	b.n	800f76a <_printf_float+0xc2>
 800fa56:	9a05      	ldr	r2, [sp, #20]
 800fa58:	464b      	mov	r3, r9
 800fa5a:	4442      	add	r2, r8
 800fa5c:	4631      	mov	r1, r6
 800fa5e:	4628      	mov	r0, r5
 800fa60:	47b8      	blx	r7
 800fa62:	3001      	adds	r0, #1
 800fa64:	d1c1      	bne.n	800f9ea <_printf_float+0x342>
 800fa66:	e680      	b.n	800f76a <_printf_float+0xc2>
 800fa68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa6a:	2a01      	cmp	r2, #1
 800fa6c:	dc01      	bgt.n	800fa72 <_printf_float+0x3ca>
 800fa6e:	07db      	lsls	r3, r3, #31
 800fa70:	d538      	bpl.n	800fae4 <_printf_float+0x43c>
 800fa72:	2301      	movs	r3, #1
 800fa74:	4642      	mov	r2, r8
 800fa76:	4631      	mov	r1, r6
 800fa78:	4628      	mov	r0, r5
 800fa7a:	47b8      	blx	r7
 800fa7c:	3001      	adds	r0, #1
 800fa7e:	f43f ae74 	beq.w	800f76a <_printf_float+0xc2>
 800fa82:	ee18 3a10 	vmov	r3, s16
 800fa86:	4652      	mov	r2, sl
 800fa88:	4631      	mov	r1, r6
 800fa8a:	4628      	mov	r0, r5
 800fa8c:	47b8      	blx	r7
 800fa8e:	3001      	adds	r0, #1
 800fa90:	f43f ae6b 	beq.w	800f76a <_printf_float+0xc2>
 800fa94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800fa98:	2200      	movs	r2, #0
 800fa9a:	2300      	movs	r3, #0
 800fa9c:	f7f1 f814 	bl	8000ac8 <__aeabi_dcmpeq>
 800faa0:	b9d8      	cbnz	r0, 800fada <_printf_float+0x432>
 800faa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800faa4:	f108 0201 	add.w	r2, r8, #1
 800faa8:	3b01      	subs	r3, #1
 800faaa:	4631      	mov	r1, r6
 800faac:	4628      	mov	r0, r5
 800faae:	47b8      	blx	r7
 800fab0:	3001      	adds	r0, #1
 800fab2:	d10e      	bne.n	800fad2 <_printf_float+0x42a>
 800fab4:	e659      	b.n	800f76a <_printf_float+0xc2>
 800fab6:	2301      	movs	r3, #1
 800fab8:	4652      	mov	r2, sl
 800faba:	4631      	mov	r1, r6
 800fabc:	4628      	mov	r0, r5
 800fabe:	47b8      	blx	r7
 800fac0:	3001      	adds	r0, #1
 800fac2:	f43f ae52 	beq.w	800f76a <_printf_float+0xc2>
 800fac6:	f108 0801 	add.w	r8, r8, #1
 800faca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800facc:	3b01      	subs	r3, #1
 800face:	4543      	cmp	r3, r8
 800fad0:	dcf1      	bgt.n	800fab6 <_printf_float+0x40e>
 800fad2:	464b      	mov	r3, r9
 800fad4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800fad8:	e6dc      	b.n	800f894 <_printf_float+0x1ec>
 800fada:	f04f 0800 	mov.w	r8, #0
 800fade:	f104 0a1a 	add.w	sl, r4, #26
 800fae2:	e7f2      	b.n	800faca <_printf_float+0x422>
 800fae4:	2301      	movs	r3, #1
 800fae6:	4642      	mov	r2, r8
 800fae8:	e7df      	b.n	800faaa <_printf_float+0x402>
 800faea:	2301      	movs	r3, #1
 800faec:	464a      	mov	r2, r9
 800faee:	4631      	mov	r1, r6
 800faf0:	4628      	mov	r0, r5
 800faf2:	47b8      	blx	r7
 800faf4:	3001      	adds	r0, #1
 800faf6:	f43f ae38 	beq.w	800f76a <_printf_float+0xc2>
 800fafa:	f108 0801 	add.w	r8, r8, #1
 800fafe:	68e3      	ldr	r3, [r4, #12]
 800fb00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800fb02:	1a5b      	subs	r3, r3, r1
 800fb04:	4543      	cmp	r3, r8
 800fb06:	dcf0      	bgt.n	800faea <_printf_float+0x442>
 800fb08:	e6fa      	b.n	800f900 <_printf_float+0x258>
 800fb0a:	f04f 0800 	mov.w	r8, #0
 800fb0e:	f104 0919 	add.w	r9, r4, #25
 800fb12:	e7f4      	b.n	800fafe <_printf_float+0x456>

0800fb14 <_printf_common>:
 800fb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb18:	4616      	mov	r6, r2
 800fb1a:	4699      	mov	r9, r3
 800fb1c:	688a      	ldr	r2, [r1, #8]
 800fb1e:	690b      	ldr	r3, [r1, #16]
 800fb20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800fb24:	4293      	cmp	r3, r2
 800fb26:	bfb8      	it	lt
 800fb28:	4613      	movlt	r3, r2
 800fb2a:	6033      	str	r3, [r6, #0]
 800fb2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800fb30:	4607      	mov	r7, r0
 800fb32:	460c      	mov	r4, r1
 800fb34:	b10a      	cbz	r2, 800fb3a <_printf_common+0x26>
 800fb36:	3301      	adds	r3, #1
 800fb38:	6033      	str	r3, [r6, #0]
 800fb3a:	6823      	ldr	r3, [r4, #0]
 800fb3c:	0699      	lsls	r1, r3, #26
 800fb3e:	bf42      	ittt	mi
 800fb40:	6833      	ldrmi	r3, [r6, #0]
 800fb42:	3302      	addmi	r3, #2
 800fb44:	6033      	strmi	r3, [r6, #0]
 800fb46:	6825      	ldr	r5, [r4, #0]
 800fb48:	f015 0506 	ands.w	r5, r5, #6
 800fb4c:	d106      	bne.n	800fb5c <_printf_common+0x48>
 800fb4e:	f104 0a19 	add.w	sl, r4, #25
 800fb52:	68e3      	ldr	r3, [r4, #12]
 800fb54:	6832      	ldr	r2, [r6, #0]
 800fb56:	1a9b      	subs	r3, r3, r2
 800fb58:	42ab      	cmp	r3, r5
 800fb5a:	dc26      	bgt.n	800fbaa <_printf_common+0x96>
 800fb5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800fb60:	1e13      	subs	r3, r2, #0
 800fb62:	6822      	ldr	r2, [r4, #0]
 800fb64:	bf18      	it	ne
 800fb66:	2301      	movne	r3, #1
 800fb68:	0692      	lsls	r2, r2, #26
 800fb6a:	d42b      	bmi.n	800fbc4 <_printf_common+0xb0>
 800fb6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800fb70:	4649      	mov	r1, r9
 800fb72:	4638      	mov	r0, r7
 800fb74:	47c0      	blx	r8
 800fb76:	3001      	adds	r0, #1
 800fb78:	d01e      	beq.n	800fbb8 <_printf_common+0xa4>
 800fb7a:	6823      	ldr	r3, [r4, #0]
 800fb7c:	68e5      	ldr	r5, [r4, #12]
 800fb7e:	6832      	ldr	r2, [r6, #0]
 800fb80:	f003 0306 	and.w	r3, r3, #6
 800fb84:	2b04      	cmp	r3, #4
 800fb86:	bf08      	it	eq
 800fb88:	1aad      	subeq	r5, r5, r2
 800fb8a:	68a3      	ldr	r3, [r4, #8]
 800fb8c:	6922      	ldr	r2, [r4, #16]
 800fb8e:	bf0c      	ite	eq
 800fb90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb94:	2500      	movne	r5, #0
 800fb96:	4293      	cmp	r3, r2
 800fb98:	bfc4      	itt	gt
 800fb9a:	1a9b      	subgt	r3, r3, r2
 800fb9c:	18ed      	addgt	r5, r5, r3
 800fb9e:	2600      	movs	r6, #0
 800fba0:	341a      	adds	r4, #26
 800fba2:	42b5      	cmp	r5, r6
 800fba4:	d11a      	bne.n	800fbdc <_printf_common+0xc8>
 800fba6:	2000      	movs	r0, #0
 800fba8:	e008      	b.n	800fbbc <_printf_common+0xa8>
 800fbaa:	2301      	movs	r3, #1
 800fbac:	4652      	mov	r2, sl
 800fbae:	4649      	mov	r1, r9
 800fbb0:	4638      	mov	r0, r7
 800fbb2:	47c0      	blx	r8
 800fbb4:	3001      	adds	r0, #1
 800fbb6:	d103      	bne.n	800fbc0 <_printf_common+0xac>
 800fbb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fbbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbc0:	3501      	adds	r5, #1
 800fbc2:	e7c6      	b.n	800fb52 <_printf_common+0x3e>
 800fbc4:	18e1      	adds	r1, r4, r3
 800fbc6:	1c5a      	adds	r2, r3, #1
 800fbc8:	2030      	movs	r0, #48	; 0x30
 800fbca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800fbce:	4422      	add	r2, r4
 800fbd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800fbd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800fbd8:	3302      	adds	r3, #2
 800fbda:	e7c7      	b.n	800fb6c <_printf_common+0x58>
 800fbdc:	2301      	movs	r3, #1
 800fbde:	4622      	mov	r2, r4
 800fbe0:	4649      	mov	r1, r9
 800fbe2:	4638      	mov	r0, r7
 800fbe4:	47c0      	blx	r8
 800fbe6:	3001      	adds	r0, #1
 800fbe8:	d0e6      	beq.n	800fbb8 <_printf_common+0xa4>
 800fbea:	3601      	adds	r6, #1
 800fbec:	e7d9      	b.n	800fba2 <_printf_common+0x8e>
	...

0800fbf0 <_printf_i>:
 800fbf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fbf4:	7e0f      	ldrb	r7, [r1, #24]
 800fbf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800fbf8:	2f78      	cmp	r7, #120	; 0x78
 800fbfa:	4691      	mov	r9, r2
 800fbfc:	4680      	mov	r8, r0
 800fbfe:	460c      	mov	r4, r1
 800fc00:	469a      	mov	sl, r3
 800fc02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800fc06:	d807      	bhi.n	800fc18 <_printf_i+0x28>
 800fc08:	2f62      	cmp	r7, #98	; 0x62
 800fc0a:	d80a      	bhi.n	800fc22 <_printf_i+0x32>
 800fc0c:	2f00      	cmp	r7, #0
 800fc0e:	f000 80d8 	beq.w	800fdc2 <_printf_i+0x1d2>
 800fc12:	2f58      	cmp	r7, #88	; 0x58
 800fc14:	f000 80a3 	beq.w	800fd5e <_printf_i+0x16e>
 800fc18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800fc20:	e03a      	b.n	800fc98 <_printf_i+0xa8>
 800fc22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800fc26:	2b15      	cmp	r3, #21
 800fc28:	d8f6      	bhi.n	800fc18 <_printf_i+0x28>
 800fc2a:	a101      	add	r1, pc, #4	; (adr r1, 800fc30 <_printf_i+0x40>)
 800fc2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fc30:	0800fc89 	.word	0x0800fc89
 800fc34:	0800fc9d 	.word	0x0800fc9d
 800fc38:	0800fc19 	.word	0x0800fc19
 800fc3c:	0800fc19 	.word	0x0800fc19
 800fc40:	0800fc19 	.word	0x0800fc19
 800fc44:	0800fc19 	.word	0x0800fc19
 800fc48:	0800fc9d 	.word	0x0800fc9d
 800fc4c:	0800fc19 	.word	0x0800fc19
 800fc50:	0800fc19 	.word	0x0800fc19
 800fc54:	0800fc19 	.word	0x0800fc19
 800fc58:	0800fc19 	.word	0x0800fc19
 800fc5c:	0800fda9 	.word	0x0800fda9
 800fc60:	0800fccd 	.word	0x0800fccd
 800fc64:	0800fd8b 	.word	0x0800fd8b
 800fc68:	0800fc19 	.word	0x0800fc19
 800fc6c:	0800fc19 	.word	0x0800fc19
 800fc70:	0800fdcb 	.word	0x0800fdcb
 800fc74:	0800fc19 	.word	0x0800fc19
 800fc78:	0800fccd 	.word	0x0800fccd
 800fc7c:	0800fc19 	.word	0x0800fc19
 800fc80:	0800fc19 	.word	0x0800fc19
 800fc84:	0800fd93 	.word	0x0800fd93
 800fc88:	682b      	ldr	r3, [r5, #0]
 800fc8a:	1d1a      	adds	r2, r3, #4
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	602a      	str	r2, [r5, #0]
 800fc90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800fc94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800fc98:	2301      	movs	r3, #1
 800fc9a:	e0a3      	b.n	800fde4 <_printf_i+0x1f4>
 800fc9c:	6820      	ldr	r0, [r4, #0]
 800fc9e:	6829      	ldr	r1, [r5, #0]
 800fca0:	0606      	lsls	r6, r0, #24
 800fca2:	f101 0304 	add.w	r3, r1, #4
 800fca6:	d50a      	bpl.n	800fcbe <_printf_i+0xce>
 800fca8:	680e      	ldr	r6, [r1, #0]
 800fcaa:	602b      	str	r3, [r5, #0]
 800fcac:	2e00      	cmp	r6, #0
 800fcae:	da03      	bge.n	800fcb8 <_printf_i+0xc8>
 800fcb0:	232d      	movs	r3, #45	; 0x2d
 800fcb2:	4276      	negs	r6, r6
 800fcb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fcb8:	485e      	ldr	r0, [pc, #376]	; (800fe34 <_printf_i+0x244>)
 800fcba:	230a      	movs	r3, #10
 800fcbc:	e019      	b.n	800fcf2 <_printf_i+0x102>
 800fcbe:	680e      	ldr	r6, [r1, #0]
 800fcc0:	602b      	str	r3, [r5, #0]
 800fcc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800fcc6:	bf18      	it	ne
 800fcc8:	b236      	sxthne	r6, r6
 800fcca:	e7ef      	b.n	800fcac <_printf_i+0xbc>
 800fccc:	682b      	ldr	r3, [r5, #0]
 800fcce:	6820      	ldr	r0, [r4, #0]
 800fcd0:	1d19      	adds	r1, r3, #4
 800fcd2:	6029      	str	r1, [r5, #0]
 800fcd4:	0601      	lsls	r1, r0, #24
 800fcd6:	d501      	bpl.n	800fcdc <_printf_i+0xec>
 800fcd8:	681e      	ldr	r6, [r3, #0]
 800fcda:	e002      	b.n	800fce2 <_printf_i+0xf2>
 800fcdc:	0646      	lsls	r6, r0, #25
 800fcde:	d5fb      	bpl.n	800fcd8 <_printf_i+0xe8>
 800fce0:	881e      	ldrh	r6, [r3, #0]
 800fce2:	4854      	ldr	r0, [pc, #336]	; (800fe34 <_printf_i+0x244>)
 800fce4:	2f6f      	cmp	r7, #111	; 0x6f
 800fce6:	bf0c      	ite	eq
 800fce8:	2308      	moveq	r3, #8
 800fcea:	230a      	movne	r3, #10
 800fcec:	2100      	movs	r1, #0
 800fcee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800fcf2:	6865      	ldr	r5, [r4, #4]
 800fcf4:	60a5      	str	r5, [r4, #8]
 800fcf6:	2d00      	cmp	r5, #0
 800fcf8:	bfa2      	ittt	ge
 800fcfa:	6821      	ldrge	r1, [r4, #0]
 800fcfc:	f021 0104 	bicge.w	r1, r1, #4
 800fd00:	6021      	strge	r1, [r4, #0]
 800fd02:	b90e      	cbnz	r6, 800fd08 <_printf_i+0x118>
 800fd04:	2d00      	cmp	r5, #0
 800fd06:	d04d      	beq.n	800fda4 <_printf_i+0x1b4>
 800fd08:	4615      	mov	r5, r2
 800fd0a:	fbb6 f1f3 	udiv	r1, r6, r3
 800fd0e:	fb03 6711 	mls	r7, r3, r1, r6
 800fd12:	5dc7      	ldrb	r7, [r0, r7]
 800fd14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800fd18:	4637      	mov	r7, r6
 800fd1a:	42bb      	cmp	r3, r7
 800fd1c:	460e      	mov	r6, r1
 800fd1e:	d9f4      	bls.n	800fd0a <_printf_i+0x11a>
 800fd20:	2b08      	cmp	r3, #8
 800fd22:	d10b      	bne.n	800fd3c <_printf_i+0x14c>
 800fd24:	6823      	ldr	r3, [r4, #0]
 800fd26:	07de      	lsls	r6, r3, #31
 800fd28:	d508      	bpl.n	800fd3c <_printf_i+0x14c>
 800fd2a:	6923      	ldr	r3, [r4, #16]
 800fd2c:	6861      	ldr	r1, [r4, #4]
 800fd2e:	4299      	cmp	r1, r3
 800fd30:	bfde      	ittt	le
 800fd32:	2330      	movle	r3, #48	; 0x30
 800fd34:	f805 3c01 	strble.w	r3, [r5, #-1]
 800fd38:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800fd3c:	1b52      	subs	r2, r2, r5
 800fd3e:	6122      	str	r2, [r4, #16]
 800fd40:	f8cd a000 	str.w	sl, [sp]
 800fd44:	464b      	mov	r3, r9
 800fd46:	aa03      	add	r2, sp, #12
 800fd48:	4621      	mov	r1, r4
 800fd4a:	4640      	mov	r0, r8
 800fd4c:	f7ff fee2 	bl	800fb14 <_printf_common>
 800fd50:	3001      	adds	r0, #1
 800fd52:	d14c      	bne.n	800fdee <_printf_i+0x1fe>
 800fd54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fd58:	b004      	add	sp, #16
 800fd5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd5e:	4835      	ldr	r0, [pc, #212]	; (800fe34 <_printf_i+0x244>)
 800fd60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800fd64:	6829      	ldr	r1, [r5, #0]
 800fd66:	6823      	ldr	r3, [r4, #0]
 800fd68:	f851 6b04 	ldr.w	r6, [r1], #4
 800fd6c:	6029      	str	r1, [r5, #0]
 800fd6e:	061d      	lsls	r5, r3, #24
 800fd70:	d514      	bpl.n	800fd9c <_printf_i+0x1ac>
 800fd72:	07df      	lsls	r7, r3, #31
 800fd74:	bf44      	itt	mi
 800fd76:	f043 0320 	orrmi.w	r3, r3, #32
 800fd7a:	6023      	strmi	r3, [r4, #0]
 800fd7c:	b91e      	cbnz	r6, 800fd86 <_printf_i+0x196>
 800fd7e:	6823      	ldr	r3, [r4, #0]
 800fd80:	f023 0320 	bic.w	r3, r3, #32
 800fd84:	6023      	str	r3, [r4, #0]
 800fd86:	2310      	movs	r3, #16
 800fd88:	e7b0      	b.n	800fcec <_printf_i+0xfc>
 800fd8a:	6823      	ldr	r3, [r4, #0]
 800fd8c:	f043 0320 	orr.w	r3, r3, #32
 800fd90:	6023      	str	r3, [r4, #0]
 800fd92:	2378      	movs	r3, #120	; 0x78
 800fd94:	4828      	ldr	r0, [pc, #160]	; (800fe38 <_printf_i+0x248>)
 800fd96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800fd9a:	e7e3      	b.n	800fd64 <_printf_i+0x174>
 800fd9c:	0659      	lsls	r1, r3, #25
 800fd9e:	bf48      	it	mi
 800fda0:	b2b6      	uxthmi	r6, r6
 800fda2:	e7e6      	b.n	800fd72 <_printf_i+0x182>
 800fda4:	4615      	mov	r5, r2
 800fda6:	e7bb      	b.n	800fd20 <_printf_i+0x130>
 800fda8:	682b      	ldr	r3, [r5, #0]
 800fdaa:	6826      	ldr	r6, [r4, #0]
 800fdac:	6961      	ldr	r1, [r4, #20]
 800fdae:	1d18      	adds	r0, r3, #4
 800fdb0:	6028      	str	r0, [r5, #0]
 800fdb2:	0635      	lsls	r5, r6, #24
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	d501      	bpl.n	800fdbc <_printf_i+0x1cc>
 800fdb8:	6019      	str	r1, [r3, #0]
 800fdba:	e002      	b.n	800fdc2 <_printf_i+0x1d2>
 800fdbc:	0670      	lsls	r0, r6, #25
 800fdbe:	d5fb      	bpl.n	800fdb8 <_printf_i+0x1c8>
 800fdc0:	8019      	strh	r1, [r3, #0]
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	6123      	str	r3, [r4, #16]
 800fdc6:	4615      	mov	r5, r2
 800fdc8:	e7ba      	b.n	800fd40 <_printf_i+0x150>
 800fdca:	682b      	ldr	r3, [r5, #0]
 800fdcc:	1d1a      	adds	r2, r3, #4
 800fdce:	602a      	str	r2, [r5, #0]
 800fdd0:	681d      	ldr	r5, [r3, #0]
 800fdd2:	6862      	ldr	r2, [r4, #4]
 800fdd4:	2100      	movs	r1, #0
 800fdd6:	4628      	mov	r0, r5
 800fdd8:	f7f0 fa02 	bl	80001e0 <memchr>
 800fddc:	b108      	cbz	r0, 800fde2 <_printf_i+0x1f2>
 800fdde:	1b40      	subs	r0, r0, r5
 800fde0:	6060      	str	r0, [r4, #4]
 800fde2:	6863      	ldr	r3, [r4, #4]
 800fde4:	6123      	str	r3, [r4, #16]
 800fde6:	2300      	movs	r3, #0
 800fde8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800fdec:	e7a8      	b.n	800fd40 <_printf_i+0x150>
 800fdee:	6923      	ldr	r3, [r4, #16]
 800fdf0:	462a      	mov	r2, r5
 800fdf2:	4649      	mov	r1, r9
 800fdf4:	4640      	mov	r0, r8
 800fdf6:	47d0      	blx	sl
 800fdf8:	3001      	adds	r0, #1
 800fdfa:	d0ab      	beq.n	800fd54 <_printf_i+0x164>
 800fdfc:	6823      	ldr	r3, [r4, #0]
 800fdfe:	079b      	lsls	r3, r3, #30
 800fe00:	d413      	bmi.n	800fe2a <_printf_i+0x23a>
 800fe02:	68e0      	ldr	r0, [r4, #12]
 800fe04:	9b03      	ldr	r3, [sp, #12]
 800fe06:	4298      	cmp	r0, r3
 800fe08:	bfb8      	it	lt
 800fe0a:	4618      	movlt	r0, r3
 800fe0c:	e7a4      	b.n	800fd58 <_printf_i+0x168>
 800fe0e:	2301      	movs	r3, #1
 800fe10:	4632      	mov	r2, r6
 800fe12:	4649      	mov	r1, r9
 800fe14:	4640      	mov	r0, r8
 800fe16:	47d0      	blx	sl
 800fe18:	3001      	adds	r0, #1
 800fe1a:	d09b      	beq.n	800fd54 <_printf_i+0x164>
 800fe1c:	3501      	adds	r5, #1
 800fe1e:	68e3      	ldr	r3, [r4, #12]
 800fe20:	9903      	ldr	r1, [sp, #12]
 800fe22:	1a5b      	subs	r3, r3, r1
 800fe24:	42ab      	cmp	r3, r5
 800fe26:	dcf2      	bgt.n	800fe0e <_printf_i+0x21e>
 800fe28:	e7eb      	b.n	800fe02 <_printf_i+0x212>
 800fe2a:	2500      	movs	r5, #0
 800fe2c:	f104 0619 	add.w	r6, r4, #25
 800fe30:	e7f5      	b.n	800fe1e <_printf_i+0x22e>
 800fe32:	bf00      	nop
 800fe34:	08012086 	.word	0x08012086
 800fe38:	08012097 	.word	0x08012097

0800fe3c <cleanup_glue>:
 800fe3c:	b538      	push	{r3, r4, r5, lr}
 800fe3e:	460c      	mov	r4, r1
 800fe40:	6809      	ldr	r1, [r1, #0]
 800fe42:	4605      	mov	r5, r0
 800fe44:	b109      	cbz	r1, 800fe4a <cleanup_glue+0xe>
 800fe46:	f7ff fff9 	bl	800fe3c <cleanup_glue>
 800fe4a:	4621      	mov	r1, r4
 800fe4c:	4628      	mov	r0, r5
 800fe4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe52:	f7ff baa9 	b.w	800f3a8 <_free_r>
	...

0800fe58 <_reclaim_reent>:
 800fe58:	4b2c      	ldr	r3, [pc, #176]	; (800ff0c <_reclaim_reent+0xb4>)
 800fe5a:	681b      	ldr	r3, [r3, #0]
 800fe5c:	4283      	cmp	r3, r0
 800fe5e:	b570      	push	{r4, r5, r6, lr}
 800fe60:	4604      	mov	r4, r0
 800fe62:	d051      	beq.n	800ff08 <_reclaim_reent+0xb0>
 800fe64:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800fe66:	b143      	cbz	r3, 800fe7a <_reclaim_reent+0x22>
 800fe68:	68db      	ldr	r3, [r3, #12]
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d14a      	bne.n	800ff04 <_reclaim_reent+0xac>
 800fe6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fe70:	6819      	ldr	r1, [r3, #0]
 800fe72:	b111      	cbz	r1, 800fe7a <_reclaim_reent+0x22>
 800fe74:	4620      	mov	r0, r4
 800fe76:	f7ff fa97 	bl	800f3a8 <_free_r>
 800fe7a:	6961      	ldr	r1, [r4, #20]
 800fe7c:	b111      	cbz	r1, 800fe84 <_reclaim_reent+0x2c>
 800fe7e:	4620      	mov	r0, r4
 800fe80:	f7ff fa92 	bl	800f3a8 <_free_r>
 800fe84:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800fe86:	b111      	cbz	r1, 800fe8e <_reclaim_reent+0x36>
 800fe88:	4620      	mov	r0, r4
 800fe8a:	f7ff fa8d 	bl	800f3a8 <_free_r>
 800fe8e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fe90:	b111      	cbz	r1, 800fe98 <_reclaim_reent+0x40>
 800fe92:	4620      	mov	r0, r4
 800fe94:	f7ff fa88 	bl	800f3a8 <_free_r>
 800fe98:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800fe9a:	b111      	cbz	r1, 800fea2 <_reclaim_reent+0x4a>
 800fe9c:	4620      	mov	r0, r4
 800fe9e:	f7ff fa83 	bl	800f3a8 <_free_r>
 800fea2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800fea4:	b111      	cbz	r1, 800feac <_reclaim_reent+0x54>
 800fea6:	4620      	mov	r0, r4
 800fea8:	f7ff fa7e 	bl	800f3a8 <_free_r>
 800feac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800feae:	b111      	cbz	r1, 800feb6 <_reclaim_reent+0x5e>
 800feb0:	4620      	mov	r0, r4
 800feb2:	f7ff fa79 	bl	800f3a8 <_free_r>
 800feb6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800feb8:	b111      	cbz	r1, 800fec0 <_reclaim_reent+0x68>
 800feba:	4620      	mov	r0, r4
 800febc:	f7ff fa74 	bl	800f3a8 <_free_r>
 800fec0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fec2:	b111      	cbz	r1, 800feca <_reclaim_reent+0x72>
 800fec4:	4620      	mov	r0, r4
 800fec6:	f7ff fa6f 	bl	800f3a8 <_free_r>
 800feca:	69a3      	ldr	r3, [r4, #24]
 800fecc:	b1e3      	cbz	r3, 800ff08 <_reclaim_reent+0xb0>
 800fece:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fed0:	4620      	mov	r0, r4
 800fed2:	4798      	blx	r3
 800fed4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800fed6:	b1b9      	cbz	r1, 800ff08 <_reclaim_reent+0xb0>
 800fed8:	4620      	mov	r0, r4
 800feda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fede:	f7ff bfad 	b.w	800fe3c <cleanup_glue>
 800fee2:	5949      	ldr	r1, [r1, r5]
 800fee4:	b941      	cbnz	r1, 800fef8 <_reclaim_reent+0xa0>
 800fee6:	3504      	adds	r5, #4
 800fee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800feea:	2d80      	cmp	r5, #128	; 0x80
 800feec:	68d9      	ldr	r1, [r3, #12]
 800feee:	d1f8      	bne.n	800fee2 <_reclaim_reent+0x8a>
 800fef0:	4620      	mov	r0, r4
 800fef2:	f7ff fa59 	bl	800f3a8 <_free_r>
 800fef6:	e7ba      	b.n	800fe6e <_reclaim_reent+0x16>
 800fef8:	680e      	ldr	r6, [r1, #0]
 800fefa:	4620      	mov	r0, r4
 800fefc:	f7ff fa54 	bl	800f3a8 <_free_r>
 800ff00:	4631      	mov	r1, r6
 800ff02:	e7ef      	b.n	800fee4 <_reclaim_reent+0x8c>
 800ff04:	2500      	movs	r5, #0
 800ff06:	e7ef      	b.n	800fee8 <_reclaim_reent+0x90>
 800ff08:	bd70      	pop	{r4, r5, r6, pc}
 800ff0a:	bf00      	nop
 800ff0c:	20000010 	.word	0x20000010

0800ff10 <_sbrk_r>:
 800ff10:	b538      	push	{r3, r4, r5, lr}
 800ff12:	4d06      	ldr	r5, [pc, #24]	; (800ff2c <_sbrk_r+0x1c>)
 800ff14:	2300      	movs	r3, #0
 800ff16:	4604      	mov	r4, r0
 800ff18:	4608      	mov	r0, r1
 800ff1a:	602b      	str	r3, [r5, #0]
 800ff1c:	f7f4 ff2e 	bl	8004d7c <_sbrk>
 800ff20:	1c43      	adds	r3, r0, #1
 800ff22:	d102      	bne.n	800ff2a <_sbrk_r+0x1a>
 800ff24:	682b      	ldr	r3, [r5, #0]
 800ff26:	b103      	cbz	r3, 800ff2a <_sbrk_r+0x1a>
 800ff28:	6023      	str	r3, [r4, #0]
 800ff2a:	bd38      	pop	{r3, r4, r5, pc}
 800ff2c:	2000a3f0 	.word	0x2000a3f0

0800ff30 <_raise_r>:
 800ff30:	291f      	cmp	r1, #31
 800ff32:	b538      	push	{r3, r4, r5, lr}
 800ff34:	4604      	mov	r4, r0
 800ff36:	460d      	mov	r5, r1
 800ff38:	d904      	bls.n	800ff44 <_raise_r+0x14>
 800ff3a:	2316      	movs	r3, #22
 800ff3c:	6003      	str	r3, [r0, #0]
 800ff3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff42:	bd38      	pop	{r3, r4, r5, pc}
 800ff44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ff46:	b112      	cbz	r2, 800ff4e <_raise_r+0x1e>
 800ff48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ff4c:	b94b      	cbnz	r3, 800ff62 <_raise_r+0x32>
 800ff4e:	4620      	mov	r0, r4
 800ff50:	f000 f830 	bl	800ffb4 <_getpid_r>
 800ff54:	462a      	mov	r2, r5
 800ff56:	4601      	mov	r1, r0
 800ff58:	4620      	mov	r0, r4
 800ff5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ff5e:	f000 b817 	b.w	800ff90 <_kill_r>
 800ff62:	2b01      	cmp	r3, #1
 800ff64:	d00a      	beq.n	800ff7c <_raise_r+0x4c>
 800ff66:	1c59      	adds	r1, r3, #1
 800ff68:	d103      	bne.n	800ff72 <_raise_r+0x42>
 800ff6a:	2316      	movs	r3, #22
 800ff6c:	6003      	str	r3, [r0, #0]
 800ff6e:	2001      	movs	r0, #1
 800ff70:	e7e7      	b.n	800ff42 <_raise_r+0x12>
 800ff72:	2400      	movs	r4, #0
 800ff74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ff78:	4628      	mov	r0, r5
 800ff7a:	4798      	blx	r3
 800ff7c:	2000      	movs	r0, #0
 800ff7e:	e7e0      	b.n	800ff42 <_raise_r+0x12>

0800ff80 <raise>:
 800ff80:	4b02      	ldr	r3, [pc, #8]	; (800ff8c <raise+0xc>)
 800ff82:	4601      	mov	r1, r0
 800ff84:	6818      	ldr	r0, [r3, #0]
 800ff86:	f7ff bfd3 	b.w	800ff30 <_raise_r>
 800ff8a:	bf00      	nop
 800ff8c:	20000010 	.word	0x20000010

0800ff90 <_kill_r>:
 800ff90:	b538      	push	{r3, r4, r5, lr}
 800ff92:	4d07      	ldr	r5, [pc, #28]	; (800ffb0 <_kill_r+0x20>)
 800ff94:	2300      	movs	r3, #0
 800ff96:	4604      	mov	r4, r0
 800ff98:	4608      	mov	r0, r1
 800ff9a:	4611      	mov	r1, r2
 800ff9c:	602b      	str	r3, [r5, #0]
 800ff9e:	f7f4 fe65 	bl	8004c6c <_kill>
 800ffa2:	1c43      	adds	r3, r0, #1
 800ffa4:	d102      	bne.n	800ffac <_kill_r+0x1c>
 800ffa6:	682b      	ldr	r3, [r5, #0]
 800ffa8:	b103      	cbz	r3, 800ffac <_kill_r+0x1c>
 800ffaa:	6023      	str	r3, [r4, #0]
 800ffac:	bd38      	pop	{r3, r4, r5, pc}
 800ffae:	bf00      	nop
 800ffb0:	2000a3f0 	.word	0x2000a3f0

0800ffb4 <_getpid_r>:
 800ffb4:	f7f4 be52 	b.w	8004c5c <_getpid>

0800ffb8 <__sread>:
 800ffb8:	b510      	push	{r4, lr}
 800ffba:	460c      	mov	r4, r1
 800ffbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffc0:	f001 fbba 	bl	8011738 <_read_r>
 800ffc4:	2800      	cmp	r0, #0
 800ffc6:	bfab      	itete	ge
 800ffc8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ffca:	89a3      	ldrhlt	r3, [r4, #12]
 800ffcc:	181b      	addge	r3, r3, r0
 800ffce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ffd2:	bfac      	ite	ge
 800ffd4:	6563      	strge	r3, [r4, #84]	; 0x54
 800ffd6:	81a3      	strhlt	r3, [r4, #12]
 800ffd8:	bd10      	pop	{r4, pc}

0800ffda <__swrite>:
 800ffda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffde:	461f      	mov	r7, r3
 800ffe0:	898b      	ldrh	r3, [r1, #12]
 800ffe2:	05db      	lsls	r3, r3, #23
 800ffe4:	4605      	mov	r5, r0
 800ffe6:	460c      	mov	r4, r1
 800ffe8:	4616      	mov	r6, r2
 800ffea:	d505      	bpl.n	800fff8 <__swrite+0x1e>
 800ffec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fff0:	2302      	movs	r3, #2
 800fff2:	2200      	movs	r2, #0
 800fff4:	f000 ffe8 	bl	8010fc8 <_lseek_r>
 800fff8:	89a3      	ldrh	r3, [r4, #12]
 800fffa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fffe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010002:	81a3      	strh	r3, [r4, #12]
 8010004:	4632      	mov	r2, r6
 8010006:	463b      	mov	r3, r7
 8010008:	4628      	mov	r0, r5
 801000a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801000e:	f000 b817 	b.w	8010040 <_write_r>

08010012 <__sseek>:
 8010012:	b510      	push	{r4, lr}
 8010014:	460c      	mov	r4, r1
 8010016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801001a:	f000 ffd5 	bl	8010fc8 <_lseek_r>
 801001e:	1c43      	adds	r3, r0, #1
 8010020:	89a3      	ldrh	r3, [r4, #12]
 8010022:	bf15      	itete	ne
 8010024:	6560      	strne	r0, [r4, #84]	; 0x54
 8010026:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801002a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801002e:	81a3      	strheq	r3, [r4, #12]
 8010030:	bf18      	it	ne
 8010032:	81a3      	strhne	r3, [r4, #12]
 8010034:	bd10      	pop	{r4, pc}

08010036 <__sclose>:
 8010036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801003a:	f000 b875 	b.w	8010128 <_close_r>
	...

08010040 <_write_r>:
 8010040:	b538      	push	{r3, r4, r5, lr}
 8010042:	4d07      	ldr	r5, [pc, #28]	; (8010060 <_write_r+0x20>)
 8010044:	4604      	mov	r4, r0
 8010046:	4608      	mov	r0, r1
 8010048:	4611      	mov	r1, r2
 801004a:	2200      	movs	r2, #0
 801004c:	602a      	str	r2, [r5, #0]
 801004e:	461a      	mov	r2, r3
 8010050:	f7f4 fe43 	bl	8004cda <_write>
 8010054:	1c43      	adds	r3, r0, #1
 8010056:	d102      	bne.n	801005e <_write_r+0x1e>
 8010058:	682b      	ldr	r3, [r5, #0]
 801005a:	b103      	cbz	r3, 801005e <_write_r+0x1e>
 801005c:	6023      	str	r3, [r4, #0]
 801005e:	bd38      	pop	{r3, r4, r5, pc}
 8010060:	2000a3f0 	.word	0x2000a3f0

08010064 <__register_exitproc>:
 8010064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010068:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8010124 <__register_exitproc+0xc0>
 801006c:	4606      	mov	r6, r0
 801006e:	f8d8 0000 	ldr.w	r0, [r8]
 8010072:	461f      	mov	r7, r3
 8010074:	460d      	mov	r5, r1
 8010076:	4691      	mov	r9, r2
 8010078:	f7ff f96d 	bl	800f356 <__retarget_lock_acquire_recursive>
 801007c:	4b25      	ldr	r3, [pc, #148]	; (8010114 <__register_exitproc+0xb0>)
 801007e:	681c      	ldr	r4, [r3, #0]
 8010080:	b934      	cbnz	r4, 8010090 <__register_exitproc+0x2c>
 8010082:	4c25      	ldr	r4, [pc, #148]	; (8010118 <__register_exitproc+0xb4>)
 8010084:	601c      	str	r4, [r3, #0]
 8010086:	4b25      	ldr	r3, [pc, #148]	; (801011c <__register_exitproc+0xb8>)
 8010088:	b113      	cbz	r3, 8010090 <__register_exitproc+0x2c>
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8010090:	6863      	ldr	r3, [r4, #4]
 8010092:	2b1f      	cmp	r3, #31
 8010094:	dd07      	ble.n	80100a6 <__register_exitproc+0x42>
 8010096:	f8d8 0000 	ldr.w	r0, [r8]
 801009a:	f7ff f95e 	bl	800f35a <__retarget_lock_release_recursive>
 801009e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80100a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100a6:	b34e      	cbz	r6, 80100fc <__register_exitproc+0x98>
 80100a8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80100ac:	b988      	cbnz	r0, 80100d2 <__register_exitproc+0x6e>
 80100ae:	4b1c      	ldr	r3, [pc, #112]	; (8010120 <__register_exitproc+0xbc>)
 80100b0:	b923      	cbnz	r3, 80100bc <__register_exitproc+0x58>
 80100b2:	f8d8 0000 	ldr.w	r0, [r8]
 80100b6:	f7ff f94f 	bl	800f358 <__retarget_lock_release>
 80100ba:	e7f0      	b.n	801009e <__register_exitproc+0x3a>
 80100bc:	f44f 7084 	mov.w	r0, #264	; 0x108
 80100c0:	f7ff f94c 	bl	800f35c <malloc>
 80100c4:	2800      	cmp	r0, #0
 80100c6:	d0f4      	beq.n	80100b2 <__register_exitproc+0x4e>
 80100c8:	2300      	movs	r3, #0
 80100ca:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80100ce:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80100d2:	6863      	ldr	r3, [r4, #4]
 80100d4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80100d8:	2201      	movs	r2, #1
 80100da:	409a      	lsls	r2, r3
 80100dc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80100e0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80100e4:	4313      	orrs	r3, r2
 80100e6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80100ea:	2e02      	cmp	r6, #2
 80100ec:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80100f0:	bf02      	ittt	eq
 80100f2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80100f6:	4313      	orreq	r3, r2
 80100f8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 80100fc:	6863      	ldr	r3, [r4, #4]
 80100fe:	f8d8 0000 	ldr.w	r0, [r8]
 8010102:	1c5a      	adds	r2, r3, #1
 8010104:	3302      	adds	r3, #2
 8010106:	6062      	str	r2, [r4, #4]
 8010108:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801010c:	f7ff f925 	bl	800f35a <__retarget_lock_release_recursive>
 8010110:	2000      	movs	r0, #0
 8010112:	e7c6      	b.n	80100a2 <__register_exitproc+0x3e>
 8010114:	2000a480 	.word	0x2000a480
 8010118:	2000a3f4 	.word	0x2000a3f4
 801011c:	00000000 	.word	0x00000000
 8010120:	0800f35d 	.word	0x0800f35d
 8010124:	20000074 	.word	0x20000074

08010128 <_close_r>:
 8010128:	b538      	push	{r3, r4, r5, lr}
 801012a:	4d06      	ldr	r5, [pc, #24]	; (8010144 <_close_r+0x1c>)
 801012c:	2300      	movs	r3, #0
 801012e:	4604      	mov	r4, r0
 8010130:	4608      	mov	r0, r1
 8010132:	602b      	str	r3, [r5, #0]
 8010134:	f7f4 fded 	bl	8004d12 <_close>
 8010138:	1c43      	adds	r3, r0, #1
 801013a:	d102      	bne.n	8010142 <_close_r+0x1a>
 801013c:	682b      	ldr	r3, [r5, #0]
 801013e:	b103      	cbz	r3, 8010142 <_close_r+0x1a>
 8010140:	6023      	str	r3, [r4, #0]
 8010142:	bd38      	pop	{r3, r4, r5, pc}
 8010144:	2000a3f0 	.word	0x2000a3f0

08010148 <quorem>:
 8010148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801014c:	6903      	ldr	r3, [r0, #16]
 801014e:	690c      	ldr	r4, [r1, #16]
 8010150:	42a3      	cmp	r3, r4
 8010152:	4607      	mov	r7, r0
 8010154:	f2c0 8081 	blt.w	801025a <quorem+0x112>
 8010158:	3c01      	subs	r4, #1
 801015a:	f101 0814 	add.w	r8, r1, #20
 801015e:	f100 0514 	add.w	r5, r0, #20
 8010162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8010166:	9301      	str	r3, [sp, #4]
 8010168:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801016c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010170:	3301      	adds	r3, #1
 8010172:	429a      	cmp	r2, r3
 8010174:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8010178:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801017c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010180:	d331      	bcc.n	80101e6 <quorem+0x9e>
 8010182:	f04f 0e00 	mov.w	lr, #0
 8010186:	4640      	mov	r0, r8
 8010188:	46ac      	mov	ip, r5
 801018a:	46f2      	mov	sl, lr
 801018c:	f850 2b04 	ldr.w	r2, [r0], #4
 8010190:	b293      	uxth	r3, r2
 8010192:	fb06 e303 	mla	r3, r6, r3, lr
 8010196:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801019a:	b29b      	uxth	r3, r3
 801019c:	ebaa 0303 	sub.w	r3, sl, r3
 80101a0:	f8dc a000 	ldr.w	sl, [ip]
 80101a4:	0c12      	lsrs	r2, r2, #16
 80101a6:	fa13 f38a 	uxtah	r3, r3, sl
 80101aa:	fb06 e202 	mla	r2, r6, r2, lr
 80101ae:	9300      	str	r3, [sp, #0]
 80101b0:	9b00      	ldr	r3, [sp, #0]
 80101b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80101b6:	b292      	uxth	r2, r2
 80101b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80101bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80101c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80101c4:	4581      	cmp	r9, r0
 80101c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80101ca:	f84c 3b04 	str.w	r3, [ip], #4
 80101ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80101d2:	d2db      	bcs.n	801018c <quorem+0x44>
 80101d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80101d8:	b92b      	cbnz	r3, 80101e6 <quorem+0x9e>
 80101da:	9b01      	ldr	r3, [sp, #4]
 80101dc:	3b04      	subs	r3, #4
 80101de:	429d      	cmp	r5, r3
 80101e0:	461a      	mov	r2, r3
 80101e2:	d32e      	bcc.n	8010242 <quorem+0xfa>
 80101e4:	613c      	str	r4, [r7, #16]
 80101e6:	4638      	mov	r0, r7
 80101e8:	f001 f98e 	bl	8011508 <__mcmp>
 80101ec:	2800      	cmp	r0, #0
 80101ee:	db24      	blt.n	801023a <quorem+0xf2>
 80101f0:	3601      	adds	r6, #1
 80101f2:	4628      	mov	r0, r5
 80101f4:	f04f 0c00 	mov.w	ip, #0
 80101f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80101fc:	f8d0 e000 	ldr.w	lr, [r0]
 8010200:	b293      	uxth	r3, r2
 8010202:	ebac 0303 	sub.w	r3, ip, r3
 8010206:	0c12      	lsrs	r2, r2, #16
 8010208:	fa13 f38e 	uxtah	r3, r3, lr
 801020c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8010210:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8010214:	b29b      	uxth	r3, r3
 8010216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801021a:	45c1      	cmp	r9, r8
 801021c:	f840 3b04 	str.w	r3, [r0], #4
 8010220:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8010224:	d2e8      	bcs.n	80101f8 <quorem+0xb0>
 8010226:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801022a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801022e:	b922      	cbnz	r2, 801023a <quorem+0xf2>
 8010230:	3b04      	subs	r3, #4
 8010232:	429d      	cmp	r5, r3
 8010234:	461a      	mov	r2, r3
 8010236:	d30a      	bcc.n	801024e <quorem+0x106>
 8010238:	613c      	str	r4, [r7, #16]
 801023a:	4630      	mov	r0, r6
 801023c:	b003      	add	sp, #12
 801023e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010242:	6812      	ldr	r2, [r2, #0]
 8010244:	3b04      	subs	r3, #4
 8010246:	2a00      	cmp	r2, #0
 8010248:	d1cc      	bne.n	80101e4 <quorem+0x9c>
 801024a:	3c01      	subs	r4, #1
 801024c:	e7c7      	b.n	80101de <quorem+0x96>
 801024e:	6812      	ldr	r2, [r2, #0]
 8010250:	3b04      	subs	r3, #4
 8010252:	2a00      	cmp	r2, #0
 8010254:	d1f0      	bne.n	8010238 <quorem+0xf0>
 8010256:	3c01      	subs	r4, #1
 8010258:	e7eb      	b.n	8010232 <quorem+0xea>
 801025a:	2000      	movs	r0, #0
 801025c:	e7ee      	b.n	801023c <quorem+0xf4>
	...

08010260 <_dtoa_r>:
 8010260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010264:	ed2d 8b04 	vpush	{d8-d9}
 8010268:	ec57 6b10 	vmov	r6, r7, d0
 801026c:	b093      	sub	sp, #76	; 0x4c
 801026e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010270:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8010274:	9106      	str	r1, [sp, #24]
 8010276:	ee10 aa10 	vmov	sl, s0
 801027a:	4604      	mov	r4, r0
 801027c:	9209      	str	r2, [sp, #36]	; 0x24
 801027e:	930c      	str	r3, [sp, #48]	; 0x30
 8010280:	46bb      	mov	fp, r7
 8010282:	b975      	cbnz	r5, 80102a2 <_dtoa_r+0x42>
 8010284:	2010      	movs	r0, #16
 8010286:	f7ff f869 	bl	800f35c <malloc>
 801028a:	4602      	mov	r2, r0
 801028c:	6260      	str	r0, [r4, #36]	; 0x24
 801028e:	b920      	cbnz	r0, 801029a <_dtoa_r+0x3a>
 8010290:	4ba7      	ldr	r3, [pc, #668]	; (8010530 <_dtoa_r+0x2d0>)
 8010292:	21ea      	movs	r1, #234	; 0xea
 8010294:	48a7      	ldr	r0, [pc, #668]	; (8010534 <_dtoa_r+0x2d4>)
 8010296:	f001 fa61 	bl	801175c <__assert_func>
 801029a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801029e:	6005      	str	r5, [r0, #0]
 80102a0:	60c5      	str	r5, [r0, #12]
 80102a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80102a4:	6819      	ldr	r1, [r3, #0]
 80102a6:	b151      	cbz	r1, 80102be <_dtoa_r+0x5e>
 80102a8:	685a      	ldr	r2, [r3, #4]
 80102aa:	604a      	str	r2, [r1, #4]
 80102ac:	2301      	movs	r3, #1
 80102ae:	4093      	lsls	r3, r2
 80102b0:	608b      	str	r3, [r1, #8]
 80102b2:	4620      	mov	r0, r4
 80102b4:	f000 fee6 	bl	8011084 <_Bfree>
 80102b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80102ba:	2200      	movs	r2, #0
 80102bc:	601a      	str	r2, [r3, #0]
 80102be:	1e3b      	subs	r3, r7, #0
 80102c0:	bfaa      	itet	ge
 80102c2:	2300      	movge	r3, #0
 80102c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80102c8:	f8c8 3000 	strge.w	r3, [r8]
 80102cc:	4b9a      	ldr	r3, [pc, #616]	; (8010538 <_dtoa_r+0x2d8>)
 80102ce:	bfbc      	itt	lt
 80102d0:	2201      	movlt	r2, #1
 80102d2:	f8c8 2000 	strlt.w	r2, [r8]
 80102d6:	ea33 030b 	bics.w	r3, r3, fp
 80102da:	d11b      	bne.n	8010314 <_dtoa_r+0xb4>
 80102dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80102de:	f242 730f 	movw	r3, #9999	; 0x270f
 80102e2:	6013      	str	r3, [r2, #0]
 80102e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80102e8:	4333      	orrs	r3, r6
 80102ea:	f000 8592 	beq.w	8010e12 <_dtoa_r+0xbb2>
 80102ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80102f0:	b963      	cbnz	r3, 801030c <_dtoa_r+0xac>
 80102f2:	4b92      	ldr	r3, [pc, #584]	; (801053c <_dtoa_r+0x2dc>)
 80102f4:	e022      	b.n	801033c <_dtoa_r+0xdc>
 80102f6:	4b92      	ldr	r3, [pc, #584]	; (8010540 <_dtoa_r+0x2e0>)
 80102f8:	9301      	str	r3, [sp, #4]
 80102fa:	3308      	adds	r3, #8
 80102fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80102fe:	6013      	str	r3, [r2, #0]
 8010300:	9801      	ldr	r0, [sp, #4]
 8010302:	b013      	add	sp, #76	; 0x4c
 8010304:	ecbd 8b04 	vpop	{d8-d9}
 8010308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801030c:	4b8b      	ldr	r3, [pc, #556]	; (801053c <_dtoa_r+0x2dc>)
 801030e:	9301      	str	r3, [sp, #4]
 8010310:	3303      	adds	r3, #3
 8010312:	e7f3      	b.n	80102fc <_dtoa_r+0x9c>
 8010314:	2200      	movs	r2, #0
 8010316:	2300      	movs	r3, #0
 8010318:	4650      	mov	r0, sl
 801031a:	4659      	mov	r1, fp
 801031c:	f7f0 fbd4 	bl	8000ac8 <__aeabi_dcmpeq>
 8010320:	ec4b ab19 	vmov	d9, sl, fp
 8010324:	4680      	mov	r8, r0
 8010326:	b158      	cbz	r0, 8010340 <_dtoa_r+0xe0>
 8010328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801032a:	2301      	movs	r3, #1
 801032c:	6013      	str	r3, [r2, #0]
 801032e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010330:	2b00      	cmp	r3, #0
 8010332:	f000 856b 	beq.w	8010e0c <_dtoa_r+0xbac>
 8010336:	4883      	ldr	r0, [pc, #524]	; (8010544 <_dtoa_r+0x2e4>)
 8010338:	6018      	str	r0, [r3, #0]
 801033a:	1e43      	subs	r3, r0, #1
 801033c:	9301      	str	r3, [sp, #4]
 801033e:	e7df      	b.n	8010300 <_dtoa_r+0xa0>
 8010340:	ec4b ab10 	vmov	d0, sl, fp
 8010344:	aa10      	add	r2, sp, #64	; 0x40
 8010346:	a911      	add	r1, sp, #68	; 0x44
 8010348:	4620      	mov	r0, r4
 801034a:	f001 f983 	bl	8011654 <__d2b>
 801034e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8010352:	ee08 0a10 	vmov	s16, r0
 8010356:	2d00      	cmp	r5, #0
 8010358:	f000 8084 	beq.w	8010464 <_dtoa_r+0x204>
 801035c:	ee19 3a90 	vmov	r3, s19
 8010360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010364:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8010368:	4656      	mov	r6, sl
 801036a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801036e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8010372:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8010376:	4b74      	ldr	r3, [pc, #464]	; (8010548 <_dtoa_r+0x2e8>)
 8010378:	2200      	movs	r2, #0
 801037a:	4630      	mov	r0, r6
 801037c:	4639      	mov	r1, r7
 801037e:	f7ef ff83 	bl	8000288 <__aeabi_dsub>
 8010382:	a365      	add	r3, pc, #404	; (adr r3, 8010518 <_dtoa_r+0x2b8>)
 8010384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010388:	f7f0 f936 	bl	80005f8 <__aeabi_dmul>
 801038c:	a364      	add	r3, pc, #400	; (adr r3, 8010520 <_dtoa_r+0x2c0>)
 801038e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010392:	f7ef ff7b 	bl	800028c <__adddf3>
 8010396:	4606      	mov	r6, r0
 8010398:	4628      	mov	r0, r5
 801039a:	460f      	mov	r7, r1
 801039c:	f7f0 f8c2 	bl	8000524 <__aeabi_i2d>
 80103a0:	a361      	add	r3, pc, #388	; (adr r3, 8010528 <_dtoa_r+0x2c8>)
 80103a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103a6:	f7f0 f927 	bl	80005f8 <__aeabi_dmul>
 80103aa:	4602      	mov	r2, r0
 80103ac:	460b      	mov	r3, r1
 80103ae:	4630      	mov	r0, r6
 80103b0:	4639      	mov	r1, r7
 80103b2:	f7ef ff6b 	bl	800028c <__adddf3>
 80103b6:	4606      	mov	r6, r0
 80103b8:	460f      	mov	r7, r1
 80103ba:	f7f0 fbcd 	bl	8000b58 <__aeabi_d2iz>
 80103be:	2200      	movs	r2, #0
 80103c0:	9000      	str	r0, [sp, #0]
 80103c2:	2300      	movs	r3, #0
 80103c4:	4630      	mov	r0, r6
 80103c6:	4639      	mov	r1, r7
 80103c8:	f7f0 fb88 	bl	8000adc <__aeabi_dcmplt>
 80103cc:	b150      	cbz	r0, 80103e4 <_dtoa_r+0x184>
 80103ce:	9800      	ldr	r0, [sp, #0]
 80103d0:	f7f0 f8a8 	bl	8000524 <__aeabi_i2d>
 80103d4:	4632      	mov	r2, r6
 80103d6:	463b      	mov	r3, r7
 80103d8:	f7f0 fb76 	bl	8000ac8 <__aeabi_dcmpeq>
 80103dc:	b910      	cbnz	r0, 80103e4 <_dtoa_r+0x184>
 80103de:	9b00      	ldr	r3, [sp, #0]
 80103e0:	3b01      	subs	r3, #1
 80103e2:	9300      	str	r3, [sp, #0]
 80103e4:	9b00      	ldr	r3, [sp, #0]
 80103e6:	2b16      	cmp	r3, #22
 80103e8:	d85a      	bhi.n	80104a0 <_dtoa_r+0x240>
 80103ea:	9a00      	ldr	r2, [sp, #0]
 80103ec:	4b57      	ldr	r3, [pc, #348]	; (801054c <_dtoa_r+0x2ec>)
 80103ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80103f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f6:	ec51 0b19 	vmov	r0, r1, d9
 80103fa:	f7f0 fb6f 	bl	8000adc <__aeabi_dcmplt>
 80103fe:	2800      	cmp	r0, #0
 8010400:	d050      	beq.n	80104a4 <_dtoa_r+0x244>
 8010402:	9b00      	ldr	r3, [sp, #0]
 8010404:	3b01      	subs	r3, #1
 8010406:	9300      	str	r3, [sp, #0]
 8010408:	2300      	movs	r3, #0
 801040a:	930b      	str	r3, [sp, #44]	; 0x2c
 801040c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801040e:	1b5d      	subs	r5, r3, r5
 8010410:	1e6b      	subs	r3, r5, #1
 8010412:	9305      	str	r3, [sp, #20]
 8010414:	bf45      	ittet	mi
 8010416:	f1c5 0301 	rsbmi	r3, r5, #1
 801041a:	9304      	strmi	r3, [sp, #16]
 801041c:	2300      	movpl	r3, #0
 801041e:	2300      	movmi	r3, #0
 8010420:	bf4c      	ite	mi
 8010422:	9305      	strmi	r3, [sp, #20]
 8010424:	9304      	strpl	r3, [sp, #16]
 8010426:	9b00      	ldr	r3, [sp, #0]
 8010428:	2b00      	cmp	r3, #0
 801042a:	db3d      	blt.n	80104a8 <_dtoa_r+0x248>
 801042c:	9b05      	ldr	r3, [sp, #20]
 801042e:	9a00      	ldr	r2, [sp, #0]
 8010430:	920a      	str	r2, [sp, #40]	; 0x28
 8010432:	4413      	add	r3, r2
 8010434:	9305      	str	r3, [sp, #20]
 8010436:	2300      	movs	r3, #0
 8010438:	9307      	str	r3, [sp, #28]
 801043a:	9b06      	ldr	r3, [sp, #24]
 801043c:	2b09      	cmp	r3, #9
 801043e:	f200 8089 	bhi.w	8010554 <_dtoa_r+0x2f4>
 8010442:	2b05      	cmp	r3, #5
 8010444:	bfc4      	itt	gt
 8010446:	3b04      	subgt	r3, #4
 8010448:	9306      	strgt	r3, [sp, #24]
 801044a:	9b06      	ldr	r3, [sp, #24]
 801044c:	f1a3 0302 	sub.w	r3, r3, #2
 8010450:	bfcc      	ite	gt
 8010452:	2500      	movgt	r5, #0
 8010454:	2501      	movle	r5, #1
 8010456:	2b03      	cmp	r3, #3
 8010458:	f200 8087 	bhi.w	801056a <_dtoa_r+0x30a>
 801045c:	e8df f003 	tbb	[pc, r3]
 8010460:	59383a2d 	.word	0x59383a2d
 8010464:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8010468:	441d      	add	r5, r3
 801046a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801046e:	2b20      	cmp	r3, #32
 8010470:	bfc1      	itttt	gt
 8010472:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8010476:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801047a:	fa0b f303 	lslgt.w	r3, fp, r3
 801047e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8010482:	bfda      	itte	le
 8010484:	f1c3 0320 	rsble	r3, r3, #32
 8010488:	fa06 f003 	lslle.w	r0, r6, r3
 801048c:	4318      	orrgt	r0, r3
 801048e:	f7f0 f839 	bl	8000504 <__aeabi_ui2d>
 8010492:	2301      	movs	r3, #1
 8010494:	4606      	mov	r6, r0
 8010496:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801049a:	3d01      	subs	r5, #1
 801049c:	930e      	str	r3, [sp, #56]	; 0x38
 801049e:	e76a      	b.n	8010376 <_dtoa_r+0x116>
 80104a0:	2301      	movs	r3, #1
 80104a2:	e7b2      	b.n	801040a <_dtoa_r+0x1aa>
 80104a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80104a6:	e7b1      	b.n	801040c <_dtoa_r+0x1ac>
 80104a8:	9b04      	ldr	r3, [sp, #16]
 80104aa:	9a00      	ldr	r2, [sp, #0]
 80104ac:	1a9b      	subs	r3, r3, r2
 80104ae:	9304      	str	r3, [sp, #16]
 80104b0:	4253      	negs	r3, r2
 80104b2:	9307      	str	r3, [sp, #28]
 80104b4:	2300      	movs	r3, #0
 80104b6:	930a      	str	r3, [sp, #40]	; 0x28
 80104b8:	e7bf      	b.n	801043a <_dtoa_r+0x1da>
 80104ba:	2300      	movs	r3, #0
 80104bc:	9308      	str	r3, [sp, #32]
 80104be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	dc55      	bgt.n	8010570 <_dtoa_r+0x310>
 80104c4:	2301      	movs	r3, #1
 80104c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80104ca:	461a      	mov	r2, r3
 80104cc:	9209      	str	r2, [sp, #36]	; 0x24
 80104ce:	e00c      	b.n	80104ea <_dtoa_r+0x28a>
 80104d0:	2301      	movs	r3, #1
 80104d2:	e7f3      	b.n	80104bc <_dtoa_r+0x25c>
 80104d4:	2300      	movs	r3, #0
 80104d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104d8:	9308      	str	r3, [sp, #32]
 80104da:	9b00      	ldr	r3, [sp, #0]
 80104dc:	4413      	add	r3, r2
 80104de:	9302      	str	r3, [sp, #8]
 80104e0:	3301      	adds	r3, #1
 80104e2:	2b01      	cmp	r3, #1
 80104e4:	9303      	str	r3, [sp, #12]
 80104e6:	bfb8      	it	lt
 80104e8:	2301      	movlt	r3, #1
 80104ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80104ec:	2200      	movs	r2, #0
 80104ee:	6042      	str	r2, [r0, #4]
 80104f0:	2204      	movs	r2, #4
 80104f2:	f102 0614 	add.w	r6, r2, #20
 80104f6:	429e      	cmp	r6, r3
 80104f8:	6841      	ldr	r1, [r0, #4]
 80104fa:	d93d      	bls.n	8010578 <_dtoa_r+0x318>
 80104fc:	4620      	mov	r0, r4
 80104fe:	f000 fd81 	bl	8011004 <_Balloc>
 8010502:	9001      	str	r0, [sp, #4]
 8010504:	2800      	cmp	r0, #0
 8010506:	d13b      	bne.n	8010580 <_dtoa_r+0x320>
 8010508:	4b11      	ldr	r3, [pc, #68]	; (8010550 <_dtoa_r+0x2f0>)
 801050a:	4602      	mov	r2, r0
 801050c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8010510:	e6c0      	b.n	8010294 <_dtoa_r+0x34>
 8010512:	2301      	movs	r3, #1
 8010514:	e7df      	b.n	80104d6 <_dtoa_r+0x276>
 8010516:	bf00      	nop
 8010518:	636f4361 	.word	0x636f4361
 801051c:	3fd287a7 	.word	0x3fd287a7
 8010520:	8b60c8b3 	.word	0x8b60c8b3
 8010524:	3fc68a28 	.word	0x3fc68a28
 8010528:	509f79fb 	.word	0x509f79fb
 801052c:	3fd34413 	.word	0x3fd34413
 8010530:	080120b5 	.word	0x080120b5
 8010534:	080120cc 	.word	0x080120cc
 8010538:	7ff00000 	.word	0x7ff00000
 801053c:	080120b1 	.word	0x080120b1
 8010540:	080120a8 	.word	0x080120a8
 8010544:	08012085 	.word	0x08012085
 8010548:	3ff80000 	.word	0x3ff80000
 801054c:	080121c0 	.word	0x080121c0
 8010550:	08012127 	.word	0x08012127
 8010554:	2501      	movs	r5, #1
 8010556:	2300      	movs	r3, #0
 8010558:	9306      	str	r3, [sp, #24]
 801055a:	9508      	str	r5, [sp, #32]
 801055c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010560:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010564:	2200      	movs	r2, #0
 8010566:	2312      	movs	r3, #18
 8010568:	e7b0      	b.n	80104cc <_dtoa_r+0x26c>
 801056a:	2301      	movs	r3, #1
 801056c:	9308      	str	r3, [sp, #32]
 801056e:	e7f5      	b.n	801055c <_dtoa_r+0x2fc>
 8010570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010572:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8010576:	e7b8      	b.n	80104ea <_dtoa_r+0x28a>
 8010578:	3101      	adds	r1, #1
 801057a:	6041      	str	r1, [r0, #4]
 801057c:	0052      	lsls	r2, r2, #1
 801057e:	e7b8      	b.n	80104f2 <_dtoa_r+0x292>
 8010580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010582:	9a01      	ldr	r2, [sp, #4]
 8010584:	601a      	str	r2, [r3, #0]
 8010586:	9b03      	ldr	r3, [sp, #12]
 8010588:	2b0e      	cmp	r3, #14
 801058a:	f200 809d 	bhi.w	80106c8 <_dtoa_r+0x468>
 801058e:	2d00      	cmp	r5, #0
 8010590:	f000 809a 	beq.w	80106c8 <_dtoa_r+0x468>
 8010594:	9b00      	ldr	r3, [sp, #0]
 8010596:	2b00      	cmp	r3, #0
 8010598:	dd32      	ble.n	8010600 <_dtoa_r+0x3a0>
 801059a:	4ab7      	ldr	r2, [pc, #732]	; (8010878 <_dtoa_r+0x618>)
 801059c:	f003 030f 	and.w	r3, r3, #15
 80105a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80105a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80105a8:	9b00      	ldr	r3, [sp, #0]
 80105aa:	05d8      	lsls	r0, r3, #23
 80105ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80105b0:	d516      	bpl.n	80105e0 <_dtoa_r+0x380>
 80105b2:	4bb2      	ldr	r3, [pc, #712]	; (801087c <_dtoa_r+0x61c>)
 80105b4:	ec51 0b19 	vmov	r0, r1, d9
 80105b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80105bc:	f7f0 f946 	bl	800084c <__aeabi_ddiv>
 80105c0:	f007 070f 	and.w	r7, r7, #15
 80105c4:	4682      	mov	sl, r0
 80105c6:	468b      	mov	fp, r1
 80105c8:	2503      	movs	r5, #3
 80105ca:	4eac      	ldr	r6, [pc, #688]	; (801087c <_dtoa_r+0x61c>)
 80105cc:	b957      	cbnz	r7, 80105e4 <_dtoa_r+0x384>
 80105ce:	4642      	mov	r2, r8
 80105d0:	464b      	mov	r3, r9
 80105d2:	4650      	mov	r0, sl
 80105d4:	4659      	mov	r1, fp
 80105d6:	f7f0 f939 	bl	800084c <__aeabi_ddiv>
 80105da:	4682      	mov	sl, r0
 80105dc:	468b      	mov	fp, r1
 80105de:	e028      	b.n	8010632 <_dtoa_r+0x3d2>
 80105e0:	2502      	movs	r5, #2
 80105e2:	e7f2      	b.n	80105ca <_dtoa_r+0x36a>
 80105e4:	07f9      	lsls	r1, r7, #31
 80105e6:	d508      	bpl.n	80105fa <_dtoa_r+0x39a>
 80105e8:	4640      	mov	r0, r8
 80105ea:	4649      	mov	r1, r9
 80105ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80105f0:	f7f0 f802 	bl	80005f8 <__aeabi_dmul>
 80105f4:	3501      	adds	r5, #1
 80105f6:	4680      	mov	r8, r0
 80105f8:	4689      	mov	r9, r1
 80105fa:	107f      	asrs	r7, r7, #1
 80105fc:	3608      	adds	r6, #8
 80105fe:	e7e5      	b.n	80105cc <_dtoa_r+0x36c>
 8010600:	f000 809b 	beq.w	801073a <_dtoa_r+0x4da>
 8010604:	9b00      	ldr	r3, [sp, #0]
 8010606:	4f9d      	ldr	r7, [pc, #628]	; (801087c <_dtoa_r+0x61c>)
 8010608:	425e      	negs	r6, r3
 801060a:	4b9b      	ldr	r3, [pc, #620]	; (8010878 <_dtoa_r+0x618>)
 801060c:	f006 020f 	and.w	r2, r6, #15
 8010610:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010618:	ec51 0b19 	vmov	r0, r1, d9
 801061c:	f7ef ffec 	bl	80005f8 <__aeabi_dmul>
 8010620:	1136      	asrs	r6, r6, #4
 8010622:	4682      	mov	sl, r0
 8010624:	468b      	mov	fp, r1
 8010626:	2300      	movs	r3, #0
 8010628:	2502      	movs	r5, #2
 801062a:	2e00      	cmp	r6, #0
 801062c:	d17a      	bne.n	8010724 <_dtoa_r+0x4c4>
 801062e:	2b00      	cmp	r3, #0
 8010630:	d1d3      	bne.n	80105da <_dtoa_r+0x37a>
 8010632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010634:	2b00      	cmp	r3, #0
 8010636:	f000 8082 	beq.w	801073e <_dtoa_r+0x4de>
 801063a:	4b91      	ldr	r3, [pc, #580]	; (8010880 <_dtoa_r+0x620>)
 801063c:	2200      	movs	r2, #0
 801063e:	4650      	mov	r0, sl
 8010640:	4659      	mov	r1, fp
 8010642:	f7f0 fa4b 	bl	8000adc <__aeabi_dcmplt>
 8010646:	2800      	cmp	r0, #0
 8010648:	d079      	beq.n	801073e <_dtoa_r+0x4de>
 801064a:	9b03      	ldr	r3, [sp, #12]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d076      	beq.n	801073e <_dtoa_r+0x4de>
 8010650:	9b02      	ldr	r3, [sp, #8]
 8010652:	2b00      	cmp	r3, #0
 8010654:	dd36      	ble.n	80106c4 <_dtoa_r+0x464>
 8010656:	9b00      	ldr	r3, [sp, #0]
 8010658:	4650      	mov	r0, sl
 801065a:	4659      	mov	r1, fp
 801065c:	1e5f      	subs	r7, r3, #1
 801065e:	2200      	movs	r2, #0
 8010660:	4b88      	ldr	r3, [pc, #544]	; (8010884 <_dtoa_r+0x624>)
 8010662:	f7ef ffc9 	bl	80005f8 <__aeabi_dmul>
 8010666:	9e02      	ldr	r6, [sp, #8]
 8010668:	4682      	mov	sl, r0
 801066a:	468b      	mov	fp, r1
 801066c:	3501      	adds	r5, #1
 801066e:	4628      	mov	r0, r5
 8010670:	f7ef ff58 	bl	8000524 <__aeabi_i2d>
 8010674:	4652      	mov	r2, sl
 8010676:	465b      	mov	r3, fp
 8010678:	f7ef ffbe 	bl	80005f8 <__aeabi_dmul>
 801067c:	4b82      	ldr	r3, [pc, #520]	; (8010888 <_dtoa_r+0x628>)
 801067e:	2200      	movs	r2, #0
 8010680:	f7ef fe04 	bl	800028c <__adddf3>
 8010684:	46d0      	mov	r8, sl
 8010686:	46d9      	mov	r9, fp
 8010688:	4682      	mov	sl, r0
 801068a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801068e:	2e00      	cmp	r6, #0
 8010690:	d158      	bne.n	8010744 <_dtoa_r+0x4e4>
 8010692:	4b7e      	ldr	r3, [pc, #504]	; (801088c <_dtoa_r+0x62c>)
 8010694:	2200      	movs	r2, #0
 8010696:	4640      	mov	r0, r8
 8010698:	4649      	mov	r1, r9
 801069a:	f7ef fdf5 	bl	8000288 <__aeabi_dsub>
 801069e:	4652      	mov	r2, sl
 80106a0:	465b      	mov	r3, fp
 80106a2:	4680      	mov	r8, r0
 80106a4:	4689      	mov	r9, r1
 80106a6:	f7f0 fa37 	bl	8000b18 <__aeabi_dcmpgt>
 80106aa:	2800      	cmp	r0, #0
 80106ac:	f040 8295 	bne.w	8010bda <_dtoa_r+0x97a>
 80106b0:	4652      	mov	r2, sl
 80106b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80106b6:	4640      	mov	r0, r8
 80106b8:	4649      	mov	r1, r9
 80106ba:	f7f0 fa0f 	bl	8000adc <__aeabi_dcmplt>
 80106be:	2800      	cmp	r0, #0
 80106c0:	f040 8289 	bne.w	8010bd6 <_dtoa_r+0x976>
 80106c4:	ec5b ab19 	vmov	sl, fp, d9
 80106c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	f2c0 8148 	blt.w	8010960 <_dtoa_r+0x700>
 80106d0:	9a00      	ldr	r2, [sp, #0]
 80106d2:	2a0e      	cmp	r2, #14
 80106d4:	f300 8144 	bgt.w	8010960 <_dtoa_r+0x700>
 80106d8:	4b67      	ldr	r3, [pc, #412]	; (8010878 <_dtoa_r+0x618>)
 80106da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80106de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80106e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	f280 80d5 	bge.w	8010894 <_dtoa_r+0x634>
 80106ea:	9b03      	ldr	r3, [sp, #12]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	f300 80d1 	bgt.w	8010894 <_dtoa_r+0x634>
 80106f2:	f040 826f 	bne.w	8010bd4 <_dtoa_r+0x974>
 80106f6:	4b65      	ldr	r3, [pc, #404]	; (801088c <_dtoa_r+0x62c>)
 80106f8:	2200      	movs	r2, #0
 80106fa:	4640      	mov	r0, r8
 80106fc:	4649      	mov	r1, r9
 80106fe:	f7ef ff7b 	bl	80005f8 <__aeabi_dmul>
 8010702:	4652      	mov	r2, sl
 8010704:	465b      	mov	r3, fp
 8010706:	f7f0 f9fd 	bl	8000b04 <__aeabi_dcmpge>
 801070a:	9e03      	ldr	r6, [sp, #12]
 801070c:	4637      	mov	r7, r6
 801070e:	2800      	cmp	r0, #0
 8010710:	f040 8245 	bne.w	8010b9e <_dtoa_r+0x93e>
 8010714:	9d01      	ldr	r5, [sp, #4]
 8010716:	2331      	movs	r3, #49	; 0x31
 8010718:	f805 3b01 	strb.w	r3, [r5], #1
 801071c:	9b00      	ldr	r3, [sp, #0]
 801071e:	3301      	adds	r3, #1
 8010720:	9300      	str	r3, [sp, #0]
 8010722:	e240      	b.n	8010ba6 <_dtoa_r+0x946>
 8010724:	07f2      	lsls	r2, r6, #31
 8010726:	d505      	bpl.n	8010734 <_dtoa_r+0x4d4>
 8010728:	e9d7 2300 	ldrd	r2, r3, [r7]
 801072c:	f7ef ff64 	bl	80005f8 <__aeabi_dmul>
 8010730:	3501      	adds	r5, #1
 8010732:	2301      	movs	r3, #1
 8010734:	1076      	asrs	r6, r6, #1
 8010736:	3708      	adds	r7, #8
 8010738:	e777      	b.n	801062a <_dtoa_r+0x3ca>
 801073a:	2502      	movs	r5, #2
 801073c:	e779      	b.n	8010632 <_dtoa_r+0x3d2>
 801073e:	9f00      	ldr	r7, [sp, #0]
 8010740:	9e03      	ldr	r6, [sp, #12]
 8010742:	e794      	b.n	801066e <_dtoa_r+0x40e>
 8010744:	9901      	ldr	r1, [sp, #4]
 8010746:	4b4c      	ldr	r3, [pc, #304]	; (8010878 <_dtoa_r+0x618>)
 8010748:	4431      	add	r1, r6
 801074a:	910d      	str	r1, [sp, #52]	; 0x34
 801074c:	9908      	ldr	r1, [sp, #32]
 801074e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010752:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010756:	2900      	cmp	r1, #0
 8010758:	d043      	beq.n	80107e2 <_dtoa_r+0x582>
 801075a:	494d      	ldr	r1, [pc, #308]	; (8010890 <_dtoa_r+0x630>)
 801075c:	2000      	movs	r0, #0
 801075e:	f7f0 f875 	bl	800084c <__aeabi_ddiv>
 8010762:	4652      	mov	r2, sl
 8010764:	465b      	mov	r3, fp
 8010766:	f7ef fd8f 	bl	8000288 <__aeabi_dsub>
 801076a:	9d01      	ldr	r5, [sp, #4]
 801076c:	4682      	mov	sl, r0
 801076e:	468b      	mov	fp, r1
 8010770:	4649      	mov	r1, r9
 8010772:	4640      	mov	r0, r8
 8010774:	f7f0 f9f0 	bl	8000b58 <__aeabi_d2iz>
 8010778:	4606      	mov	r6, r0
 801077a:	f7ef fed3 	bl	8000524 <__aeabi_i2d>
 801077e:	4602      	mov	r2, r0
 8010780:	460b      	mov	r3, r1
 8010782:	4640      	mov	r0, r8
 8010784:	4649      	mov	r1, r9
 8010786:	f7ef fd7f 	bl	8000288 <__aeabi_dsub>
 801078a:	3630      	adds	r6, #48	; 0x30
 801078c:	f805 6b01 	strb.w	r6, [r5], #1
 8010790:	4652      	mov	r2, sl
 8010792:	465b      	mov	r3, fp
 8010794:	4680      	mov	r8, r0
 8010796:	4689      	mov	r9, r1
 8010798:	f7f0 f9a0 	bl	8000adc <__aeabi_dcmplt>
 801079c:	2800      	cmp	r0, #0
 801079e:	d163      	bne.n	8010868 <_dtoa_r+0x608>
 80107a0:	4642      	mov	r2, r8
 80107a2:	464b      	mov	r3, r9
 80107a4:	4936      	ldr	r1, [pc, #216]	; (8010880 <_dtoa_r+0x620>)
 80107a6:	2000      	movs	r0, #0
 80107a8:	f7ef fd6e 	bl	8000288 <__aeabi_dsub>
 80107ac:	4652      	mov	r2, sl
 80107ae:	465b      	mov	r3, fp
 80107b0:	f7f0 f994 	bl	8000adc <__aeabi_dcmplt>
 80107b4:	2800      	cmp	r0, #0
 80107b6:	f040 80b5 	bne.w	8010924 <_dtoa_r+0x6c4>
 80107ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80107bc:	429d      	cmp	r5, r3
 80107be:	d081      	beq.n	80106c4 <_dtoa_r+0x464>
 80107c0:	4b30      	ldr	r3, [pc, #192]	; (8010884 <_dtoa_r+0x624>)
 80107c2:	2200      	movs	r2, #0
 80107c4:	4650      	mov	r0, sl
 80107c6:	4659      	mov	r1, fp
 80107c8:	f7ef ff16 	bl	80005f8 <__aeabi_dmul>
 80107cc:	4b2d      	ldr	r3, [pc, #180]	; (8010884 <_dtoa_r+0x624>)
 80107ce:	4682      	mov	sl, r0
 80107d0:	468b      	mov	fp, r1
 80107d2:	4640      	mov	r0, r8
 80107d4:	4649      	mov	r1, r9
 80107d6:	2200      	movs	r2, #0
 80107d8:	f7ef ff0e 	bl	80005f8 <__aeabi_dmul>
 80107dc:	4680      	mov	r8, r0
 80107de:	4689      	mov	r9, r1
 80107e0:	e7c6      	b.n	8010770 <_dtoa_r+0x510>
 80107e2:	4650      	mov	r0, sl
 80107e4:	4659      	mov	r1, fp
 80107e6:	f7ef ff07 	bl	80005f8 <__aeabi_dmul>
 80107ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80107ec:	9d01      	ldr	r5, [sp, #4]
 80107ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80107f0:	4682      	mov	sl, r0
 80107f2:	468b      	mov	fp, r1
 80107f4:	4649      	mov	r1, r9
 80107f6:	4640      	mov	r0, r8
 80107f8:	f7f0 f9ae 	bl	8000b58 <__aeabi_d2iz>
 80107fc:	4606      	mov	r6, r0
 80107fe:	f7ef fe91 	bl	8000524 <__aeabi_i2d>
 8010802:	3630      	adds	r6, #48	; 0x30
 8010804:	4602      	mov	r2, r0
 8010806:	460b      	mov	r3, r1
 8010808:	4640      	mov	r0, r8
 801080a:	4649      	mov	r1, r9
 801080c:	f7ef fd3c 	bl	8000288 <__aeabi_dsub>
 8010810:	f805 6b01 	strb.w	r6, [r5], #1
 8010814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010816:	429d      	cmp	r5, r3
 8010818:	4680      	mov	r8, r0
 801081a:	4689      	mov	r9, r1
 801081c:	f04f 0200 	mov.w	r2, #0
 8010820:	d124      	bne.n	801086c <_dtoa_r+0x60c>
 8010822:	4b1b      	ldr	r3, [pc, #108]	; (8010890 <_dtoa_r+0x630>)
 8010824:	4650      	mov	r0, sl
 8010826:	4659      	mov	r1, fp
 8010828:	f7ef fd30 	bl	800028c <__adddf3>
 801082c:	4602      	mov	r2, r0
 801082e:	460b      	mov	r3, r1
 8010830:	4640      	mov	r0, r8
 8010832:	4649      	mov	r1, r9
 8010834:	f7f0 f970 	bl	8000b18 <__aeabi_dcmpgt>
 8010838:	2800      	cmp	r0, #0
 801083a:	d173      	bne.n	8010924 <_dtoa_r+0x6c4>
 801083c:	4652      	mov	r2, sl
 801083e:	465b      	mov	r3, fp
 8010840:	4913      	ldr	r1, [pc, #76]	; (8010890 <_dtoa_r+0x630>)
 8010842:	2000      	movs	r0, #0
 8010844:	f7ef fd20 	bl	8000288 <__aeabi_dsub>
 8010848:	4602      	mov	r2, r0
 801084a:	460b      	mov	r3, r1
 801084c:	4640      	mov	r0, r8
 801084e:	4649      	mov	r1, r9
 8010850:	f7f0 f944 	bl	8000adc <__aeabi_dcmplt>
 8010854:	2800      	cmp	r0, #0
 8010856:	f43f af35 	beq.w	80106c4 <_dtoa_r+0x464>
 801085a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801085c:	1e6b      	subs	r3, r5, #1
 801085e:	930f      	str	r3, [sp, #60]	; 0x3c
 8010860:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010864:	2b30      	cmp	r3, #48	; 0x30
 8010866:	d0f8      	beq.n	801085a <_dtoa_r+0x5fa>
 8010868:	9700      	str	r7, [sp, #0]
 801086a:	e049      	b.n	8010900 <_dtoa_r+0x6a0>
 801086c:	4b05      	ldr	r3, [pc, #20]	; (8010884 <_dtoa_r+0x624>)
 801086e:	f7ef fec3 	bl	80005f8 <__aeabi_dmul>
 8010872:	4680      	mov	r8, r0
 8010874:	4689      	mov	r9, r1
 8010876:	e7bd      	b.n	80107f4 <_dtoa_r+0x594>
 8010878:	080121c0 	.word	0x080121c0
 801087c:	08012198 	.word	0x08012198
 8010880:	3ff00000 	.word	0x3ff00000
 8010884:	40240000 	.word	0x40240000
 8010888:	401c0000 	.word	0x401c0000
 801088c:	40140000 	.word	0x40140000
 8010890:	3fe00000 	.word	0x3fe00000
 8010894:	9d01      	ldr	r5, [sp, #4]
 8010896:	4656      	mov	r6, sl
 8010898:	465f      	mov	r7, fp
 801089a:	4642      	mov	r2, r8
 801089c:	464b      	mov	r3, r9
 801089e:	4630      	mov	r0, r6
 80108a0:	4639      	mov	r1, r7
 80108a2:	f7ef ffd3 	bl	800084c <__aeabi_ddiv>
 80108a6:	f7f0 f957 	bl	8000b58 <__aeabi_d2iz>
 80108aa:	4682      	mov	sl, r0
 80108ac:	f7ef fe3a 	bl	8000524 <__aeabi_i2d>
 80108b0:	4642      	mov	r2, r8
 80108b2:	464b      	mov	r3, r9
 80108b4:	f7ef fea0 	bl	80005f8 <__aeabi_dmul>
 80108b8:	4602      	mov	r2, r0
 80108ba:	460b      	mov	r3, r1
 80108bc:	4630      	mov	r0, r6
 80108be:	4639      	mov	r1, r7
 80108c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80108c4:	f7ef fce0 	bl	8000288 <__aeabi_dsub>
 80108c8:	f805 6b01 	strb.w	r6, [r5], #1
 80108cc:	9e01      	ldr	r6, [sp, #4]
 80108ce:	9f03      	ldr	r7, [sp, #12]
 80108d0:	1bae      	subs	r6, r5, r6
 80108d2:	42b7      	cmp	r7, r6
 80108d4:	4602      	mov	r2, r0
 80108d6:	460b      	mov	r3, r1
 80108d8:	d135      	bne.n	8010946 <_dtoa_r+0x6e6>
 80108da:	f7ef fcd7 	bl	800028c <__adddf3>
 80108de:	4642      	mov	r2, r8
 80108e0:	464b      	mov	r3, r9
 80108e2:	4606      	mov	r6, r0
 80108e4:	460f      	mov	r7, r1
 80108e6:	f7f0 f917 	bl	8000b18 <__aeabi_dcmpgt>
 80108ea:	b9d0      	cbnz	r0, 8010922 <_dtoa_r+0x6c2>
 80108ec:	4642      	mov	r2, r8
 80108ee:	464b      	mov	r3, r9
 80108f0:	4630      	mov	r0, r6
 80108f2:	4639      	mov	r1, r7
 80108f4:	f7f0 f8e8 	bl	8000ac8 <__aeabi_dcmpeq>
 80108f8:	b110      	cbz	r0, 8010900 <_dtoa_r+0x6a0>
 80108fa:	f01a 0f01 	tst.w	sl, #1
 80108fe:	d110      	bne.n	8010922 <_dtoa_r+0x6c2>
 8010900:	4620      	mov	r0, r4
 8010902:	ee18 1a10 	vmov	r1, s16
 8010906:	f000 fbbd 	bl	8011084 <_Bfree>
 801090a:	2300      	movs	r3, #0
 801090c:	9800      	ldr	r0, [sp, #0]
 801090e:	702b      	strb	r3, [r5, #0]
 8010910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010912:	3001      	adds	r0, #1
 8010914:	6018      	str	r0, [r3, #0]
 8010916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010918:	2b00      	cmp	r3, #0
 801091a:	f43f acf1 	beq.w	8010300 <_dtoa_r+0xa0>
 801091e:	601d      	str	r5, [r3, #0]
 8010920:	e4ee      	b.n	8010300 <_dtoa_r+0xa0>
 8010922:	9f00      	ldr	r7, [sp, #0]
 8010924:	462b      	mov	r3, r5
 8010926:	461d      	mov	r5, r3
 8010928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801092c:	2a39      	cmp	r2, #57	; 0x39
 801092e:	d106      	bne.n	801093e <_dtoa_r+0x6de>
 8010930:	9a01      	ldr	r2, [sp, #4]
 8010932:	429a      	cmp	r2, r3
 8010934:	d1f7      	bne.n	8010926 <_dtoa_r+0x6c6>
 8010936:	9901      	ldr	r1, [sp, #4]
 8010938:	2230      	movs	r2, #48	; 0x30
 801093a:	3701      	adds	r7, #1
 801093c:	700a      	strb	r2, [r1, #0]
 801093e:	781a      	ldrb	r2, [r3, #0]
 8010940:	3201      	adds	r2, #1
 8010942:	701a      	strb	r2, [r3, #0]
 8010944:	e790      	b.n	8010868 <_dtoa_r+0x608>
 8010946:	4ba6      	ldr	r3, [pc, #664]	; (8010be0 <_dtoa_r+0x980>)
 8010948:	2200      	movs	r2, #0
 801094a:	f7ef fe55 	bl	80005f8 <__aeabi_dmul>
 801094e:	2200      	movs	r2, #0
 8010950:	2300      	movs	r3, #0
 8010952:	4606      	mov	r6, r0
 8010954:	460f      	mov	r7, r1
 8010956:	f7f0 f8b7 	bl	8000ac8 <__aeabi_dcmpeq>
 801095a:	2800      	cmp	r0, #0
 801095c:	d09d      	beq.n	801089a <_dtoa_r+0x63a>
 801095e:	e7cf      	b.n	8010900 <_dtoa_r+0x6a0>
 8010960:	9a08      	ldr	r2, [sp, #32]
 8010962:	2a00      	cmp	r2, #0
 8010964:	f000 80d7 	beq.w	8010b16 <_dtoa_r+0x8b6>
 8010968:	9a06      	ldr	r2, [sp, #24]
 801096a:	2a01      	cmp	r2, #1
 801096c:	f300 80ba 	bgt.w	8010ae4 <_dtoa_r+0x884>
 8010970:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010972:	2a00      	cmp	r2, #0
 8010974:	f000 80b2 	beq.w	8010adc <_dtoa_r+0x87c>
 8010978:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801097c:	9e07      	ldr	r6, [sp, #28]
 801097e:	9d04      	ldr	r5, [sp, #16]
 8010980:	9a04      	ldr	r2, [sp, #16]
 8010982:	441a      	add	r2, r3
 8010984:	9204      	str	r2, [sp, #16]
 8010986:	9a05      	ldr	r2, [sp, #20]
 8010988:	2101      	movs	r1, #1
 801098a:	441a      	add	r2, r3
 801098c:	4620      	mov	r0, r4
 801098e:	9205      	str	r2, [sp, #20]
 8010990:	f000 fc30 	bl	80111f4 <__i2b>
 8010994:	4607      	mov	r7, r0
 8010996:	2d00      	cmp	r5, #0
 8010998:	dd0c      	ble.n	80109b4 <_dtoa_r+0x754>
 801099a:	9b05      	ldr	r3, [sp, #20]
 801099c:	2b00      	cmp	r3, #0
 801099e:	dd09      	ble.n	80109b4 <_dtoa_r+0x754>
 80109a0:	42ab      	cmp	r3, r5
 80109a2:	9a04      	ldr	r2, [sp, #16]
 80109a4:	bfa8      	it	ge
 80109a6:	462b      	movge	r3, r5
 80109a8:	1ad2      	subs	r2, r2, r3
 80109aa:	9204      	str	r2, [sp, #16]
 80109ac:	9a05      	ldr	r2, [sp, #20]
 80109ae:	1aed      	subs	r5, r5, r3
 80109b0:	1ad3      	subs	r3, r2, r3
 80109b2:	9305      	str	r3, [sp, #20]
 80109b4:	9b07      	ldr	r3, [sp, #28]
 80109b6:	b31b      	cbz	r3, 8010a00 <_dtoa_r+0x7a0>
 80109b8:	9b08      	ldr	r3, [sp, #32]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	f000 80af 	beq.w	8010b1e <_dtoa_r+0x8be>
 80109c0:	2e00      	cmp	r6, #0
 80109c2:	dd13      	ble.n	80109ec <_dtoa_r+0x78c>
 80109c4:	4639      	mov	r1, r7
 80109c6:	4632      	mov	r2, r6
 80109c8:	4620      	mov	r0, r4
 80109ca:	f000 fcd3 	bl	8011374 <__pow5mult>
 80109ce:	ee18 2a10 	vmov	r2, s16
 80109d2:	4601      	mov	r1, r0
 80109d4:	4607      	mov	r7, r0
 80109d6:	4620      	mov	r0, r4
 80109d8:	f000 fc22 	bl	8011220 <__multiply>
 80109dc:	ee18 1a10 	vmov	r1, s16
 80109e0:	4680      	mov	r8, r0
 80109e2:	4620      	mov	r0, r4
 80109e4:	f000 fb4e 	bl	8011084 <_Bfree>
 80109e8:	ee08 8a10 	vmov	s16, r8
 80109ec:	9b07      	ldr	r3, [sp, #28]
 80109ee:	1b9a      	subs	r2, r3, r6
 80109f0:	d006      	beq.n	8010a00 <_dtoa_r+0x7a0>
 80109f2:	ee18 1a10 	vmov	r1, s16
 80109f6:	4620      	mov	r0, r4
 80109f8:	f000 fcbc 	bl	8011374 <__pow5mult>
 80109fc:	ee08 0a10 	vmov	s16, r0
 8010a00:	2101      	movs	r1, #1
 8010a02:	4620      	mov	r0, r4
 8010a04:	f000 fbf6 	bl	80111f4 <__i2b>
 8010a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	4606      	mov	r6, r0
 8010a0e:	f340 8088 	ble.w	8010b22 <_dtoa_r+0x8c2>
 8010a12:	461a      	mov	r2, r3
 8010a14:	4601      	mov	r1, r0
 8010a16:	4620      	mov	r0, r4
 8010a18:	f000 fcac 	bl	8011374 <__pow5mult>
 8010a1c:	9b06      	ldr	r3, [sp, #24]
 8010a1e:	2b01      	cmp	r3, #1
 8010a20:	4606      	mov	r6, r0
 8010a22:	f340 8081 	ble.w	8010b28 <_dtoa_r+0x8c8>
 8010a26:	f04f 0800 	mov.w	r8, #0
 8010a2a:	6933      	ldr	r3, [r6, #16]
 8010a2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010a30:	6918      	ldr	r0, [r3, #16]
 8010a32:	f000 fb8f 	bl	8011154 <__hi0bits>
 8010a36:	f1c0 0020 	rsb	r0, r0, #32
 8010a3a:	9b05      	ldr	r3, [sp, #20]
 8010a3c:	4418      	add	r0, r3
 8010a3e:	f010 001f 	ands.w	r0, r0, #31
 8010a42:	f000 8092 	beq.w	8010b6a <_dtoa_r+0x90a>
 8010a46:	f1c0 0320 	rsb	r3, r0, #32
 8010a4a:	2b04      	cmp	r3, #4
 8010a4c:	f340 808a 	ble.w	8010b64 <_dtoa_r+0x904>
 8010a50:	f1c0 001c 	rsb	r0, r0, #28
 8010a54:	9b04      	ldr	r3, [sp, #16]
 8010a56:	4403      	add	r3, r0
 8010a58:	9304      	str	r3, [sp, #16]
 8010a5a:	9b05      	ldr	r3, [sp, #20]
 8010a5c:	4403      	add	r3, r0
 8010a5e:	4405      	add	r5, r0
 8010a60:	9305      	str	r3, [sp, #20]
 8010a62:	9b04      	ldr	r3, [sp, #16]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	dd07      	ble.n	8010a78 <_dtoa_r+0x818>
 8010a68:	ee18 1a10 	vmov	r1, s16
 8010a6c:	461a      	mov	r2, r3
 8010a6e:	4620      	mov	r0, r4
 8010a70:	f000 fcda 	bl	8011428 <__lshift>
 8010a74:	ee08 0a10 	vmov	s16, r0
 8010a78:	9b05      	ldr	r3, [sp, #20]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	dd05      	ble.n	8010a8a <_dtoa_r+0x82a>
 8010a7e:	4631      	mov	r1, r6
 8010a80:	461a      	mov	r2, r3
 8010a82:	4620      	mov	r0, r4
 8010a84:	f000 fcd0 	bl	8011428 <__lshift>
 8010a88:	4606      	mov	r6, r0
 8010a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d06e      	beq.n	8010b6e <_dtoa_r+0x90e>
 8010a90:	ee18 0a10 	vmov	r0, s16
 8010a94:	4631      	mov	r1, r6
 8010a96:	f000 fd37 	bl	8011508 <__mcmp>
 8010a9a:	2800      	cmp	r0, #0
 8010a9c:	da67      	bge.n	8010b6e <_dtoa_r+0x90e>
 8010a9e:	9b00      	ldr	r3, [sp, #0]
 8010aa0:	3b01      	subs	r3, #1
 8010aa2:	ee18 1a10 	vmov	r1, s16
 8010aa6:	9300      	str	r3, [sp, #0]
 8010aa8:	220a      	movs	r2, #10
 8010aaa:	2300      	movs	r3, #0
 8010aac:	4620      	mov	r0, r4
 8010aae:	f000 fb0b 	bl	80110c8 <__multadd>
 8010ab2:	9b08      	ldr	r3, [sp, #32]
 8010ab4:	ee08 0a10 	vmov	s16, r0
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	f000 81b1 	beq.w	8010e20 <_dtoa_r+0xbc0>
 8010abe:	2300      	movs	r3, #0
 8010ac0:	4639      	mov	r1, r7
 8010ac2:	220a      	movs	r2, #10
 8010ac4:	4620      	mov	r0, r4
 8010ac6:	f000 faff 	bl	80110c8 <__multadd>
 8010aca:	9b02      	ldr	r3, [sp, #8]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	4607      	mov	r7, r0
 8010ad0:	f300 808e 	bgt.w	8010bf0 <_dtoa_r+0x990>
 8010ad4:	9b06      	ldr	r3, [sp, #24]
 8010ad6:	2b02      	cmp	r3, #2
 8010ad8:	dc51      	bgt.n	8010b7e <_dtoa_r+0x91e>
 8010ada:	e089      	b.n	8010bf0 <_dtoa_r+0x990>
 8010adc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010ade:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8010ae2:	e74b      	b.n	801097c <_dtoa_r+0x71c>
 8010ae4:	9b03      	ldr	r3, [sp, #12]
 8010ae6:	1e5e      	subs	r6, r3, #1
 8010ae8:	9b07      	ldr	r3, [sp, #28]
 8010aea:	42b3      	cmp	r3, r6
 8010aec:	bfbf      	itttt	lt
 8010aee:	9b07      	ldrlt	r3, [sp, #28]
 8010af0:	9607      	strlt	r6, [sp, #28]
 8010af2:	1af2      	sublt	r2, r6, r3
 8010af4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8010af6:	bfb6      	itet	lt
 8010af8:	189b      	addlt	r3, r3, r2
 8010afa:	1b9e      	subge	r6, r3, r6
 8010afc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8010afe:	9b03      	ldr	r3, [sp, #12]
 8010b00:	bfb8      	it	lt
 8010b02:	2600      	movlt	r6, #0
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	bfb7      	itett	lt
 8010b08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8010b0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8010b10:	1a9d      	sublt	r5, r3, r2
 8010b12:	2300      	movlt	r3, #0
 8010b14:	e734      	b.n	8010980 <_dtoa_r+0x720>
 8010b16:	9e07      	ldr	r6, [sp, #28]
 8010b18:	9d04      	ldr	r5, [sp, #16]
 8010b1a:	9f08      	ldr	r7, [sp, #32]
 8010b1c:	e73b      	b.n	8010996 <_dtoa_r+0x736>
 8010b1e:	9a07      	ldr	r2, [sp, #28]
 8010b20:	e767      	b.n	80109f2 <_dtoa_r+0x792>
 8010b22:	9b06      	ldr	r3, [sp, #24]
 8010b24:	2b01      	cmp	r3, #1
 8010b26:	dc18      	bgt.n	8010b5a <_dtoa_r+0x8fa>
 8010b28:	f1ba 0f00 	cmp.w	sl, #0
 8010b2c:	d115      	bne.n	8010b5a <_dtoa_r+0x8fa>
 8010b2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8010b32:	b993      	cbnz	r3, 8010b5a <_dtoa_r+0x8fa>
 8010b34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010b38:	0d1b      	lsrs	r3, r3, #20
 8010b3a:	051b      	lsls	r3, r3, #20
 8010b3c:	b183      	cbz	r3, 8010b60 <_dtoa_r+0x900>
 8010b3e:	9b04      	ldr	r3, [sp, #16]
 8010b40:	3301      	adds	r3, #1
 8010b42:	9304      	str	r3, [sp, #16]
 8010b44:	9b05      	ldr	r3, [sp, #20]
 8010b46:	3301      	adds	r3, #1
 8010b48:	9305      	str	r3, [sp, #20]
 8010b4a:	f04f 0801 	mov.w	r8, #1
 8010b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	f47f af6a 	bne.w	8010a2a <_dtoa_r+0x7ca>
 8010b56:	2001      	movs	r0, #1
 8010b58:	e76f      	b.n	8010a3a <_dtoa_r+0x7da>
 8010b5a:	f04f 0800 	mov.w	r8, #0
 8010b5e:	e7f6      	b.n	8010b4e <_dtoa_r+0x8ee>
 8010b60:	4698      	mov	r8, r3
 8010b62:	e7f4      	b.n	8010b4e <_dtoa_r+0x8ee>
 8010b64:	f43f af7d 	beq.w	8010a62 <_dtoa_r+0x802>
 8010b68:	4618      	mov	r0, r3
 8010b6a:	301c      	adds	r0, #28
 8010b6c:	e772      	b.n	8010a54 <_dtoa_r+0x7f4>
 8010b6e:	9b03      	ldr	r3, [sp, #12]
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	dc37      	bgt.n	8010be4 <_dtoa_r+0x984>
 8010b74:	9b06      	ldr	r3, [sp, #24]
 8010b76:	2b02      	cmp	r3, #2
 8010b78:	dd34      	ble.n	8010be4 <_dtoa_r+0x984>
 8010b7a:	9b03      	ldr	r3, [sp, #12]
 8010b7c:	9302      	str	r3, [sp, #8]
 8010b7e:	9b02      	ldr	r3, [sp, #8]
 8010b80:	b96b      	cbnz	r3, 8010b9e <_dtoa_r+0x93e>
 8010b82:	4631      	mov	r1, r6
 8010b84:	2205      	movs	r2, #5
 8010b86:	4620      	mov	r0, r4
 8010b88:	f000 fa9e 	bl	80110c8 <__multadd>
 8010b8c:	4601      	mov	r1, r0
 8010b8e:	4606      	mov	r6, r0
 8010b90:	ee18 0a10 	vmov	r0, s16
 8010b94:	f000 fcb8 	bl	8011508 <__mcmp>
 8010b98:	2800      	cmp	r0, #0
 8010b9a:	f73f adbb 	bgt.w	8010714 <_dtoa_r+0x4b4>
 8010b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ba0:	9d01      	ldr	r5, [sp, #4]
 8010ba2:	43db      	mvns	r3, r3
 8010ba4:	9300      	str	r3, [sp, #0]
 8010ba6:	f04f 0800 	mov.w	r8, #0
 8010baa:	4631      	mov	r1, r6
 8010bac:	4620      	mov	r0, r4
 8010bae:	f000 fa69 	bl	8011084 <_Bfree>
 8010bb2:	2f00      	cmp	r7, #0
 8010bb4:	f43f aea4 	beq.w	8010900 <_dtoa_r+0x6a0>
 8010bb8:	f1b8 0f00 	cmp.w	r8, #0
 8010bbc:	d005      	beq.n	8010bca <_dtoa_r+0x96a>
 8010bbe:	45b8      	cmp	r8, r7
 8010bc0:	d003      	beq.n	8010bca <_dtoa_r+0x96a>
 8010bc2:	4641      	mov	r1, r8
 8010bc4:	4620      	mov	r0, r4
 8010bc6:	f000 fa5d 	bl	8011084 <_Bfree>
 8010bca:	4639      	mov	r1, r7
 8010bcc:	4620      	mov	r0, r4
 8010bce:	f000 fa59 	bl	8011084 <_Bfree>
 8010bd2:	e695      	b.n	8010900 <_dtoa_r+0x6a0>
 8010bd4:	2600      	movs	r6, #0
 8010bd6:	4637      	mov	r7, r6
 8010bd8:	e7e1      	b.n	8010b9e <_dtoa_r+0x93e>
 8010bda:	9700      	str	r7, [sp, #0]
 8010bdc:	4637      	mov	r7, r6
 8010bde:	e599      	b.n	8010714 <_dtoa_r+0x4b4>
 8010be0:	40240000 	.word	0x40240000
 8010be4:	9b08      	ldr	r3, [sp, #32]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	f000 80ca 	beq.w	8010d80 <_dtoa_r+0xb20>
 8010bec:	9b03      	ldr	r3, [sp, #12]
 8010bee:	9302      	str	r3, [sp, #8]
 8010bf0:	2d00      	cmp	r5, #0
 8010bf2:	dd05      	ble.n	8010c00 <_dtoa_r+0x9a0>
 8010bf4:	4639      	mov	r1, r7
 8010bf6:	462a      	mov	r2, r5
 8010bf8:	4620      	mov	r0, r4
 8010bfa:	f000 fc15 	bl	8011428 <__lshift>
 8010bfe:	4607      	mov	r7, r0
 8010c00:	f1b8 0f00 	cmp.w	r8, #0
 8010c04:	d05b      	beq.n	8010cbe <_dtoa_r+0xa5e>
 8010c06:	6879      	ldr	r1, [r7, #4]
 8010c08:	4620      	mov	r0, r4
 8010c0a:	f000 f9fb 	bl	8011004 <_Balloc>
 8010c0e:	4605      	mov	r5, r0
 8010c10:	b928      	cbnz	r0, 8010c1e <_dtoa_r+0x9be>
 8010c12:	4b87      	ldr	r3, [pc, #540]	; (8010e30 <_dtoa_r+0xbd0>)
 8010c14:	4602      	mov	r2, r0
 8010c16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8010c1a:	f7ff bb3b 	b.w	8010294 <_dtoa_r+0x34>
 8010c1e:	693a      	ldr	r2, [r7, #16]
 8010c20:	3202      	adds	r2, #2
 8010c22:	0092      	lsls	r2, r2, #2
 8010c24:	f107 010c 	add.w	r1, r7, #12
 8010c28:	300c      	adds	r0, #12
 8010c2a:	f7fe fba7 	bl	800f37c <memcpy>
 8010c2e:	2201      	movs	r2, #1
 8010c30:	4629      	mov	r1, r5
 8010c32:	4620      	mov	r0, r4
 8010c34:	f000 fbf8 	bl	8011428 <__lshift>
 8010c38:	9b01      	ldr	r3, [sp, #4]
 8010c3a:	f103 0901 	add.w	r9, r3, #1
 8010c3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8010c42:	4413      	add	r3, r2
 8010c44:	9305      	str	r3, [sp, #20]
 8010c46:	f00a 0301 	and.w	r3, sl, #1
 8010c4a:	46b8      	mov	r8, r7
 8010c4c:	9304      	str	r3, [sp, #16]
 8010c4e:	4607      	mov	r7, r0
 8010c50:	4631      	mov	r1, r6
 8010c52:	ee18 0a10 	vmov	r0, s16
 8010c56:	f7ff fa77 	bl	8010148 <quorem>
 8010c5a:	4641      	mov	r1, r8
 8010c5c:	9002      	str	r0, [sp, #8]
 8010c5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010c62:	ee18 0a10 	vmov	r0, s16
 8010c66:	f000 fc4f 	bl	8011508 <__mcmp>
 8010c6a:	463a      	mov	r2, r7
 8010c6c:	9003      	str	r0, [sp, #12]
 8010c6e:	4631      	mov	r1, r6
 8010c70:	4620      	mov	r0, r4
 8010c72:	f000 fc65 	bl	8011540 <__mdiff>
 8010c76:	68c2      	ldr	r2, [r0, #12]
 8010c78:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8010c7c:	4605      	mov	r5, r0
 8010c7e:	bb02      	cbnz	r2, 8010cc2 <_dtoa_r+0xa62>
 8010c80:	4601      	mov	r1, r0
 8010c82:	ee18 0a10 	vmov	r0, s16
 8010c86:	f000 fc3f 	bl	8011508 <__mcmp>
 8010c8a:	4602      	mov	r2, r0
 8010c8c:	4629      	mov	r1, r5
 8010c8e:	4620      	mov	r0, r4
 8010c90:	9207      	str	r2, [sp, #28]
 8010c92:	f000 f9f7 	bl	8011084 <_Bfree>
 8010c96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010c9a:	ea43 0102 	orr.w	r1, r3, r2
 8010c9e:	9b04      	ldr	r3, [sp, #16]
 8010ca0:	430b      	orrs	r3, r1
 8010ca2:	464d      	mov	r5, r9
 8010ca4:	d10f      	bne.n	8010cc6 <_dtoa_r+0xa66>
 8010ca6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010caa:	d02a      	beq.n	8010d02 <_dtoa_r+0xaa2>
 8010cac:	9b03      	ldr	r3, [sp, #12]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	dd02      	ble.n	8010cb8 <_dtoa_r+0xa58>
 8010cb2:	9b02      	ldr	r3, [sp, #8]
 8010cb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010cb8:	f88b a000 	strb.w	sl, [fp]
 8010cbc:	e775      	b.n	8010baa <_dtoa_r+0x94a>
 8010cbe:	4638      	mov	r0, r7
 8010cc0:	e7ba      	b.n	8010c38 <_dtoa_r+0x9d8>
 8010cc2:	2201      	movs	r2, #1
 8010cc4:	e7e2      	b.n	8010c8c <_dtoa_r+0xa2c>
 8010cc6:	9b03      	ldr	r3, [sp, #12]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	db04      	blt.n	8010cd6 <_dtoa_r+0xa76>
 8010ccc:	9906      	ldr	r1, [sp, #24]
 8010cce:	430b      	orrs	r3, r1
 8010cd0:	9904      	ldr	r1, [sp, #16]
 8010cd2:	430b      	orrs	r3, r1
 8010cd4:	d122      	bne.n	8010d1c <_dtoa_r+0xabc>
 8010cd6:	2a00      	cmp	r2, #0
 8010cd8:	ddee      	ble.n	8010cb8 <_dtoa_r+0xa58>
 8010cda:	ee18 1a10 	vmov	r1, s16
 8010cde:	2201      	movs	r2, #1
 8010ce0:	4620      	mov	r0, r4
 8010ce2:	f000 fba1 	bl	8011428 <__lshift>
 8010ce6:	4631      	mov	r1, r6
 8010ce8:	ee08 0a10 	vmov	s16, r0
 8010cec:	f000 fc0c 	bl	8011508 <__mcmp>
 8010cf0:	2800      	cmp	r0, #0
 8010cf2:	dc03      	bgt.n	8010cfc <_dtoa_r+0xa9c>
 8010cf4:	d1e0      	bne.n	8010cb8 <_dtoa_r+0xa58>
 8010cf6:	f01a 0f01 	tst.w	sl, #1
 8010cfa:	d0dd      	beq.n	8010cb8 <_dtoa_r+0xa58>
 8010cfc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010d00:	d1d7      	bne.n	8010cb2 <_dtoa_r+0xa52>
 8010d02:	2339      	movs	r3, #57	; 0x39
 8010d04:	f88b 3000 	strb.w	r3, [fp]
 8010d08:	462b      	mov	r3, r5
 8010d0a:	461d      	mov	r5, r3
 8010d0c:	3b01      	subs	r3, #1
 8010d0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010d12:	2a39      	cmp	r2, #57	; 0x39
 8010d14:	d071      	beq.n	8010dfa <_dtoa_r+0xb9a>
 8010d16:	3201      	adds	r2, #1
 8010d18:	701a      	strb	r2, [r3, #0]
 8010d1a:	e746      	b.n	8010baa <_dtoa_r+0x94a>
 8010d1c:	2a00      	cmp	r2, #0
 8010d1e:	dd07      	ble.n	8010d30 <_dtoa_r+0xad0>
 8010d20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010d24:	d0ed      	beq.n	8010d02 <_dtoa_r+0xaa2>
 8010d26:	f10a 0301 	add.w	r3, sl, #1
 8010d2a:	f88b 3000 	strb.w	r3, [fp]
 8010d2e:	e73c      	b.n	8010baa <_dtoa_r+0x94a>
 8010d30:	9b05      	ldr	r3, [sp, #20]
 8010d32:	f809 ac01 	strb.w	sl, [r9, #-1]
 8010d36:	4599      	cmp	r9, r3
 8010d38:	d047      	beq.n	8010dca <_dtoa_r+0xb6a>
 8010d3a:	ee18 1a10 	vmov	r1, s16
 8010d3e:	2300      	movs	r3, #0
 8010d40:	220a      	movs	r2, #10
 8010d42:	4620      	mov	r0, r4
 8010d44:	f000 f9c0 	bl	80110c8 <__multadd>
 8010d48:	45b8      	cmp	r8, r7
 8010d4a:	ee08 0a10 	vmov	s16, r0
 8010d4e:	f04f 0300 	mov.w	r3, #0
 8010d52:	f04f 020a 	mov.w	r2, #10
 8010d56:	4641      	mov	r1, r8
 8010d58:	4620      	mov	r0, r4
 8010d5a:	d106      	bne.n	8010d6a <_dtoa_r+0xb0a>
 8010d5c:	f000 f9b4 	bl	80110c8 <__multadd>
 8010d60:	4680      	mov	r8, r0
 8010d62:	4607      	mov	r7, r0
 8010d64:	f109 0901 	add.w	r9, r9, #1
 8010d68:	e772      	b.n	8010c50 <_dtoa_r+0x9f0>
 8010d6a:	f000 f9ad 	bl	80110c8 <__multadd>
 8010d6e:	4639      	mov	r1, r7
 8010d70:	4680      	mov	r8, r0
 8010d72:	2300      	movs	r3, #0
 8010d74:	220a      	movs	r2, #10
 8010d76:	4620      	mov	r0, r4
 8010d78:	f000 f9a6 	bl	80110c8 <__multadd>
 8010d7c:	4607      	mov	r7, r0
 8010d7e:	e7f1      	b.n	8010d64 <_dtoa_r+0xb04>
 8010d80:	9b03      	ldr	r3, [sp, #12]
 8010d82:	9302      	str	r3, [sp, #8]
 8010d84:	9d01      	ldr	r5, [sp, #4]
 8010d86:	ee18 0a10 	vmov	r0, s16
 8010d8a:	4631      	mov	r1, r6
 8010d8c:	f7ff f9dc 	bl	8010148 <quorem>
 8010d90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8010d94:	9b01      	ldr	r3, [sp, #4]
 8010d96:	f805 ab01 	strb.w	sl, [r5], #1
 8010d9a:	1aea      	subs	r2, r5, r3
 8010d9c:	9b02      	ldr	r3, [sp, #8]
 8010d9e:	4293      	cmp	r3, r2
 8010da0:	dd09      	ble.n	8010db6 <_dtoa_r+0xb56>
 8010da2:	ee18 1a10 	vmov	r1, s16
 8010da6:	2300      	movs	r3, #0
 8010da8:	220a      	movs	r2, #10
 8010daa:	4620      	mov	r0, r4
 8010dac:	f000 f98c 	bl	80110c8 <__multadd>
 8010db0:	ee08 0a10 	vmov	s16, r0
 8010db4:	e7e7      	b.n	8010d86 <_dtoa_r+0xb26>
 8010db6:	9b02      	ldr	r3, [sp, #8]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	bfc8      	it	gt
 8010dbc:	461d      	movgt	r5, r3
 8010dbe:	9b01      	ldr	r3, [sp, #4]
 8010dc0:	bfd8      	it	le
 8010dc2:	2501      	movle	r5, #1
 8010dc4:	441d      	add	r5, r3
 8010dc6:	f04f 0800 	mov.w	r8, #0
 8010dca:	ee18 1a10 	vmov	r1, s16
 8010dce:	2201      	movs	r2, #1
 8010dd0:	4620      	mov	r0, r4
 8010dd2:	f000 fb29 	bl	8011428 <__lshift>
 8010dd6:	4631      	mov	r1, r6
 8010dd8:	ee08 0a10 	vmov	s16, r0
 8010ddc:	f000 fb94 	bl	8011508 <__mcmp>
 8010de0:	2800      	cmp	r0, #0
 8010de2:	dc91      	bgt.n	8010d08 <_dtoa_r+0xaa8>
 8010de4:	d102      	bne.n	8010dec <_dtoa_r+0xb8c>
 8010de6:	f01a 0f01 	tst.w	sl, #1
 8010dea:	d18d      	bne.n	8010d08 <_dtoa_r+0xaa8>
 8010dec:	462b      	mov	r3, r5
 8010dee:	461d      	mov	r5, r3
 8010df0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010df4:	2a30      	cmp	r2, #48	; 0x30
 8010df6:	d0fa      	beq.n	8010dee <_dtoa_r+0xb8e>
 8010df8:	e6d7      	b.n	8010baa <_dtoa_r+0x94a>
 8010dfa:	9a01      	ldr	r2, [sp, #4]
 8010dfc:	429a      	cmp	r2, r3
 8010dfe:	d184      	bne.n	8010d0a <_dtoa_r+0xaaa>
 8010e00:	9b00      	ldr	r3, [sp, #0]
 8010e02:	3301      	adds	r3, #1
 8010e04:	9300      	str	r3, [sp, #0]
 8010e06:	2331      	movs	r3, #49	; 0x31
 8010e08:	7013      	strb	r3, [r2, #0]
 8010e0a:	e6ce      	b.n	8010baa <_dtoa_r+0x94a>
 8010e0c:	4b09      	ldr	r3, [pc, #36]	; (8010e34 <_dtoa_r+0xbd4>)
 8010e0e:	f7ff ba95 	b.w	801033c <_dtoa_r+0xdc>
 8010e12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	f47f aa6e 	bne.w	80102f6 <_dtoa_r+0x96>
 8010e1a:	4b07      	ldr	r3, [pc, #28]	; (8010e38 <_dtoa_r+0xbd8>)
 8010e1c:	f7ff ba8e 	b.w	801033c <_dtoa_r+0xdc>
 8010e20:	9b02      	ldr	r3, [sp, #8]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	dcae      	bgt.n	8010d84 <_dtoa_r+0xb24>
 8010e26:	9b06      	ldr	r3, [sp, #24]
 8010e28:	2b02      	cmp	r3, #2
 8010e2a:	f73f aea8 	bgt.w	8010b7e <_dtoa_r+0x91e>
 8010e2e:	e7a9      	b.n	8010d84 <_dtoa_r+0xb24>
 8010e30:	08012127 	.word	0x08012127
 8010e34:	08012084 	.word	0x08012084
 8010e38:	080120a8 	.word	0x080120a8

08010e3c <__sflush_r>:
 8010e3c:	898a      	ldrh	r2, [r1, #12]
 8010e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e42:	4605      	mov	r5, r0
 8010e44:	0710      	lsls	r0, r2, #28
 8010e46:	460c      	mov	r4, r1
 8010e48:	d458      	bmi.n	8010efc <__sflush_r+0xc0>
 8010e4a:	684b      	ldr	r3, [r1, #4]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	dc05      	bgt.n	8010e5c <__sflush_r+0x20>
 8010e50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	dc02      	bgt.n	8010e5c <__sflush_r+0x20>
 8010e56:	2000      	movs	r0, #0
 8010e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010e5e:	2e00      	cmp	r6, #0
 8010e60:	d0f9      	beq.n	8010e56 <__sflush_r+0x1a>
 8010e62:	2300      	movs	r3, #0
 8010e64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010e68:	682f      	ldr	r7, [r5, #0]
 8010e6a:	602b      	str	r3, [r5, #0]
 8010e6c:	d032      	beq.n	8010ed4 <__sflush_r+0x98>
 8010e6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010e70:	89a3      	ldrh	r3, [r4, #12]
 8010e72:	075a      	lsls	r2, r3, #29
 8010e74:	d505      	bpl.n	8010e82 <__sflush_r+0x46>
 8010e76:	6863      	ldr	r3, [r4, #4]
 8010e78:	1ac0      	subs	r0, r0, r3
 8010e7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010e7c:	b10b      	cbz	r3, 8010e82 <__sflush_r+0x46>
 8010e7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010e80:	1ac0      	subs	r0, r0, r3
 8010e82:	2300      	movs	r3, #0
 8010e84:	4602      	mov	r2, r0
 8010e86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010e88:	6a21      	ldr	r1, [r4, #32]
 8010e8a:	4628      	mov	r0, r5
 8010e8c:	47b0      	blx	r6
 8010e8e:	1c43      	adds	r3, r0, #1
 8010e90:	89a3      	ldrh	r3, [r4, #12]
 8010e92:	d106      	bne.n	8010ea2 <__sflush_r+0x66>
 8010e94:	6829      	ldr	r1, [r5, #0]
 8010e96:	291d      	cmp	r1, #29
 8010e98:	d82c      	bhi.n	8010ef4 <__sflush_r+0xb8>
 8010e9a:	4a2a      	ldr	r2, [pc, #168]	; (8010f44 <__sflush_r+0x108>)
 8010e9c:	40ca      	lsrs	r2, r1
 8010e9e:	07d6      	lsls	r6, r2, #31
 8010ea0:	d528      	bpl.n	8010ef4 <__sflush_r+0xb8>
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	6062      	str	r2, [r4, #4]
 8010ea6:	04d9      	lsls	r1, r3, #19
 8010ea8:	6922      	ldr	r2, [r4, #16]
 8010eaa:	6022      	str	r2, [r4, #0]
 8010eac:	d504      	bpl.n	8010eb8 <__sflush_r+0x7c>
 8010eae:	1c42      	adds	r2, r0, #1
 8010eb0:	d101      	bne.n	8010eb6 <__sflush_r+0x7a>
 8010eb2:	682b      	ldr	r3, [r5, #0]
 8010eb4:	b903      	cbnz	r3, 8010eb8 <__sflush_r+0x7c>
 8010eb6:	6560      	str	r0, [r4, #84]	; 0x54
 8010eb8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010eba:	602f      	str	r7, [r5, #0]
 8010ebc:	2900      	cmp	r1, #0
 8010ebe:	d0ca      	beq.n	8010e56 <__sflush_r+0x1a>
 8010ec0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010ec4:	4299      	cmp	r1, r3
 8010ec6:	d002      	beq.n	8010ece <__sflush_r+0x92>
 8010ec8:	4628      	mov	r0, r5
 8010eca:	f7fe fa6d 	bl	800f3a8 <_free_r>
 8010ece:	2000      	movs	r0, #0
 8010ed0:	6360      	str	r0, [r4, #52]	; 0x34
 8010ed2:	e7c1      	b.n	8010e58 <__sflush_r+0x1c>
 8010ed4:	6a21      	ldr	r1, [r4, #32]
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	4628      	mov	r0, r5
 8010eda:	47b0      	blx	r6
 8010edc:	1c41      	adds	r1, r0, #1
 8010ede:	d1c7      	bne.n	8010e70 <__sflush_r+0x34>
 8010ee0:	682b      	ldr	r3, [r5, #0]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d0c4      	beq.n	8010e70 <__sflush_r+0x34>
 8010ee6:	2b1d      	cmp	r3, #29
 8010ee8:	d001      	beq.n	8010eee <__sflush_r+0xb2>
 8010eea:	2b16      	cmp	r3, #22
 8010eec:	d101      	bne.n	8010ef2 <__sflush_r+0xb6>
 8010eee:	602f      	str	r7, [r5, #0]
 8010ef0:	e7b1      	b.n	8010e56 <__sflush_r+0x1a>
 8010ef2:	89a3      	ldrh	r3, [r4, #12]
 8010ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ef8:	81a3      	strh	r3, [r4, #12]
 8010efa:	e7ad      	b.n	8010e58 <__sflush_r+0x1c>
 8010efc:	690f      	ldr	r7, [r1, #16]
 8010efe:	2f00      	cmp	r7, #0
 8010f00:	d0a9      	beq.n	8010e56 <__sflush_r+0x1a>
 8010f02:	0793      	lsls	r3, r2, #30
 8010f04:	680e      	ldr	r6, [r1, #0]
 8010f06:	bf08      	it	eq
 8010f08:	694b      	ldreq	r3, [r1, #20]
 8010f0a:	600f      	str	r7, [r1, #0]
 8010f0c:	bf18      	it	ne
 8010f0e:	2300      	movne	r3, #0
 8010f10:	eba6 0807 	sub.w	r8, r6, r7
 8010f14:	608b      	str	r3, [r1, #8]
 8010f16:	f1b8 0f00 	cmp.w	r8, #0
 8010f1a:	dd9c      	ble.n	8010e56 <__sflush_r+0x1a>
 8010f1c:	6a21      	ldr	r1, [r4, #32]
 8010f1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010f20:	4643      	mov	r3, r8
 8010f22:	463a      	mov	r2, r7
 8010f24:	4628      	mov	r0, r5
 8010f26:	47b0      	blx	r6
 8010f28:	2800      	cmp	r0, #0
 8010f2a:	dc06      	bgt.n	8010f3a <__sflush_r+0xfe>
 8010f2c:	89a3      	ldrh	r3, [r4, #12]
 8010f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010f32:	81a3      	strh	r3, [r4, #12]
 8010f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f38:	e78e      	b.n	8010e58 <__sflush_r+0x1c>
 8010f3a:	4407      	add	r7, r0
 8010f3c:	eba8 0800 	sub.w	r8, r8, r0
 8010f40:	e7e9      	b.n	8010f16 <__sflush_r+0xda>
 8010f42:	bf00      	nop
 8010f44:	20400001 	.word	0x20400001

08010f48 <_fflush_r>:
 8010f48:	b538      	push	{r3, r4, r5, lr}
 8010f4a:	690b      	ldr	r3, [r1, #16]
 8010f4c:	4605      	mov	r5, r0
 8010f4e:	460c      	mov	r4, r1
 8010f50:	b913      	cbnz	r3, 8010f58 <_fflush_r+0x10>
 8010f52:	2500      	movs	r5, #0
 8010f54:	4628      	mov	r0, r5
 8010f56:	bd38      	pop	{r3, r4, r5, pc}
 8010f58:	b118      	cbz	r0, 8010f62 <_fflush_r+0x1a>
 8010f5a:	6983      	ldr	r3, [r0, #24]
 8010f5c:	b90b      	cbnz	r3, 8010f62 <_fflush_r+0x1a>
 8010f5e:	f7fe f937 	bl	800f1d0 <__sinit>
 8010f62:	4b14      	ldr	r3, [pc, #80]	; (8010fb4 <_fflush_r+0x6c>)
 8010f64:	429c      	cmp	r4, r3
 8010f66:	d11b      	bne.n	8010fa0 <_fflush_r+0x58>
 8010f68:	686c      	ldr	r4, [r5, #4]
 8010f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d0ef      	beq.n	8010f52 <_fflush_r+0xa>
 8010f72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010f74:	07d0      	lsls	r0, r2, #31
 8010f76:	d404      	bmi.n	8010f82 <_fflush_r+0x3a>
 8010f78:	0599      	lsls	r1, r3, #22
 8010f7a:	d402      	bmi.n	8010f82 <_fflush_r+0x3a>
 8010f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f7e:	f7fe f9ea 	bl	800f356 <__retarget_lock_acquire_recursive>
 8010f82:	4628      	mov	r0, r5
 8010f84:	4621      	mov	r1, r4
 8010f86:	f7ff ff59 	bl	8010e3c <__sflush_r>
 8010f8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010f8c:	07da      	lsls	r2, r3, #31
 8010f8e:	4605      	mov	r5, r0
 8010f90:	d4e0      	bmi.n	8010f54 <_fflush_r+0xc>
 8010f92:	89a3      	ldrh	r3, [r4, #12]
 8010f94:	059b      	lsls	r3, r3, #22
 8010f96:	d4dd      	bmi.n	8010f54 <_fflush_r+0xc>
 8010f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010f9a:	f7fe f9de 	bl	800f35a <__retarget_lock_release_recursive>
 8010f9e:	e7d9      	b.n	8010f54 <_fflush_r+0xc>
 8010fa0:	4b05      	ldr	r3, [pc, #20]	; (8010fb8 <_fflush_r+0x70>)
 8010fa2:	429c      	cmp	r4, r3
 8010fa4:	d101      	bne.n	8010faa <_fflush_r+0x62>
 8010fa6:	68ac      	ldr	r4, [r5, #8]
 8010fa8:	e7df      	b.n	8010f6a <_fflush_r+0x22>
 8010faa:	4b04      	ldr	r3, [pc, #16]	; (8010fbc <_fflush_r+0x74>)
 8010fac:	429c      	cmp	r4, r3
 8010fae:	bf08      	it	eq
 8010fb0:	68ec      	ldreq	r4, [r5, #12]
 8010fb2:	e7da      	b.n	8010f6a <_fflush_r+0x22>
 8010fb4:	08012030 	.word	0x08012030
 8010fb8:	08012050 	.word	0x08012050
 8010fbc:	08012010 	.word	0x08012010

08010fc0 <_localeconv_r>:
 8010fc0:	4800      	ldr	r0, [pc, #0]	; (8010fc4 <_localeconv_r+0x4>)
 8010fc2:	4770      	bx	lr
 8010fc4:	20000168 	.word	0x20000168

08010fc8 <_lseek_r>:
 8010fc8:	b538      	push	{r3, r4, r5, lr}
 8010fca:	4d07      	ldr	r5, [pc, #28]	; (8010fe8 <_lseek_r+0x20>)
 8010fcc:	4604      	mov	r4, r0
 8010fce:	4608      	mov	r0, r1
 8010fd0:	4611      	mov	r1, r2
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	602a      	str	r2, [r5, #0]
 8010fd6:	461a      	mov	r2, r3
 8010fd8:	f7f3 fec2 	bl	8004d60 <_lseek>
 8010fdc:	1c43      	adds	r3, r0, #1
 8010fde:	d102      	bne.n	8010fe6 <_lseek_r+0x1e>
 8010fe0:	682b      	ldr	r3, [r5, #0]
 8010fe2:	b103      	cbz	r3, 8010fe6 <_lseek_r+0x1e>
 8010fe4:	6023      	str	r3, [r4, #0]
 8010fe6:	bd38      	pop	{r3, r4, r5, pc}
 8010fe8:	2000a3f0 	.word	0x2000a3f0

08010fec <__malloc_lock>:
 8010fec:	4801      	ldr	r0, [pc, #4]	; (8010ff4 <__malloc_lock+0x8>)
 8010fee:	f7fe b9b2 	b.w	800f356 <__retarget_lock_acquire_recursive>
 8010ff2:	bf00      	nop
 8010ff4:	2000a3e5 	.word	0x2000a3e5

08010ff8 <__malloc_unlock>:
 8010ff8:	4801      	ldr	r0, [pc, #4]	; (8011000 <__malloc_unlock+0x8>)
 8010ffa:	f7fe b9ae 	b.w	800f35a <__retarget_lock_release_recursive>
 8010ffe:	bf00      	nop
 8011000:	2000a3e5 	.word	0x2000a3e5

08011004 <_Balloc>:
 8011004:	b570      	push	{r4, r5, r6, lr}
 8011006:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011008:	4604      	mov	r4, r0
 801100a:	460d      	mov	r5, r1
 801100c:	b976      	cbnz	r6, 801102c <_Balloc+0x28>
 801100e:	2010      	movs	r0, #16
 8011010:	f7fe f9a4 	bl	800f35c <malloc>
 8011014:	4602      	mov	r2, r0
 8011016:	6260      	str	r0, [r4, #36]	; 0x24
 8011018:	b920      	cbnz	r0, 8011024 <_Balloc+0x20>
 801101a:	4b18      	ldr	r3, [pc, #96]	; (801107c <_Balloc+0x78>)
 801101c:	4818      	ldr	r0, [pc, #96]	; (8011080 <_Balloc+0x7c>)
 801101e:	2166      	movs	r1, #102	; 0x66
 8011020:	f000 fb9c 	bl	801175c <__assert_func>
 8011024:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011028:	6006      	str	r6, [r0, #0]
 801102a:	60c6      	str	r6, [r0, #12]
 801102c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801102e:	68f3      	ldr	r3, [r6, #12]
 8011030:	b183      	cbz	r3, 8011054 <_Balloc+0x50>
 8011032:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011034:	68db      	ldr	r3, [r3, #12]
 8011036:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801103a:	b9b8      	cbnz	r0, 801106c <_Balloc+0x68>
 801103c:	2101      	movs	r1, #1
 801103e:	fa01 f605 	lsl.w	r6, r1, r5
 8011042:	1d72      	adds	r2, r6, #5
 8011044:	0092      	lsls	r2, r2, #2
 8011046:	4620      	mov	r0, r4
 8011048:	f000 fb60 	bl	801170c <_calloc_r>
 801104c:	b160      	cbz	r0, 8011068 <_Balloc+0x64>
 801104e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011052:	e00e      	b.n	8011072 <_Balloc+0x6e>
 8011054:	2221      	movs	r2, #33	; 0x21
 8011056:	2104      	movs	r1, #4
 8011058:	4620      	mov	r0, r4
 801105a:	f000 fb57 	bl	801170c <_calloc_r>
 801105e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011060:	60f0      	str	r0, [r6, #12]
 8011062:	68db      	ldr	r3, [r3, #12]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d1e4      	bne.n	8011032 <_Balloc+0x2e>
 8011068:	2000      	movs	r0, #0
 801106a:	bd70      	pop	{r4, r5, r6, pc}
 801106c:	6802      	ldr	r2, [r0, #0]
 801106e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8011072:	2300      	movs	r3, #0
 8011074:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011078:	e7f7      	b.n	801106a <_Balloc+0x66>
 801107a:	bf00      	nop
 801107c:	080120b5 	.word	0x080120b5
 8011080:	08012138 	.word	0x08012138

08011084 <_Bfree>:
 8011084:	b570      	push	{r4, r5, r6, lr}
 8011086:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011088:	4605      	mov	r5, r0
 801108a:	460c      	mov	r4, r1
 801108c:	b976      	cbnz	r6, 80110ac <_Bfree+0x28>
 801108e:	2010      	movs	r0, #16
 8011090:	f7fe f964 	bl	800f35c <malloc>
 8011094:	4602      	mov	r2, r0
 8011096:	6268      	str	r0, [r5, #36]	; 0x24
 8011098:	b920      	cbnz	r0, 80110a4 <_Bfree+0x20>
 801109a:	4b09      	ldr	r3, [pc, #36]	; (80110c0 <_Bfree+0x3c>)
 801109c:	4809      	ldr	r0, [pc, #36]	; (80110c4 <_Bfree+0x40>)
 801109e:	218a      	movs	r1, #138	; 0x8a
 80110a0:	f000 fb5c 	bl	801175c <__assert_func>
 80110a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80110a8:	6006      	str	r6, [r0, #0]
 80110aa:	60c6      	str	r6, [r0, #12]
 80110ac:	b13c      	cbz	r4, 80110be <_Bfree+0x3a>
 80110ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80110b0:	6862      	ldr	r2, [r4, #4]
 80110b2:	68db      	ldr	r3, [r3, #12]
 80110b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80110b8:	6021      	str	r1, [r4, #0]
 80110ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80110be:	bd70      	pop	{r4, r5, r6, pc}
 80110c0:	080120b5 	.word	0x080120b5
 80110c4:	08012138 	.word	0x08012138

080110c8 <__multadd>:
 80110c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110cc:	690d      	ldr	r5, [r1, #16]
 80110ce:	4607      	mov	r7, r0
 80110d0:	460c      	mov	r4, r1
 80110d2:	461e      	mov	r6, r3
 80110d4:	f101 0c14 	add.w	ip, r1, #20
 80110d8:	2000      	movs	r0, #0
 80110da:	f8dc 3000 	ldr.w	r3, [ip]
 80110de:	b299      	uxth	r1, r3
 80110e0:	fb02 6101 	mla	r1, r2, r1, r6
 80110e4:	0c1e      	lsrs	r6, r3, #16
 80110e6:	0c0b      	lsrs	r3, r1, #16
 80110e8:	fb02 3306 	mla	r3, r2, r6, r3
 80110ec:	b289      	uxth	r1, r1
 80110ee:	3001      	adds	r0, #1
 80110f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80110f4:	4285      	cmp	r5, r0
 80110f6:	f84c 1b04 	str.w	r1, [ip], #4
 80110fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80110fe:	dcec      	bgt.n	80110da <__multadd+0x12>
 8011100:	b30e      	cbz	r6, 8011146 <__multadd+0x7e>
 8011102:	68a3      	ldr	r3, [r4, #8]
 8011104:	42ab      	cmp	r3, r5
 8011106:	dc19      	bgt.n	801113c <__multadd+0x74>
 8011108:	6861      	ldr	r1, [r4, #4]
 801110a:	4638      	mov	r0, r7
 801110c:	3101      	adds	r1, #1
 801110e:	f7ff ff79 	bl	8011004 <_Balloc>
 8011112:	4680      	mov	r8, r0
 8011114:	b928      	cbnz	r0, 8011122 <__multadd+0x5a>
 8011116:	4602      	mov	r2, r0
 8011118:	4b0c      	ldr	r3, [pc, #48]	; (801114c <__multadd+0x84>)
 801111a:	480d      	ldr	r0, [pc, #52]	; (8011150 <__multadd+0x88>)
 801111c:	21b5      	movs	r1, #181	; 0xb5
 801111e:	f000 fb1d 	bl	801175c <__assert_func>
 8011122:	6922      	ldr	r2, [r4, #16]
 8011124:	3202      	adds	r2, #2
 8011126:	f104 010c 	add.w	r1, r4, #12
 801112a:	0092      	lsls	r2, r2, #2
 801112c:	300c      	adds	r0, #12
 801112e:	f7fe f925 	bl	800f37c <memcpy>
 8011132:	4621      	mov	r1, r4
 8011134:	4638      	mov	r0, r7
 8011136:	f7ff ffa5 	bl	8011084 <_Bfree>
 801113a:	4644      	mov	r4, r8
 801113c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8011140:	3501      	adds	r5, #1
 8011142:	615e      	str	r6, [r3, #20]
 8011144:	6125      	str	r5, [r4, #16]
 8011146:	4620      	mov	r0, r4
 8011148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801114c:	08012127 	.word	0x08012127
 8011150:	08012138 	.word	0x08012138

08011154 <__hi0bits>:
 8011154:	0c03      	lsrs	r3, r0, #16
 8011156:	041b      	lsls	r3, r3, #16
 8011158:	b9d3      	cbnz	r3, 8011190 <__hi0bits+0x3c>
 801115a:	0400      	lsls	r0, r0, #16
 801115c:	2310      	movs	r3, #16
 801115e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011162:	bf04      	itt	eq
 8011164:	0200      	lsleq	r0, r0, #8
 8011166:	3308      	addeq	r3, #8
 8011168:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801116c:	bf04      	itt	eq
 801116e:	0100      	lsleq	r0, r0, #4
 8011170:	3304      	addeq	r3, #4
 8011172:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011176:	bf04      	itt	eq
 8011178:	0080      	lsleq	r0, r0, #2
 801117a:	3302      	addeq	r3, #2
 801117c:	2800      	cmp	r0, #0
 801117e:	db05      	blt.n	801118c <__hi0bits+0x38>
 8011180:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011184:	f103 0301 	add.w	r3, r3, #1
 8011188:	bf08      	it	eq
 801118a:	2320      	moveq	r3, #32
 801118c:	4618      	mov	r0, r3
 801118e:	4770      	bx	lr
 8011190:	2300      	movs	r3, #0
 8011192:	e7e4      	b.n	801115e <__hi0bits+0xa>

08011194 <__lo0bits>:
 8011194:	6803      	ldr	r3, [r0, #0]
 8011196:	f013 0207 	ands.w	r2, r3, #7
 801119a:	4601      	mov	r1, r0
 801119c:	d00b      	beq.n	80111b6 <__lo0bits+0x22>
 801119e:	07da      	lsls	r2, r3, #31
 80111a0:	d423      	bmi.n	80111ea <__lo0bits+0x56>
 80111a2:	0798      	lsls	r0, r3, #30
 80111a4:	bf49      	itett	mi
 80111a6:	085b      	lsrmi	r3, r3, #1
 80111a8:	089b      	lsrpl	r3, r3, #2
 80111aa:	2001      	movmi	r0, #1
 80111ac:	600b      	strmi	r3, [r1, #0]
 80111ae:	bf5c      	itt	pl
 80111b0:	600b      	strpl	r3, [r1, #0]
 80111b2:	2002      	movpl	r0, #2
 80111b4:	4770      	bx	lr
 80111b6:	b298      	uxth	r0, r3
 80111b8:	b9a8      	cbnz	r0, 80111e6 <__lo0bits+0x52>
 80111ba:	0c1b      	lsrs	r3, r3, #16
 80111bc:	2010      	movs	r0, #16
 80111be:	b2da      	uxtb	r2, r3
 80111c0:	b90a      	cbnz	r2, 80111c6 <__lo0bits+0x32>
 80111c2:	3008      	adds	r0, #8
 80111c4:	0a1b      	lsrs	r3, r3, #8
 80111c6:	071a      	lsls	r2, r3, #28
 80111c8:	bf04      	itt	eq
 80111ca:	091b      	lsreq	r3, r3, #4
 80111cc:	3004      	addeq	r0, #4
 80111ce:	079a      	lsls	r2, r3, #30
 80111d0:	bf04      	itt	eq
 80111d2:	089b      	lsreq	r3, r3, #2
 80111d4:	3002      	addeq	r0, #2
 80111d6:	07da      	lsls	r2, r3, #31
 80111d8:	d403      	bmi.n	80111e2 <__lo0bits+0x4e>
 80111da:	085b      	lsrs	r3, r3, #1
 80111dc:	f100 0001 	add.w	r0, r0, #1
 80111e0:	d005      	beq.n	80111ee <__lo0bits+0x5a>
 80111e2:	600b      	str	r3, [r1, #0]
 80111e4:	4770      	bx	lr
 80111e6:	4610      	mov	r0, r2
 80111e8:	e7e9      	b.n	80111be <__lo0bits+0x2a>
 80111ea:	2000      	movs	r0, #0
 80111ec:	4770      	bx	lr
 80111ee:	2020      	movs	r0, #32
 80111f0:	4770      	bx	lr
	...

080111f4 <__i2b>:
 80111f4:	b510      	push	{r4, lr}
 80111f6:	460c      	mov	r4, r1
 80111f8:	2101      	movs	r1, #1
 80111fa:	f7ff ff03 	bl	8011004 <_Balloc>
 80111fe:	4602      	mov	r2, r0
 8011200:	b928      	cbnz	r0, 801120e <__i2b+0x1a>
 8011202:	4b05      	ldr	r3, [pc, #20]	; (8011218 <__i2b+0x24>)
 8011204:	4805      	ldr	r0, [pc, #20]	; (801121c <__i2b+0x28>)
 8011206:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801120a:	f000 faa7 	bl	801175c <__assert_func>
 801120e:	2301      	movs	r3, #1
 8011210:	6144      	str	r4, [r0, #20]
 8011212:	6103      	str	r3, [r0, #16]
 8011214:	bd10      	pop	{r4, pc}
 8011216:	bf00      	nop
 8011218:	08012127 	.word	0x08012127
 801121c:	08012138 	.word	0x08012138

08011220 <__multiply>:
 8011220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011224:	4691      	mov	r9, r2
 8011226:	690a      	ldr	r2, [r1, #16]
 8011228:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801122c:	429a      	cmp	r2, r3
 801122e:	bfb8      	it	lt
 8011230:	460b      	movlt	r3, r1
 8011232:	460c      	mov	r4, r1
 8011234:	bfbc      	itt	lt
 8011236:	464c      	movlt	r4, r9
 8011238:	4699      	movlt	r9, r3
 801123a:	6927      	ldr	r7, [r4, #16]
 801123c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8011240:	68a3      	ldr	r3, [r4, #8]
 8011242:	6861      	ldr	r1, [r4, #4]
 8011244:	eb07 060a 	add.w	r6, r7, sl
 8011248:	42b3      	cmp	r3, r6
 801124a:	b085      	sub	sp, #20
 801124c:	bfb8      	it	lt
 801124e:	3101      	addlt	r1, #1
 8011250:	f7ff fed8 	bl	8011004 <_Balloc>
 8011254:	b930      	cbnz	r0, 8011264 <__multiply+0x44>
 8011256:	4602      	mov	r2, r0
 8011258:	4b44      	ldr	r3, [pc, #272]	; (801136c <__multiply+0x14c>)
 801125a:	4845      	ldr	r0, [pc, #276]	; (8011370 <__multiply+0x150>)
 801125c:	f240 115d 	movw	r1, #349	; 0x15d
 8011260:	f000 fa7c 	bl	801175c <__assert_func>
 8011264:	f100 0514 	add.w	r5, r0, #20
 8011268:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801126c:	462b      	mov	r3, r5
 801126e:	2200      	movs	r2, #0
 8011270:	4543      	cmp	r3, r8
 8011272:	d321      	bcc.n	80112b8 <__multiply+0x98>
 8011274:	f104 0314 	add.w	r3, r4, #20
 8011278:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801127c:	f109 0314 	add.w	r3, r9, #20
 8011280:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011284:	9202      	str	r2, [sp, #8]
 8011286:	1b3a      	subs	r2, r7, r4
 8011288:	3a15      	subs	r2, #21
 801128a:	f022 0203 	bic.w	r2, r2, #3
 801128e:	3204      	adds	r2, #4
 8011290:	f104 0115 	add.w	r1, r4, #21
 8011294:	428f      	cmp	r7, r1
 8011296:	bf38      	it	cc
 8011298:	2204      	movcc	r2, #4
 801129a:	9201      	str	r2, [sp, #4]
 801129c:	9a02      	ldr	r2, [sp, #8]
 801129e:	9303      	str	r3, [sp, #12]
 80112a0:	429a      	cmp	r2, r3
 80112a2:	d80c      	bhi.n	80112be <__multiply+0x9e>
 80112a4:	2e00      	cmp	r6, #0
 80112a6:	dd03      	ble.n	80112b0 <__multiply+0x90>
 80112a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d05a      	beq.n	8011366 <__multiply+0x146>
 80112b0:	6106      	str	r6, [r0, #16]
 80112b2:	b005      	add	sp, #20
 80112b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112b8:	f843 2b04 	str.w	r2, [r3], #4
 80112bc:	e7d8      	b.n	8011270 <__multiply+0x50>
 80112be:	f8b3 a000 	ldrh.w	sl, [r3]
 80112c2:	f1ba 0f00 	cmp.w	sl, #0
 80112c6:	d024      	beq.n	8011312 <__multiply+0xf2>
 80112c8:	f104 0e14 	add.w	lr, r4, #20
 80112cc:	46a9      	mov	r9, r5
 80112ce:	f04f 0c00 	mov.w	ip, #0
 80112d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 80112d6:	f8d9 1000 	ldr.w	r1, [r9]
 80112da:	fa1f fb82 	uxth.w	fp, r2
 80112de:	b289      	uxth	r1, r1
 80112e0:	fb0a 110b 	mla	r1, sl, fp, r1
 80112e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80112e8:	f8d9 2000 	ldr.w	r2, [r9]
 80112ec:	4461      	add	r1, ip
 80112ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80112f2:	fb0a c20b 	mla	r2, sl, fp, ip
 80112f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80112fa:	b289      	uxth	r1, r1
 80112fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8011300:	4577      	cmp	r7, lr
 8011302:	f849 1b04 	str.w	r1, [r9], #4
 8011306:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801130a:	d8e2      	bhi.n	80112d2 <__multiply+0xb2>
 801130c:	9a01      	ldr	r2, [sp, #4]
 801130e:	f845 c002 	str.w	ip, [r5, r2]
 8011312:	9a03      	ldr	r2, [sp, #12]
 8011314:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011318:	3304      	adds	r3, #4
 801131a:	f1b9 0f00 	cmp.w	r9, #0
 801131e:	d020      	beq.n	8011362 <__multiply+0x142>
 8011320:	6829      	ldr	r1, [r5, #0]
 8011322:	f104 0c14 	add.w	ip, r4, #20
 8011326:	46ae      	mov	lr, r5
 8011328:	f04f 0a00 	mov.w	sl, #0
 801132c:	f8bc b000 	ldrh.w	fp, [ip]
 8011330:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011334:	fb09 220b 	mla	r2, r9, fp, r2
 8011338:	4492      	add	sl, r2
 801133a:	b289      	uxth	r1, r1
 801133c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011340:	f84e 1b04 	str.w	r1, [lr], #4
 8011344:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011348:	f8be 1000 	ldrh.w	r1, [lr]
 801134c:	0c12      	lsrs	r2, r2, #16
 801134e:	fb09 1102 	mla	r1, r9, r2, r1
 8011352:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011356:	4567      	cmp	r7, ip
 8011358:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801135c:	d8e6      	bhi.n	801132c <__multiply+0x10c>
 801135e:	9a01      	ldr	r2, [sp, #4]
 8011360:	50a9      	str	r1, [r5, r2]
 8011362:	3504      	adds	r5, #4
 8011364:	e79a      	b.n	801129c <__multiply+0x7c>
 8011366:	3e01      	subs	r6, #1
 8011368:	e79c      	b.n	80112a4 <__multiply+0x84>
 801136a:	bf00      	nop
 801136c:	08012127 	.word	0x08012127
 8011370:	08012138 	.word	0x08012138

08011374 <__pow5mult>:
 8011374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011378:	4615      	mov	r5, r2
 801137a:	f012 0203 	ands.w	r2, r2, #3
 801137e:	4606      	mov	r6, r0
 8011380:	460f      	mov	r7, r1
 8011382:	d007      	beq.n	8011394 <__pow5mult+0x20>
 8011384:	4c25      	ldr	r4, [pc, #148]	; (801141c <__pow5mult+0xa8>)
 8011386:	3a01      	subs	r2, #1
 8011388:	2300      	movs	r3, #0
 801138a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801138e:	f7ff fe9b 	bl	80110c8 <__multadd>
 8011392:	4607      	mov	r7, r0
 8011394:	10ad      	asrs	r5, r5, #2
 8011396:	d03d      	beq.n	8011414 <__pow5mult+0xa0>
 8011398:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801139a:	b97c      	cbnz	r4, 80113bc <__pow5mult+0x48>
 801139c:	2010      	movs	r0, #16
 801139e:	f7fd ffdd 	bl	800f35c <malloc>
 80113a2:	4602      	mov	r2, r0
 80113a4:	6270      	str	r0, [r6, #36]	; 0x24
 80113a6:	b928      	cbnz	r0, 80113b4 <__pow5mult+0x40>
 80113a8:	4b1d      	ldr	r3, [pc, #116]	; (8011420 <__pow5mult+0xac>)
 80113aa:	481e      	ldr	r0, [pc, #120]	; (8011424 <__pow5mult+0xb0>)
 80113ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80113b0:	f000 f9d4 	bl	801175c <__assert_func>
 80113b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80113b8:	6004      	str	r4, [r0, #0]
 80113ba:	60c4      	str	r4, [r0, #12]
 80113bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80113c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80113c4:	b94c      	cbnz	r4, 80113da <__pow5mult+0x66>
 80113c6:	f240 2171 	movw	r1, #625	; 0x271
 80113ca:	4630      	mov	r0, r6
 80113cc:	f7ff ff12 	bl	80111f4 <__i2b>
 80113d0:	2300      	movs	r3, #0
 80113d2:	f8c8 0008 	str.w	r0, [r8, #8]
 80113d6:	4604      	mov	r4, r0
 80113d8:	6003      	str	r3, [r0, #0]
 80113da:	f04f 0900 	mov.w	r9, #0
 80113de:	07eb      	lsls	r3, r5, #31
 80113e0:	d50a      	bpl.n	80113f8 <__pow5mult+0x84>
 80113e2:	4639      	mov	r1, r7
 80113e4:	4622      	mov	r2, r4
 80113e6:	4630      	mov	r0, r6
 80113e8:	f7ff ff1a 	bl	8011220 <__multiply>
 80113ec:	4639      	mov	r1, r7
 80113ee:	4680      	mov	r8, r0
 80113f0:	4630      	mov	r0, r6
 80113f2:	f7ff fe47 	bl	8011084 <_Bfree>
 80113f6:	4647      	mov	r7, r8
 80113f8:	106d      	asrs	r5, r5, #1
 80113fa:	d00b      	beq.n	8011414 <__pow5mult+0xa0>
 80113fc:	6820      	ldr	r0, [r4, #0]
 80113fe:	b938      	cbnz	r0, 8011410 <__pow5mult+0x9c>
 8011400:	4622      	mov	r2, r4
 8011402:	4621      	mov	r1, r4
 8011404:	4630      	mov	r0, r6
 8011406:	f7ff ff0b 	bl	8011220 <__multiply>
 801140a:	6020      	str	r0, [r4, #0]
 801140c:	f8c0 9000 	str.w	r9, [r0]
 8011410:	4604      	mov	r4, r0
 8011412:	e7e4      	b.n	80113de <__pow5mult+0x6a>
 8011414:	4638      	mov	r0, r7
 8011416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801141a:	bf00      	nop
 801141c:	08012288 	.word	0x08012288
 8011420:	080120b5 	.word	0x080120b5
 8011424:	08012138 	.word	0x08012138

08011428 <__lshift>:
 8011428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801142c:	460c      	mov	r4, r1
 801142e:	6849      	ldr	r1, [r1, #4]
 8011430:	6923      	ldr	r3, [r4, #16]
 8011432:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011436:	68a3      	ldr	r3, [r4, #8]
 8011438:	4607      	mov	r7, r0
 801143a:	4691      	mov	r9, r2
 801143c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011440:	f108 0601 	add.w	r6, r8, #1
 8011444:	42b3      	cmp	r3, r6
 8011446:	db0b      	blt.n	8011460 <__lshift+0x38>
 8011448:	4638      	mov	r0, r7
 801144a:	f7ff fddb 	bl	8011004 <_Balloc>
 801144e:	4605      	mov	r5, r0
 8011450:	b948      	cbnz	r0, 8011466 <__lshift+0x3e>
 8011452:	4602      	mov	r2, r0
 8011454:	4b2a      	ldr	r3, [pc, #168]	; (8011500 <__lshift+0xd8>)
 8011456:	482b      	ldr	r0, [pc, #172]	; (8011504 <__lshift+0xdc>)
 8011458:	f240 11d9 	movw	r1, #473	; 0x1d9
 801145c:	f000 f97e 	bl	801175c <__assert_func>
 8011460:	3101      	adds	r1, #1
 8011462:	005b      	lsls	r3, r3, #1
 8011464:	e7ee      	b.n	8011444 <__lshift+0x1c>
 8011466:	2300      	movs	r3, #0
 8011468:	f100 0114 	add.w	r1, r0, #20
 801146c:	f100 0210 	add.w	r2, r0, #16
 8011470:	4618      	mov	r0, r3
 8011472:	4553      	cmp	r3, sl
 8011474:	db37      	blt.n	80114e6 <__lshift+0xbe>
 8011476:	6920      	ldr	r0, [r4, #16]
 8011478:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801147c:	f104 0314 	add.w	r3, r4, #20
 8011480:	f019 091f 	ands.w	r9, r9, #31
 8011484:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011488:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801148c:	d02f      	beq.n	80114ee <__lshift+0xc6>
 801148e:	f1c9 0e20 	rsb	lr, r9, #32
 8011492:	468a      	mov	sl, r1
 8011494:	f04f 0c00 	mov.w	ip, #0
 8011498:	681a      	ldr	r2, [r3, #0]
 801149a:	fa02 f209 	lsl.w	r2, r2, r9
 801149e:	ea42 020c 	orr.w	r2, r2, ip
 80114a2:	f84a 2b04 	str.w	r2, [sl], #4
 80114a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80114aa:	4298      	cmp	r0, r3
 80114ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 80114b0:	d8f2      	bhi.n	8011498 <__lshift+0x70>
 80114b2:	1b03      	subs	r3, r0, r4
 80114b4:	3b15      	subs	r3, #21
 80114b6:	f023 0303 	bic.w	r3, r3, #3
 80114ba:	3304      	adds	r3, #4
 80114bc:	f104 0215 	add.w	r2, r4, #21
 80114c0:	4290      	cmp	r0, r2
 80114c2:	bf38      	it	cc
 80114c4:	2304      	movcc	r3, #4
 80114c6:	f841 c003 	str.w	ip, [r1, r3]
 80114ca:	f1bc 0f00 	cmp.w	ip, #0
 80114ce:	d001      	beq.n	80114d4 <__lshift+0xac>
 80114d0:	f108 0602 	add.w	r6, r8, #2
 80114d4:	3e01      	subs	r6, #1
 80114d6:	4638      	mov	r0, r7
 80114d8:	612e      	str	r6, [r5, #16]
 80114da:	4621      	mov	r1, r4
 80114dc:	f7ff fdd2 	bl	8011084 <_Bfree>
 80114e0:	4628      	mov	r0, r5
 80114e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114e6:	f842 0f04 	str.w	r0, [r2, #4]!
 80114ea:	3301      	adds	r3, #1
 80114ec:	e7c1      	b.n	8011472 <__lshift+0x4a>
 80114ee:	3904      	subs	r1, #4
 80114f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80114f4:	f841 2f04 	str.w	r2, [r1, #4]!
 80114f8:	4298      	cmp	r0, r3
 80114fa:	d8f9      	bhi.n	80114f0 <__lshift+0xc8>
 80114fc:	e7ea      	b.n	80114d4 <__lshift+0xac>
 80114fe:	bf00      	nop
 8011500:	08012127 	.word	0x08012127
 8011504:	08012138 	.word	0x08012138

08011508 <__mcmp>:
 8011508:	b530      	push	{r4, r5, lr}
 801150a:	6902      	ldr	r2, [r0, #16]
 801150c:	690c      	ldr	r4, [r1, #16]
 801150e:	1b12      	subs	r2, r2, r4
 8011510:	d10e      	bne.n	8011530 <__mcmp+0x28>
 8011512:	f100 0314 	add.w	r3, r0, #20
 8011516:	3114      	adds	r1, #20
 8011518:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801151c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011520:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011524:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011528:	42a5      	cmp	r5, r4
 801152a:	d003      	beq.n	8011534 <__mcmp+0x2c>
 801152c:	d305      	bcc.n	801153a <__mcmp+0x32>
 801152e:	2201      	movs	r2, #1
 8011530:	4610      	mov	r0, r2
 8011532:	bd30      	pop	{r4, r5, pc}
 8011534:	4283      	cmp	r3, r0
 8011536:	d3f3      	bcc.n	8011520 <__mcmp+0x18>
 8011538:	e7fa      	b.n	8011530 <__mcmp+0x28>
 801153a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801153e:	e7f7      	b.n	8011530 <__mcmp+0x28>

08011540 <__mdiff>:
 8011540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011544:	460c      	mov	r4, r1
 8011546:	4606      	mov	r6, r0
 8011548:	4611      	mov	r1, r2
 801154a:	4620      	mov	r0, r4
 801154c:	4690      	mov	r8, r2
 801154e:	f7ff ffdb 	bl	8011508 <__mcmp>
 8011552:	1e05      	subs	r5, r0, #0
 8011554:	d110      	bne.n	8011578 <__mdiff+0x38>
 8011556:	4629      	mov	r1, r5
 8011558:	4630      	mov	r0, r6
 801155a:	f7ff fd53 	bl	8011004 <_Balloc>
 801155e:	b930      	cbnz	r0, 801156e <__mdiff+0x2e>
 8011560:	4b3a      	ldr	r3, [pc, #232]	; (801164c <__mdiff+0x10c>)
 8011562:	4602      	mov	r2, r0
 8011564:	f240 2132 	movw	r1, #562	; 0x232
 8011568:	4839      	ldr	r0, [pc, #228]	; (8011650 <__mdiff+0x110>)
 801156a:	f000 f8f7 	bl	801175c <__assert_func>
 801156e:	2301      	movs	r3, #1
 8011570:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011574:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011578:	bfa4      	itt	ge
 801157a:	4643      	movge	r3, r8
 801157c:	46a0      	movge	r8, r4
 801157e:	4630      	mov	r0, r6
 8011580:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011584:	bfa6      	itte	ge
 8011586:	461c      	movge	r4, r3
 8011588:	2500      	movge	r5, #0
 801158a:	2501      	movlt	r5, #1
 801158c:	f7ff fd3a 	bl	8011004 <_Balloc>
 8011590:	b920      	cbnz	r0, 801159c <__mdiff+0x5c>
 8011592:	4b2e      	ldr	r3, [pc, #184]	; (801164c <__mdiff+0x10c>)
 8011594:	4602      	mov	r2, r0
 8011596:	f44f 7110 	mov.w	r1, #576	; 0x240
 801159a:	e7e5      	b.n	8011568 <__mdiff+0x28>
 801159c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80115a0:	6926      	ldr	r6, [r4, #16]
 80115a2:	60c5      	str	r5, [r0, #12]
 80115a4:	f104 0914 	add.w	r9, r4, #20
 80115a8:	f108 0514 	add.w	r5, r8, #20
 80115ac:	f100 0e14 	add.w	lr, r0, #20
 80115b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80115b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80115b8:	f108 0210 	add.w	r2, r8, #16
 80115bc:	46f2      	mov	sl, lr
 80115be:	2100      	movs	r1, #0
 80115c0:	f859 3b04 	ldr.w	r3, [r9], #4
 80115c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80115c8:	fa1f f883 	uxth.w	r8, r3
 80115cc:	fa11 f18b 	uxtah	r1, r1, fp
 80115d0:	0c1b      	lsrs	r3, r3, #16
 80115d2:	eba1 0808 	sub.w	r8, r1, r8
 80115d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80115da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80115de:	fa1f f888 	uxth.w	r8, r8
 80115e2:	1419      	asrs	r1, r3, #16
 80115e4:	454e      	cmp	r6, r9
 80115e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80115ea:	f84a 3b04 	str.w	r3, [sl], #4
 80115ee:	d8e7      	bhi.n	80115c0 <__mdiff+0x80>
 80115f0:	1b33      	subs	r3, r6, r4
 80115f2:	3b15      	subs	r3, #21
 80115f4:	f023 0303 	bic.w	r3, r3, #3
 80115f8:	3304      	adds	r3, #4
 80115fa:	3415      	adds	r4, #21
 80115fc:	42a6      	cmp	r6, r4
 80115fe:	bf38      	it	cc
 8011600:	2304      	movcc	r3, #4
 8011602:	441d      	add	r5, r3
 8011604:	4473      	add	r3, lr
 8011606:	469e      	mov	lr, r3
 8011608:	462e      	mov	r6, r5
 801160a:	4566      	cmp	r6, ip
 801160c:	d30e      	bcc.n	801162c <__mdiff+0xec>
 801160e:	f10c 0203 	add.w	r2, ip, #3
 8011612:	1b52      	subs	r2, r2, r5
 8011614:	f022 0203 	bic.w	r2, r2, #3
 8011618:	3d03      	subs	r5, #3
 801161a:	45ac      	cmp	ip, r5
 801161c:	bf38      	it	cc
 801161e:	2200      	movcc	r2, #0
 8011620:	441a      	add	r2, r3
 8011622:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011626:	b17b      	cbz	r3, 8011648 <__mdiff+0x108>
 8011628:	6107      	str	r7, [r0, #16]
 801162a:	e7a3      	b.n	8011574 <__mdiff+0x34>
 801162c:	f856 8b04 	ldr.w	r8, [r6], #4
 8011630:	fa11 f288 	uxtah	r2, r1, r8
 8011634:	1414      	asrs	r4, r2, #16
 8011636:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801163a:	b292      	uxth	r2, r2
 801163c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011640:	f84e 2b04 	str.w	r2, [lr], #4
 8011644:	1421      	asrs	r1, r4, #16
 8011646:	e7e0      	b.n	801160a <__mdiff+0xca>
 8011648:	3f01      	subs	r7, #1
 801164a:	e7ea      	b.n	8011622 <__mdiff+0xe2>
 801164c:	08012127 	.word	0x08012127
 8011650:	08012138 	.word	0x08012138

08011654 <__d2b>:
 8011654:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011658:	4689      	mov	r9, r1
 801165a:	2101      	movs	r1, #1
 801165c:	ec57 6b10 	vmov	r6, r7, d0
 8011660:	4690      	mov	r8, r2
 8011662:	f7ff fccf 	bl	8011004 <_Balloc>
 8011666:	4604      	mov	r4, r0
 8011668:	b930      	cbnz	r0, 8011678 <__d2b+0x24>
 801166a:	4602      	mov	r2, r0
 801166c:	4b25      	ldr	r3, [pc, #148]	; (8011704 <__d2b+0xb0>)
 801166e:	4826      	ldr	r0, [pc, #152]	; (8011708 <__d2b+0xb4>)
 8011670:	f240 310a 	movw	r1, #778	; 0x30a
 8011674:	f000 f872 	bl	801175c <__assert_func>
 8011678:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801167c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011680:	bb35      	cbnz	r5, 80116d0 <__d2b+0x7c>
 8011682:	2e00      	cmp	r6, #0
 8011684:	9301      	str	r3, [sp, #4]
 8011686:	d028      	beq.n	80116da <__d2b+0x86>
 8011688:	4668      	mov	r0, sp
 801168a:	9600      	str	r6, [sp, #0]
 801168c:	f7ff fd82 	bl	8011194 <__lo0bits>
 8011690:	9900      	ldr	r1, [sp, #0]
 8011692:	b300      	cbz	r0, 80116d6 <__d2b+0x82>
 8011694:	9a01      	ldr	r2, [sp, #4]
 8011696:	f1c0 0320 	rsb	r3, r0, #32
 801169a:	fa02 f303 	lsl.w	r3, r2, r3
 801169e:	430b      	orrs	r3, r1
 80116a0:	40c2      	lsrs	r2, r0
 80116a2:	6163      	str	r3, [r4, #20]
 80116a4:	9201      	str	r2, [sp, #4]
 80116a6:	9b01      	ldr	r3, [sp, #4]
 80116a8:	61a3      	str	r3, [r4, #24]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	bf14      	ite	ne
 80116ae:	2202      	movne	r2, #2
 80116b0:	2201      	moveq	r2, #1
 80116b2:	6122      	str	r2, [r4, #16]
 80116b4:	b1d5      	cbz	r5, 80116ec <__d2b+0x98>
 80116b6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80116ba:	4405      	add	r5, r0
 80116bc:	f8c9 5000 	str.w	r5, [r9]
 80116c0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80116c4:	f8c8 0000 	str.w	r0, [r8]
 80116c8:	4620      	mov	r0, r4
 80116ca:	b003      	add	sp, #12
 80116cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80116d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80116d4:	e7d5      	b.n	8011682 <__d2b+0x2e>
 80116d6:	6161      	str	r1, [r4, #20]
 80116d8:	e7e5      	b.n	80116a6 <__d2b+0x52>
 80116da:	a801      	add	r0, sp, #4
 80116dc:	f7ff fd5a 	bl	8011194 <__lo0bits>
 80116e0:	9b01      	ldr	r3, [sp, #4]
 80116e2:	6163      	str	r3, [r4, #20]
 80116e4:	2201      	movs	r2, #1
 80116e6:	6122      	str	r2, [r4, #16]
 80116e8:	3020      	adds	r0, #32
 80116ea:	e7e3      	b.n	80116b4 <__d2b+0x60>
 80116ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80116f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80116f4:	f8c9 0000 	str.w	r0, [r9]
 80116f8:	6918      	ldr	r0, [r3, #16]
 80116fa:	f7ff fd2b 	bl	8011154 <__hi0bits>
 80116fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011702:	e7df      	b.n	80116c4 <__d2b+0x70>
 8011704:	08012127 	.word	0x08012127
 8011708:	08012138 	.word	0x08012138

0801170c <_calloc_r>:
 801170c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801170e:	fba1 2402 	umull	r2, r4, r1, r2
 8011712:	b94c      	cbnz	r4, 8011728 <_calloc_r+0x1c>
 8011714:	4611      	mov	r1, r2
 8011716:	9201      	str	r2, [sp, #4]
 8011718:	f7fd feb2 	bl	800f480 <_malloc_r>
 801171c:	9a01      	ldr	r2, [sp, #4]
 801171e:	4605      	mov	r5, r0
 8011720:	b930      	cbnz	r0, 8011730 <_calloc_r+0x24>
 8011722:	4628      	mov	r0, r5
 8011724:	b003      	add	sp, #12
 8011726:	bd30      	pop	{r4, r5, pc}
 8011728:	220c      	movs	r2, #12
 801172a:	6002      	str	r2, [r0, #0]
 801172c:	2500      	movs	r5, #0
 801172e:	e7f8      	b.n	8011722 <_calloc_r+0x16>
 8011730:	4621      	mov	r1, r4
 8011732:	f7fd fe31 	bl	800f398 <memset>
 8011736:	e7f4      	b.n	8011722 <_calloc_r+0x16>

08011738 <_read_r>:
 8011738:	b538      	push	{r3, r4, r5, lr}
 801173a:	4d07      	ldr	r5, [pc, #28]	; (8011758 <_read_r+0x20>)
 801173c:	4604      	mov	r4, r0
 801173e:	4608      	mov	r0, r1
 8011740:	4611      	mov	r1, r2
 8011742:	2200      	movs	r2, #0
 8011744:	602a      	str	r2, [r5, #0]
 8011746:	461a      	mov	r2, r3
 8011748:	f7f3 faaa 	bl	8004ca0 <_read>
 801174c:	1c43      	adds	r3, r0, #1
 801174e:	d102      	bne.n	8011756 <_read_r+0x1e>
 8011750:	682b      	ldr	r3, [r5, #0]
 8011752:	b103      	cbz	r3, 8011756 <_read_r+0x1e>
 8011754:	6023      	str	r3, [r4, #0]
 8011756:	bd38      	pop	{r3, r4, r5, pc}
 8011758:	2000a3f0 	.word	0x2000a3f0

0801175c <__assert_func>:
 801175c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801175e:	4614      	mov	r4, r2
 8011760:	461a      	mov	r2, r3
 8011762:	4b09      	ldr	r3, [pc, #36]	; (8011788 <__assert_func+0x2c>)
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	4605      	mov	r5, r0
 8011768:	68d8      	ldr	r0, [r3, #12]
 801176a:	b14c      	cbz	r4, 8011780 <__assert_func+0x24>
 801176c:	4b07      	ldr	r3, [pc, #28]	; (801178c <__assert_func+0x30>)
 801176e:	9100      	str	r1, [sp, #0]
 8011770:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011774:	4906      	ldr	r1, [pc, #24]	; (8011790 <__assert_func+0x34>)
 8011776:	462b      	mov	r3, r5
 8011778:	f000 f80e 	bl	8011798 <fiprintf>
 801177c:	f7fd fcbc 	bl	800f0f8 <abort>
 8011780:	4b04      	ldr	r3, [pc, #16]	; (8011794 <__assert_func+0x38>)
 8011782:	461c      	mov	r4, r3
 8011784:	e7f3      	b.n	801176e <__assert_func+0x12>
 8011786:	bf00      	nop
 8011788:	20000010 	.word	0x20000010
 801178c:	08012294 	.word	0x08012294
 8011790:	080122a1 	.word	0x080122a1
 8011794:	080122cf 	.word	0x080122cf

08011798 <fiprintf>:
 8011798:	b40e      	push	{r1, r2, r3}
 801179a:	b503      	push	{r0, r1, lr}
 801179c:	4601      	mov	r1, r0
 801179e:	ab03      	add	r3, sp, #12
 80117a0:	4805      	ldr	r0, [pc, #20]	; (80117b8 <fiprintf+0x20>)
 80117a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80117a6:	6800      	ldr	r0, [r0, #0]
 80117a8:	9301      	str	r3, [sp, #4]
 80117aa:	f000 f843 	bl	8011834 <_vfiprintf_r>
 80117ae:	b002      	add	sp, #8
 80117b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80117b4:	b003      	add	sp, #12
 80117b6:	4770      	bx	lr
 80117b8:	20000010 	.word	0x20000010

080117bc <__ascii_mbtowc>:
 80117bc:	b082      	sub	sp, #8
 80117be:	b901      	cbnz	r1, 80117c2 <__ascii_mbtowc+0x6>
 80117c0:	a901      	add	r1, sp, #4
 80117c2:	b142      	cbz	r2, 80117d6 <__ascii_mbtowc+0x1a>
 80117c4:	b14b      	cbz	r3, 80117da <__ascii_mbtowc+0x1e>
 80117c6:	7813      	ldrb	r3, [r2, #0]
 80117c8:	600b      	str	r3, [r1, #0]
 80117ca:	7812      	ldrb	r2, [r2, #0]
 80117cc:	1e10      	subs	r0, r2, #0
 80117ce:	bf18      	it	ne
 80117d0:	2001      	movne	r0, #1
 80117d2:	b002      	add	sp, #8
 80117d4:	4770      	bx	lr
 80117d6:	4610      	mov	r0, r2
 80117d8:	e7fb      	b.n	80117d2 <__ascii_mbtowc+0x16>
 80117da:	f06f 0001 	mvn.w	r0, #1
 80117de:	e7f8      	b.n	80117d2 <__ascii_mbtowc+0x16>

080117e0 <__sfputc_r>:
 80117e0:	6893      	ldr	r3, [r2, #8]
 80117e2:	3b01      	subs	r3, #1
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	b410      	push	{r4}
 80117e8:	6093      	str	r3, [r2, #8]
 80117ea:	da08      	bge.n	80117fe <__sfputc_r+0x1e>
 80117ec:	6994      	ldr	r4, [r2, #24]
 80117ee:	42a3      	cmp	r3, r4
 80117f0:	db01      	blt.n	80117f6 <__sfputc_r+0x16>
 80117f2:	290a      	cmp	r1, #10
 80117f4:	d103      	bne.n	80117fe <__sfputc_r+0x1e>
 80117f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80117fa:	f000 b94b 	b.w	8011a94 <__swbuf_r>
 80117fe:	6813      	ldr	r3, [r2, #0]
 8011800:	1c58      	adds	r0, r3, #1
 8011802:	6010      	str	r0, [r2, #0]
 8011804:	7019      	strb	r1, [r3, #0]
 8011806:	4608      	mov	r0, r1
 8011808:	f85d 4b04 	ldr.w	r4, [sp], #4
 801180c:	4770      	bx	lr

0801180e <__sfputs_r>:
 801180e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011810:	4606      	mov	r6, r0
 8011812:	460f      	mov	r7, r1
 8011814:	4614      	mov	r4, r2
 8011816:	18d5      	adds	r5, r2, r3
 8011818:	42ac      	cmp	r4, r5
 801181a:	d101      	bne.n	8011820 <__sfputs_r+0x12>
 801181c:	2000      	movs	r0, #0
 801181e:	e007      	b.n	8011830 <__sfputs_r+0x22>
 8011820:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011824:	463a      	mov	r2, r7
 8011826:	4630      	mov	r0, r6
 8011828:	f7ff ffda 	bl	80117e0 <__sfputc_r>
 801182c:	1c43      	adds	r3, r0, #1
 801182e:	d1f3      	bne.n	8011818 <__sfputs_r+0xa>
 8011830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011834 <_vfiprintf_r>:
 8011834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011838:	460d      	mov	r5, r1
 801183a:	b09d      	sub	sp, #116	; 0x74
 801183c:	4614      	mov	r4, r2
 801183e:	4698      	mov	r8, r3
 8011840:	4606      	mov	r6, r0
 8011842:	b118      	cbz	r0, 801184c <_vfiprintf_r+0x18>
 8011844:	6983      	ldr	r3, [r0, #24]
 8011846:	b90b      	cbnz	r3, 801184c <_vfiprintf_r+0x18>
 8011848:	f7fd fcc2 	bl	800f1d0 <__sinit>
 801184c:	4b89      	ldr	r3, [pc, #548]	; (8011a74 <_vfiprintf_r+0x240>)
 801184e:	429d      	cmp	r5, r3
 8011850:	d11b      	bne.n	801188a <_vfiprintf_r+0x56>
 8011852:	6875      	ldr	r5, [r6, #4]
 8011854:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011856:	07d9      	lsls	r1, r3, #31
 8011858:	d405      	bmi.n	8011866 <_vfiprintf_r+0x32>
 801185a:	89ab      	ldrh	r3, [r5, #12]
 801185c:	059a      	lsls	r2, r3, #22
 801185e:	d402      	bmi.n	8011866 <_vfiprintf_r+0x32>
 8011860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011862:	f7fd fd78 	bl	800f356 <__retarget_lock_acquire_recursive>
 8011866:	89ab      	ldrh	r3, [r5, #12]
 8011868:	071b      	lsls	r3, r3, #28
 801186a:	d501      	bpl.n	8011870 <_vfiprintf_r+0x3c>
 801186c:	692b      	ldr	r3, [r5, #16]
 801186e:	b9eb      	cbnz	r3, 80118ac <_vfiprintf_r+0x78>
 8011870:	4629      	mov	r1, r5
 8011872:	4630      	mov	r0, r6
 8011874:	f000 f96e 	bl	8011b54 <__swsetup_r>
 8011878:	b1c0      	cbz	r0, 80118ac <_vfiprintf_r+0x78>
 801187a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801187c:	07dc      	lsls	r4, r3, #31
 801187e:	d50e      	bpl.n	801189e <_vfiprintf_r+0x6a>
 8011880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011884:	b01d      	add	sp, #116	; 0x74
 8011886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801188a:	4b7b      	ldr	r3, [pc, #492]	; (8011a78 <_vfiprintf_r+0x244>)
 801188c:	429d      	cmp	r5, r3
 801188e:	d101      	bne.n	8011894 <_vfiprintf_r+0x60>
 8011890:	68b5      	ldr	r5, [r6, #8]
 8011892:	e7df      	b.n	8011854 <_vfiprintf_r+0x20>
 8011894:	4b79      	ldr	r3, [pc, #484]	; (8011a7c <_vfiprintf_r+0x248>)
 8011896:	429d      	cmp	r5, r3
 8011898:	bf08      	it	eq
 801189a:	68f5      	ldreq	r5, [r6, #12]
 801189c:	e7da      	b.n	8011854 <_vfiprintf_r+0x20>
 801189e:	89ab      	ldrh	r3, [r5, #12]
 80118a0:	0598      	lsls	r0, r3, #22
 80118a2:	d4ed      	bmi.n	8011880 <_vfiprintf_r+0x4c>
 80118a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80118a6:	f7fd fd58 	bl	800f35a <__retarget_lock_release_recursive>
 80118aa:	e7e9      	b.n	8011880 <_vfiprintf_r+0x4c>
 80118ac:	2300      	movs	r3, #0
 80118ae:	9309      	str	r3, [sp, #36]	; 0x24
 80118b0:	2320      	movs	r3, #32
 80118b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80118b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80118ba:	2330      	movs	r3, #48	; 0x30
 80118bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011a80 <_vfiprintf_r+0x24c>
 80118c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80118c4:	f04f 0901 	mov.w	r9, #1
 80118c8:	4623      	mov	r3, r4
 80118ca:	469a      	mov	sl, r3
 80118cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80118d0:	b10a      	cbz	r2, 80118d6 <_vfiprintf_r+0xa2>
 80118d2:	2a25      	cmp	r2, #37	; 0x25
 80118d4:	d1f9      	bne.n	80118ca <_vfiprintf_r+0x96>
 80118d6:	ebba 0b04 	subs.w	fp, sl, r4
 80118da:	d00b      	beq.n	80118f4 <_vfiprintf_r+0xc0>
 80118dc:	465b      	mov	r3, fp
 80118de:	4622      	mov	r2, r4
 80118e0:	4629      	mov	r1, r5
 80118e2:	4630      	mov	r0, r6
 80118e4:	f7ff ff93 	bl	801180e <__sfputs_r>
 80118e8:	3001      	adds	r0, #1
 80118ea:	f000 80aa 	beq.w	8011a42 <_vfiprintf_r+0x20e>
 80118ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80118f0:	445a      	add	r2, fp
 80118f2:	9209      	str	r2, [sp, #36]	; 0x24
 80118f4:	f89a 3000 	ldrb.w	r3, [sl]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	f000 80a2 	beq.w	8011a42 <_vfiprintf_r+0x20e>
 80118fe:	2300      	movs	r3, #0
 8011900:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011904:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011908:	f10a 0a01 	add.w	sl, sl, #1
 801190c:	9304      	str	r3, [sp, #16]
 801190e:	9307      	str	r3, [sp, #28]
 8011910:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011914:	931a      	str	r3, [sp, #104]	; 0x68
 8011916:	4654      	mov	r4, sl
 8011918:	2205      	movs	r2, #5
 801191a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801191e:	4858      	ldr	r0, [pc, #352]	; (8011a80 <_vfiprintf_r+0x24c>)
 8011920:	f7ee fc5e 	bl	80001e0 <memchr>
 8011924:	9a04      	ldr	r2, [sp, #16]
 8011926:	b9d8      	cbnz	r0, 8011960 <_vfiprintf_r+0x12c>
 8011928:	06d1      	lsls	r1, r2, #27
 801192a:	bf44      	itt	mi
 801192c:	2320      	movmi	r3, #32
 801192e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011932:	0713      	lsls	r3, r2, #28
 8011934:	bf44      	itt	mi
 8011936:	232b      	movmi	r3, #43	; 0x2b
 8011938:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801193c:	f89a 3000 	ldrb.w	r3, [sl]
 8011940:	2b2a      	cmp	r3, #42	; 0x2a
 8011942:	d015      	beq.n	8011970 <_vfiprintf_r+0x13c>
 8011944:	9a07      	ldr	r2, [sp, #28]
 8011946:	4654      	mov	r4, sl
 8011948:	2000      	movs	r0, #0
 801194a:	f04f 0c0a 	mov.w	ip, #10
 801194e:	4621      	mov	r1, r4
 8011950:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011954:	3b30      	subs	r3, #48	; 0x30
 8011956:	2b09      	cmp	r3, #9
 8011958:	d94e      	bls.n	80119f8 <_vfiprintf_r+0x1c4>
 801195a:	b1b0      	cbz	r0, 801198a <_vfiprintf_r+0x156>
 801195c:	9207      	str	r2, [sp, #28]
 801195e:	e014      	b.n	801198a <_vfiprintf_r+0x156>
 8011960:	eba0 0308 	sub.w	r3, r0, r8
 8011964:	fa09 f303 	lsl.w	r3, r9, r3
 8011968:	4313      	orrs	r3, r2
 801196a:	9304      	str	r3, [sp, #16]
 801196c:	46a2      	mov	sl, r4
 801196e:	e7d2      	b.n	8011916 <_vfiprintf_r+0xe2>
 8011970:	9b03      	ldr	r3, [sp, #12]
 8011972:	1d19      	adds	r1, r3, #4
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	9103      	str	r1, [sp, #12]
 8011978:	2b00      	cmp	r3, #0
 801197a:	bfbb      	ittet	lt
 801197c:	425b      	neglt	r3, r3
 801197e:	f042 0202 	orrlt.w	r2, r2, #2
 8011982:	9307      	strge	r3, [sp, #28]
 8011984:	9307      	strlt	r3, [sp, #28]
 8011986:	bfb8      	it	lt
 8011988:	9204      	strlt	r2, [sp, #16]
 801198a:	7823      	ldrb	r3, [r4, #0]
 801198c:	2b2e      	cmp	r3, #46	; 0x2e
 801198e:	d10c      	bne.n	80119aa <_vfiprintf_r+0x176>
 8011990:	7863      	ldrb	r3, [r4, #1]
 8011992:	2b2a      	cmp	r3, #42	; 0x2a
 8011994:	d135      	bne.n	8011a02 <_vfiprintf_r+0x1ce>
 8011996:	9b03      	ldr	r3, [sp, #12]
 8011998:	1d1a      	adds	r2, r3, #4
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	9203      	str	r2, [sp, #12]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	bfb8      	it	lt
 80119a2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80119a6:	3402      	adds	r4, #2
 80119a8:	9305      	str	r3, [sp, #20]
 80119aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011a90 <_vfiprintf_r+0x25c>
 80119ae:	7821      	ldrb	r1, [r4, #0]
 80119b0:	2203      	movs	r2, #3
 80119b2:	4650      	mov	r0, sl
 80119b4:	f7ee fc14 	bl	80001e0 <memchr>
 80119b8:	b140      	cbz	r0, 80119cc <_vfiprintf_r+0x198>
 80119ba:	2340      	movs	r3, #64	; 0x40
 80119bc:	eba0 000a 	sub.w	r0, r0, sl
 80119c0:	fa03 f000 	lsl.w	r0, r3, r0
 80119c4:	9b04      	ldr	r3, [sp, #16]
 80119c6:	4303      	orrs	r3, r0
 80119c8:	3401      	adds	r4, #1
 80119ca:	9304      	str	r3, [sp, #16]
 80119cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80119d0:	482c      	ldr	r0, [pc, #176]	; (8011a84 <_vfiprintf_r+0x250>)
 80119d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80119d6:	2206      	movs	r2, #6
 80119d8:	f7ee fc02 	bl	80001e0 <memchr>
 80119dc:	2800      	cmp	r0, #0
 80119de:	d03f      	beq.n	8011a60 <_vfiprintf_r+0x22c>
 80119e0:	4b29      	ldr	r3, [pc, #164]	; (8011a88 <_vfiprintf_r+0x254>)
 80119e2:	bb1b      	cbnz	r3, 8011a2c <_vfiprintf_r+0x1f8>
 80119e4:	9b03      	ldr	r3, [sp, #12]
 80119e6:	3307      	adds	r3, #7
 80119e8:	f023 0307 	bic.w	r3, r3, #7
 80119ec:	3308      	adds	r3, #8
 80119ee:	9303      	str	r3, [sp, #12]
 80119f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119f2:	443b      	add	r3, r7
 80119f4:	9309      	str	r3, [sp, #36]	; 0x24
 80119f6:	e767      	b.n	80118c8 <_vfiprintf_r+0x94>
 80119f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80119fc:	460c      	mov	r4, r1
 80119fe:	2001      	movs	r0, #1
 8011a00:	e7a5      	b.n	801194e <_vfiprintf_r+0x11a>
 8011a02:	2300      	movs	r3, #0
 8011a04:	3401      	adds	r4, #1
 8011a06:	9305      	str	r3, [sp, #20]
 8011a08:	4619      	mov	r1, r3
 8011a0a:	f04f 0c0a 	mov.w	ip, #10
 8011a0e:	4620      	mov	r0, r4
 8011a10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011a14:	3a30      	subs	r2, #48	; 0x30
 8011a16:	2a09      	cmp	r2, #9
 8011a18:	d903      	bls.n	8011a22 <_vfiprintf_r+0x1ee>
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d0c5      	beq.n	80119aa <_vfiprintf_r+0x176>
 8011a1e:	9105      	str	r1, [sp, #20]
 8011a20:	e7c3      	b.n	80119aa <_vfiprintf_r+0x176>
 8011a22:	fb0c 2101 	mla	r1, ip, r1, r2
 8011a26:	4604      	mov	r4, r0
 8011a28:	2301      	movs	r3, #1
 8011a2a:	e7f0      	b.n	8011a0e <_vfiprintf_r+0x1da>
 8011a2c:	ab03      	add	r3, sp, #12
 8011a2e:	9300      	str	r3, [sp, #0]
 8011a30:	462a      	mov	r2, r5
 8011a32:	4b16      	ldr	r3, [pc, #88]	; (8011a8c <_vfiprintf_r+0x258>)
 8011a34:	a904      	add	r1, sp, #16
 8011a36:	4630      	mov	r0, r6
 8011a38:	f7fd fe36 	bl	800f6a8 <_printf_float>
 8011a3c:	4607      	mov	r7, r0
 8011a3e:	1c78      	adds	r0, r7, #1
 8011a40:	d1d6      	bne.n	80119f0 <_vfiprintf_r+0x1bc>
 8011a42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011a44:	07d9      	lsls	r1, r3, #31
 8011a46:	d405      	bmi.n	8011a54 <_vfiprintf_r+0x220>
 8011a48:	89ab      	ldrh	r3, [r5, #12]
 8011a4a:	059a      	lsls	r2, r3, #22
 8011a4c:	d402      	bmi.n	8011a54 <_vfiprintf_r+0x220>
 8011a4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011a50:	f7fd fc83 	bl	800f35a <__retarget_lock_release_recursive>
 8011a54:	89ab      	ldrh	r3, [r5, #12]
 8011a56:	065b      	lsls	r3, r3, #25
 8011a58:	f53f af12 	bmi.w	8011880 <_vfiprintf_r+0x4c>
 8011a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011a5e:	e711      	b.n	8011884 <_vfiprintf_r+0x50>
 8011a60:	ab03      	add	r3, sp, #12
 8011a62:	9300      	str	r3, [sp, #0]
 8011a64:	462a      	mov	r2, r5
 8011a66:	4b09      	ldr	r3, [pc, #36]	; (8011a8c <_vfiprintf_r+0x258>)
 8011a68:	a904      	add	r1, sp, #16
 8011a6a:	4630      	mov	r0, r6
 8011a6c:	f7fe f8c0 	bl	800fbf0 <_printf_i>
 8011a70:	e7e4      	b.n	8011a3c <_vfiprintf_r+0x208>
 8011a72:	bf00      	nop
 8011a74:	08012030 	.word	0x08012030
 8011a78:	08012050 	.word	0x08012050
 8011a7c:	08012010 	.word	0x08012010
 8011a80:	080122da 	.word	0x080122da
 8011a84:	080122e4 	.word	0x080122e4
 8011a88:	0800f6a9 	.word	0x0800f6a9
 8011a8c:	0801180f 	.word	0x0801180f
 8011a90:	080122e0 	.word	0x080122e0

08011a94 <__swbuf_r>:
 8011a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011a96:	460e      	mov	r6, r1
 8011a98:	4614      	mov	r4, r2
 8011a9a:	4605      	mov	r5, r0
 8011a9c:	b118      	cbz	r0, 8011aa6 <__swbuf_r+0x12>
 8011a9e:	6983      	ldr	r3, [r0, #24]
 8011aa0:	b90b      	cbnz	r3, 8011aa6 <__swbuf_r+0x12>
 8011aa2:	f7fd fb95 	bl	800f1d0 <__sinit>
 8011aa6:	4b21      	ldr	r3, [pc, #132]	; (8011b2c <__swbuf_r+0x98>)
 8011aa8:	429c      	cmp	r4, r3
 8011aaa:	d12b      	bne.n	8011b04 <__swbuf_r+0x70>
 8011aac:	686c      	ldr	r4, [r5, #4]
 8011aae:	69a3      	ldr	r3, [r4, #24]
 8011ab0:	60a3      	str	r3, [r4, #8]
 8011ab2:	89a3      	ldrh	r3, [r4, #12]
 8011ab4:	071a      	lsls	r2, r3, #28
 8011ab6:	d52f      	bpl.n	8011b18 <__swbuf_r+0x84>
 8011ab8:	6923      	ldr	r3, [r4, #16]
 8011aba:	b36b      	cbz	r3, 8011b18 <__swbuf_r+0x84>
 8011abc:	6923      	ldr	r3, [r4, #16]
 8011abe:	6820      	ldr	r0, [r4, #0]
 8011ac0:	1ac0      	subs	r0, r0, r3
 8011ac2:	6963      	ldr	r3, [r4, #20]
 8011ac4:	b2f6      	uxtb	r6, r6
 8011ac6:	4283      	cmp	r3, r0
 8011ac8:	4637      	mov	r7, r6
 8011aca:	dc04      	bgt.n	8011ad6 <__swbuf_r+0x42>
 8011acc:	4621      	mov	r1, r4
 8011ace:	4628      	mov	r0, r5
 8011ad0:	f7ff fa3a 	bl	8010f48 <_fflush_r>
 8011ad4:	bb30      	cbnz	r0, 8011b24 <__swbuf_r+0x90>
 8011ad6:	68a3      	ldr	r3, [r4, #8]
 8011ad8:	3b01      	subs	r3, #1
 8011ada:	60a3      	str	r3, [r4, #8]
 8011adc:	6823      	ldr	r3, [r4, #0]
 8011ade:	1c5a      	adds	r2, r3, #1
 8011ae0:	6022      	str	r2, [r4, #0]
 8011ae2:	701e      	strb	r6, [r3, #0]
 8011ae4:	6963      	ldr	r3, [r4, #20]
 8011ae6:	3001      	adds	r0, #1
 8011ae8:	4283      	cmp	r3, r0
 8011aea:	d004      	beq.n	8011af6 <__swbuf_r+0x62>
 8011aec:	89a3      	ldrh	r3, [r4, #12]
 8011aee:	07db      	lsls	r3, r3, #31
 8011af0:	d506      	bpl.n	8011b00 <__swbuf_r+0x6c>
 8011af2:	2e0a      	cmp	r6, #10
 8011af4:	d104      	bne.n	8011b00 <__swbuf_r+0x6c>
 8011af6:	4621      	mov	r1, r4
 8011af8:	4628      	mov	r0, r5
 8011afa:	f7ff fa25 	bl	8010f48 <_fflush_r>
 8011afe:	b988      	cbnz	r0, 8011b24 <__swbuf_r+0x90>
 8011b00:	4638      	mov	r0, r7
 8011b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b04:	4b0a      	ldr	r3, [pc, #40]	; (8011b30 <__swbuf_r+0x9c>)
 8011b06:	429c      	cmp	r4, r3
 8011b08:	d101      	bne.n	8011b0e <__swbuf_r+0x7a>
 8011b0a:	68ac      	ldr	r4, [r5, #8]
 8011b0c:	e7cf      	b.n	8011aae <__swbuf_r+0x1a>
 8011b0e:	4b09      	ldr	r3, [pc, #36]	; (8011b34 <__swbuf_r+0xa0>)
 8011b10:	429c      	cmp	r4, r3
 8011b12:	bf08      	it	eq
 8011b14:	68ec      	ldreq	r4, [r5, #12]
 8011b16:	e7ca      	b.n	8011aae <__swbuf_r+0x1a>
 8011b18:	4621      	mov	r1, r4
 8011b1a:	4628      	mov	r0, r5
 8011b1c:	f000 f81a 	bl	8011b54 <__swsetup_r>
 8011b20:	2800      	cmp	r0, #0
 8011b22:	d0cb      	beq.n	8011abc <__swbuf_r+0x28>
 8011b24:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011b28:	e7ea      	b.n	8011b00 <__swbuf_r+0x6c>
 8011b2a:	bf00      	nop
 8011b2c:	08012030 	.word	0x08012030
 8011b30:	08012050 	.word	0x08012050
 8011b34:	08012010 	.word	0x08012010

08011b38 <__ascii_wctomb>:
 8011b38:	b149      	cbz	r1, 8011b4e <__ascii_wctomb+0x16>
 8011b3a:	2aff      	cmp	r2, #255	; 0xff
 8011b3c:	bf85      	ittet	hi
 8011b3e:	238a      	movhi	r3, #138	; 0x8a
 8011b40:	6003      	strhi	r3, [r0, #0]
 8011b42:	700a      	strbls	r2, [r1, #0]
 8011b44:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011b48:	bf98      	it	ls
 8011b4a:	2001      	movls	r0, #1
 8011b4c:	4770      	bx	lr
 8011b4e:	4608      	mov	r0, r1
 8011b50:	4770      	bx	lr
	...

08011b54 <__swsetup_r>:
 8011b54:	4b32      	ldr	r3, [pc, #200]	; (8011c20 <__swsetup_r+0xcc>)
 8011b56:	b570      	push	{r4, r5, r6, lr}
 8011b58:	681d      	ldr	r5, [r3, #0]
 8011b5a:	4606      	mov	r6, r0
 8011b5c:	460c      	mov	r4, r1
 8011b5e:	b125      	cbz	r5, 8011b6a <__swsetup_r+0x16>
 8011b60:	69ab      	ldr	r3, [r5, #24]
 8011b62:	b913      	cbnz	r3, 8011b6a <__swsetup_r+0x16>
 8011b64:	4628      	mov	r0, r5
 8011b66:	f7fd fb33 	bl	800f1d0 <__sinit>
 8011b6a:	4b2e      	ldr	r3, [pc, #184]	; (8011c24 <__swsetup_r+0xd0>)
 8011b6c:	429c      	cmp	r4, r3
 8011b6e:	d10f      	bne.n	8011b90 <__swsetup_r+0x3c>
 8011b70:	686c      	ldr	r4, [r5, #4]
 8011b72:	89a3      	ldrh	r3, [r4, #12]
 8011b74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011b78:	0719      	lsls	r1, r3, #28
 8011b7a:	d42c      	bmi.n	8011bd6 <__swsetup_r+0x82>
 8011b7c:	06dd      	lsls	r5, r3, #27
 8011b7e:	d411      	bmi.n	8011ba4 <__swsetup_r+0x50>
 8011b80:	2309      	movs	r3, #9
 8011b82:	6033      	str	r3, [r6, #0]
 8011b84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011b88:	81a3      	strh	r3, [r4, #12]
 8011b8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b8e:	e03e      	b.n	8011c0e <__swsetup_r+0xba>
 8011b90:	4b25      	ldr	r3, [pc, #148]	; (8011c28 <__swsetup_r+0xd4>)
 8011b92:	429c      	cmp	r4, r3
 8011b94:	d101      	bne.n	8011b9a <__swsetup_r+0x46>
 8011b96:	68ac      	ldr	r4, [r5, #8]
 8011b98:	e7eb      	b.n	8011b72 <__swsetup_r+0x1e>
 8011b9a:	4b24      	ldr	r3, [pc, #144]	; (8011c2c <__swsetup_r+0xd8>)
 8011b9c:	429c      	cmp	r4, r3
 8011b9e:	bf08      	it	eq
 8011ba0:	68ec      	ldreq	r4, [r5, #12]
 8011ba2:	e7e6      	b.n	8011b72 <__swsetup_r+0x1e>
 8011ba4:	0758      	lsls	r0, r3, #29
 8011ba6:	d512      	bpl.n	8011bce <__swsetup_r+0x7a>
 8011ba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011baa:	b141      	cbz	r1, 8011bbe <__swsetup_r+0x6a>
 8011bac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011bb0:	4299      	cmp	r1, r3
 8011bb2:	d002      	beq.n	8011bba <__swsetup_r+0x66>
 8011bb4:	4630      	mov	r0, r6
 8011bb6:	f7fd fbf7 	bl	800f3a8 <_free_r>
 8011bba:	2300      	movs	r3, #0
 8011bbc:	6363      	str	r3, [r4, #52]	; 0x34
 8011bbe:	89a3      	ldrh	r3, [r4, #12]
 8011bc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011bc4:	81a3      	strh	r3, [r4, #12]
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	6063      	str	r3, [r4, #4]
 8011bca:	6923      	ldr	r3, [r4, #16]
 8011bcc:	6023      	str	r3, [r4, #0]
 8011bce:	89a3      	ldrh	r3, [r4, #12]
 8011bd0:	f043 0308 	orr.w	r3, r3, #8
 8011bd4:	81a3      	strh	r3, [r4, #12]
 8011bd6:	6923      	ldr	r3, [r4, #16]
 8011bd8:	b94b      	cbnz	r3, 8011bee <__swsetup_r+0x9a>
 8011bda:	89a3      	ldrh	r3, [r4, #12]
 8011bdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011be4:	d003      	beq.n	8011bee <__swsetup_r+0x9a>
 8011be6:	4621      	mov	r1, r4
 8011be8:	4630      	mov	r0, r6
 8011bea:	f000 f847 	bl	8011c7c <__smakebuf_r>
 8011bee:	89a0      	ldrh	r0, [r4, #12]
 8011bf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011bf4:	f010 0301 	ands.w	r3, r0, #1
 8011bf8:	d00a      	beq.n	8011c10 <__swsetup_r+0xbc>
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	60a3      	str	r3, [r4, #8]
 8011bfe:	6963      	ldr	r3, [r4, #20]
 8011c00:	425b      	negs	r3, r3
 8011c02:	61a3      	str	r3, [r4, #24]
 8011c04:	6923      	ldr	r3, [r4, #16]
 8011c06:	b943      	cbnz	r3, 8011c1a <__swsetup_r+0xc6>
 8011c08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011c0c:	d1ba      	bne.n	8011b84 <__swsetup_r+0x30>
 8011c0e:	bd70      	pop	{r4, r5, r6, pc}
 8011c10:	0781      	lsls	r1, r0, #30
 8011c12:	bf58      	it	pl
 8011c14:	6963      	ldrpl	r3, [r4, #20]
 8011c16:	60a3      	str	r3, [r4, #8]
 8011c18:	e7f4      	b.n	8011c04 <__swsetup_r+0xb0>
 8011c1a:	2000      	movs	r0, #0
 8011c1c:	e7f7      	b.n	8011c0e <__swsetup_r+0xba>
 8011c1e:	bf00      	nop
 8011c20:	20000010 	.word	0x20000010
 8011c24:	08012030 	.word	0x08012030
 8011c28:	08012050 	.word	0x08012050
 8011c2c:	08012010 	.word	0x08012010

08011c30 <__swhatbuf_r>:
 8011c30:	b570      	push	{r4, r5, r6, lr}
 8011c32:	460e      	mov	r6, r1
 8011c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011c38:	2900      	cmp	r1, #0
 8011c3a:	b096      	sub	sp, #88	; 0x58
 8011c3c:	4614      	mov	r4, r2
 8011c3e:	461d      	mov	r5, r3
 8011c40:	da08      	bge.n	8011c54 <__swhatbuf_r+0x24>
 8011c42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011c46:	2200      	movs	r2, #0
 8011c48:	602a      	str	r2, [r5, #0]
 8011c4a:	061a      	lsls	r2, r3, #24
 8011c4c:	d410      	bmi.n	8011c70 <__swhatbuf_r+0x40>
 8011c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c52:	e00e      	b.n	8011c72 <__swhatbuf_r+0x42>
 8011c54:	466a      	mov	r2, sp
 8011c56:	f000 f851 	bl	8011cfc <_fstat_r>
 8011c5a:	2800      	cmp	r0, #0
 8011c5c:	dbf1      	blt.n	8011c42 <__swhatbuf_r+0x12>
 8011c5e:	9a01      	ldr	r2, [sp, #4]
 8011c60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011c64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011c68:	425a      	negs	r2, r3
 8011c6a:	415a      	adcs	r2, r3
 8011c6c:	602a      	str	r2, [r5, #0]
 8011c6e:	e7ee      	b.n	8011c4e <__swhatbuf_r+0x1e>
 8011c70:	2340      	movs	r3, #64	; 0x40
 8011c72:	2000      	movs	r0, #0
 8011c74:	6023      	str	r3, [r4, #0]
 8011c76:	b016      	add	sp, #88	; 0x58
 8011c78:	bd70      	pop	{r4, r5, r6, pc}
	...

08011c7c <__smakebuf_r>:
 8011c7c:	898b      	ldrh	r3, [r1, #12]
 8011c7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011c80:	079d      	lsls	r5, r3, #30
 8011c82:	4606      	mov	r6, r0
 8011c84:	460c      	mov	r4, r1
 8011c86:	d507      	bpl.n	8011c98 <__smakebuf_r+0x1c>
 8011c88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011c8c:	6023      	str	r3, [r4, #0]
 8011c8e:	6123      	str	r3, [r4, #16]
 8011c90:	2301      	movs	r3, #1
 8011c92:	6163      	str	r3, [r4, #20]
 8011c94:	b002      	add	sp, #8
 8011c96:	bd70      	pop	{r4, r5, r6, pc}
 8011c98:	ab01      	add	r3, sp, #4
 8011c9a:	466a      	mov	r2, sp
 8011c9c:	f7ff ffc8 	bl	8011c30 <__swhatbuf_r>
 8011ca0:	9900      	ldr	r1, [sp, #0]
 8011ca2:	4605      	mov	r5, r0
 8011ca4:	4630      	mov	r0, r6
 8011ca6:	f7fd fbeb 	bl	800f480 <_malloc_r>
 8011caa:	b948      	cbnz	r0, 8011cc0 <__smakebuf_r+0x44>
 8011cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011cb0:	059a      	lsls	r2, r3, #22
 8011cb2:	d4ef      	bmi.n	8011c94 <__smakebuf_r+0x18>
 8011cb4:	f023 0303 	bic.w	r3, r3, #3
 8011cb8:	f043 0302 	orr.w	r3, r3, #2
 8011cbc:	81a3      	strh	r3, [r4, #12]
 8011cbe:	e7e3      	b.n	8011c88 <__smakebuf_r+0xc>
 8011cc0:	4b0d      	ldr	r3, [pc, #52]	; (8011cf8 <__smakebuf_r+0x7c>)
 8011cc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8011cc4:	89a3      	ldrh	r3, [r4, #12]
 8011cc6:	6020      	str	r0, [r4, #0]
 8011cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011ccc:	81a3      	strh	r3, [r4, #12]
 8011cce:	9b00      	ldr	r3, [sp, #0]
 8011cd0:	6163      	str	r3, [r4, #20]
 8011cd2:	9b01      	ldr	r3, [sp, #4]
 8011cd4:	6120      	str	r0, [r4, #16]
 8011cd6:	b15b      	cbz	r3, 8011cf0 <__smakebuf_r+0x74>
 8011cd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011cdc:	4630      	mov	r0, r6
 8011cde:	f000 f81f 	bl	8011d20 <_isatty_r>
 8011ce2:	b128      	cbz	r0, 8011cf0 <__smakebuf_r+0x74>
 8011ce4:	89a3      	ldrh	r3, [r4, #12]
 8011ce6:	f023 0303 	bic.w	r3, r3, #3
 8011cea:	f043 0301 	orr.w	r3, r3, #1
 8011cee:	81a3      	strh	r3, [r4, #12]
 8011cf0:	89a0      	ldrh	r0, [r4, #12]
 8011cf2:	4305      	orrs	r5, r0
 8011cf4:	81a5      	strh	r5, [r4, #12]
 8011cf6:	e7cd      	b.n	8011c94 <__smakebuf_r+0x18>
 8011cf8:	0800f169 	.word	0x0800f169

08011cfc <_fstat_r>:
 8011cfc:	b538      	push	{r3, r4, r5, lr}
 8011cfe:	4d07      	ldr	r5, [pc, #28]	; (8011d1c <_fstat_r+0x20>)
 8011d00:	2300      	movs	r3, #0
 8011d02:	4604      	mov	r4, r0
 8011d04:	4608      	mov	r0, r1
 8011d06:	4611      	mov	r1, r2
 8011d08:	602b      	str	r3, [r5, #0]
 8011d0a:	f7f3 f80e 	bl	8004d2a <_fstat>
 8011d0e:	1c43      	adds	r3, r0, #1
 8011d10:	d102      	bne.n	8011d18 <_fstat_r+0x1c>
 8011d12:	682b      	ldr	r3, [r5, #0]
 8011d14:	b103      	cbz	r3, 8011d18 <_fstat_r+0x1c>
 8011d16:	6023      	str	r3, [r4, #0]
 8011d18:	bd38      	pop	{r3, r4, r5, pc}
 8011d1a:	bf00      	nop
 8011d1c:	2000a3f0 	.word	0x2000a3f0

08011d20 <_isatty_r>:
 8011d20:	b538      	push	{r3, r4, r5, lr}
 8011d22:	4d06      	ldr	r5, [pc, #24]	; (8011d3c <_isatty_r+0x1c>)
 8011d24:	2300      	movs	r3, #0
 8011d26:	4604      	mov	r4, r0
 8011d28:	4608      	mov	r0, r1
 8011d2a:	602b      	str	r3, [r5, #0]
 8011d2c:	f7f3 f80d 	bl	8004d4a <_isatty>
 8011d30:	1c43      	adds	r3, r0, #1
 8011d32:	d102      	bne.n	8011d3a <_isatty_r+0x1a>
 8011d34:	682b      	ldr	r3, [r5, #0]
 8011d36:	b103      	cbz	r3, 8011d3a <_isatty_r+0x1a>
 8011d38:	6023      	str	r3, [r4, #0]
 8011d3a:	bd38      	pop	{r3, r4, r5, pc}
 8011d3c:	2000a3f0 	.word	0x2000a3f0

08011d40 <_init>:
 8011d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d42:	bf00      	nop
 8011d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d46:	bc08      	pop	{r3}
 8011d48:	469e      	mov	lr, r3
 8011d4a:	4770      	bx	lr

08011d4c <_fini>:
 8011d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d4e:	bf00      	nop
 8011d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d52:	bc08      	pop	{r3}
 8011d54:	469e      	mov	lr, r3
 8011d56:	4770      	bx	lr
